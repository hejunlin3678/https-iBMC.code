import { DomSanitizer } from '@angular/platform-browser';
import { TiMessageService, TiMessageType, TiModalRef } from '@cloud/tiny3';
export interface TpGoAndBackConfig {
    /**
     * 去绑定|认证|充值跳转链接
     *
     * v10.1.3及之前版本存在XSS攻击(url类型)风险，v10.1.4 版本做了安全处理，已不存在安全问题，建议业务尽快升级版本。
     */
    url?: string;
    /**
     * 标准key:value的参数，总体对象形式
     */
    params?: {
        [propName: string]: string;
    };
    /**
     * @ignore
     * 受限组件词条
     */
    words?: any;
    /**
     * @ignore
     * url是否添加params（restrict受限组件需略过goToUrl方法中对url的处理）
     * 10.1.2 版本添加
     */
    addUrlParams?: boolean;
    /**
     * 点击已绑定|充值|认证按钮的函数回调接口，该函数存在两个参数（instances,openAlert）：
     *
     * 1.instances:弹窗的示例，可调用instances.dismiss()方法关闭弹窗<br>
     * 2.openAlert(alertType):控制提示信息的种类和显示隐藏的方法；alertType有两个可选值：
     *
     * a."error"：系统繁忙状态；b."warn"：未绑定|认证|充值状态
     */
    confirmFn?(instances?: TiModalRef, openAlertFn?: Function): void;
    /**
     * 弹窗关闭时的函数回调接口，该函数存在一个参数（instances）
     * 只有一级弹窗时，关闭回调在一级弹窗关闭时执行；存在二级弹窗时，关闭回调在二级弹窗关闭时执行
     * 10.1.4 版本添加
     */
    closeFn?(instances?: TiModalRef): void;
    /**
     * 允许有多余的属性字段
     */
    [propName: string]: any;
}
/**
 * 组件内部封装基类服务，只供内部使用
 */
export declare class TpGoandbackService {
    protected tiMessage: TiMessageService;
    private domSanitizer;
    /**
     * 获取词条
     */
    protected words: any;
    /**
     * 弹窗类型
     */
    protected firstMessageType: TiMessageType;
    constructor(tiMessage: TiMessageService, domSanitizer: DomSanitizer);
    open(config?: TpGoAndBackConfig): void;
    /**
     * 触发去绑定|认证|充值按钮事件
     * @param configObj 用户配置对象
     */
    private firstMessage;
    /**
     * 触发已绑定|认证|充值按钮事件
     * @param configObj 用户配置对象
     * @param handleUrl 跳转链接
     */
    private secondMessage;
    /**
     * @param definedUrl 跳转链接
     * @param params 链接参数
     */
    private goToUrl;
}
