import { ElementRef, EventEmitter, NgZone, QueryList, Renderer2, SimpleChanges } from '@angular/core';
import { TiBaseComponent } from '@cloud/tiny3';
import { TpCardComponent } from '../card/TpCardModule';
/**
 * @ignore
 * 规范提出，云业务通用场景不会使用该组件，10.1.3起，在官网隐藏该组件。
 */
export interface TpSlidecardsPaginationEvent {
    currentPage: number;
    pageSize: number;
    totalPage: number;
    /**
     * 允许有多余的属性字段
     */
    [propName: string]: any;
}
/**
 * @ignore
 * 规范提出，云业务通用场景不会使用该组件，10.1.3起，在官网隐藏该组件。
 * 滚动卡片列表，功能与轮播图相似，可以显示多屏展示卡片的效果，并且还提供了增加、删除卡片功能。详情参考测试用例。
 *
 * <example-url>../tinyplus3demo/#/slidecards/slidecards-all</example-url>
 */
export declare class TpSlidecardsComponent extends TiBaseComponent {
    protected hostRef: ElementRef;
    private renderer2;
    private zone;
    /**
     * 当前选中卡片在数组中的下标
     */
    currentIndex: number;
    /**
     * 当前页改变事件
     */
    readonly pageChange: EventEmitter<TpSlidecardsPaginationEvent>;
    /**
     * @ignore
     * 卡片的可视区
     */
    listWrapperEleRef: ElementRef;
    /**
     * @ignore
     * 卡片父元素，用于监听内容变化
     */
    listEleRef: ElementRef;
    /**
     * @ignore
     * 所有的卡片集合
     */
    cardComRefs: QueryList<TpCardComponent>;
    /**
     * @ignore
     * 当前页
     */
    currentPage: number;
    /**
     * 每个卡片的宽度，用于计算分页
     */
    private cardWidth;
    /**
     * 卡片之间的距离，用于计算分页
     */
    private cardSpan;
    /**
     * @ignore
     * 卡片父元素的偏移距离，用于控制卡片左右滑动
     */
    left: string;
    /**
     * @ignore
     * 分页页码显示数据
     */
    pageList: Array<string | number>;
    /**
     * 每页卡片数
     */
    private pageSize;
    /**
     * @ignore
     * 分页总页数
     */
    totalPage: number;
    /**
     * 总的卡片数量
     */
    private totalCard;
    private unlistenResize;
    private listObserver;
    constructor(hostRef: ElementRef, renderer2: Renderer2, zone: NgZone);
    ngOnInit(): void;
    /**
     * 因为初始化要展示当前索引卡片，所以在初始化后先计算一次分页，然后显示currentIndex卡片
     * 分页的计算依赖视图可视区的宽度，视图加载完成后才能计算，
     * 分页计算后，会改变数据，所以用setTimeout。
     *  总卡片数及cardsComRef 长度， pageSize = 容器宽度/（卡片宽度 + 卡片间的距离）
     */
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * 是否能进行分页计算
     * @returns boolean
     */
    private canCalculatePaging;
    /**
     * 先计算分页每页的卡片数pageSize，再计算总页数totalPage
     */
    private calculatePaging;
    /**
     * 计算分页总页数
     */
    private calculateTotalPage;
    /**
     * 计算一次显示的卡片数
     */
    private calculatePageSize;
    /**
     * 生成分页器显示的数组
     */
    private generatePagesArray;
    /**
     * 指定页码翻页
     * @param pageNum 跳转到的页码
     * @ignore
     */
    goPage(pageNum: number | string): void;
    /**
     * 向前跳转一页
     * @ignore
     */
    goPrev(): void;
    /**
     * 向后跳转一页
     * @ignore
     */
    goNext(): void;
    /**
     * 展示指定索引的卡片，在初始化及currentIndex 改变时，如果指定索引不在当前页，跳转到能显示c索引对应卡片的页码
     */
    private showCurrentCard;
}
