import { EventEmitter, SimpleChanges, ElementRef, Renderer2, TemplateRef } from '@angular/core';
import { TiBaseComponent } from '@cloud/tiny3';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
export interface TpLeftmenuthinItem {
    /**
     * 设置当前菜单项对应的路由，与 Router.navigate方法的第一个参数一样
     */
    router: Array<any>;
    /**
     * 设置当前菜单项对应路由的配置信息，与 Router.navigate方法的第二个参数一样
     */
    routerExtras?: NavigationExtras;
    /**
     * 设置一个router路由列表，当该列表中的路由被激活时，其对应的菜单项被激活处于高亮状态。
     * 其使用场景为多个路由对应同一个左侧菜单项。
     *
     * routerList 数组中每一个元素与 Router.navigate方法的第一个参数一样
     */
    routerList?: Array<Array<any>>;
    /**
     * 选项label
     */
    label: string;
    /**
     * 选项图标名称
     */
    iconName?: string;
    /**
     * 非云服务或非入库图标使用展示
     *
     * 10.1.0 新增
     */
    customizeIcon?: TemplateRef<any>;
    /**
     * 允许有多余的属性字段
     */
    [propName: string]: any;
}
/**
 * 组件功能与leftMenu组件相似。
 *
 * <example-url>../tinyplus3demo/#/leftmenuthin/leftmenuthin-all</example-url>
 */
export declare class TpLeftmenuthinComponent extends TiBaseComponent {
    private router;
    private activeRoute;
    protected hostRef: ElementRef;
    protected renderer: Renderer2;
    /**
     * 设置激活菜单项。接口传入的值的集合中的一个(item)
     *
     * 此接口是双向绑定的，设置时中括号“[]”和圆括号“()”要同时使用
     */
    active: TpLeftmenuthinItem;
    /**
     * 激活菜单项改变时向外通知
     */
    readonly activeChange: EventEmitter<TpLeftmenuthinItem>;
    /**
     * 点击菜单项触发此事件
     */
    readonly select: EventEmitter<TpLeftmenuthinItem>;
    /**
     * 控制右侧内容区的刷新
     *
     * 注意：当重复点击当前激活菜单项时，需要刷新右侧内容区，为了实现此功能设置了该接口；
     * 该接口是双向绑定的，当重复点击当前激活菜单项时，reloadState的值会经历 true(上次的值) -> false -> true
     * 的变化过程，开发者给改接口与其右侧区域容器上ngIf接口绑定的是同一个变量，所以ngIf的值也会经历同样的变化，
     * 从而做到右侧内容区的刷新。
     */
    reloadState: boolean;
    /**
     * 菜单数据列表
     */
    items: Array<TpLeftmenuthinItem>;
    /**
     * 右侧内容区是否需要刷新的状态值改变时向外通知
     */
    readonly reloadStateChange: EventEmitter<boolean>;
    /**
     * @ignore
     */
    readonly resolvedPromise: Promise<any>;
    /**
     * 标志量，是否为url改变(需要去改变active)
     */
    private isUrlChange;
    private navigationSubscription;
    constructor(router: Router, activeRoute: ActivatedRoute, hostRef: ElementRef, renderer: Renderer2);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * @ignore
     * 模板中使用
     */
    selectFn(item: any): void;
    /**
     * @ignore
     * 点击当前选中项时，触发内容区重载
     * @param item 当前点击项
     */
    triggerReload(item: TpLeftmenuthinItem): void;
    private navigate;
    private getNavigationExtras;
    private getActiveItemByUrl;
    private isActived;
    private getRelativeRoute;
    private isMatchCurrentUrl;
    private link;
}
