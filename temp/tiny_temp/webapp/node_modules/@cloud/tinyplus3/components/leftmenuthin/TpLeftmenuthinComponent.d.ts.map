{"version":3,"file":"TpLeftmenuthinComponent.d.ts","sources":["TpLeftmenuthinComponent.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, SimpleChanges, ElementRef, Renderer2, TemplateRef } from '@angular/core';\r\nimport { TiBaseComponent } from '@cloud/tiny3';\r\nimport { ActivatedRoute, NavigationExtras, Router } from '@angular/router';\r\nexport interface TpLeftmenuthinItem {\r\n    /**\r\n     * 设置当前菜单项对应的路由，与 Router.navigate方法的第一个参数一样\r\n     */\r\n    router: Array<any>;\r\n    /**\r\n     * 设置当前菜单项对应路由的配置信息，与 Router.navigate方法的第二个参数一样\r\n     */\r\n    routerExtras?: NavigationExtras;\r\n    /**\r\n     * 设置一个router路由列表，当该列表中的路由被激活时，其对应的菜单项被激活处于高亮状态。\r\n     * 其使用场景为多个路由对应同一个左侧菜单项。\r\n     *\r\n     * routerList 数组中每一个元素与 Router.navigate方法的第一个参数一样\r\n     */\r\n    routerList?: Array<Array<any>>;\r\n    /**\r\n     * 选项label\r\n     */\r\n    label: string;\r\n    /**\r\n     * 选项图标名称\r\n     */\r\n    iconName?: string;\r\n    /**\r\n     * 非云服务或非入库图标使用展示\r\n     *\r\n     * 10.1.0 新增\r\n     */\r\n    customizeIcon?: TemplateRef<any>;\r\n    /**\r\n     * 允许有多余的属性字段\r\n     */\r\n    [propName: string]: any;\r\n}\r\n/**\r\n * 组件功能与leftMenu组件相似。\r\n *\r\n * <example-url>../tinyplus3demo/#/leftmenuthin/leftmenuthin-all</example-url>\r\n */\r\nexport declare class TpLeftmenuthinComponent extends TiBaseComponent {\r\n    private router;\r\n    private activeRoute;\r\n    protected hostRef: ElementRef;\r\n    protected renderer: Renderer2;\r\n    /**\r\n     * 设置激活菜单项。接口传入的值的集合中的一个(item)\r\n     *\r\n     * 此接口是双向绑定的，设置时中括号“[]”和圆括号“()”要同时使用\r\n     */\r\n    active: TpLeftmenuthinItem;\r\n    /**\r\n     * 激活菜单项改变时向外通知\r\n     */\r\n    readonly activeChange: EventEmitter<TpLeftmenuthinItem>;\r\n    /**\r\n     * 点击菜单项触发此事件\r\n     */\r\n    readonly select: EventEmitter<TpLeftmenuthinItem>;\r\n    /**\r\n     * 控制右侧内容区的刷新\r\n     *\r\n     * 注意：当重复点击当前激活菜单项时，需要刷新右侧内容区，为了实现此功能设置了该接口；\r\n     * 该接口是双向绑定的，当重复点击当前激活菜单项时，reloadState的值会经历 true(上次的值) -> false -> true\r\n     * 的变化过程，开发者给改接口与其右侧区域容器上ngIf接口绑定的是同一个变量，所以ngIf的值也会经历同样的变化，\r\n     * 从而做到右侧内容区的刷新。\r\n     */\r\n    reloadState: boolean;\r\n    /**\r\n     * 菜单数据列表\r\n     */\r\n    items: Array<TpLeftmenuthinItem>;\r\n    /**\r\n     * 右侧内容区是否需要刷新的状态值改变时向外通知\r\n     */\r\n    readonly reloadStateChange: EventEmitter<boolean>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    readonly resolvedPromise: Promise<any>;\r\n    /**\r\n     * 标志量，是否为url改变(需要去改变active)\r\n     */\r\n    private isUrlChange;\r\n    private navigationSubscription;\r\n    constructor(router: Router, activeRoute: ActivatedRoute, hostRef: ElementRef, renderer: Renderer2);\r\n    ngOnInit(): void;\r\n    ngAfterViewInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * @ignore\r\n     * 模板中使用\r\n     */\r\n    selectFn(item: any): void;\r\n    /**\r\n     * @ignore\r\n     * 点击当前选中项时，触发内容区重载\r\n     * @param item 当前点击项\r\n     */\r\n    triggerReload(item: TpLeftmenuthinItem): void;\r\n    private navigate;\r\n    private getNavigationExtras;\r\n    private getActiveItemByUrl;\r\n    private isActived;\r\n    private getRelativeRoute;\r\n    private isMatchCurrentUrl;\r\n    private link;\r\n}\r\n"]}