import { Component, ElementRef, HostBinding, Input, ViewChild } from '@angular/core';
import { TiBaseComponent, TiLocale, Util } from '@cloud/tiny3';
/**
 * @ignore
 */
export class TpIdentityauthModalComponent extends TiBaseComponent {
    constructor() {
        super(...arguments);
        this.id = 'tp-identityauth';
        /**
         * 组件使用的词条，此处统一获取
         */
        this.i18n_Identityauth = TiLocale.getLocaleWords().tpIdentityauth;
        /**
         * @ignore
         * 弹窗上部的红色alert相关配置
         */
        this.errorAlert = {
            show: false,
            label: ''
        };
        /**
         * @ignore
         * 是否显示校验的错误提示
         *
         * 本组件不使用校验组件，只是引入tiErrorMsgComponent，在必要的时候显示或隐藏
         */
        this.showErrorMessage = false;
        /**
         * @ignore
         * 不同绑定方式下，组件的通用配置
         */
        this.identityAuthModel = {
            title: this.i18n_Identityauth.title,
            nowBind: this.i18n_Identityauth.bind,
            noBindTip: this.i18n_Identityauth.no_bind,
            hasBound: this.i18n_Identityauth.has_bound,
            changeBindContent: this.i18n_Identityauth.change,
            okButtonLabel: this.i18n_Identityauth.okBtn,
            cancelLabel: TiLocale.getLocaleWords().tiCommon.cancelBtn
        };
        /**
         * 验证方式为虚拟MFA的配置，表单中‘验证方式’选为'虚拟MFA'时生效
         */
        this.bindMfaModel = {
            id: 'vmfa',
            key: this.i18n_Identityauth.verification_mfa,
            label: this.i18n_Identityauth.verification_mfa,
            content: '',
            url: '',
            disabled: !TiLocale.getLocaleWords().tpSupportMFA,
            forbidChange: true,
            hideBoundContent: true,
            helpTip: this.i18n_Identityauth.mfa_label_tip,
            codeInput: {
                value: '',
                helpTip: this.i18n_Identityauth.bind_mfa_help_tip,
                placeholder: this.i18n_Identityauth.verification_placeholder
            },
            getCodeBtn: {
                label: ''
            }
        };
        /**
         * 验证方式为手机的配置，表单中‘验证方式’选为'手机'时生效
         */
        this.bindPhone = {
            id: 'sms',
            key: this.i18n_Identityauth.verification_mobile,
            label: this.i18n_Identityauth.bind_mobile,
            content: '',
            url: '',
            forbidChange: false,
            hideBoundContent: false,
            codeInput: {
                value: '',
                helpTip: '',
                placeholder: this.i18n_Identityauth.verification_placeholder
            },
            getCodeBtn: {
                label: this.i18n_Identityauth.get_verification_code
            }
        };
        /**
         * 验证方式为邮箱的配置，表单中‘验证方式’选为'邮箱'时生效
         */
        this.bindEmail = {
            id: 'email',
            key: this.i18n_Identityauth.verification_email,
            label: this.i18n_Identityauth.bind_email,
            content: '',
            disabled: !TiLocale.getLocaleWords().tpSupportEmail,
            url: '',
            forbidChange: false,
            hideBoundContent: false,
            codeInput: {
                value: '',
                helpTip: '',
                placeholder: this.i18n_Identityauth.email_verification_placeholder
            },
            getCodeBtn: {
                label: this.i18n_Identityauth.get_verification_code
            }
        };
        /**
         * @ignore
         *
         * 表单中使用的主要数据
         */
        this.formModel = {
            selected: {
                content: '',
                disabled: false,
                url: '',
                codeInput: {
                    label: this.i18n_Identityauth.verification_code,
                    value: '',
                    change: ($event) => {
                        this.formModel.selected.okBtn.disabled = !$event;
                    },
                    focus: () => {
                        this.clearValidMessage();
                    }
                },
                getCodeBtn: {
                    disabled: false,
                    isLock: false,
                    tip: '',
                    click: () => {
                        // 获取验证码
                        this.getVerificationCode();
                    }
                },
                okBtn: {
                    disabled: true,
                    click: () => {
                        this.verifyVerificationCode();
                    }
                }
            },
            verificationModel: {
                modelList: [this.bindPhone, this.bindEmail, this.bindMfaModel],
                selected: {
                    value: '',
                    change: ($event) => {
                        this.formModel.selected = TpIdentityauthModalComponent.deepMerge(this.formModel.selected, this.formModel.verificationModel.modelList.filter(item => item.id === $event)[0]);
                        this.clearValidMessage();
                    }
                }
            },
            refresh: {
                loaded: true,
                refreshTip: this.i18n_Identityauth.refresh_tip,
                click: () => {
                    this.formModel.refresh.loaded = false;
                    this.camel.get({
                        url: {
                            s: `${this.appWebPath}/rest/v3.0/OS-MFA/userinfo/{userId}`,
                            o: {
                                userId: this.userId
                            }
                        },
                        timeout: 30000
                    })
                        .then((response) => {
                        this.formModel.refresh.loaded = true;
                        this.handleUserBoundInfo(response);
                    }, () => {
                        this.formModel.refresh.loaded = true;
                        // 错误提示
                        this.requestErrorTip();
                    });
                }
            }
        };
    }
    // 获取https://console.huaweicloud.com/iam/
    static getIamEndpoint(id, endpointList) {
        const endpoint = endpointList.filter((item) => item.id === id)[0];
        if (endpoint) {
            return endpoint.endpoint;
        }
        return '';
    }
    /**
     * 对象深合并方法，不适宜数组对象
     *
     * 1.targetObj中已存在的简单属性会被覆盖；已存在的同名数组被合并；已存在的对象属性会进入内部进行合并，规则同上
     * 2.targetObj中不存在的属性直接添加
     *
     * @param targetObj 对象类型
     * @param sourceObj 对象类型
     * @returns 被合并的targetObj
     */
    static deepMerge(targetObj, sourceObj) {
        for (const key in sourceObj) {
            if (Array.isArray(sourceObj[key])) {
                targetObj[key].push(...sourceObj[key]);
            }
            else if (typeof sourceObj[key] === 'object') {
                this.deepMerge(targetObj[key], sourceObj[key]);
            }
            else {
                targetObj[key] = sourceObj[key];
            }
        }
        return targetObj;
    }
    /**
     * 初始化用户信息
     */
    handleUserBoundInfo(response) {
        const verificationModel = this.formModel.verificationModel;
        if (!response.method) {
            verificationModel.selected.value = verificationModel.selected.value || verificationModel.modelList[0].id;
        }
        verificationModel.modelList.forEach((item) => {
            if (!response.method) {
                item.content = '';
                return;
            }
            // response.method默认绑定方式
            if (response.method === item.id) {
                // 刷新时要保持原来选择
                verificationModel.selected.value = verificationModel.selected.value || item.id;
                // response.info默认绑定方式的绑定信息
                item.content = response.info[response.method] || response.info.mobile;
            }
            else if (response[item.id] || (item.id === 'sms' && response.mobile)) {
                item.content = response[item.id] || response.mobile;
            }
            // 电话号码格式需单独处理
            if (item.id === 'sms' && item.content) {
                const infoArr = item.content.split('-');
                // tslint:disable-next-line: newline-per-chained-call
                item.content = `+${infoArr[0].trim().replace(/^0+/, '')}${infoArr[1]}`;
            }
        });
        verificationModel.selected.change(verificationModel.selected.value);
    }
    getVerificationCode() {
        this.mask.show();
        const sendCodeRequestData = {
            user_id: this.userId,
            method: this.formModel.verificationModel.selected.value,
            scene: 'opsProtect'
        };
        this.camel.post({
            url: {
                s: `${this.appWebPath}/rest/v3.0/OS-MFA/sendcode`,
                o: {}
            },
            timeout: 30000,
            params: sendCodeRequestData
        })
            .then((res) => {
            this.mask.hide();
            this.formModel.selected.okBtn.disabled = !this.formModel.selected.codeInput.value;
            // 按钮灰化，倒计时 变化按钮提示
            this.changeVerificationCodeBtnTip(res.remain_counter);
            this.formModel.selected.getCodeBtn.disabled = true;
            this.countDown(60);
        }, (e) => {
            this.mask.hide();
            // 该功能已锁定,请30分钟之后再操作。
            const label = e.status === 423 ? this.i18n_Identityauth.operation_lock : this.i18n_Identityauth.system_busy;
            // 错误提示
            this.requestErrorTip(label);
        });
    }
    // 获取验证码提示变化
    changeVerificationCodeBtnTip(remainCounter) {
        if (remainCounter <= 3 && remainCounter > 0) { // 再请求获取验证码{0}次,该功能将被锁定。
            this.formModel.selected.getCodeBtn.tip =
                Util.formatEntry(this.i18n_Identityauth.get_verification_code_times, [remainCounter]);
        }
        else if (remainCounter <= 0) { // 该功能已锁定
            this.formModel.selected.getCodeBtn.isLock = true;
            this.formModel.selected.getCodeBtn.tip = this.i18n_Identityauth.operation_lock_btn_tip;
        }
        else {
            this.formModel.selected.getCodeBtn.tip = '';
        }
    }
    requestErrorTip(label) {
        this.errorAlert.label = label || this.i18n_Identityauth.system_busy;
        this.errorAlert.show = true;
    }
    // 倒计时
    countDown(s) {
        let time = s;
        time--;
        if (time >= 0) {
            this.formModel.selected.getCodeBtn.label =
                Util.formatEntry(this.i18n_Identityauth.next_get_verification_code, [time]);
            setTimeout(() => {
                this.countDown(time);
            }, 1000);
        }
        else if (this.formModel.selected.getCodeBtn.isLock) { // 已锁定
            this.formModel.selected.getCodeBtn.disabled = true;
            this.formModel.selected.getCodeBtn.label = this.i18n_Identityauth.get_verification_code;
        }
        else {
            this.formModel.selected.getCodeBtn.disabled = false;
            this.formModel.selected.getCodeBtn.label = this.i18n_Identityauth.get_verification_code;
        }
    }
    verifyVerificationCode() {
        const requestData = {
            verifycode: this.formModel.selected.codeInput.value,
            method: this.formModel.verificationModel.selected.value,
            scene: 'opsProtect'
        };
        this.mask.show();
        this.camel.post({
            url: {
                s: `${this.appWebPath}/rest/v3.0/OS-MFA/verifycode`,
                o: {}
            },
            timeout: 30000,
            params: requestData
        })
            .then((res) => {
            this.mask.hide();
            if (res.cloud_verify_ticket) {
                // 存储验证码ticket到cookie
                document.cookie =
                    `cloud_verify_ticket=${res.cloud_verify_ticket};path=/;domain=${document.domain.replace(/.+?\./, '')}`;
                // 服务业务逻辑处理
                this.successFn();
                this.close();
            }
            else {
                this.addValidMessage();
            }
        }, () => {
            this.mask.hide();
            this.addValidMessage();
        });
    }
    /**
     * 去掉input红色边框及背景，隐藏errorMessage
     */
    clearValidMessage() {
        this.showErrorMessage = false;
        const codeInputElem = this.nativeElement.querySelector('ti-item .tp-identityauth-code .tp-identityauth-code-input');
        if (codeInputElem) {
            this.renderer.removeClass(codeInputElem, 'ng-invalid');
        }
    }
    /**
     * 添加input红色边框及背景，显示errorMessage
     */
    addValidMessage() {
        this.showErrorMessage = true;
        const codeInputElem = this.nativeElement.querySelector('ti-item .tp-identityauth-code .tp-identityauth-code-input');
        if (codeInputElem) {
            this.renderer.addClass(codeInputElem, 'ng-invalid');
        }
    }
    /**
     * @ignore
     *
     * 验证码输入框回车操作
     */
    enter() {
        Util.trigger(this.OKButton.nativeElement, 'focus');
        this.formModel.selected.okBtn.click();
    }
    /**
     * @ignore
     */
    close() { }
    /**
     * @ignore
     */
    dismiss() { }
    ngOnInit() {
        this.iamUrl = TpIdentityauthModalComponent.getIamEndpoint('iam', this.serviceEndpointList);
        this.bindMfaModel.url = `${this.iamUrl}#/iam/bindMFA/${this.userId}`;
        // ctc下定制了修改绑定内容的链接
        this.bindPhone.url = this.i18n_Identityauth.changeBindContent || `${this.iamUrl}?#/modifyCredential/phone`;
        this.bindEmail.url = `${this.iamUrl}?#/modifyCredential/email`;
        // roles里有"secu_admin"时为管理员
        this.isSecuAdmin = this.roleInfoRes.roles.indexOf('secu_admin') === -1 ? false : true;
        // 管理员提示文本中有取消操作保护的链接
        if (this.isSecuAdmin) {
            // closeIdentityauth字段是ctc局点下定制的关闭二次认证的链接
            this.alertLabelLink = this.i18n_Identityauth.closeIdentityauth
                || this.iamUrl + this.i18n_Identityauth.method_alert_label_link_url;
        }
        this.handleUserBoundInfo(this.userInfoRes);
    }
}
TpIdentityauthModalComponent.decorators = [
    { type: Component, args: [{
                template: "\r\n<div class=\"tp-identityauth-alert\">\r\n    <ti-alert type=\"error\" [(open)]=\"errorAlert.show\" dismissOnTimeout=\"3000\">{{errorAlert.label}}</ti-alert>\r\n</div>\r\n<ti-modal-header>\r\n    <span>{{ 'tpIdentityauth.title' | tiTranslate }}</span>\r\n</ti-modal-header>\r\n\r\n<ti-modal-body>\r\n    <ti-alert type=\"prompt\" typeIcon=\"true\" closeIcon=\"false\" style=\"width: 100%;\">\r\n        <ng-container *ngIf=\"isSecuAdmin else notSecuAdmin\">\r\n            {{'tpIdentityauth.method_alert_label' | tiTranslate}}\r\n            <a [href]=\"alertLabelLink\" target=\"_blank\" tiNavigation rel=\"noopener noreferrer\">\r\n                {{'tpIdentityauth.method_alert_label_link' | tiTranslate}}\r\n            </a>\r\n        </ng-container>\r\n    </ti-alert>\r\n    <div class=\"tp-identityauth-body\">\r\n        <ti-formfield id=\"identityAuth\" verticalAlign=\"top\" labelWidth=\"80px\">\r\n            <!--\u9A8C\u8BC1\u65B9\u5F0F-->\r\n            <ti-item>\r\n                <ti-item-label>{{ 'tpIdentityauth.verification_method' | tiTranslate }}</ti-item-label>\r\n                <div class=\"tp-identityauth-method\"\r\n                    *ngFor=\"let item of formModel.verificationModel.modelList; let i = index\">\r\n                    <input type=\"radio\" name=\"verification_method\" [label]=\"item.key\" [value]=\"item.id\"\r\n                        [id]=\"appendId('_radio_' + i)\"\r\n                        [disabled]=\"item.disabled\" [(ngModel)]=\"formModel.verificationModel.selected.value\"\r\n                        (ngModelChange)=\"formModel.verificationModel.selected.change($event)\" tiRadio>\r\n                    <tp-helptip *ngIf=\"item.helpTip\" [iconTip]=\"item.helpTip\"></tp-helptip>\r\n                </div>\r\n            </ti-item>\r\n\r\n            <!--\u7ED1\u5B9A\u65B9\u5F0F-->\r\n            <ti-item>\r\n                <ti-item-label>{{formModel.selected.label}}</ti-item-label>\r\n                <div style=\"line-height: 32px;\">\r\n                    <span *ngIf=\"formModel.selected.content && !formModel.selected.hideBoundContent\">\r\n                        {{formModel.selected.content}}</span>\r\n                    <span *ngIf=\"formModel.selected.content && formModel.selected.hideBoundContent\">\r\n                        {{identityAuthModel.hasBound}}</span>\r\n                    <span *ngIf=\"!formModel.selected.content\">\r\n                        <span class=\"tp-identity-unbind\">{{identityAuthModel.noBindTip}}</span>\r\n                        <span>\r\n                            <a tiNavigation [href]=\"formModel.selected.url\" target=\"_blank\" rel=\"noopener noreferrer\"\r\n                                [id]=\"appendId('_identityAuth_' + formModel.selected.id)\">\r\n                                {{identityAuthModel.nowBind}}</a>\r\n                        </span>\r\n                    </span>\r\n\r\n                    <!-- \u5237\u65B0\u6309\u94AE -->\r\n                    <span class=\"tp-identity-refresh\"\r\n                        *ngIf=\"!formModel.selected.forbidChange || !formModel.selected.content\">\r\n                        <ng-container *ngIf=\"formModel.refresh.loaded else refreshUnloaded\">\r\n                            <span tiOutline [id]=\"appendId('_refresh')\" [tabindex]=\"0\"\r\n                                class=\"ti3-icon ti3-icon-refresh tp-identity-refresh-loaded\"\r\n                                [tiTip]=\"formModel.refresh.refreshTip\" (click)=\"formModel.refresh.click()\" (keydown.enter)=\"formModel.refresh.click()\">\r\n                            </span>\r\n                        </ng-container>\r\n                    </span>\r\n                    <a tiNavigation [id]=\"appendId('_changeBind')\"\r\n                        *ngIf=\"!formModel.selected.forbidChange && formModel.selected.content\"\r\n                        [href]=\"formModel.selected.url\" target=\"_blank\"\r\n                        rel=\"noopener noreferrer\">{{identityAuthModel.changeBindContent}}</a>\r\n                </div>\r\n            </ti-item>\r\n\r\n            <!--\u9A8C\u8BC1\u7801-->\r\n            <ti-item>\r\n                <ti-item-label>{{formModel.selected.codeInput.label}}</ti-item-label>\r\n                <ng-container *ngIf=\"formModel.selected.content else noBindMethod\">\r\n                    <div class=\"tp-identityauth-code\">\r\n                        <input type=\"text\" [id]=\"appendId('_input')\"\r\n                            class=\"tp-identityauth-code-input\"\r\n                            [placeholder]=\"formModel.selected.codeInput.placeholder\"\r\n                            [(ngModel)]=\"formModel.selected.codeInput.value\"\r\n                            (ngModelChange)=\"formModel.selected.codeInput.change($event)\"\r\n                            (focus)=\"formModel.selected.codeInput.focus()\"\r\n                            (keyup.enter)=\"enter()\" tiText />\r\n\r\n                        <tp-helptip class=\"tp-identityauth-code-helptip\"\r\n                            *ngIf=\"formModel.selected.codeInput.helpTip\"\r\n                            [iconTip]=\"formModel.selected.codeInput.helpTip\">\r\n                        </tp-helptip>\r\n                        <span [tiTip]=\"formModel.selected.getCodeBtn.tip\">\r\n                            <button tiButton [id]=\"appendId('_getCode')\"\r\n                                *ngIf=\"formModel.selected.getCodeBtn.label\"\r\n                                [disabled]=\"formModel.selected.getCodeBtn.disabled\"\r\n                                (click)=\"formModel.selected.getCodeBtn.click()\">\r\n                                {{formModel.selected.getCodeBtn.label}}\r\n                            </button>\r\n                        </span>\r\n                    </div>\r\n                    <ti-error-msg *ngIf=\"showErrorMessage\"\r\n                        [errorMessage]=\"'tpIdentityauth.verification_code_error' | tiTranslate\" isAppendBody=\"fasle\">\r\n                    </ti-error-msg>\r\n                </ng-container>\r\n            </ti-item>\r\n        </ti-formfield>\r\n    </div>\r\n</ti-modal-body>\r\n\r\n<ti-modal-footer>\r\n    <button tiButton type=\"button\" [id]=\"appendId('_ok_btn')\" color=\"danger\" #OKButton\r\n        [disabled]=\"formModel.selected.okBtn.disabled\"\r\n        (mousedown)=\"formModel.selected.okBtn.click()\"\r\n        (click)=\"close()\"\r\n        >{{identityAuthModel.okButtonLabel}}</button>\r\n    <button type=\"button\" tiButton [id]=\"appendId('_cancel_btn')\"\r\n        (click)=\"dismiss()\">{{identityAuthModel.cancelLabel}}</button>\r\n</ti-modal-footer>\r\n\r\n<ng-template #notSecuAdmin>\r\n    {{'tpIdentityauth.not_admin_method_alert_label' | tiTranslate}}\r\n</ng-template>\r\n\r\n<ng-template #refreshUnloaded>\r\n    <ti-loading size=\"small\"></ti-loading>\r\n</ng-template>\r\n<ng-template #noBindMethod>\r\n    <span>--</span>\r\n</ng-template>",
                styles: ["::ng-deep.ti3-modal .tp-identityauth-modal{width:570px}.tp-identityauth-alert{font-size:var(--ti-common-font-size-base);left:30px;position:absolute;right:30px;top:40px;z-index:1000}.tp-identityauth-body{margin-top:var(--ti-common-space-4x)}.tp-identityauth-body .tp-identityauth-method{display:inline-flex;margin-right:var(--ti-common-space-4x)}.tp-identityauth-body .tp-identity-unbind{color:var(--ti-common-color-error);margin-right:var(--ti-common-space-2x)}.tp-identityauth-body .tp-identity-refresh{display:inline-block;line-height:1;margin:0 var(--ti-common-space-10)}.tp-identityauth-body .tp-identity-refresh-loaded{cursor:pointer}.tp-identityauth-body .tp-identityauth-code{display:flex}.tp-identityauth-body .tp-identityauth-code .tp-identityauth-code-helptip{align-items:center;margin-right:var(--ti-common-space-2x)}.tp-identityauth-body .tp-identityauth-code .tp-identityauth-code-input{margin-right:var(--ti-common-space-2x);width:150px}"]
            },] }
];
TpIdentityauthModalComponent.propDecorators = {
    userInfoRes: [{ type: Input }],
    roleInfoRes: [{ type: Input }],
    userId: [{ type: Input }],
    serviceEndpointList: [{ type: Input }],
    mask: [{ type: Input }],
    camel: [{ type: Input }],
    successFn: [{ type: Input }],
    appWebPath: [{ type: Input }],
    id: [{ type: HostBinding, args: ['attr.id',] }],
    OKButton: [{ type: ViewChild, args: ['OKButton', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,