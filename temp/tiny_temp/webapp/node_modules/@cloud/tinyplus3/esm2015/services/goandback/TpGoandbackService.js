import { Injectable, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { TpGoandbackModule } from './TpGoandbackModule';
import { TpGoandbackComponent } from './TpGoandbackComponent';
import { TiMessageService, Util } from '@cloud/tiny3';
import { TpUtil } from '../../utils/TpUtil';
import * as i0 from "@angular/core";
import * as i1 from "@cloud/tiny3";
import * as i2 from "@angular/platform-browser";
import * as i3 from "./TpGoandbackModule";
/**
 * 组件内部封装基类服务，只供内部使用
 */
/**
 * @internal
 */
export class TpGoandbackService {
    constructor(tiMessage, domSanitizer) {
        this.tiMessage = tiMessage;
        this.domSanitizer = domSanitizer;
        /**
         * 弹窗类型
         */
        this.firstMessageType = 'warn';
    }
    open(config) {
        // 受限组件需通过调用方法传入词条
        this.words = config.words ? config.words : this.words;
        this.firstMessage(config);
    }
    /**
     * 触发去绑定|认证|充值按钮事件
     * @param configObj 用户配置对象
     */
    firstMessage(configObj) {
        const configId = Util.isString(configObj.id) && configObj.id !== '' ? configObj.id : 'tp_message_modal'; // 用户未设置id时，设置默认id用于拼接
        const contentHref = this.words.firstMessageContentLabel ?
            `<a tiNavigation target="_blank" rel="noopener noreferrer" href="${this.words.firstMessageContentHref}">${this.words.firstMessageContentLabel}</a>` : '';
        const instances = this.tiMessage.open({
            id: configId,
            type: this.firstMessageType,
            title: this.words.firstMessageTitle,
            content: Util.formatEntry(this.words.firstMessageContent, [contentHref]),
            okButton: {
                text: this.words.firstMessageOkButtonText,
                autofocus: true,
                click: () => {
                    const handleUrl = this.goToUrl(configObj);
                    instances.close();
                    // 受限组件存在无第二个弹窗的情况；此处添加判断，是否需要触发该弹窗出现
                    if (this.words.secondMessageTitle) {
                        this.secondMessage(configObj, handleUrl, configId);
                    }
                }
            },
            cancelButton: {
                show: false
            },
            close: (messageRef) => {
                // 如果不需要二级弹窗，关闭回调在一级弹窗关闭时执行
                if (!this.words.secondMessageTitle && configObj.closeFn && Util.isFunction(configObj.closeFn)) {
                    configObj.closeFn(messageRef);
                }
            }
        });
    }
    /**
     * 触发已绑定|认证|充值按钮事件
     * @param configObj 用户配置对象
     * @param handleUrl 跳转链接
     */
    secondMessage(configObj, handleUrl, promptId) {
        const instances = this.tiMessage.open({
            id: promptId + '_prompt',
            type: 'prompt',
            title: this.words.secondMessageTitle,
            modalClass: 'tp-goandback-body',
            content: TpGoandbackComponent,
            // context定义上下文对象，对应组件@Input属性，可设置/获取这些接口属性
            context: {
                words: this.words,
                href: handleUrl,
                label: this.words.secondMessageFail,
                warn: {
                    type: 'warn',
                    open: false,
                    id: promptId + '_prompt_warn'
                },
                error: {
                    type: 'error',
                    open: false,
                    id: promptId + '_prompt_error'
                }
            },
            okButton: {
                text: this.words.secondMessageOkButtonText,
                autofocus: true,
                click: () => {
                    if (configObj.confirmFn && Util.isFunction(configObj.confirmFn)) {
                        // tslint:disable-next-line: no-use-before-declare
                        configObj.confirmFn(instances, openAlertFn);
                    }
                }
            },
            close: (messageRef) => {
                // 关闭回调在二级弹窗关闭时执行
                if (configObj.closeFn && Util.isFunction(configObj.closeFn)) {
                    configObj.closeFn(messageRef);
                }
            }
        });
        /**
         * 用户调用该函数，打开对应弹框
         * @param alertType (error: 系统繁忙) || (warn: 未完成绑定|认证|充值)
         */
        const openAlertFn = (alertType) => {
            const context = instances.content.instance.context;
            context.warn.open = alertType === 'warn' ? true : false;
            context.error.open = alertType === 'error' ? true : false;
        };
    }
    /**
     * @param definedUrl 跳转链接
     * @param params 链接参数
     */
    goToUrl(configObj) {
        // 未配置addUrlParams属性时，默认赋值true
        configObj.addUrlParams = Util.isUndefined(configObj.addUrlParams)
            ? true : configObj.addUrlParams;
        const [definedUrl, params] = [configObj.url, configObj.params];
        let url = Util.isString(definedUrl) ? definedUrl : this.words.path;
        // 判断是否需要url添加params处理（restrict受限组件需略过 issues-#1830）
        if (configObj.addUrlParams) {
            url = TpUtil.addDefaultParam(url, params);
        }
        const win = window.open(this.domSanitizer.sanitize(SecurityContext.URL, url), '_blank');
        // IE浏览器下，有些场景下window.open()无返回值时不用处理
        if (win) {
            // 处理打开一个新的标签，新标签中的页面如果存在恶意代码，就可以将原网站直接导航到一个虚假网站的安全漏洞
            win.opener = null;
        }
        return url;
    }
}
TpGoandbackService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TpGoandbackService_Factory() { return new TpGoandbackService(i0.ɵɵinject(i1.TiMessageService), i0.ɵɵinject(i2.DomSanitizer)); }, token: TpGoandbackService, providedIn: i3.TpGoandbackModule });
TpGoandbackService.decorators = [
    { type: Injectable, args: [{
                providedIn: TpGoandbackModule
            },] }
];
TpGoandbackService.ctorParameters = () => [
    { type: TiMessageService },
    { type: DomSanitizer }
];
//# sourceMappingURL=data:application/json;base64,