import { Injectable } from '@angular/core';
import { TiLocale, TiModalService } from '@cloud/tiny3';
import { TpIdentityauthModule } from './TpIdentityauthModule';
import { TpIdentityauthModalComponent } from './TpIdentityauthmodalComponent';
import { CfUtil } from '../../cfutils/CfUtil';
import * as i0 from "@angular/core";
import * as i1 from "@cloud/tiny3";
import * as i2 from "./TpIdentityauthModule";
/**
 * 二次认证组件
 *
 * <example-url>../tinyplus3demo/#/identityauth/identityauth-all</example-url>
 */
export class TpIdentityauthService {
    constructor(tiModal) {
        this.tiModal = tiModal;
    }
    queryIsOpen() {
        this.mask.show();
        this.camel.get({
            url: {
                s: `${this.appWebPath}/rest/v3-ext/users/op-mfa/{user_id}`,
                o: {
                    user_id: this.userId
                }
            },
            timeout: 30000
        })
            .then((res) => {
            this.mask.hide();
            if (res.mfa_support === 'false') {
                this.successFn();
                return;
            }
            // 判断是否已开启敏感操作保护，如开启则进行验证，否则直接进行业务处理
            if (res.ops_switch === 'true') {
                this.checkCerifyCode();
            }
            else {
                this.successFn();
            }
        }, () => {
            this.mask.hide();
            this.msgService.showError(TiLocale.getLocaleWords().tpBinding.confirm_system_busy);
        });
    }
    checkCerifyCode() {
        // 获取cookie中cloud_verify_ticket  查询校验码合法性
        const storage = CfUtil.getStorageService();
        let cloud_verify_ticket;
        if (storage && storage.cookieStorage && storage.cookieStorage.getItem) {
            cloud_verify_ticket = storage.cookieStorage.getItem('cloud_verify_ticket');
        }
        if (cloud_verify_ticket) {
            this.mask.show();
            // 查询验证码合法性
            this.camel.post({
                url: {
                    s: `${this.appWebPath}/rest/v3-ext/users/op-mfa/{user_id}`,
                    o: {
                        user_id: this.userId
                    }
                },
                timeout: 30000,
                params: {
                    cloudVerifyTicket: cloud_verify_ticket
                }
            })
                .then((res) => {
                this.mask.hide();
                // 验证码合法、直接进行业务处理
                if (res.id) {
                    this.successFn();
                }
            }, () => {
                this.mask.hide();
                this.identityAuth();
            });
        }
        else {
            this.identityAuth();
        }
    }
    identityAuth() {
        // 需查询用户信息(绑定状态)。
        this.mask.show();
        const getUserInfoPromise = this.camel.get({
            url: {
                s: `${this.appWebPath}/rest/v3.0/OS-MFA/userinfo/{user_id}`,
                o: {
                    user_id: this.userId
                }
            },
            timeout: 30000
        });
        const getRoleInfoPromise = this.camel.get({
            url: {
                s: `${this.appWebPath}/rest/global/token`,
                o: {}
            },
            timeout: 30000
        });
        const getServiceEndpointList = () => {
            // 如果为了本地测试，open方法传入了config.serviceEndpointList，则需要特殊处理
            if (this.serviceEndpointList) {
                return new Promise((resolve) => {
                    resolve(this.serviceEndpointList);
                });
            }
            else {
                return CfUtil.getEndpoints()
                    .then((endpoints) => endpoints.serviceEndpointList);
            }
        };
        Promise.all([getUserInfoPromise, getRoleInfoPromise, getServiceEndpointList()])
            .then((response) => {
            const userInfoRes = response[0];
            const roleInfoRes = response[1];
            this.mask.hide();
            this.tiModal.open(TpIdentityauthModalComponent, {
                id: 'tp-identityauth',
                modalClass: 'tp-identityauth-modal',
                context: {
                    userInfoRes,
                    roleInfoRes,
                    userId: this.userId,
                    serviceEndpointList: response[2],
                    mask: this.mask,
                    camel: this.camel,
                    successFn: this.successFn,
                    appWebPath: this.appWebPath
                }
            });
        }, () => {
            this.mask.hide();
            this.msgService.showError(TiLocale.getLocaleWords().tpBinding.confirm_system_busy);
        });
    }
    /**
     * 开启二次认证
     *
     * @param successFn 二次认证通过或不需要认证时的回调函数
     *
     * @param config 组件本地测试需要的参数，开发者实际场景中不需要
     */
    open(successFn, config) {
        this.successFn = successFn;
        this.appWebPath = CfUtil.getAppWebPath();
        if (config) {
            this.camel = config.camel;
            this.msgService = config.msg;
            this.mask = config.mask;
            this.userId = config.userId;
            this.serviceEndpointList = config.serviceEndpointList;
            this.queryIsOpen();
        }
        else {
            CfUtil.getUser()
                .then((user) => {
                this.camel = CfUtil.getHttpService();
                if (user.userId && this.camel) {
                    this.userId = user.userId;
                    this.msgService = CfUtil.getMessage();
                    this.mask = CfUtil.getMask();
                    this.queryIsOpen();
                }
            });
        }
    }
}
TpIdentityauthService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TpIdentityauthService_Factory() { return new TpIdentityauthService(i0.ɵɵinject(i1.TiModalService)); }, token: TpIdentityauthService, providedIn: i2.TpIdentityauthModule });
TpIdentityauthService.decorators = [
    { type: Injectable, args: [{
                providedIn: TpIdentityauthModule
            },] }
];
TpIdentityauthService.ctorParameters = () => [
    { type: TiModalService }
];
//# sourceMappingURL=data:application/json;base64,