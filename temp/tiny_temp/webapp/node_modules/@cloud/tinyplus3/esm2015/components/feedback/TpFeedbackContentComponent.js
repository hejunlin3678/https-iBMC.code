import { Component, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';
import { FormBuilder, FormControl } from '@angular/forms';
import { TiBaseComponent, TiBrowser, TiLocale, TiValidators, Util } from '@cloud/tiny3';
import { CfUtil } from '../../cfutils/CfUtil';
/**
 * @ignore
 */
export class TpFeedbackContentComponent extends TiBaseComponent {
    constructor(hostRef, renderer2, fb) {
        super(hostRef, renderer2);
        this.hostRef = hostRef;
        this.renderer2 = renderer2;
        this.fb = fb;
        /**
         * 10.1.4新增
         * 提交问卷成功后事件
         */
        this.submit = new EventEmitter();
        /**
         * @ignore
         */
        this.showheader = true;
        /**
         * 初始化用来存储答案的数组
         */
        this.submitAnswer = [];
        this.vaildrules = {};
        // 得到复选框选中项的个数
        this.getCheckedNumber = (itemArray) => {
            let checkedNum = 0;
            for (const item of itemArray) {
                if (item.checked) {
                    checkedNum++;
                }
            }
            return checkedNum;
        };
        // 检查每个题目的完成情况，返回一个数组
        this.checkQuestion = (questionArray, answerArray) => {
            const resultArray = [];
            for (let i = 0; i < questionArray.length - 1; i++) {
                // 判断问题是否已正确填写. （1）必填 （2）show=true (3)有填写问卷
                if (questionArray[i].show === true && questionArray[i].require === true && answerArray[i].answer.length === 0) {
                    questionArray[i].hasfinshed = false;
                    resultArray[i] = false;
                }
            }
            return resultArray;
        };
        if (location.hostname.indexOf('huaweicloud.com') > -1) {
            TpFeedbackContentComponent.config = TpFeedbackContentComponent.prodConfig;
        }
    }
    ngOnInit() {
        super.ngOnInit();
        this.showQuestions();
    }
    // 初始化展示题目
    showQuestions() {
        const questionArray = this.options.customQuestion;
        this.options.customQuestion = Util.isArray(questionArray) ? questionArray : [];
        // 问题的个数必须是3的倍数
        if (questionArray && questionArray.length % 3 !== 0) {
            console.log('自定义题目的格式不符合规范！'); // 供服务查看
            this.showheader = false;
            return;
        }
        // 获取Feedback词条
        const tpFeedback = TiLocale.getLocaleWords().tpFeedback;
        // 模板中最终渲染的数据
        this.displayData = {
            title: Util.formatEntry(tpFeedback.title, [this.options.serviceName]),
            startDesc: tpFeedback.title_desc,
            questions: [
                {
                    type: 'radio',
                    show: true,
                    require: true,
                    title: [
                        {
                            title: Util.formatEntry(tpFeedback.question1_title, [this.options.serviceName]),
                            type: 'main'
                        },
                        {
                            title: tpFeedback.question1_title_desc
                        }
                    ]
                },
                {
                    type: 'checkbox',
                    show: false,
                    require: true,
                    title: [
                        {
                            title: tpFeedback.question1_title_unSati
                        }
                    ],
                    hasOtherReason: true,
                    options: [
                        {
                            value: '1',
                            remark: tpFeedback.question_unSati_options1
                        },
                        {
                            value: '2',
                            remark: tpFeedback.question_unSati_options2
                        },
                        {
                            value: '3',
                            remark: tpFeedback.question_unSati_options3
                        },
                        {
                            value: '4',
                            remark: tpFeedback.question_unSati_options4
                        },
                        {
                            value: '5',
                            remark: tpFeedback.question_unSati_options5
                        },
                        {
                            value: '6',
                            remark: tpFeedback.question_unSati_options6
                        },
                        {
                            value: '7',
                            remark: tpFeedback.question_unSati_options7
                        },
                        {
                            value: '8',
                            remark: tpFeedback.question_unSati_options8
                        }
                    ]
                },
                {
                    type: 'checkbox',
                    show: false,
                    require: true,
                    title: [
                        {
                            title: tpFeedback.question1_title_sati
                        }
                    ],
                    hasOtherReason: true,
                    options: [
                        {
                            value: '1',
                            remark: tpFeedback.question_sati_options1
                        },
                        {
                            value: '2',
                            remark: tpFeedback.question_sati_options2
                        },
                        {
                            value: '3',
                            remark: tpFeedback.question_sati_options3
                        },
                        {
                            value: '4',
                            remark: tpFeedback.question_sati_options4
                        },
                        {
                            value: '5',
                            remark: tpFeedback.question_sati_options5
                        },
                        {
                            value: '6',
                            remark: tpFeedback.question_sati_options6
                        },
                        {
                            value: '7',
                            remark: tpFeedback.question_sati_options7
                        },
                        {
                            value: '8',
                            remark: tpFeedback.question_sati_options8
                        }
                    ]
                },
                {
                    type: 'essay',
                    show: true,
                    require: false,
                    title: [
                        {
                            title: Util.formatEntry(TiLocale.getLocaleWords().tpFeedback.questionLast_title, [this.options.serviceName])
                        }
                    ]
                }
            ]
        };
        // 用户自定义题目
        if (this.options.allQuestion) {
            this.displayData = Object.assign({}, this.options.allQuestion);
        }
        else if (this.options.customQuestion.length > 0) {
            const customQuestionCopy = Object.assign({}, this.options.customQuestion);
            const keys = Object.keys(customQuestionCopy);
            for (const key of keys) {
                this.displayData.questions.splice(this.displayData.questions.length - 1, 0, customQuestionCopy[key]); // 返回修改后数组
            }
        }
        this.questions = this.displayData.questions;
        for (let i = 0; i < this.questions.length; i++) {
            this.questions[i].questionId = 'question_' + i;
            if (this.questions[i].type === 'checkbox' && this.questions[i].hasOtherReason) {
                this.questions[i].showOtherReason = false;
                // 为每个otherreason创建表单control
                this.vaildrules[`reasonInput_${i}`] = new FormControl('');
                this.form = this.fb.group(this.vaildrules);
            }
            // 存储问题答案
            this.submitAnswer[i] = {
                questionId: this.questions[i].questionId,
                subQuestionId: null,
                subName: this.questions[i].title[0].title,
                answer: [],
                subRemark: [],
                reason: '0'
            };
        }
    }
    /**
     * @ignore
     * 满意度评分触发事件
     * @param value 选择评分值
     * @param index 题目下标值
     */
    onChangeScore(value, index) {
        // 单选的回调函数，每次选择都要清空数组
        this.submitAnswer[index].answer = [];
        this.submitAnswer[index].subRemark = [];
        // 单选题answer和remark是保持一致的。
        this.submitAnswer[index].answer.push(value);
        this.submitAnswer[index].subRemark.push(value);
        /**
         * 约束:
         * （1）题目格式：要求的一个母题需要带两个子题的格式
         * （2）题目顺序：母题，第一个子题目（index+1），第二个子题(index+2)
         */
        if (index % 3 === 0) {
            const firstIndex = index + 1;
            const secondIndex = index + 2;
            const oldFirstShow = this.questions[firstIndex].show;
            const oldSecondShow = this.questions[secondIndex].show;
            this.questions[firstIndex].show = value <= 7 ? true : false;
            this.questions[secondIndex].show = value > 7 ? true : false;
            /**
             * 多选题目且其它原因输入框显示时，重置对应控件
             * IE下，输入框（titext，titextarea）placeholder为中文时，初始化时表单控件会被标记为dirty，进行校验，
             * 通过markAsPristine方法在输入框显示时，将该表单控件标记为 pristine（原始状态），需进行延迟处理
             * 先在该组件进行处理，后续优化
             */
            if (this.questions[firstIndex].show !== oldFirstShow && this.questions[firstIndex].showOtherReason) {
                if (TiBrowser.isIE()) {
                    setTimeout(() => {
                        this.form.controls[`reasonInput_${firstIndex}`].markAsPristine();
                    }, 0);
                }
                this.form.setControl(`reasonInput_${firstIndex}`, new FormControl('', [TiValidators.required, TiValidators.maxLength(400)]));
            }
            if (this.questions[secondIndex].show !== oldSecondShow && this.questions[secondIndex].showOtherReason) {
                if (TiBrowser.isIE()) {
                    setTimeout(() => {
                        this.form.controls[`reasonInput_${secondIndex}`].markAsPristine();
                    }, 0);
                }
                this.form.setControl(`reasonInput_${secondIndex}`, new FormControl('', [TiValidators.required, TiValidators.maxLength(400)]));
            }
        }
        this.questions[index].hasfinshed = true;
    }
    /**
     * @ignore
     * 选中项超过三项时，其余项不可选中，并设置"最多选择三项"的样式。
     */
    onClickItem(event) {
        // IE下选择选项后触发click事件，会冒泡到父级触发halfmodal点击事件，导致弹窗关闭，此处阻止事件冒泡，防止弹窗关闭
        event.stopPropagation();
    }
    /**
     * @ignore
     * 复选框选中事件，最多选择三项
     * @param item 复选项数据
     * @param question 题目数据
     * @param index 复选项下标
     */
    onChangeCheckbox(item, question, index) {
        const questionIndex = this.getIndexByQuestionId(question.questionId);
        const submitQuestion = this.submitAnswer[questionIndex];
        // 失焦校验，输入不能为空且字符个数最多为400
        this.validation = {
            type: 'blur'
        };
        if (this.getCheckedNumber(question.options) > 3) {
            question.checkLimit = true;
            /**
             * 此处使用延时处理
             * 原因：在选择第四个选项后，更改checked属性值为false，会再次触发ngModalChange事件，导致再次选择时，该选项会被选中
             */
            setTimeout(() => {
                item.checked = false;
            }, 0);
            return;
        }
        question.checkLimit = false;
        // 约束：其它原因是多选项中的最后一项
        if (question.hasOtherReason && index === question.options.length - 1) {
            question.showOtherReason = item.checked;
            // 其它输入框显示添加校验规则
            if (question.showOtherReason) {
                this.form.setControl(`reasonInput_${questionIndex}`, new FormControl('', [TiValidators.required, TiValidators.maxLength(400)]));
                /**
                 * IE下，输入框（titext，titextarea）placeholder为中文时，初始化时表单控件会被校验，
                 * 通过markAsPristine方法在输入框显示时，将该表单控件标记为 pristine（原始状态），需进行延迟处理
                 * 先在该组件进行处理，后续优化
                 */
                if (TiBrowser.isIE()) {
                    setTimeout(() => {
                        this.form.controls[`reasonInput_${questionIndex}`].markAsPristine();
                    }, 0);
                }
            }
            else {
                submitQuestion.reason = '0';
            }
        }
        if (item.checked) {
            this.questions[questionIndex].hasfinshed = true;
            submitQuestion.answer.push(index);
            submitQuestion.subRemark.push(item.remark);
        }
        else {
            submitQuestion.answer = submitQuestion.answer.filter((answer) => answer !== index);
            submitQuestion.subRemark = submitQuestion.subRemark.filter((remark) => remark !== item.remark);
        }
    }
    /**
     * @ignore
     * 复选项为其它原因，存储用户输入内容
     * @param question 题目数据
     */
    updateOtherReason(question) {
        const questionIndex = this.getIndexByQuestionId(question.questionId);
        this.submitAnswer[questionIndex].reason = this.form.controls[`reasonInput_${questionIndex}`].value;
    }
    /**
     * @ignore
     * 题目为essay时，存储用户输入文本域内容
     * @param textareaValue 文本域输入内容
     * @param index 题目下标
     */
    updateTextarea(textareaValue, index) {
        this.submitAnswer[index].answer[0] = textareaValue;
        this.submitAnswer[index].subRemark[0] = 'null';
    }
    /**
     * @ignore
     * 提交问卷
     */
    onSubmit() {
        CfUtil.getUser().then((user) => {
            const root = user;
            const camel = CfUtil.getHttpService();
            const msgService = CfUtil.getMessage();
            if (!camel || !msgService || !root || !Util.isFunction(camel.post) || !Util.isFunction(msgService.showSuccess)) {
                return;
            }
            // 题目未显示或其它原因不显示时，移除对应控件
            for (let i = 0; i < this.questions.length; i++) {
                if (!this.questions[i].show || !this.questions[i].showOtherReason) {
                    this.form.removeControl(`reasonInput_${i}`);
                }
            }
            const errors = TiValidators.check(this.form);
            if (this.isRequiredComplete(this.questions, this.submitAnswer) && !errors) {
                for (let i = 0; i < this.submitAnswer.length; i++) {
                    this.submitAnswer[i].answer = this.submitAnswer[i].answer.join();
                    this.submitAnswer[i].subRemark = this.submitAnswer[i].subRemark.join();
                    this.submitAnswer[i].show = this.questions[i].show; // 过滤不显示的题目
                }
                // 过滤未显示题目及删除show属性，不需要发送给后台
                this.submitAnswer = this.submitAnswer.filter((answer) => answer.show !== false);
                for (const answer of this.submitAnswer) {
                    delete answer.show;
                }
                const url = `${TpFeedbackContentComponent.config.backend}/api/save`;
                // 发送请求，向后台发送问卷结果
                const sendData = {
                    data: {
                        surveyId: TpFeedbackContentComponent.config.surveyId,
                        serviceId: this.options.serviceId,
                        w3account: root.domainId,
                        answers: this.submitAnswer
                    }
                };
                camel.post({
                    url: {
                        s: url
                    },
                    params: sendData
                })
                    .then(() => { }, () => { });
                this.submit.emit();
                msgService.showSuccess(TiLocale.getLocaleWords().tpFeedback.submit_success);
            }
            else {
                // 未完成则显示'选择不能为空'提示
                this.checkQuestion(this.questions, this.submitAnswer);
            }
        });
    }
    // 通过问题ID得到属于第几道题目
    getIndexByQuestionId(questionId) {
        for (let i = 0; i < this.submitAnswer.length; i++) {
            if (this.submitAnswer[i].questionId === questionId) {
                return i;
            }
        }
    }
    // 题目是否已完成
    isRequiredComplete(questionArray, answerArray) {
        const resultArray = this.checkQuestion(questionArray, answerArray);
        for (const result of resultArray) {
            if (result === false) {
                return false;
            }
        }
        return true;
    }
}
// 类生产测试环境
TpFeedbackContentComponent.devConfig = {
    backend: 'https://console.ulanqab.huawei.com/nps-api',
    surveyId: 'hwcloudbusurvey_key_fbd25bdbdb87'
};
// 现网环境
TpFeedbackContentComponent.prodConfig = {
    backend: 'https://voc.huaweicloud.com/survey-api',
    surveyId: 'hwcloudbusurvey_key_fbd25bdbdb87'
};
/**
 * @ignore
 */
TpFeedbackContentComponent.config = TpFeedbackContentComponent.devConfig;
TpFeedbackContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-feedback-content',
                template: "<ng-container *ngIf=\"showheader\">\r\n    <div class=\"tp-feedback-title\">{{displayData.title}}</div>\r\n    <div class=\"tp-feedback-introduce\">{{displayData.startDesc}}</div>\r\n</ng-container>\r\n<div  class=\"tp-feedback-question\" *ngFor=\"let question of questions; index as i;\">\r\n    <div *ngIf=\"question.show === true\">\r\n        <!-- \u9898\u76EE\u6807\u9898 -->\r\n        <section class=\"tp-feedback-title-space\"\r\n            [ngClass]=\"{\r\n                'tp-feedback-title-space1': question.type !== 'radio',\r\n                'tp-feedback-title-space2': question.title.length > 1}\">\r\n            <ti-icon name=\"staricon\" class=\"tp-feedback-required-icon\" *ngIf=\"question.type !== 'essay'\"></ti-icon><!--\r\n            --><span class=\"tp-feedback-question-title\">{{question.title[0].title}}</span><!--\r\n            --><span *ngIf=\"question.type === 'checkbox'\" class=\"tp-feedback-checked-prompt\"\r\n               [ngClass]=\"{'tp-feedback-checked-error': question.checkLimit}\">{{ 'tpFeedback.question_checked_limited' | tiTranslate }}</span>\r\n        </section>\r\n\r\n        <!-- \u6EE1\u610F\u5EA6\u8BC4\u5206\u503C\u63CF\u8FF0 -->\r\n        <span class=\"tp-feedback-score-prompt\" *ngIf=\"question.title.length > 1\">{{question.title[1].title}}</span>\r\n\r\n        <!-- \u5B8C\u6210\u540E\u6821\u9A8C -->\r\n        <div class=\"tp-feedback-unifyvalid\" *ngIf=\"question.hasfinshed === false\">\r\n            <tp-icon local name=\"cloud-action-state-failed\" class=\"tp-feedback-unifyvalid-icon\"></tp-icon>\r\n            <span>{{ 'tpFeedback.unifyvalid' | tiTranslate }}</span>\r\n        </div>\r\n\r\n        <!-- \u5355\u9009\u8BC4\u5206\u9898\u76EE -->\r\n        <tp-score *ngIf=\"question.type === 'radio'\"\r\n        [(ngModel)]=\"question.value\"\r\n        (ngModelChange)=\"onChangeScore(question.value, i)\"\r\n        [minText]=\" 'tpFeedback.score_text.minText' | tiTranslate \"\r\n        [maxText]=\"'tpFeedback.score_text.maxText' | tiTranslate \"\r\n        [id]=\"appendId('sore')\"></tp-score>\r\n\r\n        <!-- \u591A\u9009\u9898\u76EE -->\r\n        <div *ngIf=\"question.type === 'checkbox'\">\r\n            <div class=\"tp-feedback-checkbox-list\" *ngFor=\"let item of question.options index as j\">\r\n                <input type=\"checkbox\"\r\n                       [(ngModel)]=\"item.checked\"\r\n                       [label]=\"item.remark\"\r\n                       (ngModelChange)=\"onChangeCheckbox(item, question, j)\" tiCheckbox\r\n                       (click)=\"onClickItem($event)\"\r\n                       [id]=\"appendId('checkbox_' + i + '_' + j)\">\r\n            </div>\r\n        </div>\r\n        <form #contain  [formGroup]=\"form\" *ngIf=\"question.showOtherReason === true\">\r\n            <!-- \u5176\u4ED6\u539F\u56E0\u8F93\u5165\u6846\u8F93\u5165 -->\r\n                <input\r\n                class=\"tp-feedback-other-reason\"\r\n                [tiValidation]=\"validation\"\r\n                [errorMessageWrapper]='contain'\r\n                formControlName=\"{{'reasonInput_'+i}}\"\r\n                placeholder=\"{{ 'tpFeedback.placeholder.text' | tiTranslate }}\"\r\n                (blur)=\"updateOtherReason(question)\" [id]=\"appendId('input' + i)\" tiText>\r\n        </form>\r\n\r\n        <!-- \u7B80\u5355\u9898\u76EE\u6587\u672C\u57DF\u8F93\u5165 -->\r\n        <textarea *ngIf=\"question.type === 'essay'\"\r\n        class=\"tp-feedback-other-suggest-textarea\"\r\n        resize=\"none\"\r\n        maxlength=\"400\"\r\n        [placeholder]=\" 'tpFeedback.placeholder.textarea' | tiTranslate \"\r\n        [(ngModel)]=\"question.textareaValue\"\r\n        [tiValidation]='validation'\r\n        (blur)=\"updateTextarea(question.textareaValue, i)\" [id]=\"appendId('textarea' + i)\" tiTextarea></textarea>\r\n\r\n    </div>\r\n</div>\r\n\r\n<!-- \u7528\u6237\u81EA\u5B9A\u4E49\u5185\u5BB9 -->\r\n<div class=\"tp-feedback-external\">\r\n    <ng-content></ng-content>\r\n</div>\r\n\r\n<!-- \u95EE\u5377\u63D0\u4EA4\u6309\u94AE -->\r\n<div class=\"tp-feedback-submit\">\r\n    <button type=\"button\" color=\"danger\" class=\"tp-feedback-submit-button\" tiButton (click)=\"onSubmit()\" [id]=\"appendId('submit')\">{{ 'tpFeedback.submit_button' | tiTranslate}}</button>\r\n</div>\r\n",
                styles: [".ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}::ng-deep :root{--tp-feedback-halfmodal-space:72px;--tp-feedback-halfmodal-width:560px;--tp-feedback-sumbit-height:80px}:host{display:block;margin-bottom:var(--tp-feedback-sumbit-height)}.tp-feedback-title{color:var(--ti-common-color-text-primary);font-size:var(--ti-common-font-size-4);font-weight:700;line-height:var(--ti-common-line-height-number);padding-bottom:var(--ti-common-space-2x);text-align:left}.tp-feedback-introduce{-ms-box-sizing:border-box;border-bottom:1px solid var(--ti-common-color-line-dividing);box-sizing:border-box;color:var(--ti-common-color-text-weaken);margin-bottom:var(--ti-common-space-5x);padding-bottom:var(--ti-common-space-5x)}.tp-feedback-introduce,.tp-feedback-question{font-size:var(--ti-common-font-size-base);line-height:var(--ti-common-line-height-number)}.tp-feedback-question{color:var(--ti-common-color-text-primary);margin-bottom:var(--ti-common-space-4x);position:relative}.tp-feedback-question .ti3-icon-staricon{color:var(--ti-common-color-error);font-size:var(--ti-common-font-size-1);line-height:var(--ti-common-line-height-number);padding-right:var(--ti-common-space-base)}.tp-feedback-question:last-child{margin-bottom:0}.tp-feedback-required-icon{left:-15px;position:absolute}.tp-feedback-question-title{color:var(--ti-common-color-text-primary);font-size:var(--ti-common-font-size-1);font-weight:700;line-height:var(--ti-common-line-height-number)}.tp-feedback-title-space{padding-bottom:var(--ti-common-space-4x)}.tp-feedback-title-space1{padding-bottom:var(--ti-common-space-3x)}.tp-feedback-title-space2{padding-bottom:var(--ti-common-space-base)}.tp-feedback-score-prompt{color:var(--ti-common-color-text-weaken);display:inline-block;margin-bottom:var(--ti-common-space-4x)}.tp-feedback-checked-prompt{color:var(--ti-common-color-text-weaken);padding-bottom:var(--ti-common-space-4x)}.tp-feedback-checked-error{color:var(--ti-common-color-error)}.tp-feedback-checkbox-list{-ms-box-sizing:border-box;box-sizing:border-box;display:inline-block;margin-bottom:var(--ti-common-space-5x);padding-right:var(--ti-common-space-5x);vertical-align:top;width:50%}.tp-feedback-checkbox-list:last-child,.tp-feedback-checkbox-list:nth-last-child(2){margin-bottom:0}.tp-feedback-other-reason{margin-bottom:var(--ti-common-space-2x);margin-top:var(--ti-common-space-4x);width:calc(100% - 17px)}::ng-deep .tp-feedback-other-suggest-textarea{height:136px!important;width:calc(100% - 17px)!important}.tp-feedback-submit{-ms-box-sizing:border-box;animation:show-submit .25s forwards;background:var(--ti-common-color-bg-white-normal);border-top:1px solid var(--ti-common-color-line-dividing);bottom:-1px;box-sizing:border-box;height:var(--tp-feedback-sumbit-height);padding-top:var(--ti-common-space-5x);position:fixed;right:-560px;width:calc(var(--tp-feedback-halfmodal-width) - var(--tp-feedback-halfmodal-space))}.tp-feedback-submit .tp-feedback-submit-button{float:right}@keyframes show-submit{to{right:40px}}.tp-feedback-unifyvalid{align-items:center;color:var(--ti-common-color-error);display:flex;line-height:24px;margin-bottom:var(--ti-common-space-4x);margin-top:calc(-1*var(--ti-common-space-3x))}.tp-feedback-unifyvalid-icon{color:var(--ti-common-color-error);font-size:var(--ti-common-font-size-2);margin-right:var(--ti-common-space-10)}.tp-feedback-external{padding-top:var(--ti-common-space-base)}"]
            },] }
];
TpFeedbackContentComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: FormBuilder }
];
TpFeedbackContentComponent.propDecorators = {
    options: [{ type: Input }],
    submit: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,