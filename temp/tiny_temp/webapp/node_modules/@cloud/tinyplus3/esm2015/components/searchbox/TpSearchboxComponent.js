import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, Renderer2, ViewChild, ViewChildren, QueryList } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { TiBrowser, TiDateComponent, TiDominatorComponent, TiDropComponent, TiDropsearchComponent, TiFormComponent, TiKeymap, TiLocale, TiLocaleFormat, TiValidators, Util
// tslint:disable-next-line: no-implicit-dependencies
 } from '@cloud/tiny3';
import { TpIconComponent } from '../icon/TpIconModule';
/**
 * ip正则
 * 10.0.2 新增
 */
export const TP_REGEXP_IP = /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])(\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])){3}$/;
/**
 * UUID正则
 * 10.0.2 新增
 */
export const TP_REGEXP_UUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
/**
 * 综合搜索组件。
 * 用户通过该组件，选择出数据过滤需要的参数
 *
 * <example-url>../tinyplus3demo/#/searchbox/searchbox-all</example-url>
 */
export class TpSearchboxComponent extends TiFormComponent {
    // eslint-disable-next-line @typescript-eslint/no-parameter-properties
    constructor(hostRef, render, changeDetectorRef) {
        super(hostRef, render);
        this.changeDetectorRef = changeDetectorRef;
        /**
         * 设置默认的过滤范围字段
         */
        this.defaultField = '';
        /**
         * 没有生成tag时的占位提示文本
         *
         */
        this.emptyPlaceholder = '';
        /**
         * 是否显示帮助图标
         *
         */
        this.showHelp = true;
        /**
         * 是否显示设置defaultField图标
         */
        this.showSettings = false;
        /**
         * 源数据
         */
        this.items = [];
        /**
         * 设置组件最多显示几行，
         */
        this.maxLine = 2;
        /**
         * 下拉框最大高度，单位为px，
         *
         */
        this.panelMaxHeight = '999px';
        /**
         * 设置属性面板宽度
         */
        this.propPanelWidth = '200px';
        /**
         * 设置属性值面板宽度
         */
        this.valuePanelWidth = '200px';
        /**
         * 设置tag的最大宽度，解决tag太长，属性值
         */
        this.tagMaxWidth = '400px';
        /**
         * help 图标提示事件
         */
        this.help = new EventEmitter();
        /**
         * 清除事件
         */
        this.clear = new EventEmitter();
        /**
         * 搜索事件
         */
        this.search = new EventEmitter();
        /**
         * 值面板打开前事件,用于懒加载值选项
         */
        this.beforeOpen = new EventEmitter();
        /**
         * @ignore
         * 选中项后，输入值变化事件
         * 10.0.2 新增
         */
        this.inputValueChange = new EventEmitter();
        /**
         * 默认匹配字段发生改变事件
         * 10.1.2 新增
         */
        this.defaultFieldChange = new EventEmitter();
        /**
         * @ignore
         * 分割符号，默认是中文冒号
         */
        this.tagSeperator = '：';
        /**
         * @ignore
         * 有选中标签后的placeholder
         */
        this.inputPlaceholder = TiLocale.getLocaleWords().tpSearchbox.addPlaceholder;
        /**
         * @ignore
         * 属性选项
         */
        this.propDropOptions = [];
        /**
         * @ignore
         * 值选项
         */
        this.valueDropOptions = [];
        /**
         * @ignore
         * 输入框的值
         */
        this.inputValue = '';
        /**
         * @ignore
         * 帮助图标提示内容
         */
        this.helpTipContent = TiLocale.getLocaleWords().tpSearchbox.help;
        /**
         * @ignore
         * 清空图标提示内容
         */
        this.clearTipContent = TiLocale.getLocaleWords().tpSearchbox.clearAll;
        /**
         * @ignore
         * 设置默认搜索项图标提示内容
         */
        this.settingTipContent = TiLocale.getLocaleWords().tpSearchbox.switchText;
        /**
         * @ignore
         * 多选值面板选中项
         */
        this.valueDropSelecteds = [];
        /**
         * @ignore
         * 设置defaultField面板选项
         */
        this.settingDropOptions = [];
        /**
         * @ignore
         * drop 面板到触发元素的距离，编辑标签时，距离是6px,所以使用变量
         */
        this.dominatorSpace = '7px';
        /**
         * 记录默认选中项旧值，用于判断两次选中是否是同一个值。如果是，则不触发defaultFieldChange事件。
         */
        this.oldDefaultField = '';
        this.dominatorPlaceholder = '';
        // 存储一致需要聚焦的元素
        this.alwaysFocusableElems = [];
        // 范围tag 使用的特殊字符串'-'
        this.rangeLine = '-';
        // 范围tag 使用的特殊字符串'≥'
        this.rangeLarge = '≥';
        // 范围tag 使用的特殊字符串'≤'
        this.rangeLess = '≤';
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngOnInit() {
        super.ngOnInit();
        this.init();
        // 非中文场景下，标签分割符号是英文冒号加空格。
        if (TiLocale.getLocaleWords().tiLocaleKey !== 'zh-CN') {
            this.tagSeperator = ': ';
        }
        this.oldDefaultField = this.defaultField;
        this.setPlaceholder(this.model);
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        if (changes['items'] && this.items && !changes['items'].firstChange) {
            this.init();
        }
        if (changes['showSettings'] && this.showSettings) {
            // 初始化设置按钮下拉面板中的选项。
            this.initSettingDropOptions();
        }
        else if (changes['showSettings'] && !this.showSettings) {
            this.settingsDropDominatorElem = null;
        }
        if (changes['emptyPlaceholder'] && !changes['emptyPlaceholder'].firstChange && this.emptyPlaceholder) {
            this.setPlaceholder(this.model);
        }
    }
    ngAfterViewChecked() {
        if (this.settingsCom && !this.settingsDropDominatorElem) {
            // 根据设置按钮dom，来设置下拉面板的宽度
            this.settingsDropDominatorElem = this.settingsCom.nativeElement;
            // ngAfterViewChecked是视图已经变化检测结束的钩子函数，如果此时再去改变视图上的接口会有报错.
            // 报错信息：(ExpressionChangedAfterItHasBeenCheckedError) 所以需要强制执行一次变化检测。
            this.changeDetectorRef.detectChanges();
        }
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngAfterViewInit() {
        super.ngAfterViewInit();
        // 值面板可能对齐输入框，也可能对齐标签
        this.valueDropDominator = this.searchInputRf.nativeElement;
        if (this.showSettings) {
            this.settingsDropDominatorElem = this.settingsCom.nativeElement;
        }
        this.alwaysFocusableElems.push(this.dominatorCom.nativeElement, this.searchInputRf.nativeElement);
        this.rightIconsRef.forEach((item) => {
            this.alwaysFocusableElems.push(item.nativeElement);
        });
        this.setFocusableElems(this.alwaysFocusableElems);
        //  因为改变了valueDropDominator ，所以强制刷新一次
        this.changeDetectorRef.detectChanges();
    }
    /**
     * @ignore
     * 设置默认field字段面板选中项
     */
    onSettingDropSelect(option) {
        this.defaultField = option.field;
        this.settingsDropCom.hide();
        // 如果最新的选中项和之前不一样，才会触发defaultFieldChange事件。
        if (this.oldDefaultField !== this.defaultField) {
            this.oldDefaultField = this.defaultField;
            this.defaultFieldChange.emit(option);
        }
    }
    /**
     * @ignore
     * tag发生改变（删减、新增）时触发。
     * TODO: 为什么只有在tag删除的时候，才会触发该函数
     */
    onDominatorModelChange() {
        this.setPlaceholder(this.model);
    }
    setPlaceholder(model) {
        this.dominatorPlaceholder = (model === null || model === void 0 ? void 0 : model.length) > 0 ? this.inputPlaceholder : this.emptyPlaceholder;
    }
    // 输入框处理
    /**
     * @ignore
     * 输入点击事件
     */
    onClickInput(event) {
        this.valueDropDominator = this.searchInputRf.nativeElement;
        // 键已经选中
        if (this.selectedItem) {
            // 如果没有可选项，不显示
            if (!this.selectedItem.options && (!this.selectedItem.type || this.selectedItem.type === 'radio')) {
                return;
            }
            this.setValueDropSearchResult(this.getValueDropOptions(this.selectedItem.field));
            this.showValueDrop();
        }
        else {
            this.propDropSearch(this.inputValue);
        }
    }
    // 属性面板根据输入框中的值搜索选项
    propDropSearch(value) {
        const searchResult = this.searchOptions(value, this.propDropOptions);
        if (searchResult.length > 0) {
            this.propDropCom.searchResult = searchResult;
            this.propDropCom.show();
        }
        else {
            this.propDropCom.hide();
        }
    }
    /**
     * @ignore
     * 输入框按键按下处理Backspace和Enter键
     */
    onKeydownInput(event) {
        // tslint:disable-next-line: deprecation
        switch (event.keyCode) {
            case TiKeymap.KEY_BACKSPACE:
                this.responseBackspace();
                this.setPlaceholder(this.model);
                break;
            case TiKeymap.KEY_ENTER:
                this.responseEnter(event);
                break;
            default:
                break;
        }
    }
    /**
     * @ignore
     * 输入框值变化处理，
     * 输入值时，如果展开的是属性面板，搜索属性，如果是值面板，单选搜索选项，多选匹配选项
     */
    onInputValueChange(value) {
        // 值面板
        if (this.selectedItem) {
            // 有选中项后，输入值之间通知出去，用于值选项数据过多，自己处理搜索。
            this.inputValueChange.emit({
                value,
                item: this.selectedItem
            });
            // 单选搜索
            if (this.selectedItem.type === 'radio') {
                this.dealRadioItemSearch(value);
                // 多选只匹配
            }
            else if (this.selectedItem.type === 'checkbox') {
                this.matchCheckboxInput(value.trim());
                this.showValueDrop();
            }
        }
        else { // 属性面板
            //  ie11 初始化和placeholder改变会触发ngModelChange事件，所有此处屏蔽属性搜索
            if (TiBrowser.isIE()) {
                return;
            }
            this.propDropSearch(value);
        }
    }
    /**
     * @ignore
     * 输入框失去焦点
     *
     */
    onBlurInput() {
        this.valueDropCom.hide();
        this.propDropCom.hide();
        this.valueMultiDropCom.hide();
    }
    /**
     * @ignore
     * 输入框聚焦
     */
    onFocusInput() {
        if (this.selectedItem && this.selectedItem.type === 'radio') {
            this.dealRadioItemSearch(this.inputValue);
        }
    }
    // 整体
    /**
     * @ignore
     * 整体失去焦点
     */
    onBlur() {
        this.hideAllDrops();
    }
    /**
     * @ignore
     * 删除单个tag
     */
    onDelete() {
        // 删除一项后，输入框位置改变，防止drop对齐问题，隐藏所有drop
        this.hideAllDrops();
    }
    /**
     * @ignore
     * 整体点击
     */
    onClick(event) {
        this.searchInputRf.nativeElement.focus();
        this.onClickInput(event);
    }
    /**
     * @ignore
     * 清除所有tag
     */
    onClickClear(event) {
        event.stopPropagation(); // 防止事件冒泡到dominator后，dominator聚焦之后面板打开。
        // 有选中tag才清空，防止多触发ngmodelchange
        if (this.model.length > 0) {
            this.model = [];
        }
        this.selectedItem = undefined;
        this.inputValue = '';
        this.clear.emit();
        this.setPlaceholder(this.model);
    }
    /**
     * @ignore
     * 点击搜索
     */
    onClickSearch(event) {
        event.stopPropagation();
        // 先把输入的内容生成tag
        if (this.inputValue) {
            this.generateTagByInputValue();
        }
        this.hideAllDrops();
        const filter = this.getFilter();
        this.search.emit(filter);
    }
    /**
     * @ignore
     * 点击help图标
     */
    onClickHelp(event) {
        event.stopPropagation();
        this.help.emit(event);
    }
    /**
     * @ignore
     * 点击设置默认搜索项图标
     */
    onClickSetting(event) {
        event.stopPropagation();
        this.settingsDropCom.show();
    }
    /**
     * @ignore
     * 是否有label 类型，用于label 类型的特殊处理
     */
    hasLabeltag() {
        const index = this.items.findIndex((item) => {
            return item.type === 'noValue';
        });
        return index > -1;
    }
    // 两个tag点击切换，事件顺序 mousedown => blur => focus => click
    // tag-value 点击事件 因为要设置焦点，所以要绑定在mousedown上
    /**
     * @ignore
     * 是否有label 类型，用于label 类型的特殊处理
     */
    onMousedownTagValue(event) {
        this.setFocusableElems(this.alwaysFocusableElems.concat(event.target));
    }
    /**
     * @ignore
     */
    onClickTagValue(event, tag) {
        if (!this.tagEditable(tag.type)) {
            return;
        }
        event.stopPropagation();
        this.valueDropDominator = event.target;
        this.editingTag = tag;
        this.hideValueDrops();
        this.selectedItem = this.items.find((item) => {
            return item.field === tag.field;
        });
        this.setValueDropSearchResult(this.getValueDropOptions(tag.field));
        // 多选需要匹配已经选中的选项
        if (this.selectedItem.type === 'checkbox') {
            this.setValueDropSelecteds();
        }
        // 展开面板前更新了面板的参数，所以需要强制变检一次
        this.changeDetectorRef.detectChanges();
        // 如果没有可选项，不显示
        if (!this.selectedItem.options && (!this.selectedItem.type || this.selectedItem.type === 'radio')) {
            return;
        }
        // 在输入框选择时，再点击已选中标签编辑，面板无法展开，
        // 原因当前mousedown事件回调函数在 输入框blur事件之前，先打开后关闭，
        // 所以这里要添加延迟
        setTimeout(() => {
            this.showValueDrop();
        }, 0);
    }
    /**
     * @ignore
     * tag值聚焦
     */
    onFocusTagValue(event, tag) {
        event.preventDefault();
        const elem = event.target;
        this.valueDropDominator = elem;
        // 可编辑类型才选中
        if (tag.type === 'radio' || tag.type === 'checkbox') {
            this.selectHTMLElementText(elem);
        }
    }
    /**
     * @ignore
     * tag值失去焦点
     */
    onBlurTagValue() {
        // 非编辑状态，保持面板的dominator在input上
        this.valueDropDominator = this.searchInputRf.nativeElement;
        this.propDropCom.hide();
        this.valueDropCom.hide();
        this.valueMultiDropCom.hide();
        if (this.selectedItem && (this.selectedItem.type === 'radio' || this.selectedItem.type === 'checkbox' || this.selectedItem.type === 'map')) {
            this.selectedItem = undefined;
            this.editingTag = undefined;
        }
    }
    /**
     * @ignore
     * tag 编辑输入框keydown事件，处理编辑状态下 enter 键操作
     */
    onKeydownTagInput(event) {
        // tslint:disable-next-line: deprecation
        if (event.keyCode === TiKeymap.KEY_ENTER) {
            const tagValue = event.target.textContent;
            if (this.isTagExist(this.selectedItem, tagValue)) {
                return;
            }
            this.generateTag(this.selectedItem, tagValue);
            this.emitChange();
            this.selectedItem = undefined;
            this.editingTag = undefined;
            this.hideValueDrops();
        }
    }
    /**
     * @ignore
     * 标签编辑时只有多选需要处理匹配
     */
    onTagInput(event) {
        if (this.selectedItem.type === 'checkbox') {
            const value = event.target.textContent.trim();
            this.matchCheckboxInput(value);
        }
    }
    /**
     * @ignore
     * 是否可以编辑
     */
    tagEditable(type) {
        // map 类型标签、日期范围和数字范围不能编辑
        return type === 'radio' || type === 'checkbox';
    }
    /**
     * @ignore
     *  属性面板选中回调
     */
    onPorpDropSelect(option) {
        // label类型tag 只在属性面板中选择一次
        if (option.type === 'noValue') {
            this.generateTagByPropDrop(option);
            this.propDropCom.hide();
            return;
        }
        this.selectedItem = this.items.find((item) => {
            return item.field === option.field;
        });
        // 有beforeOpen懒加载，面板展开交给用户
        if (this.beforeOpen.observers.length > 0) {
            this.beforeOpen.emit(this);
            return;
        }
        this.dominatorPlaceholder = (option === null || option === void 0 ? void 0 : option.placeholder) || (this.model.length > 0 ? this.inputPlaceholder : this.emptyPlaceholder);
        // 如果没有可选项，则不显示值面板。
        if (!this.selectedItem || !this.selectedItem.options && (!this.selectedItem.type || this.selectedItem.type === 'radio')) {
            // 先触发动态变化检测，再清除选中属性值（属性面板不允许有选中状态）
            this.changeDetectorRef.detectChanges();
            this.clearPropDropSelected();
            return;
        }
        const options = this.getValueDropOptions(option.field);
        this.valueDropOptions = options;
        this.setValueDropSearchResult(options);
        if (this.selectedItem.type === 'checkbox') {
            this.setValueDropSelecteds();
        }
        // 面板展开前清空输入内容
        this.inputValue = '';
        // 展开面板前更新了面板的参数，所以需要强制变检一次
        this.changeDetectorRef.detectChanges();
        this.showValueDrop();
    }
    /**
     * 暴露外面的打开值面板接口
     */
    open(options) {
        this.setCustomValueDropSearchResult(options);
        this.showValueDrop();
    }
    /**
     * 获取但前选中数据项
     */
    getSelectedItem() {
        return this.selectedItem;
    }
    /**
     * @ignore
     * 单选值面板选中，(包括map类型)
     */
    onValueDropSelect(selected) {
        // 复选时，点击确定按钮结束选择
        if (!this.selectedItem || !selected) {
            return;
        }
        // 处理map类型，map类型需要选择两次
        if (this.selectedItem.type === 'map') {
            this.mapItemSelect(selected);
            return;
        }
        this.generateTagByValuePanel();
        this.clearState();
    }
    /**
     * @ignore
     * 多选底部确定按钮
     */
    onClickValueDropOK(event) {
        //  阻止按钮获取焦点，输入框失去焦点
        event.preventDefault();
        this.generateTagByValuePanel();
        this.clearState();
    }
    /**
     * @ignore
     * 多选底部取消按钮
     */
    onClickValueDropCancel() {
        this.valueMultiDropCom.hide();
    }
    /**
     * @ignore
     * 数字范围
     */
    onClickCustomDropOK() {
        if (!this.selectedItem) {
            return;
        }
        if (this.selectedItem.type === 'numRange') {
            this.generateNumRangetag();
        }
        else if (this.selectedItem.type === 'dateRange') {
            this.generateDateRangeTag();
        }
    }
    /**
     * @ignore
     * 自定义面板取消按钮回调
     */
    onClickCustomDropCancel() {
        this.hideCustomDrop();
        if (this.editingTag) {
            this.selectedItem = undefined;
            this.editingTag = undefined;
        }
    }
    /**
     * @ignore
     * numRange 和 dateRange 面板的宽度需要固定值
     */
    customDropWidth() {
        if (!this.selectedItem) {
            return;
        }
        else if (this.selectedItem.type === 'numRange') {
            return '200px';
        }
        else if (this.selectedItem.type === 'dateRange') {
            // 根据最宽小语种pt_BR词条
            return '300px';
        }
    }
    init() {
        this.initItems();
        this.initPropDropOptions();
    }
    initItems() {
        // 初始化 allValues/ emptyValue
        this.items.forEach((item) => {
            // items 中不写type, 默认单选'radio'
            if (Util.isUndefined(item.type)) {
                item.type = 'radio';
            }
            else if (item.type === 'map' && Array.isArray(item.options)) {
                item.options.forEach((option) => {
                    // 所有值项
                    if (option.allValues !== false && Array.isArray(option.options)) {
                        const allValues = TiLocale.getLocaleWords().tpSearchbox.allValues;
                        const allValueOption = option.options.find((currentOption) => {
                            return currentOption.label === allValues;
                        });
                        if (!allValueOption) {
                            option.options.unshift({
                                label: allValues
                            });
                        }
                    }
                    // 空值项 emptyValue
                    if (option.emptyValue !== false && Array.isArray(option.options)) {
                        const emptyValue = TiLocale.getLocaleWords().tpSearchbox.emptyValue;
                        const emptyValueOption = option.options.find((currentOption) => {
                            return currentOption.label === emptyValue;
                        });
                        if (!emptyValueOption) {
                            option.options.unshift({
                                label: emptyValue
                            });
                        }
                    }
                });
                // 数字范围
            }
            else if (item.type === 'numRange') {
                const start = new FormControl(item.start, [TiValidators.rangeValue(item.min, item.max), this.lessMax('end')]);
                const end = new FormControl(item.end, [TiValidators.rangeValue(item.min, item.max), this.moreMin('start')]);
                item.formControls = new FormGroup({
                    start,
                    end
                });
                // 开始值的校验状态改变后，更新一下结束值的校验状态
                start.statusChanges.subscribe((status) => {
                    if (status === TpSearchboxComponent.VALID && end.status === TpSearchboxComponent.INVALID) {
                        end.updateValueAndValidity({
                            onlySelf: true,
                            emitEvent: false
                        });
                    }
                });
                // 结束值的校验状态改变后，更新一下开始值的校验状态
                end.statusChanges.subscribe((status) => {
                    if (status === TpSearchboxComponent.VALID && start.status === TpSearchboxComponent.INVALID) {
                        start.updateValueAndValidity({
                            onlySelf: true,
                            emitEvent: false
                        });
                    }
                });
                // 日期范围
            }
            else if (item.type === 'dateRange') {
                // tslint:disable-next-line: no-null-keyword
                const startDate = this.isValidDate(new Date(item.start)) ? new Date(item.start) : null;
                // tslint:disable-next-line: no-null-keyword
                const endDate = this.isValidDate(new Date(item.end)) ? new Date(item.end) : null;
                const start = new FormControl(startDate);
                const end = new FormControl(endDate);
                item.formControls = new FormGroup({
                    start,
                    end
                });
                // 开始日期的max是结束日期的选中值，如果结束日期没有选择，使用item中设置的max
                item.startMax = endDate ? endDate : item.max;
                // 结束日期的min是开始日期的选中值，如果开始日期没有选择，使用item中设置的min
                item.endMin = startDate ? startDate : item.min;
                start.valueChanges.subscribe((value) => {
                    // tslint:disable-next-line: prefer-conditional-expression
                    if (this.isValidDate(value)) {
                        item.endMin = value;
                    }
                    else if (this.isValidDate(item.min)) {
                        item.endMin = item.min;
                    }
                    else {
                        // 没有设置 min,开始日期选中又清除后，需要设置一个min的缺省值
                        item.endMin = undefined;
                    }
                });
                end.valueChanges.subscribe((value) => {
                    // tslint:disable-next-line: prefer-conditional-expression
                    if (this.isValidDate(value)) {
                        item.startMax = value;
                    }
                    else if (this.isValidDate(item.max)) {
                        item.startMax = item.max;
                    }
                    else {
                        // 没有设置 max, 结束日期选中又清除后，需要设置一个max的缺省值
                        item.startMax = undefined;
                    }
                });
            }
        });
    }
    // Invalid Date判断
    // tslint:disable-next-line: prefer-function-over-method
    isValidDate(date) {
        return Object.prototype.toString.call(date) === '[object Date]' && String(date) !== 'Invalid Date';
    }
    // 自定义校验规则小于最大值
    // 静态方法返回箭头函数生成环境打包错误，所以使用
    // tslint:disable-next-line: prefer-function-over-method
    lessMax(field) {
        return (control) => {
            if (control.parent && control.parent.get(field)) {
                const end = control.parent.get(field).value;
                // 开始和结束值都存在时，判断开始可结束值的大小
                if (end && control.value && control.value > end) {
                    return {
                        minValue: {
                            actualValue: control.value,
                            tiErrorMessage: TiLocale.getLocaleWords().tpSearchbox.rangeMinErr
                        }
                    };
                }
            }
            // tslint:disable-next-line: no-null-keyword
            return null;
        };
    }
    // 自定义校验规则，大于最小值
    // tslint:disable-next-line: prefer-function-over-method
    moreMin(field) {
        return (control) => {
            if (control.parent && control.parent.get(field)) {
                const start = control.parent.get(field).value;
                // 开始和结束值都存在时，判断开始可结束值的大小
                if (start && control.value && control.value < start) {
                    return {
                        minValue: {
                            actualValue: control.value,
                            tiErrorMessage: TiLocale.getLocaleWords().tpSearchbox.rangeMaxErr
                        }
                    };
                }
            }
            // tslint:disable-next-line: no-null-keyword
            return null;
        };
    }
    // 初始化属性面板选项
    initPropDropOptions() {
        const options = [];
        this.items.forEach((item) => {
            const option = {
                field: item.field,
                label: item.label,
                type: item.type,
                placeholder: item === null || item === void 0 ? void 0 : item.placeholder
            };
            // label
            if (item.type === 'noValue') {
                option['children'] = item.children.map((childOption) => {
                    childOption.type = 'noValue';
                    return childOption;
                });
            }
            options.push(option);
        });
        this.propDropOptions = options;
    }
    initSettingDropOptions() {
        // 只有noValue类型不能设置为默认搜索项
        const options = this.items.filter((item) => {
            return item.type !== 'noValue';
        })
            .map((item) => {
            const option = {
                label: item.label,
                field: item.field
            };
            // 如果设置了defaultField，面板中高亮显示
            if (this.defaultField === option.field) {
                this.settingsDropSelected = option;
            }
            return option;
        });
        // 使用分组来显示面板标题
        this.settingDropOptions = [{
                label: this.settingTipContent,
                children: options
            }];
    }
    matchCheckboxInput(value) {
        const valueArray = value.split('|')
            .map((span) => {
            return span.trim();
        });
        this.valueDropSelecteds = [];
        this.selectedItem.options.forEach((option) => {
            if (valueArray.includes(option.label)) {
                this.valueDropSelecteds.push(option);
            }
        });
    }
    dealRadioItemSearch(value) {
        const searchResult = this.searchOptions(value, this.valueDropOptions);
        if (searchResult.length > 0) {
            this.setValueDropSearchResult(searchResult);
            this.showValueDrop();
        }
        else {
            this.valueDropCom.hide();
        }
    }
    // 设置值面板的选项
    setValueDropSearchResult(options) {
        if (this.selectedItem.type === 'checkbox') {
            this.valueMultiDropCom.searchResult = options;
        }
        else if (this.selectedItem.type === 'radio' || this.selectedItem.type === 'map') {
            this.valueDropCom.searchResult = options;
        }
    }
    // 懒加载时，设置值面板选项
    setCustomValueDropSearchResult(options) {
        if (this.selectedItem.type === 'checkbox') {
            this.selectedItem.options = options;
            this.valueMultiDropCom.searchResult = options;
        }
        else if (this.selectedItem.type === 'radio') {
            this.selectedItem.options = options;
            this.valueDropCom.searchResult = options;
        }
        else if (this.selectedItem.type === 'map') {
            this.selectedItem.options = options;
            this.valueDropCom.searchResult = [{
                    label: TiLocale.getLocaleWords().tpSearchbox.tagKey,
                    children: options
                }];
        }
        this.changeDetectorRef.detectChanges();
    }
    // 根据输入内容生成tag
    generateTagByInputValue() {
        // 有选中项且可编辑
        if (this.selectedItem) {
            if (this.tagEditable(this.selectedItem.type) || this.selectedItem.type === 'map') {
                if (this.isTagExist(this.selectedItem, this.inputValue)) {
                    return;
                }
                this.generateTag(this.selectedItem, this.inputValue);
                this.emitChange();
                this.selectedItem = undefined;
                this.inputValue = '';
                this.hideValueDrops();
            }
            return;
        }
        // 没有选中项，按默认值处理
        if (!this.defaultField || this.inputValue === '') {
            return;
        }
        // 属性面板展开，会触发dropsearch的快捷键，所以先关闭
        this.propDropCom.hide();
        // 输入字符串之间可能使用中英文','分割
        const values = this.inputValue.split(/[，,]/)
            .map((value) => {
            return value.trim();
        })
            .filter((value) => {
            return value !== '';
        });
        if (values.length === 0) {
            return;
        }
        // 因为要多次生成tag, 会多次更新model,
        // 用此变量标记在最后一次生成更新model后发射ngModelChange事件
        let modelChanged = false;
        // 只支持每次输入都是同一类型的，所以多个值用第一个匹配，找到匹配项
        const matchedItem = this.items.find((item) => {
            return item.regexp && item.regexp.test(values[0]);
        });
        if (matchedItem) {
            values.forEach((value) => {
                if (!this.isTagExist(matchedItem, value)) {
                    modelChanged = true;
                    this.generateTag(matchedItem, value);
                }
            });
        }
        else if (this.defaultField) {
            const defaultItem = this.items.find((item) => {
                return this.defaultField === item.field;
            });
            // 默认项生成tag,不支持逗号分隔，所以用inputValue整体
            if (!this.isTagExist(defaultItem, this.inputValue)) {
                modelChanged = true;
                this.generateTag(defaultItem, this.inputValue);
            }
        }
        this.inputValue = '';
        if (modelChanged) {
            this.emitChange();
        }
    }
    // 属性面板没有选中项,所以要清除处理。如果不进行重置，则会出现选中样式~
    clearPropDropSelected() {
        this.propDropSelected = undefined;
    }
    responseEnter(event) {
        this.generateTagByInputValue();
    }
    responseBackspace() {
        if (this.inputValue) {
            return;
        }
        // 处理map类型标签tag
        if (this.selectedOption) {
            this.selectedOption = undefined;
            this.valueDropCom.hide();
            const searchResult = this.getValueDropOptions(this.selectedItem.field);
            this.setValueDropSearchResult(searchResult);
            // 展开面板前更新了面板的参数，所以需要强制变检一次
            this.changeDetectorRef.detectChanges();
            this.showValueDrop();
        }
        else if (this.selectedItem) {
            // 处理有选中属性
            this.hideValueDrops();
            this.selectedItem = undefined;
            // 展开面板前更新了面板的参数，所以需要强制变检一次
            this.changeDetectorRef.detectChanges();
            this.propDropCom.show();
        }
        else if (this.model.length > 0) {
            // 处理已经选中的标签
            this.propDropCom.hide();
            // 清除items 中的选中项
            this.model.pop();
            // change事件
            this.emitChange();
        }
    }
    // 展示值面板封装单选和多选
    showValueDrop() {
        // 当点击选中的tag值时，dominatorSpace 需要改变，
        // 5px = （22 -16）/2 +2 ; 22-tag高度，16-文字高度，2-上下两边，2-tag和组件边框之间的距离
        this.dominatorSpace = this.editingTag ? '10px' : '7px';
        // 展开面板前更新了面板的参数，所以需要强制变检一次
        this.changeDetectorRef.detectChanges();
        this.clearPropDropSelected();
        switch (this.selectedItem.type) {
            case 'radio':
                this.valueDropCom.show();
                break;
            case 'map':
                this.valueDropCom.show();
                break;
            case 'checkbox':
                this.valueMultiDropCom.show();
                break;
            case 'numRange':
                this.customDropCom.show();
                this.setNumRangeDropFocusableElems();
                break;
            case 'dateRange':
                this.customDropCom.show();
                this.setDateRangeDropFocusableElems();
                break;
            default:
                break;
        }
    }
    hideAllDrops() {
        this.propDropCom.hide();
        this.hideValueDrops();
        if (this.showSettings) {
            this.settingsDropCom.hide();
        }
    }
    hideValueDrops() {
        this.valueDropCom.hide();
        this.valueMultiDropCom.hide();
        this.customDropCom.hide();
    }
    hideCustomDrop() {
        // 自定义面板隐藏前，让dominator重新聚焦，防止整体失焦
        this.dominatorCom.focus();
        this.customDropCom.hide();
    }
    // 根据关键词(忽略大小写)过滤options
    // tslint:disable-next-line: prefer-function-over-method
    searchOptions(keyword, options) {
        const keywordUpper = keyword.toLocaleUpperCase();
        return options.filter((option) => {
            const labelUpper = option.label.toLocaleUpperCase();
            return labelUpper.indexOf(keywordUpper) !== -1;
        });
    }
    // map 类型
    mapItemSelect(option) {
        if (this.selectedOption) {
            const field = this.selectedItem.field;
            const label = this.selectedItem.label;
            const value = `${this.selectedOption.label}=${option.label}`;
            const newTag = {
                field,
                label,
                value,
                type: 'map'
            };
            if (!this.model) {
                this.model = [newTag];
                return;
            }
            const index = this.model.findIndex((tag) => {
                return tag.field === field && tag.value === value;
            });
            // 标签编辑时，是替换
            if (this.editingTag) {
                this.editingTag = newTag;
                this.model.splice(index, 1, newTag);
            }
            else if (index === -1) {
                this.model.push(newTag);
            }
            this.emitChange();
            this.selectedItem = undefined;
            this.selectedOption = undefined;
            this.editingTag = undefined;
            this.valueDropCom.hide();
        }
        else {
            this.selectedOption = option;
            if (Array.isArray(this.selectedOption.options)) {
                const children = this.selectedOption.options;
                this.valueDropCom.searchResult = [{
                        label: TiLocale.getLocaleWords().tpSearchbox.tagValue,
                        children
                    }];
            }
            else {
                this.valueDropCom.searchResult = [];
            }
            this.changeDetectorRef.detectChanges();
            // 点击选项后默认会关闭面板，所以延迟后再次打开
            setTimeout(() => {
                this.showValueDrop();
            }, 0);
        }
    }
    setValueDropSelecteds() {
        const selectedTag = this.model.find((tag) => {
            return this.selectedItem.field === tag.field;
        });
        if (selectedTag) {
            this.matchCheckboxInput(selectedTag.value);
        }
    }
    // 清理临时状态
    clearState() {
        this.editingTag = undefined;
        this.selectedItem = undefined;
        this.inputValue = '';
        this.valueDropSelecteds = [];
        this.valueDropSelected = undefined;
        this.hideValueDrops();
    }
    generateNumRangetag() {
        const values = this.selectedItem.formControls.value;
        if (this.selectedItem.formControls.status === TpSearchboxComponent.INVALID || (!values.start && !values.end)) {
            return;
        }
        let tagValue;
        if (values.start && values.end) {
            tagValue = `${values.start}${this.rangeLine}${values.end}`;
        }
        else if (values.start) {
            tagValue = this.rangeLarge + values.start;
        }
        else if (values.end) {
            tagValue = this.rangeLess + values.end;
        }
        // 数字范围可能有单位
        let label = this.selectedItem.label;
        if (this.selectedItem.unit) {
            label = `${label}(${this.selectedItem.unit})`;
        }
        const newTag = {
            field: this.selectedItem.field,
            label,
            type: 'numRange',
            start: values.start,
            end: values.end,
            value: tagValue
        };
        if (!this.model) {
            this.model = [newTag];
            return;
        }
        const tagIndex = this.model.findIndex((tag) => {
            return tag.field === this.selectedItem.field;
        });
        if (tagIndex === -1) {
            this.model.push(newTag);
        }
        else {
            this.model.splice(tagIndex, 1, newTag);
        }
        this.afterGenerateTag();
    }
    generateDateRangeTag() {
        const values = this.selectedItem.formControls.value;
        if (!values.start && !values.end) {
            return;
        }
        let tagValue = '';
        let start;
        let end;
        if (values.start && values.end) {
            tagValue = `${this.formatDate2String(values.start)}${this.rangeLine}${this.formatDate2String(values.end)}`;
            start = values.start.toISOString();
            end = values.end.toISOString();
        }
        else if (values.start) {
            tagValue = this.rangeLarge + this.formatDate2String(values.start);
            start = values.start.toISOString();
        }
        else if (values.end) {
            tagValue = this.rangeLess + this.formatDate2String(values.end);
            end = values.end.toISOString();
        }
        const newTag = {
            field: this.selectedItem.field,
            label: this.selectedItem.label,
            start,
            end,
            type: 'dateRange',
            value: tagValue
        };
        if (!this.model) {
            this.model = [newTag];
            return;
        }
        const tagIndex = this.model.findIndex((curTag) => {
            return curTag.field === this.selectedItem.field;
        });
        if (tagIndex === -1) {
            this.model.push(newTag);
        }
        else {
            this.model.splice(tagIndex, 1, newTag);
        }
        this.afterGenerateTag();
    }
    afterGenerateTag() {
        this.emitChange();
        this.hideCustomDrop();
        this.selectedItem = undefined;
    }
    setNumRangeDropFocusableElems() {
        const inputs = this.customDropCom.nativeElement.querySelectorAll('[tiText]');
        const inputElemsArray = [].slice.call(inputs);
        this.setFocusableElems(this.alwaysFocusableElems.concat(inputElemsArray, this.getButtons(), this.customDropCom.nativeElement));
    }
    setDateRangeDropFocusableElems() {
        // 日期范围面板中的日期组件，存在焦点问题，
        const elemsNodeList = this.alwaysFocusableElems.concat(this.customDropCom.nativeElement, this.dateRangeStartCom.getFocusableElems(), this.dateRangeEndCom.getFocusableElems(), this.getButtons());
        this.setFocusableElems(elemsNodeList);
        this.changeDetectorRef.detectChanges();
        this.changeDetectorRef.markForCheck();
    }
    getButtons() {
        const buttons = this.customDropCom.nativeElement.querySelectorAll('[tiButton]');
        return [].slice.call(buttons);
    }
    // 日期对象转字符串
    formatDate2String(date) {
        if (!this.isValidDate(date)) {
            return '';
        }
        else {
            return TiLocaleFormat.formatDate(date, this.selectedItem.format);
        }
    }
    generateTagByValuePanel() {
        let tagValue = '';
        // 单选复选
        if (this.selectedItem.type === 'checkbox') {
            tagValue = this.valueDropSelecteds.reduce((acc, cur, index) => {
                return index === 0 ? cur.label : `${acc} | ${cur.label}`;
            }, '');
        }
        else {
            tagValue = this.valueDropSelected.label;
        }
        if (this.isTagExist(this.selectedItem, tagValue)) {
            return;
        }
        this.generateTag(this.selectedItem, tagValue);
        // change 事件
        this.emitChange();
    }
    // 当前要生成的tag是否已经存在
    isTagExist(selectedItem, tagValue) {
        // 新选中的tag是否已经存在
        const selectedTagIndex = this.model.findIndex((tag) => {
            return tag.field === selectedItem.field && tag.value === tagValue;
        });
        return selectedTagIndex !== -1;
    }
    // label 类型的标签，只选择一次
    generateTagByPropDrop(option) {
        const newTag = {
            field: option.field,
            label: option.label,
            value: '',
            type: 'noValue'
        };
        if (!this.model) {
            this.model = [newTag];
            return;
        }
        // 只有一个label类型的tag
        const index = this.model.findIndex((tag) => {
            return tag.type === 'noValue';
        });
        // 存在标签时替换，不存在时添加到最后
        if (index > 0) {
            this.model.splice(index, 1, newTag);
        }
        else {
            this.model.push(newTag);
        }
        this.emitChange();
    }
    // 生成tag
    generateTag(selectedItem, tagValue) {
        const newTag = {
            field: selectedItem.field,
            label: selectedItem.label,
            value: tagValue,
            type: selectedItem.type
        };
        // 如果选中field中设置了optionValueKey，给生成tag 添加额外的key, 单选为字符串，复选为字符串数组
        if (selectedItem.optionValueKey) {
            this.addOtherOptionKey(newTag, selectedItem.optionValueKey);
        }
        this.updateModel(newTag, selectedItem);
    }
    addOtherOptionKey(tag, valueKey) {
        // 只对单选和复选做处理
        if (this.selectedItem.type === 'checkbox' && this.valueDropSelecteds) {
            this.valueDropSelecteds.forEach((option) => {
                if (Array.isArray(tag[valueKey])) {
                    tag[valueKey].push(option[valueKey]);
                }
                else {
                    tag[valueKey] = [option[valueKey]];
                }
            });
        }
        else if (this.selectedItem.type === 'radio' && this.valueDropSelected) {
            tag[valueKey] = this.valueDropSelected[valueKey];
        }
    }
    updateModel(newTag, selectedItem) {
        if (!this.model) {
            this.model = [newTag];
            return;
        }
        // 编辑模式
        if (this.editingTag) {
            const editingTagIndex = this.model.findIndex((tag) => {
                return tag.field === selectedItem.field && tag.value === this.editingTag.value;
            });
            this.model.splice(editingTagIndex, 1, newTag);
        }
        else {
            // tags中相同field
            const fieldTagIndex = this.model.findIndex((tag) => {
                return tag.field === selectedItem.field;
            });
            // radio 类型可以设置是否替换，map默认不可替换,
            if (fieldTagIndex === -1 || (selectedItem.type === 'radio' && selectedItem.replace === false) || selectedItem.type === 'map') {
                this.model.push(newTag);
            }
            else {
                this.model.splice(fieldTagIndex, 1, newTag);
            }
        }
    }
    emitChange() {
        this.model = this.model.concat();
        this.setPlaceholder(this.model);
    }
    getValueDropOptions(field) {
        let options = this.selectedItem && Array.isArray(this.selectedItem.options) ?
            this.selectedItem.options : [];
        // map类型，利用分组标题显示面板标题
        if (this.selectedItem.type === 'map') {
            // 如果已经选中标签的键
            if (this.selectedOption) {
                options = [
                    {
                        label: TiLocale.getLocaleWords().tpSearchbox.tagValue,
                        children: this.selectedOption.options
                    }
                ];
            }
            else {
                options = [
                    {
                        label: TiLocale.getLocaleWords().tpSearchbox.tagKey,
                        children: this.selectedItem.options
                    }
                ];
            }
        }
        return options;
    }
    // 生成结果 filter对象
    getFilter() {
        const filter = {};
        this.model.forEach((tag) => {
            // 已经存在，合并一起
            if (Array.isArray(filter[tag.field])) {
                filter[tag.field] = filter[tag.field].concat(tag.value.split('|')
                    .map((value) => {
                    return value.trim();
                }));
            }
            else {
                filter[tag.field] = tag.value.split('|')
                    .map((value) => {
                    return value.trim();
                });
            }
        });
        return filter;
    }
    // 选中一段html，三种浏览器测试正常
    // tslint:disable-next-line: prefer-function-over-method
    selectHTMLElementText(elem) {
        const range = document.createRange();
        range.selectNodeContents(elem);
        const selection = window.getSelection();
        selection.removeAllRanges();
        selection.addRange(range);
    }
}
/**
 * @ignore
 * formControl 校验状态，通过了所有有效性检查
 */
TpSearchboxComponent.VALID = 'VALID';
/**
 * @ignore
 * formControl 校验状态，至少有一个有效性检查失败了
 */
TpSearchboxComponent.INVALID = 'INVALID';
TpSearchboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-searchbox',
                template: "<ti-dominator\r\n    type=\"tagsinput\"\r\n    multiple=\"true\"\r\n    class=\"tp-searchbox-dominator\"\r\n    [tagMaxWidth]=\"tagMaxWidth\"\r\n    [id]=\"appendId('tp-searchbox-dominator')\"\r\n    [maxLine]=\"maxLine\"\r\n    (delete)=\"onDelete()\"\r\n    [(ngModel)]=\"model\"\r\n    (ngModelChange)=\"onDominatorModelChange()\">\r\n        <!-- tag\u5185\u5BB9 -->\r\n        <ng-template #item let-tag let-index=index>\r\n            <section class=\"tp-searchbox-tag-key\" [id]=\"appendId('tag_key_' + index)\">{{tag.label}}</section><!--\r\n        --><ng-container *ngIf=\"tag.type !=='noValue'\" >\r\n                    <section class=\"tp-searchbox-tag-seperator\" >{{tagSeperator}}</section><!--\r\n                 --><section\r\n                        [attr.contenteditable]=\"tagEditable(tag.type)\"\r\n                        tabindex=\"0\"\r\n                        class=\"tp-searchbox-tag-value\"\r\n                        (mousedown)=\"onMousedownTagValue($event)\"\r\n                        (click)=\"onClickTagValue($event,tag)\"\r\n                        (blur)=\"onBlurTagValue()\"\r\n                        (input)=\"onTagInput($event)\"\r\n                        (focus)=\"onFocusTagValue($event, tag)\"\r\n                        (keydown)=\"onKeydownTagInput($event)\"\r\n                        [id]=\"appendId('tag_value_' + index)\">{{tag.value}}</section>\r\n                </ng-container>\r\n        </ng-template>\r\n        <!-- \u8F93\u5165\u6846\u548C\u6309\u94AE\u7EC4 -->\r\n        <section\r\n            tag-editor\r\n            class=\"tp-searchbox-right\">\r\n            <section class=\"tp-searchbox-search-field\">\r\n                <span class=\"tp-searchbox-prop\" *ngIf=\"selectedItem && !editingTag\">{{selectedItem.label}}{{tagSeperator}}</span>\r\n                <span *ngIf=\"selectedItem?.type == 'map'&& selectedOption && !editingTag\">{{selectedOption?.label}}=</span>\r\n                <input #searchInput\r\n                    tiText\r\n                    noborder\r\n                    type=\"text\"\r\n                    class=\"tp-searchbox-input\"\r\n                    [ngClass]=\"{'tp-searchbox-input-grow': !inputWidth}\"\r\n                    [placeholder]=\"dominatorPlaceholder\"\r\n                    [(ngModel)]=\"inputValue\"\r\n                    (ngModelChange)=\"onInputValueChange($event)\"\r\n                    (click)=\"onClickInput($event)\"\r\n                    (blur)=\"onBlurInput()\"\r\n                    (focus)=\"onFocusInput()\"\r\n                    (keydown)=\"onKeydownInput($event)\"\r\n                    [ngStyle]=\"{width:inputWidth}\"\r\n                    [id]=\"appendId('input')\"/>\r\n            </section>\r\n            <!-- \u53F3\u4FA7\u6309\u94AE\u7EC4 -->\r\n            <section actions class=\"tp-searchbox-buttons\">\r\n                <ng-container  *ngIf=\"model?.length>0 || inputValue\">\r\n                    <tp-icon local\r\n                    class=\"tp-searchbox-clear\"\r\n                    name=\"cloud-action-cross\"\r\n                    [tiTip]=\"clearTipContent\"\r\n                    (click)=\"onClickClear($event)\"\r\n                    [id]=\"appendId('clear')\"></tp-icon>\r\n                    <span  class=\"tp-searchbox-clear-dividing-line\"></span>\r\n                </ng-container>\r\n                <tp-icon #rightIcon local tiOutline *ngIf=\"showHelp\" name=\"cloud-action-tip\"\r\n                [tabindex]=\"0\" (keydown.enter)=\"onClickHelp($event)\" style=\"outline-offset: -2px;\"\r\n                (click)=\"onClickHelp($event)\" [tiTip]=\"helpTipContent\" [id]=\"appendId('helptip')\"></tp-icon>\r\n                <tp-icon #rightIcon local tiOutline\r\n                    *ngIf=\"showSettings\"\r\n                    #settings\r\n                    name=\"cloud-action-setting\"\r\n                    [tiTip]=\"settingTipContent\"\r\n                    [tabindex]=\"0\"\r\n                    style=\"outline-offset: -2px;\"\r\n                    (keydown.enter)=\"onClickSetting($event)\"\r\n                    (click)=\"onClickSetting($event)\"\r\n                    [id]=\"appendId('setting')\">\r\n                </tp-icon>\r\n                <!--\u8BBE\u7F6Eoutline-offset: -2px;\u662F\u4E3A\u4E86\u4FDD\u8BC1\u805A\u7126\u7684\u65F6\u5019\uFF0C\u9ED8\u8BA4\u8FB9\u6846\u4E0D\u4F1A\u88AB\u906E\u6321 -->\r\n                <tp-icon #rightIcon local tiOutline name=\"cloud-action-search\" [tabindex]=\"0\"\r\n                style=\"outline-offset: -2px;\"\r\n                (keydown.enter)=\"onClickSearch($event)\" (click)=\"onClickSearch($event)\" [id]=\"appendId('search')\">\r\n                </tp-icon>\r\n            </section>\r\n        </section>\r\n</ti-dominator>\r\n\r\n<!-- \u5C5E\u6027\u9762\u677F -->\r\n<ti-dropsearch #propDrop\r\n    [dominatorElem]=\"searchInput.nativeElement\"\r\n    dominatorSpace=\"7px\"\r\n    [(ngModel)]='propDropSelected'\r\n    [id]=\"appendId('tp_searchbox_prop_drop')\"\r\n    [options]=\"propDropOptions\"\r\n    [panelMaxHeight]=\"panelMaxHeight\"\r\n    [panelWidth]=\"propPanelWidth\"\r\n    type=\"suggestion\"\r\n    (select)=\"onPorpDropSelect($event)\">\r\n    <ng-template #item let-item let-i=index let-last=last>\r\n        <ng-container *ngIf=\" item.type=='noValue'; else defaultTemplate\" >\r\n            <section\r\n              class=\"tp-searchbox-group-option\"\r\n              [ngClass]=\"{\r\n                'tp-searchbox-group-title': item.type === 'noValue'&& item.children,\r\n                'tp-searchbox-group-option-last': last\r\n               }\">\r\n                <ng-container *ngIf=\"item.children\">\r\n                    <tp-icon [name]=\"'cloud-action-state-failed'\"></tp-icon>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"!item.children\">\r\n                    <i class=\"tp-searchbox-group-option-icon\"></i>\r\n                </ng-container>\r\n                <section class=\"tp-searchbox-group-text\">{{item.label}}</section>\r\n            </section>\r\n        </ng-container>\r\n        <ng-template #defaultTemplate >\r\n            <span [ngClass]=\"{'tp-searchbox-option-normal': hasLabeltag()}\" [title]=\"item['label']\">{{item['label']}}</span>\r\n        </ng-template>\r\n    </ng-template>\r\n</ti-dropsearch>\r\n\r\n<!-- \u5355\u9009\u503C\u9762\u677F -->\r\n<ti-dropsearch #valueDrop\r\n    type=\"suggestion\"\r\n    [id]=\"appendId('tp_searchbox_value_drop')\"\r\n    [options]=\"valueDropOptions\"\r\n    [dominatorElem]=\"valueDropDominator\"\r\n    [panelMaxHeight]=\"panelMaxHeight\"\r\n    [panelWidth]=\"valuePanelWidth\"\r\n    [(ngModel)]='valueDropSelected'\r\n    [dominatorSpace]=\"dominatorSpace\"\r\n    (ngModelChange)=\"onValueDropSelect($event)\"\r\n     >\r\n    <ng-template  let-item let-i=index>\r\n        <span [title]=\"item['label']\">{{item['label']}}</span>\r\n    </ng-template>\r\n</ti-dropsearch>\r\n\r\n<!-- \u591A\u9009\u503C\u9762\u677F -->\r\n<ti-dropsearch #valueMultiDrop\r\n    type=\"suggestion\"\r\n    [id]=\"appendId('tp_searchbox_value_multi_drop')\"\r\n    [options]=\"valueDropOptions\"\r\n    [(ngModel)]='valueDropSelecteds'\r\n    [multiple]=\"true\"\r\n    [selectAll]=\"true\"\r\n    [dominatorElem]=\"valueDropDominator\"\r\n    [panelWidth]=\"valuePanelWidth\"\r\n    [panelMaxHeight]=\"panelMaxHeight\"\r\n    [dominatorSpace]=\"dominatorSpace\"\r\n    >\r\n        <ng-template  let-item let-i=index>\r\n            <span [title]=\"item['label']\">{{item['label']}}</span>\r\n        </ng-template>\r\n        <!-- \u590D\u9009\u5E95\u90E8\u6309\u94AE -->\r\n       <ng-template #footer>\r\n            <section class=\"tp-searchbox-drop-buttons\">\r\n                <button\r\n                    tiButton\r\n                    (mousedown)=\"onClickValueDropOK($event)\"\r\n                    [id]=\"appendId('ok')\"\r\n                    type=\"button\" size=\"small\"\r\n                    class=\"tp-searchbox-button-ok\">{{'tpSearchbox.buttonOk'| tiTranslate}}</button>\r\n                <button\r\n                    (click)=\"onClickValueDropCancel()\"\r\n                    [id]=\"appendId('cancel')\"\r\n                    type=\"button\"\r\n                    size=\"small\"\r\n                    tiButton >{{'tpSearchbox.buttonCancel'| tiTranslate}}</button>\r\n            </section>\r\n       </ng-template>\r\n</ti-dropsearch>\r\n\r\n\r\n\r\n<!-- \u8BBE\u7F6E\u9009\u4E2D(\u53F3\u4FA7\u7684\u8BBE\u7F6E\u56FE\u6807) -->\r\n<ng-container *ngIf=\"showSettings\">\r\n    <ti-dropsearch #settingsDrop\r\n    type=\"suggestion\"\r\n    [id]=\"appendId('tp-searchbox-settings-drop')\"\r\n    [options]=\"settingDropOptions\"\r\n    [dominatorElem]=\"settingsDropDominatorElem\"\r\n    [panelMaxHeight]=\"panelMaxHeight\"\r\n    [panelWidth]=\"valuePanelWidth\"\r\n    panelAlign=\"right\"\r\n    (select)=\"onSettingDropSelect($event)\">\r\n    <ng-template  let-item let-i=index>\r\n        {{item['label']}}\r\n    </ng-template>\r\n</ti-dropsearch>\r\n</ng-container>\r\n\r\n\r\n<!-- \u6570\u5B57\u548C\u65E5\u671F\u8303\u56F4 -->\r\n<ti-drop #customDrop\r\n    [id]=\"appendId('tp-searchbox-custom-drop')\"\r\n    class=\"tp-searchbox-custom-drop\"\r\n    dominatorSpace=\"7px\"\r\n    [dominatorElem]=\"valueDropDominator\"\r\n    [fixMaxHeight]=\"true\"\r\n    [panelWidth]=\"customDropWidth()\"\r\n    >\r\n    <ng-container *ngIf=\"selectedItem && selectedItem.type=='numRange'\">\r\n        <ng-container *ngTemplateOutlet=\"numberRangeTemplate\">\r\n        </ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"selectedItem && selectedItem.type=='dateRange'\">\r\n        <ng-container *ngTemplateOutlet=\"dateRangeTemplate\">\r\n        </ng-container>\r\n    </ng-container>\r\n</ti-drop>\r\n\r\n<ng-template #numberRangeTemplate>\r\n     <form  [formGroup]=\"selectedItem.formControls\">\r\n        <section class=\"tp-searchbox-range\" >\r\n            <section class=\"tp-searchbox-range-tip\">{{'tpSearchbox.rangeNumberTitle'| tiTranslate}}</section>\r\n            <section class=\"tp-searchbox-number-range-field\" >\r\n               <label>\r\n                   {{'tpSearchbox.minValueText'| tiTranslate}}\r\n                   <ng-container *ngIf=\"selectedItem.unit\">{{'('+selectedItem.unit+')'}}</ng-container>\r\n               </label>\r\n               <input class=\"tp-searchbox-num-min\" tiText type=\"number\" formControlName=\"start\" tiValidation>\r\n            </section>\r\n            <section class=\"tp-searchbox-number-range-field\">\r\n               <label>{{'tpSearchbox.maxValueText'| tiTranslate}}\r\n                <ng-container *ngIf=\"selectedItem.unit\">{{'('+selectedItem.unit+')'}}</ng-container>\r\n               </label>\r\n               <input tiText type=\"number\" formControlName=\"end\" tiValidation >\r\n            </section>\r\n            <section  class=\"tp-searchbox-range-buttons\">\r\n                 <button\r\n                     tiButton\r\n                     (click)=\"onClickCustomDropOK()\"\r\n                     type=\"button\" size=\"small\"\r\n                     class=\"tp-searchbox-button-ok\">{{'tpSearchbox.buttonOk'| tiTranslate}}</button>\r\n                  <button\r\n                     (click)=\"onClickCustomDropCancel()\"\r\n                     type=\"button\"\r\n                     size=\"small\"\r\n                     tiButton >{{'tpSearchbox.buttonCancel'| tiTranslate}}</button>\r\n            </section>\r\n         </section>\r\n     </form>\r\n</ng-template>\r\n\r\n<ng-template #dateRangeTemplate>\r\n    <form  [formGroup]=\"selectedItem.formControls\">\r\n        <section class=\"tp-searchbox-range\">\r\n            <section class=\"tp-searchbox-range-tip\">{{'tpSearchbox.rangeDateTitle'| tiTranslate}}</section>\r\n            <section class=\"tp-searchbox-date-range-field\" >\r\n               <label >{{'tpSearchbox.rangeBeginLabel'| tiTranslate}}</label>\r\n               <ti-date\r\n                    #dateRangeStart\r\n                    class=\"tp-searchbox-date-range\"\r\n                    formControlName=\"start\"\r\n                    [max]=\"selectedItem.startMax\"\r\n                    [min]=\"selectedItem.min\"\r\n                    [format]=\"selectedItem.format\"\r\n               ></ti-date>\r\n            </section>\r\n            <section class=\"tp-searchbox-date-range-field\">\r\n               <label>{{'tpSearchbox.rangeEndLabel'| tiTranslate}}</label>\r\n               <ti-date\r\n                    #dateRangeEnd\r\n                    [max]=\"selectedItem.max\"\r\n                    [min]=\"selectedItem.endMin\"\r\n                    formControlName=\"end\"\r\n                    [format]=\"selectedItem.format\"\r\n                    class=\"tp-searchbox-date-range\"\r\n               ></ti-date>\r\n            </section>\r\n            <section  class=\"tp-searchbox-range-buttons\">\r\n                <button\r\n                     tiButton\r\n                     (click)=\"onClickCustomDropOK()\"\r\n                     type=\"button\" size=\"small\"\r\n                     class=\"tp-searchbox-button-ok\">{{'tpSearchbox.buttonOk'| tiTranslate}}</button>\r\n                <button\r\n                     (click)=\"onClickCustomDropCancel()\"\r\n                     type=\"button\"\r\n                     size=\"small\"\r\n                     tiButton >{{'tpSearchbox.buttonCancel'| tiTranslate}}</button>\r\n            </section>\r\n         </section>\r\n     </form>\r\n\r\n</ng-template>\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                host: {
                    '(blur)': 'onBlur()',
                    '(click)': 'onClick($event)'
                },
                providers: [TiFormComponent.getValueAccessor(TpSearchboxComponent)],
                styles: [".ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}::ng-deep :root{--tp-searchbox-button-height:24px;--tp-searchbox-clear-dividing-height:14px;--tp-searchbox-clear-dividing-width:1px;--tp-searchbox-date-range-drop-width:250px;--tp-searchbox-drop-option-height:30px;--tp-searchbox-drop-option-offset:-10px;--tp-searchbox-icon-size:16px;--tp-searchbox-label-option-icon-size:6px;--tp-searchbox-number-range-drop-width:180px;--tp-searchbox-range-date-width:160px;--tp-searchbox-range-input-width:80px;--tp-searchbox-range-label-height:28px;--tp-searchbox-range-label-text-height:18px;--tp-searchbox-tag-height:22px;--tp-searchbox-tag-width-min:16px}:host{border:1px solid var(--ti-common-color-line-normal);border-radius:var(--ti-common-border-radius-normal);display:block}::ng-deep ti-dominator.tp-searchbox-dominator>.ti3-select-dominator-text{align-items:center;border:1px solid transparent;display:flex;flex:1;flex-shrink:0;flex-wrap:wrap;justify-content:flex-start;padding:0!important}::ng-deep ti-dominator.tp-searchbox-dominator>.ti3-select-dominator-text ::ng-deep ti-tag.ti3-multiselect-box-cell{display:flex;float:none}::ng-deep ti-dominator.tp-searchbox-dominator>.ti3-select-dominator-text ::ng-deep ti-tag.ti3-multiselect-box-cell .ti3-box-cell-key{background-color:var(--ti-common-color-bg-normal);float:none}::ng-deep ti-dominator.tp-searchbox-dominator>.ti3-select-dominator-text ::ng-deep ti-tag.ti3-multiselect-box-cell .ti3-box-cell-key .tp-searchbox-tag-key,::ng-deep ti-dominator.tp-searchbox-dominator>.ti3-select-dominator-text ::ng-deep ti-tag.ti3-multiselect-box-cell .ti3-box-cell-key .tp-searchbox-tag-seperator,::ng-deep ti-dominator.tp-searchbox-dominator>.ti3-select-dominator-text ::ng-deep ti-tag.ti3-multiselect-box-cell .ti3-box-cell-key .tp-searchbox-tag-value{display:inline;line-height:var(--tp-searchbox-clear-dividing-height)}::ng-deep ti-dominator.tp-searchbox-dominator>.ti3-select-dominator-text ::ng-deep ti-tag.ti3-multiselect-box-cell .ti3-box-cell-key .tp-searchbox-tag-key:focus,::ng-deep ti-dominator.tp-searchbox-dominator>.ti3-select-dominator-text ::ng-deep ti-tag.ti3-multiselect-box-cell .ti3-box-cell-key .tp-searchbox-tag-seperator:focus,::ng-deep ti-dominator.tp-searchbox-dominator>.ti3-select-dominator-text ::ng-deep ti-tag.ti3-multiselect-box-cell .ti3-box-cell-key .tp-searchbox-tag-value:focus{outline:none}::ng-deep ti-dominator.tp-searchbox-dominator>.ti3-select-dominator-text ::ng-deep ti-tag.ti3-multiselect-box-cell .ti3-box-cell-key .tp-searchbox-tag-key,::ng-deep ti-dominator.tp-searchbox-dominator>.ti3-select-dominator-text ::ng-deep ti-tag.ti3-multiselect-box-cell .ti3-box-cell-key .tp-searchbox-tag-value{min-width:var(--tp-searchbox-tag-width-min)}::ng-deep ti-dominator.tp-searchbox-dominator>.ti3-select-dominator-text.ti3-tags-input-container{width:auto}::ng-deep ti-dominator.tp-searchbox-dominator>.ti3-select-dominator-text .tp-searchbox-right{align-items:center;display:flex;flex:1;justify-content:space-between;min-width:calc(var(--tp-searchbox-date-range-drop-width) + 80px)}:host:not([disabled])[tiFocused]{border-color:var(--ti-input-border-color-focus)}.tp-searchbox-buttons{align-items:center;align-self:flex-end;display:flex;height:var(--tp-searchbox-button-height);justify-content:space-between}.tp-searchbox-buttons ::ng-deep tp-icon{font-size:var(--tp-searchbox-icon-size);height:var(--tp-searchbox-button-height);line-height:var(--tp-searchbox-button-height);text-align:center;width:var(--tp-searchbox-button-height)}.tp-searchbox-buttons ::ng-deep tp-icon:hover{color:var(--ti-common-color-icon-hover);cursor:pointer}.tp-searchbox-buttons .tp-searchbox-clear-dividing-line{background-color:var(--ti-common-color-line-dividing);display:inline-block;height:var(--tp-searchbox-clear-dividing-height);margin:0 var(--ti-common-space-6);width:var(--tp-searchbox-clear-dividing-width)}.tp-searchbox-search-field{align-items:center;display:flex;flex:1;flex-shrink:0}.tp-searchbox-search-field .tp-searchbox-prop{flex-shrink:0;padding-left:var(--ti-common-space-10)}.tp-searchbox-search-field .tp-searchbox-input{background-color:transparent;flex-shrink:0;height:var(--tp-searchbox-tag-height);line-height:var(--tp-searchbox-tag-height);margin:1px}.tp-searchbox-search-field .tp-searchbox-input.tp-searchbox-input-grow{flex-grow:1}.tp-searchbox-drop-buttons{border-top:1px solid var(--ti-common-color-line-dividing);box-sizing:border-box;margin:0 var(--ti-common-space-10);padding:var(--ti-common-space-10) 0 var(--ti-common-space-6);text-align:left}.tp-searchbox-drop-buttons .tp-searchbox-button-ok{margin-right:var(--ti-common-space-2x)}.tp-searchbox-custom-drop:focus{outline:none}.tp-searchbox-range{padding:var(--ti-common-space-10)}.tp-searchbox-range .tp-searchbox-range-tip{color:var(--ti-common-color-text-weaken);height:var(--tp-searchbox-range-label-text-height);padding-bottom:var(--ti-common-space-10)}.tp-searchbox-range .tp-searchbox-number-range-field{align-items:center;display:flex;height:var(--tp-searchbox-range-label-height);justify-content:space-between;margin-bottom:var(--ti-common-space-10);min-width:var(--tp-searchbox-number-range-drop-width)}.tp-searchbox-range .tp-searchbox-number-range-field input{width:var(--tp-searchbox-range-input-width)}.tp-searchbox-range .tp-searchbox-number-range-field input[type=number]::-webkit-inner-spin-button{-webkit-appearance:none!important;margin:0}.tp-searchbox-range .tp-searchbox-number-range-field input[type=number]{-moz-appearance:textfield}.tp-searchbox-range .tp-searchbox-date-range-field{align-items:center;display:flex;height:var(--tp-searchbox-range-label-height);justify-content:space-between;margin-bottom:var(--ti-common-space-10);min-width:var(--tp-searchbox-date-range-drop-width)}.tp-searchbox-range .tp-searchbox-date-range-field ti-date{width:var(--tp-searchbox-range-date-width)}.tp-searchbox-range .tp-searchbox-range-buttons{border-top:1px solid var(--ti-common-color-line-dividing);display:flex;justify-content:flex-end;padding-top:var(--ti-common-space-10)}.tp-searchbox-range .tp-searchbox-range-buttons button:first-child{margin-right:var(--ti-common-space-10)}.tp-searchbox-group-option,.tp-searchbox-group-title{align-items:center;display:flex;height:var(--tp-searchbox-drop-option-height);justify-content:flex-start}.tp-searchbox-group-option{box-sizing:border-box;cursor:pointer;margin-left:var(--tp-searchbox-drop-option-offset)}.tp-searchbox-group-option.tp-searchbox-group-option-last{border-bottom:1px solid var(--ti-common-color-line-dividing)}.tp-searchbox-group-option .tp-searchbox-group-option-icon{background-color:var(--ti-common-color-error);border-radius:calc(var(--tp-searchbox-label-option-icon-size)/2);display:inline-block;height:var(--tp-searchbox-label-option-icon-size);margin:var(--ti-common-space-base);vertical-align:top;width:var(--tp-searchbox-label-option-icon-size)}.tp-searchbox-group-option.tp-searchbox-group-title{color:var(--ti-common-color-text-weaken);margin-left:0}.tp-searchbox-group-option.tp-searchbox-group-title tp-icon{color:var(--ti-common-color-error);font-size:var(--tp-searchbox-icon-size)}.tp-searchbox-group-option.tp-searchbox-group-title .tp-searchbox-group-text{flex-shrink:1;margin-left:var(--ti-common-space-base)}.tp-searchbox-option-normal{margin-left:var(--tp-searchbox-drop-option-offset)}"]
            },] }
];
TpSearchboxComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef }
];
TpSearchboxComponent.propDecorators = {
    defaultField: [{ type: Input }],
    emptyPlaceholder: [{ type: Input }],
    inputWidth: [{ type: Input }],
    showHelp: [{ type: Input }],
    showSettings: [{ type: Input }],
    items: [{ type: Input }],
    maxLine: [{ type: Input }],
    panelMaxHeight: [{ type: Input }],
    propPanelWidth: [{ type: Input }],
    valuePanelWidth: [{ type: Input }],
    tagMaxWidth: [{ type: Input }],
    help: [{ type: Output }],
    clear: [{ type: Output }],
    search: [{ type: Output }],
    beforeOpen: [{ type: Output }],
    inputValueChange: [{ type: Output }],
    defaultFieldChange: [{ type: Output }],
    dominatorCom: [{ type: ViewChild, args: [TiDominatorComponent, { static: true },] }],
    propDropCom: [{ type: ViewChild, args: ['propDrop', { static: true },] }],
    valueDropCom: [{ type: ViewChild, args: ['valueDrop', { static: true },] }],
    valueMultiDropCom: [{ type: ViewChild, args: ['valueMultiDrop', { static: false },] }],
    customDropCom: [{ type: ViewChild, args: ['customDrop', { static: false },] }],
    settingsDropCom: [{ type: ViewChild, args: ['settingsDrop', { static: false },] }],
    dateRangeStartCom: [{ type: ViewChild, args: ['dateRangeStart', { static: false },] }],
    dateRangeEndCom: [{ type: ViewChild, args: ['dateRangeEnd', { static: false },] }],
    searchInputRf: [{ type: ViewChild, args: ['searchInput', { static: false },] }],
    settingsCom: [{ type: ViewChild, args: ['settings', { static: false },] }],
    rightIconsRef: [{ type: ViewChildren, args: ['rightIcon',] }]
};
//# sourceMappingURL=data:application/json;base64,