import { Component, ElementRef, Input, Renderer2 } from '@angular/core';
import { TiBaseComponent, TiLocale, Util } from '@cloud/tiny3';
import { CfUtil } from '../../cfutils/CfUtil';
import { TpUtil } from './../../utils/TpUtil';
/**
 * 满意度调查组件
 *
 * 10.0.3版本新增
 *
 * <example-url>../tinyplus3demo/#/contactsurvey/contactsurvey-all</example-url>
 */
export class TpContactsurveyComponent extends TiBaseComponent {
    constructor(elementRef, renderer2) {
        super(elementRef, renderer2);
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        /**
         * @ignore
         * 是否显示满意度调查组件，默认不显示。符合某些条件才会展示出来。
         */
        this.showContactsurvey = false;
        /**
         * @ignore
         * 控制提交按钮是否禁用，默认为禁用
         */
        this.submitDisabled = true;
        /**
         * @ignore
         * 国际化词条对象
         */
        this.tpContactsurvey = TiLocale.getLocaleWords().tpContactsurvey;
        /**
         * @ignore
         * 模板中展示的题目
         */
        this.displayData = [];
        /**
         * @ignore
         * 用户反馈的答案
         */
        this.submitAnswer = [];
        /**
         * 类生产环境的请求数据
         */
        this.devConfig = {
            backend: 'https://console.ulanqab.huawei.com/nps-api',
            surveyId: 'hwcloudbusurvey_key_fbd25bdbdb89'
        };
        /**
         * 现网环境的请求数据
         */
        this.prodConfig = {
            backend: 'https://voc.huaweicloud.com/survey-api',
            surveyId: 'hwcloudbusurvey_key_fbd25bdbdb89'
        };
        /**
         * 用户ID，作为用户的唯一标识
         */
        this.userId = '';
        /**
         * 默认为类生产环境配置
         */
        this.config = this.devConfig;
        if (location.hostname.indexOf('huaweicloud.com') > -1) {
            this.config = this.prodConfig;
        }
    }
    ngOnInit() {
        super.ngOnInit();
        CfUtil.getUser()
            .then((user) => {
            const root = user;
            const camel = CfUtil.getHttpService();
            const msgService = CfUtil.getMessage();
            if (!camel || !msgService || !root || !Util.isFunction(camel.get) || !Util.isFunction(msgService.showSuccess)) {
                return;
            }
            const userId = root.domainId;
            this.userId = userId;
            const url = `${this.config.backend}/api/get/commit/date?surveyId={survey_id}&userId={user_id}&serviceId={service_id}&contactId={contact_id}`;
            if (userId) {
                camel.get({
                    url: {
                        s: url,
                        o: {
                            survey_id: this.config.surveyId,
                            user_id: userId,
                            service_id: this.options.serviceId,
                            contact_id: this.options.contactId
                        }
                    }
                })
                    .then((response) => {
                    // 后台返回的日期格式yyyy-MM-dd，在IE下Date.parse为NaN，导致组件提交成功后还会出现。需要转成yyyy/mm/dd，目前这种格式在3个浏览器都OK
                    const submitDate = Date.parse(response.data.replace(/-/g, '/'));
                    // 如果是非法日期，或者没有提交为''，则重新赋值为0。否则会出现NaN，组件展示不出来。
                    const milliSeconds = isNaN(submitDate) ? 0 : submitDate;
                    // 查询上次提交的日期，如果小于90天则不显示。否则，看之前用户是否点击关闭按钮
                    if (new Date().getTime() - milliSeconds > TpContactsurveyComponent.MILLISECONDS_PER_MONTH) {
                        const tinyContactSurvey = Util.isUndefined(TpUtil.getCookie('tinyContactSurvey')) ? '' : TpUtil.getCookie('tinyContactSurvey');
                        if (tinyContactSurvey.indexOf(`${userId}${this.options.serviceId}${this.options.contactId}`) === -1) {
                            this.showContactsurvey = true;
                        }
                    }
                }, () => {
                    // 数据请求失败，不出现该组件。如果出现错误提示，会给用户带来困扰。
                });
            }
        });
        // 在模板中用于展示的问题数据
        this.displayData = [{
                questionId: 'question1',
                type: 'radio',
                show: true,
                require: true,
                title: Util.formatEntry(this.tpContactsurvey.contactSurvey_question1_title, [this.options.contactName])
            }, {
                questionId: 'question2',
                type: 'essay',
                show: false,
                require: false,
                title: this.tpContactsurvey.contactSurvey_question2_title
            }];
    }
    /**
     * @ignore
     *  叉号图标点击事件
     */
    onClickClose() {
        const closedList = Util.isUndefined(TpUtil.getCookie('tinyContactSurvey')) ? '' : TpUtil.getCookie('tinyContactSurvey');
        TpUtil.setCookie('tinyContactSurvey', `${closedList}${this.userId}${this.options.serviceId}${this.options.contactId},`);
        this.showContactsurvey = false;
    }
    /**
     * @ignore
     * 调查结果提交事件
     */
    onClickSubmit() {
        CfUtil.getUser().then((user) => {
            const root = user;
            const camel = CfUtil.getHttpService();
            const msgService = CfUtil.getMessage();
            if (!camel || !msgService || !root || !Util.isFunction(camel.post) || !Util.isFunction(msgService.showSuccess)) {
                return;
            }
            const url = `${this.config.backend}/api/save`;
            // 发送请求，向后台发送问卷结果
            const sendData = {
                data: {
                    surveyId: this.config.surveyId,
                    serviceId: this.options.serviceId,
                    contactId: this.options.contactId,
                    w3account: root.domainId,
                    answers: this.submitAnswer
                }
            };
            camel.post({
                url: {
                    s: url
                },
                params: sendData
            })
                .then(() => { }, () => { });
            this.showContactsurvey = false;
            msgService.showSuccess(this.tpContactsurvey.contactSurvey_submit_success);
        }, () => { });
    }
    /**
     * @ignore
     * 点击评分组件
     */
    changeScore(score) {
        if (!this.displayData[1].show) {
            this.displayData[1].show = true;
        }
        this.initAnswerArrray();
        // 对于单选来说，answer和subRemark的值一样
        this.submitAnswer[0].answer = score;
        this.submitAnswer[0].subRemark = score;
        this.submitDisabled = false;
    }
    /**
     * @ignore
     * 文本框失焦事件
     */
    onBlur(value) {
        this.submitAnswer[1].answer = value;
    }
    /**
     * @ignore
     * 初始化答案对象，用于给后台下发
     */
    initAnswerArrray() {
        for (let i = 0; i < this.displayData.length; i++) {
            this.submitAnswer[i] = {};
            this.submitAnswer[i].questionId = this.displayData[i].questionId;
            this.submitAnswer[i].subQuestionId = null;
            this.submitAnswer[i].subName = this.displayData[i].title;
            this.submitAnswer[i].answer = '';
            this.submitAnswer[i].subRemark = '';
            if (this.displayData[i].type === 'essay') {
                this.submitAnswer[i].subRemark = null;
            }
            this.submitAnswer[i].reason = '0';
        }
    }
}
/**
 * 常量配置(90天对应的毫秒数)
 */
TpContactsurveyComponent.MILLISECONDS_PER_MONTH = 90 * 24 * 60 * 60 * 1000;
TpContactsurveyComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-contactsurvey',
                template: "<div *ngIf=\"showContactsurvey\" class=\"tp-contactsurvey-wrapper\">\r\n    <tp-icon local name=\"cloud-close\" class=\"tp-contactsurvey-close\"\r\n    (click)='onClickClose()' [id]=\"appendId('contactsurvey_close')\"\r\n    tiOutline [tabindex]=\"0\" (keydown.enter)=\"onClickClose()\"></tp-icon>\r\n    <div *ngFor=\"let question of displayData; index as i\">\r\n        <div *ngIf=\"question.show === true\" class=\"tp-contactsurvey-question\">\r\n            <section class=\"tp-contactsurvey-question-title\">\r\n                <ti-icon *ngIf=\"question.require\" name=\"staricon\" class=\"tp-contactsurvey-required\"></ti-icon>\r\n                <span [id]=\"appendId('title' + i)\">{{question.title}}</span>\r\n            </section>\r\n            <tp-score *ngIf=\"question.type === 'radio'\" class=\"tp-contactsurvey-score\"\r\n                [minText]=\"'tpContactsurvey.contactSurvey_score_text.minText' | tiTranslate\"\r\n                [maxText]=\"'tpContactsurvey.contactSurvey_score_text.maxText' | tiTranslate \"\r\n                [ngModel]=\"scoreValue\" (ngModelChange)=\"changeScore($event)\"\r\n                [id]=\"appendId('score' + i)\">\r\n            </tp-score>\r\n            <textarea *ngIf=\"question.type === 'essay'\" class=\"tp-contactsurvey-textarea\"\r\n                [(ngModel)]=\"textareaValue\" resize=\"none\" maxlength=\"400\"\r\n                [placeholder]=\"'tpContactsurvey.contactSurvey_question2_placeholder' | tiTranslate\"\r\n                (blur)=\"onBlur(textareaValue)\" tiTextarea>\r\n            </textarea>\r\n        </div>\r\n    </div>\r\n    <button type=\"button\" color=\"danger\" [disabled]=\"submitDisabled\" (click)=\"onClickSubmit()\"\r\n    [id]=\"appendId('contactsurvey_submit')\" tiButton>{{tpContactsurvey.contactSurvey_submit}}</button>\r\n</div>",
                host: {
                    class: 'tp-contactsurvey-container' // 给最外层元素加样式类
                },
                styles: [":host.tp-contactsurvey-container{background:var(--ti-common-color-bg-white-normal);box-shadow:var(--ti-common-shadow-1-down);display:block;position:relative}.tp-contactsurvey-wrapper{padding:var(--ti-common-space-6x) 30px var(--ti-common-space-6x) var(--ti-common-space-8x)}.tp-contactsurvey-question{margin-bottom:var(--ti-common-space-4x)}.tp-contactsurvey-textarea{display:block;height:96px;width:100%}.tp-contactsurvey-question-title{font-size:var(--ti-common-font-size-1);font-weight:700;line-height:20px;padding-bottom:var(--ti-common-space-3x);position:relative}.tp-contactsurvey-submit{margin-top:var(--ti-common-space-2x)}.tp-contactsurvey-required{color:var(--ti-common-color-error);left:-15px;position:absolute}.tp-contactsurvey-close{cursor:pointer;position:absolute;right:20px;top:20px}"]
            },] }
];
TpContactsurveyComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
TpContactsurveyComponent.propDecorators = {
    options: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,