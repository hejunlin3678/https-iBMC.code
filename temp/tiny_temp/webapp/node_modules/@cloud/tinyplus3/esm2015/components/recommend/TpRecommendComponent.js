import { Component, ContentChild, EventEmitter, Input, Output, TemplateRef } from '@angular/core';
import { TiBaseComponent, TiLocale } from '@cloud/tiny3';
/**
 * 推荐组件，优先向用户推荐可用区中的某些区域
 *
 * <example-url>../tinyplus3demo/#/recommend/recommend-all</example-url>
 */
export class TpRecommendComponent extends TiBaseComponent {
    constructor() {
        super(...arguments);
        /**
         * 选中事件，点击某项时向外通知该选中项
         */
        this.select = new EventEmitter();
    }
    /**
     * @ignore 处理资源数量
     */
    getNum(num) {
        return num > 99 ? '99+' : String(num);
    }
    /**
     * @ignore
     */
    clickFn(item) {
        this.select.emit(item);
    }
    ngOnInit() {
        this.label = this.label || TiLocale.getLocaleWords().tpRecommend.label;
    }
}
TpRecommendComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-recommend',
                template: "<tp-smartalert size=\"small\">\r\n    <tp-icon local name=\"cloud-pointer\" #leftIcon style=\"font-size: 12px;\"></tp-icon>\r\n    <div class=\"tp-recommend-container\">\r\n        <span class=\"tp-recommend-label\" [id]=\"appendId('label')\">{{label}}</span>\r\n        <div class=\"tp-recommend-content\">\r\n            <ng-container *ngFor=\"let item of items;index as index; last as last\">\r\n                <span class=\"tp-recommend-item\">\r\n                    <ng-container *ngTemplateOutlet=\"beforeItemTemplate;context:{$implicit: item}\"></ng-container>\r\n                    <span tiOutline class=\"tp-recommend-item-content\" [tabindex]=\"0\" (keydown.enter)=\"clickFn(item)\"\r\n                    (click)=\"clickFn(item)\" [id]=\"appendId(index)\" [tiTip]=\"item.tip\" [tiTipContext]=\"item\">\r\n                    <span class=\"tp-recommend-item-text\" [title]=\"item.displayName\">{{item.displayName}}</span>\r\n                    <span *ngIf=\"item.num && item.showNum !== false\" >({{getNum(item.num)}})</span>\r\n                    </span>\r\n                    <span class=\"tp-recommend-line\" *ngIf=\"!last\"></span>\r\n                </span>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</tp-smartalert>",
                styles: [".ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}::ng-deep :root{--tp-recommend-item-text-max-width:108px;--tp-recommend-max-width:685px}:host{display:inline-flex;font-size:var(--ti-common-font-size-base);max-width:var(--tp-recommend-max-width)}:host .tp-recommend-container{-moz-align-items:stretch;-moz-flex-direction:row;-moz-justify-content:flex-start;-ms-align-items:stretch;-ms-justify-content:flex-start;align-items:stretch;display:flex;flex-direction:row;justify-content:flex-start;max-width:calc(var(--tp-recommend-max-width) - var(--ti-common-space-3x)*2)}.tp-recommend-label{color:var(--ti-common-color-text-primary);flex-shrink:0;line-height:var(--ti-common-line-height-number);margin-right:var(--ti-common-space-3x)}.tp-recommend-line{background-color:var(--ti-common-color-bg-light-emphasize);display:inline-block;height:var(--ti-common-space-3x);margin:0 var(--ti-common-space-3x);position:relative;top:2px;width:1px}.tp-recommend-content{display:flex;flex-wrap:wrap}.tp-recommend-item{color:var(--ti-common-color-text-primary);display:inline-block}.tp-recommend-item .tp-recommend-item-content{cursor:pointer}.tp-recommend-item .tp-recommend-item-content:hover{color:var(--ti-common-color-text-highlight)}.tp-recommend-item .tp-recommend-item-text{-ms-box-sizing:border-box;box-sizing:border-box;display:inline-block;margin-right:var(--ti-common-space-base);max-width:var(--tp-recommend-item-text-max-width);overflow:hidden;text-overflow:ellipsis;vertical-align:top;white-space:nowrap}"]
            },] }
];
TpRecommendComponent.propDecorators = {
    items: [{ type: Input }],
    label: [{ type: Input }],
    select: [{ type: Output }],
    beforeItemTemplate: [{ type: ContentChild, args: ['beforeItem', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHBSZWNvbW1lbmRDb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9AY2xvdWQvdGlueXBsdXMzL2NvbXBvbmVudHMvcmVjb21tZW5kL1RwUmVjb21tZW5kQ29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsRyxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBa0IsTUFBTSxjQUFjLENBQUM7QUE2QnpFOzs7O0dBSUc7QUFVSCxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsZUFBZTtJQVR6RDs7UUFrQkk7O1dBRUc7UUFDZ0IsV0FBTSxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0lBdUIzRSxDQUFDO0lBaEJHOztPQUVHO0lBQ0ksTUFBTSxDQUFDLEdBQVc7UUFDckIsT0FBTyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBQ0Q7O09BRUc7SUFDSSxPQUFPLENBQUMsSUFBUztRQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsUUFBUTtRQUNKLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztJQUMzRSxDQUFDOzs7WUEzQ0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxjQUFjO2dCQUN4Qix5dkNBQStCOzthQUtsQzs7O29CQU1JLEtBQUs7b0JBSUwsS0FBSztxQkFJTCxNQUFNO2lDQUtOLFlBQVksU0FBQyxZQUFZLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDb250ZW50Q2hpbGQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFRpQmFzZUNvbXBvbmVudCwgVGlMb2NhbGUsIFRpUG9zaXRpb25UeXBlIH0gZnJvbSAnQGNsb3VkL3RpbnkzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVHBSZWNvbW1lbmRJdGVtIHtcclxuICAgIC8qKlxyXG4gICAgICog5pi+56S655qE5Yy65Z+f5ZCN56ewXHJcbiAgICAgKi9cclxuICAgIGRpc3BsYXlOYW1lOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIOi1hOa6kOaVsOmHj1xyXG4gICAgICovXHJcbiAgICBudW0/OiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIHRpcOaPkOekuueahOWGheWuuVxyXG4gICAgICovXHJcbiAgICB0aXA/OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgLyoqXHJcbiAgICAgKiB0aXDmj5DnpLrmlrnkvY1cclxuICAgICAqL1xyXG4gICAgdGlwUG9zaXRpb24/OiBUaVBvc2l0aW9uVHlwZTtcclxuICAgIC8qKlxyXG4gICAgICog5piv5ZCm5pi+56S66LWE5rqQ5pWw6YeP77yM6buY6K6k5pi+56S6XHJcbiAgICAgKi9cclxuICAgIHNob3dOdW0/OiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiDlhYHorrjmnInlpJrkvZnnmoTlsZ7mgKflrZfmrrVcclxuICAgICAqL1xyXG4gICAgW3Byb3BOYW1lOiBzdHJpbmddOiBhbnk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDmjqjojZDnu4Tku7bvvIzkvJjlhYjlkJHnlKjmiLfmjqjojZDlj6/nlKjljLrkuK3nmoTmn5DkupvljLrln59cclxuICpcclxuICogPGV4YW1wbGUtdXJsPi4uL3RpbnlwbHVzM2RlbW8vIy9yZWNvbW1lbmQvcmVjb21tZW5kLWFsbDwvZXhhbXBsZS11cmw+XHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndHAtcmVjb21tZW5kJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9yZWNvbW1lbmQuaHRtbCcsXHJcbiAgICBzdHlsZVVybHM6IFsnLi9yZWNvbW1lbmQubGVzcyddLFxyXG4gICAgLy8gaG9zdDoge1xyXG4gICAgLy8gICAgICdbY2xhc3MudHAtcmVjb21tZW5kLXdyYXBwZXJdJzogJ3RydWUnXHJcbiAgICAvLyB9XHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgVHBSZWNvbW1lbmRDb21wb25lbnQgZXh0ZW5kcyBUaUJhc2VDb21wb25lbnQge1xyXG4gICAgLyoqXHJcbiAgICAgKiDkvpvpgInmi6nnmoTmlbDmja5cclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgaXRlbXM6IEFycmF5PFRwUmVjb21tZW5kSXRlbT47XHJcbiAgICAvKipcclxuICAgICAqIOe7hOS7tuW3puS+p+eahOaWh+acrFxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBsYWJlbDogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiDpgInkuK3kuovku7bvvIzngrnlh7vmn5Dpobnml7blkJHlpJbpgJrnn6Xor6XpgInkuK3poblcclxuICAgICAqL1xyXG4gICAgQE91dHB1dCgpIHJlYWRvbmx5IHNlbGVjdDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZVxyXG4gICAgICog6Ieq5a6a5LmJaXRlbeW3puS+p+eahERPTVxyXG4gICAgICovXHJcbiAgICBAQ29udGVudENoaWxkKCdiZWZvcmVJdGVtJywgeyBzdGF0aWM6IHRydWUgfSkgYmVmb3JlSXRlbVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZSDlpITnkIbotYTmupDmlbDph49cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldE51bShudW06IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIG51bSA+IDk5ID8gJzk5KycgOiBTdHJpbmcobnVtKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2xpY2tGbihpdGVtOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNlbGVjdC5lbWl0KGl0ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubGFiZWwgPSB0aGlzLmxhYmVsIHx8IFRpTG9jYWxlLmdldExvY2FsZVdvcmRzKCkudHBSZWNvbW1lbmQubGFiZWw7XHJcbiAgICB9XHJcbn1cclxuIl19