import { Component, ElementRef, Input, Renderer2 } from '@angular/core';
import { TiBaseComponent, TiLocale, TiPopupService, TiPosition } from '@cloud/tiny3';
import { Subject } from 'rxjs';
import { delay, throttleTime } from 'rxjs/operators';
import { TpToastComponent } from './TpToastComponent';
/**
 * 复制组件，用于复制文本
 *
 * <example-url>../tinyplus3demo/#/copy/copy-all</example-url>
 */
export class TpCopyComponent extends TiBaseComponent {
    constructor(hostRef, Renderer, tiPopup) {
        super(hostRef, Renderer);
        this.hostRef = hostRef;
        this.Renderer = Renderer;
        this.tiPopup = tiPopup;
        this.clickObserve = new Subject();
        this.hideToast = new Subject();
        this.deleteToast = new Subject();
        this.hostSpace = 4; // toast距copy图标的距离
    }
    ngOnInit() {
        super.ngOnInit();
        // 创建点击事件的observe
        this.createClickObserve();
        // 创建hideToast的observe
        this.createHideToastObserve();
        // 创建deleteToast的observe
        this.createDeleteToastObserve();
    }
    /**
     * @ignore
     * 图标点击事件
     */
    onClick() {
        if (!this.content) {
            return;
        }
        this.clickObserve.next();
    }
    createClickObserve() {
        this.clickSub = this.clickObserve.pipe(throttleTime(2000))
            .subscribe(() => {
            // 创建textarea
            const textarea = this.Renderer.createElement('textarea');
            this.Renderer.appendChild(document.body, textarea);
            this.Renderer.setStyle(textarea, 'postion', 'absolute');
            this.Renderer.setStyle(textarea, 'top', '-9999px');
            this.Renderer.setStyle(textarea, 'left', '-9999px');
            this.Renderer.setProperty(textarea, 'value', this.content);
            textarea.select();
            document.execCommand('Copy');
            this.Renderer.removeChild(document.body, textarea);
            // 复制成功后，显示即时提示信息
            this.showToast();
            // 显示后隐藏
            this.hideToast.next();
        });
    }
    createHideToastObserve() {
        this.hideToastSub = this.hideToast.pipe(delay(1000))
            .subscribe(() => {
            this.Renderer.addClass(this.toastRef.location.nativeElement, 'fadeout');
            // 隐藏后删除
            this.deleteToast.next();
        });
    }
    createDeleteToastObserve() {
        this.deleteToastSub = this.deleteToast.pipe(delay(300))
            .subscribe(() => {
            this.toast.hide();
        });
    }
    /**
     * 复制成功后，显示toast提示
     */
    showToast() {
        this.toast = this.tiPopup.create(TpToastComponent);
        this.toastRef = this.toast.show({
            content: this.successTip || TiLocale.getLocaleWords().tpCopy.successTip,
            container: 'body'
        });
        TiPosition.setPosition({
            hostEle: this.hostRef.nativeElement,
            targetEle: this.toastRef.location.nativeElement,
            hostSpace: this.hostSpace,
            fixMaxHeight: true,
            determinPositionFn: (layout) => {
                if (layout.avilableLayout.right >= layout.targetLayout.width + this.hostSpace) {
                    return 'right';
                }
                else {
                    return 'left';
                }
            }
        });
        this.Renderer.addClass(this.toastRef.location.nativeElement, 'fadein');
    }
    ngOnDestroy() {
        if (this.toast) {
            this.toast.hide();
        }
        this.clickSub.unsubscribe();
        this.hideToastSub.unsubscribe();
        this.deleteToastSub.unsubscribe();
    }
}
TpCopyComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-copy',
                template: "<tp-icon local tiOutline\r\n    name=\"cloud-action-copy\"\r\n    (click)=\"onClick()\"\r\n    [tabindex]=\"0\"\r\n    (keydown.enter)=\"onClick()\"\r\n    [id]=\"appendId('copyicon')\">\r\n</tp-icon>",
                styles: [".ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host{color:var(--ti-common-color-icon-normal);cursor:pointer;margin-left:var(--ti-common-space-2x)}:host:hover{color:var(--ti-common-color-icon-hover)}:host[dark]{color:var(--ti-common-color-icon-darkbg-normal)}:host[dark]:hover{color:var(--ti-common-color-icon-darkbg-hover)}ti-table td :host{visibility:hidden}ti-table td:hover :host{visibility:visible}"]
            },] }
];
TpCopyComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: TiPopupService }
];
TpCopyComponent.propDecorators = {
    content: [{ type: Input }],
    successTip: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHBDb3B5Q29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vQGNsb3VkL3RpbnlwbHVzMy9jb21wb25lbnRzL2NvcHkvVHBDb3B5Q29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQWMsY0FBYyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNqRyxPQUFPLEVBQUUsT0FBTyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUM3QyxPQUFPLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXREOzs7O0dBSUc7QUFPSCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxlQUFlO0lBQ2hELFlBQ2MsT0FBbUIsRUFDckIsUUFBbUIsRUFDbkIsT0FBNEI7UUFDcEMsS0FBSyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUhmLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFDckIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNuQixZQUFPLEdBQVAsT0FBTyxDQUFxQjtRQVVoQyxpQkFBWSxHQUFvQixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBRTlDLGNBQVMsR0FBb0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUUzQyxnQkFBVyxHQUFvQixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBSzdDLGNBQVMsR0FBVyxDQUFDLENBQUMsQ0FBQyxrQkFBa0I7SUFsQm5CLENBQUM7SUFvQi9CLFFBQVE7UUFDSixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDakIsaUJBQWlCO1FBQ2pCLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFD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UUFDSCxVQUFVLENBQUMsV0FBVyxDQUFDO1lBQ25CLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWE7WUFDbkMsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWE7WUFDL0MsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLFlBQVksRUFBRSxJQUFJO1lBQ2xCLGtCQUFrQixFQUFFLENBQUMsTUFBVyxFQUFVLEVBQUU7Z0JBQ3hDLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRTtvQkFDM0UsT0FBTyxPQUFPLENBQUM7aUJBQ2xCO3FCQUFNO29CQUNILE9BQU8sTUFBTSxDQUFDO2lCQUNqQjtZQUNMLENBQUM7U0FFSixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUNELFdBQVc7UUFDUCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDWixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3JCO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7O1lBckhKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsU0FBUztnQkFDbkIsb05BQTBCOzthQUU3Qjs7O1lBaEJtQixVQUFVO1lBQVMsU0FBUztZQUNBLGNBQWM7OztzQkF1QnpELEtBQUs7eUJBTUwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUaUJhc2VDb21wb25lbnQsIFRpTG9jYWxlLCBUaVBvcFVwUmVmLCBUaVBvcHVwU2VydmljZSwgVGlQb3NpdGlvbiB9IGZyb20gJ0BjbG91ZC90aW55Myc7XHJcbmltcG9ydCB7IFN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBkZWxheSwgdGhyb3R0bGVUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuaW1wb3J0IHsgVHBUb2FzdENvbXBvbmVudCB9IGZyb20gJy4vVHBUb2FzdENvbXBvbmVudCc7XHJcblxyXG4vKipcclxuICog5aSN5Yi257uE5Lu277yM55So5LqO5aSN5Yi25paH5pysXHJcbiAqXHJcbiAqIDxleGFtcGxlLXVybD4uLi90aW55cGx1czNkZW1vLyMvY29weS9jb3B5LWFsbDwvZXhhbXBsZS11cmw+XHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndHAtY29weScsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vY29weS5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL2NvcHkubGVzcyddXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgVHBDb3B5Q29tcG9uZW50IGV4dGVuZHMgVGlCYXNlQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByb3RlY3RlZCBob3N0UmVmOiBFbGVtZW50UmVmLFxyXG4gICAgICAgIHByaXZhdGUgUmVuZGVyZXI6IFJlbmRlcmVyMixcclxuICAgICAgICBwcml2YXRlIHRpUG9wdXA6IFRpUG9wdXBTZXJ2aWNlPGFueT5cclxuICAgICkgeyBzdXBlcihob3N0UmVmLCBSZW5kZXJlcik7IH1cclxuICAgIEBJbnB1dCgpIGNvbnRlbnQ6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICog5aSN5Yi25ZCO55qEPHN0cm9uZz7ljbPml7bmj5DnpLrkv6Hmga88L3N0cm9uZz4o5bCP6buR5qGGKe+8jFxyXG4gICAgICpcclxuICAgICAqIOe8uuecgeWAvO+8muWkjeWItuaIkOWKny9Db3BpZWQgc3VjY2Vzc2Z1bGx5Lu+8iOWbvemZheWMlu+8ie+8jOaUr+aMgeiHquWumuS5iVxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBzdWNjZXNzVGlwOiBzdHJpbmc7XHJcblxyXG4gICAgcHJpdmF0ZSBjbGlja09ic2VydmU6IFN1YmplY3Q8c3RyaW5nPiA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICBwcml2YXRlIGNsaWNrU3ViOiBTdWJzY3JpcHRpb247XHJcbiAgICBwcml2YXRlIGhpZGVUb2FzdDogU3ViamVjdDxzdHJpbmc+ID0gbmV3IFN1YmplY3QoKTtcclxuICAgIHByaXZhdGUgaGlkZVRvYXN0U3ViOiBTdWJzY3JpcHRpb247XHJcbiAgICBwcml2YXRlIGRlbGV0ZVRvYXN0OiBTdWJqZWN0PHN0cmluZz4gPSBuZXcgU3ViamVjdCgpO1xyXG4gICAgcHJpdmF0ZSBkZWxldGVUb2FzdFN1YjogU3Vic2NyaXB0aW9uO1xyXG5cclxuICAgIHByaXZhdGUgdG9hc3Q6IFRpUG9wVXBSZWY7XHJcbiAgICBwcml2YXRlIHRvYXN0UmVmOiBhbnk7XHJcbiAgICBwcml2YXRlIGhvc3RTcGFjZTogbnVtYmVyID0gNDsgLy8gdG9hc3Tot51jb3B55Zu+5qCH55qE6Led56a7XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIubmdPbkluaXQoKTtcclxuICAgICAgICAvLyDliJvlu7rngrnlh7vkuovku7bnmoRvYnNlcnZlXHJcbiAgICAgICAgdGhpcy5jcmVhdGVDbGlja09ic2VydmUoKTtcclxuICAgICAgICAvLyDliJvlu7poaWRlVG9hc3TnmoRvYnNlcnZlXHJcbiAgICAgICAgdGhpcy5jcmVhdGVIaWRlVG9hc3RPYnNlcnZlKCk7XHJcbiAgICAgICAgLy8g5Yib5bu6ZGVsZXRlVG9hc3TnmoRvYnNlcnZlXHJcbiAgICAgICAgdGhpcy5jcmVhdGVEZWxldGVUb2FzdE9ic2VydmUoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZVxyXG4gICAgICog5Zu+5qCH54K55Ye75LqL5Lu2XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvbkNsaWNrKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5jb250ZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jbGlja09ic2VydmUubmV4dCgpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBjcmVhdGVDbGlja09ic2VydmUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jbGlja1N1YiA9IHRoaXMuY2xpY2tPYnNlcnZlLnBpcGUoXHJcbiAgICAgICAgICAgIHRocm90dGxlVGltZSgyMDAwKVxyXG4gICAgICAgIClcclxuICAgICAgICAuc3Vic2NyaWJlKCgpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgLy8g5Yib5bu6dGV4dGFyZWFcclxuICAgICAgICAgICAgY29uc3QgdGV4dGFyZWE6IGFueSA9IHRoaXMuUmVuZGVyZXIuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcclxuICAgICAgICAgICAgdGhpcy5SZW5kZXJlci5hcHBlbmRDaGlsZChkb2N1bWVudC5ib2R5LCB0ZXh0YXJlYSk7XHJcbiAgICAgICAgICAgIHRoaXMuUmVuZGVyZXIuc2V0U3R5bGUodGV4dGFyZWEsICdwb3N0aW9uJywgJ2Fic29sdXRlJyk7XHJcbiAgICAgICAgICAgIHRoaXMuUmVuZGVyZXIuc2V0U3R5bGUodGV4dGFyZWEsICd0b3AnLCAnLTk5OTlweCcpO1xyXG4gICAgICAgICAgICB0aGlzLlJlbmRlcmVyLnNldFN0eWxlKHRleHRhcmVhLCAnbGVmdCcsICctOTk5OXB4Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuUmVuZGVyZXIuc2V0UHJvcGVydHkodGV4dGFyZWEsICd2YWx1ZScsIHRoaXMuY29udGVudCk7XHJcbiAgICAgICAgICAgIHRleHRhcmVhLnNlbGVjdCgpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnQ29weScpO1xyXG4gICAgICAgICAgICB0aGlzLlJlbmRlcmVyLnJlbW92ZUNoaWxkKGRvY3VtZW50LmJvZHksIHRleHRhcmVhKTtcclxuICAgICAgICAgICAgLy8g5aSN5Yi25oiQ5Yqf5ZCO77yM5pi+56S65Y2z5pe25o+Q56S65L+h5oGvXHJcbiAgICAgICAgICAgIHRoaXMuc2hvd1RvYXN0KCk7XHJcbiAgICAgICAgICAgIC8vIOaYvuekuuWQjumakOiXj1xyXG4gICAgICAgICAgICB0aGlzLmhpZGVUb2FzdC5uZXh0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGNyZWF0ZUhpZGVUb2FzdE9ic2VydmUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5oaWRlVG9hc3RTdWIgPSB0aGlzLmhpZGVUb2FzdC5waXBlKGRlbGF5KDEwMDApKVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuUmVuZGVyZXIuYWRkQ2xhc3ModGhpcy50b2FzdFJlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50LCAnZmFkZW91dCcpO1xyXG4gICAgICAgICAgICAgICAgLy8g6ZqQ6JeP5ZCO5Yig6ZmkXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGV0ZVRvYXN0Lm5leHQoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGNyZWF0ZURlbGV0ZVRvYXN0T2JzZXJ2ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRlbGV0ZVRvYXN0U3ViID0gdGhpcy5kZWxldGVUb2FzdC5waXBlKGRlbGF5KDMwMCkpXHJcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b2FzdC5oaWRlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDlpI3liLbmiJDlip/lkI7vvIzmmL7npLp0b2FzdOaPkOekulxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHNob3dUb2FzdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnRvYXN0ID0gdGhpcy50aVBvcHVwLmNyZWF0ZShUcFRvYXN0Q29tcG9uZW50KTtcclxuICAgICAgICB0aGlzLnRvYXN0UmVmID0gdGhpcy50b2FzdC5zaG93KHtcclxuICAgICAgICAgICAgY29udGVudDogdGhpcy5zdWNjZXNzVGlwIHx8IFRpTG9jYWxlLmdldExvY2FsZVdvcmRzKCkudHBDb3B5LnN1Y2Nlc3NUaXAsXHJcbiAgICAgICAgICAgIGNvbnRhaW5lcjogJ2JvZHknXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgVGlQb3NpdGlvbi5zZXRQb3NpdGlvbih7XHJcbiAgICAgICAgICAgIGhvc3RFbGU6IHRoaXMuaG9zdFJlZi5uYXRpdmVFbGVtZW50LFxyXG4gICAgICAgICAgICB0YXJnZXRFbGU6IHRoaXMudG9hc3RSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudCxcclxuICAgICAgICAgICAgaG9zdFNwYWNlOiB0aGlzLmhvc3RTcGFjZSxcclxuICAgICAgICAgICAgZml4TWF4SGVpZ2h0OiB0cnVlLFxyXG4gICAgICAgICAgICBkZXRlcm1pblBvc2l0aW9uRm46IChsYXlvdXQ6IGFueSk6IHN0cmluZyA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGF5b3V0LmF2aWxhYmxlTGF5b3V0LnJpZ2h0ID49IGxheW91dC50YXJnZXRMYXlvdXQud2lkdGggKyB0aGlzLmhvc3RTcGFjZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAncmlnaHQnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2xlZnQnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuUmVuZGVyZXIuYWRkQ2xhc3ModGhpcy50b2FzdFJlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50LCAnZmFkZWluJyk7XHJcbiAgICB9XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy50b2FzdCkge1xyXG4gICAgICAgICAgICB0aGlzLnRvYXN0LmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jbGlja1N1Yi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIHRoaXMuaGlkZVRvYXN0U3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgdGhpcy5kZWxldGVUb2FzdFN1Yi51bnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==