// tslint:disable-next-line: no-implicit-dependencies
import { Component, ElementRef, Input, Renderer2, ViewChild } from '@angular/core';
// tslint:disable-next-line: no-implicit-dependencies
import { TiButtongroupComponent, TiFormComponent, TiLocale, Util } from '@cloud/tiny3';
/**
 *  价格曲线组件, 对应tiny2中btnSlider组件price-option接口配置后的功能
 *
 *  9.0.4版本新增
 *
 * <example-url>../tinyplus3demo/#/priceline/priceline-all</example-url>
 */
export class TpPricelineComponent extends TiFormComponent {
    constructor(hostRef, renderer) {
        super(hostRef, renderer);
        /**
         * 按钮配置数据
         */
        this.items = [];
        /**
         * 设置单选按钮组是否可以取消选中
         */
        this.deselectable = false;
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.initCanvas();
        if (this.canvasOption) {
            // 视图渲染后修改了视图相关数据，所以使用setTimeout
            setTimeout(() => {
                this.draw(this.items);
            }, 0);
        }
        else {
            this.timer = setInterval(() => {
                this.initCanvas();
                if (this.canvasOption) {
                    this.draw(this.items);
                    clearInterval(this.timer);
                }
                // 测试IE11刷新需要40ms左右完成，URL访问需要80ms左右完成，真实业务场景比较复杂取100
            }, 100);
        }
        // tslint:disable-next-line: newline-per-chained-call
        this.setFocusableElems(this.buttonGroupCom.getFocusableElems().concat(this.nativeElement));
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngOnChanges(changes) {
        // 价格变化
        const items = changes['items'];
        if (items && !items.firstChange) {
            this.step = 10;
            this.previousItems = items.previousValue;
            this.changeDraw();
        }
    }
    onNgModelChange(data) {
        // 选中项变化，折线的标题会变化，重新绘制
        if (this.model) {
            this.draw(this.items);
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        clearInterval(this.timer);
    }
    // 价格变动时重绘动画
    // 实现思路，动画时间是200ms，每一次绘制间隔设置20ms，分10步绘制，
    // todo 1.绘制间隔设置为16.66接近 60帧动效，2.使用 requestAnimationFrame 代替 setTimeout
    changeDraw() {
        // 动画过程中变化的items
        const currentItems = this.items.map((item, index) => {
            // 重新生成一个新对象，避免修改原始数据
            const newItem = Object.assign({}, item);
            newItem.price = newItem.price - (newItem.price - this.previousItems[index].price) * (this.step / 10);
            return newItem;
        });
        this.draw(currentItems);
        this.step--;
        // 20 每一帧间隔时间20ms
        setTimeout(() => {
            if (this.step > -1) {
                this.changeDraw();
            }
        }, 20);
    }
    // 初始化价格曲线 canvas
    initCanvas() {
        let lineColor;
        let color;
        let activeColor;
        let startColor;
        let endColor;
        if (Util.supportsCssVars()) {
            // Chrome等支持CSSVar的浏览器，正常操作,  从CSSVar变量中取出颜色。
            const cSSStyleDeclaration = getComputedStyle(document.documentElement);
            lineColor = cSSStyleDeclaration.getPropertyValue('--ti-common-color-line-active');
            color = cSSStyleDeclaration.getPropertyValue('--ti-common-color-text-weaken');
            activeColor = cSSStyleDeclaration.getPropertyValue('--ti-common-color-text-primary');
            startColor = cSSStyleDeclaration.getPropertyValue('--ti-common-color-bg-emphasize');
            endColor = startColor;
        }
        else {
            // IE和低版Edge不支持CSSVar的浏览器，从一个CSS样式中取出颜色。
            const cSSStyleDeclaration = getComputedStyle(this.canvasRef.nativeElement);
            color = cSSStyleDeclaration.getPropertyValue('flood-color');
            activeColor = cSSStyleDeclaration.getPropertyValue('lighting-color');
            const cSSStyleDeclaration2 = getComputedStyle(this.canvasWrapRef.nativeElement);
            lineColor = cSSStyleDeclaration2.getPropertyValue('flood-color');
            startColor = cSSStyleDeclaration2.getPropertyValue('lighting-color');
            endColor = cSSStyleDeclaration2.getPropertyValue('stop-color');
            // tslint:disable-next-line: max-line-length
        }
        if (!lineColor || !color || !activeColor || !startColor || !endColor) {
            return;
        }
        // canvas曲线配置项
        this.canvasOption = {
            // 整个画板的高度
            height: 60,
            carveHeight: 40,
            // 经验值，设置为1折线不平滑
            lineWidth: 1.4,
            // chrome  拿到的颜色有前后空格
            lineColor: lineColor.trim(),
            title: TiLocale.getLocaleWords().tpPriceline.carveTitle,
            color: color.trim(),
            titleX: 0,
            titleY: 14,
            fontSize: '12px',
            fontFamily: 'Roboto,Microsoft YaHei,微软雅黑,Sans-serif',
            activeColor: activeColor.trim(),
            tagOffset: 6,
            tagUnit: '/' + TiLocale.getLocaleWords().tpPriceline.tagUnit,
            tagPrefix: TiLocale.getLocaleWords().tpPriceline.tagPrefix,
            currency: TiLocale.getLocaleWords().tpPriceline.tagCurrency,
            startColor: this.color2rgba(startColor.trim(), 0.26),
            endColor: this.color2rgba(endColor.trim(), 0)
        };
        // 设置canvas的高度
        this.renderer.setAttribute(this.canvasRef.nativeElement, 'height', this.canvasOption.height);
        // 设置canvas 宽度和canvas上下文，在IE11环境 ngAfterViewInit中设置，获取宽度有误差，所以放在此处
        const wrapStyles = getComputedStyle(this.canvasWrapRef.nativeElement);
        this.canvasWidth = parseInt(wrapStyles.width, 10);
        this.renderer.setAttribute(this.canvasRef.nativeElement, 'width', String(this.canvasWidth));
        this.ctx = this.canvasRef.nativeElement.getContext('2d');
    }
    // ie11 canvas 渐变透明不支持# 开头的八位颜色写法，所有需要转化成rgba表示形式
    // tslint:disable-next-line: prefer-function-over-method
    color2rgba(hex, alpha) {
        const colorRegex = /^#?[a-fA-F0-9]+$/;
        if (!colorRegex.test(hex) || hex.length !== 7) {
            return hex;
        }
        const values = [
            parseInt(hex.slice(1, 3), 16),
            parseInt(hex.slice(3, 5), 16),
            parseInt(hex.slice(5), 16)
        ];
        if (alpha >= 0 && alpha <= 1) {
            values.push(alpha);
        }
        else {
            values.push(1);
        }
        return `rgba(${values.join(',')})`;
    }
    // 画图实现思路：1 获取按钮的位置和宽度，2.根据按钮的位置宽度和items中的price数据，在每个价格变化时生成一个记录对象放在rects中，
    // 3. 根据记录的对象数组rects, 先画矩形背景和价格标签，4. 再根据rects画折线
    draw(items) {
        if (!items || items.length < 2 || !this.canvasOption) {
            return;
        }
        // 每次重绘前清空画板
        this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasOption.height);
        this.rects = [];
        this.x = 0;
        this.lastX = 0;
        this.maxPrice = items[0].price;
        // tslint:disable-next-line: prefer-for-of
        for (let index = 1; index < this.items.length; index++) {
            if (items[index].price > this.maxPrice) {
                this.maxPrice = items[index].price;
            }
        }
        this.y = this.canvasOption.height - this.canvasOption.carveHeight * items[0].price / this.maxPrice;
        const buttons = this.nativeElement.querySelectorAll('.ti3-btn-item-radio');
        //  曲线图的背景和选择按钮的的
        this.lastButton = buttons[0].getBoundingClientRect();
        // 画标题
        this.drawText({
            x: this.canvasOption.titleX,
            y: this.canvasOption.titleY,
            text: this.canvasOption.title
        });
        // 遍历按钮数据
        const len = this.items.length;
        for (let index = 1; index < len; index++) {
            // 不是最后一条并且价格没有变化，不需要处理
            if (index !== len - 1 && this.items[index].price === this.items[index - 1].price) {
                continue;
            }
            const button = buttons[index].getBoundingClientRect();
            // 最后一条数据，有价格变化，需要画2次
            if (index === len - 1 && items[index].price !== items[index - 1].price) {
                this.x = this.x + (button.left - this.lastButton.left);
                this.record(items, index);
                // 最后一次
                this.lastX = this.x;
                this.y = this.canvasOption.height - this.getCurrentHeight(items[index].price, items);
                this.lastButton = button;
                this.x = this.x + button.width;
                this.record(items, index, true);
                // 最后一个数据没有价格变化
            }
            else if (index === len - 1 && items[index].price === items[index - 1].price) {
                this.x = this.x + ((button.left + button.width) - this.lastButton.left);
                this.record(items, index, true);
                // 中间的按钮数据
            }
            else {
                this.x = this.x + button.left - this.lastButton.left;
                this.record(items, index);
                this.lastX = this.x;
                this.y = this.canvasOption.height - this.getCurrentHeight(items[index].price, items);
                this.lastButton = button;
            }
        }
        // 画柱状背景和标题
        this.rects.forEach((rect) => {
            this.drawRect(rect);
        });
        // 画折线
        this.drawLine(this.ctx, { width: this.canvasOption.lineWidth, color: this.canvasOption.lineColor });
    }
    // 根据第一个按钮数据的价格计算当前价格柱状高度
    getCurrentHeight(curPrice, items) {
        return this.canvasOption.carveHeight * curPrice / this.maxPrice;
    }
    // 每一步遍历数据，记录一个配置点
    record(items, currrentIndex, isEnd) {
        const price = this.items[isEnd ? currrentIndex : currrentIndex - 1].price;
        // 柱状背景
        const rectOption = {
            x: this.lastX,
            y: this.y,
            width: isEnd ? (this.x - this.lastX) : (this.x - this.lastX - 2),
            height: this.canvasOption.height - this.y,
            // tslint:disable-next-line: max-line-length
            text: `${this.rects.length === 0 ? this.canvasOption.tagPrefix : ''}${this.canvasOption.currency}${price.toFixed(2)}${this.canvasOption.tagUnit}`,
            active: price === this.model.price
        };
        this.rects.push(rectOption);
    }
    // canvas 画文字
    drawText(config) {
        const option = Object.assign({ offset: this.canvasOption.tagOffset, color: this.canvasOption.color, fontSize: this.canvasOption.fontSize, fontFamily: this.canvasOption.fontFamily }, config);
        this.ctx.fillStyle = option.active ? this.canvasOption.activeColor : this.canvasOption.color;
        // font 同时设置字体大小和字体时，需用空格隔开
        this.ctx.font = `${option.fontSize} ${option.fontFamily}`;
        if (option.alignRight) {
            const textMetrics = this.ctx.measureText(option.text);
            option.x = (option.x + option.width) - textMetrics.width;
            option.y = option.y - 6;
        }
        this.ctx.fillText(option.text, option.x, option.y);
    }
    // 画线
    drawLine(ctx, option) {
        ctx.lineJoin = 'round';
        ctx.lineWidth = option.width;
        ctx.strokeStyle = option.color;
        ctx.beginPath();
        for (let index = 0; index < this.rects.length; index++) {
            const rect = this.rects[index];
            // 第一个矩形，从起点开始
            if (index === 0) {
                ctx.moveTo(Math.round(rect.x), Math.round(rect.y));
            }
            else {
                // 非第一个，竖线部分
                ctx.lineTo(Math.round(rect.x - 1), Math.round(rect.y));
            }
            // 矩形的左边到右边
            ctx.lineTo(Math.round(rect.x + rect.width + 1), Math.round(rect.y));
        }
        ctx.stroke();
    }
    // 画背景和文字
    drawRect(option) {
        // tslint:disable-next-line: max-line-length
        const canvasGradient = this.ctx.createLinearGradient(0, this.canvasOption.height - this.canvasOption.carveHeight, 0, this.canvasOption.height);
        canvasGradient.addColorStop(0, this.canvasOption.startColor);
        canvasGradient.addColorStop(1, this.canvasOption.endColor);
        this.ctx.fillStyle = canvasGradient;
        this.ctx.fillRect(option.x, option.y, option.width, option.height);
        this.drawText(Object.assign(Object.assign({}, option), { alignRight: true }));
    }
}
TpPricelineComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-priceline',
                template: "\r\n <section #canvasWrap class=\"tp-priceline-container\" >\r\n        <canvas #canvas ></canvas>\r\n</section>\r\n<ti-button-group [items]=\"items\"\r\n    [deselectable]=\"deselectable\"\r\n    [(ngModel)]=\"model\"\r\n    [id]=\"appendId('buttongroup')\"\r\n    (ngModelChange)=\"onNgModelChange($event)\"\r\n>\r\n</ti-button-group>",
                providers: [TiFormComponent.getValueAccessor(TpPricelineComponent)],
                styles: ["::ng-deep :root{--tp-priceline-canvas-height:60px}:host{display:inline-block;outline:none}.tp-priceline-container{flood-color:var(--ti-common-color-line-active);height:var(--tp-priceline-canvas-height);lighting-color:var(--ti-common-color-bg-emphasize);padding-bottom:var(--ti-common-space-2x);stop-color:var(--ti-common-color-bg-emphasize);width:100%}.tp-priceline-container canvas{display:block;flood-color:var(--ti-common-color-text-weaken);lighting-color:var(--ti-common-color-text-primary)}::ng-deep .tp-priceline-item-sup-discount{background-color:var(--ti-common-color-warn);border-radius:4px 0 4px 0}"]
            },] }
];
TpPricelineComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
TpPricelineComponent.propDecorators = {
    items: [{ type: Input }],
    deselectable: [{ type: Input }],
    canvasRef: [{ type: ViewChild, args: ['canvas',] }],
    canvasWrapRef: [{ type: ViewChild, args: ['canvasWrap',] }],
    buttonGroupCom: [{ type: ViewChild, args: [TiButtongroupComponent,] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHBQcmljZWxpbmVDb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9AY2xvdWQvdGlueXBsdXMzL2NvbXBvbmVudHMvcHJpY2VsaW5lL1RwUHJpY2VsaW5lQ29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRDtBQUNyRCxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUErQixTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEgscURBQXFEO0FBQ3JELE9BQU8sRUFBRSxzQkFBc0IsRUFBZ0IsZUFBZSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUE2QnJHOzs7Ozs7R0FNRztBQU9ILE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxlQUFlO0lBK0NyRCxZQUFZLE9BQW1CLEVBQUUsUUFBbUI7UUFDaEQsS0FBSyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztRQTlDN0I7O1dBRUc7UUFDTSxVQUFLLEdBQTJCLEVBQUUsQ0FBQztRQUM1Qzs7V0FFRztRQUNNLGlCQUFZLEdBQVksS0FBSyxDQUFDO0lBd0N2QyxDQUFDO0lBRUQscURBQXFEO0lBQ3JELGVBQWU7UUFDWCxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2xCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNuQixnQ0FBZ0M7WUFDaEMsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDWixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDVDthQUFNO1lBQ0gsSUFBSSxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFO2dCQUMxQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBQ2xCLElB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USxFQUFFLGNBQWM7Z0JBQ3hCLDRWQUErQjtnQkFFL0IsU0FBUyxFQUFFLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLG9CQUFvQixDQUFDLENBQUM7O2FBQ3RFOzs7WUEzQ21CLFVBQVU7WUFBUyxTQUFTOzs7b0JBaUQzQyxLQUFLOzJCQUlMLEtBQUs7d0JBS0wsU0FBUyxTQUFDLFFBQVE7NEJBS2xCLFNBQVMsU0FBQyxZQUFZOzZCQUt0QixTQUFTLFNBQUMsc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1pbXBsaWNpdC1kZXBlbmRlbmNpZXNcclxuaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2UsIFNpbXBsZUNoYW5nZXMsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWltcGxpY2l0LWRlcGVuZGVuY2llc1xyXG5pbXBvcnQgeyBUaUJ1dHRvbmdyb3VwQ29tcG9uZW50LCBUaUJ1dHRvbkl0ZW0sIFRpRm9ybUNvbXBvbmVudCwgVGlMb2NhbGUsIFV0aWwgfSBmcm9tICdAY2xvdWQvdGlueTMnO1xyXG5cclxuLyoqXHJcbiAqIEBpZ25vcmVcclxuICog5YaF6YOo5L2/55SoXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFRwUHJpY2VsaW5lUmVjdCB7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbiAgICB3aWR0aDogbnVtYmVyO1xyXG4gICAgaGVpZ2h0OiBudW1iZXI7XHJcbiAgICBhY3RpdmU6IGJvb2xlYW47XHJcbiAgICB0ZXh0OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIOWFgeiuuOacieWkmuS9meeahOWxnuaAp+Wtl+autVxyXG4gICAgICovXHJcbiAgICBbcHJvcE5hbWU6IHN0cmluZ106IGFueTtcclxuXHJcbn1cclxuLyoqXHJcbiAqIOS7t+agvOabsue6v+avj+S4quaMiemSrumAiemhueaVsOaNrlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUcFByaWNlbGluZUl0ZW0gZXh0ZW5kcyBUaUJ1dHRvbkl0ZW0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiDmr4/kuKrpgInpobnlr7nlupTnmoTku7fmoLxcclxuICAgICAqL1xyXG4gICAgcHJpY2U6IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqICDku7fmoLzmm7Lnur/nu4Tku7YsIOWvueW6lHRpbnky5LitYnRuU2xpZGVy57uE5Lu2cHJpY2Utb3B0aW9u5o6l5Y+j6YWN572u5ZCO55qE5Yqf6IO9XHJcbiAqXHJcbiAqICA5LjAuNOeJiOacrOaWsOWinlxyXG4gKlxyXG4gKiA8ZXhhbXBsZS11cmw+Li4vdGlueXBsdXMzZGVtby8jL3ByaWNlbGluZS9wcmljZWxpbmUtYWxsPC9leGFtcGxlLXVybD5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd0cC1wcmljZWxpbmUnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL3ByaWNlbGluZS5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL3ByaWNlbGluZS5sZXNzJ10sXHJcbiAgICBwcm92aWRlcnM6IFtUaUZvcm1Db21wb25lbnQuZ2V0VmFsdWVBY2Nlc3NvcihUcFByaWNlbGluZUNvbXBvbmVudCldXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUcFByaWNlbGluZUNvbXBvbmVudCBleHRlbmRzIFRpRm9ybUNvbXBvbmVudCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmjInpkq7phY3nva7mlbDmja5cclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgaXRlbXM6IEFycmF5PFRwUHJpY2VsaW5lSXRlbT4gPSBbXTtcclxuICAgIC8qKlxyXG4gICAgICog6K6+572u5Y2V6YCJ5oyJ6ZKu57uE5piv5ZCm5Y+v5Lul5Y+W5raI6YCJ5LitXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGRlc2VsZWN0YWJsZTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKiBjYW52YXMg5YWD57Sg5byV55SoXHJcbiAgICAgKi9cclxuICAgIEBWaWV3Q2hpbGQoJ2NhbnZhcycpIGNhbnZhc1JlZjogRWxlbWVudFJlZjtcclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZVxyXG4gICAgICogY2FudmFzIOWMheijueWFg+e0oO+8jFxyXG4gICAgICovXHJcbiAgICBAVmlld0NoaWxkKCdjYW52YXNXcmFwJykgY2FudmFzV3JhcFJlZjogRWxlbWVudFJlZjtcclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZVxyXG4gICAgICog5oyJ6ZKu57uEXHJcbiAgICAgKi9cclxuICAgIEBWaWV3Q2hpbGQoVGlCdXR0b25ncm91cENvbXBvbmVudCkgYnV0dG9uR3JvdXBDb206IFRpQnV0dG9uZ3JvdXBDb21wb25lbnQ7XHJcblxyXG4gICAgLy8g5b2T5YmN55S756yUXHJcbiAgICBwcml2YXRlIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4gICAgLy8gY2FudmFzIOeUu+adv+eahOmFjee9rlxyXG4gICAgcHJpdmF0ZSBjYW52YXNPcHRpb246IGFueTtcclxuICAgIHByaXZhdGUgY2FudmFzV2lkdGg6IG51bWJlcjtcclxuICAgIC8vIOWKqOeUu+W9k+WJjeesrOWHoOatpe+8jOWKqOeUu+S9v+eUqO+8jFxyXG4gICAgcHJpdmF0ZSBzdGVwOiBudW1iZXI7XHJcbiAgICAvLyDkuIrkuIDmrKHnmoRpdGVtcyDmlbDmja7vvIznlKjkuo7liqjnlLtcclxuICAgIHByaXZhdGUgcHJldmlvdXNJdGVtczogQXJyYXk8YW55PjtcclxuICAgIC8vIOavj+S4quiDjOaZr+afseWtkOWSjFxyXG4gICAgcHJpdmF0ZSByZWN0czogQXJyYXk8VHBQcmljZWxpbmVSZWN0PjtcclxuICAgIC8vIOe7n+iuoeeCueeahOWdkOagh1xyXG4gICAgcHJpdmF0ZSB4OiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHk6IG51bWJlcjtcclxuICAgIHByaXZhdGUgbGFzdFg6IG51bWJlcjtcclxuICAgIHByaXZhdGUgbGFzdEJ1dHRvbjogRE9NUmVjdDtcclxuICAgIC8vIOacgOWkp+S7t+agvO+8jOS7t+agvOabsue6v+WPr+S7peWNh++8jOacgOWkp+WAvOS4jeaYr2l0ZW1zWzBdLnByaWNlXHJcbiAgICBwcml2YXRlIG1heFByaWNlOiBudW1iZXI7XHJcbiAgICAvLyBJRTExIENTU1ZhciDooaXkuIHliJ3lp4vljJbmoLflvI/nmoTnlJ/mlYjmnInlu7bov5/vvIxpbml0Q2FudmFz5Ye95pWw5Lit6I635Y+W5LiN5Yiw5Li76aKY55u45YWz55qE5qC35byP77yM5omA5Lul6ZyA6KaB5a6a5pe25Zmo5aSa5qyh6I635Y+WXHJcbiAgICBwcml2YXRlIHRpbWVyOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoaG9zdFJlZjogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xyXG4gICAgICAgIHN1cGVyKGhvc3RSZWYsIHJlbmRlcmVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IHVzZS1saWZlLWN5Y2xlLWludGVyZmFjZVxyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLm5nQWZ0ZXJWaWV3SW5pdCgpO1xyXG4gICAgICAgIHRoaXMuaW5pdENhbnZhcygpO1xyXG4gICAgICAgIGlmICh0aGlzLmNhbnZhc09wdGlvbikge1xyXG4gICAgICAgICAgICAvLyDop4blm77muLLmn5PlkI7kv67mlLnkuobop4blm77nm7jlhbPmlbDmja7vvIzmiYDku6Xkvb/nlKhzZXRUaW1lb3V0XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3KHRoaXMuaXRlbXMpO1xyXG4gICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbml0Q2FudmFzKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYW52YXNPcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXcodGhpcy5pdGVtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgLy8g5rWL6K+VSUUxMeWIt+aWsOmcgOimgTQwbXPlt6blj7PlrozmiJDvvIxVUkzorr/pl67pnIDopoE4MG1z5bem5Y+z5a6M5oiQ77yM55yf5a6e5Lia5Yqh5Zy65pmv5q+U6L6D5aSN5p2C5Y+WMTAwXHJcbiAgICAgICAgICAgIH0sIDEwMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5ld2xpbmUtcGVyLWNoYWluZWQtY2FsbFxyXG4gICAgICAgIHRoaXMuc2V0Rm9jdXNhYmxlRWxlbXModGhpcy5idXR0b25Hcm91cENvbS5nZXRGb2N1c2FibGVFbGVtcygpLmNvbmNhdCh0aGlzLm5hdGl2ZUVsZW1lbnQpKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IHVzZS1saWZlLWN5Y2xlLWludGVyZmFjZVxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgIC8vIOS7t+agvOWPmOWMllxyXG4gICAgICAgIGNvbnN0IGl0ZW1zOiBTaW1wbGVDaGFuZ2UgPSBjaGFuZ2VzWydpdGVtcyddO1xyXG4gICAgICAgIGlmIChpdGVtcyAmJiAhaXRlbXMuZmlyc3RDaGFuZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGVwID0gMTA7XHJcbiAgICAgICAgICAgIHRoaXMucHJldmlvdXNJdGVtcyA9IGl0ZW1zLnByZXZpb3VzVmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlRHJhdygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbk5nTW9kZWxDaGFuZ2UoZGF0YTogVGlCdXR0b25JdGVtKTogdm9pZCB7XHJcbiAgICAgICAgLy8g6YCJ5Lit6aG55Y+Y5YyW77yM5oqY57q/55qE5qCH6aKY5Lya5Y+Y5YyW77yM6YeN5paw57uY5Yi2XHJcbiAgICAgICAgaWYgKHRoaXMubW9kZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5kcmF3KHRoaXMuaXRlbXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5uZ09uRGVzdHJveSgpO1xyXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7XHJcbiAgICB9XHJcbiAgICAvLyDku7fmoLzlj5jliqjml7bph43nu5jliqjnlLtcclxuICAgIC8vIOWunueOsOaAnei3r++8jOWKqOeUu+aXtumXtOaYrzIwMG1z77yM5q+P5LiA5qyh57uY5Yi26Ze06ZqU6K6+572uMjBtc++8jOWIhjEw5q2l57uY5Yi277yMXHJcbiAgICAvLyB0b2RvIDEu57uY5Yi26Ze06ZqU6K6+572u5Li6MTYuNjbmjqXov5EgNjDluKfliqjmlYjvvIwyLuS9v+eUqCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUg5Luj5pu/IHNldFRpbWVvdXRcclxuICAgIHByaXZhdGUgY2hhbmdlRHJhdygpOiB2b2lkIHtcclxuICAgICAgICAvLyDliqjnlLvov4fnqIvkuK3lj5jljJbnmoRpdGVtc1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRJdGVtczogQXJyYXk8VGlCdXR0b25JdGVtPiA9IHRoaXMuaXRlbXMubWFwKChpdGVtOiBhbnksIGluZGV4OiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgLy8g6YeN5paw55Sf5oiQ5LiA5Liq5paw5a+56LGh77yM6YG/5YWN5L+u5pS55Y6f5aeL5pWw5o2uXHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0l0ZW06IFRpQnV0dG9uSXRlbSA9IHsgLi4uaXRlbSB9O1xyXG4gICAgICAgICAgICBuZXdJdGVtLnByaWNlID0gbmV3SXRlbS5wcmljZSAtIChuZXdJdGVtLnByaWNlIC0gdGhpcy5wcmV2aW91c0l0ZW1zW2luZGV4XS5wcmljZSkgKiAodGhpcy5zdGVwIC8gMTApO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG5ld0l0ZW07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZHJhdyhjdXJyZW50SXRlbXMpO1xyXG4gICAgICAgIHRoaXMuc3RlcC0tO1xyXG4gICAgICAgIC8vIDIwIOavj+S4gOW4p+mXtOmalOaXtumXtDIwbXNcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RlcCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZURyYXcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIDIwKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy8g5Yid5aeL5YyW5Lu35qC85puy57q/IGNhbnZhc1xyXG4gICAgcHJpdmF0ZSBpbml0Q2FudmFzKCk6IHZvaWQge1xyXG5cclxuICAgICAgICBsZXQgbGluZUNvbG9yOiBzdHJpbmc7XHJcbiAgICAgICAgbGV0IGNvbG9yOiBzdHJpbmc7XHJcbiAgICAgICAgbGV0IGFjdGl2ZUNvbG9yOiBzdHJpbmc7XHJcbiAgICAgICAgbGV0IHN0YXJ0Q29sb3I6IHN0cmluZztcclxuICAgICAgICBsZXQgZW5kQ29sb3I6IHN0cmluZztcclxuXHJcbiAgICAgICAgaWYgKFV0aWwuc3VwcG9ydHNDc3NWYXJzKCkpIHtcclxuICAgICAgICAgICAgLy8gQ2hyb21l562J5pSv5oyBQ1NTVmFy55qE5rWP6KeI5Zmo77yM5q2j5bi45pON5L2cLCAg5LuOQ1NTVmFy5Y+Y6YeP5Lit5Y+W5Ye66aKc6Imy44CCXHJcbiAgICAgICAgICAgIGNvbnN0IGNTU1N0eWxlRGVjbGFyYXRpb246IENTU1N0eWxlRGVjbGFyYXRpb24gPSBnZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XHJcbiAgICAgICAgICAgIGxpbmVDb2xvciA9IGNTU1N0eWxlRGVjbGFyYXRpb24uZ2V0UHJvcGVydHlWYWx1ZSgnLS10aS1jb21tb24tY29sb3ItbGluZS1hY3RpdmUnKTtcclxuICAgICAgICAgICAgY29sb3IgPSBjU1NTdHlsZURlY2xhcmF0aW9uLmdldFByb3BlcnR5VmFsdWUoJy0tdGktY29tbW9uLWNvbG9yLXRleHQtd2Vha2VuJyk7XHJcbiAgICAgICAgICAgIGFjdGl2ZUNvbG9yID0gY1NTU3R5bGVEZWNsYXJhdGlvbi5nZXRQcm9wZXJ0eVZhbHVlKCctLXRpLWNvbW1vbi1jb2xvci10ZXh0LXByaW1hcnknKTtcclxuICAgICAgICAgICAgc3RhcnRDb2xvciA9IGNTU1N0eWxlRGVjbGFyYXRpb24uZ2V0UHJvcGVydHlWYWx1ZSgnLS10aS1jb21tb24tY29sb3ItYmctZW1waGFzaXplJyk7XHJcbiAgICAgICAgICAgIGVuZENvbG9yID0gc3RhcnRDb2xvcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBJReWSjOS9jueJiEVkZ2XkuI3mlK/mjIFDU1NWYXLnmoTmtY/op4jlmajvvIzku47kuIDkuKpDU1PmoLflvI/kuK3lj5blh7rpopzoibLjgIJcclxuICAgICAgICAgICAgY29uc3QgY1NTU3R5bGVEZWNsYXJhdGlvbjogQ1NTU3R5bGVEZWNsYXJhdGlvbiA9IGdldENvbXB1dGVkU3R5bGUodGhpcy5jYW52YXNSZWYubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIGNvbG9yID0gY1NTU3R5bGVEZWNsYXJhdGlvbi5nZXRQcm9wZXJ0eVZhbHVlKCdmbG9vZC1jb2xvcicpO1xyXG4gICAgICAgICAgICBhY3RpdmVDb2xvciA9IGNTU1N0eWxlRGVjbGFyYXRpb24uZ2V0UHJvcGVydHlWYWx1ZSgnbGlnaHRpbmctY29sb3InKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNTU1N0eWxlRGVjbGFyYXRpb24yOiBDU1NTdHlsZURlY2xhcmF0aW9uID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmNhbnZhc1dyYXBSZWYubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIGxpbmVDb2xvciA9IGNTU1N0eWxlRGVjbGFyYXRpb24yLmdldFByb3BlcnR5VmFsdWUoJ2Zsb29kLWNvbG9yJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0Q29sb3IgPSBjU1NTdHlsZURlY2xhcmF0aW9uMi5nZXRQcm9wZXJ0eVZhbHVlKCdsaWdodGluZy1jb2xvcicpO1xyXG4gICAgICAgICAgICBlbmRDb2xvciA9IGNTU1N0eWxlRGVjbGFyYXRpb24yLmdldFByb3BlcnR5VmFsdWUoJ3N0b3AtY29sb3InKTtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBtYXgtbGluZS1sZW5ndGhcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghbGluZUNvbG9yIHx8ICFjb2xvciB8fCAhYWN0aXZlQ29sb3IgfHwgIXN0YXJ0Q29sb3IgfHwgIWVuZENvbG9yKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjYW52YXPmm7Lnur/phY3nva7poblcclxuICAgICAgICB0aGlzLmNhbnZhc09wdGlvbiA9IHtcclxuICAgICAgICAgICAgLy8g5pW05Liq55S75p2/55qE6auY5bqmXHJcbiAgICAgICAgICAgIGhlaWdodDogNjAsXHJcbiAgICAgICAgICAgIGNhcnZlSGVpZ2h0OiA0MCxcclxuICAgICAgICAgICAgLy8g57uP6aqM5YC877yM6K6+572u5Li6MeaKmOe6v+S4jeW5s+a7kVxyXG4gICAgICAgICAgICBsaW5lV2lkdGg6IDEuNCxcclxuICAgICAgICAgICAgLy8gY2hyb21lICDmi7/liLDnmoTpopzoibLmnInliY3lkI7nqbrmoLxcclxuICAgICAgICAgICAgbGluZUNvbG9yOiBsaW5lQ29sb3IudHJpbSgpLFxyXG4gICAgICAgICAgICB0aXRsZTogVGlMb2NhbGUuZ2V0TG9jYWxlV29yZHMoKS50cFByaWNlbGluZS5jYXJ2ZVRpdGxlLFxyXG4gICAgICAgICAgICBjb2xvcjogY29sb3IudHJpbSgpLFxyXG4gICAgICAgICAgICB0aXRsZVg6IDAsXHJcbiAgICAgICAgICAgIHRpdGxlWTogMTQsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdSb2JvdG8sTWljcm9zb2Z0IFlhSGVpLOW+rui9r+mbhem7kSxTYW5zLXNlcmlmJyxcclxuICAgICAgICAgICAgYWN0aXZlQ29sb3I6IGFjdGl2ZUNvbG9yLnRyaW0oKSxcclxuICAgICAgICAgICAgdGFnT2Zmc2V0OiA2LFxyXG4gICAgICAgICAgICB0YWdVbml0OiAnLycgKyBUaUxvY2FsZS5nZXRMb2NhbGVXb3JkcygpLnRwUHJpY2VsaW5lLnRhZ1VuaXQsXHJcbiAgICAgICAgICAgIHRhZ1ByZWZpeDogVGlMb2NhbGUuZ2V0TG9jYWxlV29yZHMoKS50cFByaWNlbGluZS50YWdQcmVmaXgsXHJcbiAgICAgICAgICAgIGN1cnJlbmN5OiBUaUxvY2FsZS5nZXRMb2NhbGVXb3JkcygpLnRwUHJpY2VsaW5lLnRhZ0N1cnJlbmN5LFxyXG4gICAgICAgICAgICBzdGFydENvbG9yOiB0aGlzLmNvbG9yMnJnYmEoc3RhcnRDb2xvci50cmltKCksIDAuMjYpLFxyXG4gICAgICAgICAgICBlbmRDb2xvcjogdGhpcy5jb2xvcjJyZ2JhKGVuZENvbG9yLnRyaW0oKSwgMClcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyDorr7nva5jYW52YXPnmoTpq5jluqZcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmNhbnZhc1JlZi5uYXRpdmVFbGVtZW50LCAnaGVpZ2h0JywgdGhpcy5jYW52YXNPcHRpb24uaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8g6K6+572uY2FudmFzIOWuveW6puWSjGNhbnZhc+S4iuS4i+aWh++8jOWcqElFMTHnjq/looMgbmdBZnRlclZpZXdJbml05Lit6K6+572u77yM6I635Y+W5a695bqm5pyJ6K+v5beu77yM5omA5Lul5pS+5Zyo5q2k5aSEXHJcbiAgICAgICAgY29uc3Qgd3JhcFN0eWxlczogQ1NTU3R5bGVEZWNsYXJhdGlvbiA9IGdldENvbXB1dGVkU3R5bGUodGhpcy5jYW52YXNXcmFwUmVmLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuY2FudmFzV2lkdGggPSBwYXJzZUludCh3cmFwU3R5bGVzLndpZHRoLCAxMCk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5jYW52YXNSZWYubmF0aXZlRWxlbWVudCwgJ3dpZHRoJywgU3RyaW5nKHRoaXMuY2FudmFzV2lkdGgpKTtcclxuXHJcbiAgICAgICAgdGhpcy5jdHggPSAodGhpcy5jYW52YXNSZWYubmF0aXZlRWxlbWVudCBhcyBIVE1MQ2FudmFzRWxlbWVudCkuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBpZTExIGNhbnZhcyDmuJDlj5jpgI/mmI7kuI3mlK/mjIEjIOW8gOWktOeahOWFq+S9jeminOiJsuWGmeazle+8jOaJgOaciemcgOimgei9rOWMluaIkHJnYmHooajnpLrlvaLlvI9cclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogcHJlZmVyLWZ1bmN0aW9uLW92ZXItbWV0aG9kXHJcbiAgICBwcml2YXRlIGNvbG9yMnJnYmEoaGV4OiBzdHJpbmcsIGFscGhhPzogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBjb2xvclJlZ2V4OiBSZWdFeHAgPSAvXiM/W2EtZkEtRjAtOV0rJC87XHJcbiAgICAgICAgaWYgKCFjb2xvclJlZ2V4LnRlc3QoaGV4KSB8fCBoZXgubGVuZ3RoICE9PSA3KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBoZXg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHZhbHVlczogQXJyYXk8bnVtYmVyPiA9IFtcclxuICAgICAgICAgICAgcGFyc2VJbnQoaGV4LnNsaWNlKDEsIDMpLCAxNiksXHJcbiAgICAgICAgICAgIHBhcnNlSW50KGhleC5zbGljZSgzLCA1KSwgMTYpLFxyXG4gICAgICAgICAgICBwYXJzZUludChoZXguc2xpY2UoNSksIDE2KVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgaWYgKGFscGhhID49IDAgJiYgYWxwaGEgPD0gMSkge1xyXG4gICAgICAgICAgICB2YWx1ZXMucHVzaChhbHBoYSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFsdWVzLnB1c2goMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYHJnYmEoJHt2YWx1ZXMuam9pbignLCcpfSlgO1xyXG4gICAgfVxyXG4gICAgLy8g55S75Zu+5a6e546w5oCd6Lev77yaMSDojrflj5bmjInpkq7nmoTkvY3nva7lkozlrr3luqbvvIwyLuagueaNruaMiemSrueahOS9jee9ruWuveW6puWSjGl0ZW1z5Lit55qEcHJpY2XmlbDmja7vvIzlnKjmr4/kuKrku7fmoLzlj5jljJbml7bnlJ/miJDkuIDkuKrorrDlvZXlr7nosaHmlL7lnKhyZWN0c+S4re+8jFxyXG4gICAgLy8gMy4g5qC55o2u6K6w5b2V55qE5a+56LGh5pWw57uEcmVjdHMsIOWFiOeUu+efqeW9ouiDjOaZr+WSjOS7t+agvOagh+etvu+8jDQuIOWGjeagueaNrnJlY3Rz55S75oqY57q/XHJcbiAgICBwcml2YXRlIGRyYXcoaXRlbXM6IEFycmF5PGFueT4pOiB2b2lkIHtcclxuICAgICAgICBpZiAoIWl0ZW1zIHx8IGl0ZW1zLmxlbmd0aCA8IDIgfHwgIXRoaXMuY2FudmFzT3B0aW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5q+P5qyh6YeN57uY5YmN5riF56m655S75p2/XHJcbiAgICAgICAgdGhpcy5jdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMuY2FudmFzV2lkdGgsIHRoaXMuY2FudmFzT3B0aW9uLmhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5yZWN0cyA9IFtdO1xyXG4gICAgICAgIHRoaXMueCA9IDA7XHJcbiAgICAgICAgdGhpcy5sYXN0WCA9IDA7XHJcbiAgICAgICAgdGhpcy5tYXhQcmljZSA9IGl0ZW1zWzBdLnByaWNlO1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogcHJlZmVyLWZvci1vZlxyXG4gICAgICAgIGZvciAobGV0IGluZGV4OiBudW1iZXIgPSAxOyBpbmRleCA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtc1tpbmRleF0ucHJpY2UgPiB0aGlzLm1heFByaWNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1heFByaWNlID0gaXRlbXNbaW5kZXhdLnByaWNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMueSA9IHRoaXMuY2FudmFzT3B0aW9uLmhlaWdodCAtIHRoaXMuY2FudmFzT3B0aW9uLmNhcnZlSGVpZ2h0ICogaXRlbXNbMF0ucHJpY2UgLyB0aGlzLm1heFByaWNlO1xyXG5cclxuICAgICAgICBjb25zdCBidXR0b25zOiBOb2RlTGlzdE9mPEVsZW1lbnQ+ID0gKHRoaXMubmF0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCkucXVlcnlTZWxlY3RvckFsbCgnLnRpMy1idG4taXRlbS1yYWRpbycpO1xyXG4gICAgICAgIC8vICDmm7Lnur/lm77nmoTog4zmma/lkozpgInmi6nmjInpkq7nmoTnmoRcclxuICAgICAgICB0aGlzLmxhc3RCdXR0b24gPSBidXR0b25zWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgICAgICAvLyDnlLvmoIfpophcclxuICAgICAgICB0aGlzLmRyYXdUZXh0KHtcclxuICAgICAgICAgICAgeDogdGhpcy5jYW52YXNPcHRpb24udGl0bGVYLFxyXG4gICAgICAgICAgICB5OiB0aGlzLmNhbnZhc09wdGlvbi50aXRsZVksXHJcbiAgICAgICAgICAgIHRleHQ6IHRoaXMuY2FudmFzT3B0aW9uLnRpdGxlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIOmBjeWOhuaMiemSruaVsOaNrlxyXG4gICAgICAgIGNvbnN0IGxlbjogbnVtYmVyID0gdGhpcy5pdGVtcy5sZW5ndGg7XHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXg6IG51bWJlciA9IDE7IGluZGV4IDwgbGVuOyBpbmRleCsrKSB7XHJcblxyXG4gICAgICAgICAgICAvLyDkuI3mmK/mnIDlkI7kuIDmnaHlubbkuJTku7fmoLzmsqHmnInlj5jljJbvvIzkuI3pnIDopoHlpITnkIZcclxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSBsZW4gLSAxICYmIHRoaXMuaXRlbXNbaW5kZXhdLnByaWNlID09PSB0aGlzLml0ZW1zW2luZGV4IC0gMV0ucHJpY2UpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBidXR0b246IERPTVJlY3QgPSBidXR0b25zW2luZGV4XS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgLy8g5pyA5ZCO5LiA5p2h5pWw5o2u77yM5pyJ5Lu35qC85Y+Y5YyW77yM6ZyA6KaB55S7MuasoVxyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IGxlbiAtIDEgJiYgaXRlbXNbaW5kZXhdLnByaWNlICE9PSBpdGVtc1tpbmRleCAtIDFdLnByaWNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnggPSB0aGlzLnggKyAoYnV0dG9uLmxlZnQgLSB0aGlzLmxhc3RCdXR0b24ubGVmdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlY29yZChpdGVtcywgaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgLy8g5pyA5ZCO5LiA5qyhXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RYID0gdGhpcy54O1xyXG4gICAgICAgICAgICAgICAgdGhpcy55ID0gdGhpcy5jYW52YXNPcHRpb24uaGVpZ2h0IC0gdGhpcy5nZXRDdXJyZW50SGVpZ2h0KGl0ZW1zW2luZGV4XS5wcmljZSwgaXRlbXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0QnV0dG9uID0gYnV0dG9uO1xyXG4gICAgICAgICAgICAgICAgdGhpcy54ID0gdGhpcy54ICsgYnV0dG9uLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvcmQoaXRlbXMsIGluZGV4LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIC8vIOacgOWQjuS4gOS4quaVsOaNruayoeacieS7t+agvOWPmOWMllxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSBsZW4gLSAxICYmIGl0ZW1zW2luZGV4XS5wcmljZSA9PT0gaXRlbXNbaW5kZXggLSAxXS5wcmljZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy54ID0gdGhpcy54ICsgKChidXR0b24ubGVmdCArIGJ1dHRvbi53aWR0aCkgLSB0aGlzLmxhc3RCdXR0b24ubGVmdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlY29yZChpdGVtcywgaW5kZXgsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgLy8g5Lit6Ze055qE5oyJ6ZKu5pWw5o2uXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnggPSB0aGlzLnggKyBidXR0b24ubGVmdCAtIHRoaXMubGFzdEJ1dHRvbi5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvcmQoaXRlbXMsIGluZGV4KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGFzdFggPSB0aGlzLng7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnkgPSB0aGlzLmNhbnZhc09wdGlvbi5oZWlnaHQgLSB0aGlzLmdldEN1cnJlbnRIZWlnaHQoaXRlbXNbaW5kZXhdLnByaWNlLCBpdGVtcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RCdXR0b24gPSBidXR0b247XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDnlLvmn7Hnirbog4zmma/lkozmoIfpophcclxuICAgICAgICB0aGlzLnJlY3RzLmZvckVhY2goKHJlY3Q6IFRwUHJpY2VsaW5lUmVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdSZWN0KHJlY3QpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyDnlLvmipjnur9cclxuICAgICAgICB0aGlzLmRyYXdMaW5lKHRoaXMuY3R4LCB7IHdpZHRoOiB0aGlzLmNhbnZhc09wdGlvbi5saW5lV2lkdGgsIGNvbG9yOiB0aGlzLmNhbnZhc09wdGlvbi5saW5lQ29sb3IgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5qC55o2u56ys5LiA5Liq5oyJ6ZKu5pWw5o2u55qE5Lu35qC86K6h566X5b2T5YmN5Lu35qC85p+x54q26auY5bqmXHJcbiAgICBwcml2YXRlIGdldEN1cnJlbnRIZWlnaHQoY3VyUHJpY2U6IG51bWJlciwgaXRlbXM6IEFycmF5PGFueT4pOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhc09wdGlvbi5jYXJ2ZUhlaWdodCAqIGN1clByaWNlIC8gdGhpcy5tYXhQcmljZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDmr4/kuIDmraXpgY3ljobmlbDmja7vvIzorrDlvZXkuIDkuKrphY3nva7ngrlcclxuICAgIHByaXZhdGUgcmVjb3JkKGl0ZW1zOiBBcnJheTxhbnk+LCBjdXJycmVudEluZGV4OiBudW1iZXIsIGlzRW5kPzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHByaWNlOiBudW1iZXIgPSB0aGlzLml0ZW1zW2lzRW5kID8gY3VycnJlbnRJbmRleCA6IGN1cnJyZW50SW5kZXggLSAxXS5wcmljZTtcclxuICAgICAgICAvLyDmn7Hnirbog4zmma9cclxuICAgICAgICBjb25zdCByZWN0T3B0aW9uOiBUcFByaWNlbGluZVJlY3QgPSB7XHJcbiAgICAgICAgICAgIHg6IHRoaXMubGFzdFgsXHJcbiAgICAgICAgICAgIHk6IHRoaXMueSxcclxuICAgICAgICAgICAgd2lkdGg6IGlzRW5kID8gKHRoaXMueCAtIHRoaXMubGFzdFgpIDogKHRoaXMueCAtIHRoaXMubGFzdFggLSAyKSxcclxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmNhbnZhc09wdGlvbi5oZWlnaHQgLSB0aGlzLnksXHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbWF4LWxpbmUtbGVuZ3RoXHJcbiAgICAgICAgICAgIHRleHQ6IGAke3RoaXMucmVjdHMubGVuZ3RoID09PSAwID8gdGhpcy5jYW52YXNPcHRpb24udGFnUHJlZml4IDogJyd9JHt0aGlzLmNhbnZhc09wdGlvbi5jdXJyZW5jeX0ke3ByaWNlLnRvRml4ZWQoMil9JHt0aGlzLmNhbnZhc09wdGlvbi50YWdVbml0fWAsXHJcbiAgICAgICAgICAgIGFjdGl2ZTogcHJpY2UgPT09IHRoaXMubW9kZWwucHJpY2VcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMucmVjdHMucHVzaChyZWN0T3B0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjYW52YXMg55S75paH5a2XXHJcbiAgICBwcml2YXRlIGRyYXdUZXh0KGNvbmZpZzogYW55KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uOiBhbnkgPSB7XHJcbiAgICAgICAgICAgIG9mZnNldDogdGhpcy5jYW52YXNPcHRpb24udGFnT2Zmc2V0LFxyXG4gICAgICAgICAgICBjb2xvcjogdGhpcy5jYW52YXNPcHRpb24uY29sb3IsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiB0aGlzLmNhbnZhc09wdGlvbi5mb250U2l6ZSxcclxuICAgICAgICAgICAgZm9udEZhbWlseTogdGhpcy5jYW52YXNPcHRpb24uZm9udEZhbWlseSxcclxuICAgICAgICAgICAgLi4uY29uZmlnXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gb3B0aW9uLmFjdGl2ZSA/IHRoaXMuY2FudmFzT3B0aW9uLmFjdGl2ZUNvbG9yIDogdGhpcy5jYW52YXNPcHRpb24uY29sb3I7XHJcbiAgICAgICAgLy8gZm9udCDlkIzml7borr7nva7lrZfkvZPlpKflsI/lkozlrZfkvZPml7bvvIzpnIDnlKjnqbrmoLzpmpTlvIBcclxuICAgICAgICB0aGlzLmN0eC5mb250ID0gYCR7b3B0aW9uLmZvbnRTaXplfSAke29wdGlvbi5mb250RmFtaWx5fWA7XHJcblxyXG4gICAgICAgIGlmIChvcHRpb24uYWxpZ25SaWdodCkge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXh0TWV0cmljczogVGV4dE1ldHJpY3MgPSB0aGlzLmN0eC5tZWFzdXJlVGV4dChvcHRpb24udGV4dCk7XHJcbiAgICAgICAgICAgIG9wdGlvbi54ID0gKG9wdGlvbi54ICsgb3B0aW9uLndpZHRoKSAtIHRleHRNZXRyaWNzLndpZHRoO1xyXG4gICAgICAgICAgICBvcHRpb24ueSA9IG9wdGlvbi55IC0gNjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbFRleHQob3B0aW9uLnRleHQsIG9wdGlvbi54LCBvcHRpb24ueSk7XHJcbiAgICB9XHJcbiAgICAvLyDnlLvnur9cclxuICAgIHByaXZhdGUgZHJhd0xpbmUoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIG9wdGlvbjogeyB3aWR0aDogbnVtYmVyLCBjb2xvcjogc3RyaW5nIH0pOiB2b2lkIHtcclxuICAgICAgICBjdHgubGluZUpvaW4gPSAncm91bmQnO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBvcHRpb24ud2lkdGg7XHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9uLmNvbG9yO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXg6IG51bWJlciA9IDA7IGluZGV4IDwgdGhpcy5yZWN0cy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgcmVjdDogVHBQcmljZWxpbmVSZWN0ID0gdGhpcy5yZWN0c1tpbmRleF07XHJcblxyXG4gICAgICAgICAgICAvLyDnrKzkuIDkuKrnn6nlvaLvvIzku47otbfngrnlvIDlp4tcclxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjdHgubW92ZVRvKE1hdGgucm91bmQocmVjdC54KSwgTWF0aC5yb3VuZChyZWN0LnkpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIOmdnuesrOS4gOS4qu+8jOerlue6v+mDqOWIhlxyXG4gICAgICAgICAgICAgICAgY3R4LmxpbmVUbyhNYXRoLnJvdW5kKHJlY3QueCAtIDEpLCBNYXRoLnJvdW5kKHJlY3QueSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIOefqeW9oueahOW3pui+ueWIsOWPs+i+uVxyXG4gICAgICAgICAgICBjdHgubGluZVRvKE1hdGgucm91bmQocmVjdC54ICsgcmVjdC53aWR0aCArIDEpLCBNYXRoLnJvdW5kKHJlY3QueSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG4gICAgLy8g55S76IOM5pmv5ZKM5paH5a2XXHJcbiAgICBwcml2YXRlIGRyYXdSZWN0KG9wdGlvbjogVHBQcmljZWxpbmVSZWN0KTogdm9pZCB7XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBtYXgtbGluZS1sZW5ndGhcclxuICAgICAgICBjb25zdCBjYW52YXNHcmFkaWVudDogQ2FudmFzR3JhZGllbnQgPSB0aGlzLmN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCB0aGlzLmNhbnZhc09wdGlvbi5oZWlnaHQgLSB0aGlzLmNhbnZhc09wdGlvbi5jYXJ2ZUhlaWdodCwgMCwgdGhpcy5jYW52YXNPcHRpb24uaGVpZ2h0KTtcclxuICAgICAgICBjYW52YXNHcmFkaWVudC5hZGRDb2xvclN0b3AoMCwgdGhpcy5jYW52YXNPcHRpb24uc3RhcnRDb2xvcik7XHJcbiAgICAgICAgY2FudmFzR3JhZGllbnQuYWRkQ29sb3JTdG9wKDEsIHRoaXMuY2FudmFzT3B0aW9uLmVuZENvbG9yKTtcclxuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBjYW52YXNHcmFkaWVudDtcclxuICAgICAgICB0aGlzLmN0eC5maWxsUmVjdChvcHRpb24ueCwgb3B0aW9uLnksIG9wdGlvbi53aWR0aCwgb3B0aW9uLmhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5kcmF3VGV4dCh7IC4uLm9wdGlvbiwgYWxpZ25SaWdodDogdHJ1ZSB9KTtcclxuICAgIH1cclxufVxyXG4iXX0=