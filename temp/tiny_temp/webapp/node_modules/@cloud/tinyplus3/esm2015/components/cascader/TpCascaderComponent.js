import { Component, EventEmitter, Input, Output, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { TiDominatorComponent, TiDropComponent, TiDroplistComponent, TiFormComponent } from '@cloud/tiny3';
/**
 * 级联选择器 目前只支持二级或三级级联
 *
 * <example-url>../tinyplus3demo/#/cascader/cascader-all</example-url>
 */
export class TpCascaderComponent extends TiFormComponent {
    constructor() {
        // TODO: add explicit constructor
        super(...arguments);
        /**
         * 是否开启清空输入框内容的功能
         */
        this.clearable = false;
        /**
         * 显示的字段
         */
        this.labelKey = 'label';
        /**
         * 10.0.4 新增
         *
         * 单级面板的宽度
         */
        this.panelWidth = '160px';
        /**
         * 10.0.4 新增
         *
         * 面板高度
         */
        this.panelHeight = '248px';
        /**
         * 10.0.4 新增
         *
         * 是否只能选中叶子节点
         */
        this.onlySelectLeaf = true;
        /**
         * 10.0.4 新增
         *
         * 在选择框上呈现的数据是否显示全部路径
         */
        this.showAllLevel = true;
        /**
         * @ignore
         * 选中事件，选中项没有变化
         */
        this.select = new EventEmitter();
        /**
         * @ignore
         * 选中事件，选中项变化
         */
        this.change = new EventEmitter();
        /**
         * 清除已选项
         */
        this.clear = new EventEmitter();
        /**
         * @ignore 分隔符 以后可能会对外开放
         */
        this.separator = '/';
        /**
         * @ignore 三个TiListComponent的model
         */
        this.listModel = [];
        /**
         * @ignore
         * itemsArr[0]存放根面板内容，itemArr[1]存放次级面板内容，itemArr[2]存放次次级面板内容
         */
        this.itemsArr = [];
        /**
         * @ignore 宽面板的数据
         */
        this.itemForWideDroplist = [];
        this.valueFn = (item) => {
            return item[this.valueKey];
        };
    }
    ngOnInit() {
        this.panelWidthNum = parseInt(this.panelWidth, 10);
    }
    ngOnChanges(change) {
        if (change['items']) {
            this.itemsArr[0] = this.items;
        }
    }
    /**
     * @ignore
     */
    ngOnModelChange() {
        if (this.modelWhole && this.modelWhole.length > 0) {
            this.joinDominatorModel();
        }
    }
    /**
     * @ignore
     */
    onClick() {
        if (this.disabled) {
            return;
        }
        if (this.dropCom.isShow || this.wideDroplist.isShow) {
            this.close();
            return;
        }
        this.dropshow = true;
        if (this.items.length === 0) {
            this.wideDroplist.show();
        }
        else {
            /**
             * 触发tiScroll关闭面板的场景下，drop不显示，但list是显示的，
             * 下次重新打开时，一个或者多个list会全部显示，除第一个外，其他的都定位错误，
             * 所以，需要打开前隐藏除第一个外的其他list。
             */
            this.listComsArr.forEach((list, index) => {
                if (index > 0) {
                    this.renderer.setStyle(list.nativeElement, 'display', 'none');
                }
            });
            this.dropCom.show();
            if (this.modelWhole && this.modelWhole.length > 0) {
                this.modelWhole.forEach((item, i) => {
                    this.listComsArr[i].model = item;
                    this.itemsArr[i + 1] = item.children;
                    this.showList(i);
                    // 如果是初始有值，不加setTimeout不能滚到正确的位置
                    setTimeout(() => {
                        this.listComsArr[i].scrollToSelected();
                    }, 0);
                });
            }
            else {
                this.listComsArr[0].model = undefined;
                this.showList(0);
            }
        }
        this.focus();
    }
    ngAfterViewInit() {
        this.listComsArr = this.listComs.toArray();
        this.setFocusableElems(this.dominatorCom.getFocusableElems());
        this.renderer.setStyle(this.dropCom.nativeElement, 'width', '');
    }
    /**
     * @ignore
     */
    close() {
        this.dropshow = false;
        this.dropCom.hide();
        this.wideDroplist.hide();
    }
    /**
     * @ignore
     */
    onBlur() {
        this.close();
    }
    /**
     * @ignore
     */
    onSelect($event, panelIndex) {
        var _a;
        // 处理面板
        if (((_a = $event.children) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            // 关闭次次级面板
            for (let i = panelIndex + 1; i < this.listComsArr.length - 1; i++) {
                this.renderer.setStyle(this.listComsArr[i + 1].nativeElement, 'display', 'none');
            }
            // 打开次级面板
            this.itemsArr[panelIndex + 1] = $event.children;
            this.showList(panelIndex + 1);
        }
        else {
            // 关闭次级以后所有面板
            this.close();
        }
        this.listModel = this.listModel || [];
        this.listModel.splice(panelIndex);
        this.listModel.push($event);
        if (!this.onlySelectLeaf || !$event.children || $event.children.length === 0) {
            this.modelWhole = [...this.listModel];
            this.handleModel($event, panelIndex);
        }
    }
    /**
     * @ignore
     */
    onClear() {
        this.model = [];
        this.clear.emit();
    }
    /**
     * @ignore
     */
    onMouseleave(panelIndex) {
        this.listComsArr[panelIndex].hoverOption = undefined;
    }
    /**
     * @ignore
     */
    showList(panelIndex) {
        this.renderer.setStyle(this.listComsArr[panelIndex].nativeElement, 'display', 'inline-block');
        this.renderer.setStyle(this.dropCom.nativeElement, 'width', this.panelWidthNum * (panelIndex + 1) + 'px');
        if (!this.listComsArr[panelIndex].model) {
            this.listComsArr[panelIndex].hoverOption = undefined;
        }
    }
    handleModel($event, panelIndex) {
        // 处理数据
        this.listModel.splice(panelIndex);
        this.listModel[panelIndex] = $event;
        this.joinDominatorModel();
    }
    /**
     * 通过model拼接dominatorModel，显示在dominator上
     */
    joinDominatorModel() {
        this.dominatorModel = '';
        if (this.showAllLevel) {
            this.modelWhole.forEach((item, index) => {
                if (index === 0) {
                    this.dominatorModel += `${item[this.labelKey]}`;
                }
                else {
                    this.dominatorModel += `${this.separator}${item[this.labelKey]}`;
                }
            });
        }
        else {
            this.dominatorModel = this.modelWhole[this.model.length - 1][this.labelKey];
        }
    }
    writeValue(model) {
        // super.writeValue(model);
        if (model && this.valueKey) {
            this._modelWhole = this.items.filter((item) => model.includes(this.valueFn(item)));
            if (this._modelWhole[0].children) {
                const nextModelWhole = this._modelWhole[0].children.filter((item) => model.includes(this.valueFn(item)))[0];
                this._modelWhole.push(nextModelWhole);
                if (nextModelWhole.children) {
                    const nextModelWhole1 = nextModelWhole.children.filter((item) => model.includes(this.valueFn(item)))[0];
                    nextModelWhole1 && this._modelWhole.push(nextModelWhole1);
                }
            }
        }
        else {
            this._modelWhole = model;
        }
        super.writeValue(model);
    }
    get modelWhole() {
        return this._modelWhole;
    }
    /**
     * 点选时modelWhole改变，要同时更改model
     */
    set modelWhole(value) {
        this._modelWhole = value;
        if (this.valueKey && value !== undefined && value !== null) {
            // 存在valueKey，且value不为空
            this.model = value.map((item) => this.valueFn(item));
        }
        else {
            this.model = value;
        }
    }
}
TpCascaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-cascader',
                template: "<ti-dominator [id]=\"appendId('cascader_dominator')\"\r\n    [placeholder]=\"placeholder\" [disabled]=\"disabled\" (click)=\"onClick()\" [dropshow]=\"dropshow\"\r\n    [clearable]=\"clearable\" [(ngModel)]='dominatorModel' (clear)=\"onClear()\">\r\n    <ng-template #item>\r\n        <span>{{dominatorModel}}</span>\r\n    </ng-template>\r\n</ti-dominator>\r\n<ti-drop\r\n    [dominatorElem]=\"dominatorCom.nativeElement\"\r\n    [panelWidth]=\"panelWidth\"\r\n    [panelHeight]=\"panelHeight\">\r\n        <!-- \u6709\u9009\u9879\u6570\u636E -->\r\n        <ng-container *ngTemplateOutlet=\"pannelTemplate; context: {$implicit: itemsArr[0], panelIndex: 0}\">\r\n        </ng-container>\r\n        <ng-container *ngTemplateOutlet=\"pannelTemplate; context: {$implicit: itemsArr[1], panelIndex: 1}\">\r\n        </ng-container>\r\n        <ng-container *ngTemplateOutlet=\"pannelTemplate; context: {$implicit: itemsArr[2], panelIndex: 2}\">\r\n        </ng-container>\r\n</ti-drop>\r\n\r\n<ng-template #pannelTemplate let-options let-panelIndex=panelIndex>\r\n    <ti-list #commonList\r\n        [ngStyle]=\"{width: panelWidth}\"\r\n        class=\"tp-cascader-list\"\r\n        [options]=\"options\"\r\n        [labelKey]=\"labelKey\"\r\n        [showChildren]=\"false\"\r\n        (select)=\"onSelect($event, panelIndex)\"\r\n        [(ngModel)]='listModel[panelIndex]'\r\n        (mouseleave)=\"onMouseleave(panelIndex)\"\r\n    ></ti-list>\r\n</ng-template>\r\n\r\n<ng-container>\r\n    <!-- \u65E0\u6570\u636E\u6216\u8005\u641C\u7D22 -->\r\n    <ti-droplist #wideDroplist\r\n        [dominatorElem]=\"dominatorCom.nativeElement\"\r\n        [options]=\"itemForWideDroplist\"\r\n    ></ti-droplist>\r\n</ng-container>\r\n",
                providers: [TiFormComponent.getValueAccessor(TpCascaderComponent)],
                host: {
                    '(blur)': 'onBlur()',
                    '[class.tp-cascader-dominator]': 'true'
                },
                styles: [".ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.tp-component-container-border,:host.tp-cascader-dominator{-ms-box-sizing:border-box;border:1px solid;border-radius:var(--ti-common-border-radius-normal);box-sizing:border-box;display:inline-block}.tp-component-container-border:not([disabled]),:host.tp-cascader-dominator:not([disabled]){background-color:var(--ti-input-bg-color);border-color:var(--ti-common-color-line-normal)}.tp-component-container-border:not([disabled]):hover,:host.tp-cascader-dominator:not([disabled]):hover{border-color:var(--ti-common-color-line-hover)}.tp-component-container-border:not([disabled])[tiFocused],:host.tp-cascader-dominator:not([disabled])[tiFocused]{border-color:var(--ti-common-color-line-active)}.tp-component-container-border[disabled],:host.tp-cascader-dominator[disabled]{background-color:var(--ti-common-color-bg-disabled);border-color:var(--ti-common-color-line-disabled);cursor:not-allowed!important}:host.tp-cascader-dominator{width:200px}.tp-cascader-input{background-color:transparent;border:none;cursor:inherit;display:inline-block;height:100%;outline:none;vertical-align:top;width:100%}.tp-cascader-list{height:100%}.tp-cascader-list:not(:first-child){border-left:1px solid var(--ti-common-color-line-dividing);display:none}"]
            },] }
];
TpCascaderComponent.propDecorators = {
    items: [{ type: Input }],
    clearable: [{ type: Input }],
    placeholder: [{ type: Input }],
    labelKey: [{ type: Input }],
    panelWidth: [{ type: Input }],
    panelHeight: [{ type: Input }],
    onlySelectLeaf: [{ type: Input }],
    showAllLevel: [{ type: Input }],
    valueKey: [{ type: Input }],
    select: [{ type: Output }],
    change: [{ type: Output }],
    clear: [{ type: Output }],
    dominatorCom: [{ type: ViewChild, args: [TiDominatorComponent, { static: true },] }],
    dropCom: [{ type: ViewChild, args: [TiDropComponent,] }],
    listComs: [{ type: ViewChildren, args: ['commonList',] }],
    wideDroplist: [{ type: ViewChild, args: ['wideDroplist',] }]
};
//# sourceMappingURL=data:application/json;base64,