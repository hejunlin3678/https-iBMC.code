import { Component, ElementRef, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { TiBaseComponent, TiTipService } from '@cloud/tiny3';
import { TpGoandbackService } from '../../services/goandback/TpGoandbackService';
/**
 * 用户受限组件
 * <example-url>../tinyplus3demo/#/restrict/restrict-all</example-url>
 */
export class TpRestrictComponent extends TiBaseComponent {
    constructor(hostRef, renderer2, tipService, tpGoandbackService) {
        super(hostRef, renderer2);
        this.hostRef = hostRef;
        this.renderer2 = renderer2;
        this.tipService = tipService;
        this.tpGoandbackService = tpGoandbackService;
        /**
         * @ignore
         * alert 是否展示控制项
         */
        this.open = false;
        /**
         * @ignore
         * alert 类型
         */
        this.alertType = 'error';
        /**
         * @ignore
         * 内部alert类型图标
         */
        this.typeIcon = true;
        /**
         * @ignore
         * 内部alert关闭图标
         */
        this.closeIcon = false;
        /**
         * @ignore
         * alert 内容
         */
        this.alertContent = '';
        /**
         * @ignore
         * tipcontent 内容
         */
        this.tipContent = '';
    }
    /**
     * 显示提示块
     */
    openAlert(content) {
        if (content) {
            this.alertContent = content;
            this.open = true;
        }
        else {
            this.open = false;
        }
    }
    /**
     * 给目标元素添加tip
     */
    addTip(target, content) {
        this.tipContent = content;
        if (this.tipContentTemplate) {
            return this.tipService.create(target, {
                trigger: 'mouse',
                showFn: () => {
                    return {
                        content: this.tipContentTemplate
                    };
                }
            });
        }
    }
    /**
     * 打开弹窗
     */
    openMessage(messageOption, confirmFn) {
        let words;
        if (messageOption.firstMessage) {
            const message = this.getMessageInfo(messageOption.firstMessage);
            words = Object.assign({ firstMessageContent: message.label, firstMessageOkButtonText: message.link, path: message.href }, messageOption);
        }
        else {
            words = messageOption;
        }
        this.tpGoandbackService.open({
            words,
            confirmFn,
            // 略过url添加params处理（restrict受限组件需略过tpGoandbackService中goToUrl方法对url的处理）
            addUrlParams: false
        });
    }
    //  message 弹窗的内容和按钮需要 alert 的内容转化
    // tslint:disable-next-line: prefer-function-over-method
    getMessageInfo(content) {
        let href;
        let link;
        let matchedString;
        // 返回数据中可能没有href属性，所有正则匹配两次
        // 提取出a 标签中的所有字符
        const reg = /<a([^>]*)>(.*?)<\/a>/g;
        let regExeRes = reg.exec(content);
        while (regExeRes && reg.lastIndex !== content.length) {
            regExeRes = reg.exec(content);
        }
        if (regExeRes) {
            // 提取a属性字符中的href内容
            const reg2 = /href=['"]?([^"]*)['"]?/g;
            matchedString = regExeRes[0];
            link = regExeRes[2];
            // 提取 href 的值
            const attrsStr = regExeRes[1];
            const regExeRes2 = reg2.exec(attrsStr);
            href = regExeRes2 ? regExeRes2[1] : '';
        }
        return {
            label: content.replace(matchedString, ''),
            link,
            href
        };
    }
}
TpRestrictComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-restrict',
                template: "<ti-alert\r\n    [type]=\"alertType\"\r\n    [closeIcon]=\"closeIcon\"\r\n    [typeIcon]=\"typeIcon\"\r\n    [open]=\"open\"\r\n    [id]=\"appendId('restrict_alert')\"\r\n    >\r\n    <ng-container>\r\n        <span [id]=\"appendId('content')\" [innerHTML]=\"alertContent\"></span>\r\n    </ng-container>\r\n</ti-alert>\r\n\r\n<!-- tip \u63D0\u793A\u5185\u5BB9\uFF0C\u56E0\u4E3A\u5B57\u7B26\u4E32\u4E2D\u6709a\u94FE\u63A5\u6240\u4EE5\u4F7F\u7528\u4E86\u6A21\u677F -->\r\n<ng-template #tipContentTemplate >\r\n    <ng-container>\r\n        <span [innerHTML]=\"tipContent\"></span>\r\n    </ng-container>\r\n</ng-template>\r\n",
                styles: [".tp-link-no-decoration{color:var(--ti-common-color-text-link);cursor:pointer;text-decoration:none}.tp-link-no-decoration:hover{color:var(--tp-link-no-decoration-color-hover);text-decoration:var(--tp-link-no-decoration-text-decoration)}:host{display:block}:host ::ng-deep ti-alert{width:100%}:host ::ng-deep ti-alert a{color:var(--ti-common-color-text-link);cursor:pointer;text-decoration:none}:host ::ng-deep ti-alert a:hover{color:var(--tp-link-no-decoration-color-hover);text-decoration:var(--tp-link-no-decoration-text-decoration)}"]
            },] }
];
TpRestrictComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: TiTipService },
    { type: TpGoandbackService }
];
TpRestrictComponent.propDecorators = {
    tipContentTemplate: [{ type: ViewChild, args: ['tipContentTemplate', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,