import { TiLocale, Util } from '@cloud/tiny3';
import { CfUtil } from '../../cfutils/CfUtil';
/**
 * 提供了转化数据的方法，可以将特定的不可用的数据转化为[TpRegionComponent]{@link ../components/TpRegionComponent.html}的可用数据
 */
export class TpRegionUtil {
    static getRegionList(regionArr) {
        let result = [];
        if (!Util.isArray(regionArr)) {
            return result;
        }
        const isSmallItem = TiLocale.getLocaleWords().tpRegionSmallItem;
        result = isSmallItem ? this.processCTCData(regionArr) : TpRegionUtil.processHWSData(regionArr);
        return result;
    }
    /**
     * 在对象数组中，查找某一个对象，可以模糊匹配，返回其索引
     */
    static findIndex(arr, target) {
        if (!Util.isArray(arr)) {
            return -1;
        }
        let result;
        for (const item of arr) {
            const itemKey = Object.keys(item);
            const targetKey = Object.keys(target);
            let flag = true;
            for (const key of targetKey) {
                if (itemKey.indexOf(key) === -1 || target[key] !== item[key]) {
                    flag = false;
                }
            }
            if (flag) {
                result = arr.indexOf(item);
                break;
            }
        }
        if (result === undefined) {
            result = -1;
        }
        return result;
    }
    /**
     * 类似于findIndex，返回最后一个模糊匹配元素的索引
     */
    static findLastIndex(arr, item) {
        if (!Util.isArray(arr)) {
            return -1;
        }
        const originalArr = arr;
        const reservedArr = arr.reverse();
        const index = TpRegionUtil.findIndex(reservedArr, item);
        if (index === -1) {
            return -1;
        }
        else {
            return originalArr.indexOf(reservedArr[index]);
        }
    }
    static processHWSData(regionArr) {
        let result = [];
        for (let region of regionArr) {
            // 过滤掉属性isAlliance 或 isSelfDevelop为true的region
            if (region.isAlliance || region.isSelfDevelop) {
                continue;
            }
            const index = TpRegionUtil.findLastIndex(result, { displayName: region.geoCategory }); // 判断已处理数据中有无该大区
            const key = region.geoArea === '31' ? 'special' : 'regions'; // 当geoArea为31时，则表示当前项属于亚太区下需要做特殊处理
            // result中没有该大区时：大区名称和id都取geoCategory；存放各区域的属性为special/regions，为数组类型，直接将当前项push到该数组中
            if (index === -1) {
                let itemObj = {
                    displayName: region.geoCategory
                };
                itemObj[key] = [];
                itemObj[key].push(region);
                result.push(itemObj);
                continue;
            }
            // result中有该大区时：判断存放当前项的属性为special/regions是否存在，如果不存在则令该属性为空数组，存在直接将当前项push到该数组中
            if (Util.isUndefined(result[index][key])) {
                result[index][key] = [];
            }
            result[index][key].push(region);
            CfUtil.getUser()
                .then((user) => {
                const isNonsupportRegionFn = CfUtil.isNonsupportRegion();
                if (typeof isNonsupportRegionFn === 'function') {
                    region.disabled = isNonsupportRegionFn(user.nonsupportRegions, region.regionId, user.supportRegions);
                }
            });
        }
        return result;
    }
    static processCTCData(regionArr) {
        // ctc下的数据，由组件装配成A-G, H-K, L-S, T-Z四个大区，先定义四个大区对象，循环传入参数，装入四个对象
        let result = [
            { displayName: 'A-G', regions: [] },
            { displayName: 'H-K', regions: [] },
            { displayName: 'L-S', regions: [] },
            { displayName: 'T-Z', regions: [] }
        ];
        regionArr.forEach((region) => {
            if (!region.shortName) {
                return;
            }
            if (region.shortName.charCodeAt(0) >= 65 && region.shortName.charCodeAt(0) <= 71
                || region.shortName.charCodeAt(0) >= 97 && region.shortName.charCodeAt(0) <= 103) {
                TpRegionUtil.pushRegion(result[0].regions, region);
            }
            else if (region.shortName.charCodeAt(0) >= 72 && region.shortName.charCodeAt(0) <= 75
                || region.shortName.charCodeAt(0) >= 104 && region.shortName.charCodeAt(0) <= 107) {
                TpRegionUtil.pushRegion(result[1].regions, region);
            }
            else if (region.shortName.charCodeAt(0) >= 76 && region.shortName.charCodeAt(0) <= 83
                || region.shortName.charCodeAt(0) >= 108 && region.shortName.charCodeAt(0) <= 115) {
                TpRegionUtil.pushRegion(result[2].regions, region);
            }
            else if (region.shortName.charCodeAt(0) >= 84 && region.shortName.charCodeAt(0) <= 90
                || region.shortName.charCodeAt(0) >= 116 && region.shortName.charCodeAt(0) <= 122) {
                TpRegionUtil.pushRegion(result[3].regions, region);
            }
        });
        return result;
    }
    static pushRegion(regions, region) {
        const index = regions.findIndex((item) => item.displayName === region.ascription);
        if (index > -1) {
            regions[index].project.push(region);
        }
        else {
            const regionObj = {
                displayName: region.ascription,
                project: [region]
            };
            regions.push(regionObj);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,