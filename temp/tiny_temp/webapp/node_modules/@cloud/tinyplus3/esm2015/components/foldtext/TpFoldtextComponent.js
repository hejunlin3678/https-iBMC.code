import { Component, Input } from '@angular/core';
import { TiBaseComponent, TiLocale } from '@cloud/tiny3';
/**
 * 折叠文本
 *
 * 10.0.1 新增
 *
 * <example-url>../tinyplus3demo/#/foldtext/foldtext-all</example-url>
 */
export class TpFoldtextComponent extends TiBaseComponent {
    constructor() {
        super(...arguments);
        /**
         * 文本内容
         */
        this.texts = [];
        /**
         * 折叠时显示几行
         */
        this.line = 2;
        /**
         * @ignore
         * “查看全部” 词条
         */
        this.showMore = TiLocale.getLocaleWords().tpFoldtext.showMore;
        /**
         * @ignore
         * “收起” 词条
         */
        this.showLess = TiLocale.getLocaleWords().tpFoldtext.showLess;
        /**
         * @ignore
         * 是否折叠
         */
        this.folded = true;
        // 表格中的默认font-size:12px, 默认line-height:1.5, 所以默认值取18px
        this.lineHeight = '18px';
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngAfterViewInit() {
        super.ngAfterViewInit();
        const CSSStyles = getComputedStyle(this.nativeElement);
        const lineHeight = CSSStyles.getPropertyValue('line-height');
        if (!Number.isNaN(parseFloat(lineHeight))) {
            this.lineHeight = lineHeight;
        }
        // 修改了页面的数据height，消除ExpressionChangedAfterItHasBeenCheckedError报错使用setTimeout
        setTimeout(() => {
            this.height = (this.line * parseFloat(this.lineHeight)) + 'px';
        }, 0);
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        if (changes['texts'] && !changes['texts'].firstChange || changes['line'] && !changes['line'].firstChange) {
            this.height = (this.line * parseFloat(this.lineHeight)) + 'px';
        }
    }
    /**
     * @ignore
     * 切换文本的点击事件
     */
    onClick(event) {
        this.folded = !this.folded;
    }
}
TpFoldtextComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-foldtext',
                template: "<section class=\"tp-foldtext-wraper\" [ngStyle]=\"{'height': folded? height:''}\">\r\n    <section tiOverflow *ngFor=\"let text of texts; index as i\">\r\n        <span [innerHTML]=\"text\" [id]=\"appendId('text_' + i)\"></span>\r\n    </section>\r\n</section>\r\n<section tiOutline class=\"tp-foldtext-toggle\" (click)=\"onClick($event)\" [id]=\"appendId('toggle')\"\r\n[tabindex]=\"0\" (keydown.enter)=\"onClick($event)\">\r\n    {{folded? showMore:showLess}} <span *ngIf=\"folded\">({{texts.length}})</span>\r\n</section>",
                styles: [".tp-link-no-decoration{color:var(--ti-common-color-text-link);cursor:pointer;text-decoration:none}.tp-link-no-decoration:hover{color:var(--tp-link-no-decoration-color-hover);text-decoration:var(--tp-link-no-decoration-text-decoration)}.tp-foldtext-wraper{overflow-y:hidden}.tp-foldtext-wraper ::ng-deep a{color:var(--ti-common-color-text-link);cursor:pointer;text-decoration:none}.tp-foldtext-wraper ::ng-deep a:hover{color:var(--tp-link-no-decoration-color-hover);text-decoration:var(--tp-link-no-decoration-text-decoration)}.tp-foldtext-toggle{color:var(--ti-common-color-text-highlight)}.tp-foldtext-toggle:hover{cursor:pointer}"]
            },] }
];
TpFoldtextComponent.propDecorators = {
    texts: [{ type: Input }],
    line: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHBGb2xkdGV4dENvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL0BjbG91ZC90aW55cGx1czMvY29tcG9uZW50cy9mb2xkdGV4dC9UcEZvbGR0ZXh0Q29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV6RDs7Ozs7O0dBTUc7QUFNSCxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsZUFBZTtJQUx4RDs7UUFNSTs7V0FFRztRQUNNLFVBQUssR0FBa0IsRUFBRSxDQUFDO1FBQ25DOztXQUVHO1FBQ00sU0FBSSxHQUFXLENBQUMsQ0FBQztRQUMxQjs7O1dBR0c7UUFDSSxhQUFRLEdBQVcsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUM7UUFDeEU7OztXQUdHO1FBQ0ksYUFBUSxHQUFXLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO1FBT3hFOzs7V0FHRztRQUNJLFdBQU0sR0FBWSxJQUFJLENBQUM7UUFDOUIsc0RBQXNEO1FBQzlDLGVBQVUsR0FBVyxNQUFNLENBQUM7SUFrQ3hDLENBQUM7SUFoQ0cscURBQXFEO0lBQ3JELGVBQWU7UUFDWCxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFeEIsTUFBTSxTQUFTLEdBQXdCLGdCQUFnQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM1RSxNQUFNLFVBQVUsR0FBVyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFckUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUU7WUFDdkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7U0FDaEM7UUFDRCw2RUFBNkU7UUFDN0UsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDbkUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ1YsQ0FBQztJQUVELHFEQUFxRDtJQUNyRCxXQUFXLENBQUMsT0FBc0I7UUFDOUIsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUzQixJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRTtZQUN0RyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQ2xFO0lBQ0wsQ0FBQztJQUNEOzs7T0FHRztJQUNJLE9BQU8sQ0FBQyxLQUFZO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQy9CLENBQUM7OztZQXBFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLHdoQkFBOEI7O2FBRWpDOzs7b0JBS0ksS0FBSzttQkFJTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUaUJhc2VDb21wb25lbnQsIFRpTG9jYWxlIH0gZnJvbSAnQGNsb3VkL3RpbnkzJztcclxuXHJcbi8qKlxyXG4gKiDmipjlj6DmlofmnKxcclxuICpcclxuICogMTAuMC4xIOaWsOWinlxyXG4gKlxyXG4gKiA8ZXhhbXBsZS11cmw+Li4vdGlueXBsdXMzZGVtby8jL2ZvbGR0ZXh0L2ZvbGR0ZXh0LWFsbDwvZXhhbXBsZS11cmw+XHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndHAtZm9sZHRleHQnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2ZvbGR0ZXh0Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vZm9sZHRleHQubGVzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUcEZvbGR0ZXh0Q29tcG9uZW50IGV4dGVuZHMgVGlCYXNlQ29tcG9uZW50IHtcclxuICAgIC8qKlxyXG4gICAgICog5paH5pys5YaF5a65XHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIHRleHRzOiBBcnJheTxzdHJpbmc+ID0gW107XHJcbiAgICAvKipcclxuICAgICAqIOaKmOWPoOaXtuaYvuekuuWHoOihjFxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBsaW5lOiBudW1iZXIgPSAyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKiDigJzmn6XnnIvlhajpg6jigJ0g6K+N5p2hXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzaG93TW9yZTogc3RyaW5nID0gVGlMb2NhbGUuZ2V0TG9jYWxlV29yZHMoKS50cEZvbGR0ZXh0LnNob3dNb3JlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKiDigJzmlLbotbfigJ0g6K+N5p2hXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzaG93TGVzczogc3RyaW5nID0gVGlMb2NhbGUuZ2V0TG9jYWxlV29yZHMoKS50cEZvbGR0ZXh0LnNob3dMZXNzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZVxyXG4gICAgICog5pi+56S65paH5pys5YaF5a6555qE6auY5bqmXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBoZWlnaHQ6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZVxyXG4gICAgICog5piv5ZCm5oqY5Y+gXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBmb2xkZWQ6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgLy8g6KGo5qC85Lit55qE6buY6K6kZm9udC1zaXplOjEycHgsIOm7mOiupGxpbmUtaGVpZ2h0OjEuNSwg5omA5Lul6buY6K6k5YC85Y+WMThweFxyXG4gICAgcHJpdmF0ZSBsaW5lSGVpZ2h0OiBzdHJpbmcgPSAnMThweCc7XHJcblxyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiB1c2UtbGlmZS1jeWNsZS1pbnRlcmZhY2VcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5uZ0FmdGVyVmlld0luaXQoKTtcclxuXHJcbiAgICAgICAgY29uc3QgQ1NTU3R5bGVzOiBDU1NTdHlsZURlY2xhcmF0aW9uID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgIGNvbnN0IGxpbmVIZWlnaHQ6IHN0cmluZyA9IENTU1N0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdsaW5lLWhlaWdodCcpO1xyXG5cclxuICAgICAgICBpZiAoIU51bWJlci5pc05hTihwYXJzZUZsb2F0KGxpbmVIZWlnaHQpKSkge1xyXG4gICAgICAgICAgICB0aGlzLmxpbmVIZWlnaHQgPSBsaW5lSGVpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDkv67mlLnkuobpobXpnaLnmoTmlbDmja5oZWlnaHTvvIzmtojpmaRFeHByZXNzaW9uQ2hhbmdlZEFmdGVySXRIYXNCZWVuQ2hlY2tlZEVycm9y5oql6ZSZ5L2/55Soc2V0VGltZW91dFxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9ICh0aGlzLmxpbmUgKiBwYXJzZUZsb2F0KHRoaXMubGluZUhlaWdodCkpICsgJ3B4JztcclxuICAgICAgICB9LCAwKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IHVzZS1saWZlLWN5Y2xlLWludGVyZmFjZVxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLm5nT25DaGFuZ2VzKGNoYW5nZXMpO1xyXG5cclxuICAgICAgICBpZiAoY2hhbmdlc1sndGV4dHMnXSAmJiAhY2hhbmdlc1sndGV4dHMnXS5maXJzdENoYW5nZSB8fCBjaGFuZ2VzWydsaW5lJ10gJiYgIWNoYW5nZXNbJ2xpbmUnXS5maXJzdENoYW5nZSkge1xyXG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9ICh0aGlzLmxpbmUgKiBwYXJzZUZsb2F0KHRoaXMubGluZUhlaWdodCkpICsgJ3B4JztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpZ25vcmVcclxuICAgICAqIOWIh+aNouaWh+acrOeahOeCueWHu+S6i+S7tlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25DbGljayhldmVudDogRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmZvbGRlZCA9ICF0aGlzLmZvbGRlZDtcclxuICAgIH1cclxuXHJcbn1cclxuIl19