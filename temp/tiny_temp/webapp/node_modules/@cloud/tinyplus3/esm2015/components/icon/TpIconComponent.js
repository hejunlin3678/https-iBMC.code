import { Component, Input, ElementRef, Renderer2 } from '@angular/core';
import { TiBaseComponent, Util } from '@cloud/tiny3';
import { HttpClient } from '@angular/common/http';
import { share } from 'rxjs/operators';
// TODO：如果封装为胶囊样式，DOM内部多一层，比现在优劣？
/**
 *  Icon组件，非本地懒加载Icon
 *
 *  Icon组件可以设置显示Icon。
 *
 * <example-url>../tinyplus3demo/#/icon/icon-all</example-url>
 */
export class TpIconComponent extends TiBaseComponent {
    constructor(hostRef, renderer, http) {
        super(hostRef, renderer);
        this.hostRef = hostRef;
        this.renderer = renderer;
        this.http = http;
    }
    /**
     * 设置icon下载地址，默认是'assets/tinyplus3/icons/'
     * @param path
     */
    static setPath(path) {
        TpIconComponent.path = path;
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        const nameChange = changes['name'];
        if (nameChange && !Util.isEmptyString(nameChange.currentValue)) {
            // 拼接URL
            const url = `${TpIconComponent.path}${nameChange.currentValue}.svg`;
            // 取出观察者
            let ob = TpIconComponent.urlObservableMap.get(url);
            if (!ob) {
                // 如果不存在观察者，则发起http请求。share()是为了避免每次订阅都发起http请求。
                ob = this.http.get(url, { responseType: 'text' }).pipe(share());
                // 保存ur和观察者
                TpIconComponent.urlObservableMap.set(url, ob);
            }
            // 订阅http请求结果
            ob.subscribe((svgText) => {
                // 将<svg>挂在<tp-icon>下
                this.nativeElement.innerHTML = svgText;
                // 删除url和观察者
                TpIconComponent.urlObservableMap.delete(url);
            });
        }
    }
}
/**
 * Icon基路径
 */
TpIconComponent.path = 'assets/tinyplus3/icons/';
/**
 * 保存url和观察者，避免并发的重复请求。
 */
TpIconComponent.urlObservableMap = new Map();
TpIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-icon:not([local])',
                template: '<ng-content></ng-content>',
                host: {
                    '[class.tp-cloud-action-state-ing]': "name === 'cloud-action-state-ing'"
                },
                styles: [":host{display:inline-block;vertical-align:-.125em}:host ::ng-deep svg{fill:currentColor;height:1em;width:1em}@keyframes rotating{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}:host.tp-cloud-action-state-ing ::ng-deep svg{animation:rotating .8s linear infinite}"]
            },] }
];
TpIconComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: HttpClient }
];
TpIconComponent.propDecorators = {
    name: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHBJY29uQ29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vQGNsb3VkL3RpbnlwbHVzMy9jb21wb25lbnRzL2ljb24vVHBJY29uQ29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUErQixVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JHLE9BQU8sRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3JELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVsRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdkMsaUNBQWlDO0FBQ2pDOzs7Ozs7R0FNRztBQVNILE1BQU0sT0FBTyxlQUFnQixTQUFRLGVBQWU7SUFlaEQsWUFBc0IsT0FBbUIsRUFBWSxRQUFtQixFQUFVLElBQWdCO1FBQzlGLEtBQUssQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFEUCxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQVksYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFVLFNBQUksR0FBSixJQUFJLENBQVk7SUFFbEcsQ0FBQztJQUNEOzs7T0FHRztJQUNJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBWTtRQUM5QixlQUFlLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNoQyxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0IsTUFBTSxVQUFVLEdBQWlCLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqRCxJQUFJLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQzVELFFBQVE7WUFDUixNQUFNLEdBQUcsR0FBVyxHQUFHLGVBQWUsQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLFlBQVksTUFBTSxDQUFDO1lBQzVFLFFBQVE7WUFDUixJQUFJLEVBQUUsR0FBdUIsZUFBZSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2RSxJQUFJLENBQUMsRUFBRSxFQUFFO2dCQUNMLGdEQUFnRDtnQkFDaEQsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUNoRSxXQUFXO2dCQUNYLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ2hEO1lBQ0QsYUFBYTtZQUNiLEVBQUUsQ0FBQyxTQUFTLENBQ1IsQ0FBQyxPQUFlLEVBQVEsRUFBRTtnQkFDdEIscUJBQXFCO2dCQUNyQixJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUM7Z0JBQ3ZDLFlBQVk7Z0JBQ1osZUFBZSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNqRCxDQUFDLENBQ0osQ0FBQztTQUNMO0lBQ0wsQ0FBQzs7QUFoREQ7O0dBRUc7QUFDWSxvQkFBSSxHQUFXLHlCQUF5QixDQUFDO0FBQ3hEOztHQUVHO0FBQ1ksZ0NBQWdCLEdBQW9DLElBQUksR0FBRyxFQUE4QixDQUFDOztZQWpCNUcsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxzQkFBc0I7Z0JBQ2hDLFFBQVEsRUFBRSwyQkFBMkI7Z0JBRXJDLElBQUksRUFBRTtvQkFDRixtQ0FBbUMsRUFBRSxtQ0FBbUM7aUJBQzNFOzthQUNKOzs7WUFyQnVELFVBQVU7WUFBRSxTQUFTO1lBRXBFLFVBQVU7OzttQkFpQ2QsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFNpbXBsZUNoYW5nZSwgU2ltcGxlQ2hhbmdlcywgRWxlbWVudFJlZiwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRpQmFzZUNvbXBvbmVudCwgVXRpbCB9IGZyb20gJ0BjbG91ZC90aW55Myc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgc2hhcmUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG4vLyBUT0RP77ya5aaC5p6c5bCB6KOF5Li66IO25ZuK5qC35byP77yMRE9N5YaF6YOo5aSa5LiA5bGC77yM5q+U546w5Zyo5LyY5Yqj77yfXHJcbi8qKlxyXG4gKiAgSWNvbue7hOS7tu+8jOmdnuacrOWcsOaHkuWKoOi9vUljb25cclxuICpcclxuICogIEljb27nu4Tku7blj6/ku6Xorr7nva7mmL7npLpJY29u44CCXHJcbiAqXHJcbiAqIDxleGFtcGxlLXVybD4uLi90aW55cGx1czNkZW1vLyMvaWNvbi9pY29uLWFsbDwvZXhhbXBsZS11cmw+XHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndHAtaWNvbjpub3QoW2xvY2FsXSknLFxyXG4gICAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcclxuICAgIHN0eWxlVXJsczogWycuL2ljb24ubGVzcyddLFxyXG4gICAgaG9zdDoge1xyXG4gICAgICAgICdbY2xhc3MudHAtY2xvdWQtYWN0aW9uLXN0YXRlLWluZ10nOiBcIm5hbWUgPT09ICdjbG91ZC1hY3Rpb24tc3RhdGUtaW5nJ1wiXHJcbiAgICB9LFxyXG59KVxyXG5leHBvcnQgY2xhc3MgVHBJY29uQ29tcG9uZW50IGV4dGVuZHMgVGlCYXNlQ29tcG9uZW50IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEljb27ln7rot6/lvoRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcGF0aDogc3RyaW5nID0gJ2Fzc2V0cy90aW55cGx1czMvaWNvbnMvJztcclxuICAgIC8qKlxyXG4gICAgICog5L+d5a2YdXJs5ZKM6KeC5a+f6ICF77yM6YG/5YWN5bm25Y+R55qE6YeN5aSN6K+35rGC44CCXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc3RhdGljIHVybE9ic2VydmFibGVNYXA6IE1hcDxTdHJpbmcsIE9ic2VydmFibGU8c3RyaW5nPj4gPSBuZXcgTWFwPFN0cmluZywgT2JzZXJ2YWJsZTxzdHJpbmc+PigpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBpY29u5ZCN56ewXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIG5hbWU6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaG9zdFJlZjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge1xyXG4gICAgICAgIHN1cGVyKGhvc3RSZWYsIHJlbmRlcmVyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog6K6+572uaWNvbuS4i+i9veWcsOWdgO+8jOm7mOiupOaYrydhc3NldHMvdGlueXBsdXMzL2ljb25zLydcclxuICAgICAqIEBwYXJhbSBwYXRoXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgc2V0UGF0aChwYXRoOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBUcEljb25Db21wb25lbnQucGF0aCA9IHBhdGg7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLm5nT25DaGFuZ2VzKGNoYW5nZXMpO1xyXG4gICAgICAgIGNvbnN0IG5hbWVDaGFuZ2U6IFNpbXBsZUNoYW5nZSA9IGNoYW5nZXNbJ25hbWUnXTtcclxuICAgICAgICBpZiAobmFtZUNoYW5nZSAmJiAhVXRpbC5pc0VtcHR5U3RyaW5nKG5hbWVDaGFuZ2UuY3VycmVudFZhbHVlKSkge1xyXG4gICAgICAgICAgICAvLyDmi7zmjqVVUkxcclxuICAgICAgICAgICAgY29uc3QgdXJsOiBzdHJpbmcgPSBgJHtUcEljb25Db21wb25lbnQucGF0aH0ke25hbWVDaGFuZ2UuY3VycmVudFZhbHVlfS5zdmdgO1xyXG4gICAgICAgICAgICAvLyDlj5blh7rop4Llr5/ogIVcclxuICAgICAgICAgICAgbGV0IG9iOiBPYnNlcnZhYmxlPHN0cmluZz4gPSBUcEljb25Db21wb25lbnQudXJsT2JzZXJ2YWJsZU1hcC5nZXQodXJsKTtcclxuICAgICAgICAgICAgaWYgKCFvYikge1xyXG4gICAgICAgICAgICAgICAgLy8g5aaC5p6c5LiN5a2Y5Zyo6KeC5a+f6ICF77yM5YiZ5Y+R6LW3aHR0cOivt+axguOAgnNoYXJlKCnmmK/kuLrkuobpgb/lhY3mr4/mrKHorqLpmIXpg73lj5HotbdodHRw6K+35rGC44CCXHJcbiAgICAgICAgICAgICAgICBvYiA9IHRoaXMuaHR0cC5nZXQodXJsLCB7IHJlc3BvbnNlVHlwZTogJ3RleHQnIH0pLnBpcGUoc2hhcmUoKSk7XHJcbiAgICAgICAgICAgICAgICAvLyDkv53lrZh1cuWSjOinguWvn+iAhVxyXG4gICAgICAgICAgICAgICAgVHBJY29uQ29tcG9uZW50LnVybE9ic2VydmFibGVNYXAuc2V0KHVybCxvYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g6K6i6ZiFaHR0cOivt+axgue7k+aenFxyXG4gICAgICAgICAgICBvYi5zdWJzY3JpYmUoXHJcbiAgICAgICAgICAgICAgICAoc3ZnVGV4dDogc3RyaW5nKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5bCGPHN2Zz7mjILlnKg8dHAtaWNvbj7kuItcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MID0gc3ZnVGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAvLyDliKDpmaR1cmzlkozop4Llr5/ogIVcclxuICAgICAgICAgICAgICAgICAgICBUcEljb25Db21wb25lbnQudXJsT2JzZXJ2YWJsZU1hcC5kZWxldGUodXJsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19