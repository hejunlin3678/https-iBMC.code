import { Component, ContentChild, ElementRef, EventEmitter, Input, Output } from "@angular/core";
import { TiBaseComponent } from '@cloud/tiny3';
/**
 * TpLeftmenu组件主要用于左侧导航，是基于Tiny3中的TiLeftmenu组件进行封装的，详细的数据接口说明可参照Tiny3中的TiLeftmenu。
 *
 * <example-url>../tinyplus3demo/#/leftmenu/leftmenu-all</example-url>
 */
export class TpLeftmenuComponent extends TiBaseComponent {
    constructor() {
        super(...arguments);
        /**
         * 激活菜单项改变时向外通知
         */
        this.activeChange = new EventEmitter();
    }
    /**
     * @ignore
     * 模板中使用
     */
    getHeaderTextClass() {
        return this.config && TpLeftmenuComponent.CHINESE_REG.test(this.config.serviceName) && this.config.serviceName.length > 8 ?
            'tp-leftmenu-title-long' : 'tp-leftmenu-title';
    }
    /**
     * @ignore
     * 激活菜单项改变时向外通知
     */
    onActiveChange(item) {
        this.activeChange.emit(item);
    }
    /**
     * @ignore
     * 触发点击事件
     */
    triggerClick(item) {
        if (typeof (item.click) === 'function') {
            item.click(item);
        }
    }
}
TpLeftmenuComponent.CHINESE_REG = new RegExp('[\u4e00-\u9fa5]'); // 汉字
TpLeftmenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-leftmenu',
                template: "<ti-leftmenu\r\n    [(active)]='active'\r\n    (activeChange)='onActiveChange($event)'\r\n    [(reloadState)]='config.reloadState'\r\n    [toggleable]='config.toggleable'\r\n    [(collapsed)]='config.collapsed'\r\n    (collapsedChange)='config.collapsedChangeFn($event)'>\r\n    <ti-leftmenu-head *ngIf=\"config.serviceName\">\r\n        <span class=\"{{getHeaderTextClass()}}\" [id]=\"appendId('service_name')\">{{config.serviceName}}</span>\r\n    </ti-leftmenu-head>\r\n    <ng-container *ngFor=\"let group of items; index as index\">\r\n        <ti-leftmenu-group *ngIf=\"group.isGroup && !group.hide\"\r\n                            [expanded]=\"group.expanded\">\r\n            <ti-leftmenu-group-item (click)=\"triggerClick(group)\">\r\n                <div [id]=\"appendId('group_' + index)\">{{group.label}}</div>\r\n            </ti-leftmenu-group-item>\r\n            <ng-container *ngFor=\"let level1 of group.children; index as i\">\r\n                <ti-leftmenu-level1 [item]=\"level1\" *ngIf=\"!level1.hide\">\r\n                    <ti-leftmenu-item (click)=\"triggerClick(level1)\">\r\n                        <div [id]=\"appendId('level1_' + index + '_' + i)\">{{level1.label}}</div>\r\n                    </ti-leftmenu-item>\r\n                    <ng-container *ngFor=\"let level2 of level1.children; index as j\">\r\n                        <ti-leftmenu-level2 [item]=\"level2\" (click)=\"triggerClick(level2)\" *ngIf=\"!level2.hide\">\r\n                            <div [id]=\"appendId('level2_' + index + '_' + i + '_' + j)\">{{level2.label}}</div>\r\n                        </ti-leftmenu-level2>\r\n                    </ng-container>\r\n                </ti-leftmenu-level1>\r\n            </ng-container>\r\n        </ti-leftmenu-group>\r\n\r\n        <ti-leftmenu-level1 *ngIf=\"!group.hide && !group.isGroup\" [item]=\"group\">\r\n            <ti-leftmenu-item (click)=\"triggerClick(group)\">\r\n                <div [id]=\"appendId('group_' + index)\">{{group.label}}</div>\r\n            </ti-leftmenu-item>\r\n            <ng-container *ngFor=\"let level2 of group.children; index as i\">\r\n                <ti-leftmenu-level2 [item]=\"level2\" (click)=\"triggerClick(level2)\"\r\n                                    *ngIf=\"!level2.hide\">\r\n                    <div [id]=\"appendId('level2_' + index + '_' + i)\">{{level2.label}}</div>\r\n                </ti-leftmenu-level2>\r\n            </ng-container>\r\n        </ti-leftmenu-level1>\r\n    </ng-container>\r\n    <ti-leftmenu-foot *ngIf='leftmenuFoot'>\r\n        <ng-container *ngTemplateOutlet=\"leftmenuFoot\">  </ng-container>\r\n    </ti-leftmenu-foot>\r\n</ti-leftmenu>",
                styles: [".tp-leftmenu-title,.tp-leftmenu-title-long{color:var(--ti-leftmenu-head-text-color);font-size:var(--ti-leftmenu-head-font-size);font-weight:400;line-height:20px;margin:0;word-wrap:break-word}.tp-leftmenu-title-long{font-size:var(--ti-common-font-size-3)}"]
            },] }
];
TpLeftmenuComponent.propDecorators = {
    config: [{ type: Input }],
    items: [{ type: Input }],
    active: [{ type: Input }],
    activeChange: [{ type: Output }],
    leftmenuFoot: [{ type: ContentChild, args: ['foot',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHBMZWZ0bWVudUNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL0BjbG91ZC90aW55cGx1czMvY29tcG9uZW50cy9sZWZ0bWVudS9UcExlZnRtZW51Q29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUsZUFBZSxFQUFrQixNQUFNLGNBQWMsQ0FBQztBQTJEL0Q7Ozs7R0FJRztBQU1ILE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxlQUFlO0lBTHhEOztRQXdCSTs7V0FFRztRQUNnQixpQkFBWSxHQUFpQyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBK0J2RixDQUFDO0lBekJHOzs7T0FHRztJQUNJLGtCQUFrQjtRQUNyQixPQUFPLElBQUksQ0FBQyxNQUFNLElBQUksbUJBQW1CLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUN2SCx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUM7SUFDdkQsQ0FBQztJQUNEOzs7T0FHRztJQUNILGNBQWMsQ0FBQyxJQUFvQjtRQUMvQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsWUFBWSxDQUFDLElBQW9CO1FBQzdCLElBQUksT0FBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxVQUFVLEVBQUU7WUFDbkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNwQjtJQUNMLENBQUM7O0FBbkR1QiwrQkFBVyxHQUFXLElBQUksTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxLQUFLOztZQU5yRixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLDhuRkFBOEI7O2FBRWpDOzs7cUJBTUksS0FBSztvQkFPTCxLQUFLO3FCQU1MLEtBQUs7MkJBSUwsTUFBTTsyQkFLTixZQUFZLFNBQUMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQ29udGVudENoaWxkLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBUaUJhc2VDb21wb25lbnQsIFRpTGVmdG1lbnVJdGVtIH0gZnJvbSAnQGNsb3VkL3RpbnkzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVHBMZWZ0bWVudUNvbmZpZyB7XHJcbiAgICAvKipcclxuICAgICAqIOiuvue9ruacjeWKoeWQjeensFxyXG4gICAgICovXHJcbiAgICBzZXJ2aWNlTmFtZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmjqfliLblj7PkvqflhoXlrrnljLrnmoTliLfmlrBcclxuICAgICAqXHJcbiAgICAgKiDms6jmhI/vvJrlvZPph43lpI3ngrnlh7vlvZPliY3mv4DmtLvoj5zljZXpobnml7bvvIzpnIDopoHliLfmlrDlj7PkvqflhoXlrrnljLrvvIzkuLrkuoblrp7njrDmraTlip/og73orr7nva7kuobor6XmjqXlj6PvvJtcclxuICAgICAqIOivpeaOpeWPo+aYr+WPjOWQkee7keWumueahO+8jOW9k+mHjeWkjeeCueWHu+W9k+WJjea/gOa0u+iPnOWNlemhueaXtu+8jHJlbG9hZFN0YXRl55qE5YC85Lya57uP5Y6GIHRydWUo5LiK5qyh55qE5YC8KSAtPiBmYWxzZSAtPiB0cnVlXHJcbiAgICAgKiDnmoTlj5jljJbov4fnqIvvvIzlvIDlj5HogIXnu5nmlLnmjqXlj6PkuI7lhbblj7PkvqfljLrln5/lrrnlmajkuIpuZ0lm5o6l5Y+j57uR5a6a55qE5piv5ZCM5LiA5Liq5Y+Y6YeP77yM5omA5LulbmdJZueahOWAvOS5n+S8mue7j+WOhuWQjOagt+eahOWPmOWMlu+8jFxyXG4gICAgICog5LuO6ICM5YGa5Yiw5Y+z5L6n5YaF5a655Yy655qE5Yi35paw44CCXHJcbiAgICAgKi9cclxuICAgIHJlbG9hZFN0YXRlOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmmK/lkKblvIDlkK/lt6bkvqfoj5zljZXpnaLmnb/lj6/mipjlj6Dlip/og73vvIzpu5jorqTlvIDlkK/jgIJcclxuICAgICAqL1xyXG4gICAgdG9nZ2xlYWJsZT86IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIOW3puS+p+iPnOWNlemdouadv+aYr+WQpuS4uuaUtui1t+eKtuaAge+8jOeUqOS6juiuvue9rumdouadv+aUtui1ty/lsZXlvIDnirbmgIHvvIzpu5jorqTlsZXlvIDjgIJcclxuICAgICAqL1xyXG4gICAgY29sbGFwc2VkPzogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICog5bem5L6n6I+c5Y2V6Z2i5p2/5pS26LW3L+WxleW8gOeKtuaAgeaUueWPmOaXtuWQkeWklumAmuefpVxyXG4gICAgICovXHJcbiAgICBjb2xsYXBzZWRDaGFuZ2VGbj86IChjb2xsYXBzZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIOWFgeiuuOacieWkmuS9meeahOWxnuaAp+Wtl+autVxyXG4gICAgICovXHJcbiAgICBbcHJvcE5hbWU6IHN0cmluZ106IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUcExlZnRtZW51SXRlbSBleHRlbmRzIFRpTGVmdG1lbnVJdGVtIHtcclxuICAgIC8qKlxyXG4gICAgICog6I+c5Y2V6aG55paH5pys5YaF5a65XHJcbiAgICAgKi9cclxuICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIOWIhue7hOaIluS4gOe6p+iPnOWNlemhueWPr+iuvue9ruivpeWxnuaAp1xyXG4gICAgICovXHJcbiAgICBjaGlsZHJlbj86IEFycmF5PFRwTGVmdG1lbnVJdGVtPjtcclxuICAgIC8qKlxyXG4gICAgICog5piv5ZCm6ZqQ6JeP6I+c5Y2V6aG5XHJcbiAgICAgKi9cclxuICAgIGhpZGU/OiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmmK/lkKbkuLrliIbnu4TpoblcclxuICAgICAqL1xyXG4gICAgaXNHcm91cD86IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIOWmguaenOaYr+WIhue7hOmhue+8jOaYr+WQpuWxleW8gOivpee7hFxyXG4gICAgICovXHJcbiAgICBleHBhbmRlZD86IGJvb2xlYW47XHJcbiAgICAvLyBjbGljazogKCkgPT4ge307IFRPRE86XHJcbiAgICAvLyBoeXBlcmxpbms6IHN0cmluZzsgVE9ETzpcclxufVxyXG5cclxuLyoqXHJcbiAqIFRwTGVmdG1lbnXnu4Tku7bkuLvopoHnlKjkuo7lt6bkvqflr7zoiKrvvIzmmK/ln7rkuo5UaW55M+S4reeahFRpTGVmdG1lbnXnu4Tku7bov5vooYzlsIHoo4XnmoTvvIzor6bnu4bnmoTmlbDmja7mjqXlj6Por7TmmI7lj6/lj4LnhadUaW55M+S4reeahFRpTGVmdG1lbnXjgIJcclxuICpcclxuICogPGV4YW1wbGUtdXJsPi4uL3RpbnlwbHVzM2RlbW8vIy9sZWZ0bWVudS9sZWZ0bWVudS1hbGw8L2V4YW1wbGUtdXJsPlxyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3RwLWxlZnRtZW51JyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9sZWZ0bWVudS5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL2xlZnRtZW51Lmxlc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgVHBMZWZ0bWVudUNvbXBvbmVudCBleHRlbmRzIFRpQmFzZUNvbXBvbmVudCB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDSElORVNFX1JFRzogUmVnRXhwID0gbmV3IFJlZ0V4cCgnW1xcdTRlMDAtXFx1OWZhNV0nKTsgLy8g5rGJ5a2XXHJcbiAgICAvKipcclxuICAgICAqIOW3puS+p+iPnOWNlemFjee9rumhuVxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBjb25maWc6IFRwTGVmdG1lbnVDb25maWc7XHJcbiAgICAvKipcclxuICAgICAqIOW3puS+p+iPnOWNleaVsOaNrlxyXG4gICAgICpcclxuICAgICAqIOWFtuS4reeahCBocmVmIOWxnuaApyDlnKh2MTAuMC4xIH4gdjEwLjEuM+eJiOacrOWtmOWcqFhTU+aUu+WHuyh1cmznsbvlnosp6aOO6Zmp77yMdjEwLjEuNCDniYjmnKzlgZrkuoblronlhajlpITnkIbvvIzlt7LkuI3lrZjlnKjlronlhajpl67popjvvIzlu7rorq7kuJrliqHlsL3lv6vljYfnuqfniYjmnKzjgIJcclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGl0ZW1zOiBBcnJheTxUcExlZnRtZW51SXRlbT47XHJcbiAgICAvKipcclxuICAgICAqIOiuvue9rua/gOa0u+iPnOWNlemhueOAgui/meS4quWAvOW6lOivpeaYryBUaUxlZnRtZW51TGV2ZWwxIOWSjCBUaUxlZnRtZW51TGV2ZWwyIOe7hOS7tueahCBpdGVtIOaOpeWPo+S8oOWFpeeahOWAvOeahOmbhuWQiOS4reeahOS4gOS4qihpdGVtKVxyXG4gICAgICpcclxuICAgICAqIOatpOaOpeWPo+aYr+WPjOWQkee7keWumueahO+8jOiuvue9ruaXtuS4reaLrOWPt+KAnFtd4oCd5ZKM5ZyG5ous5Y+34oCcKCnigJ3opoHlkIzml7bkvb/nlKhcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgYWN0aXZlOiBUcExlZnRtZW51SXRlbTtcclxuICAgIC8qKlxyXG4gICAgICog5r+A5rS76I+c5Y2V6aG55pS55Y+Y5pe25ZCR5aSW6YCa55+lXHJcbiAgICAgKi9cclxuICAgIEBPdXRwdXQoKSByZWFkb25seSBhY3RpdmVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxUcExlZnRtZW51SXRlbT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAvKipcclxuICAgICAqIEBpZ25vcmVcclxuICAgICAqIOW6lemDqOWFg+e0oFxyXG4gICAgICovXHJcbiAgICBAQ29udGVudENoaWxkKCdmb290JykgbGVmdG1lbnVGb290OiBFbGVtZW50UmVmO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKiDmqKHmnb/kuK3kvb/nlKhcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEhlYWRlclRleHRDbGFzcygpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZyAmJiBUcExlZnRtZW51Q29tcG9uZW50LkNISU5FU0VfUkVHLnRlc3QodGhpcy5jb25maWcuc2VydmljZU5hbWUpICYmIHRoaXMuY29uZmlnLnNlcnZpY2VOYW1lLmxlbmd0aCA+IDggP1xyXG4gICAgICAgICAgICAndHAtbGVmdG1lbnUtdGl0bGUtbG9uZycgOiAndHAtbGVmdG1lbnUtdGl0bGUnO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKiDmv4DmtLvoj5zljZXpobnmlLnlj5jml7blkJHlpJbpgJrnn6VcclxuICAgICAqL1xyXG4gICAgb25BY3RpdmVDaGFuZ2UoaXRlbTogVHBMZWZ0bWVudUl0ZW0pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmFjdGl2ZUNoYW5nZS5lbWl0KGl0ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZVxyXG4gICAgICog6Kem5Y+R54K55Ye75LqL5Lu2XHJcbiAgICAgKi9cclxuICAgIHRyaWdnZXJDbGljayhpdGVtOiBUcExlZnRtZW51SXRlbSk6IHZvaWQgeyAvLyBUT0RPOiDmmoLmnKrlvIDmlL5jbGlja+S6i+S7tlxyXG4gICAgICAgIGlmICh0eXBlb2YoaXRlbS5jbGljaykgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgaXRlbS5jbGljayhpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19