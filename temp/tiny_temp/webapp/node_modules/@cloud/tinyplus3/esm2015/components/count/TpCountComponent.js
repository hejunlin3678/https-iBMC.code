// tslint:disable-next-line: no-implicit-dependencies
import { Component, ElementRef, Input, Renderer2, TemplateRef, ViewChild } from '@angular/core';
// tslint:disable-next-line: no-implicit-dependencies
import { TiTipService } from '@cloud/tiny3';
import { TpCountTimeComponent } from './TpCountTimeComponent';
/**
 * 表格倒计时组件
 *
 * tp-countdown 组件升级版，countdown组件的接口和功能保留，添加计费模式和资源状态
 *
 * 10.0.1 新增
 *
 * <example-url>../tinyplus3demo/#/count/count-all</example-url>
 */
export class TpCountComponent extends TpCountTimeComponent {
    constructor(element, renderer2, tipService) {
        super(element, renderer2);
        this.element = element;
        this.renderer2 = renderer2;
        this.tipService = tipService;
        /**
         * 计费模式
         */
        this.type = 'period';
        /**
         * @ignore
         * tip 的内容
         */
        this.tipContext = [];
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.showTip()) {
            this.generateTipContent();
            this.addTip();
        }
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        // 倒计时tip提示内容跟 countDownCode和countDownTips有关
        // 此处是资源状态和倒计时整体添加tip
        if ((changes['countDownCode'] && !changes['countDownCode'].firstChange) ||
            (changes['countDownTips'] && !changes['countDownTips'].firstChange)) {
            // 按需正在使用阶段没有tip实例，处理按需正在使用变化成按需宽限期场景报错
            if (this.tipInstance) {
                this.tipInstance.destroy();
            }
            if (this.showTip()) {
                // 按需正在使用阶段到按需宽限期，模板的ng-if 条件改变导致stateTimeRef是否存在也改变
                // stateTimeRef无法立刻获取到
                setTimeout(() => {
                    this.addTip();
                }, 0);
            }
        }
    }
    /**
     * @ignore
     *
     */
    showState() {
        return !(this.countDownCode === 'hws_countdown_period_using' ||
            this.countDownCode === 'hws_countdown_period_toondemand' ||
            this.countDownCode === 'hws_countdown_ondemand_using');
    }
    addTip() {
        //  按需正在使用时因为显示内容和tip内容相同，所有不需要tip
        if (Array.isArray(this.tipContext) && this.tipContext.length > 0
            && this.countDownCode !== 'hws_countdown_ondemand_using' && this.stateTimeRef) {
            this.tipInstance = this.tipService.create(this.stateTimeRef.nativeElement, {
                trigger: 'mouse',
                maxWidth: this.tipMaxWidth,
                showFn: () => {
                    return {
                        content: this.tipContentTemplate
                    };
                }
            });
        }
    }
}
TpCountComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-count',
                template: "<tp-count-pattern [type]=\"type\"></tp-count-pattern>\r\n<!-- \u65E0\u8BBA\u6587\u672C\u662F\u5426\u6EA2\u51FA\uFF0C\u90FD\u9700\u8981tips\uFF0Ctip\u5185\u5BB9\u4E0D\u662F\u5143\u7D20\u7684\u6587\u672C-->\r\n<ng-container *ngIf=\"showTip()\">\r\n    <section class=\"tp-count-state-time tp-count-state-time-underline\" #stateTime [ngClass]=\"{'tp-count-warn': stateLevel === 'warn',\r\n     'tp-count-alarm' : stateLevel === 'alarm'}\">\r\n        <ng-container *ngIf=\"showState()\">\r\n            <tp-count-state  [countDownCode]=\"countDownCode\" [countDownInfos]=\"countDownInfos\" pattern=\"combine\"></tp-count-state>\r\n        </ng-container>\r\n        <tp-count-time [countDownCode]=\"countDownCode\" [countDownInfos]=\"countDownInfos\" pattern=\"combine\"></tp-count-time>\r\n    </section>\r\n</ng-container>\r\n<!-- \u6587\u672C\u6EA2\u51FA\u624D\u9700\u8981tip, \u4E14tip\u5185\u5BB9\u5C31\u662F\u5143\u7D20\u6587\u672C\uFF0C\u6240\u4EE5\u4F7F\u7528tiOverflow\uFF0C\u4E14\u4E0D\u9700\u8981\u4E0B\u5212\u7EBF -->\r\n<ng-container *ngIf=\"!showTip()\">\r\n    <section class=\"tp-count-state-time\" tiOverflow >\r\n        <ng-container *ngIf=\"showState()\">\r\n            <tp-count-state [countDownCode]=\"countDownCode\" [countDownInfos]=\"countDownInfos\" pattern=\"combine\"></tp-count-state>\r\n        </ng-container>\r\n        <tp-count-time [countDownCode]=\"countDownCode\" [countDownInfos]=\"countDownInfos\" pattern=\"combine\"></tp-count-time>\r\n    </section>\r\n</ng-container>\r\n<ng-template #tipContent>\r\n    <ng-container *ngFor=\"let item of tipContext\">{{item.title}} {{item.time| tpDate: 'dateTimeZone'}}<br></ng-container>\r\n</ng-template>\r\n",
                styles: [".ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.tp-count-warn{color:var(--ti-common-color-warn-text)}.tp-count-alarm{color:var(--ti-common-color-error-text)}.tp-count-state-time{display:inline-block;max-width:100%}.tp-count-state-time.tp-count-state-time-underline{border-bottom:1px dashed var(--ti-common-color-dash-line-normal);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}tp-count-state{display:inline}tp-count-pattern{display:block}"]
            },] }
];
TpCountComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: TiTipService }
];
TpCountComponent.propDecorators = {
    type: [{ type: Input }],
    stateTimeRef: [{ type: ViewChild, args: ['stateTime', { static: false },] }],
    countTimeCom: [{ type: ViewChild, args: [TpCountTimeComponent,] }],
    tipContentTemplate: [{ type: ViewChild, args: ['tipContent',] }]
};
//# sourceMappingURL=data:application/json;base64,