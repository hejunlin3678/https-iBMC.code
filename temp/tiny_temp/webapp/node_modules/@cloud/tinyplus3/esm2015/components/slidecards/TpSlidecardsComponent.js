import { Component, ContentChildren, ElementRef, EventEmitter, Input, NgZone, Output, QueryList, Renderer2, ViewChild
// tslint:disable-next-line: no-implicit-dependencies
 } from '@angular/core';
// tslint:disable-next-line: no-implicit-dependencies
import { TiBaseComponent } from '@cloud/tiny3';
// tslint:disable-next-line: no-implicit-dependencies
import { TpCardComponent } from '../card/TpCardModule';
/**
 * @ignore
 * 规范提出，云业务通用场景不会使用该组件，10.1.3起，在官网隐藏该组件。
 * 滚动卡片列表，功能与轮播图相似，可以显示多屏展示卡片的效果，并且还提供了增加、删除卡片功能。详情参考测试用例。
 *
 * <example-url>../tinyplus3demo/#/slidecards/slidecards-all</example-url>
 */
export class TpSlidecardsComponent extends TiBaseComponent {
    constructor(hostRef, renderer2, zone) {
        super(hostRef, renderer2);
        this.hostRef = hostRef;
        this.renderer2 = renderer2;
        this.zone = zone;
        /**
         * 当前选中卡片在数组中的下标
         */
        this.currentIndex = 0;
        /**
         * 当前页改变事件
         */
        this.pageChange = new EventEmitter();
        /**
         * @ignore
         * 当前页
         */
        this.currentPage = 1;
        /**
         * 卡片之间的距离，用于计算分页
         */
        this.cardSpan = 0;
        /**
         * @ignore
         * 卡片父元素的偏移距离，用于控制卡片左右滑动
         */
        this.left = '0px';
        /**
         * @ignore
         * 分页页码显示数据
         */
        this.pageList = [];
        /**
         * 每页卡片数
         */
        this.pageSize = 1;
        /**
         * @ignore
         * 分页总页数
         */
        this.totalPage = 1;
        /**
         * 总的卡片数量
         */
        this.totalCard = 0;
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngOnInit() {
        super.ngOnInit();
        // 一屏显示卡片的数目会随窗口大小而变化，所以监听窗口大小变化重新计算分页，
        this.zone.runOutsideAngular(() => {
            this.unlistenResize = this.renderer2.listen(window, 'resize', () => {
                if (this.canCalculatePaging()) {
                    this.calculatePaging();
                }
            });
        });
    }
    /**
     * 因为初始化要展示当前索引卡片，所以在初始化后先计算一次分页，然后显示currentIndex卡片
     * 分页的计算依赖视图可视区的宽度，视图加载完成后才能计算，
     * 分页计算后，会改变数据，所以用setTimeout。
     *  总卡片数及cardsComRef 长度， pageSize = 容器宽度/（卡片宽度 + 卡片间的距离）
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
        // 初始化时计算一次分页，然后把当前索引的卡片显示出来
        if (this.canCalculatePaging()) {
            setTimeout(() => {
                this.calculatePaging();
                this.showCurrentCard(this.currentIndex);
            }, 0);
        }
        this.listObserver = new MutationObserver((mutationRecords) => {
            this.calculatePaging();
        });
        // MutationObserver 对象的回调方法开始接收与给定选项匹配的DOM变化的通知
        // 只需关注卡片增删和lef偏移值，所以只设置childList、attributes
        this.listObserver.observe(this.listEleRef.nativeElement, {
            childList: true,
            attributes: true,
            attributeFilter: ['style'] // 要监视的特定属性名称的数组
        });
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        // currentIndex 改变跳转到对应页显示当前索引卡片
        const currentIndexChange = changes['currentIndex'];
        if (!currentIndexChange.firstChange) {
            this.showCurrentCard(currentIndexChange.currentValue);
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        // 组件销毁时，注销窗口resize事件监听
        if (this.unlistenResize) {
            this.unlistenResize();
        }
        if (this.listObserver) {
            this.listObserver.disconnect();
        }
    }
    /**
     * 是否能进行分页计算
     * @returns boolean
     */
    canCalculatePaging() {
        return this.listWrapperEleRef && this.cardComRefs && this.cardComRefs.length > 0;
    }
    /**
     * 先计算分页每页的卡片数pageSize，再计算总页数totalPage
     */
    calculatePaging() {
        this.calculatePageSize();
        this.calculateTotalPage();
    }
    /**
     * 计算分页总页数
     */
    calculateTotalPage() {
        this.totalCard = this.cardComRefs.length;
        // 计算共有多少页
        this.totalPage = Math.ceil(this.totalCard / this.pageSize);
        // 生成分页器显示数组
        this.generatePagesArray();
        // 重新计算总页面后，需要处理当前页大于总页数的场景
        if (this.currentPage > this.totalPage) {
            this.goPage(this.totalPage);
        }
    }
    /**
     * 计算一次显示的卡片数
     */
    calculatePageSize() {
        // getComputedStyle 获取的宽度，在ie11下不包含padding和border,所以使用getBoundingClientRect（）
        // 在初始化时，totalPage还没有计算出来，左右翻页按钮没有显示，但容器元素的可用宽度应该减去左右按钮的宽度之和30+30=60
        const containerWidth = this.listWrapperEleRef.nativeElement.getBoundingClientRect().width - 60;
        this.cardWidth = this.cardComRefs.first.nativeElement.getBoundingClientRect().width;
        const cardStyle = getComputedStyle(this.cardComRefs.first.nativeElement);
        this.cardSpan = parseFloat(cardStyle.marginRight);
        // 当容器宽度小于card宽度时,需处理，避免分页不能正常生成
        this.pageSize = containerWidth <= (this.cardWidth + this.cardSpan) ? 1 : Math.floor(containerWidth / (this.cardWidth + this.cardSpan));
    }
    /**
     * 生成分页器显示的数组
     */
    generatePagesArray() {
        this.pageList = [];
        // 判断总页数如果小于等于分页的长度，若小于则直接显示
        if (this.totalPage <= 8) {
            for (let i = 1; i <= this.totalPage; i++) {
                this.pageList.push(i);
            }
        }
        else if (this.currentPage <= 3) {
            // 右边...
            for (let i = 1; i <= 5; i++) {
                this.pageList.push(i);
            }
            this.pageList.push('...');
            this.pageList.push(this.totalPage);
        }
        else if (this.currentPage >= this.totalPage - 3) {
            // 左边 ...
            this.pageList.push(1);
            this.pageList.push('...');
            for (let i = 4; i >= 1; i--) {
                this.pageList.push(this.totalPage - i);
            }
            this.pageList.push(this.totalPage);
        }
        else {
            // 最后一种情况，两边都有...
            this.pageList.push(1);
            this.pageList.push('...');
            for (let i = 2; i >= 1; i--) {
                this.pageList.push(this.currentPage - i);
            }
            this.pageList.push(this.currentPage);
            for (let i = 1; i < 2; i++) {
                this.pageList.push(this.currentPage + i);
            }
            this.pageList.push('...');
            this.pageList.push(this.totalPage);
        }
    }
    /**
     * 指定页码翻页
     * @param pageNum 跳转到的页码
     * @ignore
     */
    goPage(pageNum) {
        // ... 时，不做处理
        if (typeof pageNum === 'string') {
            return;
        }
        this.currentPage = pageNum;
        // 偏移量=(当前页-1)*每页的卡片数量*（卡片宽度 + 卡片的Margin)
        this.left = -(pageNum - 1) * this.pageSize * (this.cardWidth + this.cardSpan) + 'px';
        // 触发pageChange事件
        const data = {
            currentPage: pageNum,
            pageSize: this.pageSize,
            totalPage: this.totalPage
        };
        this.pageChange.emit(data);
    }
    /**
     * 向前跳转一页
     * @ignore
     */
    goPrev() {
        if (this.currentPage > 1) {
            this.goPage(this.currentPage - 1);
        }
    }
    /**
     * 向后跳转一页
     * @ignore
     */
    goNext() {
        if (this.currentPage < this.totalPage) {
            this.goPage(this.currentPage + 1);
        }
    }
    /**
     * 展示指定索引的卡片，在初始化及currentIndex 改变时，如果指定索引不在当前页，跳转到能显示c索引对应卡片的页码
     */
    showCurrentCard(index) {
        // 如果索引和卡片的数目不匹配，不做处理。
        if (index < 0 && index > (this.totalCard - 1)) {
            return;
        }
        // 当前一屏卡片的最大最小索引
        const maxIndex = this.currentPage * this.pageSize - 1;
        const minIndex = this.currentPage > 0 ? ((this.currentPage - 1) * this.pageSize - 1) : 0;
        // 当前索卡片是否在当前页面
        if (index < minIndex || index > maxIndex) {
            const targetPage = Math.ceil((index + 1) / this.pageSize);
            this.goPage(targetPage);
        }
    }
}
TpSlidecardsComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-slidecards',
                template: "<!-- \u9875\u7801\u5BFC\u822A -->\r\n<ul class=\"tp-slidecards-pager\" [id]=\"appendId('list')\">\r\n  <ng-container  *ngIf=\"totalPage > 1\">\r\n    <li class=\"tp-slidecards-pager-item\"\r\n        *ngFor=\"let page of pageList; index as index\"\r\n        (click)=\"goPage(page)\"\r\n        [id]=\"appendId('page_' + index)\"\r\n        [ngClass]=\"{'tp-slidecards-pager-item-active': currentPage === page,\r\n                    'tp-slidecards-pager-ellipsis': page === '...'}\">\r\n        <span>{{page}}</span>\r\n     </li>\r\n  </ng-container>\r\n</ul>\r\n<!-- \u5185\u5BB9\u533A -->\r\n<div class=\"tp-slidecards-content\">\r\n  <!-- \u5DE6\u6309\u94AE -->\r\n  <div\r\n    class=\"tp-slidecards-button-prev\"\r\n    *ngIf=\"totalPage > 1\"\r\n    (click)=\"goPrev()\"\r\n    [id]=\"appendId('prev')\"\r\n    [ngClass]=\"{'tp-slidecards-button-disabled': currentPage <= 1}\"\r\n  >\r\n    <tp-icon local name=\"cloud-action-prev\"></tp-icon>\r\n  </div>\r\n  <!-- \u5217\u8868 -->\r\n<div #listWrapper class=\"tp-slidecards-wrapper\">\r\n    <div #list class=\"tp-slidecards-list \" [ngStyle]=\"{'left': left}\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n  <!-- \u53F3\u6309\u94AE -->\r\n  <div\r\n    class=\"tp-slidecards-button-next\"\r\n    *ngIf=\"totalPage > 1\"\r\n    [ngClass]=\"{'tp-slidecards-button-disabled': currentPage >= totalPage}\"\r\n    (click)=\"goNext()\"\r\n    [id]=\"appendId('next')\"\r\n  >\r\n    <tp-icon local name=\"cloud-action-next\"></tp-icon>\r\n  </div>\r\n</div>\r\n",
                styles: [".ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}::ng-deep :root{--tp-page-turning-icon-height:24px;--tp-page-turning-width:22px;--tp-slidecards-list-width:9999999px;--tp-slidecards-pager-item-width:20px;--tp-slidecars-pager-item-height:24px}:host{display:block}.tp-slidecards-pager{height:var(--tp-slidecars-pager-item-height);padding-bottom:var(--ti-common-space-10);text-align:center;width:100%}.tp-slidecards-pager-item{border-radius:var(--ti-common-border-radius-normal);color:var(--ti-common-color-text-secondary);cursor:pointer;display:inline-block;height:var(--tp-slidecars-pager-item-height);line-height:var(--tp-slidecars-pager-item-height);margin-left:var(--ti-common-space-base);width:var(--tp-slidecards-pager-item-width)}.tp-slidecards-pager-ellipsis{cursor:default}.tp-slidecards-pager-item:not(.tp-slidecards-pager-ellipsis):hover{background-color:var(--ti-common-color-bg-light-normal);color:var(--ti-common-color-text-highlight)}.tp-slidecards-pager-item.tp-slidecards-pager-item-active{background-color:var(--ti-common-color-bg-light-normal);color:var(--ti-common-color-text-primary)}.tp-slidecards-pager-item.tp-slidecards-pager-item-active:hover,.tp-slidecards-pager-item:not(.tp-slidecards-pager-ellipsis):active{background-color:var(--ti-common-color-bg-emphasize);color:var(--ti-common-color-text-white)}.tp-slidecards-content{-moz-align-items:stretch;-moz-flex-direction:row;-moz-justify-content:flex-start;-ms-align-items:stretch;-ms-justify-content:flex-start;align-items:stretch;display:flex;flex-direction:row;justify-content:flex-start}.tp-slidecards-button-next,.tp-slidecards-button-prev{-moz-align-items:center;-moz-flex-direction:row;-moz-justify-content:center;-ms-align-items:center;-ms-justify-content:center;align-items:center;cursor:pointer;display:flex;flex-direction:row;font-size:var(--ti-common-font-size-1);justify-content:center;width:var(--tp-page-turning-width)}.tp-slidecards-button-next tp-icon,.tp-slidecards-button-prev tp-icon{color:var(--ti-common-color-icon-normal);display:inline-block;height:var(--tp-page-turning-icon-height);line-height:var(--tp-page-turning-icon-height);width:var(--tp-page-turning-width)}.tp-slidecards-button-next:not(.tp-slidecards-button-disabled):hover,.tp-slidecards-button-prev:not(.tp-slidecards-button-disabled):hover{background-color:var(--ti-common-color-bg-light-normal)}.tp-slidecards-button-next:not(.tp-slidecards-button-disabled):hover tp-icon,.tp-slidecards-button-prev:not(.tp-slidecards-button-disabled):hover tp-icon{color:var(--ti-common-color-text-highlight)}.tp-slidecards-button-next.tp-slidecards-button-disabled,.tp-slidecards-button-prev.tp-slidecards-button-disabled{cursor:not-allowed}.tp-slidecards-button-next.tp-slidecards-button-disabled tp-icon,.tp-slidecards-button-prev.tp-slidecards-button-disabled tp-icon{color:var(--ti-common-color-icon-disabled)}.tp-slidecards-button-prev{margin-right:var(--ti-common-space-2x)}.tp-slidecards-button-next{margin-left:var(--ti-common-space-2x)}.tp-slidecards-wrapper{flex:1;height:100%;overflow:hidden;position:relative}.tp-slidecards-list{display:flex;flex-wrap:nowrap;overflow-y:hidden;position:relative;transition:left 1s;width:var(--tp-slidecards-list-width)}"]
            },] }
];
TpSlidecardsComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone }
];
TpSlidecardsComponent.propDecorators = {
    currentIndex: [{ type: Input }],
    pageChange: [{ type: Output }],
    listWrapperEleRef: [{ type: ViewChild, args: ['listWrapper',] }],
    listEleRef: [{ type: ViewChild, args: ['list',] }],
    cardComRefs: [{ type: ContentChildren, args: [TpCardComponent, { descendants: false },] }]
};
//# sourceMappingURL=data:application/json;base64,