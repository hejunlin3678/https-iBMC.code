import { Component, ElementRef, EventEmitter, Input, Output, Renderer2, ViewChild } from '@angular/core';
import { TiLocale, TiFormComponent, Util, TiDominatorComponent, TiDropsearchComponent, TiButtongroupComponent } from '@cloud/tiny3';
/**
 * @ignore
 * 规范提出，云业务通用场景不会使用该组件，10.1.3起，在官网隐藏该组件。
 *
 * regionselect组件提供省、市、县三级区域的选择
 *
 * <example-url>../tinyplus3demo/#/regionselect/regionselect-all</example-url>
 */
export class TpRegionselectComponent extends TiFormComponent {
    constructor(hostRef, renderer) {
        super(hostRef, renderer);
        this.hostRef = hostRef;
        this.renderer = renderer;
        /**
         * 无数据时组件下展显示，需服务自行配置
         */
        this.noDataText = '...';
        /**
         * 是否支持搜索
         */
        this.searchable = false;
        /**
         * 区域点击选择之后触发该事件
         */
        this.change = new EventEmitter();
        /**
         * @ignore
         */
        this.labelKey = 'label';
        /**
         * @ignore
         */
        this.options = []; // 下拉实际数据,默认空数组
        this.regionArr = [];
        this.isNotLastOne = true; // 标志量 是否为最后一级
        this.classificationLevel = 0; // 当前正在选择区域项的等级，省为0，市为1，区为2
        this.currentClassificationsLength = 0; // 当前已选择区域项的等级，省为0，市为1，区为2
        this.cfRegionSelectSeparativeSign = '-';
        this.oldSearchable = undefined;
    }
    /**
     * @ignore
     */
    writeValue(val) {
        if (!val) {
            return;
        }
        else {
            this.model = val;
        }
        this.initSelectedData();
    }
    // tslint:disable-next-line:use-life-cycle-interface
    ngOnInit() {
        super.ngOnInit();
        this.classifications = [
            {
                id: 'province',
                text: TiLocale.getLocaleWords().tpRegionselect.regionSelect_province_label
            }, {
                id: 'city',
                text: TiLocale.getLocaleWords().tpRegionselect.regionSelect_city_label
            }, {
                id: 'country',
                text: TiLocale.getLocaleWords().tpRegionselect.regionSelect_county_label
            }
        ];
        this.model = Util.isUndefined(this.model) ? {} : this.model;
        this.hasadjustWidth = false;
        this.options = this.regionselectOption;
        this.getBtnItems();
        this.changePlaceholder();
        this.changeBtnRight();
        this.changeSelectedData();
    }
    // tslint:disable-next-line:use-life-cycle-interface
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.setFocusableElems(this.TiDominatorCom.getFocusableElems());
    }
    // tslint:disable-next-line:use-life-cycle-interface
    ngAfterViewChecked() {
        super.ngAfterViewChecked();
        if (this.searchable !== this.oldSearchable) {
            this.oldSearchable = this.searchable;
            if (this.searchable) {
                this.setFocusableElems(this.TiDominatorCom.getFocusableElems()
                    .concat(this.dropCom.getFocusableElems()));
            }
            else {
                this.setFocusableElems(this.TiDominatorCom.getFocusableElems());
            }
        }
    }
    /**
     * @ignore
     */
    onMousedownFn(event) {
        event.preventDefault(); // 防止按钮聚焦
        event.stopPropagation(); // 阻止事件冒泡到document
    }
    /**
     * @ignore
     */
    onBlur() {
        this.dropCom.hideWithoutFocus();
        this.dropshow = false;
    }
    /**
     * @ignore
     * 点击关闭或隐藏下拉面板
     */
    onClickFn(event) {
        if (this.dropCom.isShow) {
            this.dropCom.hide();
            this.dropshow = false;
        }
        else {
            this.dropCom.show();
            this.dropshow = true;
            if (!this.hasadjustWidth) {
                const btns = document.querySelectorAll('.ti3-btn-item');
                const extraWidth = this.getExtraWidth();
                const width = extraWidth / btns.length;
                btns.forEach((btn) => {
                    const oriWidth = btn.offsetWidth;
                    this.renderer.setStyle(btn, 'width', oriWidth + width + 'px');
                });
                this.hasadjustWidth = true;
            }
        }
    }
    /**
     * @ignore
     * 选择数据之后触发事件
     */
    onSelect(option) {
        this.onSelectFn(option);
        this.change.emit(option);
        const event = window.event;
    }
    onSelectFn(selectedRegion) {
        const currentBtn = this.btnItems[this.classificationLevel]; // 当前准备选择的按钮等级
        currentBtn.selectedText = selectedRegion.label; // 等级名称获取
        // 判断选择项是否是曾经已选择项
        const isChosenOption = this.btnItems.some((btnItem) => {
            return btnItem.selectedId === selectedRegion.id;
        });
        if (!isChosenOption) {
            this.currentClassificationsLength = this.btnItems.findIndex((btnItem) => btnItem.id === this.btnSelected.id); // 获取当前已选择的级别（0、1、2）
            this.btnItems.forEach((item, index) => {
                if (index > this.currentClassificationsLength) {
                    item.selectedText = item.text;
                    item.originId = '';
                    item.selectedId = '';
                }
            });
        }
        this.btnItems[this.classificationLevel].selectedId = selectedRegion.id;
        this.changeSelectedData();
        this.isNotLastOne = this.classificationLevel < this.btnItems.length - 1;
        if (this.isNotLastOne) {
            this.classificationLevel++;
            this.currentClassificationsLength++;
            this.btnItems[this.classificationLevel].originId = this.btnItems[this.classificationLevel].originId || selectedRegion.id;
            this.handleOriginSuggestions();
            this.changeDropdownSuggestions();
            /**
             * 1、当子选项只有一项，且子选项id与当前项id相同，证明为同一区域级别
             * 2、同一区域级别情况下，如果子选项不是最后一级，证明为直辖市，需要自动跳过子选项的选择
             * 3、同一区域级别情况下，如果子选项是最后一级，证明为直辖县，则正常显示
             */
            if (this.originSuggestions.length === 1 &&
                (this.originSuggestions[0].id === selectedRegion.id
                    && this.classificationLevel < this.btnItems.length - 1)) {
                this.btnItems[this.classificationLevel].noDataDisable = true;
                this.onSelectFn(this.originSuggestions[0]);
            }
            else {
                this.btnItems[this.classificationLevel].noDataDisable = false;
                this.btnSelected = this.btnItems[this.classificationLevel];
                this.btnChangeFn();
            }
        }
        else {
            // 点击最低级别地区之后，面板会收起
            this.dropshow = false;
        }
        this.changePlaceholder();
        this.changeBtnRight();
    }
    // 当选择区域后，会更改selectedData数据
    changeSelectedData() {
        const selectedTextArr = [];
        this.btnItems.forEach((item, index) => {
            const hasChosen = item.selectedText !== item.text;
            if (hasChosen) {
                if (index === this.classificationLevel) {
                    this.model[item.id] = {
                        id: item.selectedId,
                        label: item.selectedText
                    };
                }
                if (item.selectedText && !item.noDataDisable) {
                    selectedTextArr.push(item.selectedText);
                }
                this.model.id = item.selectedId;
                this.model.level = index;
            }
            else {
                this.model[item.id] = {};
            }
        });
        this.model.text = selectedTextArr.join(this.cfRegionSelectSeparativeSign);
        // 改变model地址触发modelchange事件发生
        this.model = Object.assign({}, this.model);
    }
    // 获取按钮配置项
    getBtnItems() {
        this.btnItems = this.classifications.map((classification) => {
            classification.selectedText = classification.text;
            return classification;
        });
        this.btnSelected = this.btnItems[0];
    }
    // 根据selected初始配置,逻辑处理
    initSelectedData() {
        if ((this.model && !this.model.id) || !this.regionselectOption || !this.regionselectOption.length) {
            return;
        }
        const regionIdArr = this.getRegionIdArr();
        if (regionIdArr.length) {
            this.getBtnItems();
            this.btnChangeFn();
            for (const item of regionIdArr) {
                this.onSelectFn(item);
            }
        }
    }
    // tslint:disable-next-line:typedef
    getRegionIdArr() {
        this.getSelectedOption(this.regionselectOption);
        return this.regionArr;
    }
    // 根据selectedId 获取已选择数据详情
    getSelectedOption(items) {
        this.hasFoundId = false;
        this.regionArr = [];
        // tslint:disable-next-line:prefer-for-of
        for (let i = 0; i < items.length; i++) {
            if (items[i].id === this.model.id) {
                this.hasFoundId = true;
                const nextLevel = items[i].nextLevel;
                if (nextLevel && nextLevel.length && nextLevel[0].id === items[i].id) {
                    this.isSpecialZone = true;
                }
                if (this.isSpecialZone && !items[i].nextLevel[0].nextLevel) { // 直辖县
                    this.regionArr.unshift({
                        id: items[i].id,
                        label: items[i].label
                    });
                }
                this.regionArr.unshift({
                    id: items[i].id,
                    label: items[i].label
                });
                break;
            }
            if (items[i].nextLevel && items[i].nextLevel.length) {
                this.getSelectedOption(items[i].nextLevel);
                if (this.hasFoundId) {
                    this.regionArr.unshift({
                        id: items[i].id,
                        label: items[i].label
                    });
                    break;
                }
            }
        }
    }
    /**
     * @ignore
     */
    btnChangeFn() {
        const selectedBtn = this.btnItems.find((item) => item.id === this.btnSelected.id);
        this.classificationLevel = this.btnItems.findIndex((item) => item === selectedBtn);
        this.isNotLastOne = this.classificationLevel < this.btnItems.length - 1;
        this.handleOriginSuggestions();
        this.changeDropdownSuggestions();
        if (this.model && this.model[selectedBtn.id]) {
            const index = this.options.findIndex((item) => item.id === this.model[selectedBtn.id].id);
            this.currentmodel = this.options[index];
        }
    }
    findIndex() {
        return this.options.findIndex((item) => item.id === this.model.id);
    }
    handleOriginSuggestions() {
        let dropdownSuggestions = this.regionselectOption;
        this.originSuggestions = [];
        this.btnItems.forEach((item, index) => {
            if (index > this.classificationLevel) {
                return;
            }
            const currentData = dropdownSuggestions.find((dropdown) => {
                return dropdown.id === item.originId;
            });
            if (currentData && currentData.nextLevel && currentData.nextLevel.length) {
                dropdownSuggestions = currentData.nextLevel;
            }
        });
        if (!dropdownSuggestions) {
            return;
        }
        // 根据id从小到大进行排序
        dropdownSuggestions = dropdownSuggestions.sort((a, b) => {
            return a.id - b.id;
        });
        dropdownSuggestions.forEach((item1) => {
            this.originSuggestions.push({
                id: item1.id,
                label: item1.label,
                nextLevel: item1.nextLevel
            });
        });
    }
    // 根据originId从原始数据中第一级往下寻找
    changeDropdownSuggestions() {
        this.options = this.originSuggestions;
    }
    // 更改选择区域显示文本
    changePlaceholder() {
        let showText = '';
        this.btnItems.forEach((item, index) => {
            if (item.noDataDisable) {
                return;
            }
            const text = item.selectedText + ' ';
            if (index === 0) {
                showText += text;
            }
            else {
                // tslint:disable-next-line:prefer-template
                showText += this.cfRegionSelectSeparativeSign + ' ' + text;
            }
        });
        this.showText = showText;
    }
    // 判断按钮组disable权限
    changeBtnRight() {
        this.btnItems.map((item, index) => {
            item.disabled = (index > this.currentClassificationsLength) || item.noDataDisable;
            return item;
        });
    }
    /**
     * @ignore
     * 判断是否溢出并获取超出宽度
     */
    getExtraWidth() {
        const wrapperWidth = this.wrapperEle.nativeElement.offsetWidth;
        const buttonsWidth = this.buttongroupEle.nativeElement.offsetWidth;
        const isOverflow = wrapperWidth > buttonsWidth;
        if (!isOverflow) {
            return 0;
        }
        else {
            const extraWidth = wrapperWidth - buttonsWidth;
            return extraWidth;
        }
    }
}
TpRegionselectComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-regionselect',
                template: "\r\n    <ti-dominator class='tp-regionselect-dominator' #wrapper (click)='onClickFn($event)'\r\n    [dropshow]='dropshow'\r\n    [id]=\"appendId('regionselect_dominator')\">\r\n        <ng-template #placeholder>\r\n            <span [id]=\"appendId('text')\">{{showText}}</span>\r\n        </ng-template>\r\n    </ti-dominator>\r\n    <ti-dropsearch [searchable]=\"searchable\"\r\n        [labelKey]='labelKey' [options]='options'\r\n        [noDataText]='noDataText'\r\n        panelWidth='auto'\r\n        [(ngModel)]=\"currentmodel\"\r\n        [dominatorElem]='TiDominatorCom.nativeElement'\r\n        (select)='onSelect($event)'\r\n        [id]=\"appendId('dropsearch')\">\r\n        <div #buttongroup custom style='display: inline-block;' (mousedown)=\"onMousedownFn($event)\">\r\n            <ti-button-group [items]='btnItems' [(ngModel)]='btnSelected' (ngModelChange)=\"btnChangeFn()\" [id]=\"appendId('button_group')\"></ti-button-group>\r\n        </div>\r\n        <ng-template #item let-item let-i=index>\r\n               <ng-container *ngTemplateOutlet='itemTemplate; context: {$implicit: item, index: i}'></ng-container>\r\n        </ng-template>\r\n</ti-dropsearch>\r\n\r\n<ng-template #itemTemplate let-item let-i=index>\r\n    {{item[labelKey]}}\r\n</ng-template>\r\n\r\n",
                providers: [TiFormComponent.getValueAccessor(TpRegionselectComponent)],
                host: {
                    '(blur)': 'onBlur()'
                },
                styles: [".ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.tp-component-container-border,:host{-ms-box-sizing:border-box;border:1px solid;border-radius:var(--ti-common-border-radius-normal);box-sizing:border-box;display:inline-block}.tp-component-container-border:not([disabled]),:host:not([disabled]){background-color:var(--ti-input-bg-color);border-color:var(--ti-common-color-line-normal)}.tp-component-container-border:not([disabled]):hover,:host:not([disabled]):hover{border-color:var(--ti-common-color-line-hover)}.tp-component-container-border:not([disabled])[tiFocused],:host:not([disabled])[tiFocused]{border-color:var(--ti-common-color-line-active)}.tp-component-container-border[disabled],:host[disabled]{background-color:var(--ti-common-color-bg-disabled);border-color:var(--ti-common-color-line-disabled);cursor:not-allowed!important}:host{width:300px}"]
            },] }
];
TpRegionselectComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
TpRegionselectComponent.propDecorators = {
    regionselectOption: [{ type: Input }],
    noDataText: [{ type: Input }],
    searchable: [{ type: Input }],
    change: [{ type: Output }],
    TiDominatorCom: [{ type: ViewChild, args: [TiDominatorComponent, { static: true },] }],
    dropCom: [{ type: ViewChild, args: [TiDropsearchComponent, { static: true },] }],
    btnGroupCom: [{ type: ViewChild, args: [TiButtongroupComponent, { static: true },] }],
    wrapperEle: [{ type: ViewChild, args: ['wrapper', { static: false },] }],
    buttongroupEle: [{ type: ViewChild, args: ['buttongroup', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,