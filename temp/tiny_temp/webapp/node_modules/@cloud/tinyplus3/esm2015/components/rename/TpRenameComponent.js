import { Component, ContentChild, ElementRef, EventEmitter, Input, NgZone, Output, Renderer2, TemplateRef } from '@angular/core';
import { TiBaseComponent, TiLocale, TiPopupService, TiPosition, TiValidators } from '@cloud/tiny3';
import { TpRenameModalContainerComponent } from './TpRenameModalContainerComponent';
import { TpRenameModalComponent } from './TpRenameModalComponent';
/**
 * 名称编辑组件
 *
 * <example-url>../tinyplus3demo/#/rename/rename-all</example-url>
 */
export class TpRenameComponent extends TiBaseComponent {
    constructor(hostRef, renderer2, tiPopup, zone) {
        super(hostRef, renderer2);
        this.hostRef = hostRef;
        this.renderer2 = renderer2;
        this.tiPopup = tiPopup;
        this.zone = zone;
        /**
         * 标识该行数据是否为new
         */
        this.isNew = false;
        /**
         * 组件是否可用
         */
        this.disabled = false;
        /**
         * @ignore
         * 铅笔图标的tip提示信息方位，10.0.1版本起该接口隐藏
         */
        this.iconTipPosition = 'top';
        /**
         * 10.0.1新增
         *
         * 图标的title属性，用于说明图标的作用
         */
        this.iconTitle = TiLocale.getLocaleWords().tpRename.tip;
        /**
         * 10.0.3新增
         *
         * 是否通过组件显示被编辑的内容，组件以文本的形式显示，默认显示
         */
        this.showValue = true;
        /**
         * 确认/OK按钮点击事件，参数：输入框的内容
         */
        this.confirm = new EventEmitter();
        /**
         * 确认/OK按钮点击事件，为开发者提供关闭弹窗的时机
         *
         * 参数：弹窗实例[TpRenameModalRef]{@link ../interfaces/TpRenameModalRef.html}
         */
        this.beforeClose = new EventEmitter();
        this.hostSpace = 5; // 弹窗距rename的距离
        this.DeterminePosition = (layout) => {
            if (layout.avilableLayout.bottom >= layout.targetLayout.height + this.hostSpace) {
                return 'bottom-left';
            }
            else {
                return 'top-left';
            }
        };
        this.findClosestTD = (ele) => {
            if (ele.nodeName === 'HTML') {
                return undefined;
            }
            else if (ele.parentNode.nodeName === 'TD') {
                return ele.parentNode;
            }
            else {
                return this.findClosestTD(ele.parentNode);
            }
        };
        this.defaultModalHeader = TiLocale.getLocaleWords().tpRename.modalHeader;
    }
    ngOnInit() {
        super.ngOnInit();
        this.iconTitle = this.iconTip ? '' : this.iconTitle;
    }
    /**
     * @ignore
     */
    onClick() {
        if (this.disabled) {
            return;
        }
        // 初始create一次即可，多次点击编辑图标避免重复生成的逻辑，在popupService内部已有处理
        if (!this.renameModal) {
            this.renameModal = this.tiPopup.create(TpRenameModalContainerComponent);
        }
        // open modal
        this.TpRenameModalComponentRef = this.renameModal.show({
            content: this.customModal || TpRenameModalComponent,
            contentContext: this.customModal ?
                {
                    renameModal: this.renameModal,
                    value: this.value
                } : {
                value: this.value,
                id: this.id + '_renameModal',
                modalHeader: this.modalHeader || this.defaultModalHeader,
                close: (form) => {
                    // 因为非常明确该组件只有一个表单元素 校验结果定义为error而不是errors，直接通过input获取校验失败的元素
                    const error = TiValidators.check(form);
                    if (error) {
                        this.TpRenameModalComponentRef.location.nativeElement.querySelector('input')
                            .focus();
                    }
                    else {
                        this.beforeClose.emit(this.renameModal);
                        this.confirm.emit(this.TpRenameModalComponentRef.location.nativeElement.querySelector('input').value);
                        // tslint:disable-next-line: no-unused-expression
                        this.destroyRenameModal();
                    }
                },
                dismiss: () => {
                    this.destroyRenameModal();
                }
            },
            container: 'body'
        });
        const modal = this.TpRenameModalComponentRef.location.nativeElement;
        this.renderer2.setStyle(modal, 'left', '-9999px');
        this.renderer2.setStyle(modal, 'top', '-9999px');
        const td = this.findClosestTD(this.hostRef.nativeElement);
        TiPosition.setPosition({
            targetEle: modal,
            hostEle: this.hostRef.nativeElement,
            hostEleX: td || this.hostRef.nativeElement,
            hOffset: td ? 10 : 0,
            hostSpace: this.hostSpace,
            fixMaxHeight: true,
            determinPositionFn: this.DeterminePosition
        });
        this.addDocumentClickEvent();
    }
    addDocumentClickEvent() {
        this.zone.runOutsideAngular(() => {
            this.unlistenDocumentClick = this.renderer2.listen(document, 'click', (event) => {
                // 编辑图标被点击，触发其绑定的click事件，这里不做处理。
                if (this.hostRef.nativeElement.contains(event.target)) {
                    return;
                }
                if (this.TpRenameModalComponentRef) {
                    const tpRenameModalHostElement = this.TpRenameModalComponentRef.location.nativeElement;
                    // renameModal之外的元素被点击，销毁renameModal
                    if (!(tpRenameModalHostElement && tpRenameModalHostElement.contains(event.target))) {
                        this.zone.run(() => {
                            this.destroyRenameModal();
                        });
                    }
                }
            });
        });
    }
    // 销毁弹窗、取消document的click事件
    destroyRenameModal() {
        // tslint:disable-next-line: no-unused-expression
        this.renameModal && this.renameModal.hide();
        if (this.unlistenDocumentClick) {
            this.unlistenDocumentClick();
        }
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngOnDestroy() {
        super.ngOnDestroy();
        this.destroyRenameModal();
    }
}
TpRenameComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-rename',
                template: "<ti-cell-text [id]=\"appendId('value')\" *ngIf=\"showValue\">{{value}}</ti-cell-text>\r\n<ti-cell-icons class=\"tp-rename-icon-container\"\r\n    [ngClass]=\"{'tp-rename-icon-container-isnew': isNew}\">\r\n    <tp-icon local\r\n        name=\"cloud-action-edit\"\r\n        class=\"editor-icon\"\r\n        [ngClass]=\"{'tp-rename-icon-disabled': disabled}\"\r\n        [tiTip]=\"iconTip\"\r\n        [tiTipPosition]=\"iconTipPosition\"\r\n        [title]=\"iconTitle\"\r\n        (click)=\"onClick()\"\r\n        [id]=\"appendId('editor')\"></tp-icon>\r\n    <tp-icon *ngIf=\"isNew\" local name=\"cloud-message-new\" class=\"new-icon\"></tp-icon>\r\n</ti-cell-icons>",
                styles: [".tp-rename-icon-container{line-height:1;padding-left:8px;padding-left:var(--ti-common-space-2x);position:relative;vertical-align:bottom}.tp-rename-icon-container .editor-icon{color:var(--ti-common-color-text-primary);display:inline-block;font-size:16px;width:16px}.tp-rename-icon-container .editor-icon.tp-rename-icon-disabled{color:var(--ti-common-color-icon-disabled);cursor:not-allowed}.tp-rename-icon-container .editor-icon:hover:not(.tp-rename-icon-disabled){color:var(--ti-common-color-icon-hover);cursor:pointer}.tp-rename-icon-container .new-icon{color:var(--ti-common-color-warn);font-size:12px;left:var(--ti-common-space-2x);position:absolute;top:0}ti-table tr :host .tp-rename-icon-container .editor-icon{visibility:hidden}ti-table tr:hover :host .tp-rename-icon-container .editor-icon{visibility:visible}ti-table tr:hover :host .tp-rename-icon-container-isnew .new-icon{visibility:hidden}:host ::ng-deep .ti3-cell-text-container .ti3-cell-text{vertical-align:bottom}"]
            },] }
];
TpRenameComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: TiPopupService },
    { type: NgZone }
];
TpRenameComponent.propDecorators = {
    value: [{ type: Input }],
    isNew: [{ type: Input }],
    disabled: [{ type: Input }],
    modalHeader: [{ type: Input }],
    iconTip: [{ type: Input }],
    iconTipPosition: [{ type: Input }],
    iconTitle: [{ type: Input }],
    showValue: [{ type: Input }],
    confirm: [{ type: Output }],
    beforeClose: [{ type: Output }],
    customModal: [{ type: ContentChild, args: ['renameModal', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,