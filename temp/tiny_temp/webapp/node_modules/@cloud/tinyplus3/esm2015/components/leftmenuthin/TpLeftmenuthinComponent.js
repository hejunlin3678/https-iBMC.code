import { Component, EventEmitter, Input, Output, ElementRef, Renderer2 } from '@angular/core';
import { Util, TiBaseComponent } from '@cloud/tiny3';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
/**
 * 组件功能与leftMenu组件相似。
 *
 * <example-url>../tinyplus3demo/#/leftmenuthin/leftmenuthin-all</example-url>
 */
export class TpLeftmenuthinComponent extends TiBaseComponent {
    constructor(router, activeRoute, hostRef, renderer) {
        super(hostRef, renderer);
        this.router = router;
        this.activeRoute = activeRoute;
        this.hostRef = hostRef;
        this.renderer = renderer;
        /**
         * 激活菜单项改变时向外通知
         */
        this.activeChange = new EventEmitter();
        /**
         * 点击菜单项触发此事件
         */
        this.select = new EventEmitter();
        /**
         * 控制右侧内容区的刷新
         *
         * 注意：当重复点击当前激活菜单项时，需要刷新右侧内容区，为了实现此功能设置了该接口；
         * 该接口是双向绑定的，当重复点击当前激活菜单项时，reloadState的值会经历 true(上次的值) -> false -> true
         * 的变化过程，开发者给改接口与其右侧区域容器上ngIf接口绑定的是同一个变量，所以ngIf的值也会经历同样的变化，
         * 从而做到右侧内容区的刷新。
         */
        this.reloadState = true;
        /**
         * 右侧内容区是否需要刷新的状态值改变时向外通知
         */
        this.reloadStateChange = new EventEmitter();
        /**
         * @ignore
         */
        this.resolvedPromise = Promise.resolve(null);
        /**
         * 标志量，是否为url改变(需要去改变active)
         */
        this.isUrlChange = false;
    }
    ngOnInit() {
        super.ngOnInit();
        // 初始时右侧内容区默认显示，需使外部用户的reloadState值为true。
        // 双向绑定数据时，对初始传入的值立即修改并传出时会报错，
        // 此处参考ngModel源码setValue的处理，使用promise延后执行时序
        this.resolvedPromise.then(() => {
            this.reloadStateChange.emit(true);
        });
    }
    ngAfterViewInit() {
        // 直接输入url(刷新页面)改变状态时，leftmenu能同步修改激活状态
        const urlActiveItem = this.getActiveItemByUrl(this.items);
        if (urlActiveItem) {
            // 双向绑定数据时，对初始传入的值立即修改并传出时会报错，
            // 此处参考ngModel源码setValue的处理，使用promise延后执行时序
            this.resolvedPromise.then(() => {
                if (urlActiveItem !== this.active) {
                    this.isUrlChange = true;
                    this.active = urlActiveItem;
                    this.activeChange.emit(this.active);
                }
            });
        }
        else {
            this.link();
        }
        // 从非leftMenu处跳转改变状态时，leftmenu能同步修改激活状态
        this.navigationSubscription = this.router.events.subscribe((evt) => {
            if (evt instanceof NavigationEnd) {
                const newActiveItem = this.getActiveItemByUrl(this.items);
                if (newActiveItem && newActiveItem !== this.active) {
                    this.active = newActiveItem;
                    this.activeChange.emit(this.active);
                    this.isUrlChange = true;
                }
            }
        });
    }
    ngOnChanges(changes) {
        const activeObj = changes['active'];
        if (activeObj && !activeObj.firstChange) {
            if (!this.isUrlChange) {
                this.link();
                this.isUrlChange = false;
            }
            else {
                this.navigate(activeObj.currentValue);
            }
        }
    }
    ngOnDestroy() {
        if (this.navigationSubscription) {
            this.navigationSubscription.unsubscribe();
        }
    }
    /**
     * @ignore
     * 模板中使用
     */
    selectFn(item) {
        const oldactive = this.active;
        const newactive = item;
        // 点击当前已经激活的item时，刷新对应路由
        if (newactive === oldactive) {
            this.triggerReload(item);
        }
        else if (newactive !== oldactive) {
            this.active = newactive;
            this.navigate(item);
            this.activeChange.emit(this.active);
        }
        this.select.emit(item);
    }
    /**
     * @ignore
     * 点击当前选中项时，触发内容区重载
     * @param item 当前点击项
     */
    triggerReload(item) {
        // 使reloadState由false变为true,配合内容区的ngIf做到内容区的重载
        this.reloadStateChange.emit(false);
        setTimeout(() => {
            this.reloadStateChange.emit(true);
            this.navigate(item);
        }, 0);
    }
    navigate(item) {
        this.router.navigate(item.router, this.getNavigationExtras(item.routerExtras));
    }
    getNavigationExtras(routerExtras) {
        return Object.assign({ relativeTo: this.activeRoute }, routerExtras);
    }
    getActiveItemByUrl(arr) {
        let resultItem;
        for (const item of arr) {
            if (this.isActived(item)) {
                resultItem = item;
                return resultItem;
            }
        }
        return resultItem;
    }
    isActived(item) {
        const relativeRoute = this.getRelativeRoute(item.routerExtras);
        if (this.isMatchCurrentUrl(item.router, relativeRoute)) {
            return true;
        }
        if (Util.isArray(item.routerList) && item.routerList.length > 0) {
            for (const router of item.routerList) {
                if (this.isMatchCurrentUrl(router, relativeRoute)) {
                    return true;
                }
            }
        }
        return false;
    }
    getRelativeRoute(routerExtras) {
        if (!routerExtras || !routerExtras['relativeTo']) {
            return { relativeTo: this.activeRoute };
        }
        return { relativeTo: routerExtras['relativeTo'] };
    }
    isMatchCurrentUrl(router, relativeRoute) {
        if (!Util.isArray(router)) {
            return false;
        }
        const itemUrlTree = this.router.createUrlTree(router, relativeRoute);
        return this.router.isActive(itemUrlTree, false);
    }
    link() {
        if (this.active) {
            this.navigate(this.active);
        }
    }
}
TpLeftmenuthinComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-leftmenuthin',
                template: "<div class=\"tp-leftmenuthin-content\">\r\n  <div tiOutline class=\"tp-leftmenuthin-level\" *ngFor=\"let item of items; index as i\" (click)=\"selectFn(item)\" [id]=\"appendId('select_' + i)\"\r\n    [ngClass]=\"{'tp-leftmenuthin-level-active': active === item}\" [tabindex]=\"0\" (keydown.enter)=\"selectFn(item)\">\r\n    <ng-container *ngIf='!item.iconName && item.customizeIcon'>\r\n      <ng-container  *ngTemplateOutlet='item.customizeIcon; context:  {$implicit: item}'></ng-container>\r\n    </ng-container>\r\n    <tp-icon *ngIf='item.iconName' class=\"tp-leftmenuthin-icon\" [name]='item.iconName'></tp-icon>\r\n    <div class=\"tp-leftmenuthin-level-text\" [id]=\"appendId('label_' + i)\">{{item.label}}</div>\r\n  </div>\r\n</div>\r\n",
                styles: [".ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.tp-leftmenuthin-content{background-color:var(--ti-common-color-bg-white-normal);bottom:0;position:fixed;top:0;width:var(--tp-leftmenuthin-level-width);z-index:1000}.tp-leftmenuthin-level{box-sizing:border-box;color:var(--ti-common-color-text-secondary);cursor:pointer;height:var(--tp-leftmenuthin-level-height);padding-top:var(--ti-common-space-3x);text-align:center;width:var(--tp-leftmenuthin-level-width)}.tp-leftmenuthin-level .tp-leftmenuthin-icon{font-size:var(--ti-common-font-size-6)}.tp-leftmenuthin-level .tp-leftmenuthin-level-text{font-size:var(--ti-common-font-size-base);line-height:var(--ti-common-line-height-number);margin-top:var(--ti-common-space-base);text-align:center}.tp-leftmenuthin-level:hover{background-color:var(--ti-common-color-bg-white-emphasize);color:var(--ti-common-color-icon-hover)}.tp-leftmenuthin-level.tp-leftmenuthin-level-active{background-color:var(--ti-common-color-bg-emphasize);color:var(--ti-common-color-text-white)}.tp-leftmenuthin-level.tp-leftmenuthin-level-active .tp-leftmenuthin-icon{color:var(--ti-common-color-icon-white)}"]
            },] }
];
TpLeftmenuthinComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ElementRef },
    { type: Renderer2 }
];
TpLeftmenuthinComponent.propDecorators = {
    active: [{ type: Input }],
    activeChange: [{ type: Output }],
    select: [{ type: Output }],
    reloadState: [{ type: Input }],
    items: [{ type: Input }],
    reloadStateChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,