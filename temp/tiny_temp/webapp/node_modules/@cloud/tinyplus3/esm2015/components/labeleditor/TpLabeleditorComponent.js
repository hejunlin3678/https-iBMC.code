import { FormControl } from '@angular/forms';
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, Renderer2, ViewChild, NgZone } from '@angular/core';
import { TiFormComponent, TiTextareaComponent, TiTextComponent, Util } from '@cloud/tiny3';
/**
 * 可编辑文本组件，主要实现了编辑文本的功能。组件有两种状态：编辑状态和非编辑状态。
 * 在非编辑状态:点击右侧笔图标时，切换到编辑状态。
 * 在编辑状态:点击右侧对号图标时，切换到非编辑状态，
 * 并且将输入框中内容显示在非编辑状态的文本中;
 * 点击右侧叉图标时，切换到非编辑状态，非编辑状态的文本保持之前的不变，用户输入不生效。
 *
 * <example-url>../tinyplus3demo/#/labeleditor/labeleditor-all</example-url>
 */
// extends TiFormComponent
export class TpLabeleditorComponent extends TiFormComponent {
    constructor(elementRef, changeDetectorRef, renderer2, zone) {
        super(elementRef, renderer2);
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.renderer2 = renderer2;
        this.zone = zone;
        /**
         * 是否超出显示TIP
         */
        this.autoTip = true;
        /**
         * 用来调整文本框大小，该属性提供了四个属性值:
         *
         * none(不可调整组件大小):
         *
         * vertical(仅可调整垂直方向的大小，即调整组件的高度)
         *
         * horizontal(仅可调节水平方向的大小，即调整组件的宽度)
         *
         * both(水平和垂直方向均可调节，宽高都可调节)
         */
        this.resize = 'both';
        /**
         * 编辑事件接口
         */
        this.editor = new EventEmitter();
        /**
         * 确认事件接口
         */
        this.confirm = new EventEmitter();
        /**
         * 取消事件接口
         */
        this.cancel = new EventEmitter();
        /**
         * @ignore
         */
        this.isEditing = false; // 是否处于编辑状态
        /**
         * @ignore
         */
        this.emptyValue = '--'; // 内容为空时显示‘--’
        /**
         * @ignore
         */
        this.valueInvalid = false;
    }
    // tslint:disable-next-line:use-life-cycle-interface
    ngOnInit() {
        super.ngOnInit();
        this.control = new FormControl(this.model, this.validationRules);
        // 校验提示tip默认top方向展开
        if (this.validation) {
            this.validation.tipPosition = Util.isUndefined(this.validation.tipPosition) ? 'top' :
                this.validation.tipPosition;
        }
        this.subscription = this.control.statusChanges.subscribe((status) => {
            this.valueInvalid = status === 'INVALID';
            this.changeDetectorRef.detectChanges();
        });
    }
    /**
     * @ignore
     */
    // tslint:disable-next-line:typedef
    ngOnModelChange() {
        if (this.model) {
            this.control.setValue(this.model.slice(0, this.maxlength));
        }
        else {
            this.control.setValue('');
        }
    }
    // tslint:disable-next-line:use-life-cycle-interface
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    /**
     * @ignore
     * 点击编辑图标事件
     */
    onClickEdit() {
        if (this.disabled) {
            return;
        }
        this.isEditing = true;
        this.oldValue = this.model;
        this.editor.emit(this.model);
        if (this.model) {
            this.control.setValue(this.model.slice(0, this.maxlength));
        }
        setTimeout(() => {
            if (this.multiline) {
                this.textareaComp.nativeElement.focus();
                if (Util.isUndefined(this.maxlength)) {
                    this.renderer2.removeAttribute(this.textareaComp.nativeElement, 'maxlength');
                }
                else {
                    this.renderer2.setAttribute(this.textareaComp.nativeElement, 'maxlength', String(this.maxlength));
                }
            }
            else {
                this.textComp.nativeElement.focus();
            }
        }, 0);
    }
    /**
     * @ignore
     * 点击确认图标事件
     */
    onClickConfirm() {
        if (this.valueInvalid) {
            return;
        }
        this.isEditing = false;
        this.model = this.control.value;
        this.confirm.emit(this.model);
    }
    /**
     * @ignore
     * 点击取消图标事件
     */
    onClickCancel() {
        this.isEditing = false;
        this.cancel.emit(this.model);
        this.control.setValue(this.oldValue);
    }
}
TpLabeleditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-labeleditor',
                template: "<ng-container *ngIf=\"!isEditing\">\r\n  <ng-container *ngIf=\"autoTip\">\r\n      <span #edit (iconClick)='onClickEdit()'\r\n          [iconFocusable]=\"'true'\"\r\n          [iconDisabled] = \"disabled\"\r\n          [textContent]=\"model ? model : emptyValue\"\r\n          [iconTip]='iconTip'\r\n          [maxLine]='3'\r\n          [iconName]=\"'edit'\"\r\n          tiOverflow\r\n          (keydown.enter)=\"onClickEdit()\"\r\n          [id]=\"appendId('edit')\"></span>\r\n          <span style=\"display: none;\" class=\"ti3-icon\"></span>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"!autoTip\">\r\n    <span>{{ model ? model : emptyValue}}</span>\r\n    <tp-icon local tiOutline  (click)='onClickEdit()' [attr.tabindex]=\"disabled? -1 : 0\" (keydown.enter)=\"onClickEdit()\"\r\n    class='tp-editor-icon' name=\"cloud-action-edit\" [tiTip]='iconTip' tiTipPosition=\"auto\" [id]=\"appendId('edit')\"></tp-icon>\r\n  </ng-container>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"isEditing\">\r\n  <span *ngIf=\"multiline\" class='tp-textarea-container'>\r\n    <ng-container *ngIf='maxlength else noMaxlengthTemplate'>\r\n      <textarea\r\n              #textarea\r\n              tiTextarea\r\n              [ngStyle]=\"{'width': width, 'height': height}\"\r\n              [tiValidation]='validation'\r\n              [formControl]=\"control\"\r\n              [errorMessageWrapper]='wrapper'\r\n              [resize]='resize'\r\n              [id]=\"appendId('textarea')\"\r\n              maxlength='maxlength'>\r\n    </textarea>\r\n    </ng-container>\r\n    <ng-template #noMaxlengthTemplate>\r\n      <textarea\r\n              #textarea\r\n              tiTextarea\r\n              [ngStyle]=\"{'width': width,'height': height}\"\r\n              [tiValidation]='validation'\r\n              [formControl]=\"control\"\r\n              [errorMessageWrapper]='wrapper'\r\n              [id]=\"appendId('textarea')\"\r\n              [resize]='resize'>\r\n    </textarea>\r\n    </ng-template>\r\n  </span>\r\n  <span *ngIf=\"!multiline\">\r\n    <input type=\"text\"\r\n           #text\r\n           [tiValidation]='validation'\r\n           [formControl]=\"control\"\r\n           [errorMessageWrapper]='wrapper'\r\n           [id]=\"appendId('input')\"\r\n           tiText/>\r\n  </span>\r\n  <span [ngClass]=\"{'tp-labeleditor-icon-container': !multiline}\">\r\n    <span #confirmIcon>\r\n      <tp-icon local tiOutline name=\"cloud-action-confirm\" class=\"tp-labeleditor-icon tp-icon-confirm\"\r\n      [ngClass]=\"{'tp-confirm-disabled': valueInvalid}\" (click)='onClickConfirm()'\r\n      [id]=\"appendId('confirm')\" [attr.tabindex]=\"valueInvalid ? -1 : 0\"\r\n      (keydown.enter)=\"onClickConfirm()\"></tp-icon>\r\n    </span>\r\n      <tp-icon local tiOutline name=\"cloud-action-cancel\" class=\"tp-labeleditor-icon tp-icon-cancel\"\r\n      (click)='onClickCancel()' [attr.tabindex]=\"0\" (keydown.enter)=\"onClickCancel()\"\r\n      [id]=\"appendId('cancel')\"></tp-icon>\r\n  </span>\r\n  <span #wrapper class='tp-editor-errorMessageWrapper'></span>\r\n</ng-container>",
                providers: [TiFormComponent.getValueAccessor(TpLabeleditorComponent)],
                styles: [".tp-labeleditor-icon{cursor:pointer;line-height:28px;margin-left:var(--ti-common-space-2x);vertical-align:top}.tp-icon-confirm{color:var(--ti-common-color-success)}.tp-icon-cancel{color:var(--ti-common-color-error)}.tp-confirm-disabled.tp-icon-confirm{color:var(--ti-common-color-icon-disabled);cursor:not-allowed}.tp-labeleditor-container{display:inline-block;position:relative}.tp-textarea-container{display:inline-block}.tp-icon-container{bottom:0;position:absolute;right:var(--ti-common-space-base)}.tp-labeleditor-icon-container .tp-labeleditor-icon{vertical-align:middle}.tp-editor-icon,::ng-deep span[tiOverflowEndicon]{color:var(--ti-common-color-icon-normal);cursor:pointer;font-size:var(--ti-common-font-size-2);padding-left:var(--ti-common-space-2x)}.tp-editor-icon:hover,::ng-deep span[tiOverflowEndicon]:hover{color:var(--ti-common-color-icon-hover)}.tp-editor-errorMessageWrapper{display:inline-block;line-height:16px}:host[disabled] .tp-editor-icon,:host[disabled] ::ng-deep span[tiOverflowEndicon]{color:var(--ti-common-color-icon-disabled);cursor:not-allowed}:host{word-break:break-all;word-wrap:break-word}"]
            },] }
];
TpLabeleditorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: NgZone }
];
TpLabeleditorComponent.propDecorators = {
    autoTip: [{ type: Input }],
    multiline: [{ type: Input }],
    resize: [{ type: Input }],
    maxlength: [{ type: Input }],
    iconTip: [{ type: Input }],
    validation: [{ type: Input }],
    validationRules: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    editor: [{ type: Output }],
    confirm: [{ type: Output }],
    cancel: [{ type: Output }],
    textareaComp: [{ type: ViewChild, args: ['textarea', { static: false },] }],
    textComp: [{ type: ViewChild, args: ['text', { static: false },] }],
    confirmIconEle: [{ type: ViewChild, args: ['confirmIcon',] }],
    editEle: [{ type: ViewChild, args: ['edit', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,