import { Component, ContentChild, Input, QueryList, TemplateRef, ViewChildren } from '@angular/core';
import { TiAccordionItemComponent, TiBaseComponent } from '@cloud/tiny3';
/**
 *
 *  折叠面板列表组件
 *
 *  10.1.0版本新增
 *
 *  10.0.4及之前的版本是以模板的形式提供(只提供了一些样式）；10.1.0版本为了实现样式按需加载和其使用简便性，去掉了之前的模板，封装了该组件。
 *
 *  <example-url>../tinyplus3demo/#/accordionlist/accordionlist-all</example-url>
 *
 */
export class TpAccordionlistComponent extends TiBaseComponent {
    constructor() {
        super(...arguments);
        /**
         * 展开某一项时，是否关闭其它项
         */
        this.closeOthers = true;
        /**
         * 折叠面板列表数据集合
         */
        this.options = [];
    }
    /**
     * @ignore
     */
    headClick($event, option, index, actionmenuContainer) {
        // 点击非actionmenu区域时展开/收起
        if (!actionmenuContainer.contains($event.target)) {
            const currentAccordionItem = this.accordionItemComps.toArray()[index];
            if (currentAccordionItem) {
                currentAccordionItem.open = !currentAccordionItem.open;
                if (option.headClick) {
                    option.headClick($event);
                }
            }
        }
    }
    /**
     * @ignore
     */
    onActionmenuSelect(item, option) {
        if (option.actionmenu && option.actionmenu.select) {
            option.actionmenu.select(item, option);
        }
    }
    /**
     * @ignore
     */
    getActionmenuItems(option) {
        if (!option.actionmenu || !option.actionmenu.items || option.actionmenu.items.length < 1) {
            return [];
        }
        return option.actionmenu.items.map((item) => {
            item.disabled = option.disabled || item.disabled;
            return item;
        });
    }
}
TpAccordionlistComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-accordionlist',
                template: "<ti-accordion [closeOthers]=\"closeOthers\">\r\n    <ti-accordion-item *ngFor=\"let option of options; index as i;\"\r\n            [open]=\"option.open\"\r\n            [disabled]=\"option.disabled\"\r\n            [clickToggle]=\"false\"\r\n            (headClick)=\"headClick($event, option, i, actionmenuContainer)\">\r\n            <ti-accordion-head>\r\n                <ng-container *ngIf=\"headLabelTemplate else defaultHeadLabelTemplate\">\r\n                    <ng-container *ngTemplateOutlet=\"headLabelTemplate; context: {$implicit: option, index: i}\"></ng-container>\r\n                </ng-container>\r\n                <ng-template #defaultHeadLabelTemplate>\r\n                    <div class=\"tp-accordionlist-headlabel\" [innerHTML]=\"option.headLabel\"></div>\r\n                </ng-template>\r\n                <div #actionmenuContainer class=\"tp-accordionlist-headtools\">\r\n                    <ti-actionmenu [items]=\"getActionmenuItems(option)\"\r\n                                   [maxShowNum]=\"option.actionmenu.maxShowNum === undefined ? 4 : option.actionmenu.maxShowNum\"\r\n                                   [labelKey]=\"option.actionmenu.labelKey || 'label'\"\r\n                                   [panelMaxWidth]=\"option.actionmenu.panelMaxWidth || '130px'\"\r\n                                   [panelMaxHeight]=\"option.actionmenu.panelMaxHeight || '9999px'\"\r\n                                   [maxWidth]=\"option.actionmenu.maxWidth\"\r\n                                   (select)=\"onActionmenuSelect($event, option)\"></ti-actionmenu>\r\n                </div>\r\n            </ti-accordion-head>\r\n            <ng-container *ngTemplateOutlet=\"contentTemplate; context: {$implicit: option, index: i}\"></ng-container>\r\n    </ti-accordion-item>\r\n</ti-accordion>",
                styles: [":host{display:block}.tp-accordionlist-headlabel{display:inline-block}.tp-accordionlist-headtools{float:right}"]
            },] }
];
TpAccordionlistComponent.propDecorators = {
    closeOthers: [{ type: Input }],
    options: [{ type: Input }],
    headLabelTemplate: [{ type: ContentChild, args: ['headLabel', { static: true },] }],
    contentTemplate: [{ type: ContentChild, args: ['content', { static: true },] }],
    accordionItemComps: [{ type: ViewChildren, args: [TiAccordionItemComponent,] }]
};
//# sourceMappingURL=data:application/json;base64,