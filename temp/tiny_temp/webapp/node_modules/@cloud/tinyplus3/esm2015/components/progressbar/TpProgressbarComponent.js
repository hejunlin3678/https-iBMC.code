import { Component, Input } from '@angular/core';
import { TiBaseComponent } from '@cloud/tiny3';
/**
 *  进度条组件
 *
 *  本组件是ti-progressbar 的业务封装，有2种使用场景：
 *
 *  1.无预警：进度条[必选]+百分比或分数[必选]
 *
 *  2.有预警：进度条[必选]+百分比或分数[必选]
 *
 *  场景2设置了warn 和 alarm 接口后生效
 *
 *  10.0.1 新增
 *
 * <example-url>../tinyplus3demo/#/progressbar/progressbar-all</example-url>
 */
export class TpProgressbarComponent extends TiBaseComponent {
    constructor() {
        super(...arguments);
        /**
         * label 显示类型，
         */
        this.labelType = 'percent';
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngOnInit() {
        super.ngOnInit();
        this.updateLabel();
        this.updateWarnLevel();
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        if (changes['value'] && !changes['value'].firstChange ||
            (changes['warn'] && !changes['warn'].firstChange) ||
            changes['alarm'] && !changes['alarm'].firstChange) {
            this.updateLabel();
            this.updateWarnLevel();
        }
        if (changes['labelType'] && !changes['labelType'].firstChange) {
            this.updateLabel();
        }
    }
    updateWarnLevel() {
        if (this.warn && this.alarm) {
            if (this.value > this.alarm) {
                this.warnLevel = 'alarm';
            }
            else if (this.value > this.warn) {
                this.warnLevel = 'warn';
            }
            else {
                this.warnLevel = 'normal';
            }
        }
    }
    updateLabel() {
        // 百分比保留两位小数
        this.label = this.labelType === 'percent' ? `${Math.round(this.value / this.max * 10000) / 100}%` : `${this.value}/${this.max}`;
    }
}
TpProgressbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-progressbar',
                template: "<ti-progressbar\r\n    [ngClass]=\"{'tp-progressbar-alarm': warnLevel === 'alarm','tp-progressbar-warn': warnLevel === 'warn','tp-progressbar-normal': warnLevel === 'normal'}\"\r\n    [value]=\"value\" [max]=\"max\">\r\n    </ti-progressbar>\r\n<span class=\"tp-progressbar-label\" [id]=\"appendId('label')\">\r\n    {{label}}<ng-container *ngIf=\"unit\">({{unit}})</ng-container>\r\n</span>",
                styles: [":host ::ng-deep{align-items:center;display:flex;white-space:nowrap;width:100%}:host ::ng-deep ti-progressbar.ti3-progress{flex:1;width:auto}:host ::ng-deep .tp-progressbar-normal>.ti3-progress-bar{background-color:var(--ti-common-color-success)}:host ::ng-deep .tp-progressbar-warn>.ti3-progress-bar{background-color:var(--ti-common-color-warn-secondary)}:host ::ng-deep .tp-progressbar-alarm>.ti3-progress-bar{background-color:var(--ti-common-color-error)}.tp-progressbar-label{display:inline-block;margin-left:var(--ti-common-space-2x);vertical-align:top}"]
            },] }
];
TpProgressbarComponent.propDecorators = {
    labelType: [{ type: Input }],
    value: [{ type: Input }],
    max: [{ type: Input }],
    warn: [{ type: Input }],
    alarm: [{ type: Input }],
    unit: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHBQcm9ncmVzc2JhckNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL0BjbG91ZC90aW55cGx1czMvY29tcG9uZW50cy9wcm9ncmVzc2Jhci9UcFByb2dyZXNzYmFyQ29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBYS9DOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBTUgsTUFBTSxPQUFPLHNCQUF1QixTQUFRLGVBQWU7SUFMM0Q7O1FBTUk7O1dBRUc7UUFDTSxjQUFTLEdBQTJCLFNBQVMsQ0FBQztJQXNFM0QsQ0FBQztJQXJDRyxxREFBcUQ7SUFDckQsUUFBUTtRQUNKLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFDRCxxREFBcUQ7SUFDckQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFM0IsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVztZQUNqRCxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUM7WUFDakQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRTtZQUNuRCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQzFCO1FBQ0QsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFO1lBQzNELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN0QjtJQUNMLENBQUM7SUFFTyxlQUFlO1FBQ25CLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3pCLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQzthQUM1QjtpQkFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDL0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7YUFDM0I7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7YUFDN0I7U0FDSjtJQUNMLENBQUM7SUFFTyxXQUFXO1FBQ2YsWUFBWTtRQUNaLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDcEksQ0FBQzs7O1lBOUVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixtWkFBaUM7O2FBRXBDOzs7d0JBS0ksS0FBSztvQkFJTCxLQUFLO2tCQUlMLEtBQUs7bUJBSUwsS0FBSztvQkFJTCxLQUFLO21CQUlMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRpQmFzZUNvbXBvbmVudCB9IGZyb20gJ0BjbG91ZC90aW55Myc7XHJcblxyXG4vKipcclxuICog6L+b5bqm5p2h5o+Q56S657G75Z6L77yMcGVyY2VudC3nmb7liIbmlbAgZnJhY3Rpb24t5YiG5pWwXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBUcFByb2dyZXNzYmFyTGFiZWxUeXBlID0gJ3BlcmNlbnQnIHwgJ2ZyYWN0aW9uJztcclxuXHJcbi8qKlxyXG4gKiBAaWdub3JlXHJcbiAqIOWGhemDqOS9v+eUqFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgVHBQcm9ncmVzc2Jhcldhcm5MZXZlbCA9ICdub3JtYWwnIHwgJ3dhcm4nIHwgJ2FsYXJtJztcclxuXHJcbi8qKlxyXG4gKiAg6L+b5bqm5p2h57uE5Lu2XHJcbiAqXHJcbiAqICDmnKznu4Tku7bmmK90aS1wcm9ncmVzc2JhciDnmoTkuJrliqHlsIHoo4XvvIzmnIky56eN5L2/55So5Zy65pmv77yaXHJcbiAqXHJcbiAqICAxLuaXoOmihOitpu+8mui/m+W6puadoVvlv4XpgIldK+eZvuWIhuavlOaIluWIhuaVsFvlv4XpgIldXHJcbiAqXHJcbiAqICAyLuaciemihOitpu+8mui/m+W6puadoVvlv4XpgIldK+eZvuWIhuavlOaIluWIhuaVsFvlv4XpgIldXHJcbiAqXHJcbiAqICDlnLrmma8y6K6+572u5LqGd2FybiDlkowgYWxhcm0g5o6l5Y+j5ZCO55Sf5pWIXHJcbiAqXHJcbiAqICAxMC4wLjEg5paw5aKeXHJcbiAqXHJcbiAqIDxleGFtcGxlLXVybD4uLi90aW55cGx1czNkZW1vLyMvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3NiYXItYWxsPC9leGFtcGxlLXVybD5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd0cC1wcm9ncmVzc2JhcicsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vcHJvZ3Jlc3NiYXIuaHRtbCcsXHJcbiAgICBzdHlsZVVybHM6IFsnLi9wcm9ncmVzc2Jhci5sZXNzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFRwUHJvZ3Jlc3NiYXJDb21wb25lbnQgZXh0ZW5kcyBUaUJhc2VDb21wb25lbnQge1xyXG4gICAgLyoqXHJcbiAgICAgKiBsYWJlbCDmmL7npLrnsbvlnovvvIxcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgbGFiZWxUeXBlOiBUcFByb2dyZXNzYmFyTGFiZWxUeXBlID0gJ3BlcmNlbnQnO1xyXG4gICAgLyoqXHJcbiAgICAgKiDlvZPliY3lgLxcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgdmFsdWU6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICog5pyA5aSn5YC8XHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIG1heDogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmqZnoibLvvIjlkYrorabvvInnmoTkuLTnlYzlgLwsXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIHdhcm46IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICog57qi6Imy77yI5ZGK6K2m77yJ55qE5Li055WM5YC8XHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGFsYXJtOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIGxhYmVs5Y2V5L2NXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIHVuaXQ6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZVxyXG4gICAgICog6aKE6K2m57G75Z6L5qC35byP57G75YirXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB3YXJuTGV2ZWw6IFRwUHJvZ3Jlc3NiYXJXYXJuTGV2ZWw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKiDmmL7npLrmloflrZflhoXlrrlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGxhYmVsOiBzdHJpbmc7XHJcblxyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiB1c2UtbGlmZS1jeWNsZS1pbnRlcmZhY2VcclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLm5nT25Jbml0KCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVMYWJlbCgpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlV2FybkxldmVsKCk7XHJcbiAgICB9XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IHVzZS1saWZlLWN5Y2xlLWludGVyZmFjZVxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLm5nT25DaGFuZ2VzKGNoYW5nZXMpO1xyXG5cclxuICAgICAgICBpZiAoY2hhbmdlc1sndmFsdWUnXSAmJiAhY2hhbmdlc1sndmFsdWUnXS5maXJzdENoYW5nZSB8fFxyXG4gICAgICAgICAgICAoY2hhbmdlc1snd2FybiddICYmICFjaGFuZ2VzWyd3YXJuJ10uZmlyc3RDaGFuZ2UpIHx8XHJcbiAgICAgICAgICAgIGNoYW5nZXNbJ2FsYXJtJ10gJiYgIWNoYW5nZXNbJ2FsYXJtJ10uZmlyc3RDaGFuZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVMYWJlbCgpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVdhcm5MZXZlbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2hhbmdlc1snbGFiZWxUeXBlJ10gJiYgIWNoYW5nZXNbJ2xhYmVsVHlwZSddLmZpcnN0Q2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGFiZWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVXYXJuTGV2ZWwoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMud2FybiAmJiB0aGlzLmFsYXJtKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlID4gdGhpcy5hbGFybSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy53YXJuTGV2ZWwgPSAnYWxhcm0nO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudmFsdWUgPiB0aGlzLndhcm4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud2FybkxldmVsID0gJ3dhcm4nO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy53YXJuTGV2ZWwgPSAnbm9ybWFsJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZUxhYmVsKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIOeZvuWIhuavlOS/neeVmeS4pOS9jeWwj+aVsFxyXG4gICAgICAgIHRoaXMubGFiZWwgPSB0aGlzLmxhYmVsVHlwZSA9PT0gJ3BlcmNlbnQnID8gYCR7TWF0aC5yb3VuZCh0aGlzLnZhbHVlIC8gdGhpcy5tYXggKiAxMDAwMCkgLyAxMDB9JWAgOiBgJHt0aGlzLnZhbHVlfS8ke3RoaXMubWF4fWA7XHJcbiAgICB9XHJcbn1cclxuIl19