// tslint:disable-next-line: no-implicit-dependencies
import { Component, Input } from '@angular/core';
// tslint:disable-next-line: no-implicit-dependencies
import { TiBaseComponent, TiLocale } from '@cloud/tiny3';
/**
 * 表格倒计时组件
 *
 * <example-url>../tinyplus3demo/#/count/count-all</example-url>
 */
export class TpCountStateComponent extends TiBaseComponent {
    constructor() {
        super(...arguments);
        /**
         * @ignore
         * 是单独使用，还是和tp-count-time一起使用，单独使用没有逗号，一起使用有逗号
         */
        this.pattern = 'only';
        /**
         * @ignore
         * 资源状态描述文字
         */
        this.state = '';
        /**
         * @ignore
         * 分割号，分隔号放在资源状态中，主要解决资源状态和倒计时一起使用，文字中间有空间。
         */
        this.spliter = '';
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngOnInit() {
        super.ngOnInit();
        this.updateState();
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        // 类型更新或倒计时更新，需要更新一下资源状态
        if ((changes['countDownCode'] && !changes['countDownCode'].firstChange)
            || (changes['countDownInfos'] && !changes['countDownInfos'].firstChange)) {
            this.updateState();
        }
    }
    // 更新状态文字和文字颜色类别
    updateState() {
        switch (this.countDownCode) {
            case 'hws_countdown_period_using':
                this.state = TiLocale.getLocaleWords().tpCount.using;
                // 包周期，资源倒计时小于7天时文字颜色区别显示
                this.stateLevel = this.isDayLess7() ? 'warn' : 'normal';
                break;
            case 'hws_countdown_period_gracing':
                this.state = TiLocale.getLocaleWords().tpCount.overdue;
                // 此种倒计时需要分隔号
                this.spliter = TiLocale.getLocaleWords().tpCountdown.spliter;
                this.stateLevel = 'alarm';
                break;
            case 'hws_countdown_period_frozen':
                this.state = TiLocale.getLocaleWords().tpCount.frozened;
                // 此种倒计时需要分隔号
                this.spliter = TiLocale.getLocaleWords().tpCountdown.spliter;
                this.stateLevel = 'alarm';
                break;
            case 'hws_countdown_period_illegalfrozen':
                this.state = TiLocale.getLocaleWords().tpCount.illegalFrozened;
                // 此种倒计时需要分隔号
                this.spliter = TiLocale.getLocaleWords().tpCountdown.spliter;
                this.stateLevel = 'alarm';
                break;
            case 'hws_countdown_period_policefrozen':
                this.state = TiLocale.getLocaleWords().tpCount.illegalFrozened;
                this.stateLevel = 'alarm';
                break;
            case 'hws_countdown_period_toondemand':
                this.state = TiLocale.getLocaleWords().tpCount.using;
                this.stateLevel = 'warn';
                break;
            case 'hws_countdown_ondemand_using':
                this.state = TiLocale.getLocaleWords().tpCount.using;
                this.stateLevel = 'normal';
                break;
            case 'hws_countdown_ondemand_gracing':
                this.state = TiLocale.getLocaleWords().tpCount.arrear;
                this.stateLevel = 'alarm';
                this.spliter = TiLocale.getLocaleWords().tpCountdown.spliter;
                break;
            case 'hws_countdown_ondemand_frozen':
                this.state = TiLocale.getLocaleWords().tpCount.frozened;
                // 此种倒计时需要分隔号
                this.spliter = TiLocale.getLocaleWords().tpCountdown.spliter;
                this.stateLevel = 'alarm';
                break;
            case 'hws_countdown_ondemand_illegalfrozen':
                this.state = TiLocale.getLocaleWords().tpCount.illegalFrozened;
                this.stateLevel = 'alarm';
                break;
            case 'hws_countdown_ondemand_illegalfrozen_arrear':
                this.state = TiLocale.getLocaleWords().tpCount.illegalFrozened;
                // 此种倒计时需要分隔号
                this.spliter = TiLocale.getLocaleWords().tpCountdown.spliter;
                this.stateLevel = 'alarm';
                break;
            case 'hws_countdown_ondemand_policefrozen':
                this.state = TiLocale.getLocaleWords().tpCount.illegalFrozened;
                this.stateLevel = 'alarm';
                break;
            default:
                break;
        }
    }
    // 倒计时是否小于七天
    isDayLess7() {
        return !(this.countDownInfos.nextOperationRemainingDay && this.countDownInfos.nextOperationRemainingDay > 7);
    }
}
TpCountStateComponent.decorators = [
    { type: Component, args: [{
                selector: 'tp-count-state',
                template: `
         {{ state }}{{ pattern === 'combine'? spliter:'' }}
      `,
                host: {
                    '[class.tp-count-alarm]': 'stateLevel === "alarm"',
                    '[class.tp-count-warn]': 'stateLevel === "warn"'
                }
            },] }
];
TpCountStateComponent.propDecorators = {
    countDownCode: [{ type: Input }],
    countDownInfos: [{ type: Input }],
    pattern: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,