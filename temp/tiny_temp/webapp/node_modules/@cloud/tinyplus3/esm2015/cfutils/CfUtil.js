import { __awaiter } from "tslib";
import { EndpointsData, HttpService, LinksData, Mask, Message, StorageService, UserData } from '@cloud/cfdata';
import { TpDatePipe } from '../pipes/locale/TpLocaleModule';
//
/**
 * @ignore
 * 获取console相关的工具类
 * 兼容angular.js版本的console
 */
export class CfUtil {
    static getUser() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isAngularJSConsole()) {
                return this.getFromAngularJSConsole('$rootScope');
            }
            const cfUserData = yield UserData.getCfUser();
            return cfUserData;
        });
    }
    static getLinks() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isAngularJSConsole()) {
                return this.getFromAngularJSConsole('$rootScope');
            }
            const cfLinksData = yield LinksData.getLinks();
            return cfLinksData;
        });
    }
    static getEndpoints() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isAngularJSConsole()) {
                return this.getFromAngularJSConsole('$rootScope');
            }
            const cfEndpointsData = yield EndpointsData.getCfEndpoints();
            return cfEndpointsData;
        });
    }
    static getHttpService() {
        if (this.isAngularJSConsole()) {
            return this.getFromAngularJSConsole('camel');
        }
        return HttpService;
    }
    static getMessage() {
        if (this.isAngularJSConsole()) {
            return this.getFromAngularJSConsole('msgService');
        }
        return Message;
    }
    static getMask() {
        if (this.isAngularJSConsole()) {
            return this.getFromAngularJSConsole('mask');
        }
        return Mask;
    }
    static getStorageService() {
        if (this.isAngularJSConsole()) {
            return this.getFromAngularJSConsole('storage');
        }
        return StorageService;
    }
    static formatLocaleDateTime(datetime) {
        if (this.isAngularJSConsole()) {
            const localeService = this.getFromAngularJSConsole('localeService');
            if (localeService && typeof localeService.formatLocaleDateTime === 'function') {
                return localeService.formatLocaleDateTime(datetime);
            }
            else {
                return datetime;
            }
        }
        return new TpDatePipe().transform(datetime, 'dateTimeZone');
    }
    static isNonsupportRegion() {
        if (this.isAngularJSConsole()) {
            const rootScope = this.getFromAngularJSConsole('$rootScope');
            return rootScope && rootScope.isNonsupportRegion;
        }
        return UserData.isNonsupportRegion;
    }
    static getAppWebPath() {
        // 兼容appWebPath(旧版)、AppWebPath(新版)
        let appWebPath = window.AppWebPath || window.appWebPath;
        // 去掉首尾的/符号
        appWebPath = appWebPath && appWebPath.replace(/^\//, '')
            .replace(/\/$/, '');
        return `/${appWebPath}`;
    }
    static isAngularJSConsole() {
        return !!window.angular;
    }
    static getFromAngularJSConsole(inject) {
        const html = window.angular.element('html');
        // 使用ng1+ng2 新融合方案时，Angular应用默认所在的根DOM元素为body
        const body = window.angular.element('body');
        if (html && html.injector()) {
            return html.injector().get(inject);
        }
        else if (body && body.injector()) {
            return body.injector().get(inject);
        }
        else {
            return;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,