import { Directive } from '@angular/core';
import { TiTableComponent, Util } from '@cloud/tiny3';
import { CfUtil } from '../../cfutils/CfUtil';
/**
 * 表格记忆列切换指令
 *
 * 10.0.4 新增
 *
 *
 * <example-url>../tinyplus3demo/#/storage/storage-all</example-url>
 */
export class TpStorageColumnsDirective {
    constructor(tableCom) {
        this.tableCom = tableCom;
    }
    ngOnInit() {
        if (this.shouldStorageColumnsToggle()) {
            this.httpService = CfUtil.getHttpService();
            CfUtil.getUser()
                .then((user) => {
                this.user = user;
                this.getColumns();
                this.updateColumnsSubscription = this.tableCom.updateColumnsSubject.subscribe(() => {
                    this.postColumns();
                });
            }).catch(error => {
                console.log(error);
            });
        }
    }
    ngOnDestroy() {
        if (this.updateColumnsSubscription) {
            this.updateColumnsSubscription.unsubscribe();
        }
    }
    getColumns() {
        if (!this.user && !this.httpService) {
            return;
        }
        const userid = this.user.userId;
        const storageId = this.tableCom.storageId;
        this.httpService.get({
            url: {
                s: TpStorageColumnsDirective.GET_URL,
                o: {
                    userid: userid,
                    category: storageId
                }
            }
        }).then((data) => {
            this.tableCom.columns.forEach((column, index) => {
                if (!Util.isNull(data[index])) {
                    column.show = data[index];
                }
                ;
            });
        }).catch(error => {
            console.log(error);
        });
    }
    postColumns() {
        if (!this.user && !this.httpService) {
            return;
        }
        const columns = this.tableCom.columns.map((column) => {
            return column.show;
        });
        const userid = this.user.userId;
        const storageId = this.tableCom.storageId;
        this.httpService.post({
            url: {
                s: TpStorageColumnsDirective.POST_URL,
                o: {
                    userid: userid
                }
            },
            params: {
                ategory: storageId,
                setting: JSON.stringify(columns),
                lastModifiedDateLong: new Date().getTime()
            }
        }).then((data) => {
            // 成功后不做处理
        }).catch((error) => {
            console.log(error);
        });
    }
    shouldStorageColumnsToggle() {
        return !!(this.tableCom && this.tableCom.storageId);
    }
}
/**
 * @ignore
 */
TpStorageColumnsDirective.GET_URL = './rest/silvan/rest/v1.0/setting/{userid}/{category}/update.json';
/**
 * @ignore
 */
TpStorageColumnsDirective.POST_URL = './rest/silvan/rest/v1.0/setting/{userid}/update.json';
TpStorageColumnsDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ti-table[tpStorageColumns]'
            },] }
];
TpStorageColumnsDirective.ctorParameters = () => [
    { type: TiTableComponent }
];
//# sourceMappingURL=data:application/json;base64,