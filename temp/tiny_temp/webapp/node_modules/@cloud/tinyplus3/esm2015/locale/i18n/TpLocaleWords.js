//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"TpLocaleWords.js","sourceRoot":"","sources":["../../../../../../@cloud/tinyplus3/locale/i18n/TpLocaleWords.ts"],"names":[],"mappings":"","sourcesContent":["export interface TpLocaleWords {\r\n    tiLocaleKey: string;\r\n    tiLocaleDate: {\r\n        date: string;\r\n        time: string;\r\n        dateTime: string;\r\n        dateTimeZone: string;\r\n    };\r\n    tpLocaleNumber: {\r\n        // locale: string;                // \"de-DE\"\r\n        // numberingSystem?: string;       // \"latn\"\r\n        // style?: string;                 // \"decimal\"\r\n        minimumIntegerDigits: number;  // 1\r\n        minimumFractionDigits: number; // 0\r\n        maximumFractionDigits: number; // 3\r\n        // useGrouping?: boolean;           // true\r\n        // currency?: string;\r\n    };\r\n    tpLocaleCurrency?: {\r\n        style: string;                 // \"currency\"\r\n        minimumIntegerDigits: number;  // 1\r\n        minimumFractionDigits: number; // 0\r\n        maximumFractionDigits: number; // 3\r\n        // useGrouping?: boolean;           // true\r\n        currency: string;\r\n    };\r\n    tpCommon: {\r\n        cancel: string; // tinyplus2 confirm_cancel\r\n    };\r\n    tpAccessdeclined: {\r\n        label: string;\r\n        info: string;\r\n    };\r\n    tpCollapsebutton: {\r\n        text: string;\r\n    };\r\n    tpCount: {\r\n        periodCharging: string;\r\n        ondemandCharging: string;\r\n        using: string;\r\n        frozened: string;\r\n        illegalFrozened: string;\r\n        overdue: string;\r\n        arrear: string;\r\n        // 包周期\r\n        period_using: string;\r\n        period_gracing: string;\r\n        period_frozen: string;\r\n        period_illegalfrozen: string;\r\n        period_policefrozen: string;\r\n\r\n        period_toondemand: string;\r\n        // /按需\r\n        ondemand_using: string;\r\n        ondemand_gracing: string;\r\n        ondemand_frozen: string;\r\n        ondemand_illegalfrozen: string;\r\n        ondemand_illegalfrozen_arrear: string;\r\n        ondemand_policefrozen: string;\r\n    };\r\n    tpCountdown: {\r\n        period_using: string;\r\n        period_gracing: string;\r\n        period_frozen: string;\r\n        period_illegalfrozen: string;\r\n        period_policefrozen: string;\r\n        period_toondemand: string;\r\n        // /按需\r\n        ondemand_using: string;\r\n        ondemand_gracing: string;\r\n        ondemand_frozen: string;\r\n        ondemand_illegalfrozen: string;\r\n        ondemand_illegalfrozen_arrear: string;\r\n        ondemand_policefrozen: string;\r\n        spliter: string;\r\n        day: string;\r\n        hour: string;\r\n        minute: string;\r\n        second: string;\r\n        create_time: string;\r\n        expire_time: string;\r\n        frozen_time: string;\r\n        release_time: string;\r\n        arrears_time: string;\r\n        toonneed_time: string;\r\n    };\r\n    tpCountdownalert: {\r\n        period_gracing: string;\r\n        period_frozen: string;\r\n        period_illegalfrozen: string;\r\n        period_policefrozen: string;\r\n        ondemand_gracing: string;\r\n        ondemand_frozen: string;\r\n        ondemand_illegalfrozen: string;\r\n        ondemand_illegalfrozen_arrear: string;\r\n        ondemand_policefrozen: string;\r\n        recharge: string;\r\n        renew: string;\r\n        day: string;\r\n        hour: string;\r\n        minute: string;\r\n        second: string;\r\n        phoneNumber: string;\r\n    };\r\n    tpCopy: {\r\n        successTip: string;\r\n    };\r\n    tpCurrencySymbol?: string;\r\n    tpInfo: {\r\n        unverified: string;\r\n        restricted: string;\r\n    };\r\n    tpBeingmaintained: {\r\n        label: string;\r\n        maintainTime: string;\r\n    };\r\n    tpBeta: {\r\n        applyService: string,\r\n        more: string,\r\n        apply: string\r\n    };\r\n    tpBinding: {\r\n        path: string,\r\n        firstMessageTitle: string,\r\n        firstMessageContent: string,\r\n        firstMessageOkButtonText: string,\r\n        secondMessageTitle: string,\r\n        secondMessageContent: string,\r\n        secondMessageOkButtonText: string,\r\n        // 在该组件中定义同一词条，受限组件从后台获取词条，需特殊处理\r\n        secondMessageSystemBusy: string,\r\n        secondMessageFail: string,\r\n        secondMessageToOperation: string\r\n    };\r\n    tpBuylayer?: { // TODO:\r\n        buyLayer_priceDiscount_label: string,\r\n        save: string,\r\n        sale: string,\r\n        buyLayer_betaFree_label: string,\r\n        buyLayer_cost_label: string,\r\n        buyLayer_freeCharge_detail: string,\r\n        buyLayer_freeCharge_detailLink: string,\r\n        buyLayer_costExplain_label: string,\r\n        buyLayer_priceCalculator_label: string,\r\n        // 使用场景：省:$68.65\r\n        buyLayer_cost_linklabel: string,\r\n        buyLayer_cost_price: string,\r\n        buyLayer_cost_pricelist: string,\r\n        // buyLayer_costDetail_label翻译词条：'点击这里了解计费详情',\r\n        buyLayer_costDetail_label: {\r\n            text_before_link: string,\r\n            link_info: string,\r\n            text_after_link: string\r\n        },\r\n        // 退费场景下的词条\r\n        buyLayer_cost_label_refund_detail: string,\r\n        buyLayer_cost_label_refund_majorprice: string,\r\n        buyLayer_cost_type: string,\r\n        buyLayer_cost_pricelist_label_before: string,\r\n        buyLayer_cost_pricelist_label_after: string,\r\n        buyLayer_cost_label_refund: string\r\n    };\r\n    tpDiscounts?: {\r\n        discounts: string,\r\n        discounts_details: string,\r\n        discounts_selected: string,\r\n        discounts_expireTime: string,\r\n        discounts_detailLink_type0: string,\r\n        discounts_detailLink_type1: string,\r\n        discounts_detailLink_type2: string,\r\n        savings: string,\r\n        discounts_label: string,\r\n        discounts_type: string,\r\n        discounts_available: string,\r\n        no_discounts: string\r\n    };\r\n    tpFeedback?: {\r\n        open_halfModal: {\r\n            text1: string,\r\n            click: string,\r\n            text2: string\r\n        },\r\n        title: string,\r\n        title_desc: string,\r\n        // feedback问题列表\r\n        question1_title: string,\r\n        question1_title_desc: string,\r\n        question1_title_sati: string,\r\n        question_checked_limited: string,\r\n        // 以下是满意的八个选项的label\r\n        question_sati_options1: string,\r\n        question_sati_options2: string,\r\n        question_sati_options3: string,\r\n        question_sati_options4: string,\r\n        question_sati_options5: string,\r\n        question_sati_options6: string,\r\n        question_sati_options7: string,\r\n        question_sati_options8: string,\r\n\r\n        question1_title_unSati: string,\r\n        // 以下是不满意的八个选项的label\r\n        question_unSati_options1: string,\r\n        question_unSati_options2: string,\r\n        question_unSati_options3: string,\r\n        question_unSati_options4: string,\r\n        question_unSati_options5: string,\r\n        question_unSati_options6: string,\r\n        question_unSati_options7: string,\r\n        question_unSati_options8: string,\r\n        // 最后一道固定的题目\r\n        questionLast_title: string,\r\n        // 提交成功的词条\r\n        submit_success: string,\r\n        // placeholder词条\r\n        placeholder: {\r\n            text: string,\r\n            textarea: string\r\n        },\r\n        // 校验信息\r\n        unifyvalid: string,\r\n        submit_button: string,\r\n        // score组件中的词条\r\n        score_text: {\r\n            minText: string,\r\n            maxText: string\r\n        }\r\n    };\r\n    tpFoldtext: {\r\n        showMore: string;\r\n        showLess: string;\r\n    };\r\n    tpFrozenpage: {\r\n        label: string,\r\n        back_service: string\r\n    };\r\n    tpIdentification?: {\r\n        path?: string,\r\n        firstMessageContent?: string,\r\n        firstMessageOkButtonText?: string,\r\n        secondMessageTitle?: string,\r\n        secondMessageContent?: string,\r\n        secondMessageOkButtonText?: string,\r\n        // 在该组件中定义同一词条，受限组件从后台获取词条，需特殊处理\r\n        secondMessageSystemBusy?: string,\r\n        secondMessageFail?: string,\r\n        secondMessageToOperation?: string\r\n    };\r\n    tpIdentityauth: {\r\n        okBtn: string,\r\n        change: string,\r\n        bind: string,\r\n        no_bind: string,\r\n        has_bound: string,\r\n        refresh_tip: string,\r\n        title: string,\r\n        verification_method: string,\r\n        bind_mobile: string,\r\n        bind_email: string,\r\n        verification_mfa: string,\r\n        verification_mobile: string,\r\n        verification_email: string,\r\n        get_verification_code: string,\r\n        verification_placeholder: string,\r\n        email_verification_placeholder: string,\r\n        system_busy: string;\r\n        verification_code: string,\r\n        method_alert_label: string,\r\n        not_admin_method_alert_label: string,\r\n        method_alert_label_link: string,\r\n        method_alert_label_link_url: string,\r\n        mfa_label_tip: string,\r\n        bind_mfa_help_tip: string,\r\n        next_get_verification_code: string,\r\n        verification_code_error: string,\r\n        get_verification_code_times: string,\r\n        operation_lock: string,\r\n        operation_lock_btn_tip: string\r\n    };\r\n    tpNonsupportregion: {\r\n        label: string;\r\n        supportLabel: string;\r\n    };\r\n    tpPricecalc: {\r\n        label: string,\r\n        detailHrefBeforeText: string,\r\n        detailHrefText: string,\r\n        detailHrefAfterText: string\r\n    };\r\n    tpPriceline: {\r\n        carveTitle: string ,\r\n        tagPrefix: string,\r\n        tagUnit: string,\r\n        tagCurrency: string\r\n    };\r\n    tpPurchaselist: {\r\n        purchase_list_cost_label: string,\r\n        purchase_list_nodata_label: string,\r\n        purchase_list_clear_label: string\r\n    };\r\n    tpRecharge: {\r\n        path: string,\r\n        firstMessageTitle: string,\r\n        firstMessageContent: string,\r\n        firstMessageContentLabel: string,\r\n        firstMessageContentHref: string,\r\n        firstMessageOkButtonText: string,\r\n        secondMessageTitle: string,\r\n        secondMessageContent: string,\r\n        secondMessageOkButtonText: string,\r\n        // 在该组件中定义同一词条，受限组件从后台获取词条，需特殊处理\r\n        secondMessageSystemBusy: string,\r\n        secondMessageFail: string,\r\n        secondMessageToOperation: string\r\n    };\r\n    tpRecommend: {\r\n        label: string;\r\n    };\r\n    tpRegion: {\r\n        unSupport: string;\r\n    };\r\n    tpRegionselect?: {\r\n        regionSelect_province_label: string,\r\n        regionSelect_city_label: string,\r\n        regionSelect_county_label: string\r\n    };\r\n    tpRename: {\r\n        tip: string;\r\n        okButton: string;\r\n        modalHeader: string;\r\n        inValidMessage: string;\r\n    };\r\n    tpScore: {\r\n        minText: string;\r\n        maxText: string;\r\n    };\r\n    tpSearchbox: {\r\n        addPlaceholder: string;\r\n        allValues: string;\r\n        buttonOk: string;\r\n        buttonCancel: String;\r\n        clearAll: string;\r\n        emptyValue: string;\r\n        help: string;\r\n        switchText: string;\r\n        tagKey: string;\r\n        tagValue: string;\r\n        minValueText: string,\r\n        maxValueText: string,\r\n        rangeMinErr: string,\r\n        rangeMaxErr: string,\r\n        rangeNumberTitle: string,\r\n        rangeDateTitle: string,\r\n        rangeBeginLabel: string;\r\n        rangeEndLabel: string;\r\n        // help 提示弹窗内容\r\n        modalTitle: string;\r\n        ruleTitle1: string;\r\n        format: string;\r\n        rulekeyword1: string;\r\n        ruleDetail1: string;\r\n        autoDetection: string;\r\n        ruleTitle2: string;\r\n        rulekeyword2: string;\r\n        ruleDetail2: string;\r\n        ruleTitle3: string;\r\n        rulekeyword3: string;\r\n        rulekeyword32: string;\r\n        ruleDetail3: string;\r\n        name: string;\r\n        status: string;\r\n        running: string;\r\n        creating: string;\r\n        stopped: string;\r\n        restarting: string;\r\n        tag: string;\r\n    };\r\n    tpSwiper: {\r\n        prompt: string\r\n    };\r\n    tpSupportMFA?: boolean;\r\n    tpContactsurvey: {\r\n        contactSurvey_question1_title: string,\r\n        contactSurvey_question2_title: string,\r\n        contactSurvey_question2_placeholder: string,\r\n        contactSurvey_score_text: {\r\n            minText: string,\r\n            maxText: string\r\n        },\r\n        contactSurvey_submit: string,\r\n        contactSurvey_submit_success: string\r\n    };\r\n    tpRegionName?: string;\r\n}\r\n"]}