"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.cfApiCacheCtrl = void 0;
var StorageService_1 = require("./StorageService");
var PromisificationError = /** @class */ (function (_super) {
    __extends(PromisificationError, _super);
    function PromisificationError(message) {
        var _this = _super.call(this, message) || this;
        _this.name = 'PromisificationError';
        return _this;
    }
    return PromisificationError;
}(Error));
if (!window.cfDataIndexedDBS) {
    window.cfDataIndexedDBS = {};
}
var cfIndexedDBservice = {
    /*
        @params {string} dbName 要连接的数据库名
        @params {string} dbVersion 要连接的数据库版本号
        @params {{name:option{keyPath,autoIncrement}} 数据对象信息
        @return {Promise.resolve(IDBDatabase)/Promise.reject()} 连接成功返回该库的操作实例IDBDatabase实例对象
    */
    openDB: function (dbName, dbVersion, stores) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var indexedDB = _this._checkedIDBSupport();
            if (!indexedDB) {
                reject(new PromisificationError('checkedIDBSupport false'));
                return;
            }
            if (!window.cfDataIndexedDBS[dbName] || dbVersion) {
                dbVersion = dbVersion || 1;
                var cfCacheDB_1 = indexedDB.open(dbName, dbVersion);
                cfCacheDB_1.onupgradeneeded = function () {
                    // 如果客户端没有数据库则触发
                    // ...执行初始化...
                    var db = cfCacheDB_1.result;
                    var keys = Object.keys(stores);
                    keys.forEach(function (item) {
                        if (db.objectStoreNames.contains(item)) {
                            db.deleteObjectStore(item);
                        }
                        db.createObjectStore(item, stores[item]);
                    });
                };
                cfCacheDB_1.onsuccess = function () {
                    window.cfDataIndexedDBS[dbName] = cfCacheDB_1.result;
                    resolve(window.cfDataIndexedDBS[dbName]);
                };
                cfCacheDB_1.onerror = function () {
                    reject(new PromisificationError('open cfIndexedDB error'));
                };
            }
            else {
                resolve(window.cfDataIndexedDBS[dbName]);
            }
        });
    },
    /*
        @params {string} dbName 要连接的数据库名
        @params {obj} datas 要存储的数据对象，键是表名，数据是存往该表的数据集
        @return {Promise.resolve(datas)/Promise.reject()} 连接成功返回所存的数据对象
    */
    setData: function (dbName, datas) {
        return new Promise(function (resolve, reject) {
            if (window.cfDataIndexedDBS[dbName].objectStoreNames.length > 0) {
                var stores = Object.keys(datas);
                var transaction_1 = window.cfDataIndexedDBS[dbName].transaction(stores[0], 'readwrite');
                stores.forEach(function (store) {
                    var cfCacheWrite = transaction_1.objectStore(store);
                    datas[store].forEach(function (item) {
                        cfCacheWrite.put(item); // 键相同则替换之
                    });
                });
                transaction_1.oncomplete = function () {
                    resolve(datas);
                };
                transaction_1.onerror = function (_err) {
                    reject(new PromisificationError('transaction setData error'));
                };
            }
        });
    },
    /*
        @params {string} dbName 要连接的数据库名
        @params {string} store 数据所在的表
        @params {string} key 键
        @return {Promise.resolve(data)/Promise.reject()} 所查的数据
    */
    getDataByKey: function (dbName, store, key) {
        return new Promise(function (resolve, reject) {
            if (window.cfDataIndexedDBS[dbName]) {
                var data_1 = window.cfDataIndexedDBS[dbName]
                    .transaction(store, 'readonly')
                    .objectStore(store)
                    .get(key);
                data_1.onsuccess = function () {
                    if (data_1.result) {
                        resolve(data_1.result);
                    }
                    else {
                        reject(new PromisificationError('transaction getData error'));
                    }
                };
                data_1.onerror = function () {
                    reject(new PromisificationError('transaction getData error'));
                };
            }
            else {
                reject(new PromisificationError('cfIndexedDB instance not exist'));
            }
        });
    },
    // indexedDB 兼容性检测
    _checkedIDBSupport: function () {
        var indexedDB = window.indexedDB ||
            window.mozIndexedDB ||
            window.webkitIndexedDB ||
            window.msIndexedDB ||
            false;
        return indexedDB;
    },
};
// cfApiCacheStore cfCacheDB
exports.cfApiCacheCtrl = {
    cfIndexedDBservice: cfIndexedDBservice,
    isSupportIDB: true,
    dbname: 'cfCacheDB',
    store: 'cfApiCacheStore',
    toFetchList: [],
    initCFCache: function (dbname, version, stores) {
        var _this = this;
        // 获取缓存indexedDB操作对象，和缓存时间表
        return new Promise(function (resolve) {
            _this.dbname = dbname;
            _this.cfIndexedDBservice
                .openDB(dbname, version, stores)
                .then(function (_result) {
                resolve(_this.isSupportIDB);
            })
                .catch(function (_err) {
                _this.isSupportIDB = false;
                resolve(_this.isSupportIDB);
            });
        });
    },
    setCache: function (realKey, data, cacheConfig) {
        var _this = this;
        var store = cacheConfig.store || this.store;
        var dbname = cacheConfig.dbname || this.dbname;
        var cacheTimeout = cacheConfig.cacheTimeout || 3600;
        var cacheVersion = cacheConfig.cacheVersion || 'cfdata-default';
        var initConfig = {
            store: store,
            dbname: dbname,
            cacheTimeout: cacheTimeout,
            cacheVersion: cacheVersion,
        };
        var datas = {};
        datas[initConfig.store] = [
            {
                key: realKey,
                value: data,
                cacheDeadTime: Date.now() + initConfig.cacheTimeout * 1000,
                cacheVersion: initConfig.cacheVersion,
            },
        ];
        if (realKey === 'cf_regions_zh-cn' || realKey === 'cf_regions_en-us') {
            var data_2 = datas[initConfig.store][0].value;
            StorageService_1.StorageService.setLocalStorage(realKey, data_2, initConfig.cacheTimeout, cacheVersion);
        }
        return new Promise(function (resolve) {
            _this.cfIndexedDBservice
                .setData(initConfig.dbname, datas)
                .then(function (data) {
                resolve(data);
            })
                .catch(function () {
                var data = datas[initConfig.store][0].value;
                StorageService_1.StorageService.setLocalStorage(realKey, data, initConfig.cacheTimeout);
                resolve(data);
            });
        });
    },
    // 超时数据如果是缓存优先读取,则返回null,如果是容灾场景则返回
    getCache: function (key, cacheVersion, store, dbname, isErr) {
        var _this = this;
        if (store === void 0) { store = this.store; }
        if (dbname === void 0) { dbname = this.dbname; }
        if (isErr === void 0) { isErr = false; }
        cacheVersion = cacheVersion || 'cfdata-default';
        return new Promise(function (resolve) {
            _this.cfIndexedDBservice
                .getDataByKey(dbname, store, key)
                .then(function (result) {
                var data;
                if (result) {
                    if (isErr || (result.cacheVersion === cacheVersion && Date.now() < result.cacheDeadTime)) {
                        data = result.value;
                        resolve(data);
                    }
                    else {
                        resolve(null);
                    }
                }
                else {
                    data = StorageService_1.StorageService.getLocalStorage(key, isErr, cacheVersion);
                    resolve(data);
                }
            })
                .catch(function () {
                var data = StorageService_1.StorageService.getLocalStorage(key, isErr, cacheVersion);
                resolve(data);
            });
        });
    },
    cfCacheApiPromise: function (promise, realKey, cacheConfig) {
        var _this = this;
        var store = cacheConfig.store || this.store;
        var dbname = cacheConfig.dbname || this.dbname;
        var cacheTimeout = cacheConfig.cacheTimeout || 3600;
        var cacheVersion = cacheConfig.cacheVersion || 'cfdata-default';
        var initConfig = {
            store: store,
            dbname: dbname,
            cacheTimeout: cacheTimeout,
            cacheVersion: cacheVersion,
        };
        return new Promise(function (resolve, reject) {
            promise
                .then(function (data) {
                if (!cacheConfig.noCache) {
                    // 如果是缓存优先，则此处data本身就为缓存数据，无需再次缓存
                    _this.setCache(realKey, data, initConfig);
                }
                resolve(data);
            })
                .catch(function () {
                _this.getCache(realKey, cacheVersion, store, dbname, true).then(function (data) {
                    if (data) {
                        resolve(data);
                    }
                    else {
                        reject(new PromisificationError('no cache data'));
                    }
                });
            });
        });
    },
};
//# sourceMappingURL=data:application/json;base64,