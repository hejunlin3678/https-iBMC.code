/**
 * StorageService APIï¼š
 *
 * CookieStorage
 * public static setCookie(key: string, value: any, ttl?: number)
 * public static getCookie(key: string): any
 * public static delCookie(key: string): void
 * public static flushCookie(): void
 *
 * LocalStorage
 * public static getLocalStorage(key: string): any
 * public static setLocalStorage(key: string, value: any, expires?: number)
 * public static delLocalStorage(name: string): boolean
 *
 * SessionStorage
 * public static getSessionStorage(key: string): any
 * public static setSessionStorage(key: string, value: any, expires?: number)
 * public static delSessionStorage(name: string): boolean
 */
export declare class StorageService {
    static cookieStorage: any;
    static specialKeys: string[];
    constructor();
    static setCookie(key: string, value: any, expires?: number, domain?: string): void;
    static getCookie(key: string): any;
    static delCookie(key: string): void;
    static flushCookie(): void;
    /**
     * getLocalStorage: retrieves a key from localStorage previously set with setLocalStorage().
     * @param key <string> : localStorage key
     * @return
     *        <string> : value of localStorage key
     *        null : in case of expired key or failure
     */
    static getLocalStorage(key: string, isErr?: boolean, cacheVersion?: string): any;
    static JsonParse(value: string): any;
    static endsWith(str: string, suffix: string): boolean;
    static clearExpiredStorage(): void;
    /**
     * setLocalStorage: writes a key into localStorage setting a expire time
     * @param key localStorage key
     * @param value localStorage value
     * @param expires number of seconds from now to expire the key
     * @return <boolean> : telling if operation succeeded
     */
    static setLocalStorage(key: string, value: any, expires?: number, cacheVersion?: string): any;
    static delLocalStorage(name: string): boolean;
    /**
     * getSessionStorage: retrieves a key from sessionStorage previously set with setSessionStorage().
     * @param key <string> : sessionStorage key
     * @return
     *        <string> : value of sessionStorage key
     *        null : in case of expired key or failure
     */
    static getSessionStorage(key: string): any;
    /**
     * setSessionStorage: writes a key into sessionStorage
     * @param key sessionStorage key
     * @param value sessionStorage value
     * @return <boolean> : telling if operation succeeded
     */
    static setSessionStorage(key: string, value: any): boolean;
    static delSessionStorage(name: string): boolean;
}
