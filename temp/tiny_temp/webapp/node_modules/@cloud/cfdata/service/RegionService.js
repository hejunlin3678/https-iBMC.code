"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegionService = void 0;
var HttpService_1 = require("./HttpService");
var ApiService_1 = require("./ApiService");
var FrameData_1 = require("../FrameData");
var UserData_1 = require("../UserData");
var RegionService = /** @class */ (function (_super) {
    __extends(RegionService, _super);
    function RegionService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RegionService.queryRegions = function (options) {
        options = options || {};
        var promise = HttpService_1.HttpService.get({
            url: FrameData_1.FrameData.getAppWebPath() + '/rest/silvan/rest/v1.0/regions',
            timeout: 60000,
            params: {
                selfDevelop: options.selfDevelop,
                alliance: options.alliance,
            },
            targetUrl: 'silvan=/silvan/rest/v1.0/regions',
            headers: {
                'Frame-Domain-Type': ApiService_1.ApiService.getDomainType(),
            },
            cacheKey: {
                locale: FrameData_1.FrameData.getLanguage(),
                cfApiName: 'regions',
                userId: UserData_1.UserData.getCfUserSync().userId,
            },
            cacheTimeout: 604800,
            cacheResult: true,
        });
        return promise;
    };
    /**
     * @internal
     * Querys regions from rm
     * @param options
     * @returns
     */
    RegionService.queryRegionsFromRm = function (options) {
        options = options || {};
        var promise = HttpService_1.HttpService.get({
            url: {
                s: FrameData_1.FrameData.getAppWebPath() + '/rest/lcs/v1/regionMgr/domains/{domain_id}/regions',
                o: {
                    domain_id: options.domainId,
                },
            },
            timeout: 60000,
            params: {
                selfDevelop: options.selfDevelop,
                alliance: options.alliance,
                link: true,
                locale: FrameData_1.FrameData.getLanguage(),
            },
            targetUrl: 'lcs=/v1/regionMgr/internal/domains/' + options.domainId + '/regions',
            headers: {
                'Frame-Domain-Type': ApiService_1.ApiService.getDomainType(),
            },
            cacheKey: {
                locale: FrameData_1.FrameData.getLanguage(),
                cfApiName: 'regions',
                userId: UserData_1.UserData.getCfUserSync().userId,
            },
            cacheTimeout: 604800,
            cacheResult: true,
        });
        return promise;
    };
    RegionService.changeRegion = function (options) {
        options = options || {};
        var promise = HttpService_1.HttpService.get({
            url: FrameData_1.FrameData.getAppWebPath() + '/rest/changeRegion',
            timeout: 60000,
            mask: true,
            params: {
                project: options.project,
            },
        });
        return promise;
    };
    RegionService.queryMaintenanceRegions = function () {
        var promise = HttpService_1.HttpService.get({
            url: FrameData_1.FrameData.getAppWebPath() + '/rest/maintenanceRegion',
            timeout: 60000,
            headers: {
                'x-request-from': 'Framework',
            },
        });
        return promise;
    };
    return RegionService;
}(ApiService_1.ApiService));
exports.RegionService = RegionService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVnaW9uU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2aWNlL1JlZ2lvblNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDZDQUE0QztBQUM1QywyQ0FBMEM7QUFDMUMsMENBQXlDO0FBQ3pDLHdDQUF1QztBQUV2QztJQUFtQyxpQ0FBVTtJQUE3Qzs7SUF1RkEsQ0FBQztJQXRGaUIsMEJBQVksR0FBMUIsVUFBMkIsT0FBTztRQUM5QixPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUN4QixJQUFJLE9BQU8sR0FBRyx5QkFBVyxDQUFDLEdBQUcsQ0FBQztZQUMxQixHQUFHLEVBQUUscUJBQVMsQ0FBQyxhQUFhLEVBQUUsR0FBRyxnQ0FBZ0M7WUFDakUsT0FBTyxFQUFFLEtBQUs7WUFDZCxNQUFNLEVBQUU7Z0JBQ0osV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXO2dCQUNoQyxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7YUFDN0I7WUFDRCxTQUFTLEVBQUUsa0NBQWtDO1lBQzdDLE9BQU8sRUFBRTtnQkFDTCxtQkFBbUIsRUFBRSx1QkFBVSxDQUFDLGFBQWEsRUFBRTthQUNsRDtZQUNELFFBQVEsRUFBRTtnQkFDTixNQUFNLEVBQUUscUJBQVMsQ0FBQyxXQUFXLEVBQUU7Z0JBQy9CLFNBQVMsRUFBRSxTQUFTO2dCQUNwQixNQUFNLEVBQUUsbUJBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxNQUFNO2FBQzFDO1lBQ0QsWUFBWSxFQUFFLE1BQU07WUFDcEIsV0FBVyxFQUFFLElBQUk7U0FDcEIsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ1csZ0NBQWtCLEdBQWhDLFVBQWlDLE9BQU87UUFDcEMsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFDeEIsSUFBSSxPQUFPLEdBQUcseUJBQVcsQ0FBQyxHQUFHLENBQUM7WUFDMUIsR0FBRyxFQUFFO2dCQUNELENBQUMsRUFBRSxxQkFBUyxDQUFDLGFBQWEsRUFBRSxHQUFHLG9EQUFvRDtnQkFDbkYsQ0FBQyxFQUFFO29CQUNDLFNBQVMsRUFBRSxPQUFPLENBQUMsUUFBUTtpQkFDOUI7YUFDSjtZQUNELE9BQU8sRUFBRSxLQUFLO1lBQ2QsTUFBTSxFQUFFO2dCQUNKLFdBQVcsRUFBRSxPQUFPLENBQUMsV0FBVztnQkFDaEMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO2dCQUMxQixJQUFJLEVBQUUsSUFBSTtnQkFDVixNQUFNLEVBQUUscUJBQVMsQ0FBQyxXQUFXLEVBQUU7YUFDbEM7WUFDRCxTQUFTLEVBQUUscUNBQXFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsR0FBRyxVQUFVO1lBQ2hGLE9BQU8sRUFBRTtnQkFDTCxtQkFBbUIsRUFBRSx1QkFBVSxDQUFDLGFBQWEsRUFBRTthQUNsRDtZQUNELFFBQVEsRUFBRTtnQkFDTixNQUFNLEVBQUUscUJBQVMsQ0FBQyxXQUFXLEVBQUU7Z0JBQy9CLFNBQVMsRUFBRSxTQUFTO2dCQUNwQixNQUFNLEVBQUUsbUJBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxNQUFNO2FBQzFDO1lBQ0QsWUFBWSxFQUFFLE1BQU07WUFDcEIsV0FBVyxFQUFFLElBQUk7U0FDcEIsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVhLDBCQUFZLEdBQTFCLFVBQTJCLE9BQU87UUFDOUIsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFDeEIsSUFBSSxPQUFPLEdBQUcseUJBQVcsQ0FBQyxHQUFHLENBQUM7WUFDMUIsR0FBRyxFQUFFLHFCQUFTLENBQUMsYUFBYSxFQUFFLEdBQUcsb0JBQW9CO1lBQ3JELE9BQU8sRUFBRSxLQUFLO1lBQ2QsSUFBSSxFQUFFLElBQUk7WUFDVixNQUFNLEVBQUU7Z0JBQ0osT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO2FBQzNCO1NBRUosQ0FBQyxDQUFDO1FBQ0gsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVhLHFDQUF1QixHQUFyQztRQUNJLElBQUksT0FBTyxHQUFHLHlCQUFXLENBQUMsR0FBRyxDQUFDO1lBQzFCLEdBQUcsRUFBRSxxQkFBUyxDQUFDLGFBQWEsRUFBRSxHQUFHLHlCQUF5QjtZQUMxRCxPQUFPLEVBQUUsS0FBSztZQUNkLE9BQU8sRUFBRTtnQkFDTCxnQkFBZ0IsRUFBRSxXQUFXO2FBQ2hDO1NBRUosQ0FBQyxDQUFDO1FBQ0gsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUNMLG9CQUFDO0FBQUQsQ0FBQyxBQXZGRCxDQUFtQyx1QkFBVSxHQXVGNUM7QUF2Rlksc0NBQWEifQ==