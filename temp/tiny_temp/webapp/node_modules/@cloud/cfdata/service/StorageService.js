"use strict";
/**
 * StorageService API：
 *
 * CookieStorage
 * public static setCookie(key: string, value: any, ttl?: number)
 * public static getCookie(key: string): any
 * public static delCookie(key: string): void
 * public static flushCookie(): void
 *
 * LocalStorage
 * public static getLocalStorage(key: string): any
 * public static setLocalStorage(key: string, value: any, expires?: number)
 * public static delLocalStorage(name: string): boolean
 *
 * SessionStorage
 * public static getSessionStorage(key: string): any
 * public static setSessionStorage(key: string, value: any, expires?: number)
 * public static delSessionStorage(name: string): boolean
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageService = void 0;
var cookieStorage = {
    cache: [],
    setItem: function (key, value, ttl, domain) {
        var cookieString = key + '=' + value + ';path=/;domain=' + domain;
        // 判断是否设置过期时间
        if (ttl > 0) {
            var date = new Date();
            date.setTime(date.getTime() + ttl * 1000);
            cookieString = cookieString + '; expires=' + date.toUTCString();
        }
        var hasCache = this.cache.findIndex(function (item) {
            return item.key === key && item.domain === domain;
        });
        if (hasCache === -1) {
            this.cache.push({
                key: key,
                domain: domain,
            });
        }
        document.cookie = cookieString;
    },
    getItem: function (key, isLatest) {
        if (isLatest === void 0) { isLatest = false; }
        var cookies = document.cookie.split('; ');
        var arr = null;
        var i = 0;
        var result = '';
        while (i < cookies.length) {
            arr = cookies[i++].split('=');
            if (arr[0] === key) {
                if (isLatest)
                    result = arr[1];
                else
                    return arr[1];
            }
        }
        return result;
    },
    removeItem: function (key, domain) {
        var date = new Date();
        date.setTime(date.getTime() - 10000);
        domain
            ? (document.cookie = key + '=v; expires=' + date.toUTCString() + ';path=/;domain=' + domain)
            : (document.cookie = key + '=v; expires=' + date.toUTCString());
    },
    clear: function () {
        var cache = this.cache;
        var i = 0;
        while (i < cache.length) {
            var _a = cache[i++], key = _a.key, domain = _a.domain;
            this.removeItem(key, domain);
        }
    },
};
var StorageService = /** @class */ (function () {
    function StorageService() {
    }
    StorageService.setCookie = function (key, value, expires, domain) {
        var storage = StorageService.cookieStorage;
        if (typeof value === 'object') {
            value = JSON.stringify(value);
        }
        var defaultDomain = document.domain.replace(/.+?\./, '');
        var specialKeysDomain = document.domain
            .split('.')
            .slice(-2)
            .join('.');
        var _domain = domain ? domain : this.specialKeys.includes(key) ? specialKeysDomain : defaultDomain;
        storage.setItem(key, value, expires, _domain);
    };
    StorageService.getCookie = function (key) {
        var storage = StorageService.cookieStorage;
        var value = storage.getItem(key, this.specialKeys.includes(key));
        try {
            return JSON.parse(value);
        }
        catch (e) {
            return value;
        }
    };
    StorageService.delCookie = function (key) {
        var storage = StorageService.cookieStorage;
        storage.removeItem(key);
    };
    // 在页面点击注销的时候调用该API
    StorageService.flushCookie = function () {
        var storage = StorageService.cookieStorage;
        storage.clear();
    };
    /**
     * getLocalStorage: retrieves a key from localStorage previously set with setLocalStorage().
     * @param key <string> : localStorage key
     * @return
     *        <string> : value of localStorage key
     *        null : in case of expired key or failure
     */
    StorageService.getLocalStorage = function (key, isErr, cacheVersion) {
        if (isErr === void 0) { isErr = false; }
        if (cacheVersion === void 0) { cacheVersion = 'cfdata-default'; }
        if (!window.localStorage)
            return;
        var versionItem = localStorage.getItem(key + '_cacheVersion');
        var expiresItem = localStorage.getItem(key + '_expiresIn');
        var value = localStorage.getItem(key);
        if (expiresItem === undefined || expiresItem === null)
            return StorageService.JsonParse(value);
        var expiresIn = Number(expiresItem) || 0;
        if (cacheVersion !== versionItem) {
            StorageService.delLocalStorage(key);
            return null;
        }
        if (expiresIn < Date.now() && !isErr) {
            StorageService.delLocalStorage(key);
            return null;
        }
        return StorageService.JsonParse(value);
    };
    StorageService.JsonParse = function (value) {
        try {
            var res = JSON.parse(value);
            return res;
        }
        catch (error) {
            return value;
        }
    };
    StorageService.endsWith = function (str, suffix) {
        if (typeof str !== 'string' || typeof suffix !== 'string' || str === '' || suffix === '')
            return false;
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    };
    // 清除过期的cache
    StorageService.clearExpiredStorage = function () {
        Object.keys(localStorage).forEach(function (item) {
            if (StorageService.endsWith(item, '_expiresIn')) {
                var expireTime = localStorage.getItem(item);
                if (!expireTime || !Number(expireTime) || Number(expireTime) < Date.now()) {
                    StorageService.delLocalStorage(item.replace('_expiresIn', ''));
                }
            }
        });
    };
    /**
     * setLocalStorage: writes a key into localStorage setting a expire time
     * @param key localStorage key
     * @param value localStorage value
     * @param expires number of seconds from now to expire the key
     * @return <boolean> : telling if operation succeeded
     */
    StorageService.setLocalStorage = function (key, value, expires, cacheVersion) {
        if (cacheVersion === void 0) { cacheVersion = 'cfdata-default'; }
        if (!localStorage)
            return;
        StorageService.clearExpiredStorage();
        var expireSecs;
        if (expires === undefined || expires === null) {
            expireSecs = 24 * 60 * 60; // default: seconds for 1 day
        }
        else {
            expireSecs = Math.abs(expires); // make sure it's positive
        }
        var schedule = Date.now() + expireSecs * 1000;
        try {
            localStorage.setItem(key, JSON.stringify(value));
            localStorage.setItem(key + '_expiresIn', schedule.toString());
            localStorage.setItem(key + '_cacheVersion', cacheVersion);
        }
        catch (e) {
            // localstorage容量不够，根据保存的时间删除最早的
            if (e.name.toUpperCase().indexOf('QUOTA') >= 0) {
                var item = void 0;
                var tempScripts = [];
                // 先把所有的缓存对象来出来，放到 tempScripts里
                for (item in localStorage) {
                    if (item.indexOf(key) === 0) {
                        tempScripts.push(JSON.parse(localStorage[item]));
                    }
                }
                // 如果有缓存对象
                if (tempScripts.length) {
                    // 按缓存时间升序排列数组
                    tempScripts.sort(function (a, b) { return a.stamp - b.stamp; });
                    // 删除缓存时间最早的js
                    StorageService.delLocalStorage(tempScripts[0].key);
                    // 删除后在再添加，利用递归完成
                    return StorageService.setLocalStorage(key, value, expireSecs);
                }
                else {
                    // 已经没有可以删除的缓存对象了，证明这个将要缓存的目标太大了。返回undefined。
                    return;
                }
            }
            else {
                // 其他的错误，例如JSON的解析错误
                return;
            }
        }
        return true;
    };
    /*
     * delLocalStorage: removes a key from localStorage and its sibling expiracy key
     * params: key <string>     : localStorage key to remove
     * returns: <boolean> : telling if operation succeeded
     */
    StorageService.delLocalStorage = function (name) {
        try {
            localStorage.removeItem(name);
            localStorage.removeItem(name + '_expiresIn');
        }
        catch (e) {
            console.log('Error removing key [' + name + '] from localStorage: ' + JSON.stringify(e));
            return false;
        }
        return true;
    };
    /**
     * getSessionStorage: retrieves a key from sessionStorage previously set with setSessionStorage().
     * @param key <string> : sessionStorage key
     * @return
     *        <string> : value of sessionStorage key
     *        null : in case of expired key or failure
     */
    StorageService.getSessionStorage = function (key) {
        if (!window.sessionStorage)
            return;
        try {
            var value = sessionStorage.getItem(key);
            return JSON.parse(value);
        }
        catch (e) {
            console.log('getSessionStorage: Error reading key [' + key + '] from sessionStorage: ' + JSON.stringify(e));
            return null;
        }
    };
    /**
     * setSessionStorage: writes a key into sessionStorage
     * @param key sessionStorage key
     * @param value sessionStorage value
     * @return <boolean> : telling if operation succeeded
     */
    StorageService.setSessionStorage = function (key, value) {
        try {
            sessionStorage.setItem(key, JSON.stringify(value));
        }
        catch (e) {
            console.log('setSessionStorage: Error setting key [' + key + '] : ' + JSON.stringify(e));
            return false;
        }
        return true;
    };
    /*
     * delSessionStorage: removes a key from sessionStorage and its sibling expiracy key
     * params: key <string>     : sessionStorage key to remove
     * returns: <boolean> : telling if operation succeeded
     */
    StorageService.delSessionStorage = function (name) {
        try {
            sessionStorage.removeItem(name);
        }
        catch (e) {
            console.log('Error removing key [' + name + '] from sessionStorage: ' + JSON.stringify(e));
            return false;
        }
        return true;
    };
    StorageService.cookieStorage = cookieStorage;
    StorageService.specialKeys = ['locale', 'cfLatestRecordTimestamp'];
    return StorageService;
}());
exports.StorageService = StorageService;
//# sourceMappingURL=data:application/json;base64,