/**
 * @ignore
 */
export declare class TiDateUtil {
    /**
     * 日期类组件的默认最小值
     */
    static minDate(): Date;
    /**
     * 日期类组件的默认最大值
     */
    static maxDate(): Date;
    /**
     * 判断是不是合法的时间对象
     */
    static isDate(date: object | string): boolean;
    /**
     * @description 最大值时分秒置为23:59:59。
     * 原因：date或者dateRange组件中，如果用户动态设置的value为最大年月日并带有时分秒，而设置的maxValue时分秒比较小时，
     * 校验该value是否小于或等于最大值时，会出错。
     * @param maxValue 最大值
     */
    static changeMaxTime(maxValue: Date): Date;
    /**
     * @description 最小值时分秒置为0:0:0。
     * 原因：date或者dateRange组件中，如果用户设置的minValue带有时分秒，这时动态更新value为最小值年月日并时分秒为很小时，会出错。
     * @param minValue 最小值
     * @returns Date
     */
    static changeMinTime(minValue: Date): Date;
    /**
     * @description 判断两个日期是不是相等：只包括年月日
     * @param newValue 新值
     * @param oldValue 旧值
     */
    static isDateEqual(newValue: Date, oldValue: Date): boolean;
    /**
     * @description 判断两个时间日期是不是相等；
     * @param newValue 新值
     * @param oldValue 旧值
     */
    static isDatetimeEqual(newValue: Date, oldValue: Date): boolean;
    /**
     * @description 判断是不是合法的NowDateTime值
     * 存在nowDateTime值，并且是时间对象，且大于最小值小于最大值
     */
    static isValidNowDateTime(nowDateTime: Date, min: Date, max: Date): boolean;
    /**
     * @description 判断value1是否大于value2
     */
    static isBigger(value1: Date, value2: Date): boolean;
    /**
     * @description 判断value1是否大于value2
     */
    static isBiggerOrEqual(value1: Date, value2: Date): boolean;
    /**
     * @description 判断value1是否小于value2
     */
    static isSmaller(value1: Date, value2: Date): boolean;
    /**
     * @description 将Date类型的日期转换成年月日字符串
     * @param date 要进行转换的日期值
     */
    static getDateStr(date: Date): string;
    /**
     * @description 将Date类型的日期转换成时分秒字符串
     * @param date 要进行转换的日期值
     */
    static getTimeStr(date: Date): string;
    /**
     * @description 判断是不是一个合法的最大值
     * @param min 最小值
     * @param max 最大值
     */
    static isValidMaxValue(min: Date, max: Date): boolean;
    /**
     * @description 判断是不是一个合法的最小值
     * @param min 最小值
     * @param max 最大值
     */
    static isValidMinValue(min: Date, max: Date): boolean;
    /**
     * @description 是否在最大值最小值区间
     * @param min 最小值
     * @param max 最大值
     */
    static isBetweenMaxAndmin(value: Date, min: Date, max: Date): boolean;
    /**
     * @description  12小时制添加AMPM
     */
    static addAmPm(timeFormat: string): string;
    /**
     * @description: 若时间字符串没有一个冒号时处理成合法的事件字符串（加冒号）
     * @param value 时间字符串
     */
    static addColon(value: string): string;
}
