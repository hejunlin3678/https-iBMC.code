/**
 * @ignore
 * 工具类
 */
export declare class Util {
    private static idCounter;
    /**
     * 获得一个唯一标示
     * @param prefix 前缀
     * @returns 唯一标示字符串
     */
    static getUniqueId(prefix: string): string;
    /**
     * 是否未定义
     * @param value 值
     * @returns 是否
     */
    static isUndefined(value: any): boolean;
    /**
     * 是否空
     * @param value 值
     * @returns 是否
     */
    static isNull(value: any): boolean;
    /**
     * 是否String
     * @param value 值
     * @returns 是否
     */
    static isString(value: any): boolean;
    /**
     * 是否Number
     * @param value 值
     * @returns 是否
     */
    static isNumber(value: any): boolean;
    /**
     * 是否空字符串
     * @param value 值
     * @returns 是否
     */
    static isEmptyString(value: string): boolean;
    /**
     * 是否Array
     * @param value 值
     * @returns 是否
     */
    static isArray(value: any): boolean;
    /**
     * 是否函数
     * @param value 值
     * @returns 是否
     */
    static isFunction(value: any): boolean;
    /**
     * 使用固定参数值格式化填充字串
     * @param source 源字串,其中使用{N}代表需要匹配的参数次序,N从0开始
     * @param params Array 参数数组
     */
    static formatEntry(source: string, params: Array<any>): string;
    /**
     * 发出一个HTML事件
     * @param: ele 触发事件的DOM
     * @param: eventName 事件名称
     * @param: [canBubble] 是否冒泡，可选参数默认不冒泡 false
     */
    static trigger(ele: any, eventName: string, canBubble?: boolean): void;
    /**
     * 判断是否为dom元素
     */
    static isElement(ele: any): boolean;
    /**
     * 判断是否支持CSS Var
     */
    static supportsCssVars(): boolean;
    /**
     * 通过tab键在弹窗内切换的时候，焦点需要一直在弹窗内部循环。
     */
    static focusInDialogOnTabchange(event: KeyboardEvent, focusableElements: NodeList): void;
}
export { TiBrowser } from './TiBrowser';
export { TiKeymap } from './TiKeymap';
export { TiLog } from './TiLog';
export { TiDateUtil } from './TiDateUtil';
export { TiTheme } from './TiTheme';
export { ObservableMap } from './ObservableMap';
export { ObservableSet } from './ObservableSet';
