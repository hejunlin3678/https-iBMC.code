/**
 * 位置显示类型定义，其中auto代表自适应位置显示
 */
export declare type TiPositionType = 'top' | 'top-left' | 'top-right' | 'bottom' | 'bottom-left' | 'bottom-right' | 'left' | 'left-top' | 'left-bottom' | 'right' | 'right-top' | 'right-bottom' | 'center' | 'auto' | 'none';
export interface TiHostLayout {
    top: number;
    left: number;
    width: number;
    height: number;
    isFixed: boolean;
}
export interface TiPositionResult {
    position: TiPositionType;
    avilableHeight: number;
    hostLayout?: TiHostLayout;
}
/**
 * @ignore
 * 该类提供公共静态类方法，用于设置在body定位元素基于参照元素的位置信息,提供的核心方法如下：
 * setPosition()
 * 1. 入参为对象，参数信息如下：
 * {
 *   targetEle:需要定位的元素
 *   hostEle：参照元素
 *   position:定位位置
 *   hostSpace：待定位元素和参照元素间距
 *   browserSpace ：待定位元素和浏览器间距, 暂时只在上下位置生效
 *   hOffset: 自定义水平方向的偏移（在定位基础上的水平偏移，向左偏移为负值，向右偏移为正值）
 *   fixMaxHeight: 定位元素最大高度是否固定不变(显示不下时不用压缩高度)
 *   determinPositionFn：决定位置的函数
 * }
 * 2. 返回值为对象，信息如下：
 * {
 *   position:string 最终元素定位位置（当外部定义位置非13个可选位置时，会重新计算合适的位置进行定位，因此提供此位置信息供外部使用）
 *   avilableHeight:number 元素可用高度占位信息(外部可使用该信息进行高度的重新定义)
 * }
 */
export declare class Position {
    private static positionArr;
    private static readonly ADAPTIVE_SIZE;
    static setPosition(options: {
        targetEle: any;
        hostEle: any;
        hostEleX?: any;
        position?: TiPositionType;
        hostSpace?: number;
        browserSpace?: number;
        hOffset?: number;
        fixMaxHeight?: boolean;
        determinPositionFn?(layout: any): string;
        hasOffsetFix?: boolean;
    }): TiPositionResult;
    /**
     * 添加影响host position的事件并返回其事件句柄
     * 由于Angular listen不支持多事件定义，因此在此处封装函数进行单独处理；此外，事件也不支持定义命名空间
     * 监听全局事件，用于处理页面位置出现变化导致宿主元素位置偏移，而tip的特殊情况下tip消失，
     * 并定义组件事件监听句柄，事件取消时会用到
     * 特殊场景包括：
     * 1. 拖动弹框位置导致的宿主元素位置变化
     * 2. 页面局部出滚动条，滚动条位置变化导致的宿主元素位置变化
     *    鼠标导致的滚轮事件可通过mousewheel/DOMMouseScroll监听（有冒泡的特性）
     *    拖拽导致的滚轮变化，需要业务通过trigger Tiny自定义事件tiScroll进行处理（无事件冒泡的特性）
     * 3.页面缩放
     * 4.路由切换页面
     */
    static addPosChangeEvts(eventCallback: any, render: any): Array<() => void>;
    /**
     * 清除绑定事件，与addPosChangeEvts对称
     */
    static removePosChangeEvts(eventHandles: any): void;
    private static getLayout;
    /**
     * 根据高亮浮层位置及提示弹窗位置情况计算具体显示位置
     * @param  position 元素位置定义信息
     * @param  layout 宿主和待定位元素位置信息
     * @param  hostSpace 宿主和待定位元素间距
     * @param  browserSpace 浏览器和待定位元素间距
     * @returns 提示弹窗呈现位置
     */
    private static determinPosition;
    /**
     * 垂直位置确定后，确定水平位置
     */
    private static determinHorizon;
    /**
     * 水平位置确定后，确定垂直位置
     */
    private static determinVertical;
    private static isValidPosition;
    private static isValidHorizonPosition;
    private static isValidVerticalPosition;
    private static setLayout;
    private static setMaxHeight;
    /**
     * 当drop固定高度（设置fixMaxHeight=ture)，且空间不足时，dominator和drop不相邻，此场景需要隐藏drop中的边框覆盖线，
     * 添加样式类'ti3-detach-dominator-drop'标记drop的这种场景状态，通过css样式控制drop中边框覆盖线的隐藏和显示
     * 目前该场景出现在日期类组件中
     */
    static setDominatorDropDetachState(ele: HTMLElement, position: any, layoutParam: any, fixMaxHeight: boolean): void;
    private static getEleLayout;
    static getHostEleLayout(hostEle: any, horizonHostEle?: any): TiHostLayout;
    private static getAvilableLayout;
    private static isFixedPos;
    private static getLayoutParam;
    private static getHorizionParam;
    private static getVerticalParam;
    private static getOffsetFixVal;
}
