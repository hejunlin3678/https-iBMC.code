{"version":3,"file":"TiPopupService.d.ts","sources":["TiPopupService.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA","sourcesContent":["/**\r\n * 该类提供一个服务，用于管理弹出类组件的创建和销毁\r\n * 服务中提供三个方法:\r\n * create(componentType) 生成一个popup实例并返回对象，\r\n *   componentType：包裹内容的父容器元素类\r\n * 返回的实例对象中提供方法:\r\n * {\r\n *  show({ // 生成元素并在指定容器中显示\r\n *   content:弹出组件内容\r\n *   context:弹出组件上下文\r\n *   container:弹出组件最终放置的容器位置\r\n * }) : componentRef // 返回生成的组件实例\r\n *  hide():隐藏并销毁元素\r\n * }\r\n */\r\nimport { ApplicationRef, ComponentFactoryResolver, ComponentRef, Injector, RendererFactory2, TemplateRef } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n/**\r\n * @ignore\r\n * 类型中any代表组件形式\r\n */\r\nexport declare type TiContentType = string | TemplateRef<any> | any;\r\n/**\r\n * @ignore\r\n * popup show方法配置\r\n */\r\ninterface TiPopUpShowConfig {\r\n    content?: TiContentType;\r\n    context?: any;\r\n    contentContext?: any;\r\n    container?: any;\r\n}\r\n/**\r\n * @ignore\r\n * popup create返回值\r\n */\r\nexport interface TiPopUpRef {\r\n    show(config: TiPopUpShowConfig | {}): ComponentRef<any>;\r\n    hide(): void;\r\n}\r\n/**\r\n * @ignore\r\n */\r\nexport declare class TiPopupService<T> {\r\n    private injector;\r\n    private componentFactoryResolver;\r\n    private applicationRef;\r\n    private domSanitizer;\r\n    private document;\r\n    /**\r\n     * 由于该服务可能被其他服务使用到，并以服务的形式提供给外部；\r\n     * 而Renderer2本身不能脱离于component之外定义或依赖，所以使用RendererFactory2方式实例化进行处理\r\n     * 具体说明见如下：\r\n     * https://stackoverflow.com/questions/43070308/using-renderer-in-angular-4\r\n     */\r\n    private renderer;\r\n    constructor(injector: Injector, rendererFactory: RendererFactory2, componentFactoryResolver: ComponentFactoryResolver, applicationRef: ApplicationRef, domSanitizer: DomSanitizer, document: any);\r\n    private getParentEle;\r\n    private static destroyComponentRef;\r\n    private static destroyContentRef;\r\n    create(componentType: any): TiPopUpRef;\r\n    private getContentRef;\r\n    /**\r\n     * 创建组件实例\r\n     * options {\r\n     *   componentType: 组件类\r\n     *   nodes：组件中的可注入节点\r\n     *   context: 组件属性配置,inputs属性均可在此配置\r\n     * }\r\n     */\r\n    createCompoentRef(options: {\r\n        componentType?: any;\r\n        nodes?: Array<any>;\r\n        context?: {\r\n            outputs?: Object;\r\n            [propName: string]: any;\r\n        };\r\n        notDetectChanges?: boolean;\r\n    }): ComponentRef<any>;\r\n}\r\nexport {};\r\n"]}