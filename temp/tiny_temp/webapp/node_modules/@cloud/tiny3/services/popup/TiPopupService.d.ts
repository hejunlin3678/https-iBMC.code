/**
 * 该类提供一个服务，用于管理弹出类组件的创建和销毁
 * 服务中提供三个方法:
 * create(componentType) 生成一个popup实例并返回对象，
 *   componentType：包裹内容的父容器元素类
 * 返回的实例对象中提供方法:
 * {
 *  show({ // 生成元素并在指定容器中显示
 *   content:弹出组件内容
 *   context:弹出组件上下文
 *   container:弹出组件最终放置的容器位置
 * }) : componentRef // 返回生成的组件实例
 *  hide():隐藏并销毁元素
 * }
 */
import { ApplicationRef, ComponentFactoryResolver, ComponentRef, Injector, RendererFactory2, TemplateRef } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
/**
 * @ignore
 * 类型中any代表组件形式
 */
import * as ɵngcc0 from '@angular/core';
export declare type TiContentType = string | TemplateRef<any> | any;
/**
 * @ignore
 * popup show方法配置
 */
interface TiPopUpShowConfig {
    content?: TiContentType;
    context?: any;
    contentContext?: any;
    container?: any;
}
/**
 * @ignore
 * popup create返回值
 */
export interface TiPopUpRef {
    show(config: TiPopUpShowConfig | {}): ComponentRef<any>;
    hide(): void;
}
/**
 * @ignore
 */
export declare class TiPopupService<T> {
    private injector;
    private componentFactoryResolver;
    private applicationRef;
    private domSanitizer;
    private document;
    /**
     * 由于该服务可能被其他服务使用到，并以服务的形式提供给外部；
     * 而Renderer2本身不能脱离于component之外定义或依赖，所以使用RendererFactory2方式实例化进行处理
     * 具体说明见如下：
     * https://stackoverflow.com/questions/43070308/using-renderer-in-angular-4
     */
    private renderer;
    constructor(injector: Injector, rendererFactory: RendererFactory2, componentFactoryResolver: ComponentFactoryResolver, applicationRef: ApplicationRef, domSanitizer: DomSanitizer, document: any);
    private getParentEle;
    private static destroyComponentRef;
    private static destroyContentRef;
    create(componentType: any): TiPopUpRef;
    private getContentRef;
    /**
     * 创建组件实例
     * options {
     *   componentType: 组件类
     *   nodes：组件中的可注入节点
     *   context: 组件属性配置,inputs属性均可在此配置
     * }
     */
    createCompoentRef(options: {
        componentType?: any;
        nodes?: Array<any>;
        context?: {
            outputs?: Object;
            [propName: string]: any;
        };
        notDetectChanges?: boolean;
    }): ComponentRef<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiPopupService<any>, never>;
}
export {};

//# sourceMappingURL=TiPopupService.d.ts.map