{"version":3,"file":"TiTipService.d.ts","sources":["TiTipService.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\r\n * 该类提供服务，用于管理Tip组件的创建和销毁\r\n * 服务中提供三个方法:\r\n * create(hostEle, config) 生成一个tip实例并返回对象，\r\n *   hostEle:宿主元素\r\n *   config:{\r\n *      position：tip元素位置\r\n *      maxWidth：最大宽度\r\n *      hasArrow：是否带箭头\r\n *      theme：tip色系 'black'/default\r\n *  }\r\n * 返回的实例对象中提供方法:\r\n * {\r\n *  show({ // 显示Tip组件\r\n *   content:弹出组件内容\r\n *   context:弹出组件上下文\r\n * })\r\n *  hide():隐藏并销毁Tip\r\n * }\r\n */\r\nimport { NgZone, RendererFactory2 } from '@angular/core';\r\nimport { TiContentType, TiPopUpRef, TiPopupService } from '../popup/TiPopupService';\r\nimport { TiRenderer } from '../renderer/TiRenderer';\r\nimport { TiTipContainerComponent } from './TiTipContainerComponent';\r\nimport { TiTipConfig, TiTipRef } from './TiTipInterface';\r\n/**\r\n * @ignore\r\n */\r\nexport interface TiTipShowConfig {\r\n    popInstance: TiPopUpRef;\r\n    hostEle: Element;\r\n    content: TiContentType;\r\n    context: any;\r\n    config: TiTipConfig;\r\n}\r\n/**\r\n * tip提供了两种使用方式:\r\n *\r\n * 1.服务方式（见如下说明），使用该服务时需要引入模块TiTipServiceModule\r\n *\r\n * 2.指令方式：[TiTipDirective]{@link ../directives/TiTipDirective.html}\r\n *\r\n * <example-url>../tiny3demo/#/tip/tip-all</example-url>\r\n */\r\nexport declare class TiTipService {\r\n    private popService;\r\n    private tiRenderer;\r\n    private zone;\r\n    private document;\r\n    private static readonly DEFAULT_WIDTH;\r\n    private static readonly SPACE;\r\n    private render;\r\n    constructor(popService: TiPopupService<TiTipContainerComponent>, rendererFactory: RendererFactory2, tiRenderer: TiRenderer, zone: NgZone, document: any);\r\n    /**\r\n     * 页面激活窗口改变事件处理，此处获取事件名称，该事件后续会在tip显示时注册，隐藏时销毁\r\n     * 添加该事件用于解决的问题现象是：tip带链接，并且点击链接跳转至新开页面，因此，当返回先前页面时，tip不消失（因为未触发任何tip消失的事件），\r\n     * 且移入其他出tip的元素，会出现页面有多个tip的现象\r\n     */\r\n    private getVisibleChangeEventName;\r\n    create(hostEle: Element, config?: TiTipConfig): TiTipRef;\r\n    /**\r\n     * 创建Tip实例\r\n     *\r\n     * @param hostEle tip生成所依附的宿主元素\r\n     *\r\n     * @param config tip属性配置\r\n     *\r\n     * @returns 生成的Tip实例对象如下：\r\n     *\r\n     * ```\r\n     * {\r\n     *      // 显示tip方法\r\n     *      // @param content {string | TemplateRef<any> | any} tip显示内容，可为字符串/ng-template/component，具体用法见示例\r\n     *      // @param context {any} tip显示内容对应的上下文，content类型为templateRef或Component形式时会用到该参数\r\n     *      show: (content: string | TemplateRef<any> | any, context?: any) => void;\r\n     *\r\n     *      // 隐藏tip方法\r\n     *      hide: () => void;\r\n     * }\r\n     * ```\r\n     */\r\n    private createTip;\r\n    private addTriggerEvent;\r\n    private showTip;\r\n    private setTipTheme;\r\n    private setTipWidth;\r\n    private setPosition;\r\n}\r\n"]}