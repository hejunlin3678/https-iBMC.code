import { TiPositionType } from '../../utils/Position';
import { TemplateRef } from '@angular/core';
export declare type TiIntroShape = 'rect' | 'circle';
/**
 * 某一步的intro信息对象
 */
export interface TiIntroStep {
    element?: any;
    /**
     * 当前步骤是第几步，因为有 一步出现两个引导信息的情况，所以必须要配置该属性，从0开始
     */
    step: number;
    /**
     * 高亮区域的形状
     *
     * 如果是“circle”，以该元素width或height属性中较小的一方为圆的直径画圆
     */
    shape?: TiIntroShape;
    /**
     * 标题
     */
    title?: string;
    /**
     * 内容
     */
    content?: string | TemplateRef<any>;
    /**
     * 指定引导信息位置
     */
    position?: TiPositionType;
    /**
     * 标识为关闭多个tip的操作元素
     */
    isAction?: boolean;
}
export interface TiIntroConfig {
    /**
     * 每一步id
     */
    id?: string;
    /**
     * 每一步引导信息的具体配置
     */
    steps: Array<TiIntroStep>;
    /**
     * 最后一步引导的重要按钮文本，最后一步是多个tip时配置无效
     */
    finishButtonText?: string;
    /**
     * 每一步打开前的回调事件
     */
    beforeStep?(TiIntroRef: TiIntroRef, currentNumber?: number): void;
    /**
     * 完成引导信息的回调事件
     */
    onFinish?(): void;
    /**
     * 退出引导的回调事件
     */
    onExit?(): void;
}
export interface TiIntroRef {
    /**
     * 开始新手引导（intro）的方法
     *
     * **函数类型：**() => void;
     */
    start(): void;
    /**
     * 结束新手引导（intro）的方法
     *
     * **函数类型：**() => void;
     */
    end(): void;
    /**
     * 跳转至某一步的方法
     *
     * **函数类型：**() => void;
     */
    step(number: number): void;
    /**
     * 在beforeStep中调用introRef.proceed()，以便进入该步，否则不会进入
     *
     * **函数类型：**() => void;
     */
    proceed(): void;
}
