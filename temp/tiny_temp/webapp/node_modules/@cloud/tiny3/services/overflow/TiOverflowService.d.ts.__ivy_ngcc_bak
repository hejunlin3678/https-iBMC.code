import { RendererFactory2 } from '@angular/core';
import { TiRenderer } from '../renderer/TiRenderer';
import { TiPositionType } from '../../utils/Position';
import { TiTipService } from '../tip/TiTipService';
/**
 * @ignore
 * overflow配置项接口，用于[TiOverflowService.create]{@link ../injectables/TiOverflowService.html#create}参数使用
 */
export interface TiOverflowConfig {
    /**
     * tip显示时所依据的元素，使用该元素位置显示tip位置，默认为宿主元素,当tip显示所依赖的元素的和宿主元素不一致时才需要定义
     */
    tipElement?: Element | Function;
    /**
     * tip内容，默认为宿主元素文本
     */
    tipContent?: string;
    /**
     * tip位置
     */
    tipPosition?: TiPositionType;
    /**
     * tip最大宽度
     */
    tipMaxWidth?: string;
    /**
     * @ignore
     * 决定定位元素水平方向的元素，用于宿主元素水平方向位置与host元素不一致的场景，暂不对外开放
     */
    tipHostEleX?: Element;
}
/**
 * @ignore
 * create方法返回值
 */
export interface TiOverflowRef {
    destroy(): void;
}
/**
 * @ignore
 * 文本过长出...并tip提示配置项，使用该服务时需要引入模块TiOverflowServiceModule，该组件提供了两种使用方式:
 *
 * 1.服务方式（见如下说明）
 *
 * 2.指令方式：[TiOverflowDirective]{@link ../directives/TiOverflowDirective.html}
 *
 * <example-url>../tiny3demo/#/overflow/overflow-all</example-url>
 */
export declare class TiOverflowService {
    private tiRenderer;
    private tipService;
    private renderer;
    constructor(rendererFactory: RendererFactory2, tiRenderer: TiRenderer, tipService: TiTipService);
    /**
     * 生成tip提示方法
     * @param hostElement 文本过长的宿主对象
     * @param config overflow配置项
     * 返回 {destroy(): void} 销毁文本过长的tip提示，使用服务方式时，需要在宿主元素销毁时，通过调用该方法销毁文本过长的tip提示
     */
    create(hostElement: Element, config?: TiOverflowConfig): TiOverflowRef;
    /**
     * @ignore
     */
    isOverflow(element: Element): boolean;
    private generateTip;
}
