{"version":3,"file":"cloud-tiny3.js","sources":["../../../../@cloud/tiny3/utils/TiBrowser.ts","../../../../@cloud/tiny3/utils/TiKeymap.ts","../../../../@cloud/tiny3/utils/TiLog.ts","../../../../@cloud/tiny3/utils/TiDateUtil.ts","../../../../@cloud/tiny3/utils/TiTheme.ts","../../../../@cloud/tiny3/utils/ObservableMap.ts","../../../../@cloud/tiny3/utils/ObservableSet.ts","../../../../@cloud/tiny3/utils/Util.ts","../../../../@cloud/tiny3/directives/collapse/TiCollapseDirective.ts","../../../../@cloud/tiny3/directives/collapse/TiCollapseModule.ts","../../../../@cloud/tiny3/directives/outline/TiOutlineDirective.ts","../../../../@cloud/tiny3/directives/outline/TiOutlineModule.ts","../../../../@cloud/tiny3/components/icon/TiIconClassComponent.ts","../../../../@cloud/tiny3/components/base/TiBaseComponent.ts","../../../../@cloud/tiny3/components/base/TiFormComponent.ts","../../../../@cloud/tiny3/components/base/TiRadioBaseComponent.ts","../../../../@cloud/tiny3/components/base/TiWholeComponent.ts","../../../../@cloud/tiny3/components/base/TiAutofocusComponent.ts","../../../../@cloud/tiny3/components/base/TiBaseModule.ts","../../../../@cloud/tiny3/components/icon/TiIconComponent.ts","../../../../@cloud/tiny3/components/icon/TiIconModule.ts","../../../../@cloud/tiny3/components/accordion/TiAccordionComponent.ts","../../../../@cloud/tiny3/components/accordion/TiAccordionItemComponent.ts","../../../../@cloud/tiny3/components/accordion/TiAccordionHeadComponent.ts","../../../../@cloud/tiny3/components/accordion/TiAccordionModule.ts","../../../../@cloud/tiny3/utils/Position.ts","../../../../@cloud/tiny3/components/drop/TiDropComponent.ts","../../../../@cloud/tiny3/components/drop/TiDropModule.ts","../../../../@cloud/tiny3/services/popup/TiPopupModule.ts","../../../../@cloud/tiny3/services/popup/TiPopupService.ts","../../../../@cloud/tiny3/services/renderer/TiRendererModule.ts","../../../../@cloud/tiny3/services/renderer/TiRenderer.ts","../../../../@cloud/tiny3/services/tip/TiTipContainerComponent.ts","../../../../@cloud/tiny3/services/tip/TiTipServiceModule.ts","../../../../@cloud/tiny3/services/tip/TiTipService.ts","../../../../@cloud/tiny3/directives/tip/TiTipDirective.ts","../../../../@cloud/tiny3/directives/tip/TiTipModule.ts","../../../../@cloud/tiny3/locale/i18n/zh_CN.ts","../../../../@cloud/tiny3/locale/i18n/en_US.ts","../../../../@cloud/tiny3/locale/i18n/de_DE.ts","../../../../@cloud/tiny3/locale/i18n/es_ES.ts","../../../../@cloud/tiny3/locale/i18n/es_US.ts","../../../../@cloud/tiny3/locale/i18n/fr_FR.ts","../../../../@cloud/tiny3/locale/i18n/pt_BR.ts","../../../../@cloud/tiny3/locale/TiLocale.ts","../../../../@cloud/tiny3/locale/TiTranslatePipe.ts","../../../../@cloud/tiny3/locale/TiLocaleFormat.ts","../../../../@cloud/tiny3/locale/i18n/index.ts","../../../../@cloud/tiny3/locale/TiLocaleModule.ts","../../../../@cloud/tiny3/components/list/TiListComponent.ts","../../../../@cloud/tiny3/components/list/TiListModule.ts","../../../../@cloud/tiny3/components/menu/TiMenuListComponent.ts","../../../../@cloud/tiny3/components/menu/TiMenuComponent.ts","../../../../@cloud/tiny3/components/menu/TiMenuModule.ts","../../../../@cloud/tiny3/components/actionmenu/TiActionmenuComponent.ts","../../../../@cloud/tiny3/directives/popconfirm/TiPopconfirmComponent.ts","../../../../@cloud/tiny3/components/button/TiButtonComponent.ts","../../../../@cloud/tiny3/components/loading/TiLoadingComponent.ts","../../../../@cloud/tiny3/components/loading/TiLoadingModule.ts","../../../../@cloud/tiny3/components/button/TiButtonModule.ts","../../../../@cloud/tiny3/directives/popconfirm/TiPopconfirmDirective.ts","../../../../@cloud/tiny3/directives/popconfirm/TiPopconfirmModule.ts","../../../../@cloud/tiny3/components/actionmenu/TiActionmenuModule.ts","../../../../@cloud/tiny3/components/alert/TiAlertComponent.ts","../../../../@cloud/tiny3/components/alert/TiAlertModule.ts","../../../../@cloud/tiny3/components/droplist/TiDroplistComponent.ts","../../../../@cloud/tiny3/components/droplist/TiDroplistModule.ts","../../../../@cloud/tiny3/components/text/TiTextComponent.ts","../../../../@cloud/tiny3/components/text/TiTextModule.ts","../../../../@cloud/tiny3/components/autocomplete/TiAutocompleteComponent.ts","../../../../@cloud/tiny3/components/autocomplete/TiAutocompleteModule.ts","../../../../@cloud/tiny3/components/buttongroup/TiButtongroupComponent.ts","../../../../@cloud/tiny3/components/buttongroup/TiButtongroupModule.ts","../../../../@cloud/tiny3/components/checkbox/TiCheckboxComponent.ts","../../../../@cloud/tiny3/components/checkbox/TiCheckboxModule.ts","../../../../@cloud/tiny3/components/checkgroup/TiCheckitemComponent.ts","../../../../@cloud/tiny3/components/checkgroup/TiCheckgroupComponent.ts","../../../../@cloud/tiny3/components/checkgroup/TiCheckgroupModule.ts","../../../../@cloud/tiny3/services/overflow/TiOverflowServiceModule.ts","../../../../@cloud/tiny3/services/overflow/TiOverflowService.ts","../../../../@cloud/tiny3/directives/overflow/TiOverflowDirective.ts","../../../../@cloud/tiny3/directives/overflow/TiOverflowMaxlineDirective.ts","../../../../@cloud/tiny3/directives/overflow/TiOverflowModule.ts","../../../../@cloud/tiny3/components/datedominator/TiDateDominatorComponent.ts","../../../../@cloud/tiny3/components/datedominator/TiDateDominatorModule.ts","../../../../@cloud/tiny3/components/dateedit/TiDateEditComponent.ts","../../../../@cloud/tiny3/components/dateedit/TiDateEditModule.ts","../../../../@cloud/tiny3/components/datebase/TiDateBaseComponent.ts","../../../../@cloud/tiny3/components/datebase/TiDateBaseModule.ts","../../../../@cloud/tiny3/components/datepanel/TiDatePanelComponent.ts","../../../../@cloud/tiny3/components/datepanel/TiDatePanelModule.ts","../../../../@cloud/tiny3/components/date/TiDateComponent.ts","../../../../@cloud/tiny3/components/date/TiDateModule.ts","../../../../@cloud/tiny3/components/daterange/TiDateRangeComponent.ts","../../../../@cloud/tiny3/components/daterange/TiDateRangeModule.ts","../../../../@cloud/tiny3/components/datetime/TiDatetimeComponent.ts","../../../../@cloud/tiny3/components/time/TiTimeComponent.ts","../../../../@cloud/tiny3/components/time/TiTimeModule.ts","../../../../@cloud/tiny3/components/datetime/TiDatetimeModule.ts","../../../../@cloud/tiny3/components/datetimerange/TiDatetimeRangeComponent.ts","../../../../@cloud/tiny3/components/datetimerange/TiDatetimeRangeModule.ts","../../../../@cloud/tiny3/components/dominator/TiDominatorComponent.ts","../../../../@cloud/tiny3/components/tag/TiTagComponent.ts","../../../../@cloud/tiny3/components/tag/TiTagModule.ts","../../../../@cloud/tiny3/components/dominator/TiDominatorModule.ts","../../../../@cloud/tiny3/components/searchbox/TiSearchboxComponent.ts","../../../../@cloud/tiny3/components/searchbox/TiSearchboxNotsearchComponent.ts","../../../../@cloud/tiny3/components/searchbox/TiSearchboxModule.ts","../../../../@cloud/tiny3/components/dropsearch/TiDropsearchComponent.ts","../../../../@cloud/tiny3/components/dropsearch/TiDropsearchModule.ts","../../../../@cloud/tiny3/directives/include/TiIncludeDirective.ts","../../../../@cloud/tiny3/directives/include/TiIncludeModule.ts","../../../../@cloud/tiny3/components/formfield/TiFormfieldComponent.ts","../../../../@cloud/tiny3/components/formfield/TiItemComponent.ts","../../../../@cloud/tiny3/components/formfield/TiItemLabelComponent.ts","../../../../@cloud/tiny3/components/formfield/TiButtonItemComponent.ts","../../../../@cloud/tiny3/components/formfield/TiFormfieldModule.ts","../../../../@cloud/tiny3/components/imagepreview/TiImagepreviewComponent.ts","../../../../@cloud/tiny3/services/modal/TiModalComponent.ts","../../../../@cloud/tiny3/services/modal/TiModalNoAnimationComponent.ts","../../../../@cloud/tiny3/services/modal/TiBackdropComponent.ts","../../../../@cloud/tiny3/services/modal/TiBackdropNoAnimationComponent.ts","../../../../@cloud/tiny3/services/modal/TiModalHeaderComponent.ts","../../../../@cloud/tiny3/services/modal/TiModalBodyComponent.ts","../../../../@cloud/tiny3/services/modal/TiModalFooterComponent.ts","../../../../@cloud/tiny3/services/drag/TiDragServiceModule.ts","../../../../@cloud/tiny3/services/drag/TiDragService.ts","../../../../@cloud/tiny3/directives/drag/TiDraggableDirective.ts","../../../../@cloud/tiny3/directives/drag/TiDraggableModule.ts","../../../../@cloud/tiny3/services/modal/TiModalModule.ts","../../../../@cloud/tiny3/components/imagepreview/TiImagepreviewModule.ts","../../../../@cloud/tiny3/components/ip/TiIpComponent.ts","../../../../@cloud/tiny3/components/ip/TiIpModule.ts","../../../../@cloud/tiny3/components/ipsection/TiIpsectionComponent.ts","../../../../@cloud/tiny3/components/select/TiSelectComponent.ts","../../../../@cloud/tiny3/components/select/TiSelectModule.ts","../../../../@cloud/tiny3/directives/maskinput/TiMaskDirective.ts","../../../../@cloud/tiny3/directives/maskinput/TiMaskModule.ts","../../../../@cloud/tiny3/directives/validation/checkHandle/CheckHandle.ts","../../../../@cloud/tiny3/directives/validation/TiPendingStateComponent.ts","../../../../@cloud/tiny3/directives/validation/checkHandle/AsyncCheck.ts","../../../../@cloud/tiny3/directives/validation/checkHandle/ChangeCheck.ts","../../../../@cloud/tiny3/directives/validation/checkHandle/BlurCheck.ts","../../../../@cloud/tiny3/directives/validation/TiPwdMsgComponent.ts","../../../../@cloud/tiny3/directives/validation/checkHandle/TiPwdConfig.ts","../../../../@cloud/tiny3/directives/validation/TiValidationConfig.ts","../../../../@cloud/tiny3/directives/validation/checkHandle/PwdCheck.ts","../../../../@cloud/tiny3/directives/validation/TiErrorMsgComponent.ts","../../../../@cloud/tiny3/directives/validation/checkHandle/CommonServiceModule.ts","../../../../@cloud/tiny3/directives/validation/checkHandle/CommonService.ts","../../../../@cloud/tiny3/directives/validation/checkHandle/CheckStyleModule.ts","../../../../@cloud/tiny3/directives/validation/checkHandle/CheckStyleService.ts","../../../../@cloud/tiny3/directives/validation/TiValidationDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/TiValidators.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/BaseValidator.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/MaxLengthValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/RangeSizeValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/RangeValueValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/MinLengthValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/EmailValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/NotScriptValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/ContainsValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/NotContainsValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/DateValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/DigitsValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/EqualValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/Ipv4ValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/Ipv6ValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/MaxValueValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/IntegerValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/MinValueValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/NotEqualValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/NumberValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/PasswordValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/PortValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/RegExpValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/UrlValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/validators/directives/RequiredValidatorDirective.ts","../../../../@cloud/tiny3/directives/validation/TiValidationModule.ts","../../../../@cloud/tiny3/components/ipsection/TiIpsectionModule.ts","../../../../@cloud/tiny3/components/leftmenu/TiLeftmenuComponent.ts","../../../../@cloud/tiny3/components/leftmenu/TiLeftmenuHeadComponent.ts","../../../../@cloud/tiny3/components/leftmenu/TiLeftmenuGroupItemComponent.ts","../../../../@cloud/tiny3/components/leftmenu/TiLeftmenuGroupComponent.ts","../../../../@cloud/tiny3/components/leftmenu/TiLeftmenuItemComponent.ts","../../../../@cloud/tiny3/components/leftmenu/TiLeftmenuLevel1Component.ts","../../../../@cloud/tiny3/components/leftmenu/TiLeftmenuLevel2Component.ts","../../../../@cloud/tiny3/components/leftmenu/TiLeftmenuFootComponent.ts","../../../../@cloud/tiny3/components/leftmenu/TiLeftmenuModule.ts","../../../../@cloud/tiny3/components/table/TiTableFixedHeadServiceModule.ts","../../../../@cloud/tiny3/components/table/TiTableFixedHeadService.ts","../../../../@cloud/tiny3/components/table/TiTableComponent.ts","../../../../@cloud/tiny3/components/table/TiHeadFilterDropComponent.ts","../../../../@cloud/tiny3/components/table/TiHeadFilterComponent.ts","../../../../@cloud/tiny3/components/table/TiHeadSortComponent.ts","../../../../@cloud/tiny3/components/table/TiDetailsIconComponent.ts","../../../../@cloud/tiny3/components/table/TiDetailsTrDirective.ts","../../../../@cloud/tiny3/components/table/TiColspanDirective.ts","../../../../@cloud/tiny3/components/table/TiColsToggleDropComponent.ts","../../../../@cloud/tiny3/components/table/TiColsToggleComponent.ts","../../../../@cloud/tiny3/components/table/TiColsResizableDirective.ts","../../../../@cloud/tiny3/components/table/TiCellTextComponent.ts","../../../../@cloud/tiny3/components/table/TiCellIconsComponent.ts","../../../../@cloud/tiny3/components/table/TiColumnsPipe.ts","../../../../@cloud/tiny3/components/table/TiColumnFixedDirective.ts","../../../../@cloud/tiny3/components/table/TiColClickDirective.ts","../../../../@cloud/tiny3/components/table/TiTableModule.ts","../../../../@cloud/tiny3/components/pagination/TiPaginationComponent.ts","../../../../@cloud/tiny3/components/pagination/TiPaginationModule.ts","../../../../@cloud/tiny3/components/progressbar/TiProgressbarComponent.ts","../../../../@cloud/tiny3/components/progressbar/TiProgressbarModule.ts","../../../../@cloud/tiny3/components/progresspie/TiProgresspieComponent.ts","../../../../@cloud/tiny3/components/progresspie/TiProgresspieModule.ts","../../../../@cloud/tiny3/components/radio/TiRadioComponent.ts","../../../../@cloud/tiny3/components/radio/TiRadioModule.ts","../../../../@cloud/tiny3/directives/scroll/TiScrollDirective.ts","../../../../@cloud/tiny3/directives/scroll/TiScrollModule.ts","../../../../@cloud/tiny3/components/slider/TiSliderComponent.ts","../../../../@cloud/tiny3/components/slider/TiSliderModule.ts","../../../../@cloud/tiny3/directives/inputnumber/TiInputNumberDirective.ts","../../../../@cloud/tiny3/directives/inputnumber/TiInputNumberModule.ts","../../../../@cloud/tiny3/components/spinner/TiSpinnerComponent.ts","../../../../@cloud/tiny3/components/spinner/TiSpinnerModule.ts","../../../../@cloud/tiny3/components/steps/TiStepsComponent.ts","../../../../@cloud/tiny3/components/steps/TiStepsModule.ts","../../../../@cloud/tiny3/components/switch/TiSwitchComponent.ts","../../../../@cloud/tiny3/components/switch/TiSwitchModule.ts","../../../../@cloud/tiny3/components/tab/TiTabsComponent.ts","../../../../@cloud/tiny3/components/tab/TiTabComponent.ts","../../../../@cloud/tiny3/components/tab/TiTabHeaderComponent.ts","../../../../@cloud/tiny3/components/tab/TiTabModule.ts","../../../../@cloud/tiny3/components/tagsinput/TiTagsInputComponent.ts","../../../../@cloud/tiny3/components/tagsinput/TiTagsInputModule.ts","../../../../@cloud/tiny3/components/textarea/TiTextareaComponent.ts","../../../../@cloud/tiny3/components/textarea/TiFormatNumPipe.ts","../../../../@cloud/tiny3/components/textarea/TiTextareaModule.ts","../../../../@cloud/tiny3/components/tree/TiTreeUtil.ts","../../../../@cloud/tiny3/components/tree/TiTreeComponent.ts","../../../../@cloud/tiny3/components/tree/TiHighlightPipe.ts","../../../../@cloud/tiny3/components/tree/TiAutoSelectDirective.ts","../../../../@cloud/tiny3/components/tree/TiTreeModule.ts","../../../../@cloud/tiny3/components/treeselect/TiTreeselectComponent.ts","../../../../@cloud/tiny3/components/treeselect/TiTreeselectModule.ts","../../../../@cloud/tiny3/services/upload/TiUploadUtil.ts","../../../../@cloud/tiny3/components/upload/TiFileSelectDirective.ts","../../../../@cloud/tiny3/services/upload/TiFileItemUtil.ts","../../../../@cloud/tiny3/services/upload/TiUploadServiceModule.ts","../../../../@cloud/tiny3/services/upload/TiUploadService.ts","../../../../@cloud/tiny3/components/upload/TiUploadbaseComponent.ts","../../../../@cloud/tiny3/components/upload/TiUploadComponent.ts","../../../../@cloud/tiny3/components/upload/TiDisabledDirective.ts","../../../../@cloud/tiny3/services/modal/TiModalService.ts","../../../../@cloud/tiny3/components/upload/TiUploadimageComponent.ts","../../../../@cloud/tiny3/components/upload/TiUploadModule.ts","../../../../@cloud/tiny3/services/intro/TiIntromodalComponent.ts","../../../../@cloud/tiny3/services/intro/TiIntrotipComponent.ts","../../../../@cloud/tiny3/services/intro/TiIntroModule.ts","../../../../@cloud/tiny3/services/intro/TiIntroService.ts","../../../../@cloud/tiny3/services/message/TiMessageComponent.ts","../../../../@cloud/tiny3/services/message/TiContentWrapperComponent.ts","../../../../@cloud/tiny3/services/message/TiTranscludeDirective.ts","../../../../@cloud/tiny3/services/message/TiMessageModule.ts","../../../../@cloud/tiny3/services/message/TiMessageService.ts","../../../../@cloud/tiny3/components/zoom/TiZoomComponent.ts","../../../../@cloud/tiny3/components/zoom/TiZoomModule.ts","../../../../@cloud/tiny3/index.ts","../../../../@cloud/tiny3/cloud-tiny3.ts"],"sourcesContent":["/* eslint-disable no-cond-assign */\r\n// 另，angular也有brower-util.ts，但是没有对浏览器版本号的判断。\r\n\r\n/*\r\n * 浏览器类型的枚举定义。字符串枚举，提供了运行时可读性。\r\n */\r\n/* export enum Browser {  // export是为了不成为全局定义。此文件存在2个export\r\n    EDGE = 'EDGE',\r\n    IE = 'IE',\r\n    FIREFOX = 'FIREFOX',\r\n    CHROME = 'CHROME',\r\n    OPERA = 'OPERA',\r\n    SAFARI = 'SAFARI',\r\n    OTHER = 'OTHER'\r\n} */\r\n\r\n/**\r\n * BrowserInfo浏览器工具类，提供浏览器类别和版本信息\r\n *\r\n * 浏览器的类型及版本信息\r\n *\r\n * <h3>示例</h3>\r\n * <iframe src=\"../tiny3demo/#/utils/browser-basic\" frameborder='0' width=\"100%\" onload=\"this.height = document.documentElement.clientHeight\"></iframe>\r\n */\r\nexport class TiBrowser {\r\n    /**\r\n     * EDGE浏览器字符串\r\n     */\r\n    public static readonly EDGE: string = 'EDGE';\r\n    /**\r\n     * IE浏览器字符串\r\n     */\r\n    public static readonly IE: string = 'IE';\r\n    /**\r\n     * FIREFOX浏览器字符串\r\n     */\r\n    public static readonly FIREFOX: string = 'FIREFOX';\r\n    /**\r\n     * CHROME浏览器字符串\r\n     */\r\n    public static readonly CHROME: string = 'CHROME';\r\n    /**\r\n     * OPERA浏览器字符串\r\n     */\r\n    public static readonly OPERA: string = 'OPERA';\r\n    /**\r\n     * SAFARI浏览器字符串\r\n     */\r\n    public static readonly SAFARI: string = 'SAFARI';\r\n    /**\r\n     * OTHER浏览器字符串\r\n     */\r\n    public static readonly OTHER: string = 'OTHER';\r\n\r\n    private static _browser: string = TiBrowser.OTHER;\r\n    private static _version: number = 0;  // 浏览器的大版本号，整数。取第一个小数点前\r\n    private static isInit: boolean = false;\r\n\r\n    /**\r\n     * 浏览器类型\r\n     * @returns 返回枚举型浏览器类型字符串\r\n     */\r\n    public static browser(): string {\r\n        TiBrowser.init();\r\n\r\n        return TiBrowser._browser;\r\n    }\r\n    /**\r\n     * 浏览器版本\r\n     */\r\n    public static version(): number {\r\n        TiBrowser.init();\r\n\r\n        return TiBrowser._version;\r\n    }\r\n    /**\r\n     * 是否Edge\r\n     */\r\n    public static isEdge(): boolean {\r\n        TiBrowser.init();\r\n\r\n        return TiBrowser.browser() === TiBrowser.EDGE;\r\n    }\r\n    /**\r\n     * 是否IE\r\n     */\r\n    public static isIE(): boolean {\r\n        TiBrowser.init();\r\n\r\n        return TiBrowser.browser() === TiBrowser.IE;\r\n    }\r\n    /**\r\n     * 是否Firefox\r\n     */\r\n    public static isFirefox(): boolean {\r\n        TiBrowser.init();\r\n\r\n        return TiBrowser.browser() === TiBrowser.FIREFOX;\r\n    }\r\n    /**\r\n     * 是否Chrome\r\n     */\r\n    public static isChrome(): boolean {\r\n        TiBrowser.init();\r\n\r\n        return TiBrowser.browser() === TiBrowser.CHROME;\r\n    }\r\n    /**\r\n     * 是否Opera\r\n     */\r\n    public static isOpera(): boolean {\r\n        TiBrowser.init();\r\n\r\n        return TiBrowser.browser() === TiBrowser.OPERA;\r\n    }\r\n    /**\r\n     * 是否Safari\r\n     */\r\n    public static isSafari(): boolean {\r\n        TiBrowser.init();\r\n\r\n        return TiBrowser.browser() === TiBrowser.SAFARI;\r\n    }\r\n    /**\r\n     * 是否Other\r\n     */\r\n    public static isOther(): boolean {\r\n        TiBrowser.init();\r\n\r\n        return TiBrowser.browser() === TiBrowser.OTHER;\r\n    }\r\n\r\n    private static init(): void {\r\n        if (TiBrowser.isInit) {// 如果已经初始化，那么返回\r\n            return;\r\n        }\r\n        // 浏览器判断，已支持SSR\r\n        const userAgent: string = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase():'';\r\n        let aAgentInfo: Array<any>|null;\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        (aAgentInfo = userAgent.match(/edge\\/([\\d.]+)/)) ? TiBrowser._browser = TiBrowser.EDGE :\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        (aAgentInfo = userAgent.match(/rv:([\\d.]+)\\) like gecko/)) ? TiBrowser._browser = TiBrowser.IE :\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        (aAgentInfo = userAgent.match(/msie ([\\d.]+)/)) ? TiBrowser._browser = TiBrowser.IE :\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        (aAgentInfo = userAgent.match(/firefox\\/([\\d.]+)/)) ? TiBrowser._browser = TiBrowser.FIREFOX :\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        (aAgentInfo = userAgent.match(/chrome\\/([\\d.]+)/)) ? TiBrowser._browser = TiBrowser.CHROME :\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        (aAgentInfo = userAgent.match(/opera.([\\d.]+)/)) ? TiBrowser._browser = TiBrowser.OPERA :\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        (aAgentInfo = userAgent.match(/version\\/([\\d.]+).*safari/)) ? TiBrowser._browser = TiBrowser.SAFARI :\r\n        TiBrowser._browser = TiBrowser.OTHER;\r\n        // 版本号取整\r\n        TiBrowser._version = (aAgentInfo !== null) ? parseInt(aAgentInfo[1].split('.')[0], 10) : 0;\r\n        // 改变初始化值\r\n        TiBrowser.isInit = true;\r\n    }\r\n}\r\n","import { TiBrowser } from './TiBrowser';\r\n\r\n// 另，Angular官方键值调用方法：\r\n// import {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\r\n\r\n/* 使用键值请参考：\r\nhttps://blog.csdn.net/q1054261752/article/details/50359617\r\nhttp://www.runoob.com/try/try.php?filename=tryjsref_event_key_keycode2\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent\r\n事件顺序：onkeydown > onkeypress >onkeyup\r\n早期标准：\r\nkeydown和keyup捕获具体物理按键，event.keyCode输出键值，可以区分主副键盘的具体按键；\r\nkeypress捕获按键经过处理后的字符，event.charCode输出ASCII字符编码，可以区分大小写字母，主副键盘相同符号取值相同。\r\nevent.which根据情况输出charCode（keypress时）或keyCode（keydown时）。\r\nIE8只有keyCode属性，IE9起已支持which和charCode。\r\nChrome和IE等，在keypress时，keyCode也存放了charCode值。（是为了兼容只有keyCode属性的IE8）\r\nFireFox，keypress只输出event.charCode，keydown只输出event.keycode；另一个值为0。\r\n现今情况：\r\nkeyCode/charCode/which都已废弃，但keyCode依然是目前最好选择！（2018年4月，须兼容IE9）\r\n未来情况：\r\nkeypress和keydown时，都可用event.key（\"z\"）和event.code(\"KeyZ\")，是推荐标准，都是字符串可读性值。\r\nIE9不支持event.code。\r\nIE9的event.key是旧标准。小键盘符号支持很差：和大键盘取值不同，且keypress和keydown时取值不同。有时符号，有时符号名称。\r\n\r\n综上：建议只使用keydow和keyup事件和event.keyCode键值，不使用keypress/which/charCode\r\n很少有需求使用keypress，仅配合 event.charCode取出字符编码即可。\r\n再配合'A'.charCodeAt(0)===event.charCode或者'A'===String.fromCharCode(event.charCode);\r\n*/\r\n/* HTML W3C标准键值查找类，已经屏蔽浏览器差异\r\n *\r\n * 参考文档：\r\n *\r\n * https://www.w3.org/TR/uievents/\r\n *\r\n * https://www.w3.org/TR/uievents-code/\r\n *\r\n * https://www.w3.org/TR/uievents-key\r\n *\r\n * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code\r\n *\r\n * https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\r\n *\r\n * https://github.com/kabirbaidhya/keycode-js  这份代码采用了Mac命名方式，比如回车键叫Return\r\n *\r\n * https://github.com/wesbos/keycodes/blob/gh-pages/scripts.js\r\n *\r\n * http://blog.csdn.net/joeblackzqq/article/details/46442121\r\n *\r\n * W3C规定了一些固定键值，其他键值可能随硬件（PC/Mac）、操作系统、浏览器而不同。\r\n *\r\n * 命名规范统一按照W3C名称，已涵盖标准101键盘，其他键盘暂未涵盖。\r\n *\r\n *  js中左右Ctrl、大小键盘Enter是同一键值，所以比windows编程环境的键值要少一些。\r\n *\r\n * 多余Mac键盘值已删除。\r\n *\r\n * 标点符号，因为Firefox与其他浏览器有三个不同，已做兼容性处理\r\n */\r\n\r\n/**\r\n * KeyMap键值工具类，提高键值可读性，已经屏蔽浏览器差异\r\n *\r\n * <h3>示例</h3>\r\n * <iframe src=\"../tiny3demo/#/utils/keymap-basic\" frameborder='0' width=\"100%\" onload=\"this.height = document.documentElement.clientHeight\"></iframe>\r\n */\r\nexport class TiKeymap {\r\n    /* 此部分为W3C规定的固定键值 start↓ */\r\n    /**\r\n     * Mac称作Delete 【注意： Backspace 8/Delete 46（windows用后向删除）是两个不同键值。】\r\n     */\r\n    public static readonly KEY_BACKSPACE: number = 8;\r\n    /**\r\n     * Table键\r\n     */\r\n    public static readonly KEY_TAB: number = 9;\r\n    /**\r\n     * 回车键，数字小键盘回车也是13。 Mac称作Return。【注意：108是Mac数字小键盘Enter】\r\n     */\r\n    public static readonly KEY_ENTER: number = 13;\r\n    /**\r\n     * 左右Shift\r\n     */\r\n    public static readonly KEY_SHIFT: number = 16;\r\n    /**\r\n     * 左右Ctrl\r\n     */\r\n    public static readonly KEY_CONTROL: number = 17;\r\n    /**\r\n     * 左右Alt    Mac称作Option\r\n     */\r\n    public static readonly KEY_ALT: number = 18;\r\n    /**\r\n     * W3C未规定固定或者不固定，是PC（非Mac）独有\r\n     */\r\n    public static readonly KEY_PAUSE_BREAK: number = 19;\r\n    /**\r\n     * 大小写锁定\r\n     */\r\n    public static readonly KEY_CAPS_LOCK: number = 20;\r\n    /**\r\n     * 左上角Esc\r\n     */\r\n    public static readonly KEY_ESCAPE: number = 27;\r\n    public static readonly KEY_SPACE: number = 32;\r\n    public static readonly KEY_PAGE_UP: number = 33;\r\n    public static readonly KEY_PAGE_DOWN: number = 34;\r\n    public static readonly KEY_END: number = 35;\r\n    public static readonly KEY_HOME: number = 36;\r\n    /**\r\n     * 箭头方向键\r\n     */\r\n    public static readonly KEY_ARROW_LEFT: number = 37;\r\n    public static readonly KEY_ARROW_UP: number = 38;\r\n    public static readonly KEY_ARROW_RIGHT: number = 39;\r\n    public static readonly KEY_ARROW_DOWN: number = 40;\r\n    /**\r\n     * W3C未规定固定或非固定，是PC（非Mac）独有\r\n     */\r\n    public static readonly KEY_PRINT_SCREEN: number = 44; // W3C未规定固定或非固定，是PC（非Mac）独有\r\n    /**\r\n     * W3C未规定固定或非固定，是PC（非Mac）独有\r\n     */\r\n    public static readonly KEY_INSERT: number = 45; // W3C未规定固定或非固定，是PC（非Mac）独有\r\n    /**\r\n     * 后向删除\r\n     */\r\n    public static readonly KEY_DELETE: number = 46;\r\n    public static readonly KEY_0: number = 48;\r\n    public static readonly KEY_1: number = 49;\r\n    public static readonly KEY_2: number = 50;\r\n    public static readonly KEY_3: number = 51;\r\n    public static readonly KEY_4: number = 52;\r\n    public static readonly KEY_5: number = 53;\r\n    public static readonly KEY_6: number = 54;\r\n    public static readonly KEY_7: number = 55;\r\n    public static readonly KEY_8: number = 56;\r\n    public static readonly KEY_9: number = 57;\r\n    public static readonly KEY_A: number = 65;\r\n    public static readonly KEY_B: number = 66;\r\n    public static readonly KEY_C: number = 67;\r\n    public static readonly KEY_D: number = 68;\r\n    public static readonly KEY_E: number = 69;\r\n    public static readonly KEY_F: number = 70;\r\n    public static readonly KEY_G: number = 71;\r\n    public static readonly KEY_H: number = 72;\r\n    public static readonly KEY_I: number = 73;\r\n    public static readonly KEY_J: number = 74;\r\n    public static readonly KEY_K: number = 75;\r\n    public static readonly KEY_L: number = 76;\r\n    public static readonly KEY_M: number = 77;\r\n    public static readonly KEY_N: number = 78;\r\n    public static readonly KEY_O: number = 79;\r\n    public static readonly KEY_P: number = 80;\r\n    public static readonly KEY_Q: number = 81;\r\n    public static readonly KEY_R: number = 82;\r\n    public static readonly KEY_S: number = 83;\r\n    public static readonly KEY_T: number = 84;\r\n    public static readonly KEY_U: number = 85;\r\n    public static readonly KEY_V: number = 86;\r\n    public static readonly KEY_W: number = 87;\r\n    public static readonly KEY_X: number = 88;\r\n    public static readonly KEY_Y: number = 89;\r\n    public static readonly KEY_Z: number = 90;\r\n    /* 此部分为W3C规定的固定键值 end↑ */\r\n    /**\r\n     * \"Windows Key Left/ Left Command⌘ (Mac)/ Chromebook Search key\";\r\n     */\r\n    public static readonly KEY_META_LEFT: number = 91;\r\n    /**\r\n     * \"Windows Key Right\r\n     */\r\n    public static readonly KEY_META_RIGHT: number = 92;\r\n    /**\r\n     *  \"Windows Menu / Right Command⌘(Mac)\";\r\n     */\r\n    public static readonly KEY_CONTEXT_MENU: number = 93;\r\n    public static readonly KEY_NUMPAD_0: number = 96;\r\n    public static readonly KEY_NUMPAD_1: number = 97;\r\n    public static readonly KEY_NUMPAD_2: number = 98;\r\n    public static readonly KEY_NUMPAD_3: number = 99;\r\n    public static readonly KEY_NUMPAD_4: number = 100;\r\n    public static readonly KEY_NUMPAD_5: number = 101;\r\n    public static readonly KEY_NUMPAD_6: number = 102;\r\n    public static readonly KEY_NUMPAD_7: number = 103;\r\n    public static readonly KEY_NUMPAD_8: number = 104;\r\n    public static readonly KEY_NUMPAD_9: number = 105;\r\n    /**\r\n     * 小键盘*\r\n     */\r\n    public static readonly KEY_NUMPAD_MULTIPLY: number = 106;\r\n    /**\r\n     * 小键盘+\r\n     */\r\n    public static readonly KEY_NUMPAD_ADD: number = 107;\r\n    /**\r\n     * Mac小键盘Enter。可能某些键盘除法符号。且这个键值可能在Firefox与其他浏览器不同。\r\n     */\r\n    public static readonly KEY_NUMPAD_ENTER: number = 108;\r\n    /**\r\n     * 小键盘-\r\n     */\r\n    public static readonly KEY_NUMPAD_SUBTRACT: number = 109;\r\n    /**\r\n     * 小键盘. (小数点)\r\n     */\r\n    public static readonly KEY_NUMPAD_DECIMAL: number = 110;\r\n    /**\r\n     * 小键盘/\r\n     */\r\n    public static readonly KEY_NUMPAD_DIVIDE: number = 111;\r\n    public static readonly KEY_F1: number = 112;\r\n    public static readonly KEY_F2: number = 113;\r\n    public static readonly KEY_F3: number = 114;\r\n    public static readonly KEY_F4: number = 115;\r\n    public static readonly KEY_F5: number = 116;\r\n    public static readonly KEY_F6: number = 117;\r\n    public static readonly KEY_F7: number = 118;\r\n    public static readonly KEY_F8: number = 119;\r\n    public static readonly KEY_F9: number = 120;\r\n    public static readonly KEY_F10: number = 121;\r\n    public static readonly KEY_F11: number = 122;\r\n    public static readonly KEY_F12: number = 123;\r\n    public static readonly KEY_F13: number = 124;\r\n    public static readonly KEY_F14: number = 125;\r\n    public static readonly KEY_F15: number = 126;\r\n    public static readonly KEY_F16: number = 127;\r\n    public static readonly KEY_F17: number = 128;\r\n    public static readonly KEY_F18: number = 129;\r\n    public static readonly KEY_F19: number = 130;\r\n    public static readonly KEY_F20: number = 131;\r\n    public static readonly KEY_F21: number = 132;\r\n    public static readonly KEY_F22: number = 133;\r\n    public static readonly KEY_F23: number = 134;\r\n    public static readonly KEY_F24: number = 135;\r\n    /**\r\n     * W3C未规定固定或不固定，是PC（非Mac）独有。  在Mac上这个键值给numpad_clear用了。\r\n     */\r\n    public static readonly KEY_NUM_LOCK: number = 144;\r\n    /**\r\n     * W3C未规定固定或不固定，是PC（非Mac）独有\r\n     */\r\n    public static readonly KEY_SCROLL_LOCK: number = 145;\r\n    /* 下面是W3C符号美标键值，不固定。Firefox符号键值有3个与其他浏览器不同 */\r\n    /**\r\n     * \";\" Firefox键值是59，使用时已经屏蔽差异\r\n     */\r\n    public static KEY_SEMICOLON: number = 186;\r\n    /**\r\n     * \":\" Firefox键值是59，使用时已经屏蔽差异\r\n     */\r\n    public static KEY_COLON: number = TiKeymap.KEY_SEMICOLON;\r\n    /**\r\n     * \"=\" Firefox键值是61，使用时已经屏蔽差异\r\n     */\r\n    public static KEY_EQUALS_SIGN: number = 187;\r\n    /**\r\n     * \"+\" Firefox键值是61，使用时已经屏蔽差异\r\n     */\r\n    public static KEY_PLUS: number = TiKeymap.KEY_EQUALS_SIGN;\r\n    /**\r\n     * \"-\" Firefox键值是173，使用时已经屏蔽差异\r\n     */\r\n    public static KEY_MINUS: number = 189;\r\n    /**\r\n     * \"_\" Firefox键值是173，使用时已经屏蔽差异\r\n     */\r\n    public static KEY_UNDERSCORE: number = TiKeymap.KEY_MINUS;\r\n    // public static get KEY_SEMICOLON() { // \";\"\r\n    //     if (BrowserInfo.isFirefox()) { return 59; }\r\n    //     return 186;\r\n    // }\r\n    // public static get KEY_COLON() { // \":\"\r\n    //     return KeyMap.KEY_SEMICOLON;\r\n    // }\r\n    // public static get KEY_EQUALS_SIGN() { // \"=\"\r\n    //     if (BrowserInfo.isFirefox()) { return 61; }\r\n    //     return 187;\r\n    // }\r\n    // public static get KEY_PLUS() { // \"+\"\r\n    //     return KeyMap.KEY_EQUALS_SIGN;\r\n    // }\r\n    // public static get KEY_MINUS() { // \"-\"\r\n    //     if (BrowserInfo.isFirefox()) { return 173; }\r\n    //     return 189;\r\n    // }\r\n    // public static get KEY_UNDERSCORE() { // \"_\"\r\n    //     return KeyMap.KEY_MINUS;\r\n    // }\r\n    /**\r\n     * \",\"\r\n     */\r\n    public static readonly KEY_COMMA: number = 188;\r\n    /**\r\n     * \"<\"\r\n     */\r\n    public static readonly KEY_LESS_THAN_SIGN: number = 188;\r\n    /**\r\n     * \".\"\r\n     */\r\n    public static readonly KEY_PERIOD: number = 190;\r\n    /**\r\n     * \">\"\r\n     */\r\n    public static readonly KEY_GREATER_THAN_SIGN: number = 190;\r\n    /**\r\n     * \"/\"\r\n     */\r\n    public static readonly KEY_FORWARD_SLASH: number = 191;\r\n    /**\r\n     * \"?\"\r\n     */\r\n    public static readonly KEY_QUESTION_MARK: number = 191;\r\n    /**\r\n     * \"`\"\r\n     */\r\n    public static readonly KEY_BACKTICK: number = 192;\r\n    /**\r\n     * \"~\"\r\n     */\r\n    public static readonly KEY_TILDE: number = 192;\r\n    /**\r\n     * \"[\"\r\n     */\r\n    public static readonly KEY_OPENING_SQUACE_BRACKET: number = 219;\r\n    /**\r\n     * \"{\"\r\n     */\r\n    public static readonly KEY_OPENING_CURLY_BRACE: number = 219;\r\n    /**\r\n     * \"\\\"\r\n     */\r\n    public static readonly KEY_BACKSLASH: number = 220;\r\n    /**\r\n     * \"|\"\r\n     */\r\n    public static readonly KEY_PIPE: number = 220;\r\n    /**\r\n     * \"]\"\r\n     */\r\n    public static readonly KEY_CLOSING_SQUARE_BRACKET: number = 221;\r\n    /**\r\n     * \"}\"\r\n     */\r\n    public static readonly KEY_CLOSING_CURLY_BRACE: number = 221;\r\n    /**\r\n     * \"'\"\r\n     */\r\n    public static readonly KEY_SINGLE_QUOTE: number = 222;\r\n    /**\r\n     * \"\"\"\r\n     */\r\n    public static readonly KEY_DOUBLE_QUOTE: number = 222;\r\n\r\n    /* 鼠标键值，前三个为W3C固定，命名暂时按照程序员习惯。 */\r\n    /**\r\n     * 鼠标键值：primary button\r\n     */\r\n    public static readonly MOUSE_LEFT_BUTTON: number = 0; // primary button\r\n    /**\r\n     * 鼠标键值：auxiliary button  wheel button\r\n     */\r\n    public static readonly MOUSE_MIDDLE_BUTTON: number = 1; // auxiliary button  wheel button\r\n    /**\r\n     * 鼠标键值：secondary button\r\n     */\r\n    public static readonly MOUSE_RIGHT_BUTTON: number = 2; // secondary button\r\n    /**\r\n     * 鼠标键值：浏览器后退\r\n     */\r\n    public static readonly MOUSE_BACK_BUTTON: number = 3; // 浏览器后退\r\n    /**\r\n     * 鼠标键值：浏览器前进\r\n     */\r\n    public static readonly MOUSE_FORWARD_BUTTON: number = 4; // 浏览器前进\r\n    /**\r\n     * Typescript没有静态代码段，所以这样代替静态代码段\r\n     */\r\n    protected static staticCode: void = TiKeymap.initFirefox();\r\n    /* Firefox符号键值有3个与其他浏览器不同\r\n        Semicolon\t\";\"\t186 //Firefox 59\r\n        Colon\t\":\"\t186 //Firefox 59\r\n        Equals sign\t\"=\"\t187 //Firefox 61\r\n        Plus\t\"+\"\t187 //Firefox 61\r\n        Minus\t\"-\"\t189  //Firefox 173\r\n        Underscore\t\"_\"\t189 //Firefox 173\r\n    */\r\n    private static initFirefox(): void {\r\n        if (TiBrowser.isFirefox()) {\r\n            TiKeymap.KEY_SEMICOLON = 59; // \";\"\r\n            TiKeymap.KEY_COLON = TiKeymap.KEY_SEMICOLON; // \":\"\r\n            TiKeymap.KEY_EQUALS_SIGN = 61; // \"=\"\r\n            TiKeymap.KEY_PLUS = TiKeymap.KEY_EQUALS_SIGN; // \"+\"\r\n            TiKeymap.KEY_MINUS = 173; // \"-\"\r\n            TiKeymap.KEY_UNDERSCORE = TiKeymap.KEY_MINUS; // \"_\"\r\n        }\r\n    }\r\n}\r\n// 因为Typescript没有类的静态代码段。所以对类的static变量初始化，写在这里。\r\n\r\n\r\n","/*\r\n * Logger工具类提供全局日志输出级别控制。\r\n *\r\n * 提供三个静态日志方法，log()/warn()/error()\r\n *\r\n * log()是调试期日志，产品时一定关闭。组件对打包对外提供时也关闭，不干扰用户开发。\r\n *\r\n * info()是产品期也可以输出的重要日志。暂不提供。\r\n *\r\n * warn()/error()产品期，可酌情打开。后期可以考虑，error日志回传给服务器。\r\n *\r\n */\r\n\r\n/**\r\n * Logger工具类, 提供全局日志输出和级别控制。\r\n *\r\n * <h3>示例</h3>\r\n * <iframe src=\"../tiny3demo/#/utils/log-basic\" frameborder='0' width=\"100%\" onload=\"this.height = document.documentElement.clientHeight\"></iframe>\r\n */\r\nexport class TiLog {\r\n\r\n    /**\r\n     * 可以输出Log以上日志，包含Log/Warn/Error，log表示一般的调试和运行信息。\r\n     */\r\n    public static readonly LEVEL_LOG: number = 1;\r\n    /**\r\n     * 可以输出Warn以上日志，包含Warn/Error日志，Warn表示会出现潜在错误的提示。\r\n     */\r\n    public static readonly LEVEL_WARN: number = 2;\r\n    /**\r\n     * 可以输出Error日志，Error表示发生错误事件，已经影响系统的正常运行。\r\n     */\r\n    public static readonly LEVEL_ERROR: number = 3;\r\n    /**\r\n     * 关闭输出所有日志\r\n     */\r\n    public static readonly LEVEL_OFF: number = 10;\r\n\r\n    private static level: number = TiLog.LEVEL_OFF;\r\n    /**\r\n     * 设置输出日志级别：LOG/WARN/ERROR/OFF. 默认是关闭\r\n     */\r\n    public static setLevel(level: number): void {\r\n            TiLog.level = level;\r\n    }\r\n    /**\r\n     *  一般的调试和运行信息\r\n     * @param [message] 信息\r\n     * @param optionalParams 参数\r\n     */\r\n    public static log(message?: any, ...optionalParams: Array<any>): void {\r\n        if (TiLog.LEVEL_LOG >= TiLog.level && console.log) {\r\n            console.log(message, ...optionalParams);\r\n        }\r\n    }\r\n\r\n    // public static info(message?: any, ...optionalParams: Array<any>): void {\r\n    //     if (Logger.infoable && console.log) {\r\n    //         // 在Chrome, console.info()只是log()的别名，tslint不建议使用。\r\n    //         console.log(message, ...optionalParams);\r\n    //     }\r\n    // }\r\n\r\n    /**\r\n     *  会出现潜在错误的提示\r\n     * @param [message] 信息\r\n     * @param optionalParams 参数\r\n     */\r\n    public static warn(message?: any, ...optionalParams: Array<any>): void {\r\n        if (TiLog.LEVEL_WARN >= TiLog.level && console.warn) {\r\n            console.warn(message, ...optionalParams);\r\n        }\r\n    }\r\n    /**\r\n     * 发生错误事件，已经影响系统的正常运行\r\n     * @param [message] 信息\r\n     * @param optionalParams 参数\r\n     */\r\n    public static error(message?: any, ...optionalParams: Array<any>): void {\r\n        if (TiLog.LEVEL_ERROR >= TiLog.level && console.error) {\r\n            console.error(message, ...optionalParams);\r\n        }\r\n    }\r\n}\r\n","/**\r\n * @ignore\r\n */\r\nexport class TiDateUtil {\r\n    /**\r\n     * 日期类组件的默认最小值\r\n     */\r\n    public static minDate(): Date {\r\n        return new Date(1970, 0, 1, 0, 0, 0);\r\n    }\r\n    /**\r\n     * 日期类组件的默认最大值\r\n     */\r\n    public static maxDate(): Date {\r\n        return new Date(2099, 11, 31, 23, 59, 59);\r\n    }\r\n    /**\r\n     * 判断是不是合法的时间对象\r\n     */\r\n    public static isDate(date: object | string): boolean {\r\n        // tslint:disable-next-line:triple-equals\r\n        if (Object.prototype.toString.call(date) === '[object Date]' && String(date) !== 'Invalid Date') {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @description 最大值时分秒置为23:59:59。\r\n     * 原因：date或者dateRange组件中，如果用户动态设置的value为最大年月日并带有时分秒，而设置的maxValue时分秒比较小时，\r\n     * 校验该value是否小于或等于最大值时，会出错。\r\n     * @param maxValue 最大值\r\n     */\r\n    public static changeMaxTime(maxValue: Date): Date {\r\n        if (!TiDateUtil.isDate(maxValue)) {\r\n            return TiDateUtil.maxDate();\r\n        }\r\n\r\n        return new Date(maxValue.getFullYear(), maxValue.getMonth(),\r\n            maxValue.getDate(), 23, 59, 59);\r\n    }\r\n\r\n    /**\r\n     * @description 最小值时分秒置为0:0:0。\r\n     * 原因：date或者dateRange组件中，如果用户设置的minValue带有时分秒，这时动态更新value为最小值年月日并时分秒为很小时，会出错。\r\n     * @param minValue 最小值\r\n     * @returns Date\r\n     */\r\n    public static changeMinTime(minValue: Date): Date {\r\n        if (!TiDateUtil.isDate(minValue)) {\r\n            return TiDateUtil.minDate();\r\n        }\r\n\r\n        return new Date(minValue.getFullYear(), minValue.getMonth(),\r\n            minValue.getDate(), 0, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * @description 判断两个日期是不是相等：只包括年月日\r\n     * @param newValue 新值\r\n     * @param oldValue 旧值\r\n     */\r\n    public static isDateEqual(newValue: Date, oldValue: Date): boolean {\r\n        if (newValue === oldValue) {\r\n            return true;\r\n        }\r\n\r\n        // 当两个value都是Date类型时，要判断两个值的年月日是否相等，直接用‘===’判断不准确\r\n        if (TiDateUtil.isDate(newValue) && TiDateUtil.isDate(oldValue)) {\r\n            // 转换成年月日，然后重新生成一个Date，再将其转换成毫秒数进行判断\r\n            const newDate: Date = new Date(newValue.getFullYear(), newValue.getMonth(), newValue.getDate());\r\n            const oldDate: Date = new Date(oldValue.getFullYear(), oldValue.getMonth(), oldValue.getDate());\r\n            if (newDate.getTime() === oldDate.getTime()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @description 判断两个时间日期是不是相等；\r\n     * @param newValue 新值\r\n     * @param oldValue 旧值\r\n     */\r\n    public static isDatetimeEqual(newValue: Date, oldValue: Date): boolean {\r\n        if (newValue === oldValue) {\r\n            return true;\r\n        }\r\n\r\n        if (TiDateUtil.isDate(newValue) && TiDateUtil.isDate(oldValue)) {\r\n            if (newValue.getTime() === oldValue.getTime()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @description 判断是不是合法的NowDateTime值\r\n     * 存在nowDateTime值，并且是时间对象，且大于最小值小于最大值\r\n     */\r\n    public static isValidNowDateTime(nowDateTime: Date, min: Date, max: Date): boolean {\r\n        return nowDateTime && TiDateUtil.isDate(nowDateTime) &&\r\n                (nowDateTime.getTime() >= min.getTime()) &&\r\n                (nowDateTime.getTime() <= max.getTime());\r\n    }\r\n\r\n    /**\r\n     * @description 判断value1是否大于value2\r\n     */\r\n    public static isBigger(value1: Date, value2: Date): boolean {\r\n        return value1.getTime() > value2.getTime();\r\n    }\r\n\r\n    /**\r\n     * @description 判断value1是否大于value2\r\n     */\r\n    public static isBiggerOrEqual(value1: Date, value2: Date): boolean {\r\n        return value1.getTime() >= value2.getTime();\r\n    }\r\n\r\n    /**\r\n     * @description 判断value1是否小于value2\r\n     */\r\n    public static isSmaller(value1: Date, value2: Date): boolean {\r\n        return value1.getTime() < value2.getTime();\r\n    }\r\n\r\n    /**\r\n     * @description 将Date类型的日期转换成年月日字符串\r\n     * @param date 要进行转换的日期值\r\n     */\r\n    public static getDateStr(date: Date): string {\r\n        return `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`;\r\n    }\r\n\r\n    /**\r\n     * @description 将Date类型的日期转换成时分秒字符串\r\n     * @param date 要进行转换的日期值\r\n     */\r\n    public static getTimeStr(date: Date): string {\r\n        const hour = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();\r\n        const minute = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();\r\n        const second = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds();\r\n\r\n        return `${hour}:${minute}:${second}`;\r\n    }\r\n\r\n    /**\r\n     * @description 判断是不是一个合法的最大值\r\n     * @param min 最小值\r\n     * @param max 最大值\r\n     */\r\n    public static isValidMaxValue(min: Date, max: Date): boolean {\r\n        return TiDateUtil.isDate(max) && (max.getTime() >= min.getTime());\r\n    }\r\n\r\n    /**\r\n     * @description 判断是不是一个合法的最小值\r\n     * @param min 最小值\r\n     * @param max 最大值\r\n     */\r\n    public static isValidMinValue(min: Date, max: Date): boolean {\r\n        return TiDateUtil.isDate(min) && (max.getTime() >= min.getTime());\r\n    }\r\n\r\n    /**\r\n     * @description 是否在最大值最小值区间\r\n     * @param min 最小值\r\n     * @param max 最大值\r\n     */\r\n    public static isBetweenMaxAndmin(value: Date, min: Date, max: Date): boolean {\r\n        return (value.getTime() >= min.getTime()) && (value.getTime() <= max.getTime());\r\n    }\r\n\r\n    /**\r\n     * @description  12小时制添加AMPM\r\n     */\r\n    public static addAmPm(timeFormat: string): string {\r\n        if (timeFormat.match(/h/) && !timeFormat.match(/a/)) { // 已设置ampm格式情况下，不做处理\r\n            return timeFormat + ' a'; // Angular 的datePipe 设置时间时，\"a\"代表AMPM\r\n        }\r\n\r\n        return timeFormat;\r\n    }\r\n\r\n    /**\r\n     * @description: 若时间字符串没有一个冒号时处理成合法的事件字符串（加冒号）\r\n     * @param value 时间字符串\r\n     */\r\n    public static addColon(value: string): string {\r\n        if (value.match(/:/)) {\r\n            return value;\r\n        }\r\n\r\n        const ampm: any = value.match(/am|AM|pm|PM/) || '';\r\n\r\n        return `${parseInt(value, 10)}: ${ampm}`;\r\n    }\r\n}\r\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n/**\r\n * 主题工具类\r\n *\r\n * <h3>示例</h3>\r\n * <iframe src=\"../tiny3demo/#/theme/theme-basic\" frameborder='0' width=\"100%\" onload=\"this.height = document.documentElement.clientHeight\"></iframe>\r\n */\r\nexport class TiTheme {\r\n\r\n    /**\r\n     * 加载CSS文件，挂在head link\r\n     * @param cssPath css路径\r\n     * @param id link id\r\n     */\r\n    public static loadCss(cssPath: string, id: string): HTMLLinkElement {\r\n        let link: HTMLLinkElement = document.getElementById(id) as HTMLLinkElement;\r\n\r\n        // 原本没有link，那么创建link\r\n        if (!link) {\r\n            link = document.createElement('link');\r\n            document.head.appendChild(link);\r\n        }\r\n        // 如果link href没变，那么就不处理了。\r\n        if (link.href === cssPath) {\r\n            return;\r\n        }\r\n        link.href = cssPath;\r\n        link.id = id;\r\n        link.rel = 'stylesheet';\r\n        link.type = 'text/css';\r\n\r\n        // 被CSSVar补丁处理后，补丁会给link打上disabled。去除disabled，才能再次补丁生效。\r\n        if (link.hasAttribute('disabled')) {\r\n            link.removeAttribute('disabled');\r\n        }\r\n\r\n        return link;\r\n    }\r\n    /**\r\n     * 检测浏览器是否原生支持CSSVar\r\n     * @returns 是否支持CSSVar\r\n     */\r\n    public static isNativeSupportCssVar(): boolean {\r\n        const isBrowser: boolean = typeof window !== 'undefined';\r\n        const isNativeSupport: boolean = isBrowser && window.CSS && window.CSS.supports && window.CSS.supports('(--a: 0)');\r\n\r\n        return isNativeSupport;\r\n    }\r\n    /**\r\n     * 启动AppModule\r\n     * @param app 传入的AppModule\r\n     */\r\n    public static bootstrapModule(app: any): void {\r\n        platformBrowserDynamic()\r\n            .bootstrapModule(app)\r\n            .catch((err: any) => console.error(err));\r\n    }\r\n}\r\n","/**\r\n * @ignore\r\n */\r\nexport type HandlerFnType = (key: any, value: any, add: boolean, from?: any) => void;\r\n// TODO:未来看typescript如何继承Map\r\n/**\r\n * @ignore\r\n */\r\nexport class ObservableMap {\r\n\r\n    // 代理模式\r\n    private map: Map<any, any> = new Map<any, any>();\r\n    get size(): number {\r\n        return this.map.size;\r\n    }\r\n    constructor() {\r\n        this.map = new Map();\r\n    }\r\n    // 观察者模式\r\n    private handlerSet: Set<HandlerFnType> = new Set<HandlerFnType>();\r\n    public addObserver(handlerFn: HandlerFnType): void {\r\n        this.handlerSet.add(handlerFn);\r\n    }\r\n    public removeObserver(handlerFn: HandlerFnType): void {\r\n        this.handlerSet.delete(handlerFn);\r\n    }\r\n    // 通知函数，不会通知到发起源\r\n    private notify(key: any, value: any, add: boolean, from: any): void {\r\n        this.handlerSet.forEach((handlerFn: HandlerFnType) => {\r\n            handlerFn(key, value, add, from);\r\n        });\r\n    }\r\n    //  设置，可以添加发起源，那么消息不会通知到发起源。\r\n    public set(key: any, value: any, from?: any): this {\r\n        if (!this.map.has(key) || (this.map.has(key) && this.map.get(key) !== value)) {\r\n            this.map.set(key, value);\r\n            this.notify(key, value, true, from);\r\n        }\r\n\r\n        return this;\r\n    }\r\n    //  删除，可以添加发起源，那么消息不会通知到发起源。\r\n    public delete(key: any, from?: any): boolean {\r\n        if (this.map.has(key)) {\r\n            this.map.delete(key);\r\n            this.notify(key, undefined, false, from);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    public has(key: any): boolean {\r\n        return this.map.has(key);\r\n    }\r\n    public get(key: any): boolean {\r\n        return this.map.get(key);\r\n    }\r\n    public getMap(): Map<any, any> { // 方便遍历Map，所有有了这个方法。\r\n        return this.map;\r\n    }\r\n}\r\n","/**\r\n * @ignore\r\n */\r\nexport type SetHandlerFnType = (item: any, add: boolean) => void;\r\n// TODO:未来看typescript如何继承Set\r\n/**\r\n * @ignore\r\n */\r\nexport class ObservableSet {\r\n    // 代理模式\r\n    private set: Set<any> = new Set<any>();\r\n    get size(): number {\r\n        return this.set.size;\r\n    }\r\n    constructor(items?: any) {\r\n        this.set = new Set(items);\r\n    }\r\n    // 观察者模式\r\n    private handlerSet: Set<SetHandlerFnType> = new Set<SetHandlerFnType>();\r\n    public addObserver(handlerFn: SetHandlerFnType): void {\r\n        this.handlerSet.add(handlerFn);\r\n    }\r\n    public removeObserver(handlerFn: SetHandlerFnType): void {\r\n        this.handlerSet.delete(handlerFn);\r\n    }\r\n    private notify(item: any, isAdd: boolean): void {\r\n        this.handlerSet.forEach((handlerFn: SetHandlerFnType) => {\r\n            handlerFn(item, isAdd);\r\n        });\r\n    }\r\n    public add(item: any): this {\r\n        if (!this.set.has(item)) {\r\n            this.set.add(item);\r\n            this.notify(item, true);\r\n        }\r\n\r\n        return this;\r\n    }\r\n    public delete(item: any): boolean {\r\n        if (this.set.has(item)) {\r\n            this.set.delete(item);\r\n            this.notify(item, false);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    public has(item: any): boolean {\r\n        return this.set.has(item);\r\n    }\r\n}","/**\r\n * @ignore\r\n * 工具类\r\n */\r\nexport class Util {\r\n    // Generate a unique integer id (unique within the entire client session).\r\n    // Useful for temporary DOM ids.\r\n    private static idCounter: number = 0;\r\n    /**\r\n     * 获得一个唯一标示\r\n     * @param prefix 前缀\r\n     * @returns 唯一标示字符串\r\n     */\r\n    public static getUniqueId(prefix: string): string {\r\n        Util.idCounter++;\r\n        const id: string = `${prefix}_${Util.idCounter}`;\r\n\r\n        return id;\r\n    }\r\n    // TODO: 是否可以去除？\r\n    /**\r\n     * 是否未定义\r\n     * @param value 值\r\n     * @returns 是否\r\n     */\r\n    public static isUndefined(value: any): boolean {\r\n        return value === undefined;\r\n    }\r\n    // TODO: 是否可以去除？\r\n    /**\r\n     * 是否空\r\n     * @param value 值\r\n     * @returns 是否\r\n     */\r\n    public static isNull(value: any): boolean {\r\n        return value === null;\r\n    }\r\n    // TODO: 是否可以去除？\r\n    /**\r\n     * 是否String\r\n     * @param value 值\r\n     * @returns 是否\r\n     */\r\n    public static isString(value: any): boolean {\r\n        return typeof value === 'string';\r\n    }\r\n    // TODO: 是否可以去除？\r\n    /**\r\n     * 是否Number\r\n     * @param value 值\r\n     * @returns 是否\r\n     */\r\n    public static isNumber(value: any): boolean {\r\n        return typeof value === 'number' && !isNaN(value);\r\n    }\r\n\r\n    /**\r\n     * 是否空字符串\r\n     * @param value 值\r\n     * @returns 是否\r\n     */\r\n    public static isEmptyString(value: string): boolean {\r\n        return value === undefined || value === null || value === '';\r\n    }\r\n    // TODO: 是否可以去除\r\n    /**\r\n     * 是否Array\r\n     * @param value 值\r\n     * @returns 是否\r\n     */\r\n    public static isArray(value: any): boolean {\r\n        return Array.isArray(value);\r\n    }\r\n    // TODO: 是否可以去除\r\n    /**\r\n     * 是否函数\r\n     * @param value 值\r\n     * @returns 是否\r\n     */\r\n    public static isFunction(value: any): boolean {\r\n        return typeof value === 'function';\r\n    }\r\n\r\n    /**\r\n     * 使用固定参数值格式化填充字串\r\n     * @param source 源字串,其中使用{N}代表需要匹配的参数次序,N从0开始\r\n     * @param params Array 参数数组\r\n     */\r\n    public static formatEntry(source: string, params: Array<any>): string {\r\n        let formatSource: string = source;\r\n        if (!this.isArray(params) || formatSource === '') {\r\n            return formatSource;\r\n        }\r\n        params.forEach((param: any, i: number) => {\r\n            formatSource = formatSource.replace(new RegExp(`\\\\{${i}\\\\}`, 'g'), () => {\r\n                return param;\r\n            });\r\n        });\r\n\r\n        return formatSource;\r\n    }\r\n\r\n    /**\r\n     * 发出一个HTML事件\r\n     * @param: ele 触发事件的DOM\r\n     * @param: eventName 事件名称\r\n     * @param: [canBubble] 是否冒泡，可选参数默认不冒泡 false\r\n     */\r\n    public static trigger(ele: any, eventName: string, canBubble?: boolean): void {\r\n        // 修复SSR错误：ERROR ReferenceError: document is not defined\r\n        if (typeof document === 'undefined') {\r\n            return;\r\n        }\r\n        const event: Event = document.createEvent('HTMLEvents');\r\n        event.initEvent(eventName, canBubble || false, true);\r\n        // event.initEvent(eventType,canBubble,cancelable)\r\n        ele.dispatchEvent(event);\r\n    }\r\n    /**\r\n     * 判断是否为dom元素\r\n     */\r\n    public static isElement(ele: any): boolean {\r\n        if (ele && ele.nodeType) {\r\n            return ele.nodeType === 1;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * 判断是否支持CSS Var\r\n     */\r\n    public static supportsCssVars(): boolean {\r\n        return typeof(window) !== 'undefined' && (window as any).CSS && (window as any).CSS.supports && (window as any).CSS.supports('(--a: 0)');\r\n    }\r\n    /**\r\n     * 通过tab键在弹窗内切换的时候，焦点需要一直在弹窗内部循环。\r\n     */\r\n    public static focusInDialogOnTabchange(event: KeyboardEvent, focusableElements: NodeList): void {\r\n        if (!focusableElements || focusableElements.length === 0) {\r\n            return;\r\n        }\r\n        const firstFocusableEle: any = focusableElements[0];\r\n        const lastFocusableEle: any = focusableElements[focusableElements.length - 1];\r\n        const target: EventTarget = event.target; // 获得触发事件的元素\r\n\r\n        // 按下tab+shift键时，如果当前已获取焦点元素是弹出框中的第一个可获取焦点元素，则聚焦最后一个元素\r\n        if (event.shiftKey) {\r\n            if (target === firstFocusableEle) {\r\n                lastFocusableEle.focus();\r\n                event.preventDefault(); // 阻止默认事件，确保此处手动focus生效\r\n            }\r\n        } else if (target === lastFocusableEle) { // 按下tab键时，如当前已获取焦点元素是最后一个可获取焦点元素，则聚焦第一个元素\r\n            firstFocusableEle.focus();\r\n            event.preventDefault(); // 阻止默认事件，确保此处手动focus生效\r\n        }\r\n    }\r\n}\r\nexport { TiBrowser } from './TiBrowser';\r\nexport { TiKeymap } from './TiKeymap';\r\nexport { TiLog } from './TiLog';\r\nexport { TiDateUtil } from './TiDateUtil';\r\nexport { TiTheme } from './TiTheme';\r\nexport { ObservableMap } from './ObservableMap';\r\nexport { ObservableSet } from './ObservableSet';\r\n","import {\r\n    Directive,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    Renderer2,\r\n    SimpleChange,\r\n    SimpleChanges\r\n} from '@angular/core';\r\nimport { animate, AnimationBuilder, AnimationPlayer, style } from '@angular/animations';\r\nimport { TiBrowser } from '../../utils/Util';\r\n/**\r\n * TiCollapseDirective指令主要功能为动态控制某一DOM节点的显示(展开)与隐藏(收起)\r\n *\r\n * <p><span style=\"color: red\">使用此组件时需要开发者在项目模块(建议在根模块)\r\n * 中引入BrowserAnimationsModule。</span>这是因为此组件中使用了Angular动画，需要引入BrowserAnimationsModule，\r\n * 但是 BrowserAnimationsModule 不能在懒加载模块被重复引入，所以需要开发者来引入BrowserAnimationsModule，保证其引入一次。</p>\r\n *\r\n * <example-url>../tiny3demo/#/collapse/collapse-all</example-url>\r\n */\r\n@Directive ({\r\n    selector: '[tiCollapse]'\r\n})\r\nexport class TiCollapseDirective implements OnInit, OnChanges {\r\n    private static ANIMATE_IN: string = '600ms cubic-bezier(0.755, 0.05, 0.855, 0.06)'; // easeInQuint\r\n    private static ANIMATE_OUT: string = '600ms cubic-bezier(0.23, 1, 0.32, 1)'; // easeOutQuint\r\n    /**\r\n     * 控制折叠面板的收起/展开\r\n     */\r\n    @Input('tiCollapse') isCollapse: boolean = true; // 是否收起\r\n    /**\r\n     * 折叠面板在收起/展开结束后(即收起/展开动画结束后)的回调；\r\n     * 回调的参数为布尔值，true: 收起结束后, false: 展开结束后\r\n     */\r\n    @Output() readonly toggleDone: EventEmitter<boolean> = new EventEmitter();\r\n    private element: HTMLElement;\r\n    private expandPlayer: AnimationPlayer;\r\n    private collapsePlayer: AnimationPlayer;\r\n\r\n    constructor(private elementRef: ElementRef, private renderer: Renderer2,\r\n                private builder: AnimationBuilder) {\r\n        this.element = this.elementRef.nativeElement;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (!TiBrowser.isIE() || TiBrowser.version() > 9) {\r\n            // 创建展开时动效的实例\r\n            this.expandPlayer = this.builder.build([\r\n                style({ 'max-height': '0px', overflow: 'hidden' }),\r\n                animate(TiCollapseDirective.ANIMATE_IN, style({ 'max-height': '2999px', overflow: 'visible' }))])\r\n                .create(this.element);\r\n\r\n            // 创建收起时动效的实例\r\n            this.collapsePlayer = this.builder.build([\r\n                style({ 'max-height': '2999px', overflow: 'visible' }),\r\n                animate(TiCollapseDirective.ANIMATE_OUT, style({ 'max-height': '0px', overflow: 'hidden' }))])\r\n                .create(this.element);\r\n\r\n            // 初始没有动画效果\r\n            if (this.isCollapse) {\r\n                this.collapsePlayer.finish();\r\n            } else {\r\n                this.expandPlayer.finish();\r\n            }\r\n        }\r\n\r\n        if (this.isCollapse) {\r\n            this.collapse();\r\n        } else {\r\n            this.expand();\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        const isCollapseObj: SimpleChange = changes['isCollapse'];\r\n\r\n        if (!isCollapseObj || isCollapseObj.firstChange) {\r\n            return;\r\n        }\r\n\r\n        if (TiBrowser.isIE() && (TiBrowser.version() === 9)) {\r\n            if (isCollapseObj.currentValue) {\r\n               this.collapse();\r\n            } else {\r\n                this.expand();\r\n            }\r\n            this.toggleDone.emit(isCollapseObj.currentValue);\r\n\r\n            return;\r\n        }\r\n\r\n        if (isCollapseObj.currentValue) {\r\n            // 执行收起动画前一定要重置展开动画，否则会影响收起动画\r\n            this.expandPlayer.reset();\r\n            // 执行收起动画\r\n            this.collapsePlayer.play();\r\n            // 收起动画结束后，设置元素display:none\r\n            this.collapsePlayer.onDone(() => {\r\n                // 设置元素display:none必须在收起动画结束后，否则没有动画效果\r\n                this.collapse();\r\n                this.toggleDone.emit(true);\r\n            });\r\n        } else {\r\n            // 执行展开动画前一定要重置收起动画，否则会影响展开动画\r\n             this.collapsePlayer.reset();\r\n             // 设置元素display:block\r\n             this.expand();\r\n             // 执行展开动画\r\n             this.expandPlayer.play();\r\n             this.expandPlayer.onDone(() => {\r\n                 this.toggleDone.emit(false);\r\n             });\r\n        }\r\n    }\r\n\r\n    private expand(): void {\r\n        this.renderer.setStyle(this.element, 'display', 'block');\r\n    }\r\n\r\n    private collapse(): void {\r\n        this.renderer.setStyle(this.element, 'display', 'none');\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiCollapseDirective } from './TiCollapseDirective';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [TiCollapseDirective],\r\n  declarations: [TiCollapseDirective]\r\n})\r\nexport class TiCollapseModule {\r\n}\r\nexport { TiCollapseDirective } from './TiCollapseDirective';\r\n","import { Directive, ElementRef, Renderer2, NgZone, AfterViewInit, OnDestroy } from '@angular/core';\r\n/**\r\n * @ignore\r\n * 点击需要和聚焦区分开。当点击的时候，不需要有outline。\r\n * 10.1.4新增\r\n */\r\n@Directive({\r\n    selector: '[tiOutline]'\r\n})\r\nexport class TiOutlineDirective implements AfterViewInit {\r\n    constructor(private renderer: Renderer2, public hostEle: ElementRef, private zone: NgZone) {\r\n    }\r\n    ngAfterViewInit(): void {\r\n        this.zone.runOutsideAngular(() => {\r\n            const outlineHostEle: any = this.hostEle.nativeElement;\r\n            if (outlineHostEle) {\r\n                this.renderer.listen(outlineHostEle, 'mousedown', (): void => {\r\n                    this.renderer.setStyle(outlineHostEle, 'outline', 'none');\r\n                });\r\n                this.renderer.listen(outlineHostEle, 'blur', (): void => {\r\n                    this.renderer.setStyle(outlineHostEle, 'outline', '');\r\n                });\r\n            }\r\n        });\r\n    }\r\n }","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiOutlineDirective } from './TiOutlineDirective';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [TiOutlineDirective],\r\n  declarations: [TiOutlineDirective]\r\n})\r\nexport class TiOutlineModule {\r\n}\r\nexport { TiOutlineDirective } from './TiOutlineDirective';\r\n","import { Component, ElementRef, ViewEncapsulation } from '@angular/core';\r\n/**\r\n * @ignore\r\n * ti-icon组件，为了防止多个组件重复使用字体图标文件，导致最终用户打包文件成倍增大，因此封装该组件，确保最终打包只引用一份字体图标样式及文件\r\n * TODO：考虑逐步去除这个i封装组件，采用ti-icon封装\r\n */\r\n@Component({\r\n  selector: ':not(ti-icon).ti3-icon',\r\n  template: '<ng-content></ng-content>',\r\n  styleUrls: ['./icon.less'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\n\r\nexport class TiIconClassComponent {\r\n  public nativeElement: any; // 宿主元素\r\n  constructor(protected hostRef: ElementRef) {\r\n    this.nativeElement = this.hostRef.nativeElement;\r\n  }\r\n}\r\n","import { AfterContentChecked, AfterContentInit, AfterViewChecked, AfterViewInit, Component, DoCheck, ElementRef,\r\n    Input, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';\r\nimport { Util } from '../../utils/Util';\r\n\r\n\r\n// 如果base有@Component，那么所有子类都不必写constructor了，应该跟constructor注入有关\r\n/**\r\n * 基类，已实现[id]，子类也可以使用hostRef, nativeElement, renderer\r\n */\r\n@Component({\r\n    selector: 'ti-base',\r\n    template: ''\r\n})\r\nexport class TiBaseComponent implements OnChanges, OnInit, DoCheck, AfterContentInit,\r\n    AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\r\n    /**\r\n     * HTML属性id，自动化测试要求必须给id赋值\r\n     */\r\n    // TODO：改名字\r\n    @Input() id: string; // TODO:覆盖Angular的[id]变量。因为Angular[id]变量只能在ngAfterViewInit拿到，太迟。\r\n    /**\r\n     * @ignore\r\n     * 这里用any，原因HTMLElement->Element->Node, attributes定义的格式太死，不能有多余字段，可能是类型定义bug\r\n     * interface Node extends EventTarget {readonly attributes: NamedNodeMap;\r\n     */\r\n    public nativeElement: any; // 宿主元素\r\n\r\n    constructor(protected hostRef: ElementRef, protected renderer: Renderer2) {\r\n        this.nativeElement = this.hostRef.nativeElement;\r\n    }\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // id动态变化时，重新设置id\r\n        if (changes['id'] && !changes['id'].firstChange) {\r\n            this.setId();\r\n        }\r\n    }\r\n    ngOnInit(): void {\r\n        this.setId();\r\n    }\r\n    ngDoCheck(): void {\r\n    }\r\n    ngAfterContentInit(): void {\r\n    }\r\n    ngAfterContentChecked(): void {\r\n    }\r\n    ngAfterViewInit(): void {\r\n    }\r\n    ngAfterViewChecked(): void {\r\n    }\r\n    ngOnDestroy(): void {\r\n    }\r\n    // 给宿主设置Id\r\n    private setId(): void {\r\n        // 空id都自动创建id\r\n        if (Util.isEmptyString(this.id)) {\r\n            this.id = Util.getUniqueId('ti_auto_id');\r\n        }\r\n        this.renderer.setProperty(this.nativeElement, 'id', this.id);\r\n    }\r\n    /**\r\n     * 生成宿主Id：如果组件必须要有Id，那么调用此方法，无ID时会自动生成一个ID。\r\n     */\r\n    protected creatId(): void {\r\n        // 如果用户没有写宿主id\r\n        if (Util.isEmptyString(this.id)) {\r\n            // 生成唯一id\r\n            this.id = Util.getUniqueId('ti_auto_id');\r\n            this.setId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 供内部子元素使用\r\n     * @example\r\n     * <span  [id]='appendId(\"label_span\")'>{{label}}</span>\r\n     * @param suffix 传入的字符串\r\n     * @returns 返回的字符串this.id + '_' + suffix\r\n     */\r\n    public appendId(suffix: string): string {\r\n        // 应该不存在空id了，因为所有组件都有自动生成id\r\n        return `${this.id}_${suffix}`;\r\n    }\r\n}\r\n/*\r\n用户写宿主id三种方式：\r\n1）给HTML属性id赋字符串id='mycheckbox',\r\n2）给HTML属性id赋变量[attr.id]='mycheckboxid',用户不太会这么用，暂不考虑支持。\r\n3）给DOM属性id赋变量[id]='mycheckboxid'\r\n组件开发读写宿主id的三种方法：\r\n1）读HTML属性id constructor(@Attribute('id') public id )\r\n2）写HTML属性id @HostBinding('attr.id') id: string;\r\n写DOM属性id @HostBinding('id') id: string;\r\n3）读写DOM属性id constructor(private hostRef: ElementRef ) ngAfterViewInit() { ...this.hostRef.nativeElement.id... }\r\n注意：\r\n1）开发Checkbox时，是类似属性指令的组件，宿主元素是input，其他组件暂未尝试。\r\n2）id='mycheckbox'，constructor就能拿到。但Angular[id]变量最早能在ngAfterViewInit()拿到，很迟。\r\n3）自己定义一个id变量，会覆盖angular的id变量，在ngOnInit()就可以拿到，很早。\r\n综上，nativeElement.id读写id，可以兼容以上三种用户写宿主id。\r\n方案一：ngAfterViewInit()取到Angular的id,很晚。但模板中需要使用id，设置太迟，需要强制刷新。\r\nngAfterViewInit() {\r\nthis.setId(); // 取得[id]变量赋值，必须在ngAfterViewInit()。其他周期拿不到。\r\n...\r\n}\r\nprivate setId() {\r\n// 如果用户没有写宿主id\r\nif (Util.isEmptyString(this.hostNode.id)) {\r\n// 生成唯一id\r\nthis.hostNode.id = Util.getUniqueId('checkbox');\r\n}\r\n// 获取宿主id\r\nthis.id = this.hostNode.id;\r\nthis.cdRef.detectChanges(); // 强制检测，刷新视图中使用的id变量。因为有时视图绘制更早，变量变化后试图未更新。\r\n// TODO: 强制检测变化会不会有性能负担？\r\n}\r\n方案二：自定义id覆盖覆盖Angular的[id]变量，ngOnInit()取到id，很早。无需强制刷新。\r\n@Input('id') id: string; // 覆盖Angular的[id]变量。因为Angular[id]变量只能在ngAfterViewInit拿到，太迟。\r\nngOnInit() {\r\n...\r\nthis.setId();\r\n}\r\nprivate setId() {\r\n// 如果用户没有写宿主id\r\nif (Util.isEmptyString(this.id)) {\r\n// 生成唯一id\r\nthis.id = Util.getUniqueId('checkbox');\r\n}\r\n// 设置宿主id\r\nthis.renderer.setProperty(this.hostNode, 'id', this.id);\r\n// this.cdRef.detectChanges(); // 无需强制检测\r\n}\r\n方案三：想办法尽早取到Angular的[id],暂无接口。\r\n可能Angular确实是在AfterViewInit前一刻才取到[id][disabled]。\r\nPrimeNG等库，也是用@Input('id')去覆盖[id] [disabled]等。\r\n\r\nChorme79版报相同id警告：\r\n<span  [id]='appendId(\"label_span\")'>{{label}}</span>\r\n原生标签这样写法，哪怕appendID函数返回空字符串，也会有存在id属性。这样页面中存在多个相同空id。\r\n解决方案：哪怕用户没有赋id，组件都会自动创建id，那么所有组件都有不同id，内部的span等也会有不同id。\r\n*/\r\n","import { Component, EventEmitter, forwardRef, Input, Output, SimpleChanges, Type } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { TiBaseComponent } from './TiBaseComponent';\r\nimport { TiBrowser } from '../../utils/Util';\r\n\r\n// SSR环境需要\r\ndeclare let global: any;\r\n\r\n// TODO: aria-label\r\n/**\r\n * 表单基类，已实现autofocus tabindex disabled focus() blur() focus/blur/change事件 ControlValueAccessor\r\n */\r\n@Component({// lib编译要求@Component\r\n    selector: 'ti-form',\r\n    template: ''\r\n})\r\nexport class TiFormComponent extends TiBaseComponent implements ControlValueAccessor {\r\n    /**\r\n     * HTML属性tabindex\r\n     */\r\n    @Input() tabindex: string = '0';\r\n    /**\r\n     * 是否禁用\r\n     */\r\n    @Input() disabled: boolean; // 因为Angualr原生[disabled]->setDisabledState机制在单选多选没有生效。所以，这里接管了。\r\n    /**\r\n     * HTML事件focus\r\n     */\r\n    // TODO：ip组件等是触发原生HTML的focus事件，便于校验？\r\n    // TODO：一行有两个tslint错误，无法临时消除\r\n    // tslint:disable-next-line:no-output-rename\r\n    @Output('focus') readonly focusEvent: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\r\n    /**\r\n     * HTML事件blur\r\n     */\r\n    // tslint:disable-next-line:no-output-rename\r\n    @Output('blur') readonly blurEvent: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\r\n    /**\r\n     * @ignore\r\n     * HTML事件change\r\n     */\r\n    // blur时model值改变触发change\r\n    // tslint:disable-next-line:no-output-rename\r\n    @Output('change') readonly changeEvent: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    private focusCancelFns: Array<() => void>; // 监听foucs事件的取消句柄\r\n    private blurCancelFns: Array<() => void>; // 监听blur事件的取消句柄\r\n    private mousedownCancelFns: Array<() => void>; // 监听blur事件的取消句柄\r\n    private focusModel: any; // 落焦点时，记录model值\r\n\r\n    protected focusElem: any; // autofocus focus()将要聚焦的元素。默认是宿主元素，子类设置focusableElems后，为第一个非disabled可聚焦元素。\r\n    /**\r\n     * 整体focus/blur事件参与的元素，和disabled设置。\r\n     * 组件具有多个input输入框:\r\n     * 1)无元素聚焦->任一元素聚焦=整体聚焦事件。\r\n     * 2)任一元素失焦->其他元素无焦点=整体失焦事件。\r\n     */\r\n    private focusableElems: Array<any> = [];\r\n    // 实现表单4接口1注册\r\n    private _model: any;  // 传入模型值\r\n    private ngAfterViewCheckedFirst: boolean = true; // 是否第一次执行初始化\r\n\r\nprotected onModelChange: (model: any) => void; // 模型change回调函数，触发模型值改变\r\n    protected onModelTouched: () => void; // 模型blur回调函数，触发校验\r\n    protected focusedElem: any; // 已聚焦元素, 在子组件中有使用\r\n    /**\r\n     * @ignore\r\n     * 实现表单注册接口\r\n     * @param type 类型\r\n     * @returns 对象\r\n     */\r\n    public static getValueAccessor(type: Type<any>): any {\r\n        return {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            // tslint:disable-next-line:no-forward-ref\r\n            useExisting: forwardRef(() => type),\r\n            multi: true\r\n        };\r\n    }\r\n    /**\r\n     * 是否组件整体聚焦\r\n     */\r\n    public get focused(): boolean {\r\n        return this.nativeElement.attributes.tiFocused !== undefined;\r\n    }\r\n    /**\r\n     * 为Dom元素添加/移除属性，此处用于disabled和focused属性的操作\r\n     * @param  element 需要操作的Dom元素\r\n     * @param  attr 操作的属性\r\n     * @param  value 属性值，为true时属性值即为属性值,为false时，移除属性\r\n     */\r\n    protected setAttr(element: any, attr: string, value: boolean): void {\r\n        // 如果可聚焦元素是原生input等，[disabled]属性会生效。\r\n        // this.renderer.setProperty(this.focusElem, 'disabled', isDisabled); // 参照angular官方设置disabled源码，true和fasle都考虑了\r\n        // 如果可聚焦元素是组件、div，[disabled]属性不会生效。但setAttribute会增加一项html属性。setProperty不增加。\r\n        if (value) {\r\n            this.renderer.setAttribute(element, attr, attr);\r\n        } else {\r\n            this.renderer.removeAttribute(element, attr);\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        // 表单中统一加该属性，用于表单校验中的样式选择器\r\n        this.renderer.setAttribute(this.nativeElement, 'tiForm', '');\r\n    }\r\n    /**\r\n     * 监听disabled变化\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        super.ngOnChanges(changes);\r\n        if (changes['disabled']) {\r\n            this.setDisabledState(changes['disabled'].currentValue);\r\n        }\r\n    }\r\n    /**\r\n     * 注意：子类继承自Form基类，如果有this.setFocusableElems([xxx]), 那么要更晚调用super.ngAfterViewChecked()。\r\n     * 子类ngAfterViewChecked(): void {\r\n     *      this.setFocusableElems([xxx]);\r\n     *      // 更晚调用super\r\n     *      super.ngAfterViewChecked();\r\n     * }\r\n     */\r\n    ngAfterViewChecked(): void {\r\n        super.ngAfterViewChecked();\r\n        if (this.ngAfterViewCheckedFirst) {\r\n            this.ngAfterViewCheckedFirst = false;\r\n            // 尽量延迟autoFocus的执行。因为有些组件在ngAfterViewInit才拿得到ngFor ngIf内的元素作为可聚焦元素。\r\n            this.autoFocus();\r\n        }\r\n    }\r\n    /**\r\n     * 当做生命周期用吧，监听模型值变化。包括writeValue和this.model=赋值 这两个时刻。\r\n     * @param model 模型值\r\n     */\r\n    protected ngOnModelChange(model: any): void {\r\n    }\r\n    /**\r\n     * 设置tab键/点击时的聚焦元素，会顺便设置组件focus()聚焦时可聚焦元素（第一个非disabled的可聚焦元素）。\r\n     * 当可聚焦元素变动，或者单一元素disabled状态变动，都要重新调用此方法设置。\r\n     * 建议一般在ngOnInit生命周期调用，如果ngFor/ngIf内元素在ngOnInit找不到那么可在ngAfterViewInit生命周期调用。\r\n     * 注意：所有生命周期，都要调用类似super.ngOnInit()\r\n     *\r\n     * @param elems 可聚焦元素数组Array<Element>，第一个非disabled元素为整个组件的可聚焦元素。\r\n     *\r\n     * 目前使用分为几种情况：\r\n     * 1）一般表单组件，含有可聚焦子元素。\r\n     * 组件主动设置可聚焦元素数组this.setFocusableElems([xxxElement, yyyElement]);\r\n     * 2）有的表单组件，永远不聚焦。\r\n     * slider/list/menulist/droplist，统一不调用此接口。\r\n     * a.不调用接口时，@Input() tabindex: string = '0';未生效。但用户在html标签上设置的属性tabindex=\"0\"等，会生效。\r\n     * b.调用了this.setFocusableElems([]);时，强制清除了标签属性tabindex。用户设置的属性tabindex=\"1\"，会无效，不出现在标签上。\r\n     * 3）少量组件，内部没有可聚焦元素。但是皮儿需要聚焦，ti-dominator。\r\n     * 需要设置this.setFocusableElems([this.nativeElement]);\r\n     */\r\n    protected setFocusableElems(elems: Array<any>): void {\r\n        if (!elems) {\r\n            // 不支持组件传入 null 和undefined，支持传入[]\r\n            return ;\r\n        }\r\n        // TODO: 第二次调用时，如果焦点元素减少，那么需要处理tabindex\r\n        // TODO: 支持用户动态第二次设置setFocusableElems。其实，actionmenu会动态设置\r\n        this.focusableElems = elems;\r\n        // 将要上焦点的元素\r\n        this.setFocusElem();\r\n        // 给所有子元素添加tabindex。\r\n        this.setElemsTabindex();\r\n        // 设置宿主标签上的focus()/blur()方法\r\n        this.setNativeElementFocusFn();\r\n        // 设置focus/blur事件监听\r\n        this.setFocusEvents();\r\n    }\r\n    /**\r\n     *  调用focus()函数，会触发组件整体聚焦，此时焦点元素。\r\n     */\r\n    private setFocusElem(): void {\r\n        this.focusElem = undefined;\r\n        // 寻找第一个非disabled元素，作为可聚焦元素\r\n        for (const elem of this.focusableElems) {\r\n            if (elem && elem.attributes.disabled === undefined) {\r\n                this.focusElem = elem;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 去除皮上的tabindex，给内部可聚焦子元素添加tabindex\r\n     * 当然，特殊情况：this.setFocusableElems([this.nativeElement]);时，又会给皮上补上tabindex\r\n     * 本来此方法，可以合入setFocusEvents()，减少遍历循环。但为了清晰，依然单独为函数。\r\n     */\r\n    private setElemsTabindex(): void {\r\n        // 去除组件标签上的tabindex属性。\r\n        this.renderer.removeAttribute(this.nativeElement, 'tabindex');\r\n        this.focusableElems.forEach((elem: any) => {\r\n            // 给每一个元素添加tabindex\r\n            this.setTabindex(elem);\r\n        });\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public getFocusableElems(): Array<any> {\r\n        return this.focusableElems;\r\n    }\r\n    /**\r\n     * 宿主元素标签上添加类似原生focus()方法。\r\n     * 用户调用方法: document.getElementById('ti-xxx').focus();\r\n     * 其实，更推荐调用组件实例上的方法tiXxxComp.focus();\r\n     */\r\n    private setNativeElementFocusFn(): void {\r\n        // 注意：这里必须用箭头函数，以保证运行时this变量不变。\r\n        if (this.focusElem !== this.nativeElement) { // 避免无限循环调用，所以要有此条件限制\r\n            // SSR环境直接返回，是因为SSR环境报错：Cannot assign to read only property 'focus' of object \r\n            // 采用['nativeElement']['focus']也解决不了\r\n            if (typeof global !== 'undefined') {\r\n                return;\r\n            }\r\n            this.nativeElement.focus = (): void => {\r\n                this.focus();\r\n            };\r\n            this.nativeElement.blur = (): void => {\r\n                this.blur();\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * 设置组件中的可聚焦元素并监听事件\r\n     */\r\n    private setFocusEvents(): void {\r\n        // if (elems.length === 1 && this.focusableElems && this.focusableElems.length > 1) {\r\n        //     // 多聚焦元素，第二次setFocusElem()时，elems长度为1，也会走到这里，返回。\r\n        //     return;\r\n        // }\r\n        // 取消原有的focus/blur监听\r\n        if (this.focusCancelFns) {\r\n            this.focusCancelFns.forEach((fn: () => void) => fn());\r\n        }\r\n        if (this.blurCancelFns) {\r\n            this.blurCancelFns.forEach((fn: () => void) => fn());\r\n        }\r\n        if (this.mousedownCancelFns) {\r\n            this.mousedownCancelFns.forEach((fn: () => void) => fn());\r\n        }\r\n        // 建立新的focus/blur监听\r\n        this.focusCancelFns = new Array<any>();\r\n        this.blurCancelFns = new Array<any>();\r\n        this.mousedownCancelFns = new Array<any>();\r\n\r\n        this.focusableElems.forEach((elem: any) => {\r\n            this.focusCancelFns.push(this.renderer.listen(elem, 'focus', this.focusCallbackFn));\r\n            this.blurCancelFns.push(this.renderer.listen(elem, 'blur', this.blurCallbackFn));\r\n        });\r\n    }\r\n    /**\r\n     * focus回调函数\r\n     */\r\n    private focusCallbackFn: ((event: FocusEvent) => void) = (event: FocusEvent) => {\r\n        this.focusedElem = event.target;\r\n        // 非IE浏览器支持event.relatedTarget，使用event.relatedTarget进行处理\r\n        if (!TiBrowser.isIE()) {\r\n            // 当为内部焦点转移，不做处理\r\n            if (this.focusableElems.length > 1 &&\r\n                this.focusableElems.includes(event.relatedTarget)) {\r\n                return;\r\n            }\r\n        } else {// IE浏览器的处理：浏览器不支持relatedTarget情况下的处理，参见blur中的说明\r\n            if ((event.target as any).tiFocusFrom) {\r\n\r\n                // return;\r\n                // 情况一：失焦后强制聚焦\r\n                if (event.target === (event.target as any).tiFocusFrom) {\r\n                    // 面板滚动条IE兼容：在focusin中，让失焦元素强制聚焦，会走到这里。\r\n\r\n                    return;\r\n                }\r\n                // 情况二：内部焦点转移\r\n                if (this.focusableElems.length > 1 &&\r\n                    this.focusableElems.includes((event.target as any).tiFocusFrom)) {\r\n\r\n                    return;\r\n                }\r\n                // 情况三：较难理解：外部焦点转移时，(event.target as any).tiFocusFrom也是有值的。\r\n                // 这种情况，是因为组件嵌套使用，此聚焦元素分别从属于多个组件。\r\n                // 对于A组件来说，是焦点内部转移。对于B组件来说，是焦点外部转移。\r\n            }\r\n        }\r\n        // 设置宿主元素的聚焦属性，用于标识该组件处于聚焦状态，该属性可用于css选择器：在宿主元素上增加属性focused\r\n        this.setAttr(this.nativeElement, 'tiFocused', true);\r\n        // 触发整体聚焦事件\r\n        this.focusEvent.emit(event);\r\n        // 保存focus时model值，blur时如果model值改变，则发送change事件\r\n        this.focusModel = this.model;\r\n    }\r\n    /**\r\n     * blur 回调函数\r\n     */\r\n    private blurCallbackFn: ((event: FocusEvent) => void) = (event: FocusEvent) => {\r\n        // 非IE浏览器支持event.relatedTarget，使用event.relatedTarget进行处理\r\n        if (!TiBrowser.isIE()) {\r\n            // 当为内部焦点转移，不做处理\r\n            if (this.focusableElems.length > 1 &&\r\n                this.focusableElems.includes(event.relatedTarget)) {\r\n                return;\r\n            }\r\n        } else {\r\n\r\n            // 已经失焦的元素，清除记录焦点从哪里而来。\r\n            (event.target as any).tiFocusFrom = undefined;\r\n\r\n            // 如果失焦元素强制聚焦，不触发整体失焦事件。\r\n            if (event.target === document.activeElement) {\r\n                // 面板滚动条IE兼容：在focusin中，让失焦元素强制聚焦，会走到这里。\r\n                // 即将聚焦（实际上已经聚焦）的元素，记录一下焦点从哪儿来：从自己来的\r\n                (document.activeElement as any).tiFocusFrom = event.target;\r\n\r\n                return;\r\n            }\r\n\r\n            // 浏览器不支持relatedTarget:IE下不支持\r\n            // 判断是否为内部焦点转移通过元素方法：\r\n            // 两个元素的焦点切换时，会先触发a元素的失焦，再触发b元素的聚焦\r\n            // a失焦处理：当前聚焦元素为该元素的可聚焦元素时，则认为是内部焦点转移，并且将聚焦元素的relatedTarget赋值为当前失焦元素，方便blur时的处理；\r\n            // b聚焦处理：判断当前聚焦元素的relatedTarget是否为内部可聚焦元素，如果是的话，则判定其为内部焦点转移\r\n            if (this.focusableElems.length > 1 &&\r\n                this.focusableElems.includes(document.activeElement)) {\r\n                // 即将聚焦（实际上已经聚焦）的元素，记录一下焦点从哪儿来。\r\n                (document.activeElement as any).tiFocusFrom = event.target; // element setAttribute赋值不支持对象形式，因此使用该方式\r\n\r\n                return;\r\n            }\r\n        }\r\n        this.focusedElem = undefined;\r\n        // 取消宿主元素的聚焦属性\r\n        this.setAttr(this.nativeElement, 'tiFocused', false);\r\n        // 触发整体失焦事件\r\n        this.blurEvent.emit(event);\r\n        // blur时如果model值改变，则发送change事件\r\n        if (this.model !== this.focusModel) {\r\n            this.changeEvent.emit(this.model);\r\n        }\r\n        // 触发组件的touched回调，标志其已被touch过\r\n        if (this.onModelTouched) {\r\n            this.onModelTouched();\r\n        }\r\n    }\r\n    /**\r\n     * 聚焦方法。类似HTML DOM节点方法focus\r\n     */\r\n    public focus(): void {\r\n        if (this.focusElem) {\r\n            this.focusElem.focus();\r\n        }\r\n    }\r\n    /**\r\n     * 失焦方法。类似HTML DOM节点方法blur\r\n     */\r\n    public blur(): void {\r\n        if (this.focusedElem) {\r\n            this.focusedElem.blur(); // 只对当前聚焦元素进行失焦处理\r\n        }\r\n    }\r\n    /**\r\n     * Tiny组件各种行为，尽量和原生一致。 autofocus也许可以做成一个指令\r\n     * Tiny3新增：增加初始化焦点autofocus支持。IE9本来不支持autofocus，这时也支持了\r\n     */\r\n    private autoFocus(): void {\r\n        if (this.nativeElement.attributes.autofocus) {\r\n            this.focus();\r\n        }\r\n    }\r\n    /**\r\n     * 实现类表单组件的set和get方法\r\n     */\r\n    get model(): any {\r\n      return this._model;\r\n    }\r\n    /**\r\n     * 设置model值，如果有变化，则触发ngModelChange\r\n     */\r\n    set model(model: any) {\r\n        if (this._model === model) {\r\n            return;\r\n        }\r\n        this._model = model;\r\n        if (this.onModelChange) {\r\n            this.onModelChange(model);\r\n        }\r\n        this.ngOnModelChange(model);\r\n    }\r\n    /* 表单4接口start */\r\n    /**\r\n     * @ignore\r\n     * 如果用户改变了[ngModel]绑定的变量，那么Angular会通知到这里\r\n     * 子类如果没有特殊需求，都需要首行调用super.writeValue（xxx）\r\n     *\r\n     * super.writeValue 和 this.model=xxx的区别：\r\n     * super.writeValue不会触发ngModelChange\r\n     * this.model=xxx会触发ngModelChange\r\n     * @param model any类型\r\n     */\r\n    writeValue(model: any): void {\r\n        this._model = model;\r\n        this.ngOnModelChange(model);\r\n    }\r\n    /**\r\n     * @ignore\r\n     * Angular将(ngModelChange)绑定的函数，通知到这里。\r\n     * 当组件内部model值改变，需要调用这个函数向外通知。\r\n     * @param fn 回调函数\r\n     */\r\n    registerOnChange(fn: (model: any) => void): void {\r\n        this.onModelChange = fn;\r\n    }\r\n    /**\r\n     * @ignore\r\n     * Blur时，或者需要校验时，需要调用此函数。（可能描述不准确，需要再查资料）\r\n     * @param fn 回调函数\r\n     */\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 用户绑定在[disabled]上的变量变化，会通知到这里。\r\n     * ti-xxx组件皮上设置[disabled]，会给皮上设置disabled属性，也会给所有可聚焦元素设置disabled属性。\r\n     * 如有特殊需求，子类可以不使用super.setDisabledState(), 而是直接覆盖。\r\n     * Angular原生[disabled]机制：checkbox/radio走不进原生setDisabledState()。原生[disabled][id]等取值也很晚。\r\n     * 注意: Form基类@Input() disabled已经接管了Angular原生[disabled]机制。\r\n     * ngOnChanges监听到disabled值（第一次和后续改变），会通知到这里。\r\n     * @param isDisabled 是否禁用\r\n     */\r\n    setDisabledState?(isDisabled: boolean): void {\r\n        // 表单this.form.controls.myselect.disable();会直接通知到这里，但不会通知到ngOnChanges。所以要设置this.disabled =\r\n        this.disabled = isDisabled;\r\n        // 给宿主添加disabled属性\r\n        this.setAttr(this.nativeElement, 'disabled', isDisabled);\r\n        // 给聚焦事件元素添加disabled属性\r\n        this.focusableElems.forEach((element: any) => {\r\n            this.setAttr(element, 'disabled', isDisabled);\r\n            // 如果可聚焦元素是自定义组件、div等，那么标签上的disabled属性不生效。\r\n            // 需要借助于tabindex控制是否允许焦点。\r\n            // 控制禁用样式，方案一：（推荐）less里[disabled]属性模仿伪类，ti-xxx皮上的[disabled]更可靠\r\n            // 方案二：html的ngClass用Form基类disabled变量。\r\n            this.setTabindex(element);\r\n        });\r\n    }\r\n    /**\r\n     * 设置tabindex\r\n     * @param element 原生标签元素\r\n     */\r\n    private setTabindex(element: any): void {\r\n        // 整体禁用，或者小元素被禁用。\r\n        if (element.attributes.disabled) {\r\n            // 禁用时\r\n            this.renderer.removeAttribute(element, 'tabindex');\r\n            // A和input已经有disabled属性了，不需要加tabindex\r\n            // 普通元素，也不需要加tabindex\r\n\r\n            // A标签禁用时想要点击和tab都不落焦点，唯一方法是去除href\r\n            if (element.tagName === 'A') {\r\n                this.renderer.removeAttribute(element, 'href');\r\n            }\r\n        } else {\r\n            if (element.tagName === 'A') {\r\n                // 特例：A标签不设置tabindex='0'。Chrome浏览器不设置tabindex效果：点击时无蓝框，tab时有蓝框。\r\n                if (this.tabindex === '0') {\r\n                    this.renderer.removeAttribute(element, 'tabindex');\r\n                } else {\r\n                    this.renderer.setAttribute(element, 'tabindex', this.tabindex);\r\n                }\r\n                // disabled时去除的href，添加回来\r\n                if (!element.attributes.href) {\r\n                    // 默认所有的A标签都是tiny使用的标签，href都是javascript:void(0)\r\n                    this.renderer.setAttribute(element, 'href', 'javascript:void(0)');\r\n                }\r\n            } else {\r\n                this.renderer.setAttribute(element, 'tabindex', this.tabindex);\r\n            }\r\n        }\r\n    }\r\n    /* 表单4接口end */\r\n}\r\n/**\r\n * tabindex相关知识：\r\n * 所有已设置tabindex的元素，都会点击聚焦。哪怕<div tabindex=\"-1\">test</div>也会点击聚焦。\r\n * Tab键，会按照顺序聚焦：1,2,3,4，...0，按照此顺序聚焦。\r\n * tabindex='-1'不参与Tab键, 但是可以点击聚焦。\r\n * A标签不设置tabindex效果：Chrome浏览器点击时无蓝框，tab时有蓝框。其他浏览器有差异。\r\n * A标签禁用时想要点击和tab都不落焦点，唯一方法是去除href\r\n * input标签不设置tabindex效果：Chrome浏览器点击时/tab时都有蓝框。\r\n * 如果设置tabindex='',或者tabindex='tabindex'，这样非法设置，Chrome相当于没有设置。其他浏览器有差异\r\n */\r\n","import { Component, ElementRef, HostListener, Input, ViewChild } from '@angular/core';\r\nimport { Util } from '../../utils/Util'\r\nimport { TiFormComponent } from './TiFormComponent';\r\n// 编译lib要求注册Component，不能用抽象类\r\n/**\r\n * 单选/多选共同的基类。单选多选唯一的差异：单选只有在未选状态才接受空格键改变状态。\r\n */\r\n@Component({// lib编译要求@Component\r\n    selector: 'ti-radiobase',\r\n    template: ''\r\n})\r\nexport class TiRadioBaseComponent extends TiFormComponent {\r\n    /**\r\n     * 绑定的可点击文字。\r\n     */\r\n    @Input() label: string; // Tiny3新增\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('labelRef', /* TODO: add static flag */ { static: true }) private labelRef: ElementRef;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('proxyRef', /* TODO: add static flag */ { static: true }) private proxyRef: ElementRef;\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.creatId();\r\n        this.setFocusableElems([this.proxyRef.nativeElement]);\r\n        this.moveNode();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        super.ngOnDestroy();\r\n        this.renderer.removeChild(this.renderer.parentNode(this.nativeElement), this.renderer.nextSibling(this.nativeElement));\r\n    }\r\n\r\n    /**\r\n     * 将input子元素label，调整为兄弟元素。\r\n     */\r\n    private moveNode(): void {\r\n        const parentNode: any = this.renderer.parentNode(this.nativeElement);\r\n        const nextNode: any  = this.renderer.nextSibling(this.nativeElement);\r\n        this.renderer.insertBefore(parentNode, this.labelRef.nativeElement, nextNode);\r\n    }\r\n\r\n    // Tiny3 TODO: 原始节点改为0高度，不显示。那么所有宿主元素focus都转移到proxy。\r\n    // @HostListener('focus') onHostFocus() {\r\n    //       Logger.log('onHostFocus');\r\n    //       this.proxyNode.focus();\r\n    //   }\r\n    /**\r\n     * @ignore\r\n     * 点选元素后，聚集到对应的checkbox-skin\r\n     * 经赵梦测试，这段逻辑，是为了解决radio火狐下tab键只聚焦不选中。\r\n     * @param event 鼠标点击事件\r\n     */\r\n    @HostListener('click', ['$event']) public onHostClick(event: MouseEvent): void {\r\n        if (!this.nativeElement.disabled) {\r\n            this.focusElem.focus();\r\n        }\r\n    }\r\n\r\n    // 阻止事件冒泡：当子组件中有input元素时，change事件会冒泡到父组件\r\n    // 问题：多选树模板包含复选框组件，树组件中有自己的change事件，点击复选框会触发两次change事件\r\n    // 一次是树组件自身触发，一次是复选框组件冒泡，故需阻止该事件，例如下边代码会打印日志\r\n    @HostListener('change', ['$event']) public onHostChange(event: Event): void {\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 阻止checkbox-skin和checkbox-label的事件冒泡，防止上层dom绑定的事件被多次触发\r\n     * 原因：span和label使用for和input关联，input上的click等事件也会触发span/label的事件处理，\r\n     * 如果不做处理，上层dom绑定的事件会被触发两次\r\n     * @param event 鼠标点击事件\r\n     */\r\n    public onLabelClick(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 快捷键的处理(Enter和Space)：考虑到交互的友好性及与原生的一致性，\r\n     * 在keyup中做相应的事件处理(keydown和keypress会存在一次点击，多次触发的情况);\r\n     * 此外，需要阻止浏览器默认事件（空格键会触发页面滚动条滚到底部的行为，\r\n     * 默认事件的阻止需要在keyup之前，因此此处在keydown中阻止）\r\n     * @param event 键盘按键事件\r\n     */\r\n    public onSpaceKeydown(event: KeyboardEvent): void { // with type info\r\n        if (!this.nativeElement.disabled) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * @param event 键盘按键事件\r\n     */\r\n    public onSpaceKeyup(event: KeyboardEvent): void { // with type info\r\n        if (!this.nativeElement.disabled && this.canChange()) {\r\n            this.nativeElement.checked = !this.nativeElement.checked; // 设置元素的选中状态\r\n            // this.cdRef.detectChanges();  执行并不能触发checked改变检查，所以只有下面的change事件才可以。\r\n            // 触发check原生的change事件\"createEvent\" in document. 因为原生只有blur时才触发onchange\r\n            Util.trigger(this.nativeElement, 'change');\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 这是单选多选唯一的差异：单选只有在未选状态才接受空格键改变状态。\r\n     * @returns 默认返回true，多选框会继承这个方法。单选框重写这个方法。\r\n     */\r\n    protected canChange(): boolean {\r\n        return true;\r\n    }\r\n}// end of class\r\n\r\n// Tiny3去除：不再操作宿主tabindex。取消input元素的tab聚焦行为(input 可聚焦情况下，tab键切换时会聚焦该元素)\r\n// this.renderer.setAttribute(hostNode, 'tabindex', '-1'); // 经测试，display：none元素压根拿不到焦点。\r\n// Tiny3去除：不再支持fosused属性。\r\n// if ( this.nativeElement.focused !== this.hostAttrOld.focused) {\r\n//   Logger.log('change hostAttrOld.focused');\r\n//   if (this.nativeElement.focused) {\r\n//       this.mySkinRef.nativeElement.focus();\r\n//   }\r\n//   this.hostAttrOld.focused = this.nativeElement.focused;\r\n// Tiny3去除：增加对半选状态的支持。改为用户在模板上直接操作indeterminate\r\n// const partialCheck = this.nativeElement.getAttribute('partialCheck');\r\n// if (partialCheck !== this.hostAttrOld.partialCheck) {\r\n//   Logger.log('change partialCheck=' + partialCheck);\r\n//   this.nativeElement.indeterminate = partialCheck;\r\n//   this.hostAttrOld.partialCheck = partialCheck;\r\n// }\r\n// Tiny3去除：event.which ||\r\n","import { Component, Input, SimpleChanges } from '@angular/core';\r\nimport { TiFormComponent } from './TiFormComponent';\r\n/**\r\n * 复原完整model对象基类，基于valueKey时，select/buttongroup实现复原选中值到完整对象\r\n */\r\n@Component({// lib编译要求@Component\r\n    selector: 'ti-whole',\r\n    template: ''\r\n})\r\nexport class TiWholeComponent extends TiFormComponent {\r\n    /**\r\n     * 当存在valueKey时，选中值基于valueKey\r\n     *\r\n     * 10.0.1新增\r\n     */\r\n    @Input() valueKey: string;\r\n    private _modelWhole: any;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public get modelWhole(): any {\r\n        return this._modelWhole;\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 用户点选时modelWhole改变，要同时更改model\r\n     */\r\n    public set modelWhole(value: any) {\r\n\r\n        this._modelWhole = value;\r\n        if (this.valueKey && value !== undefined && value !== null) {\r\n            // 存在valueKey，且value不为空\r\n            this.model = this['multiple'] ?\r\n                value.map((item: any) => this.valueFn(item))\r\n                : this.valueFn(value);\r\n        } else {\r\n            this.model = value;\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 找到value值的函数\r\n     */\r\n    @Input() valueFn: (item: any) => any = (item: any) => {\r\n        return item[this.valueKey];\r\n        // tslint:disable-next-line:semicolon\r\n    }; // 这个分号是书写正确的\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        super.ngOnChanges(changes);\r\n        // 监听 options/items 变化\r\n        if ((changes['options'] || changes['items']) && this.valueKey && this.model) {\r\n            // 存在 valueKey 时，modelWhole 需通过匹配 valueKey 来重新赋值（解决动态改变options/items时选中项不高亮问题 issues#1332）\r\n            this.writeValue(this.model);\r\n        }\r\n    }\r\n    /**\r\n     * 每次用户主动设置ngModel值时，需要顺便更改modelWhole\r\n     * @param model 设置的ngModel值\r\n     */\r\n    writeValue(model: any): void {\r\n        super.writeValue(model);\r\n        if (this.valueKey && model !== undefined && model !== null) { // 存在valueKey，且value不为空\r\n            // 历史设计缺陷：select总数据集是options，buttongroup总数据集时items\r\n            const options: Array<any> = this['options'] ? this['options'] : this['items'];\r\n            // 直接去写内部值，不触发set函数\r\n            this._modelWhole = this['multiple'] ?\r\n                options.filter((item: any) => model.includes(this.valueFn(item))) :\r\n                options.find((item: any) => this.valueFn(item) === model);\r\n        } else {\r\n            this._modelWhole = model;\r\n        }\r\n    }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { TiBaseComponent } from './TiBaseComponent';\r\n\r\n/**\r\n * @ignore\r\n * 该基类用于组件设置autofocsu时获取焦点，涉及组件button、text、textarea\r\n */\r\n\r\n@Component({\r\n    selector: 'ti-autofocus',\r\n    template: ''\r\n})\r\n\r\nexport class TiAutofocusComponent extends TiBaseComponent {\r\n    /**\r\n     * 此处在ngAfterViewInit生命周期内调用focus方法，因为textarea组件较为特殊\r\n     * textarea组件在ngAfterViewInit会将宿主元素包裹在一层dom中，在此之前调用focus方法，获取不到焦点\r\n     */\r\n    ngAfterViewInit(): void {\r\n        if (this.nativeElement.attributes.autofocus) {\r\n            this.nativeElement.focus();\r\n        }\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { TiBaseComponent } from './TiBaseComponent';\r\nimport { TiFormComponent } from './TiFormComponent';\r\nimport { TiRadioBaseComponent } from './TiRadioBaseComponent';\r\nimport { TiWholeComponent } from './TiWholeComponent';\r\nimport { TiAutofocusComponent } from './TiAutofocusComponent';\r\n// 在使用tiny npm包生产环境编辑时，要求基类也注册。\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: [\r\n    TiBaseComponent,\r\n    TiFormComponent,\r\n    TiRadioBaseComponent,\r\n    TiWholeComponent,\r\n    TiAutofocusComponent\r\n  ]\r\n})\r\nexport class TiBaseModule {\r\n}\r\nexport { TiBaseComponent } from './TiBaseComponent';\r\nexport { TiFormComponent } from './TiFormComponent';\r\nexport { TiRadioBaseComponent } from './TiRadioBaseComponent';\r\nexport { TiWholeComponent } from './TiWholeComponent';\r\nexport { TiAutofocusComponent } from './TiAutofocusComponent';\r\n","import { Component, Input, SimpleChange, SimpleChanges, ViewEncapsulation } from '@angular/core';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\n\r\n// TODO：如果封装为胶囊样式，DOM内部多一层，比现在优劣？\r\n/**\r\n *  Icon组件\r\n *\r\n *  Icon组件可以设置显示Icon。\r\n *\r\n * <example-url>../tiny3demo/#/icon/icon-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-icon',\r\n    template: '<ng-content></ng-content>',\r\n    styleUrls: ['./icon.less'],\r\n    host: {\r\n        '[class.ti3-icon]': 'true'\r\n    },\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TiIconComponent extends TiBaseComponent {\r\n    /**\r\n     * icon名称\r\n     */\r\n    @Input() name: string;\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        super.ngOnChanges(changes);\r\n        const nameChange: SimpleChange = changes['name'];\r\n        if (nameChange) {\r\n            this.renderer.removeClass(this.nativeElement, `ti3-icon-${nameChange.previousValue}`);\r\n            this.renderer.addClass(this.nativeElement, `ti3-icon-${nameChange.currentValue}`);\r\n        }\r\n    }\r\n}\r\n/* ti-icon组件，为了防止多个组件重复使用字体图标文件，导致最终用户打包文件成倍增大。\r\n因此封装该组件，确保最终打包只引用一份字体图标样式及文件 */\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiIconClassComponent } from './TiIconClassComponent';\r\nimport { TiIconComponent } from './TiIconComponent';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [TiIconClassComponent, TiIconComponent],\r\n  declarations: [TiIconClassComponent, TiIconComponent]\r\n})\r\nexport class TiIconModule {\r\n}\r\nexport { TiIconComponent } from './TiIconComponent';\r\nexport { TiIconClassComponent } from './TiIconClassComponent';\r\n","import { Component, Input } from '@angular/core';\r\nimport { TiAccordionItemComponent } from './TiAccordionItemComponent';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\n\r\n/**\r\n * 手风琴组件，\r\n * 用于实现多个折叠面板的呈现方式，通过ti-accordion、ti-accordion-item、ti-accordion-head组件嵌套方式实现\r\n *\r\n * <p><span style=\"color: red\">使用此组件时需要开发者在项目模块(建议在根模块)\r\n * 中引入BrowserAnimationsModule。</span>这是因为此组件中使用了Angular动画，需要引入BrowserAnimationsModule，\r\n * 但是 BrowserAnimationsModule 不能在懒加载模块被重复引入，所以需要开发者来引入BrowserAnimationsModule，保证其引入一次。</p>\r\n *\r\n * <example-url>../tiny3demo/#/accordion/acc-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-accordion',\r\n    templateUrl: './accordion.html',\r\n    styleUrls: ['./accordion.less'],\r\n    host: {\r\n        '[class.ti3-accordion-group]': 'true'\r\n    }\r\n})\r\nexport class TiAccordionComponent extends TiBaseComponent {\r\n    /**\r\n     * 展开某一项时，是否关闭其它项\r\n     */\r\n    @Input() closeOthers: boolean = true;\r\n    /**\r\n     * 头部样式类\r\n     */\r\n    @Input() headClass: string = '';\r\n    /**\r\n     * 内容体样式类\r\n     */\r\n    @Input() bodyClass: string = '';\r\n\r\n    protected items: Array<TiAccordionItemComponent> = [];\r\n    /**\r\n     * @ignore\r\n     * 关闭其余item\r\n     */\r\n    closeOtherItems(openItem: TiAccordionItemComponent): void {\r\n        if (!this.closeOthers) {\r\n            return;\r\n        }\r\n        this.items.forEach((item: TiAccordionItemComponent) => {\r\n            if (item.open && item !== openItem) {\r\n                item.open = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 添加某一accordion条目到items数组中\r\n     */\r\n    addItem(item: TiAccordionItemComponent): void {\r\n        this.items.push(item);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 从items数组中删除某一accordion条目\r\n     */\r\n    removeItem(item: TiAccordionItemComponent): void {\r\n        const index: number = this.items.indexOf(item);\r\n        if (index !== -1) {\r\n            this.items.splice(index, 1);\r\n        }\r\n    }\r\n}\r\n","import { Component, ElementRef, EventEmitter, Inject, Input, Output, Renderer2, ViewEncapsulation } from '@angular/core';\r\nimport { TiAccordionComponent } from './TiAccordionComponent';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\n\r\n/**\r\n * 定义手风琴组件单个折叠面板，该组件包含在ti-accordion标签中\r\n * <example-url>../tiny3demo/#/accordion/acc-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-accordion-item',\r\n    templateUrl: './accordion-item.html',\r\n    styleUrls: ['./accordion.less'],\r\n    host: {\r\n        '[class.ti3-accordion-panel]': 'true'\r\n    }\r\n})\r\nexport class TiAccordionItemComponent extends TiBaseComponent {\r\n    /**\r\n     * 单个折叠面板项是否灰化\r\n     */\r\n    @Input() disabled: boolean = false;\r\n    /**\r\n     * 设置用户点击某一折叠面板的head时是否自动实现内容体展示状态切换\r\n     *\r\n     * 头部局部点击可切换场景，需要通过设置该变量实现\r\n     */\r\n    @Input() clickToggle: boolean = true;\r\n    /**\r\n     * 某一折叠面板的头部点击回调\r\n     */\r\n    @Output() readonly headClick: EventEmitter<Event> = new EventEmitter();\r\n\r\n    /**\r\n     * @ignore\r\n     * 头部class,需要显示声明，否则ngClass会报错\r\n     */\r\n    public headClass: string = '';\r\n    /**\r\n     * @ignore\r\n     * body class,需要显示声明，否则ngClass会报错\r\n     */\r\n    public bodyClass: string = '';\r\n    /**\r\n     * @ignore\r\n     * 依赖注入tiAccordion（后续使用其方法）\r\n     */\r\n    constructor(@Inject(TiAccordionComponent) private accordion: TiAccordionComponent,\r\n                hostRef: ElementRef, renderer: Renderer2) {\r\n        super(hostRef, renderer);\r\n    }\r\n\r\n    // 面板展开状态获取/设置：此处处理涉及到内部和外部修改，因此此处通过set/get进行处理\r\n    private isOpen: boolean = false;\r\n    /**\r\n     * 单个折叠面板是否处于展开状态，用于初始化设置，默认值为false\r\n     *\r\n     */\r\n    @Input()\r\n    /**\r\n     * @ignore\r\n     */\r\n    get open(): boolean {\r\n        return this.isOpen;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    set open(value: boolean) {\r\n        if (value !== this.open) {\r\n            if (value) {// open属性更新且open值为true时，处理其它item的关闭状态\r\n                this.accordion.closeOtherItems(this);\r\n            }\r\n            this.isOpen = value;\r\n        }\r\n    }\r\n\r\n    // 初始化处理：添加当前item到列表中,设置该item的id值\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.accordion.addItem(this);\r\n        this.headClass = this.accordion.headClass;\r\n        this.bodyClass = this.accordion.bodyClass;\r\n    }\r\n\r\n    // item销毁处理：移除item列表中的该项数据\r\n    ngOnDestroy(): void {\r\n        super.ngOnDestroy();\r\n        this.accordion.removeItem(this);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * item头部点击事件逻辑处理\r\n     */\r\n    toggleOpen($event: Event): void {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        if (this.clickToggle) {\r\n            this.open = !this.open;\r\n        }\r\n        this.headClick.emit($event);\r\n    }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n/**\r\n * 定义单个手风琴折叠面板头部内容,该组件包含在ti-accordion-item中使用\r\n * <example-url>../tiny3demo/#/accordion/acc-all</example-url>\r\n */\r\n@Component({\r\n  selector: 'ti-accordion-head',\r\n  template: '<ng-content></ng-content>'\r\n})\r\nexport class TiAccordionHeadComponent {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiCollapseModule } from '../../directives/collapse/TiCollapseModule';\r\nimport { TiOutlineModule } from '../../directives/outline/TiOutlineModule';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\n\r\nimport { TiAccordionComponent } from './TiAccordionComponent';\r\nimport { TiAccordionItemComponent } from './TiAccordionItemComponent';\r\nimport { TiAccordionHeadComponent } from './TiAccordionHeadComponent';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, TiCollapseModule, TiIconModule, TiOutlineModule],\r\n  exports: [TiAccordionComponent, TiAccordionItemComponent, TiAccordionHeadComponent],\r\n  declarations: [TiAccordionComponent, TiAccordionItemComponent, TiAccordionHeadComponent]\r\n})\r\nexport class TiAccordionModule {}\r\n\r\nexport { TiAccordionComponent } from './TiAccordionComponent';\r\nexport { TiAccordionItemComponent } from './TiAccordionItemComponent';\r\nexport { TiAccordionHeadComponent } from './TiAccordionHeadComponent';\r\n","import { TiLog } from './TiLog';\r\nimport { Util } from './Util';\r\n/**\r\n * 位置显示类型定义，其中auto代表自适应位置显示\r\n */\r\nexport type TiPositionType = 'top'| 'top-left'| 'top-right'| 'bottom'| 'bottom-left'| 'bottom-right'|\r\n'left'| 'left-top'| 'left-bottom'| 'right'| 'right-top'| 'right-bottom'| 'center' | 'auto' | 'none';\r\ninterface TiPositionLayout {\r\n    hostLayout: TiHostLayout;\r\n    targetLayout: TiEleLayout;\r\n    avilableLayout: TiAvilableLayout;\r\n}\r\nexport interface TiHostLayout {\r\n    top: number;\r\n    left: number;\r\n    width: number;\r\n    height: number;\r\n    isFixed: boolean;\r\n}\r\ninterface TiEleLayout {\r\n    top: number;\r\n    left: number;\r\n    width: number;\r\n    height: number;\r\n}\r\ninterface TiAvilableLayout {\r\n    left: number;\r\n    maxLeft: number;\r\n    right: number;\r\n    maxRight: number;\r\n    top: number;\r\n    maxTop: number;\r\n    bottom: number;\r\n    maxBottom: number;\r\n    clientHeight: number;\r\n    clientWidth: number;\r\n}\r\nexport interface TiPositionResult {\r\n    position: TiPositionType;\r\n    avilableHeight: number;\r\n    hostLayout?: TiHostLayout;\r\n}\r\ninterface TiLayoutParams {\r\n    left: number;\r\n    top: number;\r\n    avilableHeight: number;\r\n}\r\ninterface TiVerticalParams {\r\n    avilableHeight: number;\r\n    top: number;\r\n}\r\n/**\r\n * @ignore\r\n * 该类提供公共静态类方法，用于设置在body定位元素基于参照元素的位置信息,提供的核心方法如下：\r\n * setPosition()\r\n * 1. 入参为对象，参数信息如下：\r\n * {\r\n *   targetEle:需要定位的元素\r\n *   hostEle：参照元素\r\n *   position:定位位置\r\n *   hostSpace：待定位元素和参照元素间距\r\n *   browserSpace ：待定位元素和浏览器间距, 暂时只在上下位置生效\r\n *   hOffset: 自定义水平方向的偏移（在定位基础上的水平偏移，向左偏移为负值，向右偏移为正值）\r\n *   fixMaxHeight: 定位元素最大高度是否固定不变(显示不下时不用压缩高度)\r\n *   determinPositionFn：决定位置的函数\r\n * }\r\n * 2. 返回值为对象，信息如下：\r\n * {\r\n *   position:string 最终元素定位位置（当外部定义位置非13个可选位置时，会重新计算合适的位置进行定位，因此提供此位置信息供外部使用）\r\n *   avilableHeight:number 元素可用高度占位信息(外部可使用该信息进行高度的重新定义)\r\n * }\r\n */\r\nexport class Position {\r\n    private static positionArr: Array<string> = ['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right',\r\n                       'left', 'left-top', 'left-bottom', 'right', 'right-top', 'right-bottom', 'center'];\r\n    /* tip 针对较小元素做位置自适应处理，保证 tip 的箭头在被提示元素的中间，这是宽度或者高度的阈值\r\n     * 取值为 15 的原因： 箭头定位偏移量9 + 箭头宽度的一半6 = 15px 相关变量变化时需要修改该常量\r\n     */\r\n    private static readonly ADAPTIVE_SIZE: number = 15;\r\n    public static setPosition(options: {\r\n        targetEle: any,\r\n        hostEle: any,\r\n        hostEleX?: any, // 决定定位元素水平方向的元素，用于宿主元素水平方向位置与host元素不一致的场景，暂不对外开放\r\n        position?: TiPositionType,\r\n        hostSpace?: number,\r\n        browserSpace?: number, // 与浏览器距离像素\r\n        hOffset?: number // 自定义水平方向的偏移（在定位基础上的水平偏移，向左偏移为负值，向右偏移为正值）\r\n        fixMaxHeight?: boolean // 定位元素最大高度是否固定不变(显示不下时不用压缩高度)\r\n        determinPositionFn?(layout: any): string,\r\n        hasOffsetFix?: boolean // 是否存在定位偏差量（针对 tip 组件：当被提示元素尺寸较小时，保证 tip 的箭头在被提示元素的中间）\r\n    }): TiPositionResult {\r\n        // 入参非有效元素情况下，不做处理\r\n        if (!Util.isElement(options.hostEle) || !Util.isElement(options.targetEle)) {\r\n            TiLog.warn('position: hostEle or targetEle type is not element');\r\n\r\n            // 防止外部使用报错，此处做返回值处理\r\n            return {\r\n                position: 'top',\r\n                avilableHeight: 9999\r\n            };\r\n        }\r\n        // 分别获取宿主和待定位元素当前位置\r\n        const curLayout: TiPositionLayout = Position.getLayout(options.hostEle, options.targetEle, options.hostEleX);\r\n        const hostSpace: number = options.hostSpace || 0;\r\n        // 判断元素位置\r\n        const position: any = (options.determinPositionFn) ? options.determinPositionFn(curLayout)\r\n                    : Position.determinPosition(options.position, curLayout, hostSpace, options.browserSpace || 0);\r\n        const elePos: TiLayoutParams = Position.getLayoutParam(curLayout, position, hostSpace, options.browserSpace || 0, options.hasOffsetFix || false);\r\n        const hOffset: number = options.hOffset || 0;\r\n        Position.setLayout(options.targetEle, elePos, curLayout, hOffset);\r\n        Position.setMaxHeight(options.targetEle, elePos, curLayout, options.fixMaxHeight);\r\n        Position.setDominatorDropDetachState(options.targetEle, elePos, curLayout, options.fixMaxHeight);\r\n\r\n        return {\r\n            position, // 最终元素定位位置\r\n            avilableHeight: elePos.avilableHeight, // 元素可用高度占位\r\n            hostLayout: curLayout.hostLayout\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 添加影响host position的事件并返回其事件句柄\r\n     * 由于Angular listen不支持多事件定义，因此在此处封装函数进行单独处理；此外，事件也不支持定义命名空间\r\n     * 监听全局事件，用于处理页面位置出现变化导致宿主元素位置偏移，而tip的特殊情况下tip消失，\r\n     * 并定义组件事件监听句柄，事件取消时会用到\r\n     * 特殊场景包括：\r\n     * 1. 拖动弹框位置导致的宿主元素位置变化\r\n     * 2. 页面局部出滚动条，滚动条位置变化导致的宿主元素位置变化\r\n     *    鼠标导致的滚轮事件可通过mousewheel/DOMMouseScroll监听（有冒泡的特性）\r\n     *    拖拽导致的滚轮变化，需要业务通过trigger Tiny自定义事件tiScroll进行处理（无事件冒泡的特性）\r\n     * 3.页面缩放\r\n     * 4.路由切换页面\r\n     */\r\n    public static addPosChangeEvts(eventCallback: any, render: any): Array<() => void> {\r\n        const eventHandles: Array<() => void> = [];\r\n        // 修复SSR报错：ERROR ReferenceError: document is not defined\r\n        if(typeof document === 'undefined'){\r\n            return [];\r\n        }\r\n        // 需要添加的事件数据抽象\r\n        const eventArr: Array<any> = [\r\n            { // 鼠标拖动页面内滚动条场景，该事件需要业务通过trigger tiScroll事件进行处理\r\n                ele: typeof document !== 'undefined' ? document : null,\r\n                eventType: 'tiScroll',\r\n                callback: eventCallback\r\n            }, { // 页面缩放\r\n                ele: typeof window !== 'undefined' ? window : null,\r\n                eventType: 'resize',\r\n                callback: eventCallback\r\n            }, { // 路由切换页面\r\n                ele: typeof window !== 'undefined' ? window : null,\r\n                eventType: 'hashchange',\r\n                callback: eventCallback\r\n            }];\r\n        eventArr.forEach((item: any) => {\r\n            // 修复SSR问题： ERROR TypeError: Cannot read property 'addEventListener' of null\r\n            if (item.ele) {\r\n                return eventHandles.push(render.listen(item.ele, item.eventType, item.callback));\r\n            }\r\n        });\r\n\r\n        return eventHandles;\r\n    }\r\n    /**\r\n     * 清除绑定事件，与addPosChangeEvts对称\r\n     */\r\n    public static removePosChangeEvts(eventHandles: any): void {\r\n        eventHandles.forEach((item: any) => {\r\n            if (item) {\r\n                item();\r\n            }\r\n        });\r\n    }\r\n    // 获取host和target元素的布局参数\r\n    private static getLayout(hostEle: any, targetEle: any, horizonHostEle: any): TiPositionLayout {\r\n        const hostLayout: TiHostLayout = Position.getHostEleLayout(hostEle, horizonHostEle);\r\n\r\n        return {\r\n            hostLayout,\r\n            targetLayout: Position.getEleLayout(targetEle),\r\n            avilableLayout: Position.getAvilableLayout(hostLayout)\r\n        };\r\n    }\r\n    /**\r\n     * 根据高亮浮层位置及提示弹窗位置情况计算具体显示位置\r\n     * @param  position 元素位置定义信息\r\n     * @param  layout 宿主和待定位元素位置信息\r\n     * @param  hostSpace 宿主和待定位元素间距\r\n     * @param  browserSpace 浏览器和待定位元素间距\r\n     * @returns 提示弹窗呈现位置\r\n     */\r\n    private static determinPosition(position: TiPositionType, layout: TiPositionLayout, hostSpace: number, browserSpace: number):\r\n        string {\r\n        // position定义有效情况下，不做处理\r\n        if (Position.isValidPosition(position, layout, hostSpace, browserSpace)) {\r\n            return position;\r\n        }\r\n        const targetLayout: TiEleLayout = layout.targetLayout;\r\n        const avilableLayout: TiAvilableLayout = layout.avilableLayout;\r\n        // 元素位置距各部分位置\r\n        const avilableLeft: number = avilableLayout.left;\r\n        const avilableRight: number = avilableLayout.right;\r\n        const avilableTop: number = avilableLayout.top;\r\n        const avilableBottom: number = avilableLayout.bottom;\r\n        const targetMaxWidth: number = targetLayout.width + hostSpace + browserSpace;\r\n        const targetMaxHeight: number = targetLayout.height + hostSpace + browserSpace;\r\n        const hostLayout: TiHostLayout = layout.hostLayout;\r\n        if (avilableTop >= targetMaxHeight) { // 上方可显示完全\r\n            const positionTop: string = Position.determinHorizon(layout, hostLayout);\r\n            if (positionTop !== undefined) {\r\n                return 'top' + positionTop;\r\n            }\r\n        }\r\n        if (avilableRight >= targetMaxWidth) { // 右侧可显示完全，具体思路同上方可显示完全情况\r\n            const positionRight: string = Position.determinVertical(layout, hostLayout);\r\n            if (positionRight !== undefined) {\r\n                return 'right' + positionRight;\r\n            }\r\n        }\r\n        if (avilableBottom >= targetMaxHeight) { // 下方可显示完全，具体思路同上方可显示完全情况\r\n            const positionBottom: string = Position.determinHorizon(layout, hostLayout);\r\n            if (positionBottom !== undefined) {\r\n                return 'bottom' + positionBottom;\r\n            }\r\n        }\r\n        if (avilableLeft >= targetMaxWidth) { // 左侧足够显示情况下，左侧居中显示\r\n            const positionLeft: string = Position.determinVertical(layout, hostLayout);\r\n            if (positionLeft !== undefined) {\r\n                return 'left' + positionLeft;\r\n            }\r\n        }\r\n\r\n        return 'center'; // 上下左右均无法足够显示情况下，居中显示内容\r\n    }\r\n    /**\r\n     * 垂直位置确定后，确定水平位置\r\n     */\r\n    private static determinHorizon(layout: TiPositionLayout, hostLayout: TiHostLayout): string {\r\n        const targetLayout: TiEleLayout = layout.targetLayout;\r\n        const avilableLayout: TiAvilableLayout = layout.avilableLayout;\r\n        const avilableLeft: number = avilableLayout.left;\r\n        const avilableMaxLeft: number = avilableLayout.maxLeft;\r\n        const avilableRight: number = avilableLayout.right;\r\n        const avilableMaxRight: number = avilableLayout.maxRight;\r\n        const targetWidth: number = targetLayout.width;\r\n        const targetCenterWidth: number = (targetLayout.width - hostLayout.width) / 2; // 水平居中情况下，左右侧占用的宽度分别比宿主元素宽多少\r\n        if ((avilableRight >= targetCenterWidth) &&\r\n                (avilableLeft >= targetCenterWidth)) { // 提示元素超出被提示元素部分足够显示的情况下，优先居中显示\r\n            return '';\r\n        }\r\n        if (avilableMaxRight >= targetWidth) { // 提示元素可在被提示元素左边界靠右完全显示情况下，向右显示\r\n            return '-left';\r\n        }\r\n        if (avilableMaxLeft >= targetWidth) { // 提示元素可在被提示元素左边界靠左完全显示情况下，向左显示\r\n            return '-right';\r\n        }\r\n    }\r\n    /**\r\n     * 水平位置确定后，确定垂直位置\r\n     */\r\n    private static determinVertical(layout: TiPositionLayout, hostLayout: TiHostLayout): string {\r\n        const targetLayout: TiEleLayout = layout.targetLayout;\r\n        const avilableLayout: TiAvilableLayout = layout.avilableLayout;\r\n        const avilableTop: number = avilableLayout.top;\r\n        const avilableMaxTop: number = avilableLayout.maxTop;\r\n        const avilableBottom: number = avilableLayout.bottom;\r\n        const avilableMaxBottom: number = avilableLayout.maxBottom;\r\n        const targetHeight: number = targetLayout.height;\r\n        const targetMiddleHeight: number = (targetLayout.height - hostLayout.height) / 2; // 垂直居中情况下，上下两侧占用的高度分别比宿主元素高多少\r\n        if ((avilableTop >= targetMiddleHeight) &&\r\n            (avilableBottom >= targetMiddleHeight)) {\r\n            return '';\r\n        }\r\n        if (avilableMaxBottom >= targetHeight) {\r\n            return '-top';\r\n        }\r\n        if (avilableMaxTop >= targetHeight) {\r\n            return '-bottom';\r\n        }\r\n    }\r\n\r\n     // 判断定义的position是否为有效位置\r\n     private static isValidPosition(position: TiPositionType, layout: TiPositionLayout, hostSpace: number, browserSpace: number): boolean {\r\n         if (Position.positionArr.indexOf(position) === -1) {\r\n            return false;\r\n         }\r\n         // 判断在指定的position是否能显示下\r\n         const positionFragments: Array<string> = position.split('-');\r\n         const targetLayout: TiEleLayout = layout.targetLayout;\r\n         const avilableLayout: TiAvilableLayout = layout.avilableLayout;\r\n         // 元素位置距各部分位置\r\n         const avilableLeft: number = avilableLayout.left;\r\n         const avilableRight: number = avilableLayout.right;\r\n         const avilableTop: number = avilableLayout.top;\r\n         const avilableBottom: number = avilableLayout.bottom;\r\n         const targetMaxWidth: number = targetLayout.width + hostSpace + browserSpace;\r\n         const targetMaxHeight: number = targetLayout.height + hostSpace + browserSpace;\r\n         if (positionFragments[0] === 'top') {\r\n             if (avilableTop < targetMaxHeight) {\r\n                return false;\r\n             }\r\n\r\n             return Position.isValidHorizonPosition(positionFragments[1], layout);\r\n         }\r\n         if (positionFragments[0] === 'bottom') {\r\n            if (avilableBottom < targetMaxHeight) {\r\n               return false;\r\n            }\r\n\r\n            return Position.isValidHorizonPosition(positionFragments[1], layout);\r\n         }\r\n         if (positionFragments[0] === 'left') {\r\n             if (avilableLeft < targetMaxWidth) {\r\n                 return false;\r\n             }\r\n\r\n             return Position.isValidVerticalPosition(positionFragments[1], layout);\r\n         }\r\n         if (positionFragments[0] === 'right') {\r\n             if (avilableRight < targetMaxWidth) {\r\n                 return false;\r\n             }\r\n\r\n             return Position.isValidVerticalPosition(positionFragments[1], layout);\r\n         }\r\n\r\n         return true;\r\n    }\r\n\r\n    // 确定垂直位置是有效的后，判断水平位置是否有效\r\n    private static isValidHorizonPosition(horizonPosition: string, layout: TiPositionLayout): boolean {\r\n        const targetLayout: TiEleLayout = layout.targetLayout;\r\n        const avilableLayout: TiAvilableLayout = layout.avilableLayout;\r\n        const hostLayout: TiHostLayout = layout.hostLayout;\r\n        const avilableLeft: number = avilableLayout.left;\r\n        const avilableRight: number = avilableLayout.right;\r\n        const avilableMaxLeft: number = avilableLayout.maxLeft;\r\n        const avilableMaxRight: number = avilableLayout.maxRight;\r\n        const targetWidth: number = targetLayout.width;\r\n        const targetCenterWidth: number = (targetLayout.width - hostLayout.width) / 2; // 水平居中情况下，左右侧占用的宽度分别比宿主元素宽多少\r\n        if (!horizonPosition) {\r\n            return (avilableRight >= targetCenterWidth) && (avilableLeft >= targetCenterWidth);\r\n        }\r\n        if (horizonPosition === 'left') {\r\n            return avilableMaxRight >= targetWidth;\r\n        }\r\n        if (horizonPosition === 'right') {\r\n            return avilableMaxLeft >= targetWidth;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // 确定水平位置是有效的后，判断垂直位置是否有效\r\n    private static isValidVerticalPosition(verticalPosition: string, layout: TiPositionLayout): boolean {\r\n        const targetLayout: TiEleLayout = layout.targetLayout;\r\n        const avilableLayout: TiAvilableLayout = layout.avilableLayout;\r\n        const hostLayout: TiHostLayout = layout.hostLayout;\r\n        const avilableTop: number = avilableLayout.top;\r\n        const avilableBottom: number = avilableLayout.bottom;\r\n        const avilableMaxTop: number = avilableLayout.maxTop;\r\n        const avilableMaxBottom: number = avilableLayout.maxBottom;\r\n        const targetHeight: number = targetLayout.height;\r\n        const targetMiddleHeight: number = (targetLayout.height - hostLayout.height) / 2; // 垂直居中情况下，上下两侧占用的高度分别比宿主元素高多少\r\n        if (!verticalPosition) {\r\n            return (avilableTop >= targetMiddleHeight) && (avilableBottom >= targetMiddleHeight);\r\n        }\r\n        if (verticalPosition === 'top') {\r\n            return avilableMaxBottom >= targetHeight;\r\n        }\r\n        if (verticalPosition === 'bottom') {\r\n            return avilableMaxTop >= targetHeight;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // 设置提示弹窗位置\r\n    private static setLayout(ele: any, position: TiLayoutParams, layoutParam: TiPositionLayout, hOffset: number): void {\r\n        if (layoutParam.hostLayout.isFixed) { // fixed定位情况下，滚动条对其不受影响，因此此处需要减掉滚动条的位置影响\r\n            ele.style.position = 'fixed';\r\n            ele.style.left = `${position.left - window.pageXOffset + hOffset}px`;\r\n            ele.style.top = `${position.top - window.pageYOffset}px`;\r\n        } else {\r\n            ele.style.left = `${position.left + hOffset}px`;\r\n            ele.style.top = `${position.top}px`;\r\n        }\r\n    }\r\n    // 设置提示弹窗的MaxHeight\r\n    private static setMaxHeight(ele: any, position: any, layoutParam: any, fixMaxHeight: boolean): void {\r\n        if (fixMaxHeight || position.avilableHeight >= layoutParam.targetLayout.height) {\r\n            return;\r\n        }\r\n        ele.style.maxHeight = `${position.avilableHeight}px`;\r\n    }\r\n    /**\r\n     * 当drop固定高度（设置fixMaxHeight=ture)，且空间不足时，dominator和drop不相邻，此场景需要隐藏drop中的边框覆盖线，\r\n     * 添加样式类'ti3-detach-dominator-drop'标记drop的这种场景状态，通过css样式控制drop中边框覆盖线的隐藏和显示\r\n     * 目前该场景出现在日期类组件中\r\n     */\r\n    public static setDominatorDropDetachState(ele: HTMLElement, position: any, layoutParam: any, fixMaxHeight: boolean): void{\r\n        if (!fixMaxHeight) {\r\n            return;\r\n        }\r\n        if (position.avilableHeight < layoutParam.targetLayout.height) {\r\n            ele.classList.add('ti3-detach-dominator-drop');\r\n        } else {\r\n            ele.classList.remove('ti3-detach-dominator-drop');\r\n        }\r\n    }\r\n\r\n    private static getEleLayout(ele: any): TiEleLayout {\r\n        // 修复SSR报错：ERROR TypeError: ele.getBoundingClientRect is not a function\r\n        return {\r\n            top: ele.offsetTop,\r\n            left: ele.offsetLeft,\r\n            width: (typeof ele.getBoundingClientRect) === 'function' ? ele.getBoundingClientRect().width : 0,\r\n            height: (typeof ele.getBoundingClientRect) === 'function' ? ele.getBoundingClientRect().height : 0\r\n        };\r\n    }\r\n    public static getHostEleLayout(hostEle: any, horizonHostEle?: any): TiHostLayout {\r\n        let horizonEle = hostEle;\r\n        if (Util.isElement(horizonHostEle)) {\r\n            horizonEle = horizonHostEle;\r\n        }\r\n        // 修复SSR报错：ERROR TypeError: hostEle.getBoundingClientRect is not a function\r\n        // 元素相对于windows的位置\r\n        let top: number = (typeof hostEle.getBoundingClientRect) === 'function' ? hostEle.getBoundingClientRect().top : 0;\r\n        let left: number = (typeof hostEle.getBoundingClientRect) === 'function' ? horizonEle.getBoundingClientRect().left : 0;\r\n        // 修复SSR报错：ERROR ReferenceError: getComputedStyle is not defined\r\n        // 下面利用body相对于windows的位置，计算元素相对于body的位置。\r\n        /* tslint:disable:no-null-keyword */\r\n        const bodyPositon: string = (typeof getComputedStyle === 'function') ? getComputedStyle(document.body, null).position : 'static';\r\n        // body是static|relative|absolute|fixed都已测试，Chrome高低版本/Firefox/IE11已测。\r\n        if (bodyPositon === 'static') {// static时，body对window没有偏移，但是需要考虑页面滚动条\r\n            if (typeof window !== 'undefined') {\r\n                top += window.pageYOffset;\r\n                left += window.pageXOffset;\r\n            }\r\n        } else {\r\n            // relative|fix|absolute时，需要考虑body相对于windows的偏移。\r\n            top -= document.body.getBoundingClientRect().top;\r\n            left -=  document.body.getBoundingClientRect().left;\r\n        }\r\n\r\n        return {\r\n            top,\r\n            left,\r\n            width: horizonEle.offsetWidth,\r\n            height: hostEle.offsetHeight,\r\n            isFixed: this.isFixedPos(hostEle)\r\n        };\r\n    }\r\n\r\n    private static getAvilableLayout(hostLayout: TiHostLayout): TiAvilableLayout {\r\n        // 修复报错：ERROR ReferenceError: document is not defined\r\n        // 当前浏览器可视区域的宽高\r\n        const curBrowseWidth: number = (typeof document !== 'undefined') ? document.documentElement.clientWidth : 0;\r\n        const curBrowseheight: number = (typeof document !== 'undefined') ? document.documentElement.clientHeight : 0;\r\n        // 元素位置距各部分位置:\r\n        // 1.以元素四个边为边界，上下左右预留的可用宽高，用avilableLeft等标识\r\n        // 2.去掉元素的宽高占位，计算的最大可用宽高，用avilableMax...标识\r\n        // 修复SSR错误：ERROR ReferenceError: pageXOffset is not defined\r\n        const avilableLeft: number = hostLayout.left - ((typeof window !== 'undefined') ? window.pageXOffset : 0);\r\n        const avilableMaxLeft: number = avilableLeft + hostLayout.width;\r\n        const avilableRight: number = curBrowseWidth - avilableMaxLeft;\r\n        const avilableMaxRight: number = curBrowseWidth - avilableLeft;\r\n        // document.body.scrollTop  document.documentElement.scrollTop存在浏览器差异，chrome高低版本表现不同。\r\n        const avilableTop: number = hostLayout.top - ((typeof window !== 'undefined') ? window.pageYOffset : 0); // pageYOffset支持IE9以上。\r\n        const avilableMaxTop: number = avilableTop + hostLayout.height;\r\n        const avilableBottom: number = curBrowseheight - avilableMaxTop;\r\n        const avilableMaxBottom: number = curBrowseheight - avilableTop;\r\n\r\n        return {\r\n            left: avilableLeft,\r\n            maxLeft: avilableMaxLeft,\r\n            right: avilableRight,\r\n            maxRight: avilableMaxRight,\r\n            top: avilableTop,\r\n            maxTop: avilableMaxTop,\r\n            bottom: avilableBottom,\r\n            maxBottom: avilableMaxBottom,\r\n            clientHeight: curBrowseheight,\r\n            clientWidth: curBrowseWidth\r\n        };\r\n    }\r\n    // 确定元素是否为fixed定位\r\n    private static isFixedPos(ele: any): boolean {\r\n        if (!ele || ele.nodeName === 'HTML') {\r\n            return false;\r\n        }\r\n        // 修复SSR报错：ERROR ReferenceError: getComputedStyle is not defined\r\n        if (typeof getComputedStyle === 'undefined') {\r\n            return false;\r\n        }\r\n        if (getComputedStyle(ele).position === 'fixed') {\r\n            return true;\r\n        }\r\n\r\n        return this.isFixedPos(ele.parentNode);\r\n    }\r\n    private static getLayoutParam(layout: TiPositionLayout, position: string, hostSpace: number, browserSpace: number, hasOffsetFix: boolean): TiLayoutParams {\r\n        const positionArr: Array<string> = position.split('-'); // 跟上面静态变量重名,最好改一下\r\n        const left: number = Position.getHorizionParam(layout, positionArr, hostSpace, hasOffsetFix);\r\n        const verticalParam: TiVerticalParams = Position.getVerticalParam(layout, positionArr, hostSpace, browserSpace, hasOffsetFix);\r\n\r\n        return {\r\n            left,\r\n            top: verticalParam.top,\r\n            avilableHeight: verticalParam.avilableHeight\r\n        };\r\n    }\r\n    private static getHorizionParam(curLayout: TiPositionLayout, posArr: Array<string>, space: number, hasOffsetFix: boolean): number {\r\n        const hostLayout: TiHostLayout = curLayout.hostLayout;\r\n        const targetLayout: TiEleLayout = curLayout.targetLayout;\r\n\r\n        // 定位偏差调整量（该偏差量针对较小元素，保证 tip 的箭头在被提示元素的中间）\r\n        const offset = hasOffsetFix ? this.getOffsetFixVal(curLayout.hostLayout.width) : 0;\r\n\r\n        // 'left', 'left-top', 'left-bottom'\r\n        if (posArr[0] === 'left') {\r\n            return hostLayout.left - targetLayout.width - space;\r\n        }\r\n        // 'right', 'right-top', 'right-bottom'\r\n        if (posArr[0] === 'right') {\r\n            return hostLayout.left + hostLayout.width + space;\r\n        }\r\n        // 'top-left', 'bottom-left'\r\n        if (posArr[1] === 'left') {\r\n            return hostLayout.left - offset;\r\n        }\r\n        // 'top-right', 'bottom-right'\r\n        if (posArr[1] === 'right') {\r\n            return hostLayout.left + hostLayout.width - targetLayout.width + offset;\r\n        }\r\n\r\n        // 'top', 'bottom', 'center'\r\n        return hostLayout.left - (targetLayout.width - hostLayout.width) / 2;\r\n    }\r\n    private static getVerticalParam(curLayout: TiPositionLayout, posArr: Array<string>, hostSpace: number, browserSpace: number, hasOffsetFix: boolean):\r\n    TiVerticalParams {\r\n        const avilableLayout: TiAvilableLayout = curLayout.avilableLayout; // 宿主元素对应的可用位置参数\r\n        const hostHeight: number = curLayout.hostLayout.height; // 宿主元素本身高度\r\n        const targetLayout: TiEleLayout = curLayout.targetLayout;\r\n        const hostLayout: TiHostLayout = curLayout.hostLayout;\r\n\r\n        // 定位偏差调整量（该偏差量针对较小元素，保证 tip 的箭头在被提示元素的中间）\r\n        const offset = hasOffsetFix ? this.getOffsetFixVal(curLayout.hostLayout.height) : 0;\r\n\r\n        // 纵向可用高度是根据位置中top、bottom、居中情况进行的处理,因此,此处先将position进行分割，再根据其情况进行可用高度计算\r\n        // 弹出元素下边线与宿主元素上边线相接后，弹出元素向上延伸情况，对应位置包含'top', 'top-left', 'top-right'\r\n        if (posArr[0] === 'top') {\r\n            const avilableHeight: number = avilableLayout.top - hostSpace - browserSpace;\r\n            const top: number = (avilableHeight >= targetLayout.height) ?\r\n                (hostLayout.top - targetLayout.height - hostSpace) :\r\n                (hostLayout.top - avilableLayout.top + browserSpace);\r\n\r\n            return {\r\n                avilableHeight,\r\n                top\r\n            };\r\n        }\r\n        // 弹出元素上边线与宿主元素下边线相接后，弹出元素向下延伸情况，对应位置包含'bottom', 'bottom-left', 'bottom-right'\r\n        if (posArr[0] === 'bottom') {\r\n            return {\r\n                avilableHeight: avilableLayout.bottom - hostSpace - browserSpace,\r\n                top: hostLayout.top + hostLayout.height + hostSpace\r\n            };\r\n        }\r\n        // 弹出元素上边线与宿主元素上边线对齐情况，对应位置包含'left-top', 'right-top'\r\n        if (posArr[1] === 'top') {\r\n            return {\r\n                avilableHeight: avilableLayout.bottom + hostHeight,\r\n                top: hostLayout.top - offset\r\n            };\r\n        }\r\n        // 弹出元素上边线与宿主元素下边线对齐情况，对应位置包含'right-bottom', 'left-bottom'\r\n        if (posArr[1] === 'bottom') {\r\n            return {\r\n                avilableHeight: avilableLayout.top + hostHeight,\r\n                top: hostLayout.top + hostLayout.height - targetLayout.height + offset\r\n            };\r\n        }\r\n\r\n        // 弹出元素中线与宿主元素中线对齐情况，对应位置包含'left', 'right', 'center'\r\n        return {\r\n            avilableHeight: avilableLayout.clientHeight,\r\n            top: hostLayout.top - (targetLayout.height - hostLayout.height) / 2\r\n        };\r\n    }\r\n    // 获取定位偏差调整量\r\n    private static getOffsetFixVal(hostLayoutSize: number): number {\r\n        return hostLayoutSize / 2 < Position.ADAPTIVE_SIZE ?\r\n            Position.ADAPTIVE_SIZE - hostLayoutSize / 2 : 0;\r\n    }\r\n}\r\n","import { ApplicationRef, Component, ElementRef, EmbeddedViewRef, Input, Renderer2, TemplateRef, ViewChild } from '@angular/core';\r\nimport { TiBrowser, Util } from '../../utils/Util';\r\nimport { Position, TiHostLayout, TiPositionResult } from '../../utils/Position';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\nimport { Subject } from 'rxjs';\r\n\r\n/**\r\n * @ignore\r\n * 纯下拉面板组件，只有面板，没有内容。因为有时朝上弹，dropdown/dropup合称drop\r\n */\r\n@Component({\r\n    selector: 'ti-drop',\r\n    templateUrl: './drop.html',\r\n    styleUrls: ['./drop.less'],\r\n    host: {\r\n        '[class.ti3-dropdown-container]': 'true',\r\n        '[class.ti3-dropdown-container-border]': 'theme ===\"border\"',\r\n        '[style.height]': 'panelHeight'\r\n    }\r\n})\r\nexport class TiDropComponent extends TiBaseComponent {\r\n    /**\r\n     * 设置下拉距离dominator的距离：默认没有间距\r\n     */\r\n    public static readonly DOMINATOR_SPACE: number = 4;\r\n    /**\r\n     * 控制下拉框距离浏览器上下边沿的距离为5px，预留一个余量，防止显示不了边框\r\n     */\r\n    private static readonly BROWSER_SPACE: number = 5;\r\n    /**\r\n     * 下拉面板的最大显示宽度，该变量与下拉类组件保持一致\r\n     *\r\n     * 1.\"justified\"(默认): 下拉框的宽度与Select组件的宽度保持一致；\r\n     *\r\n     * 2.\"auto\": 下拉框的宽度根据下拉选项的内容自动撑开；\r\n     *\r\n     * 3.表示宽度的字符串: 设置固定的下拉框宽度(不小于Select组件的宽度)。例如：\"200px\"\r\n     */\r\n    @Input() panelWidth: string = 'justified'; // 面板宽度\r\n    /**\r\n     * 面板最大高度\r\n     */\r\n    @Input() panelMaxHeight: string = '9999px';   // 面板最大高度\r\n    /**\r\n     * 10.0.4新增\r\n     * 面板高度\r\n     */\r\n    @Input() panelHeight: string;\r\n    /**\r\n     * 参考位置元素\r\n     */\r\n    @Input() dominatorElem: any; // 参考位置元素\r\n    /**\r\n     * 空间不足时，依然保持固定高度。 select search等是可变最大高度，日历是固定最大高度。\r\n     * 再就是上下空间都不足时，日历从下方弹出。\r\n     */\r\n    @Input() fixMaxHeight: boolean = false; // 再就是上下空间都不足时，日历从下方弹出。\r\n    /**\r\n     * 主题样式控制\r\n     */\r\n    @Input() theme: 'border' | 'noborder' = 'border';\r\n    /**\r\n     * 距离宿主元素距离，像素值\r\n     */\r\n    @Input() dominatorSpace: string = TiDropComponent.DOMINATOR_SPACE + 'px';\r\n    /**\r\n     * 距离浏览器上或下边沿的距离，像素值\r\n     */\r\n    @Input() browserSpace: string = TiDropComponent.BROWSER_SPACE + 'px';\r\n    /**\r\n     * 在定位基础上的水平方向的偏移，向左偏移为负值，向右偏移为正值，像素值\r\n     */\r\n    @Input() hOffset: number = 0;\r\n    /**\r\n     * 准备去除\r\n     */\r\n    @Input() determinPositionFn: (layout: any) => string;\r\n    /**\r\n     * 面板对齐方式\r\n     */\r\n    @Input() panelAlign: 'left' | 'right' = 'left';\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('dropTemplateRef', { static: true }) dropTemplateRef: TemplateRef<any>;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public isUp: Boolean; // 面板展开的方向\r\n    /**\r\n     * @ignore\r\n     */\r\n    public dropSubject: Subject<any> = new Subject<any>();\r\n    private posHandles: Array<() => void> = [];\r\n    constructor(protected hostRef: ElementRef, protected renderer: Renderer2, private applicationRef: ApplicationRef) {\r\n        super(hostRef, renderer);\r\n    }\r\n\r\n    /**\r\n     * 外部接口: 获取当前状态, 只读不写\r\n     */\r\n    public get isShow(): boolean {\r\n        return this.hostRef.nativeElement.style.display === 'block';\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        // 从body上摘除。\r\n        this.renderer.removeChild(this.renderer.parentNode(this.hostRef.nativeElement), this.hostRef.nativeElement);\r\n        this.unlistenPosition();\r\n    }\r\n\r\n    /**\r\n     * 切换面板状态：打开/关闭\r\n     */\r\n    public toggle(): void {\r\n        this.isShow ? this.hide() : this.show();\r\n    }\r\n    /**\r\n     * 打开面板\r\n     */\r\n    public show(): void {\r\n        if (this.isShow) {\r\n            return;\r\n        }\r\n        // 挂在body上，极远处\r\n        this.appendToBodyFarAway();\r\n        // 先显示，才能再计算\r\n        this.setShow();\r\n        this.setPanelWidth();\r\n        // 设置位置：居下优先，居上其次\r\n        this.setPosition();\r\n\r\n        this.listenPosition();\r\n        this.dropSubject.next(true);\r\n        // const result = this.setPosition();\r\n        // setTimeout(()=>{this.setPosition()},0);\r\n        // 设置MaxHeight //此逻辑已经放入Position\r\n        // this.setPanelMaxHeight(result.avilableHeight);\r\n\r\n        // 设置Width。确保在显示之后设置下拉框的宽度，避免滚动条的影响\r\n        // this.setPanelWidth();\r\n    }\r\n    /**\r\n     * 关闭面板\r\n     */\r\n    public hide(): void {\r\n        if (!this.isShow) {\r\n            return;\r\n        }\r\n        this.renderer.setStyle(this.hostRef.nativeElement, 'display', 'none');\r\n        this.unlistenPosition();\r\n    }\r\n    private appendToBodyFarAway(): void {\r\n        // 如果不在body上，那么挂在body上。（逻辑应该移入Position.setPosition吧，因为那位置就是按照body定的，不在body会出错。）\r\n        if (this.renderer.parentNode(this.hostRef.nativeElement) !== document.body) {\r\n            this.renderer.appendChild(document.body, this.hostRef.nativeElement);\r\n            const embeddedViewRef: EmbeddedViewRef<any> = this.dropTemplateRef.createEmbeddedView(null);\r\n            this.applicationRef.attachView(embeddedViewRef); // 不做此处处理，ng-template中的标签不会解析\r\n            Array.from(embeddedViewRef.rootNodes)\r\n                .forEach((item: any) => {\r\n                    this.renderer.appendChild(this.hostRef.nativeElement, item);\r\n                });\r\n        }\r\n        // 设置在极远处（逻辑应该移入Position.setPosition吧）\r\n        this.renderer.setStyle(this.hostRef.nativeElement, 'left', '-9999px');\r\n        this.renderer.setStyle(this.hostRef.nativeElement, 'top', '-9999px');\r\n        // 更新max-height为默认值panelMaxHeight，因为上次显示可能更改了max-height\r\n        this.renderer.setStyle(this.hostRef.nativeElement, 'max-height', this.panelMaxHeight);\r\n        // 设置width,当出现滚动条时,更新width为默认的panelWidth，避免滚动条宽度的影响\r\n        if (this.panelWidth === 'auto') {\r\n            this.renderer.setStyle(this.hostRef.nativeElement, 'width', this.panelWidth);\r\n        }\r\n    }\r\n    private setShow(): void {\r\n        // 显示才能计算宽度\r\n        this.renderer.setStyle(this.hostRef.nativeElement, 'display', 'block');\r\n    }\r\n    /**\r\n     * 监听位置变化, 并隐藏面板。打开面板时监听，关闭和销毁时取消监听。\r\n     * TODO: 尝试hide改为rePosition\r\n     */\r\n    private listenPosition(): void {\r\n        this.posHandles = Position.addPosChangeEvts(() => {\r\n            this.hide();\r\n        }, this.renderer);\r\n    }\r\n    private unlistenPosition(): void {\r\n        Position.removePosChangeEvts(this.posHandles);\r\n    }\r\n    /**\r\n     * 确定元素的显示样式，包括位置、最大高度、向上或向下\r\n     * @returns 定位结果对象\r\n     */\r\n    public setPosition(): TiHostLayout {\r\n        const dominatorSpace: number = parseInt(this.dominatorSpace, 10);\r\n        const browserSpace: number = parseInt(this.browserSpace, 10);\r\n        const determinPositionFn: (layout: any) => string = Util.isFunction(this.determinPositionFn) ? this.determinPositionFn :\r\n            this.defaultDeterminPositionFn;\r\n\r\n        // 设置位置\r\n        const result: TiPositionResult = Position.setPosition({\r\n            targetEle: this.hostRef.nativeElement,\r\n            hostEle: this.dominatorElem,\r\n            // position: undefined, // 可选参数\r\n            hostSpace: dominatorSpace,\r\n            browserSpace,\r\n            fixMaxHeight: this.fixMaxHeight,\r\n            hOffset: this.hOffset,\r\n            determinPositionFn\r\n        });\r\n\r\n        return result.hostLayout;\r\n    }\r\n\r\n    public resetPosition(): void {\r\n        // 记录上一次dominator left值\r\n        const hostLayout: TiHostLayout = this.setPosition();\r\n        const dominatorLastLeft: number = hostLayout && hostLayout.left;\r\n        // 记录当前dominator left值\r\n        const dominatorCurLeft: number = Position.getHostEleLayout(this.dominatorElem).left;\r\n\r\n        // dominator发生水平位移且面板处于打开状态时，需重新定位\r\n        // 主要场景：下拉面板数据量变动引起body出现竖向滚动条，dominator发生水平方向偏移;\r\n        if (dominatorLastLeft !== dominatorCurLeft) {\r\n            if (this.isShow) {\r\n                this.setPosition();\r\n            }\r\n        }\r\n    }\r\n\r\n    private setPanelWidth(): void {\r\n        const panelWidthNum: number = parseInt(this.panelWidth, 10);\r\n        const scrollWidth: number = this.hostRef.nativeElement.offsetWidth - this.hostRef.nativeElement.clientWidth;\r\n        const dominatorElemWidth: number = this.dominatorElem.offsetWidth;\r\n        let width: string;\r\n        if (!isNaN(panelWidthNum)) {\r\n            width = panelWidthNum + 'px';\r\n        } else if (this.panelWidth === 'auto') {\r\n            width = 'auto';\r\n            // Fix bug: 非IE下滚动条会覆盖部分内容\r\n            if (!TiBrowser.isIE()) {\r\n                // 需要重置宽度设置，根据下拉面板的真实宽度确定是否需要增加滚动条宽度\r\n                width = null;\r\n                // 有滚动条出现且文本较长时，需要再增加滚动条的宽度，否则内容显示不全\r\n                if (scrollWidth) {\r\n                    width = this.hostRef.nativeElement.offsetWidth + scrollWidth + 'px';\r\n                }\r\n            }\r\n            const minWidth: string = dominatorElemWidth + 'px';\r\n            this.renderer.setStyle(this.hostRef.nativeElement, 'min-width', minWidth);\r\n        } else {\r\n            // 默认宽度设置，包含justified\r\n            width = dominatorElemWidth + 'px';\r\n        }\r\n        // 设置\r\n        this.renderer.setStyle(this.hostRef.nativeElement, 'width', width);\r\n    }\r\n\r\n    // 决定上下位置的函数\r\n    private defaultDeterminPositionFn: (layout: any) => string = (layout: any) => {\r\n        const dominatorSpace: number = parseInt(this.dominatorSpace, 10);\r\n        const browserSpace: number = parseInt(this.browserSpace, 10);\r\n        const needHeight: number = layout.targetLayout.height + dominatorSpace + browserSpace;\r\n        if (layout.avilableLayout.bottom >= needHeight) { // 下方空间足够，向下展开\r\n            return this.panelAlign === 'left' ? 'bottom-left' : 'bottom-right';\r\n        } else if (layout.avilableLayout.top >= needHeight) { // 上方空间足够，向上展开\r\n            return this.panelAlign === 'left' ? 'top-left' : 'top-right';\r\n        } else if (layout.avilableLayout.bottom >= layout.avilableLayout.top) { // 下方空间较大，则向下展开\r\n            // 因为日历组件存在问题，最大高度不压缩，极端情况时会显示在top为负显示不全。所以日历组件尽量向下弹出。\r\n            return this.panelAlign === 'left' ? 'bottom-left' : 'bottom-right';\r\n        }\r\n\r\n        return this.panelAlign === 'left' ? 'top-left' : 'top-right'; // 向上展开\r\n    }\r\n\r\n}\r\n\r\n// offsetWidth属性可以返回对象的padding+border+width属性值之和, 是整数。与jQuery的outerWidth()完全相同，outerWidth(true)带有外边距。\r\n// Element.clientWidth 属性表示元素的内部宽度，以像素计。该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距。\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiDropComponent } from './TiDropComponent';\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [TiDropComponent],\r\n  declarations: [TiDropComponent]\r\n})\r\nexport class TiDropModule {\r\n}\r\nexport { TiDropComponent } from './TiDropComponent';\r\n","import { NgModule } from '@angular/core';\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: []\r\n})\r\nexport class TiPopupModule {\r\n}\r\n","/* eslint-disable no-param-reassign */\r\n/**\r\n * 该类提供一个服务，用于管理弹出类组件的创建和销毁\r\n * 服务中提供三个方法:\r\n * create(componentType) 生成一个popup实例并返回对象，\r\n *   componentType：包裹内容的父容器元素类\r\n * 返回的实例对象中提供方法:\r\n * {\r\n *  show({ // 生成元素并在指定容器中显示\r\n *   content:弹出组件内容\r\n *   context:弹出组件上下文\r\n *   container:弹出组件最终放置的容器位置\r\n * }) : componentRef // 返回生成的组件实例\r\n *  hide():隐藏并销毁元素\r\n * }\r\n */\r\nimport { ApplicationRef, ComponentFactoryResolver, ComponentRef, ElementRef,\r\n    EmbeddedViewRef, Injectable, Injector,\r\n    Renderer2, RendererFactory2, SecurityContext, TemplateRef, ViewRef, Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\nimport { TiPopupModule } from './TiPopupModule';\r\nimport { Util } from '../../utils/Util';\r\n/**\r\n * @ignore\r\n * 类型中any代表组件形式\r\n */\r\nexport type TiContentType = string | TemplateRef<any> | any;\r\n/**\r\n * @ignore\r\n * popup show方法配置\r\n */\r\ninterface TiPopUpShowConfig {\r\n    content?: TiContentType; // 弹出组件内容\r\n    context?: any; // 弹出组件上下文\r\n    contentContext?: any; // 内容部分的组件上下文\r\n    container?: any; // 弹出组件最终放置的容器位置\r\n}\r\n/**\r\n * @ignore\r\n * popup create返回值\r\n */\r\nexport interface TiPopUpRef {\r\n    show(config: TiPopUpShowConfig | {}): ComponentRef<any>;\r\n    hide(): void;\r\n}\r\n/**\r\n * @ignore\r\n */\r\nclass ContentRef {\r\n    constructor(public nodes: Array<any>, public viewRef?: ViewRef,\r\n                public componentRef?: ComponentRef<any>) {\r\n    }\r\n}\r\n/**\r\n * @ignore\r\n */\r\n@Injectable({\r\n    providedIn: TiPopupModule\r\n})\r\nexport class TiPopupService<T> {\r\n    /**\r\n     * 由于该服务可能被其他服务使用到，并以服务的形式提供给外部；\r\n     * 而Renderer2本身不能脱离于component之外定义或依赖，所以使用RendererFactory2方式实例化进行处理\r\n     * 具体说明见如下：\r\n     * https://stackoverflow.com/questions/43070308/using-renderer-in-angular-4\r\n     */\r\n    private renderer: Renderer2;\r\n    constructor(private injector: Injector, rendererFactory: RendererFactory2,\r\n                private componentFactoryResolver: ComponentFactoryResolver,\r\n                private applicationRef: ApplicationRef,\r\n                private domSanitizer: DomSanitizer,\r\n                @Inject(DOCUMENT) private document) {\r\n            /* tslint:disable:no-null-keyword */\r\n            this.renderer = rendererFactory.createRenderer(null, null);\r\n    }\r\n\r\n    private getParentEle(containerOpt: string | ElementRef): Element {\r\n        if (containerOpt instanceof ElementRef) {// 父元素为正常element元素情况下\r\n            return containerOpt.nativeElement;\r\n        } else if (containerOpt === 'body') {// 父容器为body元素情况下\r\n            return this.document.body;\r\n        }\r\n    }\r\n\r\n    // 销毁组件相关内容\r\n    private static destroyComponentRef(_componentRef: ComponentRef<any>): void {\r\n        if (!_componentRef) {\r\n            return;\r\n        }\r\n        // 销毁组件实例\r\n        _componentRef.destroy();\r\n        _componentRef = null;\r\n    }\r\n\r\n    // 销毁弹出内容相关内容\r\n    private static destroyContentRef(contentRef: ContentRef): void {\r\n        // 弹出内容如果有组件实例对象时，销毁组件实例\r\n        if (contentRef.componentRef) {\r\n            contentRef.componentRef.destroy();\r\n        }\r\n        // 销毁页面视图实例\r\n        if (contentRef.viewRef) {\r\n            contentRef.viewRef.destroy();\r\n        }\r\n        // 销毁内容实例\r\n        contentRef = null;\r\n    }\r\n    public create(componentType: any): TiPopUpRef {\r\n        let _contentRef: ContentRef; // 弹出内容实例\r\n        let _componentRef: ComponentRef<T> | any; // 生成的组件实例对象\r\n\r\n        return {\r\n            show: (options?: TiPopUpShowConfig): ComponentRef<T> => {\r\n                // component已生成情况下，不再重复生成\r\n                if (_componentRef) {\r\n                    return _componentRef;\r\n                }\r\n                // 获取内容相关信息,包括：组件节点信息、组件实例信息、组件最小视图信息\r\n                _contentRef = this.getContentRef(options && options.content,\r\n                    options && options.contentContext);\r\n\r\n                // 创建组件实例：为内容本身再包一层父容器组件，用于控制组件（componentType）\r\n                _componentRef = this.createCompoentRef({\r\n                    componentType,\r\n                    nodes: _contentRef.nodes,\r\n                    context: options && options.context\r\n                });\r\n\r\n                // 将元素放置在指定容器中\r\n                const parentEle: Element = this.getParentEle(options && options.container);\r\n                if (parentEle) {\r\n                    parentEle.appendChild(_componentRef.location.nativeElement);\r\n                }\r\n\r\n                // 这时弹出内容已经append,可以对弹出内容进行解析了。\r\n                // 弹出内容中某些元素会在初始化时需要获取自身DOM宽高等，所以要保证弹出内容先append，然后再解析。\r\n                // 解析ng-template形式的弹出内容实例\r\n                if (options.content instanceof TemplateRef) {\r\n                    // 确保数据变化均可以被检测到\r\n                    _contentRef.viewRef.markForCheck();\r\n                    // 执行一次变化检测\r\n                    _contentRef.viewRef.detectChanges();\r\n                }\r\n                // 解析component形式的弹出内容实例\r\n                if (typeof options.content === 'function') {\r\n                    // 在组件的 metadata 中如果设置了OnPush 条件，那么变化检测不会再次执行,\r\n                    // 但是调用该方法，可以确保数据变化被检测到\r\n                    _contentRef.componentRef.changeDetectorRef.markForCheck();\r\n                    // 从该组件到其子组件执行一次变化检测\r\n                    _contentRef.componentRef.changeDetectorRef.detectChanges();\r\n                }\r\n\r\n                _componentRef.tiContentRef = _contentRef;\r\n\r\n                return _componentRef;\r\n            },\r\n            hide: (): void => {\r\n                if (!_componentRef) {\r\n                    return;\r\n                }\r\n                TiPopupService.destroyComponentRef(_componentRef);\r\n                TiPopupService.destroyContentRef(_contentRef);\r\n                // 由于该变量在destroyComponentRef函数中赋为null不会改变外部值的改变，导致下次show时判断错误，因此此处需要做处理\r\n                _componentRef = null;\r\n            }\r\n        };\r\n    }\r\n\r\n    private getContentRef = (content: TiContentType, context?: any): ContentRef => {\r\n        // ng-template形式\r\n        if (content instanceof TemplateRef) {\r\n            // 将template实例化为内嵌视图,并将其放在可运行环境中进行解析\r\n            const embeddedViewRef: EmbeddedViewRef<any> = content.createEmbeddedView({context});\r\n            this.applicationRef.attachView(embeddedViewRef); // 不做此处处理，ng-template中的标签不会解析\r\n\r\n            return new ContentRef([embeddedViewRef.rootNodes], embeddedViewRef);\r\n        }\r\n        // 组件形式\r\n        if (typeof content === 'function') {\r\n            // 根据传入的component类（即content）创建组件引用\r\n            const componentRef: ComponentRef<any> = this.createCompoentRef({\r\n                componentType: content,\r\n                context,\r\n                notDetectChanges: true});\r\n\r\n            return new ContentRef(\r\n                [[componentRef.location.nativeElement]],\r\n                componentRef.hostView,\r\n                componentRef\r\n            );\r\n        }\r\n        // element Dom形式\r\n        if (content instanceof HTMLElement) {\r\n            return new ContentRef([[content]]);\r\n        }\r\n\r\n        // string形式 或 SafeHtml(object类型) 形式，\r\n        if (typeof content === 'string' || typeof content === 'object') {\r\n            const wrapEle: Element = this.renderer.createElement('div');\r\n            wrapEle.innerHTML = this.domSanitizer.sanitize(SecurityContext.HTML, content)\r\n\r\n            return new ContentRef([wrapEle.childNodes]);\r\n        }\r\n\r\n        return new ContentRef([]);\r\n    }\r\n    /**\r\n     * 创建组件实例\r\n     * options {\r\n     *   componentType: 组件类\r\n     *   nodes：组件中的可注入节点\r\n     *   context: 组件属性配置,inputs属性均可在此配置\r\n     * }\r\n     */\r\n    public createCompoentRef(options: {\r\n        componentType?: any,\r\n        nodes?: Array<any>,\r\n        context?: { outputs?: Object, [propName: string]: any },\r\n        notDetectChanges?: boolean\r\n    }): ComponentRef<any> {\r\n        // 1. 根据component类创建组件引用\r\n        const componentRef: ComponentRef<any> = this.componentFactoryResolver\r\n            .resolveComponentFactory(options.componentType)\r\n            .create(this.injector, options.nodes);\r\n\r\n        // 2. 将组件绑定在ng component树上，不做绑定情况下，内容中的指令无法解析\r\n        this.applicationRef.attachView(componentRef.hostView);\r\n\r\n        // 3. 绑定组件上下文定义\r\n        Object.assign(componentRef.instance, options.context);\r\n        // outputs事件绑定\r\n        if (options.context && !Util.isUndefined(options.context.outputs)) {\r\n            for (const key in options.context.outputs) {\r\n                if (options.context.outputs.hasOwnProperty(key)) {\r\n                    componentRef.instance[key].subscribe(options.context.outputs[key]);\r\n                }\r\n            }\r\n        }\r\n\r\n        // 4. 确保组件视图根据数据能实时刷新上。\r\n        // 通过该处理可以确保组件及子组件都完成解析\r\n        if (!options.notDetectChanges) {\r\n            // 在组件的 metadata 中如果设置了OnPush 条件，那么变化检测不会再次执行,\r\n            // 但是调用该方法，可以确保数据变化被检测到\r\n            componentRef.changeDetectorRef.markForCheck();\r\n            // 从该组件到其子组件执行一次变化检测\r\n            componentRef.changeDetectorRef.detectChanges();\r\n        }\r\n\r\n        return componentRef;\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: []\r\n})\r\nexport class TiRendererModule {\r\n}\r\n","import {Renderer2, Injectable, RendererFactory2} from '@angular/core';\r\nimport { TiRendererModule } from './TiRendererModule';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@Injectable({\r\n    providedIn: TiRendererModule\r\n  })\r\nexport class TiRenderer {\r\n    private renderer: Renderer2;\r\n    constructor(rendererFactory: RendererFactory2) {\r\n        this.renderer = rendererFactory.createRenderer(null, null);\r\n    }\r\n    /**\r\n     * @description: 将节点插入某节点元素之后\r\n     * @param: sourceEle 被插入节点\r\n     * @param: targetEle 节点插入位置\r\n     */\r\n    public insertAfter(sourceEle, targetEle) {\r\n        const parent = targetEle.parentNode;\r\n        // 如果最后的节点是目标元素,则直接添加\r\n        if (parent.lastChild === targetEle) {\r\n            this.renderer.appendChild(parent, sourceEle);\r\n        } else {// 如果不是,则插在目标元素的下一个兄弟节点之前\r\n            this.renderer.insertBefore(parent, sourceEle, targetEle.nextSibling);\r\n        }\r\n    }\r\n    /**\r\n     * @description: 判读一个元素上是否存在某个样式类名\r\n     * @param: ele 被判断的元素\r\n     * @param: className 样式类名\r\n     */\r\n    public hasClass(element, className): boolean {\r\n      const classList = element.classList;\r\n      return classList.contains(className);\r\n    }\r\n    /**\r\n     * @description: 给指定元素设置属性\r\n     * @param: element 被设置的元素\r\n     * @param: attr Object 属性对象\r\n     */\r\n    public setAttributes(element, attr: Object) {\r\n        for (const key in attr) {\r\n            if (attr.hasOwnProperty(key)) {\r\n                this.renderer.setAttribute(element, key, String(attr[key]));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 为元素添加多个样式\r\n     * @param: ele 元素对象\r\n     * @param: styles  Object 样式对象，如：{width: 100, height: 200}\r\n     */\r\n    public setStyles(ele, styles) {\r\n        for (const key in styles) {\r\n            if (styles.hasOwnProperty(key)) {\r\n                this.renderer.setStyle(ele, key, styles[key]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 将节点插入某父容器，作为第一个元素\r\n     * @param: parentEle 父节点元素\r\n     * @param: sourceEle 需要插入的节点元素\r\n     */\r\n    public prepend(parentEle, sourceEle) {\r\n        if (!parentEle) {\r\n            return;\r\n        }\r\n        this.renderer.insertBefore(parentEle, sourceEle, parentEle.firstElementChild);\r\n    }\r\n\r\n    /**\r\n     * @description: 查找一个元素下有某个样式类的子元素\r\n     * @param: element 被查找的元素\r\n     * @param: className 子元素的样式类名\r\n     */\r\n    public findChildrenByClassName(element, className): Array<any> {\r\n        let resultChildren = [];\r\n        resultChildren = Array.from(element.children).filter((child: any) => {\r\n            return this.hasClass(child, className);\r\n        });\r\n\r\n        return resultChildren;\r\n    }\r\n    /**\r\n     * @description: 查找一个元素下有某个样式类的子元素\r\n     * @param: element 被查找的元素\r\n     * @param: className 子元素的样式类名\r\n     */\r\n    public findChildrenByTagName(element, tagName: string): Array<any> {\r\n        let resultChildren = [];\r\n        resultChildren = Array.from(element.children).filter((child: any) => {\r\n            return child.tagName === tagName;\r\n        });\r\n\r\n        return resultChildren;\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n  selector: 'ti-tip-container',\r\n  template: `\r\n    <div class='ti3-tooltip-content'><ng-content></ng-content></div>\r\n    <div class='ti3-tooltip-sqr'></div>`,\r\n  host: {\r\n    '[class.ti3-tooltip]': 'true'\r\n  },\r\n  styleUrls: ['./tip.less']\r\n})\r\nexport class TiTipContainerComponent{\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { TiTipContainerComponent } from './TiTipContainerComponent';\r\nimport { TiPopupModule } from '../popup/TiPopupModule';\r\nimport { TiRendererModule } from '../renderer/TiRendererModule';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    TiPopupModule,\r\n    TiRendererModule\r\n  ],\r\n  exports: [],\r\n  declarations: [TiTipContainerComponent],\r\n  entryComponents: [TiTipContainerComponent]\r\n})\r\nexport class TiTipServiceModule {\r\n}\r\n","/* eslint-disable no-eq-null */\r\n/* eslint-disable eqeqeq */\r\n/**\r\n * 该类提供服务，用于管理Tip组件的创建和销毁\r\n * 服务中提供三个方法:\r\n * create(hostEle, config) 生成一个tip实例并返回对象，\r\n *   hostEle:宿主元素\r\n *   config:{\r\n *      position：tip元素位置\r\n *      maxWidth：最大宽度\r\n *      hasArrow：是否带箭头\r\n *      theme：tip色系 'black'/default\r\n *  }\r\n * 返回的实例对象中提供方法:\r\n * {\r\n *  show({ // 显示Tip组件\r\n *   content:弹出组件内容\r\n *   context:弹出组件上下文\r\n * })\r\n *  hide():隐藏并销毁Tip\r\n * }\r\n */\r\nimport { ComponentRef, Injectable, NgZone, Renderer2, RendererFactory2, Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\nimport { TiContentType, TiPopUpRef, TiPopupService } from '../popup/TiPopupService';\r\nimport { Position, TiPositionResult, TiPositionType } from '../../utils/Position';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiRenderer } from '../renderer/TiRenderer';\r\n\r\nimport { TiTipContainerComponent } from './TiTipContainerComponent';\r\nimport { TiTipServiceModule } from './TiTipServiceModule';\r\nimport { TiTipConfig, TiTipRef, TiTipShowInfo } from './TiTipInterface';\r\n/**\r\n * @ignore\r\n */\r\nexport interface TiTipShowConfig {\r\n    popInstance: TiPopUpRef;\r\n    hostEle: Element;\r\n    content: TiContentType;\r\n    context: any;\r\n    config: TiTipConfig;\r\n}\r\n/**\r\n * tip提供了两种使用方式:\r\n *\r\n * 1.服务方式（见如下说明），使用该服务时需要引入模块TiTipServiceModule\r\n *\r\n * 2.指令方式：[TiTipDirective]{@link ../directives/TiTipDirective.html}\r\n *\r\n * <example-url>../tiny3demo/#/tip/tip-all</example-url>\r\n */\r\n@Injectable({\r\n    providedIn: TiTipServiceModule\r\n})\r\nexport class TiTipService {\r\n    private static readonly DEFAULT_WIDTH: number = 276; // tip换行宽度\r\n    private static readonly SPACE: number = 6.5 + 5; // tip框与元素本身的距离 = 三角宽高 + tip三角到触发tip的内容区域的距离\r\n    private render: Renderer2;\r\n    constructor(private popService: TiPopupService<TiTipContainerComponent>,\r\n                rendererFactory: RendererFactory2, private tiRenderer: TiRenderer, private zone: NgZone\r\n                , @Inject(DOCUMENT) private document) {\r\n            /* tslint:disable:no-null-keyword */\r\n            this.render = rendererFactory.createRenderer(null, null);\r\n    }\r\n    /**\r\n     * 页面激活窗口改变事件处理，此处获取事件名称，该事件后续会在tip显示时注册，隐藏时销毁\r\n     * 添加该事件用于解决的问题现象是：tip带链接，并且点击链接跳转至新开页面，因此，当返回先前页面时，tip不消失（因为未触发任何tip消失的事件），\r\n     * 且移入其他出tip的元素，会出现页面有多个tip的现象\r\n     */\r\n    private getVisibleChangeEventName(): string {\r\n        const hiddenProperty: string = 'hidden' in this.document ? 'hidden' :\r\n            'webkitHidden' in this.document ? 'webkitHidden' :\r\n                'mozHidden' in this.document ? 'mozHidden' :\r\n                    '';\r\n\r\n        return hiddenProperty.replace(/hidden/i, 'visibilitychange');\r\n    }\r\n    public create(hostEle: Element, config?: TiTipConfig): TiTipRef {\r\n        // 宿主元素不存在情况下，不做处理\r\n        if (!Util.isElement(hostEle)) {\r\n            return;\r\n        }\r\n        const tipInstance: TiTipRef = this.createTip(hostEle, config);\r\n        this.addTriggerEvent(hostEle, config, tipInstance);\r\n\r\n        return tipInstance;\r\n    }\r\n    /**\r\n     * 创建Tip实例\r\n     *\r\n     * @param hostEle tip生成所依附的宿主元素\r\n     *\r\n     * @param config tip属性配置\r\n     *\r\n     * @returns 生成的Tip实例对象如下：\r\n     *\r\n     * ```\r\n     * {\r\n     *      // 显示tip方法\r\n     *      // @param content {string | TemplateRef<any> | any} tip显示内容，可为字符串/ng-template/component，具体用法见示例\r\n     *      // @param context {any} tip显示内容对应的上下文，content类型为templateRef或Component形式时会用到该参数\r\n     *      show: (content: string | TemplateRef<any> | any, context?: any) => void;\r\n     *\r\n     *      // 隐藏tip方法\r\n     *      hide: () => void;\r\n     * }\r\n     * ```\r\n     */\r\n    private createTip(hostEle: Element, config?: TiTipConfig): TiTipRef {\r\n        const popInstance: TiPopUpRef = this.popService.create(TiTipContainerComponent); // tip弹出服务实例，可通过调用show/hide方法切换组件的显示状态\r\n        let tipComponentRef: any; // 生成好的 tip 组件实例对象componentRef\r\n        const visibilityChangeEvent: string = this.getVisibleChangeEventName();\r\n        let visibleChangeEvtHandle: () => void;\r\n\r\n        // 组件添加全局事件销毁相关处理\r\n        let eventHandles: Array<() => void> = []; // 用于存储事件句柄，事件句柄在事件取消时需要用到\r\n\r\n        // 隐藏处理函数\r\n        const hideFn: () => void =\r\n           (): void => {\r\n            if (tipComponentRef != null) {\r\n                // 销毁弹出元素\r\n                popInstance.hide();\r\n                // 通过执行事件返回句柄方法解绑事件\r\n                Position.removePosChangeEvts(eventHandles);\r\n                if (config.registerVisibilityChangeEvent !== false) {\r\n                    visibleChangeEvtHandle();\r\n                }\r\n                tipComponentRef = null;\r\n            }\r\n        };\r\n\r\n        return {\r\n            show: (content: string, context?: any): ComponentRef<any> | undefined => {\r\n                if (Util.isUndefined(content) || content === '') {\r\n                    return;\r\n                }\r\n                // 显示Tip元素\r\n                tipComponentRef = this.showTip({\r\n                    popInstance,\r\n                    hostEle,\r\n                    content,\r\n                    context,\r\n                    config\r\n                });\r\n                // 添加全局事件，用于控制特殊情况下宿主位置改变时Tip的隐藏\r\n                eventHandles = Position.addPosChangeEvts(hideFn, this.render);\r\n                if (config.registerVisibilityChangeEvent !== false) {\r\n                    visibleChangeEvtHandle = this.render.listen(this.document, visibilityChangeEvent, hideFn);\r\n                }\r\n\r\n                return tipComponentRef;\r\n            },\r\n            hide: (): void => {\r\n                hideFn();\r\n            },\r\n            // 销毁tip\r\n            destroy: (): void => {\r\n                // 销毁tip前先隐藏\r\n                hideFn();\r\n            }\r\n\r\n        };\r\n    }\r\n\r\n    // 根据trigger配置为宿主元素添加事件，该事件用于控制tip的显示/隐藏\r\n    private addTriggerEvent(hostEle: Element, config: TiTipConfig, tipInstance: TiTipRef): void {\r\n        // 非mouse情况下，不用做事件处理\r\n        if (config.trigger !== 'mouse') {\r\n            return;\r\n        }\r\n        let tipComponentRef: ComponentRef<any> = null;\r\n        // 默认情况下，使用mouse进行tip显示和隐藏控制（只对指令形式有效）\r\n        this.zone.runOutsideAngular(() => {\r\n            const unlistenMouseenterFn: () => void = this.render.listen(hostEle, 'mouseenter', () => {\r\n                if (typeof config.showFn !== 'function') {\r\n                    return;\r\n                }\r\n                const showInfo: TiTipShowInfo = config.showFn();\r\n                if (!showInfo) {\r\n                    return;\r\n                }\r\n                this.zone.run(() => {\r\n                    tipComponentRef = tipInstance.show(showInfo.content, showInfo.context);\r\n                    if (!tipComponentRef) {\r\n                        return;\r\n                    }\r\n                    // 根据trigger配置添加tip元素本身事件，此处事件用于支持移出tip元素时tip消失\r\n                    const targetEle: Element = tipComponentRef.location.nativeElement;\r\n                    // eslint-disable-next-line max-nested-callbacks\r\n                    this.render.listen(targetEle, 'mouseleave', (event: MouseEvent) => {\r\n                        /**\r\n                         * 此处处理是为了解决Chrome高版本下，连续点击tip区域情况下，导致tip消失的问题\r\n                         * 【问题原因】chrome高版本（chrome60以上版本）下，连续的click事件会触发tipEle的mouseleave事件,\r\n                         * 从而导致tip消失\r\n                         * 【解决方案】如mouseleve事件是由tip元素本身点击触发的，则event.relatedTarget为null，则通过该\r\n                         * 方式进行特殊情况排除\r\n                         */\r\n                        if (event.relatedTarget === null) {\r\n                            return;\r\n                        }\r\n                        tipInstance.hide();\r\n                        tipComponentRef = null;\r\n                    });\r\n                });\r\n            });\r\n            const unlistenMouseleaveFn: () => void = this.render.listen(hostEle, 'mouseleave', (event: MouseEvent) => {\r\n                // 鼠标移入tip时，tip不消失\r\n                if (tipComponentRef && !tipComponentRef.location.nativeElement.contains(event.relatedTarget)) {\r\n                    this.zone.run(() => {\r\n                        tipInstance.hide();\r\n                        tipComponentRef = null;\r\n                    });\r\n                }\r\n            });\r\n            // 给实例添加销毁方法\r\n            tipInstance.destroy = (): void => {\r\n                // 先隐藏tip示例再取消监听事件\r\n                tipInstance.hide();\r\n                unlistenMouseenterFn();\r\n                unlistenMouseleaveFn();\r\n            };\r\n        });\r\n    }\r\n\r\n    private showTip(options: TiTipShowConfig): ComponentRef<any> {\r\n        const tipComponentRef: ComponentRef<any> = options.popInstance.show({\r\n            content: options.content,\r\n            contentContext: options.context,\r\n            container: 'body'\r\n        });\r\n        const targetEle: Element = tipComponentRef.location.nativeElement;\r\n        this.tiRenderer.setStyles(targetEle, {\r\n            left: '-9999px',\r\n            top: '-9999px'\r\n        });\r\n        this.setTipTheme(targetEle, options.config);\r\n        // 计算元素宽高时，需要确保元素已生成\r\n        this.setTipWidth(targetEle, options.config);\r\n        this.setPosition(options.hostEle, targetEle, options.config);\r\n\r\n        return tipComponentRef;\r\n    }\r\n\r\n    private setTipTheme(ele: Element, config: TiTipConfig): void {\r\n        if (!config || !config.theme) {\r\n            return;\r\n        }\r\n        if (config.theme === 'black') {\r\n            this.render.addClass(ele, 'ti3-tip-black-theme');\r\n        } else if (config.theme === 'white') {\r\n            this.render.addClass(ele, 'ti3-tip-white-theme');\r\n        }\r\n    }\r\n\r\n    private setTipWidth(ele: Element, config: TiTipConfig): void {\r\n        const maxWidth: number = parseInt((config && config.maxWidth) || TiTipService.DEFAULT_WIDTH as any, 10);\r\n        // 修复SSR错误：ERROR TypeError: ele.getBoundingClientRect is not a function\r\n        if (typeof ele.getBoundingClientRect !== 'function') {\r\n            return;\r\n        }\r\n        const targetWidth: number = ele.getBoundingClientRect().width;\r\n        if (targetWidth > maxWidth) {\r\n            // 如果宽度超过最大值，重新设置当前tip的内容宽度\r\n            this.render.setStyle(ele, 'width', `${maxWidth}px`);\r\n        }\r\n    }\r\n\r\n    private setPosition(hostEle: Element, targetEle: Element, config: TiTipConfig): void {\r\n        const result: TiPositionResult = Position.setPosition({\r\n            targetEle,\r\n            hostEle,\r\n            hostEleX: config.hostEleX,\r\n            position: config && config.position || 'auto',\r\n            hostSpace: TiTipService.SPACE,\r\n            fixMaxHeight: true,\r\n            hasOffsetFix: true\r\n        });\r\n        const position: TiPositionType = result.position;\r\n        if (!config || config.hasArrow !== false) {// 未定义或定义为false情况下都需要加该样式类控制三角样式\r\n            this.render.addClass(targetEle, `ti3-tooltip-${position}`);\r\n        }\r\n        // 设置该样式类是为了支持鼠标移入Tip不消失：使用该样式类用于确保tip和宿主元素连接处的DOM在tip范围内\r\n        this.render.addClass(targetEle.querySelector('.ti3-tooltip-sqr'), `ti3-tooltip-${position}-sqr`);\r\n        // 设置当前tip的内容最大高度，超出显示滚动条\r\n        this.tiRenderer.setStyles(targetEle.querySelector('.ti3-tooltip-content'), {\r\n            maxHeight: result.avilableHeight\r\n        });\r\n    }\r\n}\r\n","import { ComponentRef, Directive, ElementRef, Input, OnDestroy, OnInit, Renderer2, TemplateRef } from '@angular/core';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiPositionType } from '../../utils/Position';\r\nimport { TiTipRef, TiTipShowInfo } from '../../services/tip/TiTipInterface';\r\nimport { TiTipService } from '../../services/tip/TiTipService';\r\n\r\n// TODO:exportAs: 'tiTip' 可去除？\r\n/**\r\n * tip提供了两种使用方式:\r\n * 1.服务方式：[TiTipService]{@link ../injectables/TiTipService.html}\r\n *\r\n * 2.指令方式（见如下说明）\r\n *\r\n * <example-url>../tiny3demo/#/tip/tip-all</example-url>\r\n */\r\n@Directive({\r\n  selector: '[tiTip]',\r\n  exportAs: 'tiTip'\r\n})\r\nexport class TiTipDirective implements OnInit, OnDestroy {\r\n    /**\r\n     * Tip显示位置属性配置\r\n     */\r\n    @Input() tiTipPosition?: TiPositionType = 'auto';\r\n   /**\r\n    * 最大宽度\r\n    *\r\n    */\r\n   @Input() tiTipMaxWidth: string = '276px';\r\n    /**\r\n     * 是否带箭头\r\n     */\r\n    @Input() tiTipHasArrow?: boolean = true;\r\n    /**\r\n     * tip显示内容对应的上下文，tip内容类型为templateRef或Component形式时会用到该参数，参数为自定义对象形式\r\n     *\r\n     * 注意：指令形式时才会使用到该参数\r\n     */\r\n    @Input() tiTipContext?: any;\r\n    /**\r\n     * tip生成方式，默认支持鼠标移入移出时显示/隐藏\r\n     *\r\n     * 注意：指令形式时才会使用到该参数\r\n     */\r\n    @Input() tiTipTrigger?: 'mouse'|'manual' = 'mouse';\r\n    /**\r\n     * @ignore\r\n     * 决定tip水平方向位置的宿主元素配置\r\n     */\r\n    @Input() tiTipHostEleX: Element;\r\n    protected tipInstance: TiTipRef;\r\n    private hostEle: Element;\r\n    private _tiTip: string | TemplateRef<any>;\r\n    constructor(private tipService: TiTipService,\r\n                hostEleRef: ElementRef) {\r\n        this.hostEle = hostEleRef.nativeElement;\r\n    }\r\n\r\n    private static isInValidValue(value: string | TemplateRef<any>): boolean {\r\n        return Util.isUndefined(value) || Util.isNull(value) || value === '';\r\n    }\r\n    ngOnInit(): void {\r\n        // 初始创建tip实例\r\n        this.tipInstance = this.tipService.create(this.hostEle, {\r\n            position: this.tiTipPosition,\r\n            maxWidth: this.tiTipMaxWidth,\r\n            hasArrow: this.tiTipHasArrow,\r\n            hostEleX: this.tiTipHostEleX,\r\n            trigger: this.tiTipTrigger || 'mouse', // 指令方式，默认为'mouse'\r\n            showFn: (): TiTipShowInfo => {\r\n                if (!this.tipInstance || TiTipDirective.isInValidValue(this._tiTip)) {\r\n                    return;\r\n                }\r\n\r\n                return { content: this._tiTip, context: this.tiTipContext };\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * tip显示内容配置\r\n     *\r\n     * 类型：string | TemplateRef<any> | any\r\n     *\r\n     * 传入string类型时，在v3.0.6及之前的版本存在XSS攻击风险；v3.0.7做了安全处理后不存在XSS风险了，把传入的字符串当做纯文本解析，传入什么显示什么；\r\n     * v10.1.4版本支持html字符串片段，也已做安全处理。\r\n     */\r\n    @Input()\r\n    // 监听tip值的变化，当tip为''或undefined情况下，直接隐藏tip组件\r\n    /**\r\n     * @ignore\r\n     */\r\n    set tiTip(value: string | TemplateRef<any>) {\r\n        this._tiTip = value;\r\n        if (TiTipDirective.isInValidValue(value)) {\r\n            this.hide();\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    get tiTip(): string | TemplateRef<any> {\r\n        return this._tiTip;\r\n    }\r\n    /**\r\n     * 显示tip方法\r\n     */\r\n    public show(): ComponentRef<any> {\r\n        if (!this.tipInstance || TiTipDirective.isInValidValue(this._tiTip)) {\r\n            return;\r\n        }\r\n\r\n        return this.tipInstance.show(this._tiTip, this.tiTipContext);\r\n    }\r\n    /**\r\n     * 隐藏tip方法\r\n     */\r\n    public hide(): void {\r\n        if (this.tipInstance) {\r\n            this.tipInstance.hide();\r\n        }\r\n    }\r\n    // 宿主销毁，tip连带销毁\r\n    ngOnDestroy(): void {\r\n        this.tipInstance.hide();\r\n        /* tslint:disable:no-null-keyword */\r\n        this.tipInstance = null;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiTipDirective } from './TiTipDirective';\r\nimport { TiTipServiceModule } from '../../services/tip/TiTipServiceModule';\r\n// 引用TiTipModule，可以使用Tip指令和Tip服务\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiTipServiceModule\r\n  ],\r\n  exports: [TiTipDirective],\r\n  declarations: [TiTipDirective]\r\n})\r\nexport class TiTipModule {\r\n}\r\nexport { TiTipDirective } from './TiTipDirective';\r\n","/* tslint:disable:file-name-casing */\r\nimport { TiLocaleWords } from '../TiLocaleWords';\r\n/**\r\n * @ignore\r\n * Tiny组件中使用的中文国际化词条\r\n */\r\nexport const zh_CN: TiLocaleWords = {\r\n  tiLocaleKey: 'zh-CN',\r\n  tiLocaleDate: {\r\n    date: 'yyyy/MM/dd',\r\n    time: 'HH:mm:ss'\r\n  },\r\n  tiCommon: {\r\n    okBtn: '确定',\r\n    cancelBtn: '取消'\r\n  },\r\n  tiActionmenu: {\r\n    more: '更多',\r\n    operation: '操作'\r\n  },\r\n  tiValid: {\r\n    errorMsg: {\r\n      required: '输入不能为空。',\r\n      maxLength: '输入长度不能超过{0}个字符。',\r\n      minLength: '输入长度不能小于{0}个字符。',\r\n      rangeSize: '输入长度范围为{0}到{1}个字符。',\r\n      maxValue: '输入值不能超过{0}。',\r\n      minValue: '输入值不能小于{0}。',\r\n      rangeValue: '输入值必须在{0}到{1}之间。',\r\n      regExp: '输入值无效。',\r\n      contains: '输入值必须包含有字符{0}。',\r\n      notContains: '输入值不能含有非法字符{0}。',\r\n      notScript: '输入值不能含有script标签。',\r\n      equal: '输入值必须等于{0}。',\r\n      notEqual: '输入值不能等于{0}。',\r\n      port: '端口号为{0}到{1}的整数。',\r\n      path: '输入值未满足路径格式要求。',\r\n      email: '输入email地址无效。',\r\n      date: '输入日期无效。',\r\n      url: '输入URL无效。',\r\n      integer: '输入值不是有效整数。',\r\n      number: '输入值不是有效数字。',\r\n      digits: '输入值不是有效数字字符。',\r\n      ipv4: '输入值不是有效IPv4地址。',\r\n      ipv6: '输入值不是有效IPv6地址。',\r\n      password: '密码输入不符合要求，请重新输入。'\r\n    },\r\n    message: {\r\n      rangeSize: '{0}~{1}个字符。',\r\n      minCharType: '至少包含以下字符中的{0}种：大写字母、小写字母、数字、特殊字符`~!@#$%^&*()-_=+\\\\|[{}];:\\'\\\",<.>/?  和空格。',\r\n      notEqualPosRev: '不能与用户名或倒序的用户名相同。'\r\n    },\r\n    passwordStrength: {\r\n      securityText: '安全程度:',\r\n      levelDecArr: ['弱', '中', '强']\r\n    }\r\n  },\r\n  tiPagination: {\r\n    gotoLabel: '跳转',\r\n    prevTitle: '上一页',\r\n    nextTitle: '下一页',\r\n    totalLabel: '总条数：'\r\n  },\r\n  tiMessage: {\r\n    prompt: '提示',\r\n    warn: '警告',\r\n    confirm: '确认',\r\n    error: '错误',\r\n    ok: '确认',\r\n    cancel: '取消'\r\n  },\r\n  tiUpload: {\r\n    addFile: '添加文件',\r\n    error: '上传失败！', // upload_error_info\r\n    successInfo: '上传成功！',\r\n    uploadingSingleInfo: '正在上传',\r\n    errorSingleInfo: '上传失败！',\r\n    addSuccessMutiInfo: '已添加{0}个文件',\r\n    uploadingMutiInfo: '{0} 正在上传',\r\n    errorMultiInfo: '{0}个文件上传失败！',\r\n    clearAll: '清空选择',\r\n    upload: '上传文件',\r\n    cancel: '取消上传',\r\n    reload: '重新上传',\r\n    autoUploadFilePlaceholder: '点击右侧按钮上传文件',\r\n    autoUploadFilesPlaceholder: '点击右侧按钮上传文件',\r\n    notAutoUploadFilePlaceholder: '点击右侧按钮先添加再上传',\r\n    notAutoUploadFilesPlaceholder: '点击右侧按钮先添加再上传'\r\n  },\r\n  tiDate: {\r\n    datePlaceholder: '请选择日期',\r\n    datetimePlaceholder: '请选择日期时间',\r\n    weekNamesAbb: ['日', '一', '二', '三', '四', '五', '六'],\r\n    weeknamesTitle: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'],\r\n    monthNamesAbb: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],\r\n    btnSliderArr: ['1', '2', '3', '4', '5', '6', '7', '8', '9个月', '1 年', '2 年', '3 年'],\r\n    yearSuffixLabel: '年',\r\n    rangeBeginLabel: '开始日期',\r\n    rangeEndLabel: '结束日期',\r\n    selectTime: '选择时间',\r\n    selectDate: '选择日期',\r\n    hour: '时',\r\n    minute: '分',\r\n    second: '秒'\r\n  },\r\n  tiSelect: {\r\n    search: '搜索',\r\n    selected: '已选'\r\n  },\r\n  tiTable: {\r\n    colsToggleTip: '自定义列表项'\r\n  },\r\n  tiList: {\r\n    selectAll: '(全选)'\r\n  },\r\n  tiIntro: {\r\n    skip: '跳过',\r\n    previous: '上一步',\r\n    next: '下一步',\r\n    finish: '立即体验'\r\n  },\r\n  tiPopconfirm: {\r\n    yesLabel: '是',\r\n    noLabel: '否'\r\n  },\r\n  tiTree: {\r\n    reload: '重新加载',\r\n    loadError: '加载失败，',\r\n    newNode: '新节点'\r\n  }\r\n};\r\n","/* tslint:disable:file-name-casing */\r\nimport { TiLocaleWords } from '../TiLocaleWords';\r\n/**\r\n * @ignore\r\n * Tiny组件中使用的英文国际化词条\r\n */\r\nexport const en_US: TiLocaleWords = {\r\n  tiLocaleKey: 'en-US',\r\n  tiLocaleDate: {\r\n    date: 'MMM dd, yyyy',\r\n    time: 'HH:mm:ss'\r\n  },\r\n  tiCommon: {\r\n    okBtn: 'OK',\r\n    cancelBtn: 'Cancel'\r\n  },\r\n  tiActionmenu: {\r\n    more: 'More',\r\n    operation: 'Operation'\r\n  },\r\n  tiValid: {\r\n    errorMsg: {\r\n      required: 'This field cannot be left blank.',\r\n      maxLength: 'Enter a maximum of {0} characters.',\r\n      minLength: 'Enter at least {0} characters.',\r\n      rangeSize: 'Enter {0} to {1} characters.',\r\n      maxValue: 'Enter a value less than or equal to {0}.',\r\n      minValue: 'Enter a value greater than or equal to {0}.',\r\n      rangeValue: 'Enter a value from {0} to {1}.',\r\n      regExp: 'Invalid value.',\r\n      contains: 'The value must contain the following characters: {0}.',\r\n      notContains: 'The value cannot contain the following invalid characters: {0}.',\r\n      notScript: 'The value cannot contain script tags.',\r\n      equal: 'The value must be {0}.',\r\n      notEqual: 'The value cannot be {0}.',\r\n      port: 'Enter an integer from {0} to {1}.',\r\n      path: 'Enter a valid file path.',\r\n      email: 'Enter a valid email address.',\r\n      date: 'Enter a valid date.',\r\n      url: 'Enter a valid URL.',\r\n      integer: 'Enter a valid integer.',\r\n      number: 'Enter a valid number.',\r\n      digits: 'Enter a valid number.',\r\n      ipv4: 'Enter a valid IPv4 address.',\r\n      ipv6: 'Enter a valid IPv6 address.',\r\n      password: 'Invalid password.'\r\n    },\r\n    message: {\r\n      rangeSize: 'Must be {0} to {1} characters long.',\r\n      minCharType: 'Must contain at least {0} of the following character types: ' +\r\n                  'letters, digits, and special characters ( `~!@#$%^&*()-_=+\\\\|[{}];:\\'\\\",<.>/? and spaces). ',\r\n      notEqualPosRev: 'Cannot be the username or the username spelled backwards.'\r\n    },\r\n    passwordStrength: {\r\n      securityText: 'Password Strength:',\r\n      levelDecArr: ['Weak', 'Medium', 'Strong']\r\n    }\r\n  },\r\n  tiPagination: {\r\n    gotoLabel: 'Go',\r\n    prevTitle: 'Previous',\r\n    nextTitle: 'Next',\r\n    totalLabel: 'Total Records: '\r\n  },\r\n  // message控件词条\r\n  tiMessage: {\r\n    prompt: 'Information',\r\n    warn: 'Warning',\r\n    confirm: 'Confirm',\r\n    error: 'Error',\r\n    ok: 'OK',\r\n    cancel: 'Cancel'\r\n  },\r\n  tiUpload: {\r\n    addFile: 'Select File', // upload_add_file_btn\r\n    error: 'Failed to upload the file.', // upload_error_info\r\n    successInfo: 'File uploaded successfully.', // upload_success_info\r\n    uploadingSingleInfo: 'Uploading', // upload_single_uploading_general_info\r\n    errorSingleInfo: 'Failed to upload the file.', // upload_single_error_general_info\r\n    addSuccessMutiInfo: 'You have added {0} files.', // upload_add_success_general_info\r\n    uploadingMutiInfo: 'Uploading: {0}', // upload_uploading_general_info\r\n    errorMultiInfo: 'Failed to upload {0} files.', // upload_error_general_info\r\n    clearAll: 'Clear All', // upload_remove_files\r\n    upload: 'Upload', // upload_file_btn\r\n    cancel: 'Cancel', // upload_cancel_files\r\n    reload: 'Upload Again', // upload_reload_files\r\n    autoUploadFilePlaceholder: 'Select a file to upload.',\r\n    autoUploadFilesPlaceholder: 'Select files to upload.',\r\n    notAutoUploadFilePlaceholder: 'Add a file and upload it.',\r\n    notAutoUploadFilesPlaceholder: 'Add files and upload them.'\r\n  },\r\n  tiDate: {\r\n    datePlaceholder: 'Select a date.',\r\n    datetimePlaceholder: 'Select a date and time.',\r\n    weekNamesAbb: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    weeknamesTitle: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n    monthNamesAbb: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n    btnSliderArr: ['1', '2', '3', '4', '5', '6', '7', '8', '9 months', '1 year', '2 years', '3 years'],\r\n    yearSuffixLabel: '',\r\n    rangeBeginLabel: 'Start Date',\r\n    rangeEndLabel: 'End Date',\r\n    selectTime: 'Select Time',\r\n    selectDate: 'Select Date',\r\n    hour: 'Hour',\r\n    minute: 'Minute',\r\n    second: 'Second'\r\n  },\r\n  tiSelect: {\r\n    search: 'Search',\r\n    selected: 'Selected'\r\n  },\r\n  tiTable: {\r\n    colsToggleTip: 'Customize Column'\r\n  },\r\n  tiList: {\r\n    selectAll: '(Select all)'\r\n  },\r\n  tiIntro: {\r\n    skip: 'Skip',\r\n    previous: 'Previous',\r\n    next: 'Next',\r\n    finish: 'Finish'\r\n  },\r\n  tiPopconfirm: {\r\n    yesLabel: 'Yes',\r\n    noLabel: 'No'\r\n  },\r\n  tiTree: {\r\n    reload: 'Reload',\r\n    loadError: 'Loading failed. ',\r\n    newNode: 'New node '\r\n  }\r\n};\r\n","/* tslint:disable:file-name-casing */\r\nimport { TiLocaleWords } from '../TiLocaleWords';\r\n/**\r\n * @ignore\r\n * Tiny组件中使用的德语国际化词条\r\n */\r\nexport const de_DE: TiLocaleWords = {\r\n  tiLocaleKey: 'de-DE',\r\n  tiLocaleDate: {\r\n    date: 'dd.MM.yyyy',\r\n    time: 'HH:mm:ss'\r\n  },\r\n  tiCommon: {\r\n    okBtn: 'OK',\r\n    cancelBtn: 'Abbrechen'\r\n  },\r\n  tiActionmenu: {\r\n    more: 'Mehr',\r\n    operation: 'Betrieb'\r\n  },\r\n  tiValid: {\r\n    errorMsg: {\r\n      required: 'Die Eingabe muss erfolgen.',\r\n      maxLength: 'Die Länge der Eingabe kann {0} nicht überschreiten.',\r\n      minLength: 'Die Länge der Eingabe kann nicht kleiner als {0} sein.',\r\n      rangeSize: 'Die Länge der Eingabe muss zwischen {0} und {1} liegen.',\r\n      maxValue: 'Der Eingabewert kann {0} nicht überschreiten.',\r\n      minValue: 'Der Eingabewert kann nicht kleiner als {0} sein.',\r\n      rangeValue: 'Der Eingabewert muss im Bereich zwischen {0} und {1} liegen.',\r\n      regExp: 'Der Eingabewert ist ungültig.',\r\n      contains: 'The value must contain the following characters: {0}.',\r\n      notContains: 'Der Eingabewert kann keine unzulässigen Zeichen enthalten {0}.',\r\n      notScript: 'Der Eingabewert kann keinen Skript-Tag enthalten.',\r\n      equal: 'Der Eingabewert muss gleich {0} sein.',\r\n      notEqual: 'The value cannot be {0}.',\r\n      port: 'Die Portnummer ist eine ganze Zahl zwischen {0} und {1}.',\r\n      path: 'Der Eingabewert entspricht nicht den Anforderungen an das Pfadformat.',\r\n      email: 'Der Eingabewert ist keine gültige E-Mails-Adresse.',\r\n      date: '\"Der Eingabewert ist keine gültiges Datum.',\r\n      url: 'Der Eingabewert ist keine gültige URL.',\r\n      integer: 'Der Eingabewert ist keine gültige ganze Zahl.',\r\n      number: '\"Der Eingabewert ist keine gültige Zahl.',\r\n      digits: 'Der Eingabewert ist keine gültige Zahl.',\r\n      ipv4: 'Der Eingabewert ist keine gültige IPv4-Adresse.',\r\n      ipv6: 'Der Eingabewert ist keine gültige IPv6-Adresse.',\r\n      password: 'Invalid password.'\r\n    },\r\n    message: {\r\n      rangeSize: 'Must be {0} to {1} characters long.',\r\n      minCharType: 'Must contain at least {0} of the following character types: ' +\r\n                  'uppercase letters, lowercase letters, digits, and special characters ( `~!@#$%^&*()-_=+\\\\|[{}];:\\'\\\",<.>/? and spaces).',\r\n      notEqualPosRev: 'Cannot be the username or the username spelled backwards.'\r\n    },\r\n    passwordStrength: {\r\n      securityText: 'Password Strength:',\r\n      levelDecArr: ['Weak', 'Medium', 'Strong']\r\n    }\r\n  },\r\n  tiPagination: {\r\n    gotoLabel: 'Navigieren Sie',\r\n    prevTitle: 'Vorherige',\r\n    nextTitle: 'Weiter',\r\n    totalLabel: 'Gesamtzahl der Datensätze: '\r\n  },\r\n  tiMessage: {\r\n    prompt: 'Informationen',\r\n    warn: 'Warnung',\r\n    confirm: 'Bestätigen',\r\n    error: 'Fehler',\r\n    ok: 'OK',\r\n    cancel: 'Abbrechen'\r\n  },\r\n  tiUpload: {\r\n    addFile: 'Datei hinzufügen',\r\n    error: 'Failed to upload the file.',\r\n    successInfo: 'Hochladen.',\r\n    uploadingSingleInfo: 'Uploading',\r\n    errorSingleInfo: 'Failed to upload the file.',\r\n    addSuccessMutiInfo: 'You have added {0} files.',\r\n    uploadingMutiInfo: 'Uploading: {0}',\r\n    errorMultiInfo: 'Failed to upload {0} files.',\r\n    clearAll: 'Clear All',\r\n    upload: 'Upload',\r\n    cancel: 'Cancel',\r\n    reload: 'Upload Again',\r\n    autoUploadFilePlaceholder: 'Select a file to upload.',\r\n    autoUploadFilesPlaceholder: 'Select files to upload.',\r\n    notAutoUploadFilePlaceholder: 'Add a file and upload it.',\r\n    notAutoUploadFilesPlaceholder: 'Add files and upload them.'\r\n  },\r\n  tiDate: {\r\n    datePlaceholder: 'Select a date.',\r\n    datetimePlaceholder: 'Select a date and time.',\r\n    weekNamesAbb: ['Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa', 'So'],\r\n    weeknamesTitle: ['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag'],\r\n    monthNamesAbb: ['Jan', 'Feb', 'Mrz', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],\r\n    btnSliderArr: ['1', '2', '3', '4', '5', '6', '7', '8', '9 months', '1 year', '2 years', '3 years'],\r\n    yearSuffixLabel: '',\r\n    rangeBeginLabel: 'Start Date',\r\n    rangeEndLabel: 'End Date',\r\n    selectTime: 'Select Time',\r\n    selectDate: 'Select Date',\r\n    hour: 'Hour',\r\n    minute: 'Minute',\r\n    second: 'Second'\r\n  },\r\n  tiSelect: {\r\n    search: 'Search',\r\n    selected: 'Selected'\r\n  },\r\n  tiTable: {\r\n    colsToggleTip: 'Customize Column'\r\n  },\r\n  tiList: {\r\n    selectAll: '(Alle auswählen)'\r\n  },\r\n  tiIntro: {\r\n    skip: 'Skip',\r\n    previous: 'Previous',\r\n    next: 'Next',\r\n    finish: 'Try Now'\r\n  },\r\n  tiPopconfirm: {\r\n    yesLabel: 'Yes',\r\n    noLabel: 'No'\r\n  },\r\n  tiTree: {\r\n    reload: 'Reload',\r\n    loadError: 'Loading failed. ',\r\n    newNode: 'New node '\r\n  }\r\n};\r\n","/* tslint:disable:file-name-casing */\r\nimport { TiLocaleWords } from '../TiLocaleWords';\r\n/**\r\n * @ignore\r\n * Tiny组件中使用的欧洲西语国际化词条\r\n */\r\nexport const es_ES: TiLocaleWords = {\r\n  tiLocaleKey: 'es-ES',\r\n  tiLocaleDate: {\r\n    date: 'dd/MM/yyyy',\r\n    time: 'HH:mm:ss'\r\n  },\r\n  tiCommon: {\r\n    okBtn: 'Aceptar',\r\n    cancelBtn: 'Cancelar'\r\n  },\r\n  tiActionmenu: {\r\n    more: 'Más',\r\n    operation: 'Operar'\r\n  },\r\n  tiValid: {\r\n    errorMsg: {\r\n      required: 'Este campo es obligatorio.',\r\n      maxLength: 'Introduzca {0} caracteres como máximo.',\r\n      minLength: 'Introduzca {0} caracteres como mínimo.',\r\n      rangeSize: 'Introduzca entre {0} y {1} caracteres.',\r\n      maxValue: 'Introduzca un valor inferior o igual a {0}.',\r\n      minValue: 'Introduzca un valor superior o igual a {0}.',\r\n      rangeValue: 'Introduzca un valor entre {0} y {1}.',\r\n      regExp: 'Valor no válido.',\r\n      contains: 'El valor debe contener los siguientes caracteres: {0}.',\r\n      notContains: 'El valor no puede contener los siguientes caracteres no válidos: {0}.',\r\n      notScript: 'El valor no puede contener etiquetas de scripts.',\r\n      equal: 'El valor debe ser {0}',\r\n      notEqual: 'El valor no puede ser {0}.',\r\n      port: 'Introduzca un número entero entre {0} y {1}.',\r\n      path: 'Introduzca una ruta de fichero válida.',\r\n      email: 'Introduzca una dirección de correo electrónico válida.',\r\n      date: 'Introduzca una fecha válida.',\r\n      url: 'Introduzca un URL válido.',\r\n      integer: 'Introduzca un número entero válido.',\r\n      number: 'Introduzca un número válido.',\r\n      digits: 'Introduzca un número válido.',\r\n      ipv4: 'Introduzca una dirección IPv4 válida.',\r\n      ipv6: 'Introduzca una dirección IPv6 válida.',\r\n      password: 'Contraseña no válida.'\r\n    },\r\n    message: {\r\n      rangeSize: 'Debe contener entre {0} y {1} caracteres.',\r\n      minCharType: 'Debe contener al menos {0} de los siguientes tipos de caracteres: ' +\r\n            'letras, dígitos y caracteres especiales ( `~!@#$%^&*()-_=+\\\\|[{}];:\\'\\\",<.>/?  o espacios). ',\r\n      notEqualPosRev: 'No puede ser el nombre de usuario ni el nombre de usuario escrito al revés.'\r\n    },\r\n    passwordStrength: {\r\n      securityText: 'Nivel de seguridad:',\r\n      levelDecArr: ['Bajo', 'Medio', 'Alto']\r\n    }\r\n  },\r\n  tiPagination: {\r\n    gotoLabel: 'Ir',\r\n    prevTitle: 'Anterior',\r\n    nextTitle: 'Siguiente',\r\n    totalLabel: 'Cantidad total de registros: '\r\n  },\r\n  tiMessage: {\r\n    prompt: 'Información',\r\n    warn: 'Advertencia',\r\n    confirm: 'Confirmar',\r\n    error: 'Error',\r\n    ok: 'Aceptar',\r\n    cancel: 'Cancelar'\r\n  },\r\n  tiUpload: {\r\n    addFile: 'Seleccionar fichero',\r\n    error: 'Error al cargar el fichero.',\r\n    successInfo: 'Se ha cargado el fichero.',\r\n    uploadingSingleInfo: 'Cargando',\r\n    errorSingleInfo: 'Error al cargar el fichero.',\r\n    addSuccessMutiInfo: 'Se han agregado {0} ficheros.',\r\n    uploadingMutiInfo: 'Cargando: {0}',\r\n    errorMultiInfo: 'Error al cargar {0} ficheros.',\r\n    clearAll: 'Eliminar todo',\r\n    upload: 'Cargar',\r\n    cancel: 'Cancelar',\r\n    reload: 'Volver a cargar',\r\n    autoUploadFilePlaceholder: 'Seleccione un fichero para cargar.',\r\n    autoUploadFilesPlaceholder: 'Seleccione ficheros para cargar.',\r\n    notAutoUploadFilePlaceholder: 'Añada un fichero y cárguelo.',\r\n    notAutoUploadFilesPlaceholder: 'Añada ficheros y cárguelos.'\r\n  },\r\n  tiDate: {\r\n    datePlaceholder: 'Seleccione una fecha.',\r\n    datetimePlaceholder: 'Seleccione una fecha y hora.',\r\n    weekNamesAbb: ['Do.', 'Lu.', 'Ma.', 'Mi.', 'Ju.', 'Vi.', 'Sá.'],\r\n    weeknamesTitle: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],\r\n    monthNamesAbb: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n    btnSliderArr: ['1', '2', '3', '4', '5', '6', '7', '8', '9 meses', '1 año', '2 años', '3 años'],\r\n    yearSuffixLabel: '',\r\n    rangeBeginLabel: 'Inicio',\r\n    rangeEndLabel: 'Fin',\r\n    selectTime: 'Seleccionar hora',\r\n    selectDate: 'Seleccionar fecha',\r\n    hour: 'Hora',\r\n    minute: 'Minuto',\r\n    second: 'Segundo'\r\n  },\r\n  tiSelect: {\r\n    search: 'Buscar',\r\n    selected: 'Seleccionados'\r\n  },\r\n  tiTable: {\r\n    colsToggleTip: 'Personalizar columna'\r\n  },\r\n  tiList: {\r\n    selectAll: '(Seleccionar todo)'\r\n  },\r\n  tiIntro: {\r\n    skip: 'Omitir',\r\n    previous: 'Anterior',\r\n    next: 'Siguiente',\r\n    finish: 'Finalizar'\r\n  },\r\n  tiPopconfirm: {\r\n    yesLabel: 'Sí',\r\n    noLabel: 'No'\r\n  },\r\n  tiTree: {\r\n    reload: 'Volver a cargar',\r\n    loadError: 'Error al cargar. ',\r\n    newNode: 'Nodo nuevo '\r\n  }\r\n};\r\n","/* tslint:disable:file-name-casing */\r\nimport { TiLocaleWords } from '../TiLocaleWords';\r\n/**\r\n * @ignore\r\n * Tiny组件中使用的拉美西语国际化词条\r\n */\r\nexport const es_US: TiLocaleWords = {\r\n  tiLocaleKey: 'es-US',\r\n  tiLocaleDate: {\r\n    date: 'dd/MM/yyyy',\r\n    time: 'HH:mm:ss'\r\n  },\r\n  tiCommon: {\r\n    okBtn: 'Aceptar',\r\n    cancelBtn: 'Cancelar'\r\n  },\r\n  tiActionmenu: {\r\n    more: 'Más',\r\n    operation: 'Operación'\r\n  },\r\n  tiValid: {\r\n    errorMsg: {\r\n      required: 'Este campo es obligatorio.',\r\n      maxLength: 'Ingrese {0} caracteres como máximo.',\r\n      minLength: 'Ingrese {0} caracteres como mínimo.',\r\n      rangeSize: 'Ingrese entre {0} y {1} caracteres.',\r\n      maxValue: 'Ingrese un valor inferior o igual a {0}.',\r\n      minValue: 'Ingrese un valor superior o igual a {0}.',\r\n      rangeValue: 'Ingrese un valor entre {0} y {1}.',\r\n      regExp: 'Valor no válido.',\r\n      contains: 'El valor debe contener los siguientes caracteres: {0}.',\r\n      notContains: 'El valor no puede contener los siguientes caracteres no válidos: {0}.',\r\n      notScript: 'El valor no puede contener etiquetas de scripts.',\r\n      equal: 'El valor debe ser {0}',\r\n      notEqual: 'El valor no puede ser {0}.',\r\n      port: 'Ingrese un número entero entre {0} y {1}.',\r\n      path: 'Ingrese una ruta de archivo válida.',\r\n      email: 'Ingrese una dirección de correo electrónico válida.',\r\n      date: 'Ingrese una fecha válida.',\r\n      url: 'Ingrese un URL válido.',\r\n      integer: 'Ingrese un número entero válido.',\r\n      number: 'Ingrese un número válido.',\r\n      digits: 'Ingrese un número válido.',\r\n      ipv4: 'Ingrese una dirección IPv4 válida.',\r\n      ipv6: 'Ingrese una dirección IPv6 válida.',\r\n      password: 'Contraseña no válida.'\r\n    },\r\n    message: {\r\n      rangeSize: 'Debe contener entre {0} y {1} caracteres.',\r\n      minCharType: 'Debe contener al menos {0} de los siguientes tipos de caracteres: ' +\r\n            'letras, dígitos y caracteres especiales ( `~!@#$%^&*()-_=+\\\\|[{}];:\\'\\\",<.>/?  o espacios). ',\r\n      notEqualPosRev: 'No puede ser el nombre de usuario ni el nombre de usuario escrito al revés.'\r\n    },\r\n    passwordStrength: {\r\n      securityText: 'Nivel de seguridad:',\r\n      levelDecArr: ['Bajo', 'Medio', 'Alto']\r\n    }\r\n  },\r\n  tiPagination: {\r\n    gotoLabel: 'Ir',\r\n    prevTitle: 'Anterior',\r\n    nextTitle: 'Siguiente',\r\n    totalLabel: 'Cantidad total de registros: '\r\n  },\r\n  tiMessage: {\r\n    prompt: 'Información',\r\n    warn: 'Advertencia',\r\n    confirm: 'Confirmar',\r\n    error: 'Error',\r\n    ok: 'Aceptar',\r\n    cancel: 'Cancelar'\r\n  },\r\n  tiUpload: {\r\n    addFile: 'Seleccionar archivo',\r\n    error: 'Error al cargar el archivo.',\r\n    successInfo: 'Se cargó el archivo.',\r\n    uploadingSingleInfo: 'Cargando',\r\n    errorSingleInfo: 'Error al cargar el archivo.',\r\n    addSuccessMutiInfo: 'Se agregaron {0} archivos.',\r\n    uploadingMutiInfo: 'Cargando: {0}',\r\n    errorMultiInfo: 'Error al cargar {0} archivos.',\r\n    clearAll: 'Eliminar todo',\r\n    upload: 'Cargar',\r\n    cancel: 'Cancelar',\r\n    reload: 'Volver a cargar',\r\n    autoUploadFilePlaceholder: 'Seleccione un archivo para cargar.',\r\n    autoUploadFilesPlaceholder: 'Seleccione archivos para cargar.',\r\n    notAutoUploadFilePlaceholder: 'Agregue un archivo y cárguelo.',\r\n    notAutoUploadFilesPlaceholder: 'Agregue archivos y cárguelos.'\r\n  },\r\n  tiDate: {\r\n    datePlaceholder: 'Seleccione una fecha.',\r\n    datetimePlaceholder: 'Seleccione una fecha y hora.',\r\n    weekNamesAbb: ['Do.', 'Lu.', 'Ma.', 'Mi.', 'Ju.', 'Vi.', 'Sá.'],\r\n    weeknamesTitle: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],\r\n    monthNamesAbb: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n    btnSliderArr: ['1', '2', '3', '4', '5', '6', '7', '8', '9 meses', '1 año', '2 años', '3 años'],\r\n    yearSuffixLabel: '',\r\n    rangeBeginLabel: 'Inicio',\r\n    rangeEndLabel: 'Fin',\r\n    selectTime: 'Seleccionar hora',\r\n    selectDate: 'Seleccionar fecha',\r\n    hour: 'Hora',\r\n    minute: 'Minuto',\r\n    second: 'Segundo'\r\n  },\r\n  tiSelect: {\r\n    search: 'Buscar',\r\n    selected: 'Seleccionados'\r\n  },\r\n  tiTable: {\r\n    colsToggleTip: 'Personalizar columna'\r\n  },\r\n  tiList: {\r\n    selectAll: '(Seleccionar todo)'\r\n  },\r\n  tiIntro: {\r\n    skip: 'Omitir',\r\n    previous: 'Anterior',\r\n    next: 'Siguiente',\r\n    finish: 'Finalizar'\r\n  },\r\n  tiPopconfirm: {\r\n    yesLabel: 'Sí',\r\n    noLabel: 'No'\r\n  },\r\n  tiTree: {\r\n    reload: 'Volver a cargar',\r\n    loadError: 'Error al cargar. ',\r\n    newNode: 'Nodo nuevo '\r\n  }\r\n};\r\n","/* tslint:disable:file-name-casing */\r\nimport { TiLocaleWords } from '../TiLocaleWords';\r\n/**\r\n * @ignore\r\n * Tiny组件中使用的法语国际化词条\r\n */\r\nexport const fr_FR: TiLocaleWords = {\r\n  tiLocaleKey: 'fr-FR',\r\n  tiLocaleDate: {\r\n    date: 'dd/MM/yyyy',\r\n    time: 'HH:mm:ss'\r\n  },\r\n  tiCommon: {\r\n    okBtn: 'OK',\r\n    cancelBtn: 'Annuler'\r\n  },\r\n  tiActionmenu: {\r\n    more: 'Plus',\r\n    operation: 'Opérer'\r\n  },\r\n  tiValid: {\r\n    errorMsg: {\r\n      required: 'Ce champs ne peut pas être vide.',\r\n      maxLength: 'Saisissez un maximum de {0} caractères.',\r\n      minLength: 'Saisissez au moins {0} caractères.',\r\n      rangeSize: 'Saisissez les caractères {0} à {1}.',\r\n      maxValue: 'Saisissez une valeur inférieure ou égale à {0}.',\r\n      minValue: 'Saisissez une valeur supérieure ou égale à {0}.',\r\n      rangeValue: 'Saisissez une valeur comprise entre {0} et {1}.',\r\n      regExp: 'Valeur non valable.',\r\n      contains: 'La valeur doit contenir les caractères suivants : {0}.',\r\n      notContains: 'La valeur ne peut pas contenir les caractères non valables suivants : {0}.',\r\n      notScript: 'La valeur ne peut pas contenir de script tags.',\r\n      equal: 'La valeur d\\'entrée doit être égale à {0}.',\r\n      notEqual: 'La valeur ne peut pas être {0}',\r\n      port: 'Le numéro de port est un nombre entier allant de {0} à {1}.',\r\n      path: 'Entrez un chemin de fichier valide.',\r\n      email: 'Entrez une adresse électronique valide.',\r\n      date: 'Saisissez une date valide.',\r\n      url: 'Saisissez une URL valide.',\r\n      integer: 'Saisissez un nombre entier valide.',\r\n      number: 'Saisissez un nombre valide.',\r\n      digits: 'Saisissez un nombre valide.',\r\n      ipv4: 'Saisissez une adresse IPv4 valide.',\r\n      ipv6: 'Saisissez une adresse IPv6 valide.',\r\n      password: 'Mot de passe non valide.'\r\n    },\r\n    message: {\r\n      rangeSize: 'Doit comporter de {0} à {1} caractères.',\r\n      minCharType: 'Doit contenir au moins {0} des types de caractères suivants: ' +\r\n            'lettres, chiffres et caractères spéciaux ( `~!@#$%^&*()-_=+\\|[{}];:\\'\\\",<.>/ ? et espaces). ',\r\n      notEqualPosRev: 'Il ne peut s\\'agir du nom d\\'utilisateur ou du nom d\\'utilisateur orthographié à l\\'envers.'\r\n    },\r\n    passwordStrength: {\r\n      securityText: 'Force du mot de passe :',\r\n      levelDecArr: ['Faible', 'Moyen', 'Fort']\r\n    }\r\n  },\r\n  tiPagination: {\r\n    gotoLabel: 'Aller',\r\n    prevTitle: 'Précédent',\r\n    nextTitle: 'Prochain',\r\n    totalLabel: 'Total des enregistrements: '\r\n  },\r\n  tiMessage: {\r\n    prompt: 'Information',\r\n    warn: 'Attention',\r\n    confirm: 'Confirmer',\r\n    error: 'Erreur',\r\n    ok: 'OK',\r\n    cancel: 'Annuler'\r\n  },\r\n  tiUpload: {\r\n    addFile: 'Ajouter le fichier',\r\n    error: 'Échec à télécharger le fichier.',\r\n    successInfo: 'Etape réalisée avec succès.',\r\n    uploadingSingleInfo: 'Téléchargement',\r\n    errorSingleInfo: 'Échec à télécharger le fichier.',\r\n    addSuccessMutiInfo: 'Vous avez ajouté {0} fichiers.',\r\n    uploadingMutiInfo: 'Téléchargement : {0}',\r\n    errorMultiInfo: 'Echec à télécharger {0} fichiers.',\r\n    clearAll: 'Tout effacer',\r\n    upload: 'Télécharger',\r\n    cancel: 'Annuler',\r\n    reload: 'Télécharger à nouveau',\r\n    autoUploadFilePlaceholder: 'Sélectionnez un fichier à télécharger.',\r\n    autoUploadFilesPlaceholder: 'Sélectionnez les fichiers à télécharger.',\r\n    notAutoUploadFilePlaceholder: 'Ajoutez un fichier et le télécharger.',\r\n    notAutoUploadFilesPlaceholder: 'Ajoutez des fichiers et les télécharger.'\r\n  },\r\n  tiDate: {\r\n    datePlaceholder: 'Sélectionnez une date.',\r\n    datetimePlaceholder: 'Sélectionnez une date et une heure.',\r\n    weekNamesAbb: ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'],\r\n    weeknamesTitle: ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'],\r\n    monthNamesAbb: ['Jan', 'Feb', 'Mar', 'Avr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n    btnSliderArr: ['1', '2', '3', '4', '5', '6', '7', '8', '9 mois', '1 an', '2 ans', '3 ans'],\r\n    yearSuffixLabel: '',\r\n    rangeBeginLabel: 'Date de début',\r\n    rangeEndLabel: 'Date de fin',\r\n    selectTime: `Sélectionner l'heure`,\r\n    selectDate: 'Sélectionner la date',\r\n    hour: 'Heure',\r\n    minute: 'Minute',\r\n    second: 'Second'\r\n  },\r\n  tiSelect: {\r\n    search: 'Recherchez',\r\n    selected: 'Sélectionné'\r\n  },\r\n  tiTable: {\r\n    colsToggleTip: 'Personnaliser la colonne'\r\n  },\r\n  tiList: {\r\n    selectAll: '(Sélectionner tout)'\r\n  },\r\n  tiIntro: {\r\n    skip: 'Sauter',\r\n    previous: 'Précédent',\r\n    next: 'Suivant',\r\n    finish: 'Terminer'\r\n  },\r\n  tiPopconfirm: {\r\n    yesLabel: 'Oui',\r\n    noLabel: 'Non'\r\n  },\r\n  tiTree: {\r\n    reload: 'Recharger',\r\n    loadError: 'Le chargement a échoué. ',\r\n    newNode: 'Nouveau nœud '\r\n  }\r\n};\r\n","/* tslint:disable:file-name-casing */\r\nimport { TiLocaleWords } from '../TiLocaleWords';\r\n/**\r\n * @ignore\r\n * Tiny组件中使用的葡语国际化词条\r\n */\r\nexport const pt_BR: TiLocaleWords = {\r\n  tiLocaleKey: 'pt-BR',\r\n  tiLocaleDate: {\r\n    date: 'dd/MM/yyyy',\r\n    time: 'HH:mm:ss'\r\n  },\r\n  tiCommon: {\r\n    okBtn: 'OK',\r\n    cancelBtn: 'Cancelar'\r\n  },\r\n  tiActionmenu: {\r\n    more: 'Mais',\r\n    operation: 'Operação'\r\n  },\r\n  tiValid: {\r\n    errorMsg: {\r\n      required: 'Este campo não pode ser deixado em branco.',\r\n      maxLength: 'Insira um máximo de {0} caracteres.',\r\n      minLength: 'Insira pelo menos {0} caracteres.',\r\n      rangeSize: 'Insira de {0} a {1} caracteres.',\r\n      maxValue: 'Insira um valor inferior ou igual a {0}.',\r\n      minValue: 'Insira um valor superior ou igual a {0}.',\r\n      rangeValue: 'Insira um valor de {0} a {1}.',\r\n      regExp: 'Valor inválido.',\r\n      contains: 'O valor deve conter os caracteres a seguir: {0}.',\r\n      notContains: 'O valor não pode conter os caracteres a seguir: {0}.',\r\n      notScript: 'O valor não pode conter tags de scripts.',\r\n      equal: 'O valor deve ser {0}.',\r\n      notEqual: 'O valor não pode ser {0}.',\r\n      port: 'Insira um número inteiro de {0} a {1}.',\r\n      path: 'Insira um caminho de arquivo válido.',\r\n      email: 'Insira um endereço de e-mail válido.',\r\n      date: 'Insira uma data válida.',\r\n      url: 'Insira uma URL válida.',\r\n      integer: 'Insira um número inteiro válido.',\r\n      number: 'Insira um número válido.',\r\n      digits: 'Insira um número válido.',\r\n      ipv4: 'Insira um endereço IPv4 válido.',\r\n      ipv6: 'Insira um endereço IPv6 válido.',\r\n      password: 'Senha inválida.'\r\n    },\r\n    message: {\r\n      rangeSize: 'Deve ter de {0} a {1} caracteres.',\r\n      minCharType: 'Deve conter pelo menos {0} dos seguintes tipos de caracteres: ' +\r\n      'letras, dígitos e caracteres especiais ( `~!@#$%^&*()-_=+\\\\|[{}];:\\'\\\",<.>/? e espaços). ',\r\n      notEqualPosRev: 'Não pode ser o nome de usuário escrito normalmente ou de trás para frente.'\r\n    },\r\n    passwordStrength: {\r\n      securityText: 'Força da senha:',\r\n      levelDecArr: ['Fraca', 'Média', 'Forte']\r\n    }\r\n  },\r\n  tiPagination: {\r\n    gotoLabel: 'Ir',\r\n    prevTitle: 'Anterior',\r\n    nextTitle: 'Próximo',\r\n    totalLabel: 'Total de registros: '\r\n  },\r\n  tiMessage: {\r\n    prompt: 'Informação',\r\n    warn: 'Aviso',\r\n    confirm: 'Confirmar',\r\n    error: 'Erro',\r\n    ok: 'OK',\r\n    cancel: 'Cancelar'\r\n  },\r\n  tiUpload: {\r\n    addFile: 'Selecionar arquivo',\r\n    error: 'Não foi possível carregar o arquivo.',\r\n    successInfo: 'Arquivo carregado com sucesso.',\r\n    uploadingSingleInfo: 'Carregando',\r\n    errorSingleInfo: 'Não foi possível carregar o arquivo.',\r\n    addSuccessMutiInfo: 'Você adicionou {0} arquivos.',\r\n    uploadingMutiInfo: 'Carregando: {0}',\r\n    errorMultiInfo: 'Não foi possível carregar {0} arquivos.',\r\n    clearAll: 'Limpar tudo',\r\n    upload: 'Carregar',\r\n    cancel: 'Cancelar',\r\n    reload: 'Carregar novamente',\r\n    autoUploadFilePlaceholder: 'Selecione um arquivo para ser carregado.',\r\n    autoUploadFilesPlaceholder: 'Selecione arquivos para serem carregados.',\r\n    notAutoUploadFilePlaceholder: 'Adicione um arquivo e carregue-o.',\r\n    notAutoUploadFilesPlaceholder: 'Adicione arquivos e carregue-os.'\r\n  },\r\n  tiDate: {\r\n    datePlaceholder: 'Selecione uma data.',\r\n    datetimePlaceholder: 'Selecione uma data e um horário.',\r\n    weekNamesAbb: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'],\r\n    weeknamesTitle: ['Domingo', 'Segunda-feira', 'Terça-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'Sábado'],\r\n    monthNamesAbb: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],\r\n    btnSliderArr: ['1', '2', '3', '4', '5', '6', '7', '8', '9 meses', '1 ano', '2 anos', '3 anos'],\r\n    yearSuffixLabel: '',\r\n    rangeBeginLabel: 'Data de início',\r\n    rangeEndLabel: 'Data de término',\r\n    selectTime: 'Selecionar horário',\r\n    selectDate: 'Selecionar data',\r\n    hour: 'Hora',\r\n    minute: 'Minuto',\r\n    second: 'Segundo'\r\n  },\r\n  tiSelect: {\r\n    search: 'Pesquisar',\r\n    selected: 'Selecionados:'\r\n  },\r\n  tiTable: {\r\n    colsToggleTip: 'Personalizar coluna'\r\n  },\r\n  tiList: {\r\n    selectAll: '(Selecionar tudo)'\r\n  },\r\n  tiIntro: {\r\n    skip: 'Pular',\r\n    previous: 'Anterior',\r\n    next: 'Próximo',\r\n    finish: 'Finalizar'\r\n  },\r\n  tiPopconfirm: {\r\n    yesLabel: 'Sim',\r\n    noLabel: 'Não'\r\n  },\r\n  tiTree: {\r\n    reload: 'Recarregar',\r\n    loadError: 'Erro no carregamento. ',\r\n    newNode: 'Novo nó '\r\n  }\r\n};\r\n","import { zh_CN } from './i18n/zh_CN';\r\nimport { en_US } from './i18n/en_US';\r\nimport { de_DE } from './i18n/de_DE';\r\nimport { es_ES } from './i18n/es_ES';\r\nimport { es_US } from './i18n/es_US';\r\nimport { fr_FR } from './i18n/fr_FR';\r\nimport { pt_BR } from './i18n/pt_BR';\r\nimport { Util } from '../utils/Util';\r\n\r\ndeclare let global: any;\r\n\r\n/**\r\n * Tiny组件中使用的国际化词条配置方法类\r\n *\r\n * 可通过在启动模块中通过配置具体的国际化语种的方式设置组件的国际化，使用方式如下：\r\n *\r\n *\r\n *      import {TiLocale} from '@cloud/tiny3';\r\n *\r\n *      export class AppModule {\r\n *\r\n *          constructor() {\r\n *              TiLocale.setLocale(TiLocale.EN_US);\r\n *          }\r\n *      }\r\n *\r\n * <h3>示例</h3>\r\n * <iframe src=\"../tiny3demo/#/locale/locale-basic\" frameborder='0' width=\"100%\" onload=\"this.height = document.documentElement.clientHeight\"></iframe>\r\n */\r\nexport class TiLocale {\r\n    /**\r\n     * 英文语种关键字，关键字均使用中划线形式命名，确保和浏览器保持一致\r\n     */\r\n    public static readonly EN_US: string = 'en-US';\r\n    /**\r\n     * 语种关键字\r\n     */\r\n    public static readonly ZH_CN: string = 'zh-CN';\r\n    /**\r\n     * 语种关键字\r\n     */\r\n    public static readonly DE_DE: string = 'de-DE';\r\n    /**\r\n     * 语种关键字\r\n     */\r\n    public static readonly ES_ES: string = 'es-ES';\r\n    /**\r\n     * 语种关键字\r\n     */\r\n    public static readonly ES_US: string = 'es-US';\r\n    /**\r\n     * 语种关键字\r\n     */\r\n    public static readonly FR_FR: string = 'fr-FR';\r\n    /**\r\n     * 语种关键字\r\n     */\r\n    public static readonly PT_BR: string = 'pt-BR';\r\n\r\n    // private static localeKey: string = TiLocale.ZH_CN; // 语种关键字\r\n\r\n    /**\r\n     * Typescript没有静态代码段，所以这样代替静态代码段\r\n     */\r\n    protected static staticCode: void = TiLocale.initWordsAndLocale();\r\n    /**\r\n     * 静态代码段执行：如过word和locale未初始化，那么执行初始化。\r\n     */\r\n    private static initWordsAndLocale(): void {\r\n        if (!TiLocale.getWords()) {\r\n            // 默认所有语言都打包进来\r\n            TiLocale.setWords({\r\n                'zh-CN': zh_CN,\r\n                'en-US': en_US,\r\n                'de-DE': de_DE,\r\n                'es-ES': es_ES,\r\n                'es-US': es_US,\r\n                'fr-FR': fr_FR,\r\n                'pt-BR': pt_BR\r\n            });\r\n        }\r\n        if (!TiLocale.getLocale()) {\r\n            TiLocale.setLocale(TiLocale.ZH_CN);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets words\r\n     * @param Words 全量的语言包，由语言名称：语言词条包组成。\r\n     *\r\n     * @returns words\r\n     */\r\n    public static setWords(words: any): void {\r\n        // 设计缺陷：如果tiWords放在类成员变量上，会更好。window在SSR环境找不到。\r\n        if (typeof window !== 'undefined') {\r\n            (window as any).tiWords = words;\r\n        } else if(typeof global !== 'undefined'){\r\n            (global as any).tiWords = words;\r\n        }   \r\n    }\r\n    public static getWords(): any {\r\n        if (typeof window !== 'undefined') {\r\n            return (window as any).tiWords;\r\n        } else if(typeof global !== 'undefined'){\r\n            return (global as any).tiWords;\r\n        }     \r\n    }\r\n    /**\r\n     * 设置组件国际化语种\r\n     * @param locale 国际化字符，可通过TiLocale.ZH_CN/TiLocale.EN_US等语种关键字设置参数\r\n     */\r\n    public static setLocale(locale: string): void {\r\n        if (typeof window !== 'undefined') {\r\n            (window as any).tiLocale = locale;\r\n        } else if(typeof global !== 'undefined'){\r\n            (global as any).tiLocale = locale;\r\n        }    \r\n    }\r\n    private static getLocale(): string {\r\n        if (typeof window !== 'undefined') {\r\n            return (window as any).tiLocale;\r\n        } else if(typeof global !== 'undefined'){\r\n            return (global as any).tiLocale;\r\n        }   \r\n    }\r\n\r\n    /**\r\n     * 设置组件国际化语种\r\n     * @param localeKey 国际化字符，可通过TiLocale.ZH_CN/TiLocale.EN_US等语种关键字设置参数\r\n     */\r\n\r\n    /**\r\n     * @ignore\r\n     * 获取当前语言下，组件国际化语种对应的词条集合\r\n     */\r\n    public static getLocaleWords(): any {\r\n        return TiLocale.getWords()[TiLocale.getLocale()];\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 获取单个词条的国际化文本/对象\r\n     * 参数：\r\n     */\r\n    public static translate(keyValue: string, params?: Array<any>): any {\r\n        const keyArr: Array<string> = keyValue.split('.');\r\n        let value: any = TiLocale.getLocaleWords();\r\n        keyArr.forEach((key: string) => {\r\n            value = value[key];\r\n        });\r\n\r\n        return Util.formatEntry(value, params);\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { TiLocale } from './TiLocale';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@Pipe({\r\n  name: 'tiTranslate'\r\n})\r\nexport class TiTranslatePipe implements PipeTransform {\r\n  transform(keyValue: string, params?: Array<any>): string {\r\n    return TiLocale.translate(keyValue, params);\r\n  }\r\n}\r\n","/**\r\n * @ignore\r\n *\r\n * 只供内部使用，外部使用tinyplus3提供的国际化方法\r\n *\r\n * 该类提供一个方法集，用于数字、时间日期的国际化处理\r\n * 其中 tiny提供的数字、时间日期和货币的国际化处理方法，用于屏蔽angular方法需要传入format/localeId的复杂处理\r\n *\r\n * <h3>示例</h3>\r\n * <iframe src=\"../tiny3demo/#/locale/locale-format\" frameborder='0' width=\"100%\" onload=\"this.height = document.documentElement.clientHeight\"></iframe>\r\n */\r\nimport { formatDate, formatNumber, getLocaleCurrencySymbol,\r\n    getLocaleId, getLocaleNumberSymbol, NumberSymbol } from '@angular/common';\r\nimport { TiLocale } from './TiLocale';\r\nexport class TiLocaleFormat {\r\n    private static readonly TIME_FORMAT: string = 'mediumTime'; // 'h:mm:ss a' (e.g. 9:03:01 AM)\r\n    private static readonly DATE_FORMAT: string = 'mediumDate'; // 'MMM d, y' (e.g. Jun 15, 2015).\r\n    private static readonly DATETIME_FORMAT: string = 'medium'; // 'MMM d, y, h:mm:ss a' (e.g. Jun 15, 2015, 9:03:01 AM)\r\n    private static readonly DEFAULT_LOCALE: string = 'en';\r\n    /**\r\n     * 获取语种关键字，默认为'en'\r\n     * @return 语种关键字\r\n     */\r\n    private static getLocaleKey(): string {\r\n        let locale: string = TiLocale.getLocaleWords().tiLocaleKey;\r\n        try {// local信息未注册情况下，getLocaleId该方法会报错，因此使用try catch的方式\r\n            getLocaleId(TiLocale.getLocaleWords().tiLocaleKey);\r\n        } catch (error) {\r\n            locale = TiLocaleFormat.DEFAULT_LOCALE;\r\n        }\r\n\r\n        return locale;\r\n    }\r\n    /**\r\n     * @description 对国际化数字进行处理(包含小数点)\r\n     * @param: number 国际化数字\r\n     * @param: isIntegerValid 只针对integer的情况\r\n     * @return 返回数字信息\r\n     */\r\n    private static parseNumWithDecimal(number: string, isIntegerValid?: boolean): any {\r\n        const groupSep: string = TiLocaleFormat.getNumberSymbol('Group');\r\n        const decimalSep: string = TiLocaleFormat.getNumberSymbol('Decimal');\r\n        /* tslint:disable:prefer-template */\r\n        const numberReg: RegExp =\r\n            new RegExp('^(?:-?\\\\d*|-?\\\\d(?:\\\\' + groupSep + '?\\\\d*)+)?(?:\\\\' + decimalSep + '\\\\d*)?$');\r\n        // const numberFormat = number.toString();\r\n        const numberFormat: string = number;\r\n\r\n        if (!numberReg.test(numberFormat)) {\r\n            return NaN;\r\n        }\r\n        const groupReg: RegExp = new RegExp('\\\\' + groupSep, 'g');\r\n        const decimalReg: RegExp = new RegExp('\\\\' + decimalSep, 'g');\r\n        const numberFormatString: string = numberFormat.replace(groupReg, '')\r\n            .replace(decimalReg, '.');\r\n        const numberFloat: number = parseFloat(numberFormatString);\r\n        /*\r\n        * *只针对integer的情况\r\n        * 截取转换前的小数位字符串numFormatSlice\r\n        * 转换前的小数位字符串长度numFormatCount\r\n        * 转换后的小数位为0,就添加小数位个数的0，返回值是string类型\r\n        * */\r\n\r\n        if (isIntegerValid && (numberFormatString.indexOf('.') !== -1)) {\r\n            return numberFormatString;\r\n        }\r\n\r\n        return numberFloat;\r\n    }\r\n    /**\r\n     * 获取数字规则信息\r\n     * key 规则关键字\r\n     */\r\n    public static getNumberSymbol(key: string): string {\r\n        const standardNumber: number = 10000.0;\r\n        const localeNumber: string = TiLocaleFormat.formatNumber(standardNumber, '1.1-1');\r\n\r\n        return key === 'Group' ? localeNumber.charAt(2) : localeNumber.charAt(6);\r\n    }\r\n    /**\r\n     * @description 对数字进行国际化处理\r\n     * @param: number 数字\r\n     * @param: numberFormat 数字格式化形式\r\n     * @return 返回格式化后的信息\r\n     */\r\n    public static formatNumber(number: number, format: string): string {\r\n        let options: any;\r\n        if (format) {\r\n            options = {\r\n                minimumIntegerDigits: format.substring(0, format.indexOf('.')),\r\n                minimumFractionDigits: format.substring(format.indexOf('.') + 1, format.indexOf('-')),\r\n                maximumFractionDigits: format.substring(format.indexOf('-') + 1)\r\n            };\r\n        }\r\n\r\n        // TODO: new Intl.NumberFormat es西语下整数部分有四位时，本地化数字没有千位分隔\r\n        const res: string = new Intl.NumberFormat(TiLocale.getLocaleWords().tiLocaleKey, options)\r\n            .format(number);\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * @description 对国际化数字进行标准化处理\r\n     * @param: number 国际化数字\r\n     * @return 返回数字信息\r\n     */\r\n    public static parseNumber(number: string): number {\r\n        return parseFloat(TiLocaleFormat.parseNumWithDecimal(number));\r\n    }\r\n\r\n    /**\r\n     * @description 对时间进行国际化处理\r\n     * @param: time 时间\r\n     * @param: format 时间格式\r\n     * @return 返回格式化后的信息\r\n     */\r\n    public static formatTime(time: string | number | Date, format?: string, timezone?: string): string {\r\n        return formatDate(time, format || TiLocaleFormat.TIME_FORMAT, TiLocaleFormat.getLocaleKey(), timezone);\r\n    }\r\n\r\n    /**\r\n     * @description 对日期进行国际化处理\r\n     * @param date 日期\r\n     * @param format 日期格式\r\n     * @return 返回格式化后的信息\r\n     */\r\n    public static formatDate(date: Date, format?: string, timezone?: string): string {\r\n        return formatDate(date, format || TiLocaleFormat.DATE_FORMAT, TiLocaleFormat.getLocaleKey(), timezone);\r\n    }\r\n\r\n    /**\r\n     * @description 对时间日期进行国际化处理\r\n     * @param: 时间日期\r\n     * @param: 时间日期格式\r\n     * @return 返回格式化后的信息\r\n     */\r\n    public static formatDateTime(dateTime: Date, format?: string, timezone?: string): string {\r\n        return formatDate(dateTime, format || TiLocaleFormat.DATETIME_FORMAT, TiLocaleFormat.getLocaleKey(), timezone);\r\n    }\r\n\r\n    /**\r\n     * 功能描述：去除千位分隔符，得到标准化数字\r\n     * value: 带有千位分隔符的数据\r\n     */\r\n    public static deleteGroupSep(value: any): string {\r\n        let res: any;\r\n        res = String(value);\r\n        const groupSep: string = TiLocaleFormat.getNumberSymbol('Group');\r\n        const groupSepReg: any = new RegExp('\\\\' + groupSep, 'g');\r\n\r\n        return res.replace(groupSepReg, '');\r\n    }\r\n    /**\r\n     * 检测format接口配置是否合法。目前spinner和inputnumber组件会用到\r\n     */\r\n    public static isInvalidFormat(format: string): boolean {\r\n        if (typeof (format) !== 'string'\r\n            || format.charAt(0)\r\n            .toUpperCase() !== 'N'\r\n            || Number.isNaN(parseInt(format.slice(1), 10))) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","/* tslint:disable:file-name-casing */\r\nexport * from './en_US';\r\nexport * from './zh_CN';\r\nexport * from './de_DE';\r\nexport * from './es_ES';\r\nexport * from './es_US';\r\nexport * from './fr_FR';\r\nexport * from './pt_BR';\r\n","import { NgModule } from '@angular/core';\r\nimport { TiTranslatePipe } from './TiTranslatePipe';\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  declarations: [ TiTranslatePipe ],\r\n  exports: [ TiTranslatePipe ]\r\n})\r\nexport class TiLocaleModule {}\r\nexport { TiLocale } from './TiLocale';\r\nexport { TiLocaleFormat } from './TiLocaleFormat';\r\nexport { TiLocaleWords } from './TiLocaleWords';\r\nexport { zh_CN, en_US, de_DE, es_ES, es_US, fr_FR, pt_BR } from './i18n';\r\nexport { TiTranslatePipe } from './TiTranslatePipe';\r\n","import { Component, ContentChild, ElementRef, EventEmitter, HostListener,\r\n    Input, NgZone, Output, Renderer2, SimpleChange, SimpleChanges, TemplateRef, ViewChild} from '@angular/core';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiBrowser, TiKeymap, Util } from '../../utils/Util';\r\nimport { TiPositionType } from '../../utils/Position';\r\nimport { TiLocale, TiLocaleFormat, TiLocaleWords } from '../../locale/TiLocaleModule'; // 获取词条\r\n\r\n/**\r\n * @ignore\r\n *  列表组件，使用者有menu、droplist\r\n */\r\n@Component({\r\n      selector: 'ti-list',\r\n      templateUrl: './list.html',\r\n      styleUrls: ['./list.less', './list-multi.less'],\r\n      providers: [TiFormComponent.getValueAccessor(TiListComponent)]\r\n})\r\nexport class TiListComponent extends TiFormComponent {\r\n\r\n    protected static readonly SCROLL_TOP_TIME: number = 200; // 设置选中项滚动到TOP所需时间。Chorme下简单测试。TODO：其他浏览器、复杂数据\r\n    // 列表数据配置\r\n    @Input() multiple: boolean = false; // 是否多选\r\n    @Input() options: Array<any>; // 下拉选项的全部数据\r\n    @Input() labelKey: string = 'label'; // 要显示的字段\r\n    @Input() tipPosition: TiPositionType = 'right';\r\n    @Input() noDataText: string = '...';       // 无数据时的显示文本\r\n    @Input() hideEmptyOption: boolean = false;       // 过滤空字符串选项\r\n    @Input() selectAll: boolean = false; // 多选模式下是否有全选功能\r\n    /**\r\n     * 10.0.4 版本新增，\r\n     * 用于配置是否显示children字段数据，大部分场景需要显示children，cascader不需要\r\n     */\r\n    @Input() showChildren: boolean = true;\r\n    /**\r\n     * @ignore\r\n     * 10.1.0新增\r\n     * 适配内部time类组件，点选滚动效果,暂不开放。\r\n     */\r\n    @Input() scrollTop: number = 0;\r\n\r\n    /**\r\n     * 选中事件，向外通知option数据\r\n     */\r\n    // tslint:disable-next-line:no-output-named-after-standard-event\r\n    @Output() readonly select: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() readonly hover: EventEmitter<any> = new EventEmitter<any>();\r\n    // item模板\r\n    @ContentChild(TemplateRef, /* TODO: add static flag */ { static: true }) itemTemplate: TemplateRef<any>;\r\n    @ViewChild('ulRef') ulRef: ElementRef;\r\n\r\n    /**\r\n     *  需要阻止失焦标记: 点击面板时，会触发失焦，需要阻止失焦。\r\n     *  IE兼容性问题: 点击滚动条，触发失焦，面板会收起\r\n     *  修复方案：点击list面板区域（包含滚动条）后，给失焦元素强制获取焦点。修改Form基类不触发组件整体失焦。\r\n     */\r\n    private stopBlur: boolean = false;\r\n    private unlistenIEScrollbarBugFns: Array<() => void> = [];\r\n    public selectAllState: boolean;\r\n    public selectAllText: string = TiLocale.getLocaleWords().tiList.selectAll;\r\n    public optionSelectAll: string = 'all';\r\n\r\n    private _hoverOption: any;\r\n    public get hoverOption(): any {\r\n        return this._hoverOption;\r\n    }\r\n    public set hoverOption(hoverOption: any) {\r\n        if (this._hoverOption !== hoverOption) {\r\n            this._hoverOption = hoverOption;\r\n            this.hover.emit(hoverOption);\r\n        }\r\n    }\r\n    protected optionScrollTopLastTime: number = 0;\r\n    // 判断是否禁用的函数: 函数类型是(any) => boolean，赋值是(item: any) => {}\r\n    @Input() isDisabledFn: (item: any) => boolean = (item: any) => {\r\n        return item && item.disabled === true;\r\n        // tslint:disable-next-line:semicolon\r\n    };  // 这个分号是书写正确的\r\n    constructor(render: Renderer2, hostRef: ElementRef, private zone: NgZone) {\r\n        super(hostRef, render);\r\n    }\r\n\r\n    // 在Selected使用List时，Selected的聚焦元素是Dominator和Searchbox，它们接收按键，并调用list来处理。\r\n    // 在表格列设置时，List自己聚焦，List处理按键。\r\n    @HostListener('keydown', ['$event']) onKeydown(event: KeyboardEvent): void {\r\n        // 10.0.2删除 KEY_SPACE 空格快捷键的响应\r\n        switch (event.keyCode) {\r\n            case TiKeymap.KEY_ENTER: // ENTER键 相当于click\r\n            case TiKeymap.KEY_NUMPAD_ENTER: // ENTER键(苹果数字小键盘)\r\n                if (this.hoverOption) {\r\n                    this.selectOption(this.hoverOption);\r\n                }\r\n                break;\r\n            case TiKeymap.KEY_ESCAPE: // Esc键，仅可关闭\r\n            case TiKeymap.KEY_TAB: // Tab键，仅可关闭\r\n                break;\r\n            case TiKeymap.KEY_ARROW_UP: // 向上箭头，上移选项\r\n                event.preventDefault(); // 防止上下按键默认行为：移动滚动条\r\n                this.nextOption(true);\r\n                break;\r\n            case TiKeymap.KEY_ARROW_DOWN: // 向下箭头，下移选项\r\n                event.preventDefault(); // 防止上下按键默认行为：移动滚动条\r\n                this.nextOption(false);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.zone.runOutsideAngular(() => {\r\n            this.renderer.listen(this.nativeElement, 'mousedown', (event: MouseEvent): void => {\r\n                // Select时，点击滚动条和点击面板，不要触发默认行为：dominator blur\r\n                // 现在，list默认不聚焦。在所有场合，点击面板或者滚动条，都不触发默认焦点事件。\r\n                event.preventDefault(); // 防止dominator blur行为\r\n                // list自身可以落焦点时，需要聚焦的默认行为。\r\n            });\r\n\r\n            // list内部滚动条会引起外部滚动条事件触发，引起弹框内的下拉组件无法使用鼠标拖动滚动条，因此此处阻止事件冒泡\r\n            this.renderer.listen(this.nativeElement, 'mousewheel', (event: MouseEvent): void => {\r\n                event.stopPropagation();\r\n            });\r\n            this.renderer.listen(this.nativeElement, 'DOMMouseScroll', (event: MouseEvent): void => {\r\n                event.stopPropagation();\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        super.ngOnChanges(changes);\r\n        if (this.multiple && this.selectAll) {\r\n            const optionsChange: SimpleChange = changes['options'];\r\n            if (optionsChange) {\r\n                this.setSelectedAllState();\r\n            }\r\n        }\r\n        // time及datetime/datetimeRange组件使用list，点选时候需要滚动效果\r\n        if (changes['scrollTop'] && !changes['scrollTop'].firstChange) {\r\n            this.setScrollFn();\r\n        }\r\n        if (changes['options']) {\r\n            this.setHoverOption();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        if (this.scrollTop > 0) {\r\n            this.setScrollFn();\r\n        }\r\n    }\r\n\r\n    writeValue(model: any): void {\r\n        super.writeValue(model);\r\n        if (this.multiple && this.selectAll) {\r\n            this.setSelectedAllState();\r\n        }\r\n    }\r\n    // time及datetime/datetimeRange组件使用list，点选时候需要滚动效果\r\n    private setScrollFn(): void {\r\n        if (TiBrowser.isIE()) {\r\n            this.renderer.setProperty(this.hostRef.nativeElement, 'scrollTop', this.scrollTop);\r\n            return;\r\n        }\r\n        this.hostRef.nativeElement.scrollTo(0, this.scrollTop);\r\n    }\r\n\r\n\r\n    // 下拉选项的鼠标按下操作\r\n    public onMousedownItem(event: MouseEvent, own: HTMLElement): void {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        own.classList.add('ti3-menu-panel-list-active');\r\n    }\r\n\r\n    // 下拉选项的鼠标按下后的抬起操作\r\n    public onMouseupItem(event: MouseEvent, own: HTMLElement): void {\r\n        this.removeClass(event, own);\r\n    }\r\n\r\n    // 下拉选项的鼠标离开时的操作\r\n    public onMouseleaveItem(event: MouseEvent, own: HTMLElement): void {\r\n        this.removeClass(event, own);\r\n    }\r\n    // 移除li元素上的ti3-menu-panel-list-active类\r\n    public removeClass(event: MouseEvent, own: HTMLElement): void {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        own.classList.remove('ti3-menu-panel-list-active');\r\n    }\r\n\r\n    // 下拉选项的单击操作（包括组名所在的<li>元素）\r\n    public onClickItem(event: MouseEvent, option: any): void {\r\n        // Selected时，点击选项，不要触发默认行为：dominator blur。\r\n        event.preventDefault(); // 防止dominator blur行为\r\n        // Group节点和禁用节点，无需响应。\r\n        if (this.isGroup(option) || this.isDisabledFn(option)) {\r\n            event.stopPropagation();\r\n\r\n            return;\r\n        }\r\n        // 只处理左键和中键\r\n        if (event.button !== TiKeymap.MOUSE_LEFT_BUTTON\r\n            && event.button !== TiKeymap.MOUSE_MIDDLE_BUTTON) { // Tiny2这里逻辑错误TODO：\r\n            return;\r\n        }\r\n\r\n        // 点击选中项\r\n        this.selectOption(option);\r\n        // 更新hover\r\n        this.hoverOption = option;\r\n    }\r\n\r\n    private selectOption(option: any): void {\r\n        // 全选\r\n        if (this.multiple && this.selectAll && option === this.optionSelectAll) {\r\n            this.selectAllOptions();\r\n            this.select.emit(option);\r\n\r\n            return;\r\n        }\r\n\r\n        let index: number = -1;\r\n        if (this.multiple) { // 多选\r\n            if (!this.model) { // 如果为空值\r\n                this.model = [];\r\n            }\r\n            // 是否选中，取反\r\n            index = this.model.indexOf(option);\r\n            if (index === -1) {\r\n                this.model.push(option); // 点击下拉项选中，选中项按用户操作顺序显示\r\n            } else if (index !== -1) {\r\n                this.model.splice(index, 1);\r\n            }\r\n            // 强行向外通知model改变。\r\n            this.model = this.model.concat();\r\n            // 设置全选状态\r\n            if (this.selectAll) {\r\n                this.setSelectedAllState();\r\n            }\r\n        } else { // 单选\r\n            this.model = option;\r\n        }\r\n        this.select.emit(option);\r\n    }\r\n\r\n    private selectAllOptions(): void {\r\n        if (!this.model) { // 如果为空值\r\n            this.model = [];\r\n        }\r\n        const listOptions: Array<any> = this.getListOptions();\r\n        let isChange: boolean = false;\r\n        if (this.selectAllState === false || this.selectAllState === null) {\r\n            listOptions.forEach((item: any) => {\r\n                if (this.model.indexOf(item) === -1 && this.isSelectable(item)) { // 不在当前选中项且为可选数据项（排除禁用项和组名项）\r\n                    // 点击全选按钮时的选中值顺序与option的顺序一致\r\n                    const insertIndex: number = this.getInsertIndex(item);\r\n                    this.model.splice(insertIndex, 0, item);\r\n                    isChange = true;\r\n                }\r\n            });\r\n\r\n            this.selectAllState = true;\r\n        } else {\r\n            listOptions.forEach((item: any) => {\r\n                const index: number = this.model.indexOf(item);\r\n                if (index !== -1 && !this.isDisabledFn(item)) {\r\n                    this.model.splice(index, 1);\r\n                    isChange = true;\r\n                }\r\n            });\r\n            this.selectAllState = false;\r\n        }\r\n        if (isChange) {\r\n            // model的值在以上循环中，多次变化，或者不变，根据isChange，一次性触发变化检测\r\n            this.model = this.model.concat();\r\n        }\r\n    }\r\n\r\n    public setSelectedAllState(): void {\r\n        if (!this.model || this.model.length === 0 || !this.options || this.options.length === 0) {\r\n            this.selectAllState = false;\r\n\r\n            return;\r\n        }\r\n        const listOptions: Array<any> = this.getListOptions();\r\n        const selectedOptions: Array<any> = listOptions.filter((item: any) => {\r\n            return this.isSelectable(item) && this.model.includes(item);\r\n        });\r\n        if (selectedOptions.length === 0) {\r\n            this.selectAllState = false;\r\n\r\n            return;\r\n        }\r\n        const selectableOptions: Array<any> = listOptions.filter((item: any) => {\r\n            return this.isSelectable(item);\r\n        });\r\n        this.selectAllState = selectedOptions.length === selectableOptions.length ? true : null;\r\n    }\r\n\r\n    // 获取新插入元素的插入次序，该次序与list集合中的元素顺序保持一致\r\n    private getInsertIndex(option: any): number {\r\n        const listOptions: Array<any> = this.getListOptions();\r\n        const indexOfList: number = listOptions.indexOf(option); // 当前元素在list中的排序\r\n        // 将该元素与已选中在list中的次序进行比较，如果该元素在某选中项次序之后，则将其插入该元素之后\r\n        for (let i: number = this.model.length; i > 0; i--) {\r\n            const itemIndexOfList: number = listOptions.indexOf(this.model[i - 1]);\r\n            if (itemIndexOfList < indexOfList) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n    public onMouseenterItem(event: MouseEvent, option: any): void {\r\n        // 是可选项，且不是在选中项置Top时鼠标经过。\r\n        // tslint:disable-next-line:prefer-conditional-expression\r\n        if (this.isSelectable(option) && new Date().getTime() - this.optionScrollTopLastTime > TiListComponent.SCROLL_TOP_TIME) {\r\n            this.hoverOption = option;  // 更新hover\r\n        }\r\n    }\r\n    // 寻找下一个可选项。参数：向上/向下\r\n    public nextOption(isUp: boolean): void {\r\n        const listOptions: Array<any> = this.getListOptions();\r\n        if (this.multiple && this.selectAll) {\r\n            listOptions.unshift(this.optionSelectAll);\r\n        }\r\n        if (listOptions.filter((x: any) => this.isSelectable(x)).length === 0) { // 没有可选中的项目\r\n            return;\r\n        }\r\n        let nextOption: any = this.hoverOption;\r\n        let curIndex: number = listOptions.indexOf(nextOption);\r\n        do {\r\n            if (isUp) {\r\n                // tslint:disable-next-line:prefer-conditional-expression\r\n                if (curIndex > 0) { // 找到了，且不是第一个元素\r\n                    curIndex = curIndex - 1;\r\n                } else { // -1没有找到, 0第一个元素\r\n                    curIndex = listOptions.length - 1; // 跳到第一个元素。\r\n                }\r\n            } else {\r\n                // tslint:disable-next-line:prefer-conditional-expression\r\n                if (curIndex < listOptions.length - 1) { // -1没有找到, 和不是最后一个\r\n                    curIndex = curIndex + 1;\r\n                } else { // length - 1 最后一个元素\r\n                    curIndex = 0; // 跳到第一个元素。\r\n                }\r\n            }\r\n            nextOption = listOptions[curIndex];\r\n        } while (!(this.isSelectable(nextOption) || nextOption === this.hoverOption)); // 找到停止，或者寻找一圈停止\r\n        // 没有找到结果\r\n        if (nextOption === null ||  nextOption === this.hoverOption) {\r\n            return;\r\n        }\r\n        // 改变hover选项。\r\n        this.hoverOption = nextOption;\r\n        // 更新滚动条\r\n        this.optionScollTop(this.hoverOption);\r\n    }\r\n    protected getListOptions(): Array<any> {\r\n        let listOptions: Array<any> = []; // 装有所有选项的数组\r\n        if (this.options) {\r\n            this.options.forEach(\r\n                (x: any) => {\r\n                    listOptions.push(x);\r\n                    if (this.isGroup(x)) {\r\n                        listOptions = listOptions.concat(x.children);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n\r\n        return listOptions;\r\n    }\r\n    // 滚动到选中项元素，多选定位到第一个选中项元素，无选中项时定义到第一项元素；\r\n    // 适用于每次下拉打开的场景\r\n    public scrollToSelected(): void {\r\n        // 获取当前选中项\r\n        let selectedItem: any;\r\n        // tslint:disable-next-line:prefer-conditional-expression\r\n        if (this.multiple) {\r\n            selectedItem = (this.model && this.model.length > 0) ? this.model[0] : null;\r\n        } else {\r\n            selectedItem = this.model;\r\n        }\r\n        if (selectedItem) { // 有选中项时，自动定位到第一个选中元素\r\n            this.scrollToEle(selectedItem, true);\r\n        } else { // 无选中项时，定位在第一项元素\r\n            this.nativeElement.scrollTop = 0;\r\n        }\r\n        this.setHoverOption();\r\n    }\r\n    /**\r\n     * 设置hoverOption\r\n     * 用于数据更新时，非鼠标或快捷键操作时\r\n     */\r\n    private setHoverOption(): void {\r\n        this.hoverOption = this.options?.length > 0\r\n            ? (this.hasSelectedinList()\r\n                ? this.getHoverOptionInModel()\r\n                : (this.multiple && this.selectAll\r\n                    ? this.optionSelectAll\r\n                    : (this.options[0]?.children\r\n                        ? this.getGroupHoverOption()\r\n                        : this.options.find((option: any) => !this.isDisabledFn(option)))))\r\n            : undefined;\r\n    }\r\n\r\n    /**\r\n     * 单选有model的时候，单选的model不会是禁用项，hoverOption应当是model，\r\n     * 多选有model的时候，hoverOption是第一个非禁用的model，如果model全部禁用，hoverOption是第一个禁用项往下的第一个可用项。\r\n     */\r\n    private getHoverOptionInModel(): any {\r\n        return this.multiple\r\n            ? (this.model.find((item: any) => !this.isDisabledFn(item))\r\n                || this.options.find((item: any, index: number) => {\r\n                    return index > this.options.indexOf(this.model[0]) && !this.isDisabledFn(item);\r\n                }))\r\n            : this.model;\r\n    }\r\n    /**\r\n     * 判断当前list中是否有选中项，过滤后的数据有可能不含有选中项\r\n     */\r\n    private hasSelectedinList(): boolean {\r\n        const listOption: Array<any> = this.getListOptions();\r\n        if (this.multiple && this.model?.length > 0) {\r\n            return !!this.model.find((item: any) => listOption.includes(item));\r\n        } else if (this.model) {\r\n            return listOption.includes(this.model);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // 分组情况下，找到hoverOption\r\n    private getGroupHoverOption(): any {\r\n        let groupHoverOption: any;\r\n        this.options.find((option: any): boolean => {\r\n            if (option.children.length > 0) {\r\n                groupHoverOption = option.children.find((child: any) => !this.isDisabledFn(child));\r\n\r\n            }\r\n\r\n            return groupHoverOption ? true : false; // 这个return只是为了结束find方法\r\n        });\r\n\r\n        return groupHoverOption; // 这个return是为了返回查找结果\r\n    }\r\n    private scrollToEle(option: any, isScrollBySelected: boolean = false): void {\r\n        if (!option || !this.ulRef) { // 第一次model值改变时, ulRef不存在。\r\n            return;\r\n        }\r\n        const listOptions: Array<any> = this.getListOptions();\r\n        if (this.multiple && this.selectAll) {\r\n            listOptions.unshift(this.optionSelectAll);\r\n        }\r\n        const curIndex: number = listOptions.indexOf(option);\r\n        if (curIndex < 2 && isScrollBySelected) {\r\n            return; // 前两项不需要滚动\r\n        }\r\n        // 下拉框有滚动条时，若上下选项足够，选中项为下拉框的第二项，这样可以展示选中项的前后选项\r\n        const scrollTopOptionIndex: number = Math.max(curIndex - 1, 0);\r\n        const ele: HTMLElement =  this.ulRef.nativeElement.getElementsByTagName('LI')[scrollTopOptionIndex];\r\n        if (ele) {\r\n            this.nativeElement.scrollTop = ele.offsetTop;\r\n        }\r\n    }\r\n    private optionScollTop(option: any): void {\r\n        this.optionScrollTopLastTime = new Date().getTime();\r\n        this.scrollToEle(option);\r\n    }\r\n\r\n    // 是组数据项\r\n    public isGroup(item: any): boolean {\r\n        return item && item.hasOwnProperty('children') && this.showChildren;\r\n    }\r\n    // 是可选数据项\r\n    protected isSelectable(item: any): boolean {\r\n        return !this.isGroup(item) && !this.isDisabledFn(item);\r\n    }\r\n    // 是已选中数据项\r\n    public isSelected(item: any): boolean {\r\n        return (!this.multiple && item === this.model) ||\r\n            (this.multiple && this.model && this.model.includes(item));\r\n    }\r\n    /**\r\n     * 修复点击IE滚动条，面板关闭。\r\n     * 打开面板时监听，关闭和销毁面板时取消监听。\r\n     */\r\n    public listenIESrollbarBug(): void {\r\n        // IE兼容性涉及知识，见本文件底部。\r\n        // IE兼容性问题: 点击滚动条，触发失焦，面板会收起\r\n        // 修复方案：点击list面板区域（包含滚动条）后，给失焦元素强制获取焦点。修改Form基类不触发组件整体失焦。\r\n        if (TiBrowser.isIE()) {\r\n            // 点击面板，阻止Blur\r\n            this.unlistenIEScrollbarBugFns.push(\r\n                this.renderer.listen(this.nativeElement, 'mousedown',\r\n                    (event: FocusEvent) => {\r\n                        this.stopBlur = true; // 标记，以供focusin消耗\r\n                        // 阻止冒泡到document，因为document会把标志位改回false。和下面修复双击滚动条Bug配合\r\n                        event.stopPropagation();\r\n                    }\r\n                )\r\n            );\r\n            // 修复bug：双击滚动条，再点击面板之外，不失焦。\r\n            this.unlistenIEScrollbarBugFns.push(\r\n                this.renderer.listen(document, 'mousedown',\r\n                    (event: FocusEvent) => {\r\n                        // 点击面板之外区域，不阻止blur\r\n                        this.stopBlur = false;\r\n                    }\r\n                )\r\n            );\r\n\r\n            // IE事件顺序：focusout->foucsin->blur->focus, 支持冒泡的focusin/focusout, 不支持冒泡的是focus/blur\r\n            this.unlistenIEScrollbarBugFns.push(\r\n                this.renderer.listen(document.body, 'focusin',\r\n                    (event: FocusEvent) => {\r\n                        if (this.stopBlur && event.relatedTarget !== document.body) {\r\n                            // 本来不需要!==document, 但连续多次点击太快，会发生：刚点击一下，上次的dominator->body focusin, 会进来\r\n\r\n                            // 清零，因为下面的聚焦事件，又会触发focusin事件，并不想处理\r\n                            this.stopBlur = false; // 一般情况这里置为false是可以的。\r\n\r\n                            // focusin事件，target是聚焦元素。relatedTarget是失焦元素。\r\n                            // 强制让失焦元素，重新获得焦点。\r\n                            (event.relatedTarget as HTMLElement).focus();\r\n                        }\r\n                    }\r\n                )\r\n            );\r\n        }\r\n    }\r\n    public unlistenIESrollbarBug(): void {\r\n        if (TiBrowser.isIE()) {\r\n            // 解绑监听\r\n            for (const x of this.unlistenIEScrollbarBugFns) {\r\n                x();\r\n            }\r\n        }\r\n    }\r\n}\r\n/*\r\nIE兼容性问题：点击面板滚动条，触发失焦，无法阻止。\r\n解决方案：给失焦元素强制获取焦点。修改Form基类不触发组件整体失焦。\r\n\r\n涉及知识点：\r\n点击div面板的滚动条，浏览器会失焦，焦点到body。event.preventDefault();，可以阻止默认失焦行为。\r\n点击div面板的滚动条，浏览器会失焦，焦点到body。无法阻止。（问题产生）\r\n\r\nChrome浏览器事件顺序：\r\nblur->focusout->focus->foucsin\r\nIE浏览器事件顺序：\r\nfocusout->focusin->blur->focus\r\n\r\nIE浏览器，在blur事件里，失焦元素.focus(),\t会先显示失焦css，后显示聚焦css，会闪一下。\r\nIE浏览器，在focusout事件里，失焦元素.focus(), 无效。\r\nIE浏览器，在focusin事件里，失焦元素.focus(), 会一直显示聚焦css，不会闪。（作为解决问题的方案）\r\n\r\nChrome blur事件时，document.activeElement是body\r\nIE blur事件时，document.activeElement是将要聚焦的元素。\r\nIE 如果在focusin里，失焦元素.focus()，那么blur时document.activeElement刚好是这个失焦并强制聚焦的元素。\r\n\r\n第一版方案：\r\n强制聚焦，用了延时处理\r\n整体onBlur时，IE特殊处理，不闭合面板\r\n闭合面板时，处理标志位。\r\n解决双击滚动条bug，利用监听面板之外点击。\r\n\r\n第二版方案：\r\n强制聚焦，不用延时。\r\n修复Form基类，不再触发整体失焦/聚焦。\r\n闭合面板时，处理标志位 （TODO: 设法去除。尽量集中对标志位的管理）\r\n解决双击滚动条bug，利用监听面板之外点击。（TODO: 设法去除。尽量集中对标志位的管理）\r\n\r\n第三版方案：\r\n面板打开时监听mouse，面板闭合时不再监听\r\n\r\n */\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiTipModule } from '../../directives/tip/TiTipModule';\r\nimport { TiListComponent } from './TiListComponent';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiIconModule,\r\n    TiTipModule\r\n  ],\r\n  exports: [TiListComponent],\r\n  declarations: [TiListComponent]\r\n})\r\nexport class TiListModule {\r\n}\r\nexport { TiListComponent } from './TiListComponent';\r\n","import { Component, Input } from '@angular/core';\r\nimport { TiListComponent } from '../list/TiListModule';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiMenuItem } from './TiMenuComponent';\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n      selector: 'ti-menulist',\r\n      templateUrl: './menulist.html',\r\n      styleUrls: ['./menulist.less'/* , './menu.less' */],\r\n      providers: [TiFormComponent.getValueAccessor(TiMenuListComponent)]\r\n})\r\nexport class TiMenuListComponent extends TiListComponent {\r\n    @Input() panelAlign: 'left' | 'right' = 'right'; // 设置下拉菜单面板与按钮对齐方式。这里是为了决定了面板上箭头方向。\r\n    protected isSelectable(item: TiMenuItem): boolean {// 与普通list区别：group也是可以选中的\r\n        return !this.isDisabledFn(item);\r\n    }\r\n    protected getListOptions(): Array<TiMenuItem> {// 与普通list区别：次级节点不会放入本级别。\r\n        return this.options;\r\n    }\r\n    public hasBorder(item: TiMenuItem, items: Array<TiMenuItem>): boolean { // 分组带线\r\n        const index: number = items.indexOf(item);\r\n        const indexPre: number = (index === 0) ? 0 : index - 1;\r\n\r\n        return item.groupId !== items[indexPre].groupId;\r\n    }\r\n    public onMouseenterItem(event: MouseEvent, option: any): void {\r\n        // 不是在选中项置Top时鼠标经过。\r\n        // tslint:disable-next-line:prefer-conditional-expression\r\n        if (new Date().getTime() - this.optionScrollTopLastTime > TiListComponent.SCROLL_TOP_TIME) {\r\n            this.hoverOption = option;  // 更新hover\r\n        }\r\n    }\r\n    // 防止继承list的ngOnChanges,初始化hoverOption变更触发hover事件，导致menu组件中的onhover事件报错\r\n    // tslint:disable-next-line: use-life-cycle-interface\r\n    ngOnChanges(): void {\r\n    }\r\n}","import { Component, ContentChild, ElementRef, EventEmitter, Input, Output,\r\n      QueryList, SimpleChanges, TemplateRef, ViewChild, ViewChildren } from '@angular/core';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiDropComponent } from '../drop/TiDropModule';\r\nimport { TiMenuListComponent } from './TiMenuListComponent';\r\nimport { TiKeymap } from '../../utils/Util';\r\nimport { TiPositionType } from '../../utils/Position';\r\n// TODO: beforOpen延时打开，需要动态转圈等待\r\n/**\r\n * MenuItem是item项的数据接口\r\n */\r\nexport interface TiMenuItem {\r\n      /**\r\n       * 设置当前菜单项文本内容;\r\n       */\r\n      label?: string;\r\n      /**\r\n       * 设置当前菜单项tip提示内容\r\n       */\r\n      tip?: string;\r\n      /**\r\n       * 设置当前菜单项tip提示位置，默认值为：right；\r\n       */\r\n      tipPosition?: TiPositionType;\r\n      /**\r\n       * 设置当前菜单项是否置灰；\r\n       */\r\n      disabled?: boolean;\r\n      /**\r\n       * 设置当前菜单项的子菜单项，该数组的每个元素都是一个对象，对应子菜单项的一项，\r\n       */\r\n      children?: Array<TiMenuItem>;\r\n      /**\r\n       * 设置下拉面板不同组之间增加分割线，实现分组的效果。其属性也是title、tip、disable、click和childrens。注意：menu组件最多支持3级菜单。 查看示例\r\n       */\r\n      groupId?: string;\r\n      /**\r\n       * 允许有多余的属性字段\r\n       */\r\n      [propName: string]: any;\r\n}\r\n/**\r\n * Menu菜单组件\r\n *\r\n * 提供了一种方便的生成菜单下拉列表的方式，提供分组、自定义内容等功能。\r\n *\r\n * <example-url>../tiny3demo/#/menu/menu-all</example-url>\r\n */\r\n@Component({\r\n      selector: 'ti-menu',\r\n      templateUrl: './menu.html',\r\n      styleUrls: ['./menu.less'],\r\n      host: {\r\n            '(blur)': 'onBlur()'\r\n      }\r\n})\r\nexport class TiMenuComponent extends TiFormComponent {  // 本应继承自BaseComp，但是想要A标签焦点功能\r\n      /**\r\n       * 下拉菜单面板与按钮对齐方式。\r\n       */\r\n      @Input() panelAlign: 'left' | 'right' = 'right';\r\n      /**\r\n       * 下拉面板内容\r\n       */\r\n      @Input() items: Array<TiMenuItem>;\r\n      /**\r\n       * 下拉面板最大宽度，超过时换行，对所有子菜单都生效。\r\n       */\r\n      @Input() panelMaxWidth: string = '9999px';\r\n      /**\r\n       * 下拉面板最大高度，超过时出现竖向滚动条，对所有子菜单都生效。\r\n       */\r\n      @Input() panelMaxHeight: string = '9999px';\r\n      /**\r\n       * 要显示文字的键值\r\n       */\r\n      @Input() labelKey: string = 'label'; // labelKey\r\n      /**\r\n       * @ignore\r\n       */\r\n      @ViewChild('mytoggle', { static: true })  mytoggleRef: ElementRef;\r\n      /**\r\n       * @ignore\r\n       */\r\n      @ViewChildren(TiDropComponent) dropComs: QueryList<TiDropComponent>;\r\n      /**\r\n       * @ignore\r\n       */\r\n      @ViewChildren(TiMenuListComponent) listComs: QueryList<TiMenuListComponent>;\r\n      /**\r\n       * @ignore\r\n       */\r\n      @ContentChild(TemplateRef, /* TODO: add static flag */ { static: true }) firstTemplate: TemplateRef<any>;\r\n      @ContentChild('item', /* TODO: add static flag */ { static: true }) itemTemplate: TemplateRef<any>; // 自定义list中的item的模板\r\n      @ContentChild('tip', /* TODO: add static flag */ { static: false }) tipTemplate: TemplateRef<any>; // 自定义list中的tip的模板\r\n      /**\r\n       * 选中菜单项事件\r\n       */\r\n      @Output() readonly select: EventEmitter<TiMenuItem> = new EventEmitter<TiMenuItem>();\r\n      /**\r\n       * 打开面板之前，通知事件。完全交给业务用户处理。\r\n       */\r\n      @Output() readonly beforeOpen: EventEmitter<TiMenuComponent> = new EventEmitter<TiMenuComponent>();\r\n      /**\r\n       * @ignore\r\n       * itemsArr[0]存放根面板内容，itemArr[1]存放次级面板内容，itemArr[2]存放次次级面板内容\r\n       */\r\n      public itemsArr: Array<Array<TiMenuItem>> = [];\r\n      /**\r\n       * @ignore\r\n       *  与开关距离\r\n       */\r\n      public dominatorSpace: string = '10px';\r\n      /**\r\n       *  为true时为buttonselect组件\r\n       */\r\n      public hasBorder: boolean;\r\n      /**\r\n       * menulist最大高度\r\n       */\r\n      public menulistMaxHeight: number;\r\n      ngOnInit(): void {\r\n            // 基类中做了设置宿主id的操作\r\n            super.ngOnInit();\r\n            this.hasBorder = this.nativeElement.hasAttribute('hasborder');\r\n      }\r\n      ngOnChanges(changes: SimpleChanges): void {\r\n            this.setFocusableElems([this.mytoggleRef.nativeElement]);\r\n            super.ngOnChanges(changes);\r\n            if (changes['items']) { // 外部修改show属性的处理，初始定义在ngOnInit中处理\r\n                  this.itemsArr[0] = this.items;\r\n            }\r\n      }\r\n      /**\r\n       * 兼容旧版：\r\n       * 10.0.3 版本之前只能内嵌一个模板，无命名。\r\n       * 新版可以内嵌两个模板，示例书写要求都命名（#item，#tip）。\r\n       * 但需要兼容旧版无命名测试用例。\r\n       */\r\n      // tslint:disable-next-line: use-life-cycle-interface\r\n      ngAfterContentInit(): void {\r\n            super.ngAfterContentInit();\r\n            // 如果 item 模板为空 && 存在第一个模板，那么把第一个出现的 “非#tip 标签” 的模板作为 item 模板\r\n            if (!this.itemTemplate && this.firstTemplate\r\n                && (this.firstTemplate.elementRef.nativeElement !== (this.tipTemplate && this.tipTemplate.elementRef.nativeElement))) {\r\n                  this.itemTemplate = this.firstTemplate;\r\n            }\r\n      }\r\n      /**\r\n       * 打开面板\r\n       */\r\n      public open(): void {\r\n            if (this.disabled) {\r\n                  return;\r\n            }\r\n            // 打开面板前重置menulist最大高度\r\n            this.initListMaxHeight();\r\n            this.dropComs.first.show();\r\n            this.listComs.first.hoverOption = null;\r\n            // 根据drop的最大高度设置menulist最大高度\r\n            this.restyleListMaxHeight();\r\n            // IE滚动条Bug的监听\r\n            this.listComs.toArray().forEach(listCom => {\r\n                  listCom.listenIESrollbarBug();\r\n            })\r\n      }\r\n      /**\r\n       * 关闭面板\r\n       */\r\n      public close(): void {\r\n            this.dropComs.first.hide();\r\n            this.onHover(null, 0);\r\n            // 解除IE滚动条Bug的监听\r\n            this.listComs.toArray().forEach(listCom => {\r\n                  listCom.unlistenIESrollbarBug();\r\n            })\r\n      }\r\n      /**\r\n       * 切换面板状态：打开/关闭\r\n       */\r\n      public toggle(): void {\r\n            this.dropComs.first.isShow ? this.close() : this.open();\r\n      }\r\n      /**\r\n       * @ignore\r\n       */\r\n      public onKeydown(event: KeyboardEvent): void {\r\n            switch (event.keyCode) {\r\n                  case TiKeymap.KEY_SPACE: // 原生SPACE键仅可打开。但Tiny2,3都跟Enter键保持一致\r\n                  case TiKeymap.KEY_ENTER: // ENTER键 相当于click\r\n                  case TiKeymap.KEY_NUMPAD_ENTER: // ENTER键(苹果数字小键盘)\r\n                        // 第一级已打开，但无选中项。或者第一级没有打开。相当于鼠标点击逻辑。\r\n                        if ((this.dropComs.first.isShow && !this.listComs.toArray()[0].hoverOption)\r\n                              || !this.dropComs.first.isShow) {\r\n                              this.onMousedown(null); // 相当于鼠标点击\r\n                              break; // 注意:break在if内，如果if不满足，则走到default，list处理按键\r\n                        }\r\n                  // 上面的回车键, 可能继续走到下面分支。\r\n                  // tslint:disable-next-line:no-switch-case-fall-through\r\n                  // eslint-disable-next-line no-fallthrough\r\n                  case TiKeymap.KEY_ARROW_LEFT: // 左右箭头，焦点在左右面板转移\r\n                  case TiKeymap.KEY_ARROW_RIGHT: // 左右箭头，焦点在左右面板转移\r\n                  case TiKeymap.KEY_ARROW_UP: // 上下箭头，上下移动选中项\r\n                  case TiKeymap.KEY_ARROW_DOWN: // 上下箭头，上下移动选中项\r\n                        for (let i = this.dropComs.length - 1; i >= 0; i--) { // 寻找末尾面板且有hover，list处理按键\r\n                              if (this.dropComs.toArray()[i].isShow && this.listComs.toArray()[i].hoverOption) {\r\n                                    this.onKeydownLastHoverList(event, i);\r\n\r\n                                    // break; //这里触发了for循环的break；并没有走到switch的break;所以改为return;\r\n                                    return;\r\n                              }\r\n                        }\r\n                        // 没有hover的面板，那么第一级面板（肯定是展开的）处理按键\r\n                        this.listComs.first.onKeydown(event);\r\n                        break;\r\n                  default:\r\n                        break;\r\n            }\r\n      }\r\n      private onKeydownLastHoverList(event: KeyboardEvent, i: number): void {\r\n            switch (event.keyCode) {\r\n                  case TiKeymap.KEY_ARROW_LEFT: // 左右箭头，焦点在左右面板转移\r\n                  case TiKeymap.KEY_ARROW_RIGHT: // 左右箭头，焦点在左右面板转移\r\n                        if ((this.panelAlign === 'right' && event.keyCode === TiKeymap.KEY_ARROW_LEFT)\r\n                              || (this.panelAlign === 'left' && event.keyCode === TiKeymap.KEY_ARROW_RIGHT)) { // 次级面板方向键\r\n                              if (i + 1 < this.dropComs.length && this.dropComs.toArray()[i + 1].isShow) {// 次级存在且展开\r\n                                    this.listComs.toArray()[i + 1].nextOption(false); // 次级面板hover由null改为下一个\r\n                              }\r\n                        } else { // 上级面板方向键\r\n                              this.listComs.toArray()[i].hoverOption = null;\r\n                        }\r\n                        break;\r\n                  case TiKeymap.KEY_SPACE: // 原生SPACE键仅可打开。但Tiny2,3都跟Enter键保持一致\r\n                  case TiKeymap.KEY_ENTER: // ENTER键 相当于click\r\n                  case TiKeymap.KEY_NUMPAD_ENTER: // ENTER键(苹果数字小键盘)\r\n                        if (!this.listComs.toArray()[i].isGroup(this.listComs.toArray()[i].hoverOption)) {\r\n                              this.listComs.toArray()[i].onKeydown(event);\r\n                        }\r\n                        break;\r\n                  default: // 上下键等，和上面的回车键也会走到这里。\r\n                        this.listComs.toArray()[i].onKeydown(event);\r\n                        break;\r\n            }\r\n      }\r\n      /**\r\n       * @ignore\r\n       */\r\n      public onMousedown(event: MouseEvent): void {\r\n            if (this.dropComs.first.isShow) { // 已打开，则关闭\r\n                  this.close();\r\n            } else if (this.beforeOpen.observers.length === 0) { // 已打开，且无beforeOpen，则打开\r\n                  this.open();\r\n            } else { // 已打开，有beforeOpen\r\n                  this.beforeOpen.emit(this);\r\n            }\r\n      }\r\n      /**\r\n       * @ignore\r\n       */\r\n      public onSelect(panelIndex: number): void {\r\n            this.select.emit(this.listComs.toArray()[panelIndex].model);\r\n            this.close();\r\n      }\r\n      /**\r\n       * @ignore\r\n       */\r\n      public onBlur(): void {\r\n            this.close();\r\n      }\r\n      /**\r\n       * @ignore\r\n       */\r\n      public onHover(item: any, panelIndex: number): void { // 当item为空，表示鼠标移出当前面板，也需要关闭次级面板。\r\n            if (panelIndex + 1 === this.dropComs.length) {// 当前hover面板，已经是最后一级面板\r\n                  return;\r\n            }\r\n            const dropComArr: Array<TiDropComponent> = this.dropComs.toArray();\r\n            const listComArr: Array<TiMenuListComponent> = this.listComs.toArray();\r\n            if (item && listComArr[panelIndex].isGroup(item) && !listComArr[panelIndex].isDisabledFn(item)) { // 根据数据，是否展开下一级\r\n                  this.itemsArr[panelIndex + 1] = item.children; // 下一级数据，赋新值。\r\n                  listComArr[panelIndex + 1].hoverOption = null; // 下一级面板赋空hoverOption，会触发onHover，进而关闭下一级面板的后续面板。\r\n                  // 赋新值以后，等模板有了新的尺寸，再弹出。\r\n                  setTimeout(() => {\r\n                        const currentPanel: HTMLElement = dropComArr[panelIndex].nativeElement; // 当前面板元素\r\n                        const nextPanel: HTMLElement = dropComArr[panelIndex + 1].nativeElement; // 下一级面板元素\r\n\r\n                        dropComArr[panelIndex + 1].show(); // 打开下一级面板\r\n                        // 位置调整，X方向 // TODO: 使用Position是否可行？\r\n                        const leftOffset: number = (this.panelAlign === 'left') ?\r\n                                                   currentPanel.offsetLeft + currentPanel.offsetWidth :\r\n                                                   currentPanel.offsetLeft - nextPanel.offsetWidth;\r\n                        nextPanel.style.left = `${leftOffset}px`;\r\n                        // 位置调整，Y方向\r\n                        const itemIndex: number = this.itemsArr[panelIndex].indexOf(item);\r\n                        const itemElem: any = listComArr[panelIndex].nativeElement.getElementsByTagName('LI')[itemIndex];\r\n                        // 当前li距离面板顶部的距离 = 当前li距离可视区顶部的距离 - 当前面板到可视区顶部的距离;\r\n                        const itemElmTop: number = itemElem.getBoundingClientRect().top - currentPanel.getBoundingClientRect().top;\r\n                        // 当前li距离页面底部的距离 = 可视区窗口高度 + 文档滚动高度 - 当前面板的offsetTop - 当前li距离面板顶部的距离;\r\n                        const bottomOffset: number = document.documentElement.clientHeight + document.documentElement.scrollTop -\r\n                                             currentPanel.offsetTop - itemElmTop;\r\n                        // 下一级面板的的高度\r\n                        const itemHeight: number = nextPanel.offsetHeight;\r\n                        // 底部空间能放下下一级面板：下一级面板的top = 当前面板的offsetTop + 当前li距离面板顶部的距离 - 面板的上下留白\r\n                        const nextPanelTop: number = currentPanel.offsetTop + itemElmTop - 4;\r\n                        if (bottomOffset > itemHeight) {\r\n                              nextPanel.style.top = nextPanelTop + 'px';\r\n\r\n                              return;\r\n                        }\r\n\r\n                        // 底部空间不足，和浏览器底部对齐\r\n                        nextPanel.style.top = nextPanelTop + bottomOffset - itemHeight + 'px';\r\n                  }, 0);\r\n            } else {\r\n                  // 当hover到具体项目（非分组）或 null（移出当前面板），需要闭合所有后续面板\r\n                  for (let i: number = panelIndex + 1; i < dropComArr.length; i++) {\r\n                        dropComArr[i].hide();\r\n                  }\r\n            }\r\n      }\r\n      /**\r\n       * @ignore\r\n       */\r\n      public onMouseoutDrop(event: MouseEvent, panelIndex: number): void {\r\n            // 默认需要隐藏, 除非鼠标进入面板区域。\r\n            for (let i: number = 0; i < this.dropComs.length; i++) {\r\n                  const dropRect: DOMRect = this.dropComs.toArray()[i].nativeElement\r\n                                                                      .getBoundingClientRect();\r\n                  // 因为慢慢移出本面板时，移出鼠标事件依然停留在本面板内（1px误差），所以面板rect四周范围要更小1px。\r\n                  if (dropRect.left < event.clientX && event.clientX < dropRect.right\r\n                        && dropRect.top < event.clientY && event.clientY < dropRect.bottom) {\r\n                        return;\r\n                  }\r\n            }\r\n            // 给第一级面板置无选中，那么次级面板自然会关闭。\r\n            this.listComs.first.hoverOption = null; // 会触发到上面this.onHover(null, 0);\r\n      }\r\n      // 初始化menulist最大高度\r\n      public initListMaxHeight(): void {\r\n            this.menulistMaxHeight = parseInt(this.panelMaxHeight, 10);\r\n            this.listComs.toArray().forEach(listCom => {\r\n                  this.renderer.setStyle(listCom.nativeElement, 'max-height', this.menulistMaxHeight + 'px');\r\n            });\r\n      }\r\n     // 考虑drop的压缩情况，设置menulist的max-height\r\n      public restyleListMaxHeight(): void {\r\n            const dropCurMaxHeight: number = parseInt(this.dropComs.first.nativeElement.style.maxHeight, 10);\r\n            if (!isNaN(dropCurMaxHeight) && dropCurMaxHeight < this.menulistMaxHeight) {\r\n                  this.listComs.toArray().forEach(listCom => {\r\n                        this.renderer.setStyle(listCom.nativeElement, 'max-height',  dropCurMaxHeight + 'px');\r\n                  });\r\n            }\r\n      }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiDropModule } from '../drop/TiDropModule';\r\nimport { TiTipModule } from '../../directives/tip/TiTipModule';\r\nimport { TiMenuComponent } from './TiMenuComponent';\r\nimport { TiMenuListComponent } from './TiMenuListComponent';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiDropModule,\r\n    TiTipModule\r\n  ],\r\n  exports: [TiMenuComponent, TiMenuListComponent],\r\n  declarations: [TiMenuComponent, TiMenuListComponent]\r\n})\r\nexport class TiMenuModule {\r\n}\r\nexport { TiMenuComponent, TiMenuItem } from './TiMenuComponent';\r\nexport { TiMenuListComponent } from './TiMenuListComponent';\r\n","import {\r\n    Component,\r\n    ContentChild,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    IterableChanges,\r\n    IterableDiffer,\r\n    IterableDiffers,\r\n    KeyValueChanges,\r\n    KeyValueDiffer,\r\n    KeyValueDiffers,\r\n    Output,\r\n    Renderer2,\r\n    TemplateRef,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiMenuComponent, TiMenuItem } from '../menu/TiMenuModule';\r\nimport { TiLocale, TiLocaleWords } from '../../locale/TiLocaleModule';\r\nimport { TiPopconfirmConfig } from '../../directives/popconfirm/TiPopconfirmDirective';\r\n\r\n/**\r\n * 10.0.3/9.0.7版本新增该接口\r\n *\r\n * 在此之前版本可直接使用`TiMenuItem`接口\r\n */\r\nexport interface TiActionmenuItem extends TiMenuItem {\r\n    /**\r\n     * 气泡确认框配置，具体可参考tiPopconfirm指令\r\n     *\r\n     * 在actionmenu中，只有暴露在更多按钮外部，直接显示在页面中的菜单项，配置后会显示确认框\r\n     */\r\n    popConfig?: TiPopconfirmConfig;\r\n}\r\n\r\n// 空间设置规则：\r\n// 可显示项目数（children项目必须出现在“更多”），最大显示数目，空间宽度。\r\n// 更多”里面至少两个选项\r\n// 如果只有一个带children项目那么直接用menu。\r\n\r\n/**\r\n * ActionMenu菜单按钮组件\r\n *\r\n * ActionMenu组件主要是一组操作按钮。当按钮数量太多导致预留空间大小无法显示所有按钮时，自动将超出部分的按钮放置在一个menu组件下拉中。\r\n *\r\n * 使用该组件，用户只需关注操作项配置，无需关注操作项显示不足的情况。\r\n *\r\n * 注意：ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked.（本组件在调试环境报此错误，不必理会。生产环境不报错，功能也不受影响。）\r\n *\r\n * <example-url>../tiny3demo/#/actionmenu/actionmenu-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-actionmenu',\r\n    templateUrl: './actionmenu.html',\r\n    styleUrls: ['./actionmenu.less'],\r\n    host: {\r\n        '[style.max-width]': 'maxWidth'\r\n    }\r\n})\r\nexport class TiActionmenuComponent extends TiFormComponent {  // 本应继承自BaseComp，但是想要A标签焦点功能\r\n    /* Menu参数透传start */\r\n    /**\r\n     * 选项数据集\r\n     */\r\n    @Input() items: Array<TiActionmenuItem>;\r\n    /**\r\n     * 下拉面板最大宽度，超过时换行，对所有子菜单都生效。\r\n     */\r\n    @Input() panelMaxWidth: string = '130px';\r\n    /**\r\n     * 下拉面板最大高度度，超过时出现竖向滚动条，对所有子菜单都生效。\r\n     */\r\n    @Input() panelMaxHeight: string = '9999px';\r\n    /**\r\n     * 数据中要显示字符串的key\r\n     */\r\n    @Input() labelKey: string = 'label';\r\n    /**\r\n     * 用户点击选中菜单项事件\r\n     */\r\n    // tslint:disable-next-line:no-output-named-after-standard-event\r\n    @Output() readonly select: EventEmitter<TiActionmenuItem> = new EventEmitter<TiActionmenuItem>();\r\n    /* Menu参数透传end */\r\n\r\n    /**\r\n     * 外部容器宽度\r\n     */\r\n    @Input() maxWidth: string = '250px';\r\n    /**\r\n     * 各item的间距\r\n     */\r\n    @Input() space: string = '10px';\r\n    // 分割线为divider，分割字符叫做separator（比如分割ip里的点）\r\n    /**\r\n     * 各item之间是否展示分割线\r\n     *\r\n     * 3.1.3新增\r\n     */\r\n    @Input() showDivider: boolean = true;\r\n    /**\r\n     * 最大显示个数, 包含下拉菜单\r\n     */\r\n    @Input() maxShowNum: number = 4;\r\n    /**\r\n     * 下拉菜单上方显示文本\r\n     *\r\n     * 缺省值 : 更多/more（国际化）\r\n     */\r\n    @Input() moreText: string; // = '更多';\r\n    /**\r\n     * 只显示更多项下拉菜单时，下拉菜单上方显示文本\r\n     *\r\n     * 缺省值 : 操作/operation（国际化）\r\n     */\r\n    @Input() menuText: string; // = '操作';\r\n    /**\r\n     * 常常绑定表格本行数据。\r\n     */\r\n    @Input() data: any;\r\n    /**\r\n     * 表格本行data数据，转化为items数据。类型：(data: any) => Array<MenuItem>\r\n     */\r\n    @Input() dataToItemsFn: (data: any) => Array<TiActionmenuItem>;\r\n\r\n    /**\r\n     * @ignore\r\n     * 用户写的自定义模板\r\n     */\r\n    @ContentChild(TemplateRef, /* TODO: add static flag */ { static: true }) firstTemplate: TemplateRef<any>;\r\n    @ContentChild('item', /* TODO: add static flag */ { static: true }) itemTemplate: TemplateRef<any>; // 自定义 item 模板\r\n    @ContentChild('tip', /* TODO: add static flag */ { static: true }) tipTemplate: TemplateRef<any>; // 自定义 tip 模板\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild(TiMenuComponent, { static: true }) menuCom: TiMenuComponent;\r\n    /**\r\n     * @ignore\r\n     * 下拉菜单绑定的选项数据\r\n     */\r\n    public panelItems: Array<TiActionmenuItem> = [];\r\n    /**\r\n     * @ignore\r\n     * 各item之间间隔的一半距离\r\n     */\r\n    public halfSpace: string = '';\r\n\r\n    private itemsDiffer: IterableDiffer<TiActionmenuItem>;\r\n    private dataDiffer: KeyValueDiffer<any, any>;\r\n    private needInitItems: boolean = false;\r\n\r\n    constructor(protected hostRef: ElementRef, protected renderer: Renderer2,\r\n                private iterableDiffers: IterableDiffers, private keyValueDiffers: KeyValueDiffers) {\r\n        super(hostRef, renderer);\r\n        const localeWords: TiLocaleWords = TiLocale.getLocaleWords();\r\n        this.moreText = localeWords.tiActionmenu.more;\r\n        this.menuText = localeWords.tiActionmenu.operation;\r\n    }\r\n\r\n    // 纠正 IE下同一行两个元素 offsetTop 值可能存在的一些(目前测试到有1px)的误差\r\n    private static isEqualOffsetTop(elem1: any, elem2: any): boolean {\r\n        return Math.abs((elem1 as HTMLElement).offsetTop - (elem2 as HTMLElement).offsetTop) <= 2;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     *  选中菜单内选项\r\n     * @param item 菜单项数据\r\n     */\r\n    public onSelect(item: TiActionmenuItem): void {\r\n        if (!item.disabled) {\r\n            this.select.emit(item);\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.panelItems = this.items;\r\n        this.halfSpace = Number.parseInt(this.space, 10) / 2 + 'px';\r\n    }\r\n    ngDoCheck(): void {\r\n        if (this.data) {\r\n            if (!this.dataDiffer) { // 首次docheck是ngOnInit()之后\r\n                this.dataDiffer = this.keyValueDiffers.find(this.data)\r\n                    .create();\r\n            }\r\n            const dataChanges: KeyValueChanges<any, any> | null = this.dataDiffer.diff(this.data);\r\n            if (dataChanges) { // 根据data初始化items. 注意：第一次diff会走入changes\r\n                this.items = this.dataToItemsFn(this.data);\r\n            }\r\n        }\r\n        if (this.items) {\r\n            if (!this.itemsDiffer) {\r\n                this.itemsDiffer = this.iterableDiffers.find(this.items)\r\n                    .create();\r\n                this.needInitItems = true;\r\n            }\r\n            const itemsChanges: IterableChanges<TiActionmenuItem> | null = this.itemsDiffer.diff(this.items);\r\n            // 注意：如果有数据，那么第一次diff会就走入changes。如果是空数据，第一次diff结果是null，不会进入changes。\r\n            if (itemsChanges) { // 如果items改变，则重新初始化。\r\n                this.needInitItems = true;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 兼容旧版：\r\n     * 10.0.3 版本之前只能内嵌一个模板，无命名。\r\n     * 新版可以内嵌两个模板，示例书写要求都命名（#item，#tip）。\r\n     * 但需要兼容旧版无命名测试用例。\r\n     */\r\n    // tslint:disable-next-line: use-life-cycle-interface\r\n    ngAfterContentInit(): void {\r\n          super.ngAfterContentInit();\r\n          // 如果 item 模板为空 && 存在第一个模板，那么把第一个出现的 “非 #tip 标签” 的模板作为 item 模板\r\n          if (!this.itemTemplate && this.firstTemplate\r\n              && (this.firstTemplate.elementRef.nativeElement !== (this.tipTemplate && this.tipTemplate.elementRef.nativeElement))) {\r\n                this.itemTemplate = this.firstTemplate;\r\n          }\r\n    }\r\n    ngAfterViewChecked(): void {\r\n        if (this.needInitItems) {\r\n            this.initItems();\r\n        }\r\n        super.ngAfterViewChecked(); // 内部执行了autofocus\r\n    }\r\n    /**\r\n     * 计算那些item应该显示在外部，移除不该显示的item，调整pannel上显示的item项，调整menu显示的文字。\r\n     */\r\n    private initItems(): void {\r\n\r\n        this.needInitItems = false;\r\n\r\n        const itemElems: HTMLCollection = this.hostRef.nativeElement.getElementsByClassName('ti3-action-menu-item');\r\n        const dividingElems: HTMLCollection = this.hostRef.nativeElement.getElementsByClassName('ti3-action-menu-divider');\r\n        const menuElem: HTMLElement = this.menuCom.nativeElement;\r\n        const moreTextElem: HTMLElement = this.hostRef.nativeElement.getElementsByClassName('tiMoreText')[0];\r\n        const menuTextElem: HTMLElement = this.hostRef.nativeElement.getElementsByClassName('tiMenuText')[0];\r\n        // 情况一：items为空\r\n        if (!this.items || this.items.length === 0) {\r\n            this.setDisplay(menuElem, false);\r\n\r\n            return;\r\n        } else {\r\n            this.setDisplay(menuElem, true);\r\n        }\r\n        // 注意: itemElems不是数组，并且数据更新时，取到的length不对。所以，得使用items的length\r\n        let firstChildrenIndex: number = -1; // 第一个含有子项目的索引\r\n        // 这个for循环，做了两件事：找含有子项目，重置item可见。\r\n        for (let i: number = 0; i < this.items.length; i++) {\r\n            if (this.items[i].hasOwnProperty('children')) {\r\n                firstChildrenIndex = i; // 找到第一个含有子项目的索引\r\n                // break;\r\n            }\r\n            this.setDisplay(itemElems[i], true); // 因为动态修改item，所以第二次进入时需要重置item可见。\r\n        }\r\n\r\n        // 情况二：不显示menu  //条件：没有超过最大显示个数，且最后一个项目也在第一行, 且没有子项\r\n        if (this.items.length <= this.maxShowNum\r\n            && TiActionmenuComponent.isEqualOffsetTop(itemElems[this.items.length - 1], itemElems[0])\r\n            && firstChildrenIndex === -1) {\r\n\r\n            for (let i: number = 0; i < this.items.length; i++) {\r\n                this.setAttr(itemElems[i], 'disabled', this.items[i].disabled);\r\n            }\r\n            this.setDisplay(menuElem, false);\r\n            // 设置可聚焦元素\r\n            const focusItems: Array<any> = [];\r\n            for (let i: number = 0; i < this.items.length; i++) {\r\n                focusItems.push(itemElems[i]);\r\n            }\r\n            this.setFocusableElems(focusItems);\r\n\r\n            return;\r\n        }\r\n        // 情况三：显示Menu，显示数目条件：有子项目的一定在菜单内/倒数第二个一定在菜单内/最大显示个数（含menu）。3值取最小。\r\n        if (firstChildrenIndex === -1) {\r\n            firstChildrenIndex = this.items.length; // firstChild给一个超越数组大小的索引，方便下面计算\r\n        }\r\n        let outShowNum: number = (this.items.length - 2) < (this.maxShowNum - 1) ? (this.items.length - 2) :\r\n            (this.maxShowNum - 1) < (firstChildrenIndex + 1) ? (this.maxShowNum - 1) : (firstChildrenIndex + 1);\r\n\r\n        for (let i: number = this.items.length - 1; i >= 0; i--) {\r\n            if (i > outShowNum - 1) { // 本项属于超出的数目，先删除掉\r\n                //  TODO: remove和style哪个效率高？\r\n                this.setDisplay(itemElems[i], false);\r\n                if (dividingElems[i]) {\r\n                    this.setDisplay(dividingElems[i], false);\r\n                }\r\n            } else if (!TiActionmenuComponent.isEqualOffsetTop(menuElem, itemElems[0])) { // 菜单没有在第一行，删除本项\r\n                this.setDisplay(itemElems[i], false);\r\n                if (dividingElems[i]) {\r\n                    this.setDisplay(dividingElems[i], false);\r\n                }\r\n                outShowNum--;\r\n            } else {\r\n                this.setAttr(itemElems[i], 'disabled', this.items[i].disabled);\r\n            }\r\n        }\r\n\r\n        // 设置菜单显示文字，设置可聚焦元素\r\n        if (outShowNum === 0) { // 立即生效，否则根据模板变量生效慢\r\n            this.renderer.setStyle(menuElem, 'margin-left', '0px');\r\n            this.setDisplay(moreTextElem, false);\r\n            this.setDisplay(menuTextElem, true);\r\n            // 设置可聚焦元素\r\n            this.setFocusableElems(this.menuCom.getFocusableElems());\r\n        } else {\r\n            this.setDisplay(moreTextElem, true);\r\n            this.setDisplay(menuTextElem, false);\r\n            // 设置可聚焦元素\r\n            const focusItems: Array<any> = [];\r\n            for (let i: number = 0; i < outShowNum; i++) {\r\n                focusItems.push(itemElems[i]);\r\n            }\r\n            this.setFocusableElems(focusItems.concat(this.menuCom.getFocusableElems()));\r\n        }\r\n\r\n        /**\r\n         * 此句改变了模板变量，需要强制刷新\r\n         * 这里引起ng-serve环境报错ExpressionChangedAfterItHasBeenCheckedError, 所以用Promise延时\r\n         */\r\n        Promise.resolve().then(() => {\r\n            this.panelItems = this.items.slice(outShowNum, this.items.length);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 设置显示/隐藏样式，比ngIf更及时生效。\r\n     * @param elem HTML元素\r\n     * @param isShow 是否显示\r\n     */\r\n    private setDisplay(elem: any, isShow: boolean): void {\r\n        this.renderer.setStyle(elem, 'display', isShow ? 'inline-block' : 'none');\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * ngFor遍历的 trackBy函数，防止数据更新导致所有DOM重新渲染。TODO：这里是否该使用trackBy?\r\n     * @param index 索引\r\n     * @param item 数据\r\n     * @returns 索引\r\n     */\r\n    public trackByFn(index: any, item: any): any {\r\n        return index;\r\n    }\r\n}\r\n","import { AfterViewInit, Component, ElementRef, Input, OnInit, Renderer2 } from '@angular/core';\r\nimport { TiLocale } from '../../locale/TiLocaleModule';\r\nimport { TiBaseComponent } from '../../components/base/TiBaseModule';\r\n\r\n@Component({\r\n    templateUrl: 'popconfirm.html',\r\n    styleUrls: ['./popconfirm.less'],\r\n    host: {\r\n        '[class.ti3-popconfirm-container]': 'true',\r\n        '[tabindex]': '0'\r\n    }\r\n})\r\n\r\nexport class TiPopconfirmComponent extends TiBaseComponent implements OnInit, AfterViewInit {\r\n    @Input() config: any;\r\n    @Input() destroyPopover: (result?: boolean) => void;\r\n    private readonly tiPopconfirm: any = TiLocale.getLocaleWords().tiPopconfirm;\r\n\r\n\r\n    ngOnInit(): void {\r\n        this.config.yesText = this.config.yesText ||  this.tiPopconfirm.yesLabel;\r\n        this.config.noText = this.config.noText || this.tiPopconfirm.noLabel;\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        // 轻量级弹窗阴影定制\r\n        this.renderer.addClass(this.nativeElement.offsetParent, 'ti3-popconfirm-tip'); // 在init中设置会影响button样式 TODO: IE下还存在背景闪烁问题\r\n    }\r\n}\r\n","import { Component, Input, Renderer2, ViewEncapsulation, ElementRef, NgZone, AfterViewInit } from '@angular/core';\r\nimport { TiAutofocusComponent } from '../base/TiBaseModule';\r\n\r\n/**\r\n * Button按钮组件\r\n *\r\n * 尽管这是一个组件，但使用方法有点像属性指令。\r\n *\r\n * 按钮组件基于原生button组件进行扩展，原生button加tiButton属性即为tiny button，button的多种样式则通过为button设置不同的样式类来进行区分，具体用法见示例。\r\n *\r\n * <example-url>../tiny3demo/#/button/button-all</example-url>\r\n */\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: '[tiButton]',\r\n    templateUrl: './button.html',\r\n    styleUrls: ['./button.less'],\r\n    host: {\r\n        '[class.ti3-btn-primary]': 'color === \"primary\"',\r\n        '[class.ti3-btn-danger]': 'color === \"danger\"',\r\n        '[class.ti3-btn-icon]': 'icon',\r\n        '[class.ti3-btn-onlyIcon]': 'onlyIcon',\r\n        '[class.ti3-btn-large]': 'size === \"large\"',\r\n        '[class.ti3-btn-middle]': 'size === \"middle\"',\r\n        '[class.ti3-btn-small]': 'size === \"small\"',\r\n        '[class.ti3-btn-xs]': 'size === \"xs\"',\r\n        '[class.ti3-btn-loading]': 'loading'\r\n    },\r\n    encapsulation: ViewEncapsulation.None // 让宿主元素也用上button.less样式。否则，默认胶囊封装避免CSS污染。\r\n})\r\nexport class TiButtonComponent extends TiAutofocusComponent implements AfterViewInit {\r\n    /**\r\n     * 按钮颜色：默认按钮/强调色按钮/主题色按钮\r\n     */\r\n    @Input() color:  'default' | 'danger' |'primary' = 'default';\r\n    /**\r\n     * 是否含有icon\r\n     */\r\n    @Input() icon: boolean = false;\r\n    /**\r\n     * 是否为纯图标按钮\r\n     */\r\n    @Input() onlyIcon: boolean = false;\r\n    /**\r\n     * 样式大小：XS/S/M/L四个尺寸按钮 默认M尺寸\r\n     */\r\n    @Input() size: 'xs'|'small'|'middle'|'large' = 'middle';\r\n    /**\r\n     * 10.1.4新增\r\n     *\r\n     * 是否处于加载状态，主要用于弹窗的异步任务提交场景\r\n     */\r\n    @Input() loading: boolean = false;\r\n\r\n     constructor(public renderer: Renderer2, private hostEle: ElementRef, private zone: NgZone) {\r\n        super(hostEle, renderer);\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.zone.runOutsideAngular(() => {\r\n            this.renderer.listen(this.hostEle.nativeElement, 'mousedown', (): void => {\r\n                this.renderer.setStyle(this.hostEle.nativeElement, 'outline', 'none');\r\n            });\r\n            this.renderer.listen(this.hostEle.nativeElement, 'blur', (): void => {\r\n                this.renderer.setStyle(this.hostEle.nativeElement, 'outline', '');\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\n/**\r\n * Loading组件用于加载场景，提供了两种类型\r\n *\r\n * 10.0.3新增\r\n *\r\n * <example-url>../tiny3demo/#/loading/loading-all</example-url>\r\n */\r\n@Component({\r\n  selector: 'ti-loading',\r\n  templateUrl: './loading.html',\r\n  styleUrls: ['./loading.less'],\r\n})\r\n\r\nexport class TiLoadingComponent extends TiBaseComponent {\r\n  /**\r\n   * @ignore\r\n   * 弱类型有4个圈\r\n   */\r\n  public items: Array<any> = [];\r\n\r\n  @Input() type: 'default' | 'weak' = 'default'; // 加载类型\r\n  @Input() size: 'small' | 'middle' | 'large' | string = 'small'; // 加载尺寸\r\n\r\n  // tslint:disable-next-line:use-life-cycle-interface\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.items.length = 4;\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * 根据用户传入尺寸获取border的宽度\r\n   */\r\n  getBorderWidth(size: string): string {\r\n    return parseInt(size, 10) * 0.3 / 2 + 'px';\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiLoadingComponent } from './TiLoadingComponent';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [TiLoadingComponent],\r\n  declarations: [TiLoadingComponent]\r\n})\r\nexport class TiLoadingModule {\r\n}\r\nexport { TiLoadingComponent } from './TiLoadingComponent';\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiButtonComponent } from './TiButtonComponent';\r\nimport { TiLoadingModule } from '../loading/TiLoadingModule';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, TiLoadingModule],\r\n  exports: [TiButtonComponent],\r\n  declarations: [TiButtonComponent]\r\n})\r\nexport class TiButtonModule {\r\n}\r\nexport { TiButtonComponent } from './TiButtonComponent';\r\n","import { ComponentRef, Directive, ElementRef, HostListener, Input, NgZone, OnDestroy, OnInit, Renderer2, Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\nimport { TiPositionType } from '../../utils/Position';\r\nimport { TiTipRef } from '../../services/tip/TiTipInterface';\r\nimport { TiTipService } from '../../services/tip/TiTipService';\r\nimport { TiTipDirective } from '../../directives/tip/TiTipDirective';\r\nimport { TiPopconfirmComponent } from './TiPopconfirmComponent';\r\nimport { Util, TiKeymap } from '../../utils/Util';\r\n\r\nexport interface TiPopconfirmConfig {\r\n    /**\r\n     * 设置确认框id\r\n     */\r\n    id?: string;\r\n    /**\r\n     * 设置确认框描述信息\r\n     */\r\n    content: string;\r\n    /**\r\n     * 自定义是按钮文本\r\n     */\r\n    yesText?: string;\r\n    /**\r\n     * 自定义否按钮文本\r\n     */\r\n    noText?: string;\r\n    /**\r\n     * 设置是按钮为强调按钮\r\n     */\r\n    yesPrimary?: boolean;\r\n    /**\r\n     * 设置确认框弹出方向\r\n     */\r\n    position?: TiPositionType;\r\n    /**\r\n     * 触发'是'按钮事件\r\n     */\r\n    close?(data?: any): void;\r\n    /**\r\n     * 触发'否'按钮事件\r\n     */\r\n    dismiss?(data?: any): void;\r\n    /**\r\n     * 允许有多余的属性字段\r\n     */\r\n    [propName: string]: any;\r\n\r\n}\r\n\r\n/**\r\n * TiPopconfirm 气泡确认框指令\r\n *\r\n * 一般用于操作执行后对用户业务不会有严重影响的轻量级场景。\r\n *\r\n * 10.0.3/9.0.7版本新增\r\n *\r\n * <example-url>../tiny3demo/#/popconfirm/popconfirm-all</example-url>\r\n */\r\n@Directive({\r\n    selector: '[tiPopconfirm]'\r\n})\r\nexport class TiPopconfirmDirective extends TiTipDirective implements OnInit, OnDestroy {\r\n    /**\r\n     * 气泡确认框配置对象\r\n     */\r\n    @Input() tiPopconfirm: TiPopconfirmConfig;\r\n    /**\r\n     * 10.1.1新增\r\n     *\r\n     * 数据接口， 常常绑定表格本行数据。\r\n     */\r\n    @Input() data: any;\r\n    protected tipInstance: TiTipRef;\r\n    private hostElement: any;\r\n    private popoverComponentRef: ComponentRef<any> = null;\r\n    private unlistenClick: () => void;\r\n     // 可聚焦元素\r\n     private focusableElementsString: string = `a[href], area[href], input:not([disabled]):not([tabindex=\\'-1\\']),\r\n     button:not([disabled]):not([tabindex=\\'-1\\']),select:not([disabled]):not([tabindex=\\'-1\\']),\r\n     textarea:not([disabled]):not([tabindex=\\'-1\\']),\r\n     iframe, object, embed, *[tabindex]:not([tabindex=\\'-1\\']), *[contenteditable=true]`;\r\n    constructor(private tiTipService: TiTipService, private hostEleRef: ElementRef, private zone: NgZone, private render: Renderer2,\r\n                @Inject(DOCUMENT) private document) {\r\n        super(tiTipService, hostEleRef);\r\n    }\r\n    /**\r\n     * tip组件配置\r\n     */\r\n    private tipConfig: any = {\r\n        trigger: 'manual',\r\n        theme: 'white'\r\n    };\r\n    private unListenDocumentKeydown: () => void;\r\n\r\n    ngOnInit(): void {\r\n        if (!this.tiPopconfirm || !this.tiPopconfirm.content) {\r\n            return;\r\n        }\r\n        this.hostElement = this.hostEleRef.nativeElement;\r\n        // 创建实例\r\n        this.tipInstance = this.tiTipService.create(this.hostElement, {\r\n            ...this.tipConfig,\r\n            position: this.tiPopconfirm.position,\r\n            registerVisibilityChangeEvent: false\r\n        });\r\n\r\n        this.addClickEvent();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.tipInstance) {\r\n            super.ngOnDestroy();\r\n        }\r\n        if (this.unlistenClick) {\r\n            this.unlistenClick();\r\n        }\r\n        if (this.unListenDocumentKeydown) {\r\n            this.unListenDocumentKeydown();\r\n        }\r\n\r\n    }\r\n\r\n    private addClickEvent(): void {\r\n        this.zone.runOutsideAngular(() => {\r\n            this.unlistenClick = this.render.listen(this.document, 'click', (event: MouseEvent) => {\r\n                if (this.hostElement.contains(event.target) && !this.popoverComponentRef) {\r\n                    this.showPopandFocus();\r\n\r\n                    return;\r\n                }\r\n                const tipElement: any = this.popoverComponentRef && this.popoverComponentRef.location.nativeElement;\r\n                if (!(tipElement && tipElement.contains(event.target))) {\r\n                    this.zone.run(() => {\r\n                        this.hide();\r\n                    });\r\n                    this.popoverComponentRef = null;\r\n                }\r\n            });\r\n\r\n            this.unListenDocumentKeydown = this.render.listen(document, 'keydown', (event: KeyboardEvent): void => {\r\n                switch (event.which) {\r\n                    case TiKeymap.KEY_TAB: // tab键用于处理在提示框内循环获取焦点\r\n                        this.clickTab(event);\r\n                        break;\r\n                    case TiKeymap.KEY_ENTER:\r\n                        if (this.hostElement.contains(event.target) && !this.popoverComponentRef) {\r\n                            this.showPopandFocus();\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    public clickTab(event: KeyboardEvent): void {\r\n        const dialogModalEle: HTMLElement = document.querySelector('.ti3-popconfirm-container');\r\n        const focusableElements: NodeList = dialogModalEle?.querySelectorAll(this.focusableElementsString);\r\n        Util.focusInDialogOnTabchange(event, focusableElements);\r\n    }\r\n    /**\r\n     * 打开气泡组件，并且把焦点转移到提示框内部，为后续把焦点限制在提示框内做准备。\r\n     * @private\r\n     */\r\n    private showPopandFocus(): void {\r\n        this.zone.run(() => {\r\n            this.popoverComponentRef = this.show();\r\n            const popContainerEle: HTMLElement = document.querySelector('.ti3-popconfirm-container');\r\n            if (popContainerEle) {\r\n                popContainerEle.focus();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 显示气泡确认框\r\n     * @ignore\r\n     */\r\n    public show(): ComponentRef<any> {\r\n        if (!this.tipInstance) {\r\n            return;\r\n        }\r\n        const destroyPopover: (result?: boolean) => void = (result?: boolean): void => {\r\n            this.hide();\r\n            if (result && Util.isFunction(this.tiPopconfirm.close)) {\r\n                this.tiPopconfirm.close(this.data);\r\n            } else if (!result && Util.isFunction(this.tiPopconfirm.dismiss)) {\r\n                this.tiPopconfirm.dismiss(this.data);\r\n            }\r\n        };\r\n\r\n        return this.tipInstance.show(TiPopconfirmComponent, {\r\n            id: this.tiPopconfirm.id,\r\n            config: this.tiPopconfirm,\r\n            destroyPopover\r\n        });\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiPopconfirmComponent } from './TiPopconfirmComponent';\r\nimport { TiTipServiceModule } from '../../services/tip/TiTipServiceModule';\r\nimport { TiLocaleModule } from '../../locale/TiLocaleModule';\r\nimport { TiIconModule } from '../../components/icon/TiIconModule';\r\nimport { TiButtonModule } from '../../components/button/TiButtonModule';\r\nimport { TiPopconfirmDirective } from './TiPopconfirmDirective';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiTipServiceModule,\r\n    TiLocaleModule,\r\n    TiIconModule,\r\n    TiButtonModule\r\n  ],\r\n  exports: [TiPopconfirmDirective],\r\n  declarations: [TiPopconfirmComponent, TiPopconfirmDirective],\r\n  entryComponents: [TiPopconfirmComponent]\r\n})\r\n\r\nexport class TiPopconfirmModule { }\r\nexport { TiPopconfirmComponent } from './TiPopconfirmComponent';\r\nexport { TiPopconfirmDirective, TiPopconfirmConfig } from './TiPopconfirmDirective';\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiActionmenuComponent } from './TiActionmenuComponent';\r\nimport { TiMenuModule } from '../menu/TiMenuModule';\r\nimport { TiTipModule } from '../../directives/tip/TiTipModule';\r\nimport { TiPopconfirmModule } from '../../directives/popconfirm/TiPopconfirmModule';\r\n\r\n@NgModule({\r\n  imports: [ CommonModule,\r\n    TiMenuModule,\r\n    TiTipModule,\r\n    TiPopconfirmModule],\r\n  exports: [TiActionmenuComponent],\r\n  declarations: [TiActionmenuComponent]\r\n})\r\nexport class TiActionmenuModule {\r\n}\r\nexport { TiActionmenuComponent, TiActionmenuItem } from './TiActionmenuComponent';\r\n","import { Component, EventEmitter, Input, Output, ElementRef, Renderer2, Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\nimport { Util } from '../../utils/Util';\r\n\r\n\r\n/**\r\n * Alert组件用于消息提示，提供了四种类型\r\n *\r\n * <example-url>../tiny3demo/#/alert/alert-all</example-url>\r\n */\r\n@Component({\r\n  selector: 'ti-alert',\r\n  templateUrl: './alert.html',\r\n  styleUrls: ['./alert.less']\r\n})\r\n\r\nexport class TiAlertComponent extends TiBaseComponent {\r\n    /**\r\n     * 是否显示左侧提示类型图标\r\n     */\r\n    @Input() typeIcon: boolean = true;\r\n    /**\r\n     * 是否显示关闭按钮\r\n     */\r\n    @Input() closeIcon: boolean = true;\r\n    /**\r\n     * 显示多长时间后消失，默认不延迟消失，只在点击关闭按钮时消失\r\n     */\r\n    @Input() dismissOnTimeout: number;\r\n    /**\r\n     * 是否触发下拉类组件消失的事件，适用于alert的呈现状态影响页面下拉类组件位置的场景\r\n     */\r\n    @Input() triggerScroll: boolean = false;\r\n    /**\r\n     * 弹框类型\r\n     */\r\n    @Input() type: 'success'|'error'|'warn'|'prompt'|'simple' = 'success';\r\n    /**\r\n     * 样式大小\r\n     */\r\n    @Input() size: 'normal' | 'small' = 'normal';\r\n    private isOpen: boolean = true;\r\n    /**\r\n     * 是否为深色背景提示框\r\n     */\r\n    @Input() darkTheme: boolean = false;\r\n    /**\r\n     * @ignore\r\n     * 是否设置阴影，组件规范定义无阴影（页面级及卡片内）\r\n     */\r\n    @Input() boxShadow:boolean = false;\r\n    /* tslint:disable:no-redundant-jsdoc */\r\n    /**\r\n     * 用于设置弹框是否弹出，可动态修改，默认值为true\r\n     *\r\n     * **请注意：动态修改情况下，需要设置为双向绑定，以确保组件延迟消失时open状态的正确感知**\r\n     *\r\n     * @type：boolean\r\n     *\r\n     */\r\n    @Input()\r\n    // 由于内部/外部设置open都会执行同样的逻辑，因此使用set/get\r\n    /**\r\n     * @ignore\r\n     */\r\n    get open(): boolean {\r\n        return this.isOpen;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    set open(value: boolean) {\r\n        if (value === this.open) {\r\n            return;\r\n        }\r\n        if (value) {// 值为true时，才会延迟关闭\r\n            this.dismissOnTime();\r\n        } else {// 值为false时，关闭时清除定时器\r\n            this.clearTimeout();\r\n        }\r\n        // open动态修改均涉及tiScroll事件\r\n        this.triggerScrollEvent();\r\n        this.isOpen = value;\r\n    }\r\n    /**\r\n     * open状态变化事件，点击关闭按钮或延时消失时都会触发\r\n     */\r\n    @Output() readonly openChange: EventEmitter<Boolean> = new EventEmitter();\r\n    private timeoutId: any; // 内部变量，存储定时器ID\r\n\r\n    constructor(protected hostRef: ElementRef, protected renderer: Renderer2, @Inject(DOCUMENT) private document) {\r\n        super(hostRef, renderer);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        // 初始open值为true时，设置延时关闭\r\n        if (this.open) {\r\n            this.dismissOnTime();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.timeoutId !== undefined) {\r\n            clearTimeout(this.timeoutId);\r\n            if (this.open) {\r\n                this.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * alert呈现后，处理多长时间后消失\r\n     */\r\n    dismissOnTime(): void {\r\n        // 未配置消失时间或当前已处于隐藏状态，则不做处理\r\n        if (isNaN(this.dismissOnTimeout)) {\r\n            return;\r\n        }\r\n        this.timeoutId = setTimeout(() => {\r\n            this.close();\r\n        }, this.dismissOnTimeout);\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 关闭alert方法，供内部关闭调用\r\n     */\r\n    close(): void {\r\n        this.open = false;\r\n        this.openChange.emit(this.open); // 及时通知open状态，确保open状态双向绑定功能正常\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * alert出现或者消失时，可能会触发页面滚动，此时需要触发tiScroll事件通知相关组件\r\n     */\r\n    triggerScrollEvent(): void {\r\n        if (!this.triggerScroll) {\r\n            return;\r\n        }\r\n        setTimeout(() => {\r\n            Util.trigger(this.document, 'tiScroll');\r\n        }, 0);\r\n    }\r\n\r\n    private clearTimeout(): void {\r\n        if (this.timeoutId !== undefined) {\r\n            clearTimeout(this.timeoutId);\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiAlertComponent } from './TiAlertComponent';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\nimport { TiOutlineModule } from '../../directives/outline/TiOutlineModule';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiIconModule,\r\n    TiOutlineModule\r\n  ],\r\n  exports: [TiAlertComponent],\r\n  declarations: [TiAlertComponent]\r\n})\r\nexport class TiAlertModule {\r\n}\r\nexport { TiAlertComponent } from './TiAlertComponent';\r\n","import { Component, ContentChild, ElementRef, EventEmitter, HostListener, Input, NgZone, Output,\r\n    Renderer2, TemplateRef, ViewChild, SimpleChanges } from '@angular/core';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiDropComponent } from '../drop/TiDropModule';\r\nimport { TiListComponent } from '../list/TiListModule';\r\nimport { TiBrowser, TiKeymap } from '../../utils/Util';\r\nimport { Position, TiPositionType } from '../../utils/Position';\r\n\r\n/**\r\n * @ignore\r\n * 下拉面板带有数组列表组件，用于aucomplete等。它有子类TiDropsearchComponent\r\n */\r\n@Component({\r\n    selector: 'ti-droplist',\r\n    templateUrl: './droplist.html',\r\n    providers: [TiFormComponent.getValueAccessor(TiDroplistComponent)]\r\n})\r\nexport class TiDroplistComponent extends TiFormComponent {\r\n\r\n    /**\r\n     * 带搜索框情况下需要去除的高度\r\n     */\r\n    // tslint:disable-next-line:binary-expression-operand-order\r\n    protected static readonly SEARCHBOX_EXCLUDE_HEIGHT: number = 28; // 下拉框中的搜索框的高度\r\n    /**\r\n     * 默认高度8条 DEFAULT_LIST_MAX_HEIGHT\r\n     */\r\n    protected defaultListMaxHeight: number = 30 * 8 + 8;\r\n    /**\r\n     * 面板中，除去list外，其它元素的占位高度\r\n     */\r\n    protected heightExcludeList: number = 2;\r\n    /**\r\n     * drop面板最大高度\r\n     */\r\n    private dropMaxHeight: number;\r\n    /**\r\n     * drop面板自定义底部高度\r\n     */\r\n     private footerHeight: number = 0;\r\n    /**\r\n     * droplist依附的元素，需要使用该元素进行droplist的定位处理\r\n     */\r\n    @Input() dominatorElem: HTMLElement;\r\n    /**\r\n     * 是否多选\r\n     */\r\n    @Input() multiple: boolean = false;\r\n    /**\r\n     * 下拉面板的最大显示宽度，该变量与下拉类组件保持一致\r\n     *\r\n     * 1.\"justified\"(默认): 下拉框的宽度与Select组件的宽度保持一致；\r\n     *\r\n     * 2.\"auto\": 下拉框的宽度根据下拉选项的内容自动撑开；\r\n     *\r\n     * 3.表示宽度的字符串: 设置固定的下拉框宽度(不小于Select组件的宽度)。例如：\"200px\"\r\n     */\r\n    @Input() panelWidth: 'justified' | 'auto' | string = 'justified';\r\n    /**\r\n     * 下拉面板的最大显示高度，溢出时则出滚动条,该变量名与下拉类组件保持一致\r\n     */\r\n    @Input() panelMaxHeight: string;\r\n    @Input() options: Array<any>;\r\n    @Input() labelKey: string = 'label';\r\n    @Input() noDataText: string = '...';\r\n    @Input() tipPosition: TiPositionType = 'right';\r\n    @Input() dominatorSpace: string = TiDropComponent.DOMINATOR_SPACE + 'px'; // 10.0.1新增\r\n    @Input() panelAlign: 'left'|'right' = 'left'; // 10.0.1新增\r\n    /**\r\n     * 内部接口，用作suggestion时type传入suggestion，默认值default\r\n     */\r\n    @Input() type: 'default' | 'suggestion' = 'default';\r\n    /**\r\n     * 大小样式，default/small. 默认值default\r\n     */\r\n    @Input() size: 'default' | 'small' = 'default';\r\n    /**\r\n     * 选中选项后面板是否保持显示， 默认值false\r\n     */\r\n    @Input() isShowAfterSelect: boolean = false;\r\n\r\n    /**\r\n     * 选中事件，向外通知option数据\r\n     */\r\n    // tslint:disable-next-line:no-output-named-after-standard-event\r\n    @Output() readonly select: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @ViewChild(TiDropComponent, { static: true }) dropCom: TiDropComponent;\r\n    @ViewChild(TiListComponent, { static: true }) listCom: TiListComponent;\r\n    @ViewChild('footer', { static: false }) footerElemRef: ElementRef;\r\n    /**\r\n     * 自定义list中的item的模板\r\n     */\r\n    @ContentChild(TemplateRef, /* TODO: add static flag */ { static: true }) itemTemplate: TemplateRef<any>;\r\n    /**\r\n     * 储存donimator bottom旧值\r\n     */\r\n    private dominatorLastBottom: number = undefined;\r\n    /**\r\n     * 储存donimator left旧值\r\n     */\r\n    private dominatorLastLeft: number = undefined;\r\n\r\n    private unlistenKeydownFn: () => void;\r\n    constructor(protected render: Renderer2, hostRef: ElementRef, private zone: NgZone) {\r\n        super(hostRef, render);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        // 初始设置list高度\r\n        this.initListMaxHeight();\r\n        this.listenKeydown(this.dominatorElem);\r\n    }\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        super.ngOnChanges(changes);\r\n        // dominatorElem 改变后重新添加监听\r\n        if (changes['dominatorElem'] && !changes['dominatorElem'].firstChange) {\r\n            this.unlistenKendown();\r\n            this.listenKeydown(this.dominatorElem);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        super.ngOnDestroy();\r\n        // 解除按键监听\r\n        this.unlistenKendown();\r\n        // 解除IE滚动条Bug的监听\r\n        this.listCom.unlistenIESrollbarBug();\r\n    }\r\n    /**\r\n     * 当做生命周期用吧，监听模型值变化。包括writeValue和this.model=赋值 这两个时刻。\r\n     * @param model ngModel值\r\n     */\r\n    protected ngOnModelChange(model: any): void {\r\n        super.ngOnModelChange(model);\r\n        if (!this.multiple || !this.dominatorElem) {  // 多选才会有dominator行高切换\r\n            return;\r\n        }\r\n        if (this.dominatorLastBottom === undefined && this.dominatorElem) { // 第一次只记录位置，不走进重定位逻辑\r\n            // 修复SSR错误：ERROR TypeError: this.dominatorElem.getBoundingClientRect is not a function\r\n            if(typeof this.dominatorElem.getBoundingClientRect === 'function'){\r\n                this.dominatorLastBottom = this.dominatorElem.getBoundingClientRect().bottom;\r\n                this.dominatorLastLeft = this.dominatorElem.getBoundingClientRect().left;\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n            setTimeout(() => { // TODO：这里setTimeout能否去除？\r\n                if(!this.dominatorElem){\r\n                    return;\r\n                }\r\n                // ngModel更新（点击checkbox，或者点击叉叉号）后，dominator有可能一行/两行变换，所以更新下拉面板位置。\r\n                // 甚至donimator本身位置也会变动。（比如测试用例中元素变动，引起donimator本身变动 ???）\r\n                if (this.dominatorLastBottom !== this.dominatorElem.getBoundingClientRect().bottom ||\r\n                    this.dominatorLastLeft !== this.dominatorElem.getBoundingClientRect().left) {\r\n                    if (this.dropCom.isShow) {\r\n                        // 仅当高度变化时，重定位。\r\n                        this.rePosition();\r\n                    }\r\n                    this.dominatorLastBottom = this.dominatorElem.getBoundingClientRect().bottom;\r\n                    this.dominatorLastLeft = this.dominatorElem.getBoundingClientRect().left;\r\n                }\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n    /**\r\n     *  监听keydown\r\n     * @param focusElem 焦点元素\r\n     */\r\n    protected listenKeydown(focusElem: HTMLElement): void {\r\n        if (!focusElem) {\r\n            return;\r\n        }\r\n        this.unlistenKeydownFn = this.renderer.listen(focusElem, 'keydown',\r\n            (event: KeyboardEvent) => {\r\n                if (!this.isShow) {\r\n                    return;\r\n                }\r\n                // 10.0.2删除 KEY_SPACE 空格快捷键的响应\r\n                switch (event.keyCode) {\r\n                    case TiKeymap.KEY_ESCAPE: // Esc键，仅可关闭\r\n                    case TiKeymap.KEY_TAB: // Tab键，仅可关闭\r\n                        event.preventDefault(); // 阻止触发blurFn\r\n                        this.hide();\r\n                        break;\r\n                    case TiKeymap.KEY_ARROW_UP: // 向上箭头，上移选项\r\n                    case TiKeymap.KEY_ARROW_DOWN: // 向下箭头，下移选项\r\n                    case TiKeymap.KEY_ENTER: // ENTER键 相当于click\r\n                    case TiKeymap.KEY_NUMPAD_ENTER: // ENTER键(苹果数字小键盘)\r\n                        this.listCom.onKeydown(event);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                // 如果droplist响应了按键，那么就不再冒泡。\r\n                event.stopPropagation();\r\n            }\r\n        );\r\n    }\r\n    protected unlistenKendown(): void {\r\n        if (this.unlistenKeydownFn) {\r\n            this.unlistenKeydownFn();\r\n        }\r\n    }\r\n    /**\r\n     * 外部接口: 获取当前状态, 只读不写\r\n     */\r\n    public get isShow(): boolean {\r\n        return this.dropCom.isShow;\r\n    }\r\n\r\n    /**\r\n     * 打开面板\r\n     */\r\n    public show(): void {\r\n        if (!this.isShow) {\r\n            // 打开面板\r\n            // 每次打开面板前需要重置list的高度确保drop高度不受其影响\r\n            this.initListMaxHeight();\r\n            // 打开面板\r\n            this.dropCom.show();\r\n            // 根据drop的最大高度设置list的最大高度\r\n            this.restyleListMaxHeight();\r\n            this.listCom.scrollToSelected();\r\n            // IE滚动条Bug的监听\r\n            this.listCom.listenIESrollbarBug();\r\n        }\r\n    }\r\n    /**\r\n     * 关闭面板的处理\r\n     */\r\n    public hide(): void {\r\n        // this.listCom.hide(); // 隐藏时list也需要做处理：清除当前hover项状态\r\n        if (this.isShow) {\r\n            this.dropCom.hide(); // 关闭面板\r\n            // 解除IE滚动条Bug的监听\r\n            this.listCom.unlistenIESrollbarBug();\r\n        }\r\n    }\r\n    /**\r\n     * 重新设置元素位置\r\n     */\r\n    public rePosition(optionsChange?: boolean): void {\r\n        if (optionsChange) {\r\n            this.dropCom.resetPosition();\r\n        } else {\r\n            this.dropCom.setPosition();\r\n        }\r\n\r\n        this.restyleListMaxHeight();\r\n    }\r\n    /**\r\n     * 根据drop的压缩情况，设置list的max-height\r\n     */\r\n    public restyleListMaxHeight(): void {\r\n        // 计算自定义底部的高度\r\n        if (this.footerElemRef && this.footerElemRef.nativeElement) {\r\n            let rect: any = this.footerElemRef.nativeElement.getBoundingClientRect();\r\n            if (rect.height) {\r\n                this.footerHeight = rect.height;\r\n            }\r\n        }\r\n        // 如果drop被压缩，则根据drop最大高度设置当前list最大高度。\r\n        const dropCurMaxHeight: number = parseInt(this.dropCom.nativeElement.style.maxHeight, 10);\r\n        let dropMaxHeightAdapted: number = this.dropMaxHeight + this.footerHeight;\r\n        if (!isNaN(dropCurMaxHeight) && dropCurMaxHeight < dropMaxHeightAdapted) {\r\n            dropMaxHeightAdapted = dropCurMaxHeight;\r\n            const computedListMaxHeight: number = dropMaxHeightAdapted - this.heightExcludeList - this.footerHeight;\r\n            // 设置list max-height\r\n            this.renderer.setStyle(this.listCom.nativeElement, 'max-height', computedListMaxHeight + 'px');\r\n        }\r\n    }\r\n    // 初始化list最大高度\r\n    private initListMaxHeight(): void {\r\n        this.dropMaxHeight = this.panelMaxHeight ? parseInt(this.panelMaxHeight, 10) :\r\n                this.defaultListMaxHeight + this.heightExcludeList;\r\n        this.renderer.setStyle(this.listCom.nativeElement, 'max-height', (this.dropMaxHeight - this.heightExcludeList) + 'px');\r\n    }\r\n    // 鼠标或enter点击选项后，组件隐藏\r\n    public onSelect(option: any): void {\r\n        this.select.emit(option);\r\n        // nextlevel只用在省市区regionselect组件场景，选中省、市级别面板不关闭\r\n        if (!this.isShowAfterSelect && !this.multiple && !option.nextLevel) {\r\n            this.hide();\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TiDroplistComponent } from './TiDroplistComponent';\r\nimport { TiListModule } from '../list/TiListModule';\r\nimport { TiDropModule } from '../drop/TiDropModule';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TiListModule,\r\n    TiDropModule\r\n  ],\r\n  exports: [TiDroplistComponent],\r\n  declarations: [TiDroplistComponent]\r\n})\r\nexport class TiDroplistModule {\r\n}\r\nexport { TiDroplistComponent } from './TiDroplistComponent';\r\n","import {\r\n    Component,\r\n    DoCheck,\r\n    ElementRef,\r\n    EventEmitter,\r\n    NgZone,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    Renderer2\r\n} from '@angular/core';\r\nimport { NgControl } from '@angular/forms';\r\nimport { TiBrowser, TiKeymap, Util } from '../../utils/Util';\r\nimport { TiRenderer } from '../../services/renderer/TiRenderer';\r\nimport { TiAutofocusComponent } from '../base/TiBaseModule';\r\n\r\n/**\r\n * 本组件基于原生input标签进行扩展，原生input加 tiText 属性即为text组件,\r\n * 原生input的所有属性以及 Angular 的各种属性指令都可以使用。\r\n *\r\n * <example-url>../tiny3demo/#/text/text-all</example-url>\r\n */\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: '[tiText]',\r\n    template: '',\r\n    styleUrls: ['text.less'],\r\n    host: {\r\n        '[class.ti3-text-input-show-icon]': 'isShowClear || isPassword',\r\n        '[class.ti3-text-input-show-clear]': 'isShowClear',\r\n        '[class.ti3-text-input-show-password]': 'isPassword',\r\n        '[class.ti3-text-input-noborder]': 'isNoBorder',\r\n        '(focus)': 'handleFocus()'\r\n    }\r\n})\r\nexport class TiTextComponent extends TiAutofocusComponent implements OnInit, DoCheck, OnDestroy {\r\n    private static readonly CLEAR_WIDTH: number = 26; // 常量，清除按钮区域宽度\r\n    private static readonly PASSWORD_WIDTH: number = 36; // 常量，眼睛按钮区域宽度\r\n    /**\r\n     * clear事件：当开启清除功能时(使用clearable属性)，点击删除按钮触发\r\n     */\r\n    @Output() readonly clear: EventEmitter<MouseEvent> = new EventEmitter();\r\n    /**\r\n     * @ignore\r\n     *\r\n     * autoComplete 也使用了该变量\r\n     */\r\n    public isClearActive: boolean;\r\n    /**\r\n     * @ignore\r\n     *\r\n     * autoComplete 也使用了该变量\r\n     */\r\n    public isShowClear: boolean;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public isNoBorder: boolean;\r\n    /**\r\n     * @ignore\r\n     *\r\n     * 初始获取文本框类型\r\n     */\r\n    public isPassword: boolean = false;\r\n    private isFirstFocus: boolean = true; // 是否为第一次聚焦\r\n    private hasClear: boolean = false; // 是否有清除功能\r\n    private pwdHackEle: HTMLInputElement; // 当类型为password时，动态生成放在password文本框前的input元素\r\n    private lastIsHover: boolean = undefined; // 最后一次绘制叉号的状态。\r\n    private lastDisabled: boolean = undefined; // 最后一次叉号是否禁用。\r\n    private isVisible: boolean = false; // 密码是否可见，默认不可见\r\n    private isNoEye: boolean = false; // 眼睛是否不显示，默认显示\r\n    constructor(elementRef: ElementRef, renderer: Renderer2,\r\n                private tiRenderer: TiRenderer, private formControl: NgControl, private zone: NgZone) {\r\n        super(elementRef, renderer);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.isNoEye = this.nativeElement.hasAttribute('noeye');\r\n        this.isPassword = this.nativeElement.type === 'password' && !this.isNoEye;\r\n        this.hasClear = this.nativeElement.hasAttribute('clearable') && !this.isPassword;\r\n        this.isNoBorder = this.nativeElement.hasAttribute('noborder');\r\n\r\n        // 初始化注册事件\r\n        this.initFn();\r\n        this.handlePassword();\r\n\r\n        // Chrome下输入框有时出现自动联想(该问题出现无规律可寻，比较奇怪)，\r\n        // 将其autocomplete置为off可规避此问题\r\n        // 之后firefox及IE11也出现类似问题，所以不区分浏览器差异，统一添加这层处理\r\n        if (this.nativeElement.type === 'text' && this.nativeElement.autocomplete !== 'on') {\r\n            this.renderer.setAttribute(this.nativeElement, 'autocomplete', 'off');\r\n        }\r\n\r\n        // 由于在valueChanges中监听不到动态表单中文本框的初始值\r\n        // 所以此处对初始值要做单独处理\r\n        this.controlClearShow(this.nativeElement.value);\r\n\r\n        // 文本框的值发生变化时触发\r\n        this.formControl.valueChanges.subscribe((value: any) => {\r\n            this.controlClearShow(value);\r\n        });\r\n\r\n        // 初始设置eye图标\r\n        this.controlEyeShow();\r\n    }\r\n    ngDoCheck(): void {\r\n        const disabled: boolean = this.nativeElement.disabled;\r\n        // 与上次disabled状态相同，则返回\r\n        if (this.lastDisabled === disabled) {\r\n            return;\r\n        }\r\n        // 叉号特殊处理，2）禁用\r\n        if (this.isShowClear || this.isPassword) {\r\n            if (disabled) {\r\n                this.setClearBackgroud(null);\r\n                this.lastDisabled = true;\r\n            } else { // 从禁用改为非禁用\r\n                this.setClearBackgroud(false);\r\n                this.lastDisabled = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        // 销毁组件时需要将内部生成dom也移除\r\n        if (this.pwdHackEle) {\r\n            this.renderer.removeChild(this.renderer.parentNode(this.pwdHackEle), this.pwdHackEle);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public handleFocus(): void {\r\n        // IE和火狐浏览器在首次autofoucus聚焦时会将光标移到文字起始位置，用户体验不好\r\n        // 需要手动设置光标位置到行尾\r\n        if (this.isFirstFocus && this.nativeElement.autofocus &&\r\n            (TiBrowser.isFirefox() || TiBrowser.isIE())) {\r\n            this.nativeElement.setSelectionRange(this.nativeElement.value.length,\r\n                this.nativeElement.value.length);\r\n        }\r\n        this.isFirstFocus = false;\r\n    }\r\n\r\n    private initFn(): void {\r\n        this.zone.runOutsideAngular(() => { // 避免不停触发变化检测\r\n            this.renderer.listen(this.nativeElement, 'mousemove', this.handleMousemove);\r\n            this.renderer.listen(this.nativeElement, 'mouseout', this.handleMouseout);\r\n            this.renderer.listen(this.nativeElement, 'mousedown', this.handleMousedown);\r\n            this.renderer.listen(this.nativeElement, 'click', this.handleClick);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 鼠标移入清除按钮区域时，给宿主元素添加ti-text-clear-active样式\r\n     */\r\n    public handleMousemove = (event: MouseEvent): void => {\r\n        if (this.nativeElement.disabled || !this.isShowClear && !this.isPassword) {\r\n            return;\r\n        }\r\n\r\n        // 鼠标移入清除按钮区域时，给宿主元素添加ti-text-clear-active样式;\r\n        // 否则去掉ti-text-clear-active样式\r\n        this.isClearActive = this.isIconField(event);\r\n\r\n        this.isClearActive ? this.renderer.addClass(this.nativeElement, 'ti3-text-clear-active') :\r\n                             this.renderer.removeClass(this.nativeElement, 'ti3-text-clear-active');\r\n\r\n        // 密码类型只需要设置悬浮时手型样式\r\n        if (this.isPassword) {\r\n            return;\r\n        }\r\n\r\n        // 叉号特殊处理，3）hover\r\n        this.isClearActive ? this.setClearBackgroud(true) : this.setClearBackgroud(false);\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public handleMouseout = (event: MouseEvent) => {\r\n        if (this.nativeElement.disabled || !this.isShowClear) {\r\n            return;\r\n        }\r\n        // 叉号特殊处理，3）hover\r\n        this.setClearBackgroud(false);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 切换密码可见不可见时，输入框需处于失焦状态\r\n     */\r\n    public handleMousedown = (event: MouseEvent) => {\r\n        if (this.nativeElement.disabled || !this.isPassword || !this.isIconField(event)) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n\r\n        // 聚焦到可输入区域，再点击眼睛图标时，输入框应失焦\r\n        if (document.activeElement === this.nativeElement) {\r\n            this.nativeElement.blur();\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param isHover true标示悬浮，false标示非悬浮，null标示禁用，undefinded标示不画叉号。\r\n     * @returns\r\n     */\r\n    setClearBackgroud(isHover: boolean): void {\r\n        // 如果跟上次一样，则返回。\r\n        if (this.lastIsHover === isHover) {\r\n            return;\r\n        } else {\r\n            this.lastIsHover = isHover;\r\n        }\r\n\r\n        let colorStr: string = '';\r\n        if (Util.supportsCssVars()) {\r\n            // Chrome等支持CSSVar的浏览器，正常操作,  从CSSVar变量中取出颜色。\r\n            const varName: string =\r\n                isHover === false ? '--ti-input-clear-color' :\r\n                    isHover === true ? '--ti-input-clear-color-hover' :\r\n                        isHover === null ? '--ti-input-clear-color-disabled' : '';\r\n            // 修复SSR报错：ERROR ReferenceError: getComputedStyle is not defined\r\n            if (typeof getComputedStyle !== 'undefined') {\r\n                colorStr = getComputedStyle(document.documentElement).getPropertyValue(varName);\r\n            }\r\n        } else {\r\n            // IE和低版Edge不支持CSSVar的浏览器，从一个CSS样式中取出颜色。\r\n            const styleName: string =\r\n                isHover === false ? 'flood-color' :\r\n                    isHover === true ? 'lighting-color' :\r\n                        isHover === null ? 'stop-color' : '';\r\n            // 修复SSR报错：ERROR ReferenceError: getComputedStyle is not defined\r\n            if (typeof getComputedStyle !== 'undefined') {\r\n                colorStr = getComputedStyle(this.nativeElement).getPropertyValue(styleName);\r\n            }\r\n        }\r\n        colorStr = colorStr.trim().replace('#', '%23'); // URL编码\r\n        let urlStr: string;\r\n        if (this.isPassword) {\r\n            urlStr = this.isVisible ? `url(data:image/svg+xml,%3Csvg%20version=%221.1%22%20xmlns=%22http://www.w3.org/2000/svg%22%20width=%2232%22%20height=%2232%22%20viewBox=%220%200%2032%2032%22%3E%3Cpath%20fill%3D%22${colorStr}%22%20d=%22M16%206.4c9.4%200%2016%206.4%2016%209.6%200%203-6.6%209.6-16%209.6-9.2%200-16-6.4-16-9.6s6.8-9.6%2016-9.6zM16%208.2c-4.2%200-7.8%203.6-7.8%207.8%200%204.4%203.4%207.8%207.8%207.8%204.2%200%207.8-3.6%207.8-7.8%200-4.4-3.6-7.8-7.8-7.8zM16%2011c2.8%200%205%202.2%205%205s-2.2%205-5%205-5-2.2-5-5c0-2.8%202.2-5%205-5z%22%3E%3C/path%3E%3C/svg%3E%0A)` :\r\n                `url(data:image/svg+xml,%3Csvg%20version=%221.1%22%20xmlns=%22http://www.w3.org/2000/svg%22%20width=%2232%22%20height=%2232%22%3E%3Cpath%20fill%3D%22${colorStr}%22%20d=%22M1.6%202.925c0.6-0.6%201.4-0.6%201.8%200v0l25.6%2024.2c0.2%200.2%200.4%200.6%200.4%201s-0.2%200.6-0.4%201c-0.2%200.2-0.6%200.4-1%200.4s-0.8-0.2-1-0.4v0l-5-5.2c-2%200.6-4%201-6%201-9.2%200-16-6.6-16-9.8%200-1.8%202-4.6%205.4-6.6v0l-3.6-3.8c-0.6-0.4-0.6-1.2-0.2-1.8zM9%2011.725c-0.4%201-0.6%202.2-0.6%203.4%200%204.4%203.4%208%207.8%208%201.4%200%202.8-0.4%203.8-1v0l-2.4-2.4c-0.4%200.2-1%200.4-1.6%200.4-2.8%200-5-2.2-5-5%200-0.4%200-0.8%200.2-1.2v0l-2.2-2.2zM16%205.325c9.4%200%2016%206.6%2016%209.8%200%201.8-2%204.6-5.6%206.8v0l-3.4-3.2c0.6-1%200.8-2.2%200.8-3.4%200-4.4-3.4-8-7.8-8-1.4%200-2.8%200.4-4%201.2v0%200l-2-2c2-1%204-1.2%206-1.2zM16%209.925c2.8%200%205%202.2%205%205%200%200.4%200%201-0.2%201.4v0l-6.6-6c0.6-0.2%201.2-0.4%201.8-0.4z%22%3E%3C/path%3E%3C/svg%3E)`\r\n        } else {\r\n            urlStr = `url(data:image/svg+xml,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2216px%22%20height%3D%2216px%22%3E%3Cpath%20fill%3D%22${colorStr}%22%20d%3D%22M12.529%2C11.469L9.061%2C8l3.469-3.469c0.294-0.294%2C0.295-0.768%2C0.001-1.062c-0.293-0.293-0.769-0.293-1.061%2C0L8%2C6.938L4.53%2C3.469c-0.292-0.293-0.767-0.293-1.061%2C0C3.177%2C3.762%2C3.177%2C4.238%2C3.471%2C4.532L6.939%2C8l-3.469%2C3.468c-0.294%2C0.293-0.294%2C0.768-0.001%2C1.062C3.616%2C12.678%2C3.81%2C12.75%2C4%2C12.75s0.384-0.072%2C0.53-0.219L8%2C9.062l3.47%2C3.469c0.147%2C0.146%2C0.339%2C0.219%2C0.53%2C0.219c0.192%2C0%2C0.384-0.072%2C0.53-0.219C12.823%2C12.236%2C12.824%2C11.762%2C12.529%2C11.469z%22%2F%3E%3C%2Fsvg%3E)`;\r\n        }\r\n        this.renderer.setStyle(this.nativeElement, 'backgroundImage', urlStr);\r\n    }\r\n\r\n    /**\r\n     *  @ignore\r\n     * 当在清除按钮区域点击时，清空输入框内容\r\n     */\r\n    public handleClick = (event: MouseEvent) =>{\r\n        if (this.nativeElement.disabled || !this.isShowClear && !this.isPassword || !this.isIconField(event)) {\r\n            return;\r\n        }\r\n\r\n        if (this.isShowClear) {\r\n            this.renderer.setProperty(this.nativeElement, 'value', '');\r\n            Util.trigger(this.nativeElement, 'input');\r\n            this.zone.run(() => {\r\n                this.clear.emit(event);\r\n            })\r\n            // 点击清除按钮后延时才能聚焦元素\r\n            setTimeout(() => {\r\n                this.nativeElement.focus();\r\n            }, 0);\r\n        }\r\n\r\n        if (this.isPassword) {\r\n            this.isVisible = !this.isVisible;\r\n            this.lastIsHover = undefined;\r\n            this.controlEyeShow();\r\n        }\r\n    }\r\n\r\n    private handlePassword(): void {\r\n        // 密码框情况下，默认关闭autocomplete，避免浏览器弹出记住密码提示框引起的安全问题\r\n        if (TiBrowser.isChrome() && this.nativeElement.type === 'password' &&\r\n            this.nativeElement.autocomplete !== 'on') {\r\n            this.pwdHackEle = this.renderer.createElement('input');\r\n            this.tiRenderer.setAttributes(this.pwdHackEle, { type: 'text', tabindex: -1, autocomplete: 'off' });\r\n            this.renderer.addClass(this.pwdHackEle, 'ti3-password-hack-input');\r\n            // 插入一个input元素，阻止密码框前面的input联想用户名\r\n            this.renderer.insertBefore(this.nativeElement.parentElement, this.pwdHackEle, this.nativeElement);\r\n        }\r\n    }\r\n\r\n    // 控制clear是否显示，文本框为空时不显示，有内容时才显示\r\n    private controlClearShow(value: any): void {\r\n        if (!this.hasClear) {\r\n            return;\r\n        }\r\n        const lastIsShowClear: boolean = this.isShowClear;\r\n        this.isShowClear = (Util.isString(value) && value !== '');\r\n        // 与上次状态相同，则返回\r\n        if (this.isShowClear === lastIsShowClear) {\r\n            return;\r\n        }\r\n\r\n        // 叉号特殊处理，1)初始化和监听是否显示\r\n        if (this.isShowClear) {\r\n            this.setClearBackgroud(false);\r\n        } else {\r\n            this.renderer.removeStyle(this.nativeElement, 'background');\r\n            this.lastIsHover = undefined;\r\n        }\r\n    }\r\n\r\n    // 控制eye是否显示，\r\n    private controlEyeShow(): void {\r\n        if (!this.isPassword) {\r\n            return;\r\n        }\r\n        this.setClearBackgroud(false);\r\n        this.nativeElement.type = this.isVisible ? 'text' : 'password';\r\n    }\r\n\r\n    // 判断事件是否在清除按钮区域\r\n    private isIconField(event: MouseEvent): boolean {\r\n        const iconWidth: number = this.isPassword ? TiTextComponent.PASSWORD_WIDTH : TiTextComponent.CLEAR_WIDTH;\r\n\r\n        return event.clientX - this.nativeElement.getBoundingClientRect().left >\r\n            this.nativeElement.getBoundingClientRect().width - iconWidth;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiTextComponent } from './TiTextComponent';\r\nimport { TiRendererModule } from '../../services/renderer/TiRendererModule';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiRendererModule\r\n  ],\r\n  exports: [ TiTextComponent ],\r\n  declarations: [ TiTextComponent ]\r\n})\r\n\r\nexport class TiTextModule {\r\n}\r\nexport { TiTextComponent } from './TiTextComponent';\r\n","import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiDroplistComponent } from '../droplist/TiDroplistModule';\r\nimport { debounceTime, switchMap } from 'rxjs/operators';\r\nimport { TiTextComponent } from '../text/TiTextModule';\r\nimport { empty, Subject, Subscription } from 'rxjs';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiPositionType } from '../../utils/Position';\r\n\r\n/**\r\n * 自动补全输入框组件\r\n *\r\n * <example-url>../tiny3demo/#/autocomplete/autocomplete-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-autocomplete',\r\n    templateUrl: './autocomplete.html',\r\n    styleUrls: ['./autocomplete.less'],\r\n    providers: [TiFormComponent.getValueAccessor(TiAutocompleteComponent)],\r\n    host: {\r\n        '[class.ti3-autocomplete-container]': 'true',\r\n        '(blur)': 'onBlur()',\r\n        '(focus)': 'onFocus()'\r\n    }\r\n})\r\nexport class TiAutocompleteComponent extends TiFormComponent {\r\n    /**\r\n     * 预留提示文本\r\n     */\r\n    @Input() placeholder: string = '';\r\n    /**\r\n     * 是否开启清空输入框内容的功能\r\n     *\r\n     * 10.1.0/9.1.0版本之后默认不开启，在此之前版本默认开启\r\n     */\r\n    @Input() clearable: boolean = false;\r\n    /**\r\n     * 文本最大显示长度\r\n     */\r\n    @Input() maxlength: number;\r\n    /**\r\n     * 1.\"justified\"(默认): 下拉框的宽度与输入框的宽度保持一致；\r\n     *\r\n     * 2.\"auto\": 下拉框的宽度根据下拉项的内容自动撑开；\r\n     *\r\n     * 3.表示宽度的字符串: 设置固定的下拉框宽度(不小于输入框的宽度)。例如：\"200px\"。\r\n     */\r\n    @Input() panelWidth: string = 'justified';\r\n    /**\r\n     * 面板最大高度\r\n     */\r\n    @Input() panelMaxHeight: string;\r\n    /**\r\n     * 指定下拉建议项中显示的文本对应的字段关键字\r\n     */\r\n    @Input() labelKey: string = 'label';\r\n    /**\r\n     * 10.0.1版本新增\r\n     *\r\n     * 下拉建议项\r\n     */\r\n    @Input() options: Array<any> = [];\r\n    /**\r\n     * 10.0.2版本新增\r\n     *\r\n     * 下拉建议项文字超长显示...，hover时tip弹出方向\r\n     */\r\n    @Input() tipPosition: TiPositionType = 'right';\r\n    /**\r\n     * suggest事件，当聚焦或值改变时触发事件，为开发者提供设置建议项的时机。\r\n     *\r\n     * 参数：组件实例\r\n     */\r\n    @Output() readonly suggest: EventEmitter<any> = new EventEmitter<any>();\r\n    /**\r\n     * clear事件，点击清除按钮时触发\r\n     *\r\n     * 10.0.2版本新增(tiAutocomplete组件)\r\n     *\r\n     * 3.0.6版本新增(tiSearchbox组件)\r\n     *\r\n     */\r\n    @Output() readonly clear: EventEmitter<MouseEvent> = new EventEmitter();\r\n    /**\r\n     * @ignore\r\n     * droplist选项值\r\n     */\r\n    public selected: any;\r\n    /**\r\n     * @ignore\r\n     *\r\n     */\r\n    public suggestions: Array<any> = [];\r\n    /**\r\n     * @ignore\r\n     * 是否聚焦的标志位\r\n     */\r\n    public isFocused: boolean = false;\r\n    /**\r\n     * 最后一次下拉建议项\r\n     */\r\n    private lastSuggestions: Array<any> = [];\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('input', { static: true }) textComp: TiTextComponent;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('droplist', { static: false }) dropListComp: TiDroplistComponent;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public inputChangeObserve: Subject<string> = new Subject();\r\n    private inputChangeSub: Subscription;\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.setFocusableElems([this.textComp.nativeElement]);\r\n        this.createInputChangeObserve();\r\n        if (this.clearable) {\r\n            this.renderer.setAttribute(this.textComp.nativeElement, 'clearable', '');\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        // 修正SSR报错：TypeError: Cannot read property 'unsubscribe' of undefined\r\n        this.inputChangeSub && this.inputChangeSub.unsubscribe();\r\n    }\r\n\r\n    // 组件交互方法集合--start\r\n    /**\r\n     * @ignore\r\n     * 输入框中内容改变事件\r\n     */\r\n    public onInputChange(value: string): void {\r\n        if (this.disabled || !this.isFocused) {\r\n            return;\r\n        }\r\n\r\n        this.inputChangeObserve.next(value);\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 两种情况下触发\r\n     * 1.在suggestion面板展开的情况下，通过hover选中一项，然后按下enter\r\n     * 2.在suggestion面板展开的情况下，通过鼠标点击选中一项\r\n     */\r\n    public onDroplistChange(value: { label?: string }): void {\r\n        if (value) {\r\n            this.model = value[this.labelKey] || value.label;\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public onFocus(): void {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        this.isFocused = true;\r\n        if (this.isInputClear()) { // 如果是点击清除按钮，值会改变，那么就会在onInputChange中处理\r\n            return;\r\n        }\r\n\r\n        this.showSuggestions();\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public onBlur(): void {\r\n        this.dropListComp && this.dropListComp.hide();\r\n        this.isFocused = false;\r\n    }\r\n    /**\r\n     * @ignore\r\n     *\r\n     * 避免滚动页面下拉框隐藏之后组件仍聚焦时再次点击，下拉框无法展开\r\n     *\r\n     * mousedown在focus事件之前执行\r\n     */\r\n    public onInputMousedown(): void {\r\n        if (this.disabled || !this.isFocused || this.isInputClear()) { // 如果是点击清除按钮，值会改变，那么就会在onInputChange中处理\r\n            return;\r\n        }\r\n\r\n        this.showSuggestions();\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 点击叉号时触发\r\n     *\r\n     */\r\n    onClear(event: MouseEvent): void {\r\n        this.clear.emit(event);\r\n    }\r\n    // 组件交互方法集合--end\r\n\r\n    // 内部公共方法集合--start\r\n    /**\r\n     * @description: 创建inputValue的observable，确保收集2ms内的数据后再更新下拉\r\n     *  触发该observable时，使用next方法\r\n     */\r\n    private createInputChangeObserve(): void {\r\n        this.inputChangeSub = this.inputChangeObserve\r\n            .pipe(\r\n                debounceTime(200), // 200ms延迟执行，解决请求太频繁问题\r\n                // TODO: 在点击清除按钮或者快捷键删除时数据不准确，可能导致在这些操作时触发不了下面的逻辑\r\n                // distinctUntilChanged(),避免前后两次相同数据重复处理，只有上次数据和200ms后的数据不相等时才触发后续动作。\r\n                switchMap(// TODO: 这个switchMap有可能没有生效。测试用例增加，switchMap\r\n                    (value: string) => {\r\n                        if (this.isFocused) {\r\n                            if (this.suggest.observers.length === 0) {\r\n                                this.lastSuggestions = this.suggestions;\r\n                                this.suggestions = this.filter(value);\r\n                                if (this.suggestions.length > 0) {\r\n                                    this.show();\r\n                                } else {\r\n                                    this.dropListComp && this.dropListComp.hide();\r\n                                }\r\n                            } else {\r\n                                this.suggest.emit(this);\r\n                            }\r\n\r\n                        }\r\n\r\n                        return empty();\r\n                    }\r\n                )\r\n            )\r\n            .subscribe(\r\n            );\r\n    }\r\n    /**\r\n     * 设置下拉建议项数据\r\n     *\r\n     * @param value 下拉建议项数组\r\n     */\r\n    public setSuggestions(value: Array<any>): void {\r\n        this.lastSuggestions = this.suggestions;\r\n        this.suggestions = value;\r\n        if (this.suggestions.length > 0) {\r\n            this.show();\r\n        } else {\r\n            this.dropListComp.hide();\r\n        }\r\n    }\r\n\r\n    private filter(searchWord: string): Array<any> {\r\n        if (this.options && this.options.length >= 0) {\r\n            // 搜索结果临时值。结果默认值，是原数据\r\n            let searchResult: Array<any> = this.options;\r\n            // 如果搜索词存在\r\n            if (!Util.isEmptyString(searchWord)) {\r\n                // 在集合中搜索\r\n                searchResult = searchResult.filter((option: any) => {\r\n                    return option[this.labelKey].toLowerCase()\r\n                        .indexOf(searchWord.toLowerCase()) >= 0;\r\n\r\n                });\r\n            }\r\n\r\n            return searchResult;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    private show(): void {\r\n        if (this.dropListComp.isShow) {\r\n            // 搜索时，按需重新定位\r\n            if (this.lastSuggestions.length !== this.suggestions.length) {\r\n                setTimeout(() => {\r\n                    this.dropListComp.rePosition(true);\r\n                }, 0);\r\n            }\r\n        } else {\r\n             // 数据更新后，未及时通知到droplist，初始化时按照默认值[]绘制视图，需延时处理\r\n             setTimeout(() => {\r\n                 this.dropListComp.show();\r\n                 this.selected = undefined; // 为了去掉选中样式\r\n                 this.dropListComp.listCom.hoverOption = undefined; // 去掉hoverOption\r\n        }, 0);\r\n        }\r\n    }\r\n\r\n    private isInputClear(): boolean {\r\n        return this.textComp.isShowClear && this.textComp.isClearActive;\r\n    }\r\n\r\n    private showSuggestions(): void {\r\n        if (this.suggest.observers.length === 0) {\r\n            this.lastSuggestions = this.suggestions;\r\n            this.suggestions = this.filter(this.model);\r\n            if (this.suggestions.length > 0) {\r\n                this.show();\r\n            }\r\n        } else {\r\n            this.suggest.emit(this);\r\n        }\r\n    }\r\n    // 内部公共方法集合--end\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TiDroplistModule } from '../droplist/TiDroplistModule';\r\nimport { TiTextModule } from '../text/TiTextModule';\r\nimport { TiAutocompleteComponent } from './TiAutocompleteComponent';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TiDroplistModule,\r\n    TiTextModule\r\n  ],\r\n  exports: [TiAutocompleteComponent],\r\n  declarations: [TiAutocompleteComponent]\r\n})\r\nexport class TiAutocompleteModule {\r\n}\r\n\r\nexport { TiAutocompleteComponent } from './TiAutocompleteComponent';\r\n","import {\r\n    AfterViewChecked,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ContentChild,\r\n    ElementRef,\r\n    Input,\r\n    IterableChanges,\r\n    IterableDiffer,\r\n    IterableDiffers,\r\n    OnInit,\r\n    QueryList,\r\n    Renderer2,\r\n    TemplateRef,\r\n    ViewChildren\r\n} from '@angular/core';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiFormComponent, TiWholeComponent } from '../base/TiBaseModule';\r\n// TODO: 标签命名不规范，TiButtongroup应该对应到ti-buttongroup\r\n/**\r\n * 按钮组组件：每个按钮的属性配置\r\n */\r\nexport interface TiButtonItem {\r\n    /**\r\n     * 按钮文本显示\r\n     */\r\n    text?: string;\r\n    /**\r\n     * 设置按钮状态\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * 设置tip内容，类型为文本、TemplateRef或组件\r\n     */\r\n    tipContent?: string| TemplateRef<any> | any;\r\n    /**\r\n     * 设置tip显示方向，\r\n     */\r\n    tipPosition?: string;\r\n    /**\r\n     * 设置按钮标志类型：\r\n     *\r\n     * 对象类型，包含两个属性:1.text: 显示的文本；2.class:标志的样式；eg:{text: string; class: string}\r\n     *\r\n     * 10.1.2版本之后可自定义模板，设置按钮标志样式\r\n     */\r\n    sup?: {\r\n            text?: string;\r\n            class?: string;\r\n            /**\r\n             * 允许有多余的属性字段\r\n             */\r\n            [propName: string]: any;\r\n        };\r\n    /**\r\n     * 允许有多余的属性字段\r\n     */\r\n    [propName: string]: any;\r\n}\r\n/**\r\n * buttonGroup选择按钮组组件\r\n *\r\n * 该组件支持单选、多选两种形式，显示内容支持用户自定义\r\n *\r\n * 单选块：用户要从一个数据集中选择单个选项。\r\n * 分大尺寸，小尺寸，无边框三种类型。\r\n * 支持可取消选中，默认选中时再次点击不取消当前选中项；\r\n *\r\n * 多选块：允许用户从一个数据集中选择多个选项。\r\n * 分大尺寸，小尺寸两种类型。\r\n *\r\n * <example-url>../tiny3demo/#/buttongroup/buttongroup-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-button-group',\r\n    templateUrl: './buttongroup.html',\r\n    styleUrls: ['./buttongroup.less'],\r\n    host: {\r\n        '[class.ti3-button-group-bottom-space]': 'multiline'\r\n    },\r\n    providers: [TiFormComponent.getValueAccessor(TiButtongroupComponent)]\r\n})\r\nexport class TiButtongroupComponent extends TiWholeComponent {\r\n    /**\r\n     * 按钮组属性配置，为数组形式，数组中每一项为一个按钮的属性配置，为对象形式：\r\n     */\r\n    @Input() items: Array<TiButtonItem>;\r\n    /**\r\n     * 激活状态项样式类定义\r\n     */\r\n    @Input() activeClass: string;\r\n    /**\r\n     * 设置单个按钮最小宽度\r\n     */\r\n    @Input() minWidth: string;\r\n    /**\r\n     * 用来控制按钮的尺寸大小:默认是large\r\n     *\r\n     * 单选按钮有大小尺寸、无边框之分：取值 'large','small','noBorder'\r\n     *\r\n     * 多选按钮有空间充足，空间不足之分：取值 'large','small',\r\n     */\r\n    @Input() type: string = 'large';\r\n    /**\r\n     * 设置是否为多选按钮组\r\n     */\r\n    @Input() multiple: boolean = false;\r\n    // TODO:Tiny4 deselectable改为unselectable\r\n    /**\r\n     * 设置单选按钮组是否可以取消选中\r\n     */\r\n    @Input() deselectable: boolean = false;\r\n    /**\r\n     * 10.0.2新增\r\n     *\r\n     * 按钮是否为多行，设置为多行时，按钮块有下边距，否则没有。\r\n     */\r\n    /**\r\n     * 用于取代公共样式类ti3-button-group-bottom-space\r\n     * <ti-button-group class=\"ti3-button-group-bottom-space\"></ti-button-group>\r\n     */\r\n    @Input() multiline: boolean = false;\r\n    /**\r\n     * @ignore\r\n     * 获取到用户自定义的模板\r\n     */\r\n    @ContentChild(TemplateRef, /* TODO: add static flag */ { static: true }) firstTemplate: TemplateRef<any>;\r\n    @ContentChild('item', /* TODO: add static flag */ { static: true }) itemTemplate: TemplateRef<any>; // 自定义 item 模板\r\n    @ContentChild('sup', /* TODO: add static flag */ { static: true }) supTemplate: TemplateRef<any>; // 自定义按钮标志模板\r\n    /**\r\n     * @ignore\r\n     * 获取每个按钮\r\n     */\r\n    @ViewChildren('btn') btns: QueryList<ElementRef>;\r\n    /**\r\n     * @ignore\r\n     * 绑在模板上用户自定义激活样式\r\n     */\r\n    public actClass: string;\r\n    private itemsDiffer: IterableDiffer<TiButtonItem>;\r\n    constructor(protected elementRef: ElementRef,\r\n                protected renderer2: Renderer2,\r\n                protected changeDetectorRef: ChangeDetectorRef,\r\n                private iterableDiffers: IterableDiffers) {\r\n                super(elementRef, renderer2);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        // 处理激活样式\r\n        this.actClass = this.activeClass || 'ti3-active';\r\n        this.itemsDiffer = this.iterableDiffers.find(this.items || [])\r\n            .create();\r\n    }\r\n\r\n    ngAfterViewChecked(): void {\r\n        super.ngAfterViewChecked();\r\n        const itemsDiffer: IterableChanges<TiButtonItem> = this.itemsDiffer.diff(this.items || []);\r\n        if (itemsDiffer) {\r\n            const focusElements: Array<any> = [];\r\n            this.btns.forEach((item: ElementRef) => {\r\n                focusElements.push(item.nativeElement);\r\n            });\r\n            this.setFocusableElems(focusElements);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 兼容旧版：\r\n     * 10.1.2 版本之前只能内嵌一个模板，无命名。\r\n     * 新版可以内嵌两个模板，示例书写要求都命名（#item，#sup）。\r\n     * 但需要兼容旧版无命名测试用例。\r\n     */\r\n    ngAfterContentInit(): void {\r\n        super.ngAfterContentInit();\r\n        // 如果 item 模板为空 && 存在第一个模板，那么把第一个出现的 “非 #sup 标签” 的模板作为 item 模板\r\n        if (!this.itemTemplate && this.firstTemplate\r\n            && (this.firstTemplate.elementRef.nativeElement !== (this.supTemplate && this.supTemplate.elementRef.nativeElement))) {\r\n            this.itemTemplate = this.firstTemplate;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * sup属性存在class类或text存在且有效\r\n     */\r\n    public isSuperScript(item: TiButtonItem): boolean {\r\n        return item.sup && (item.sup.constructor === Object) &&\r\n        ((Util.isString(item.sup.class) && item.sup.class !== '') ||\r\n        (Util.isString(item.sup.text) && item.sup.text !== ''));\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @description 根据selectedId来设置每个按钮的样式\r\n     * @param: item\r\n     */\r\n    public setActiveClass(item: string): string {\r\n        if (this.hasSelected(item)) {\r\n            return this.actClass;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 每个item上的点击事件\r\n     */\r\n    public onClick(item: TiButtonItem): void {\r\n        if (item.disabled || this.disabled) { // 灰化状态下 ，点击操作无效\r\n            return;\r\n        }\r\n\r\n        this.selectItem(item);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 每个item上的点击事件\r\n     */\r\n    private selectItem(item: TiButtonItem): void {\r\n        if (this.multiple) {\r\n            if (Util.isUndefined(this.modelWhole)) {\r\n                this.modelWhole = [item];\r\n            } else {\r\n                const index: number = this.modelWhole.indexOf(item);\r\n                if (index !== -1) { // 如果存在，则将其移除\r\n                    this.modelWhole.splice(index, 1);\r\n                } else { // 先前未选中情况下，勾选\r\n                    this.modelWhole.push(item);\r\n                }\r\n                // selectedId是引用类型，内容改变不会触发modelchange，故需改变引用地址\r\n                this.modelWhole = this.modelWhole.concat();\r\n            }\r\n        } else {\r\n            this.modelWhole = (Object.is(item, this.modelWhole) && this.deselectable) ? '' : item;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 判断是不是选中项\r\n     */\r\n    private hasSelected(item: string): boolean {\r\n        if (Util.isUndefined(this.modelWhole) || Util.isNull(this.modelWhole)) {\r\n            return;\r\n        }\r\n\r\n        if (this.multiple) {\r\n            return this.modelWhole.indexOf(item) !== -1;\r\n        } else {\r\n            return Object.is(item, this.modelWhole) ;\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TiTipModule } from '../../directives/tip/TiTipModule';\r\nimport { TiOutlineModule } from '../../directives/outline/TiOutlineModule';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\n\r\nimport { TiButtongroupComponent } from './TiButtongroupComponent';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiIconModule,\r\n    TiTipModule,\r\n    TiOutlineModule\r\n  ],\r\n  exports: [\r\n    TiButtongroupComponent\r\n  ],\r\n  declarations: [\r\n    TiButtongroupComponent\r\n  ]\r\n})\r\nexport class TiButtongroupModule {\r\n\r\n}\r\nexport { TiButtongroupComponent, TiButtonItem } from './TiButtongroupComponent';\r\n","import { Component, HostListener, ViewEncapsulation } from '@angular/core';\r\nimport { TiRadioBaseComponent } from '../base/TiBaseModule';\r\nimport { TiBrowser, TiLog, Util } from '../../utils/Util';\r\n\r\n/**\r\n * Checkbox组件，尽管这是一个组件，但使用方法有点像属性指令。主要功能为设置某一条件是否被选中。\r\n *\r\n * Checkbox组件完全基于原生input checkbox实现，\r\n *\r\n * 可以使用Angular针对原生Checkbox提供的所有指令，包括：disabled, model, click等，\r\n *\r\n * 但是要记得在input中添加TinyUI提供的tiCheckbox属性。\r\n *\r\n * <example-url>../tiny3demo/#/checkbox/checkbox-all</example-url>\r\n */\r\n@Component({\r\n      // tslint:disable-next-line:component-selector\r\n      selector: '[tiCheckbox]',\r\n      templateUrl: './checkbox.html',\r\n      styleUrls: ['./checkbox.less']\r\n})\r\nexport class TiCheckboxComponent extends TiRadioBaseComponent {\r\n    /**\r\n     * 问题一：浏览器兼容性问题：用angular提供的indeterminate属性设置半选，在谷歌下全部正常显示。\r\n     * 在火狐和IE下，checked=true 和indeterminate=true同时存在时，半选样式存在问题，不知道是否和tiny组件的css样式写法有关。\r\n     * 为了统一逻辑和预测，checkgroup和tree组件内部本应该这样使用：置indeterminate=true时，同时会置checked = false\r\n     * 但是，暂时tree组件没有这样做，由TiCheckboxComponent来纠错。\r\n     * TiCheckboxComponent补充效果：tree组件/业务用户，置indeterminate=true时，组件自身会置checked = false\r\n     * 问题二：浏览器兼容性问题：Chrome/Firefox半选点击后变为全选，checked状态改变。IE半选点击后变为不选，checked状态未改变，所以没有通知change事件。\r\n     * 但checkgroup需要change事件去维护子选项\r\n     * TiCheckboxComponent IE补充效果：监听IE的click，当indeterminate从true变为false时，组件会置checked = false，并通知change事件。\r\n     */\r\n    private lastIndeterminate: boolean = undefined;\r\n    ngAfterViewChecked(): void {\r\n        super.ngAfterViewChecked();\r\n        // 补充效果：tree组件/业务用户，置indeterminate=true时，组件自身会置checked = false\r\n        if (this.nativeElement.indeterminate) {\r\n            this.nativeElement.checked = false;\r\n        }\r\n        this.lastIndeterminate = this.nativeElement.indeterminate;\r\n    }\r\n    /**\r\n     * @ignore\r\n     * IE补充效果：监听IE的click，当indeterminate从true变为false时，组件会置checked = false，并通知change事件。\r\n     */\r\n    @HostListener('click', ['$event']) public onHostClick(event: MouseEvent): void {\r\n        if (TiBrowser.isIE() && this.lastIndeterminate && !this.nativeElement.indeterminate) {\r\n            this.checked(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 设置checked属性，indeterminate，同时可能触发change事件。\r\n     * 以后可以考虑开放这个接口，给用户调用\r\n     * @protected\r\n     * @param checked true/false/半选   半选用'indeterminate'或null\r\n     */\r\n    protected checked(checked: boolean|'indeterminate'): void {\r\n\r\n        const lastChecked: boolean = this.nativeElement.checked;\r\n        const lastIndeterminate: boolean = (this.nativeElement.indeterminate === true) ? true : false; // 将undefined也转为false。\r\n        switch (checked) {\r\n            case true: // 全选\r\n                this.nativeElement.checked = true;\r\n                this.nativeElement.indeterminate = false;\r\n                break;\r\n            case false: // 全不选\r\n                this.nativeElement.checked = false;\r\n                this.nativeElement.indeterminate = false;\r\n                break;\r\n            case null: // 半选\r\n            case 'indeterminate': // 半选\r\n                this.nativeElement.checked = false; // TODO: 为了保证IE下点击半选后，变为全选，这里设false。未验证。\r\n                this.nativeElement.indeterminate = true;\r\n                break;\r\n            default: // 不会走到这里。\r\n                TiLog.error('setChecked(),switch default, can not reach code');\r\n                break;\r\n        }\r\n        // indeterminate初始时为undefined。\r\n        if (this.nativeElement.checked !== lastChecked || this.nativeElement.indeterminate !== lastIndeterminate) {\r\n            Util.trigger(this.nativeElement, 'change'); // 必须主动触发change事件，否则ngModel不更新。也走不到change回调。\r\n        }\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { TiCheckboxComponent } from './TiCheckboxComponent';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\nimport { TiOutlineModule } from '../../directives/outline/TiOutlineModule';\r\n@NgModule({\r\n  imports: [\r\n    TiIconModule,\r\n    TiOutlineModule\r\n  ],\r\n  exports: [TiCheckboxComponent],\r\n  declarations: [TiCheckboxComponent]\r\n})\r\nexport class TiCheckboxModule {\r\n}\r\nexport { TiCheckboxComponent } from './TiCheckboxComponent';\r\n","import { Component, ElementRef, HostListener, Input, IterableDiffer, IterableDiffers,\r\n     Renderer2, SimpleChanges } from '@angular/core';\r\nimport { TiCheckboxComponent } from '../checkbox/TiCheckboxModule';\r\nimport { ObservableMap, ObservableSet, Util } from '../../utils/Util';\r\n\r\n/**\r\n * Checkitem多选选项组件，尽管这是一个组件，使用时像属性指令。\r\n *\r\n */\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: '[tiCheckitem]',\r\n    templateUrl: '../checkbox/checkbox.html',\r\n    styleUrls: ['../checkbox/checkbox.less'],\r\n    // tslint:disable-next-line:use-host-property-decorator\r\n    host: {\r\n        'tiCheckbox': '' // 给宿主元素添加tiCheckbox属性，实现定制样式\r\n    }\r\n})\r\nexport class TiCheckitemComponent extends TiCheckboxComponent {\r\n\r\n    /**\r\n     * @ignore\r\n     * 全局item数据(多个group的item都在这里)\r\n     */\r\n    public static globeCheckedMap: ObservableMap = new ObservableMap();\r\n    /**\r\n     * @ignore\r\n     * 全局灰化禁用数据(多个group的item都在这里)\r\n     */\r\n    public static globeDisabledSet: ObservableSet = new ObservableSet();\r\n    /**\r\n     * 选择框item数据，item引用也是身份标示。\r\n     */\r\n    @Input() item: any;\r\n    /**\r\n     * 当存在valueKey时，选中值基于valueKey\r\n     * 10.0.4版本新增\r\n     */\r\n    @Input() valueKey: string;\r\n    /**\r\n     * 可选属性，当没有全选按钮，也要获得一组选中项时, 用来绑定已选中数据集。\r\n     */\r\n    @Input() beCheckeds: Set<any>|Array<any>;\r\n    private beCheckedSet: ObservableSet; // 用于存储选中的数据项。如果未配置valueKey，则存储的是整个数据项；如果指定valueKey，则存储的值基于选中项。\r\n    private beCheckedsDiffer: IterableDiffer<any>;\r\n    constructor(protected hostRef: ElementRef, protected renderer: Renderer2, protected iterableDiffers: IterableDiffers) {\r\n        // 是因为group item两个子类都用到differs，所以放在父类这里。\r\n        super(hostRef, renderer);\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 监听change事件，会多触发一次DoCheck。 //TODO: 不让这条HostListener('change', ['$event'])在文档显示\r\n     * @param checked\r\n     * @returns\r\n     */\r\n    @HostListener('change', ['$event']) public onHostChange(checked: any): void {\r\n        // item checked同步到globeCheckedSet\r\n        if (!this.item) {\r\n            return;\r\n        }\r\n\r\n        this.nativeElement.checked ?\r\n            TiCheckitemComponent.globeCheckedMap.set(this.item, true, this) :\r\n            this.nativeElement.indeterminate ?\r\n                TiCheckitemComponent.globeCheckedMap.set(this.item, null, this) :\r\n                TiCheckitemComponent.globeCheckedMap.set(this.item, false, this);\r\n        // item checked同步到beCheckedSet\r\n        if (this.beCheckedSet) {\r\n            const value: any = this.getValue(this.item);\r\n            this.nativeElement.checked ? this.beCheckedSet.add(value) : this.beCheckedSet.delete(value);\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.initBeCheckedSet();\r\n        if (!this.item) { // 用户忘了设定，或者继承的子类无需设定\r\n            return;\r\n        }\r\n        this.initGlobeCheckedSetItem();\r\n        this.setCheckedItem();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        super.ngOnChanges(changes);\r\n        // 外部直接给item重新赋值了。\r\n        if (changes['item'] && !changes['item'].isFirstChange()) {\r\n            // 删除已使用的静态资源。当然，这里有可能误删除。因为此item还在别处使用。   全选按钮那里，有纠正机制。\r\n            this. deleteGlobeRef(changes['item'].previousValue);\r\n            // 添加新的资源\r\n            this.setCheckedItem();\r\n            // 重新设置disabled\r\n            this.setDisabledStateGlobe();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        super.ngOnDestroy();\r\n        // 删除已使用的静态资源\r\n        this. deleteGlobeRef(this.item);\r\n        // 解除监听\r\n        TiCheckitemComponent.globeCheckedMap.removeObserver(this.globeCheckedMapObserverItemFn);\r\n    }\r\n\r\n    // 删除已使用的静态资源\r\n    private deleteGlobeRef(item: any): void {\r\n        TiCheckitemComponent.globeCheckedMap.delete(this.item);\r\n        TiCheckitemComponent.globeDisabledSet.delete(this.item);\r\n    }\r\n\r\n    ngDoCheck(): void {\r\n        super.ngDoCheck();\r\n        if (!this.beCheckedSet) {\r\n            return;\r\n        }\r\n        const beCheckedsChanges = this.beCheckedsDiffer.diff(this.beCheckeds);\r\n        if (beCheckedsChanges) {// beCheckeds同步到beCheckedSet\r\n            beCheckedsChanges.forEachAddedItem(\r\n                record => {\r\n                    this.beCheckedSet.add(record.item);\r\n                }\r\n            );\r\n            beCheckedsChanges.forEachRemovedItem(\r\n                record => {\r\n                    this.beCheckedSet.delete(record.item);\r\n                }\r\n            );\r\n        }\r\n    }\r\n    private initBeCheckedSet(): void {\r\n        if (!this.beCheckeds) {\r\n            return;\r\n        }\r\n        this.beCheckedsDiffer = this.iterableDiffers.find(this.beCheckeds).create(null);\r\n        this.beCheckedSet = new ObservableSet(this.beCheckeds); // TODO:写共用的Array/Set转Set\r\n        this.beCheckedSet.addObserver(\r\n            (item: any, isAdd: boolean) => {\r\n                // beCheckedSet的变化同步到beCheckeds\r\n                if (this.beCheckeds instanceof Set) {\r\n                    isAdd ? this.beCheckeds.add(item) : this.beCheckeds.delete(item);\r\n                } else if (this.beCheckeds instanceof Array) { // TODO:写公用的Array remove函数\r\n                    const index: number = this.beCheckeds.indexOf(item);\r\n                    if (isAdd && index === -1) {\r\n                        this.beCheckeds.push(item);\r\n                    } else if (!isAdd && index !== -1) {\r\n                        this.beCheckeds.splice(index, 1);\r\n                    }\r\n                }\r\n                // checkedSet通知到item checked\r\n                this.setCheckedItem();\r\n            }\r\n        );\r\n    }\r\n    /**\r\n     * globeCheckedSet同步到item checked\r\n     */\r\n    private initGlobeCheckedSetItem(): void {\r\n        // 初始化时，不往globeCheckedSet放值，是因为group优先级更高。\r\n        TiCheckitemComponent.globeCheckedMap.addObserver(this.globeCheckedMapObserverItemFn);\r\n    }\r\n\r\n    private globeCheckedMapObserverItemFn =  (item: any, value: any, isAdd: boolean , from: any) => {\r\n        if (from !== this && item === this.item && isAdd) {\r\n            // 从全局同步过来的，可能是半选\r\n            const lastChecked = this.nativeElement.checked;\r\n            const lastIndeterminate = (this.nativeElement.indeterminate === true) ? true : false; // 将undefined也转为false。\r\n            this.nativeElement.checked = (value === true);\r\n            this.nativeElement.indeterminate = (value === null);\r\n            if (this.nativeElement.checked !== lastChecked || this.nativeElement.indeterminate !== lastIndeterminate) {\r\n                Util.trigger(this.nativeElement, 'change'); // 必须主动触发change事件，否则ngModel不更新。\r\n            }\r\n        }\r\n    }\r\n    private setCheckedItem(): void {\r\n        if (!this.item) {\r\n            return;\r\n        }\r\n        const lastChecked: boolean = this.nativeElement.checked;\r\n        const value: any = this.getValue(this.item);\r\n        // 如果beCheckeds存在，优先级更高，以beCheckeds为准。\r\n        this.nativeElement.checked = this.beCheckedSet ? this.beCheckedSet.has(value) : TiCheckitemComponent.globeCheckedMap.get(this.item);\r\n        // 这里应该不用考虑半选吧？\r\n        if (this.nativeElement.checked !== lastChecked) {\r\n            Util.trigger(this.nativeElement, 'change'); // 必须主动触发change事件，否则ngModel不更新。\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    setDisabledState?(isDisabled: boolean): void {\r\n        super.setDisabledState(isDisabled);\r\n        this.setDisabledStateGlobe();\r\n    }\r\n\r\n    private setDisabledStateGlobe(): void {\r\n        this.nativeElement.disabled ? TiCheckitemComponent.globeDisabledSet.add(this.item)\r\n            : TiCheckitemComponent.globeDisabledSet.delete(this.item);\r\n    }\r\n    /**\r\n     * 输入：某个数据项\r\n     * 输出：当有valueKey,返回值基于valueKey；当没有valueKey时，返回输入值\r\n     */\r\n    protected getValue(item: any): any {\r\n        return this.valueKey ? item[this.valueKey] : item;\r\n    }\r\n}\r\n","import { Component, EventEmitter, HostListener, Input, IterableDiffer, Output, ViewEncapsulation } from '@angular/core';\r\n\r\nimport { ObservableMap, ObservableSet, TiLog } from '../../utils/Util';\r\nimport { TiCheckitemComponent } from './TiCheckitemComponent';\r\n// TODO: 有些用户提出，响应式表单里，checkgroup value没有绑定已选中数据，不方便。\r\n/**\r\n * Checkgroup全选框组件，主要功能为从一数据集合中选择某几条数据，与多选组件(Select multiple)功能相同，只是数据规模和视觉呈现不同。\r\n *\r\n * 复选框组通常由一个全选框和多个子复选框构成。\r\n *\r\n * <example-url>../tiny3demo/#/checkgroup/checkgroup-all</example-url>\r\n */\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: '[tiCheckgroup]',\r\n    templateUrl: '../checkbox/checkbox.html',\r\n    styleUrls: ['../checkbox/checkbox.less'],\r\n    // tslint:disable-next-line:use-host-property-decorator\r\n    host: {\r\n        'tiCheckbox': '' // 给宿主元素添加tiCheckbox属性，实现定制样式\r\n    }\r\n})\r\nexport class TiCheckgroupComponent extends TiCheckitemComponent {\r\n\r\n    /**\r\n     * 所有子选项数据\r\n     */\r\n    @Input() items: Array<any>;\r\n    /**\r\n     * 已选中数据集，双向绑定\r\n     */\r\n    @Input() checkeds: Array<any> | Set<any>;\r\n    /**\r\n     * 已选中数据集，双向绑定\r\n     */\r\n    @Output() readonly checkedsChange: EventEmitter<Set<any> | Array<any>> = new EventEmitter<Set<any> | Array<any>>();\r\n\r\n    private checkedMap: ObservableMap; // 储存本组所有子选项状态：key：item，value：true/false/null, 全选/不选/半选\r\n    private disabledSet: ObservableSet = new ObservableSet(); // 储存本组所有禁用的子选项\r\n\r\n    private itemsDiffer: IterableDiffer<any>;\r\n    private checkedsDiffer: IterableDiffer<any>;\r\n\r\n    /**\r\n     * @ignore\r\n     * 监听change事件，会多触发一次DoCheck。\r\n     * @param checked 原生change事件选中状态：全选，全不选\r\n     */\r\n    @HostListener('change', ['$event']) public onHostChange(checked: any): void {\r\n        super.onHostChange(checked);\r\n        if (this.nativeElement.checked === true) {\r\n            // 全选\r\n            this.checkAll(true);\r\n       } else if (this.nativeElement.indeterminate === true) {\r\n            // 半选情况，不作处理。\r\n       } else {\r\n            // 全不选\r\n            this.checkAll(false);\r\n       }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.initCheckedMap();\r\n        this.initGlobeCheckedMap();\r\n        this.initDisabledSet();\r\n        this.setChecked();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        super.ngOnDestroy();\r\n        // 解除监听\r\n        TiCheckitemComponent.globeCheckedMap.removeObserver(this.globeCheckedMapObserverFn);\r\n        TiCheckitemComponent.globeDisabledSet.removeObserver(this.globeDisabledSetObserverFn);\r\n    }\r\n\r\n    ngDoCheck(): void {\r\n        super.ngDoCheck();\r\n        // 【1】[items][checkeds] →  checkedMap\r\n        const itemsChanges: any = this.itemsDiffer.diff(this.items);\r\n        const checkedsChanges: any = this.checkedsDiffer.diff(this.checkeds);\r\n        if (checkedsChanges) {\r\n            checkedsChanges.forEachAddedItem(\r\n                record => {\r\n                    const item: any = this.getItem(record.item);\r\n                    if (this.items.includes(item)) {\r\n                        this.checkedMap.set(item, true, this.checkeds);\r\n                    } else {\r\n                        // 正常不会走到这里\r\n                        this.checkedMap.delete(item, this.checkeds);\r\n                        // 表格需求：允许用户设置的checkeds，范围大于items。所以会走到这里\r\n                        // TiLog.warn('checkeds new item is not in items');\r\n                    }\r\n                }\r\n            );\r\n            checkedsChanges.forEachRemovedItem(\r\n                record => {\r\n                    const item: any = this.getItem(record.item);\r\n                    if (this.items.includes(item)) {\r\n                        if (this.checkedMap.get(item) === true || this.checkedMap.get(item) === undefined) {\r\n                            this.checkedMap.set(item, false, this.checkeds);\r\n                        }\r\n                    } else {\r\n                        this.checkedMap.delete(item, this.checkeds);\r\n                    }\r\n                    // 强调：如果子选项是半选状态null，就不再置false了。\r\n                    // 规律：父节点，不会下达让子节点由null到false的指令。父节点，只会下达让节点由null到true的指令。\r\n                    // 注意：在树型结构中，外界@Input checkeds不能强制指定某个半选节点，变为不选。（checkeds中去除某个节点，此节点保持半选不变。）\r\n                }\r\n            );\r\n        }\r\n        // 将每次的变化，合入到全局变量中。因为多出来的项目，可能是刚才使用过的，所以需要重新赋值\r\n        if (itemsChanges) {\r\n            itemsChanges.forEachAddedItem(\r\n                record => {\r\n                    // Map中没有此项，会返回undefined\r\n                    if (this.checkedMap.has(record.item)) {\r\n                        //  初始化为什么会走到这里？本以为没有代码可以走到这里\r\n                        // 【5】checkedMap→globeCheckedMap\r\n                        TiCheckitemComponent.globeCheckedMap.set(record.item, this.checkedMap.get(record.item), this.checkedMap);\r\n                    } else {\r\n                        // 表格需求：checkeds允许范围比items更大。所以，根据checkeds来给checkedMap设置。\r\n                        let isChecked: boolean = false;\r\n                        const value = this.getValue(record.item);\r\n                        if (this.checkeds instanceof Array) {\r\n                            isChecked = this.checkeds.includes(value);\r\n                        } else if (this.checkeds instanceof Set) {\r\n                            isChecked = this.checkeds.has(value);\r\n                        }\r\n                        this.checkedMap.set(record.item, isChecked, this.checkeds);\r\n                        if (TiCheckitemComponent.globeDisabledSet.has(record.item)) {\r\n                            this.disabledSet.add(record.item);\r\n                        } else {\r\n                            this.disabledSet.delete(record.item);\r\n                        }\r\n                    }\r\n                }\r\n            );\r\n            itemsChanges.forEachRemovedItem(\r\n                record => {\r\n                    this.checkedMap.delete(record.item, this.checkeds); // from标志从checkeds来，所以词条checkedMap变化，并未同步到checkeds。\r\n                    // 注意：会造成checkeds范围大于items\r\n                    this.disabledSet.delete(record.item);\r\n                }\r\n            );\r\n        }\r\n        if (checkedsChanges || itemsChanges) {\r\n            // 【3】checkedMap →  Group checked\r\n            this.setChecked(); // 设置全选状态。本地checkedMap变化，元素很多，但只初始化一次。\r\n        }\r\n        // 发出事件：checkeds改变\r\n        if (checkedsChanges) {\r\n            // TODO：后面可能要做，更新引用。\r\n            // 一旦更新引用，就得要求所有用户双向绑定[(checkeds)]。但旧版demo里是单向绑定，对一些遗留用户不友好。\r\n            // tslint:disable-next-line:prefer-conditional-expression\r\n            // if (this.checkeds instanceof Array) {\r\n            //     this.checkeds = this.checkeds.concat([]); // 更新引用\r\n            // } else {\r\n            //     this.checkeds = new Set(Array.from(this.checkeds)); // 更新引用\r\n            // }\r\n\r\n            /**\r\n             * checkedsChange 回调中同步修改其他数据会报错，影响正常功能，所以需要延时，\r\n             * 为什么不使用setTimout而使用Promise，Promise.then 是微任务，比setTimout(宏任务)先执行，想尽量早emit事件\r\n             * 宏任务和微任务：https://juejin.cn/post/6844903657264136200\r\n             * issue: https://git.huawei.com/WCC/Tiny3/issues/1588\r\n             * 扩展：ngDoCheck,ngAfterViewChecked中emit事件，在事件回调中同步修改数据，都存在同样问题。\r\n             */\r\n            Promise.resolve(null).then(() => {\r\n                this.checkedsChange.emit(this.checkeds);\r\n            });\r\n        }\r\n    }\r\n    private initCheckedMap(): void {\r\n        // 监听items和checkeds\r\n        this.itemsDiffer = this.iterableDiffers.find(this.items).create(null);\r\n        this.checkedsDiffer = this.iterableDiffers.find(this.checkeds).create(null);\r\n        this.checkedMap = new ObservableMap();\r\n        this.items.forEach(// 【1】[items][checkeds] →  checkedMap\r\n            item => {\r\n                let isChecked: boolean = false;\r\n                const value: any = this.getValue(item);\r\n                if (this.checkeds instanceof Array) {\r\n                    isChecked = this.checkeds.includes(value);\r\n                } else if (this.checkeds instanceof Set) {\r\n                    isChecked = this.checkeds.has(value);\r\n                }\r\n                if (isChecked) { // 选中态，直接添加\r\n                    this.checkedMap.set(item, true, this.checkeds);\r\n                } else if (this.checkedMap.get(item) === true || this.checkedMap.get(item) === undefined) { // 初始化\r\n                    this.checkedMap.set(item, false, this.checkeds);\r\n                    // 强调：如果子选项是半选状态null，就不再置false了。\r\n                    // 规律：父节点，不会下达让子节点由null到false的指令。父节点，只会下达让节点由null到true的指令。\r\n                    // 注意：在树型结构中，外界@Input checkeds不能强制指定某个半选节点，变为不选。（checkeds中去除某个节点，此节点保持半选不变。）\r\n                }\r\n            }\r\n        );\r\n\r\n        this.checkedMap.addObserver(\r\n            (item: any, value: any, isAdd: boolean, from: any) => {\r\n                // 有多个来源：chekceds，（items），checkall，globe\r\n                // 不是从checkeds来的，就要同步到chekeds\r\n                if (from !== this.checkeds ) {\r\n                    // 【2】checkedMap- >[checkeds]\r\n                    const isChecked: boolean = isAdd && this.checkedMap.get(item);\r\n                    const newItem: any = this.getValue(item);\r\n                    if (this.checkeds instanceof Set) {\r\n                        isChecked ? this.checkeds.add(newItem) : this.checkeds.delete(item);\r\n                    } else if (this.checkeds instanceof Array) { // TODO:写公用的Array remove函数\r\n                        const index: number = this.checkeds.indexOf(newItem);\r\n                        if (isChecked && index === -1) {\r\n                            this.checkeds.push(newItem);\r\n                        } else if (!isChecked && index !== -1) {\r\n                            this.checkeds.splice(index, 1);\r\n                        }\r\n                    }\r\n                }\r\n                // 不是从全局来的，就要同步到全球。\r\n                if (from !== TiCheckitemComponent.globeCheckedMap)  {\r\n                    // 【5】checkedMap→globeCheckedMap\r\n                    TiCheckitemComponent.globeCheckedMap.set(item, value, this.checkedMap);\r\n                }\r\n                // 从全局来的，需要更新全选状态。（树形结构层级较多，需要这个逻辑）\r\n                if (from === TiCheckitemComponent.globeCheckedMap) {\r\n                    // 【3】checkedMap →  Group checked\r\n                    this.setChecked();\r\n                }\r\n            }\r\n        );\r\n    }\r\n    private initGlobeCheckedMap(): void {\r\n        // checkedMap以group端优先，disabled以item端优先。\r\n        // checkedMap同步加入到globeCheckedMap\r\n        this.checkedMap.getMap()\r\n        .forEach(\r\n            item => {\r\n                // 【5】checkedMap→globeCheckedMap\r\n                TiCheckitemComponent.globeCheckedMap.set(item[0], item[1], this.checkedMap);\r\n            }\r\n        );\r\n        // 监听globecheckedMap\r\n        TiCheckitemComponent.globeCheckedMap.addObserver(this.globeCheckedMapObserverFn);\r\n    }\r\n    private initDisabledSet(): void {\r\n        // 【7】globeDisabledSet→disabledSet，并监听\r\n        this.items.forEach(\r\n            item => {\r\n                TiCheckitemComponent.globeDisabledSet.has(item) ?\r\n                    this.disabledSet.add(item) : this.disabledSet.delete(item);\r\n            }\r\n        );\r\n        // 【7】globeDisabledSet→disabledSet，监听globeDisabledSet\r\n        TiCheckitemComponent.globeDisabledSet.addObserver(this.globeDisabledSetObserverFn);\r\n        // 【8】disabledSet→Group checked\r\n        this.disabledSet.addObserver(\r\n            (item: any, isAdd: boolean) => {\r\n                this.setChecked();\r\n            }\r\n        );\r\n    }\r\n    /**\r\n     * 【6】globeCheckedMap→checkedMap\r\n     */\r\n    private globeCheckedMapObserverFn = (item: any, value: any, isAdd: boolean, from: any) => {\r\n        if (from !== this.checkedMap && this.items.includes(item)) {\r\n            // 同步globe的改变到本地\r\n            if (isAdd) {\r\n                this.checkedMap.set(item, value, TiCheckitemComponent.globeCheckedMap);\r\n            } else {\r\n                // !isAdd. 如果globe删除了某项，但这项属于自己的子项，那么把这一项添加回globe。（场景：子项item动态改变，并未销毁，却触发了全局delete）\r\n                TiCheckitemComponent.globeCheckedMap.set(item, this.checkedMap.get(item), this.checkedMap);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 【7】globeDisabledSet→disabledSet\r\n     */\r\n    private globeDisabledSetObserverFn = (item: any, isAdd: boolean) => {\r\n        if (isAdd && this.items.includes(item)) {\r\n            this.disabledSet.add(item);\r\n        } else if (!isAdd) {\r\n            this.disabledSet.delete(item);\r\n        }\r\n    }\r\n    /**\r\n     * 设置本group全选框的状态 【3】checkedMap →  Group checked\r\n     */\r\n    private setChecked(): void {\r\n        this.checked(this.getCheckedStatus());\r\n    }\r\n    /**\r\n     * 规则一：disabled状态的复选框不影响全选状态，所以需要将其从统计信息中过滤\r\n     * 例如有3个复选框，前两个为选中状态，最后一个是disabled，则认为整体为全部选中状态\r\n     * 所以无需关心disabled复选框的选中状态，只需关心非disabled状态即可\r\n     * 规则二：但当子复选框全部是disabled状态时，将会影响全选的状态\r\n     * @returns 全选：true，全不选：false，半选：null\r\n     */\r\n    private getCheckedStatus(): boolean {\r\n        if (this.items.length === 0) {// 情景零：没有选项\r\n            return false;\r\n        }\r\n        // 用户可勾选项目数\r\n        let checkedableNum = this.items.length - this.disabledSet.size;\r\n        const isTotalCount = (this.disabledSet.size === 0 || checkedableNum === 0); // 全部可用，或者全部禁用。所有选项进入统计。\r\n        if (checkedableNum === 0) { // 如果全部禁用，那么所有选项都计入统计。\r\n            checkedableNum = this.items.length;\r\n        }\r\n        let checkedNum = 0; // 选中项数目（非禁用）\r\n        let notCheckedNum = 0; // 未选项数目（非禁用）\r\n        for (const item of this.items) {\r\n            if (isTotalCount || !this.disabledSet.has(item)) { // 全部进入统计，或者未禁用项进入统计。\r\n                switch (this.checkedMap.get(item)) {\r\n                    case true:\r\n                        checkedNum++;\r\n                        break;\r\n                    case false:\r\n                        notCheckedNum++;\r\n                        break;\r\n                    case null:\r\n                        return null; // 只要有一个子选项是半选，那么结果是半选。\r\n                    default:\r\n                        // 不会走到这里\r\n                        TiLog.error('getCheckedStatus(),can not reach code, items item is not in checkedMap');\r\n                        break;\r\n                }\r\n                if (checkedNum !== 0 && notCheckedNum !== 0) {\r\n                    // 有选中，有不选中，所以半选。\r\n                    return null; // 半选\r\n                } else if (checkedNum === checkedableNum) {\r\n                    return true;\r\n                } else if (notCheckedNum === checkedableNum) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        // Logger.error('getCheckedStatus(),end, can not reach code,');\r\n        return false;\r\n    }\r\n    /**\r\n     *  设置全选框的状态值\r\n     * 【4】Group checked →  checkedMap\r\n     * @param checked\r\n     */\r\n    private checkAll(checked: boolean): void {\r\n\r\n        this.items.forEach(\r\n            item => {\r\n                if (!this.disabledSet.has(item)) {\r\n                        // 【4】Group checked →  checkedMap\r\n                        this.checkedMap.set(item, checked, this.checkAll);\r\n                }\r\n            }\r\n        );\r\n    }\r\n    /**\r\n     * 输出：得到整个item对象\r\n     * @param value item对象或者数据的身份标识\r\n     *\r\n     */\r\n    private getItem(value: any): any {\r\n        for (const obj of this.items) {\r\n            if (obj === value || obj[this.valueKey] === value) {\r\n                return obj;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n/*\r\n需求：Group checked，Item checked，[(checkedSet)]三者其一改变，都要通知其他二者。所以采用中介者模式。\r\n\r\n版本一：Tiny2,中介者是[(checkedSet)]，但要求Item也去绑定[(groupCheckedSet)]\r\n\r\n                           Group checked    ←  disabledSet\r\n                                     ↕                               ↑\r\n[dataArray]         [checkedSet]            groupDisabledSet\r\n                                     ↕                               ↑\r\n                            Item checked             Item disabled\r\n\r\n版本二：中介者是全局变量globeCheckedSet，不要求Item绑定其他变量。\r\n\r\n                          Group checked   ←   disabledSet\r\n[dataArray]                   ↕                              ↑\r\n[(checkedSet)]↔globeCheckedSet     globeDisabledSet\r\n                                     ↕                              ↑\r\n                            Item checked           Item disabled\r\n\r\n版本三：链条传递，不要求Item绑定其他变量。\r\n\r\n                   Group checked       ←     disabledSet\r\n                            ↕                                         ↑\r\n[dataArray] [checkedSet]                               ↑\r\n                            ↕                                         ↑\r\n                   globeCheckedSet            globeDisabledSet\r\n                            ↕                                         ↑\r\n                    Item checked                  Item disabled\r\n\r\n版本四：Tiny3, 链条传递，不要求Item绑定其他变量。但也可以绑定所属于组织选中变量。Array/Set兼容\r\n\r\n                                    Group checked       ←     disabledSet\r\n                                            ↕                                     ↑\r\n            [checkeds] ↔  checkedSet                            ↑\r\n                                            ↕                                     ↑\r\n                                    globeCheckedSet            globeDisabledSet\r\n                                             ↕                                     ↑\r\n                                    Item checked                   Item disabled\r\n                                             ↕\r\n         [beCheckeds] ↔ beCheckedSet\r\n版本五：Tiny3, 链条传递，不要求Item绑定其他变量。但也可以绑定所属于组织选中变量。Array/Set兼容。\r\n兼容Tree树形结构，子节点也有可能是半选状态。\r\n                                                                    8\r\n                                    Group checked       ←     disabledSet\r\n                             1>         3↑↓4                                 ↑\r\n [items][checkeds] ↔  checkedMap                           ↑\r\n                            <2          5↓↑6                                  ↑7\r\n                                    globeCheckedMap          globeDisabledSet\r\n                                            ↓↑                                     ↑\r\n                                    Item checked                    Item disabled\r\n                                            ↓↑\r\n         [beCheckeds] ↔ beCheckedSet\r\n*/\r\n/*\r\n@Input支持Set<any>|Array<any>\r\n方案一：每次使用时，都判断类型，调用不同方法。\r\n方案二：@Input set时，给Array绑定上has()、add()、delete()方法，但是get size怎么绑定？\r\n方案三：Set<any>|Array，赋值给新的Set。Tiny3采用\r\n */\r\n            /* TODO：Tiny3已去除此逻辑，推测Tiny3应该没有此Bug。等IE环境好了后，再测试。\r\n              解决IE浏览器下的复选框半选状态BUG，\r\n              bug单号：http://code.huawei.com/WCC/TinyPlus/issues/1397\r\n              BUG表现：当复选框的状态为半选状态，\r\n                       点击复选框的时候IE浏览器会把复选框状态为  checked = false，\r\n                       而其他浏览器会直接变成checked = true,\r\n              原因分析参考地址：https://github.com/jquery/jquery/issues/1698\r\n                                http://www.xuebuyuan.com/1322692.html\r\n              解决方案：绑定点击事件，手动更改checked状态，同时更新子复选框选中状态。\r\n             */\r\n","import { NgModule } from '@angular/core';\r\nimport { TiCheckgroupComponent } from './TiCheckgroupComponent';\r\nimport { TiCheckitemComponent } from './TiCheckitemComponent';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\nimport { TiOutlineModule } from '../../directives/outline/TiOutlineModule';\r\n\r\n@NgModule({\r\n  imports: [\r\n    TiIconModule,\r\n    TiOutlineModule\r\n  ],\r\n  exports: [TiCheckgroupComponent, TiCheckitemComponent],\r\n  declarations: [TiCheckgroupComponent, TiCheckitemComponent]\r\n})\r\nexport class TiCheckgroupModule {\r\n}\r\nexport { TiCheckgroupComponent } from './TiCheckgroupComponent';\r\nexport { TiCheckitemComponent } from './TiCheckitemComponent';\r\n","import { NgModule } from '@angular/core';\r\nimport { TiRendererModule } from '../renderer/TiRendererModule';\r\nimport { TiTipServiceModule } from '../tip/TiTipServiceModule';\r\n\r\n@NgModule({\r\n  imports: [\r\n    TiRendererModule,\r\n    TiTipServiceModule\r\n  ]\r\n})\r\nexport class TiOverflowServiceModule {\r\n}\r\n","import { ComponentRef, Injectable, Renderer2, RendererFactory2 } from '@angular/core';\r\nimport { TiRenderer } from '../renderer/TiRenderer';\r\nimport { TiLog, Util } from '../../utils/Util';\r\nimport { TiPositionType } from '../../utils/Position';\r\nimport { TiTipRef, TiTipShowInfo } from '../tip/TiTipInterface';\r\nimport { TiTipService } from '../tip/TiTipService';\r\nimport { TiOverflowServiceModule } from './TiOverflowServiceModule';\r\n\r\n/**\r\n * @ignore\r\n * overflow配置项接口，用于[TiOverflowService.create]{@link ../injectables/TiOverflowService.html#create}参数使用\r\n */\r\nexport interface TiOverflowConfig {\r\n    /**\r\n     * tip显示时所依据的元素，使用该元素位置显示tip位置，默认为宿主元素,当tip显示所依赖的元素的和宿主元素不一致时才需要定义\r\n     */\r\n    tipElement?: Element | Function;\r\n    /**\r\n     * tip内容，默认为宿主元素文本\r\n     */\r\n    tipContent?: string;\r\n    /**\r\n     * tip位置\r\n     */\r\n    tipPosition?: TiPositionType;\r\n    /**\r\n     * tip最大宽度\r\n     */\r\n    tipMaxWidth?: string;\r\n    /**\r\n     * @ignore\r\n     * 决定定位元素水平方向的元素，用于宿主元素水平方向位置与host元素不一致的场景，暂不对外开放\r\n     */\r\n    tipHostEleX?: Element;\r\n}\r\n/**\r\n * @ignore\r\n * create方法返回值\r\n */\r\nexport interface TiOverflowRef {\r\n    destroy(): void;\r\n}\r\n/**\r\n * @ignore\r\n * 文本过长出...并tip提示配置项，使用该服务时需要引入模块TiOverflowServiceModule，该组件提供了两种使用方式:\r\n *\r\n * 1.服务方式（见如下说明）\r\n *\r\n * 2.指令方式：[TiOverflowDirective]{@link ../directives/TiOverflowDirective.html}\r\n *\r\n * <example-url>../tiny3demo/#/overflow/overflow-all</example-url>\r\n */\r\n@Injectable({\r\n    providedIn: TiOverflowServiceModule\r\n  })\r\nexport class TiOverflowService {\r\n    private renderer: Renderer2;\r\n    constructor(rendererFactory: RendererFactory2,\r\n                private tiRenderer: TiRenderer,\r\n                private tipService: TiTipService) {\r\n            /* tslint:disable:no-null-keyword */\r\n            this.renderer = rendererFactory.createRenderer(null, null);\r\n    }\r\n    /**\r\n     * 生成tip提示方法\r\n     * @param hostElement 文本过长的宿主对象\r\n     * @param config overflow配置项\r\n     * 返回 {destroy(): void} 销毁文本过长的tip提示，使用服务方式时，需要在宿主元素销毁时，通过调用该方法销毁文本过长的tip提示\r\n     */\r\n    create(hostElement: Element, config?: TiOverflowConfig): TiOverflowRef {\r\n        this.tiRenderer.setStyles(hostElement, {\r\n            whiteSpace: 'nowrap',\r\n            textOverflow: 'ellipsis',\r\n            overflow: 'hidden'\r\n        });\r\n        // 非法情况处理\r\n        if (!Util.isElement(hostElement)) {\r\n            TiLog.warn('overflow: hostEle type is not element');\r\n\r\n            // 防止外部使用报错，此处做返回值处理\r\n            return {\r\n                destroy(): void {}\r\n            };\r\n        }\r\n        // 如果该元素为inline元素时，宽度不生效会导致元素出...样式不生效，因此此处做处理\r\n        // 修复SSR报错：ERROR ReferenceError: getComputedStyle is not defined\r\n        if (typeof getComputedStyle !=='undefined' && getComputedStyle(hostElement).display === 'inline') {\r\n            this.renderer.setStyle(hostElement, 'display', 'inline-block');\r\n        }\r\n        const tipInstance: TiTipRef = this.generateTip(hostElement, config || {});\r\n\r\n        return {\r\n            destroy(): void {\r\n                if (tipInstance) {\r\n                    tipInstance.hide();\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public isOverflow(element: Element): boolean {\r\n        // 复制DOM，并计算元素宽度\r\n        // 此处使用clone方式而不使用scrollWidth方式,是因为目前发现scrollWidth在IE下获取到的值有问题，不可作为文本溢出的判断条件\r\n        const eleStyles: any = getComputedStyle(element);\r\n        const cloneEle: any = element.cloneNode(true);\r\n        this.tiRenderer.setStyles(cloneEle, {\r\n            // 涉及内容字体的相关样式处理\r\n            fontSize: eleStyles.fontSize,\r\n            fontWeight: eleStyles.fontWeight,\r\n            fontFamily: eleStyles.fontFamily,\r\n            padding: eleStyles.padding,\r\n            paddingLeft: eleStyles.paddingLeft, // 处理在IE和火狐下获取padding为空问题：在火狐和IE下只能用只能用padding+[方位]的方式来获取元素的padding值\r\n            paddingRight: eleStyles.paddingRight,\r\n            border: eleStyles.border,\r\n            boxSizing: eleStyles.boxSizing,\r\n            height: eleStyles.height,\r\n            // 涉及宽度布局的相关样式处理\r\n            maxWidth: 'none', // 清除最大宽度样式，确保内容可显示完全\r\n            width: 'auto',\r\n            overflow: 'visible',\r\n            display: 'inline-block', // display block的情况下，元素父容器设置margin时，导致导致body变宽，从而与元素本身宽度不匹配，会导致可显示完全但出tip的问题，因此此处改变其display方式\r\n            visibility: 'hidden', // 元素隐藏但做占位处理\r\n            whiteSpace: 'nowrap',\r\n            position: 'absolute', // 避免克隆元素影响页面高度，导致出滚动条\r\n            left: '-9999px',\r\n            top: '-9999px'\r\n\r\n        });\r\n        this.renderer.appendChild(document.body, cloneEle);\r\n        // 使用getBoundingClientRect而不使用getComputedStyle,是因为getComputedStyle在\r\n        // 各浏览器获取到的宽度不一致（IE下取到的是内容宽度，而在Chrome和FF下取到的是整个元素宽度）。\r\n        // IE下计算精度高(小数点后15位)，多数中文和数字或英文混排的文本计算出来的 maxWidth 和 textWidth\r\n        // 由于精度高而导致有微小差距，从而影响了 isOverflow 的判断结果，从实际测试得来结论：保留两位小数能够保证判断结果更准确些。\r\n        const maxWidth: number = parseFloat(element.getBoundingClientRect().width\r\n            .toFixed(2));\r\n        const textWidth: number = parseFloat(cloneEle.getBoundingClientRect().width\r\n            .toFixed(2));\r\n        // 此处没有使用angular的Renderer2是因为Renderer2.removeChild必须有变化检测才能在dom上生效，\r\n        // 此处考虑到性能不触发变化检测，所以选择使用原生的removeChild方法。\r\n        document.body.removeChild(cloneEle);\r\n\r\n        return textWidth > maxWidth;\r\n    }\r\n    private generateTip(element: Element, options: TiOverflowConfig): TiTipRef {\r\n        // 文本超长时，显示tip提示：\r\n        // tip显示位置元素设置：默认为element\r\n        const config: TiOverflowConfig = options || {};\r\n        let hostEleConfig: any = config.tipElement;\r\n        if (typeof hostEleConfig === 'function') {\r\n            hostEleConfig = hostEleConfig(element);\r\n        }\r\n        const tipHostEle: Element = hostEleConfig || element;\r\n\r\n        return this.tipService.create(tipHostEle, {\r\n            hostEleX: config.tipHostEleX,\r\n            position: config.tipPosition,\r\n            maxWidth: config.tipMaxWidth,\r\n            trigger: 'mouse',\r\n            showFn: (): TiTipShowInfo => {\r\n                // tipContent 为空 或者 未溢出情况下，不显示tip\r\n                // tipPosition设置为none是去除Select默认超长tip，改由template内容自定义tip\r\n                if (config.tipPosition === 'none' || config.tipContent === '' || !this.isOverflow(element)) {\r\n                    return;\r\n                }\r\n                // tip内容设置：默认为元素中的文本内容\r\n                let tipContent: string = config.tipContent;\r\n                if (Util.isUndefined(tipContent)) { // content可能为\"\"，因此此处判断undefined而不使用||\r\n                    tipContent = element.textContent;\r\n                }\r\n\r\n                return { content: tipContent };\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { Directive, ElementRef, Input, OnInit } from '@angular/core';\r\nimport { TiOverflowService } from '../../services/overflow/TiOverflowService';\r\nimport { TiPositionType } from '../../utils/Position';\r\n\r\n/**\r\n * 超长情况下文本处理出...并tip提示\r\n *\r\n * <example-url>../tiny3demo/#/overflow/overflow-all</example-url>\r\n */\r\n@Directive({\r\n      selector: '[tiOverflow]:not([maxLine])'\r\n})\r\nexport class TiOverflowDirective implements OnInit {\r\n      /**\r\n       * 配置宿主元素支持文本过长提示功能，不需要配置属性值，存在该属性即可\r\n       */\r\n      @Input() tiOverflow: any;\r\n      /**\r\n       * 配置文本过长时显示的tip内容，默认为宿主元素文本\r\n       */\r\n      @Input() tiTipContent: string;\r\n      /**\r\n       * 配置文本过长时显示的tip位置\r\n       */\r\n      @Input() tiTipPosition: TiPositionType;\r\n      /**\r\n       * 配置文本过长时显示的tip的最大宽度。\r\n       *\r\n       * 3.0.9新增\r\n       */\r\n      @Input() tiTipMaxWidth: string = '276px';\r\n      /**\r\n       * @ignore\r\n       * 决定tip水平方向位置的宿主元素配置\r\n       */\r\n      @Input() tiTipHostEleX: Element;\r\n      private overflowRef: any;\r\n      constructor(private ele: ElementRef, private overflowService: TiOverflowService) {\r\n      }\r\n      ngOnInit(): void {\r\n            this.overflowRef = this.overflowService.create(this.ele.nativeElement, {\r\n                  tipContent: this.tiTipContent,\r\n                  tipPosition: this.tiTipPosition,\r\n                  tipHostEleX: this.tiTipHostEleX,\r\n                  tipMaxWidth: this.tiTipMaxWidth\r\n            });\r\n      }\r\n      // 服务方式的overflow无法自销毁，因此此处在组件销毁时销毁服务方式生成的组件实例\r\n      ngOnDestroy(): void {\r\n            if (this.overflowRef) {\r\n                  this.overflowRef.destroy();\r\n            }\r\n      }\r\n}\r\n","import {\r\n    AfterContentChecked,\r\n    AfterViewInit,\r\n    Directive,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    NgZone,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    Renderer2,\r\n    SimpleChanges\r\n} from '@angular/core';\r\nimport { TiTipService } from '../../services/tip/TiTipService';\r\nimport { TiTipRef } from '../../services/tip/TiTipInterface';\r\nimport { Util, TiBrowser } from '../../utils/Util';\r\nimport { TiPositionType } from '../../utils/Position';\r\n\r\n/**\r\n * 多行文本超出情况下文本处理出...并tip提示\r\n *\r\n */\r\n@Directive({\r\n    selector: '[tiOverflow][maxLine]'\r\n})\r\n\r\nexport class TiOverflowMaxlineDirective implements AfterViewInit, AfterContentChecked, OnChanges, OnDestroy {\r\n    public nativeElement: any;\r\n    constructor(\r\n        private hostRef: ElementRef,\r\n        private renderer2: Renderer2,\r\n        private tipService: TiTipService,\r\n        private zone: NgZone) {\r\n        this.nativeElement = this.hostRef.nativeElement;\r\n    }\r\n    /**\r\n     * 文本最大行数，默认3行\r\n     */\r\n    @Input() maxLine: number = 3;\r\n    /**\r\n     * 配置文本过长时显示的tip的最大宽度。\r\n     *\r\n     * 3.0.9新增\r\n     */\r\n    @Input() tiTipMaxWidth: string = '276px';\r\n    /**\r\n     * 文本被截断之后的tip方向\r\n     */\r\n    @Input() tiTipPosition: TiPositionType;\r\n    /**\r\n     * 文本被截断之后的tip内容\r\n     */\r\n    @Input() tiTipContent: string;\r\n    /**\r\n     * @ignore\r\n     * 文本被截断之后末尾图标展示\r\n     */\r\n    @Input() iconName: string;\r\n    /**\r\n     * 图标提示\r\n     */\r\n    @Input() iconTip: string = '';\r\n    /**\r\n     * 宿主文本\r\n     */\r\n    @Input() textContent: string;\r\n    /**\r\n     * @ignore\r\n     * 文本被截断之后的末尾填充符号\r\n     */\r\n    @Input() character: string = '...'; // 暂不开放\r\n    /**\r\n     * @ignore\r\n     * 图标是否可以聚焦，默认不可聚焦。\r\n     */\r\n    @Input() iconFocusable: boolean = false;\r\n    /**\r\n     * @ignore\r\n     * 图标是否灰化，默认不灰化\r\n     */\r\n    @Input() iconDisabled: boolean = false;\r\n    /**\r\n     * @ignore\r\n     * 文本被截断之后末尾图标点击事件\r\n     */\r\n    @Output() readonly iconClick: EventEmitter<Event> = new EventEmitter();\r\n    private text: string; // 宿主元素文本\r\n    private isShave: boolean; // 是否已经截取\r\n    private tipInstance: TiTipRef;  // tip实例\r\n    private icontipInstance: TiTipRef;  // icontip实例\r\n\r\n    private listenFns: Array<() => void>; // 监听事件\r\n    private windowResizeListener: () => void;\r\n    private tipContent: string; // 最终展示的tip内容\r\n\r\n    private shaveTextFn = (): void => {\r\n        let fontHtml: string;\r\n        if (Util.isEmptyString(this.iconName)) {\r\n            fontHtml = '';\r\n        } else {\r\n            // 此处添加属性tiOverflowEndicon为了适配在plus3中定义末尾图标的样式\r\n            // 在labelEditor组件中，需要可以聚焦。\r\n            fontHtml = this.iconFocusable ? `<span style=\"display:inline-block;width:16px;line-height: 1\"\r\n                tabindex=\"${this.iconDisabled ? -1 : 0}\" tiOverflowEndicon  class=\"ti3-icon-${this.iconName} ti3-icon\"></span>`\r\n                : `<span style=\"display:inline-block;width:16px;line-height: 1\"\r\n                tiOverflowEndicon class=\"ti3-icon-${this.iconName} ti3-icon\"></span>`;\r\n        }\r\n        // 修复SSR错误：ERROR ReferenceError: getComputedStyle is not defined\r\n        if (typeof getComputedStyle === 'undefined') {\r\n            return;\r\n        }\r\n        const lineHeight: number = parseFloat(getComputedStyle(this.nativeElement)\r\n            .getPropertyValue('line-height'));\r\n        const multiLineHeight: number = lineHeight * this.maxLine;\r\n        this.nativeElement.textContent = this.text;\r\n        // 如果该元素为inline元素时，宽度不生效会导致元素出...样式不生效，因此此处做处理\r\n        if (getComputedStyle(this.nativeElement).display === 'inline') {\r\n            this.renderer2.setStyle(this.nativeElement, 'display', 'inline-block');\r\n        }\r\n        this.nativeElement.insertAdjacentHTML('beforeend', fontHtml);\r\n        if (this.text.length < 2 || this.nativeElement.offsetHeight <= multiLineHeight) {\r\n            this.setEvents();\r\n            this.isShave = false;\r\n\r\n            return;\r\n        }\r\n        let charHtml: string = this.character;\r\n        charHtml = charHtml.concat(fontHtml);\r\n        // 以下使用二分算法计算文本截取位置\r\n        let max: number = this.text.length - 1;\r\n        let min: number = 0;\r\n        let middle: number;\r\n        while (min < max) {\r\n            middle = (min + max + 1) / 2;\r\n            this.nativeElement.textContent = this.text.slice(0, middle);\r\n            this.nativeElement.insertAdjacentHTML('beforeend', charHtml);\r\n            if (this.nativeElement.offsetHeight > multiLineHeight + 1) {\r\n                max = middle - 1; // 截取的内容少\r\n            } else {\r\n                min = middle; // 截取的内容多\r\n            }\r\n        }\r\n        this.nativeElement.textContent = this.text.slice(0, max);\r\n        this.nativeElement.insertAdjacentHTML('beforeend', charHtml);\r\n        this.setEvents();\r\n        this.isShave = true;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.text = this.textContent || this.nativeElement.innerHTML;\r\n        if ((changes.maxLine && !changes.maxLine.firstChange)\r\n            || (changes.textContent && !changes.textContent.firstChange)) {\r\n            this.shaveTextFn();\r\n        }\r\n\r\n        if (this.iconFocusable && changes.iconDisabled && !changes.iconDisabled.firstChange) {\r\n            const spanEle: HTMLElement = this.nativeElement.querySelector('span[tiOverflowEndicon]');\r\n            if (spanEle) {\r\n                this.renderer2.setAttribute(spanEle, 'tabindex', this.iconDisabled ? '-1' : '0');\r\n            }\r\n        }\r\n    }\r\n    // tip配置\r\n    ngAfterViewInit(): void {\r\n        this.text = this.textContent || this.nativeElement.innerHTML; // 视图初始化完成后获取宿主元素文本\r\n        if (TiBrowser.isIE()) {\r\n            setTimeout(() => {\r\n                this.shaveTextFn(); // IE下需延时处理，否则初始化获取到 offsetHeight 值与谷歌有差异\r\n            }, 0);\r\n        } else {\r\n            this.shaveTextFn();\r\n        }\r\n        this.renderer2.listen(this.nativeElement, 'mouseenter', (): void => {\r\n            if (this.isShave) {\r\n                this.tipContent = this.tiTipContent || this.text;\r\n                if (!this.tipInstance) {\r\n                    this.tipInstance = this.tipService.create(this.nativeElement, {\r\n                        position: this.tiTipPosition || 'right',\r\n                        maxWidth: this.tiTipMaxWidth,\r\n                        trigger: 'mouse'\r\n                    });\r\n                    this.tipInstance.show(this.tipContent);\r\n                } else {\r\n                    this.tipInstance.show(this.tipContent);\r\n                }\r\n            }\r\n        });\r\n        this.renderer2.listen(this.nativeElement, 'mouseleave', (): void => {\r\n            if (this.tipInstance) {\r\n                this.tipInstance.hide();\r\n            }\r\n        });\r\n        // 修复SSR错误：ERROR ReferenceError: window is not defined\r\n        if (typeof window === 'undefined') {\r\n            return;\r\n        }\r\n        this.zone.runOutsideAngular(() => {\r\n            this.windowResizeListener = this.renderer2.listen(window, 'resize', this.shaveTextFn);\r\n        });\r\n    }\r\n\r\n    ngAfterContentChecked(): void {\r\n        if (!this.nativeElement.children || this.nativeElement.children.length < 1) {\r\n            return;\r\n        }\r\n         // 解绑原有监听\r\n        if (this.listenFns) {\r\n            this.listenFns.forEach((fn: () => void) => fn());\r\n        }\r\n        this.listenFns = new Array<any>();\r\n        this.listenFns.push(this.renderer2.listen(this.nativeElement.children[0], 'click', (): void => {\r\n            this.iconClick.emit();\r\n            if (this.icontipInstance) {\r\n                this.icontipInstance.hide();\r\n            }\r\n        }));\r\n        this.listenFns.push(this.renderer2.listen(this.nativeElement.children[0], 'mouseenter', (): void => {\r\n            if (this.tipInstance) {\r\n                this.tipInstance.hide();\r\n            }\r\n            this.icontipInstance = this.tipService.create(this.nativeElement.children[0], {\r\n                position: 'top',\r\n                maxWidth: this.tiTipMaxWidth,\r\n                trigger: 'mouse'\r\n            });\r\n            this.icontipInstance.show(this.iconTip);\r\n        }));\r\n        this.listenFns.push(this.renderer2.listen(this.nativeElement.children[0], 'mouseleave', (): void => {\r\n            if (this.tipInstance) {\r\n                this.tipInstance.show(this.tipContent);\r\n            }\r\n            if (this.icontipInstance) {\r\n                this.icontipInstance.hide();\r\n            }\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.windowResizeListener) {\r\n            this.windowResizeListener();\r\n        }\r\n        if (this.listenFns) {\r\n            this.listenFns.forEach((fn: () => void) => fn());\r\n        }\r\n    }\r\n\r\n    public setEvents(): void {\r\n        if (this.iconFocusable) {\r\n            const clickIconEle: HTMLElement = this.nativeElement.querySelector('span[tiOverflowEndicon]');\r\n            if (!clickIconEle) {\r\n                return;\r\n            }\r\n            this.zone.runOutsideAngular((): void => {\r\n                this.renderer2.listen(clickIconEle, 'mousedown', (): void => {\r\n                    this.renderer2.setStyle(clickIconEle, 'outline', 'none');\r\n                });\r\n                this.renderer2.listen(clickIconEle, 'blur', (): void => {\r\n                    this.renderer2.setStyle(clickIconEle, 'outline', '');\r\n                });\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { TiOverflowDirective } from './TiOverflowDirective';\r\nimport { TiOverflowMaxlineDirective } from './TiOverflowMaxlineDirective';\r\nimport { TiOverflowServiceModule } from '../../services/overflow/TiOverflowServiceModule';\r\n\r\n@NgModule({\r\n  imports: [\r\n    TiOverflowServiceModule\r\n  ],\r\n  exports: [TiOverflowDirective, TiOverflowMaxlineDirective],\r\n  declarations: [TiOverflowDirective, TiOverflowMaxlineDirective]\r\n})\r\nexport class TiOverflowModule {\r\n}\r\nexport { TiOverflowDirective } from './TiOverflowDirective';\r\nexport { TiOverflowMaxlineDirective } from './TiOverflowMaxlineDirective';\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    Output,\r\n    Renderer2,\r\n    ViewChild,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n    selector: 'ti-date-dominator',\r\n    templateUrl: './datedominator.html',\r\n    styleUrls: ['./datedominator.less'],\r\n    // tslint:disable-next-line:use-host-property-decorator\r\n    host: {\r\n        '(mouseenter)': 'onMouseenter()',\r\n        '(mouseleave)': 'onMouseleave()',\r\n        '[class.ti3-date-dominator-container]': 'true'\r\n    },\r\n    encapsulation: ViewEncapsulation.None, // 灰化设置样式\r\n    providers: [TiFormComponent.getValueAccessor(TiDateDominatorComponent) ]\r\n})\r\n\r\nexport class TiDateDominatorComponent extends TiFormComponent {\r\n    @Input() clearable: boolean; // 是否显示删除按钮\r\n    @Input() format: string; // 该接口主要用于range组件中线的定位：用于计算宽度\r\n    @Input() type: string; // 类型：'date','range'\r\n    @Input() isTime: boolean; // 是否是纯时间组件\r\n    @Output() readonly clear: EventEmitter<any> = new EventEmitter<any>(); // 点击删除按钮的事件回调\r\n    /**\r\n     * @ignore\r\n     * 是否显示清除图标\r\n     */\r\n    public showClear: boolean;\r\n    constructor(\r\n        protected render: Renderer2,\r\n        protected hostRef: ElementRef) {\r\n            super(hostRef, render);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.setFocusableElems([this.nativeElement]);\r\n    }\r\n\r\n    onIconClearClick(event: MouseEvent): void {\r\n        this.clear.emit(event);\r\n    }\r\n\r\n    onMouseenter(): void {\r\n        this.showClear = true;\r\n    }\r\n    onMouseleave(): void {\r\n        this.showClear = false;\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiOverflowModule } from '../../directives/overflow/TiOverflowModule';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\nimport { TiDateDominatorComponent } from './TiDateDominatorComponent';\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiIconModule,\r\n    TiOverflowModule\r\n  ],\r\n  exports: [TiDateDominatorComponent],\r\n  declarations: [TiDateDominatorComponent]\r\n})\r\nexport class TiDateDominatorModule {\r\n\r\n}\r\nexport { TiDateDominatorComponent } from './TiDateDominatorComponent';\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    HostBinding,\r\n    Input,\r\n    Renderer2,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport { TiBrowser, TiDateUtil, TiKeymap, Util } from '../../utils/Util';\r\nimport { TiLocale, TiLocaleFormat, TiLocaleWords } from '../../locale/TiLocaleModule';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n   selector: 'ti-date-edit',\r\n   templateUrl: './dateedit.html',\r\n   styleUrls: ['../text/text.less'], // 引用text的less文件\r\n   providers: [TiFormComponent.getValueAccessor(TiDateEditComponent)]\r\n})\r\n\r\nexport class TiDateEditComponent extends TiFormComponent {\r\n    @Input() format: string; // 设置日期显示格式\r\n    @Input() min: Date; // 设置最小日期值\r\n    @Input() max: Date; // 设置最大日期值\r\n    @Input() disabled: boolean; // 支持禁用\r\n\r\n    @Input() disabledDays: Array<any>;\r\n\r\n    @ViewChild('input', { static: true }) inputRef: ElementRef;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @HostBinding('style.display') display: string = 'inline-block';\r\n\r\n    protected oldMinvalue: Date;\r\n    protected oldMaxvalue: Date;\r\n    private oldModel: Date;\r\n    private oldInputvalue: string;\r\n    public inputValue: string = '';\r\n    public placehoderText: string;\r\n    public MAX: Date = TiDateUtil.maxDate();\r\n    public MIN: Date = TiDateUtil.minDate();\r\n\r\n    constructor(\r\n        protected hostRef: ElementRef,\r\n        protected render: Renderer2) {\r\n            super(hostRef, render);\r\n    }\r\n\r\n    writeValue(value: Date): void {\r\n        super.writeValue(value);\r\n        // model为null时，输入框不显示内容\r\n        if (value === null) {\r\n            return;\r\n        }\r\n\r\n        // 传入的model值是非日期时，设置为当前日期\r\n        if (!TiDateUtil.isDate(value)) {\r\n            this.model = new Date();\r\n        } else if (TiDateUtil.isBigger(value, this.max)) { // 如果大于最大值，设置为最大值\r\n            this.model = this.max;\r\n        } else if (TiDateUtil.isSmaller(value, this.min)) { // 小于最小值，设置为最小值\r\n            this.model = this.min;\r\n        }\r\n    }\r\n\r\n    // model值变化时的回调: dateedit中inputValue变化时未能及时渲染到页面上\r\n    ngOnModelChange(): void {\r\n        setTimeout(() => {\r\n            this.formatValue();\r\n        }, 0);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        // 设置聚焦元素为input\r\n        this.setFocusableElems([this.inputRef.nativeElement]);\r\n        // format接口校验:对时间日期进行国际化处理\r\n        this.validateFormat();\r\n\r\n        // 最大最小值校验\r\n        this.validateMinAndMax();\r\n\r\n        if (!Util.isUndefined(this.format)) {\r\n            this.setPlacehoderText();\r\n        }\r\n\r\n        this.oldMinvalue = this.min;\r\n        this.oldMaxvalue = this.max;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // format支持动态变更\r\n        if (changes['format'] && !changes['format'].firstChange) {\r\n            // 新的format是非法时，format值保持之前值不变\r\n            if (!Util.isString(changes['format'].currentValue) && !Util.isString(changes['format'].currentValue.date)) {\r\n                this.format = changes['format'].previousValue;\r\n\r\n                return;\r\n            }\r\n            if (!Util.isString(changes['format'].currentValue)) {\r\n                this.format = changes['format'].currentValue.date;\r\n            }\r\n            this.setPlacehoderText();\r\n            this.formatValue();\r\n        }\r\n    }\r\n    /**\r\n     * 不同场景下设置日期输入框placehoder文本\r\n     */\r\n    private setPlacehoderText(): void {\r\n        // 以下是为了处理英文状态下，dateEdit输入时有问题，将其placeholder调整为国际化以后的值\r\n        const englishFormatArr: any = this.format.match(/M/g);\r\n        // tslint:disable-next-line:newline-per-chained-call\r\n        const formatPureArr: any = this.format.split(/[-\\/\\.\\_,\\s]/).filter(this.filterEmptyFn);\r\n        // 确定其为英文显示月份\r\n        if (Util.isArray(englishFormatArr) && englishFormatArr.length === 3) {\r\n            formatPureArr.length === 3 ? this.placehoderText = 'MM/dd/yyyy' : this.placehoderText = 'MM/yyyy';\r\n        } else {\r\n            this.placehoderText = this.format;\r\n        }\r\n    }\r\n\r\n    onFocus(): void {\r\n        // 在输入框聚焦时获取当前合法的model值：\r\n        this.oldModel = this.model;\r\n    }\r\n\r\n    onBlur(): void {\r\n        if (this.oldInputvalue !== this.inputValue) {\r\n            this.handleInputValue();\r\n        }\r\n    }\r\n\r\n    onKeydown(event: KeyboardEvent): void {\r\n        if (event.keyCode === TiKeymap.KEY_ENTER  || event.keyCode === TiKeymap.KEY_NUMPAD_ENTER) {\r\n            this.handleInputValue();\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    handleInputValue(): void {\r\n        // blur时拿到输入框的值\r\n        this.inputValue = this.inputRef.nativeElement.value;\r\n        // 校验输入框中值：得到合法的model值\r\n        if (this.inputValue !== '') {\r\n            this.getValidModel();\r\n        } else {\r\n            this.model = null; // 当用户输入为空或者为null的情况,model赋值为null\r\n        }\r\n\r\n        // 根据model值格式化\r\n        this.formatValue();\r\n        this.oldInputvalue = this.inputValue;\r\n    }\r\n\r\n    isValidValue(value: Date): boolean {\r\n        // value值为null时会将输入框清空，是一个合法的value值\r\n        if (value === null) {\r\n            return true;\r\n        }\r\n\r\n        // value值为一个Date类型值并且在最大最小值范围内时，是一个合法值\r\n        if (TiDateUtil.isDate(value) &&\r\n            !TiDateUtil.isBigger(value, this.max) && !TiDateUtil.isSmaller(value, this.min)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public  filterEmptyFn(value: any): any {\r\n        return value !== '';\r\n    }\r\n\r\n    // 日期格式校验\r\n    private validateFormat(): void {\r\n        if (Util.isString(this.format) && this.format !== '') {\r\n            return;\r\n        }\r\n        // TODO:如果配置时间日期国际化\r\n        this.format = (TiLocale.getLocaleWords() as TiLocaleWords).tiLocaleDate['date'];\r\n    }\r\n\r\n    // 最大值最小值校验\r\n    private validateMinAndMax(): void {\r\n        // 最大值合法性校验:(时分秒：23:59:59)\r\n        const maxTimeChanged: Date = TiDateUtil.changeMaxTime(this.max);\r\n        this.max = TiDateUtil.isDate(this.max) ? maxTimeChanged : this.MAX;\r\n\r\n        // 最小值合法性校验:(时分秒：0:0:0)\r\n        const minTimeChanged: Date = TiDateUtil.changeMinTime(this.min);\r\n        this.min = TiDateUtil.isDate(this.min) ? minTimeChanged : this.MIN;\r\n\r\n        // 最大最小值矛盾时，设置为默认值\r\n        if (this.max.getTime() < this.min.getTime()) {\r\n            this.max = this.MAX;\r\n            this.min = this.MIN;\r\n        }\r\n    }\r\n\r\n    // 根据model值和format接口，格式化显示时间日期\r\n    public formatValue(): void {\r\n        this.inputValue = (this.model !== null) ? TiLocaleFormat.formatDate(this.model, this.placehoderText) : '';\r\n        this.oldInputvalue = this.inputValue;\r\n    }\r\n\r\n    // 校验输入框中的值\r\n    private getValidModel(): void {\r\n        // 支持分隔符:中划线，下划线，点，斜杠\r\n        const reg: RegExp = new RegExp('[年\\\\月\\\\日\\\\-\\\\/\\\\.\\\\_]');\r\n        const dateArr: Array<string> = this.inputValue.split(reg);\r\n        const formatArr: Array<string> = this.placehoderText.split(reg);\r\n        let dateValue: any;\r\n        const arr: Array<number> = []; // 保存format格式下年月日的顺序下标；年月日，日月年，月日年，年月。。。\r\n        for (let i: number = 0; i < formatArr.length; i++) {\r\n            if (formatArr[i].indexOf('y') !== -1) {\r\n                arr[0] = i;\r\n            } else if (formatArr[i].indexOf('M') !== -1) {\r\n                arr[1] = i;\r\n            } else if (formatArr[i].indexOf('d') !== -1) {\r\n                arr[2] = i;\r\n            }\r\n        }\r\n        // 处理年月情况\r\n        if (arr.length === 2) {\r\n            dateArr[arr[2]] = '1';\r\n        }\r\n\r\n        // 浏览器兼容性处理：对于非法日期表现不一致：eg:new Date('2018/13/12'),谷歌和火狐处理为非法日期对象，而IE浏览器会处理为2019/1/12；\r\n        // 获取当前月总天数\r\n        const totalDays: number = new Date(parseInt(dateArr[arr[0]], 10), parseInt(dateArr[arr[1]], 10), 0).getDate();\r\n\r\n        // 将时间日期转换成字符串，原因：2018-3-34 不合法日期，用new Date(2018, 2, 34)生成日期对象，会处理成 ==>2018/4/3\r\n        // 将其转换成字符串形式：new Date('2018/2/34')生成日期对象，处理成 ==>Invalid Date对象\r\n        dateValue = TiBrowser.isIE() && (parseInt(dateArr[arr[1]], 10) > 12 || parseInt(dateArr[arr[2]], 10) > totalDays)\r\n           || (String(new Date(parseInt(dateArr[arr[0]], 10), parseInt(dateArr[arr[1]], 10), parseInt(dateArr[arr[2]], 10))) === 'Invalid Date')\r\n           || dateArr.length > 3 ?\r\n                    'Invalid Date' : new Date(`${dateArr[arr[0]]}/${dateArr[arr[1]]}/${dateArr[arr[2]]}`);\r\n\r\n        // 1.输入值为不合法日期：2018-3-34;\r\n        // 2.输入值不在最小值最大值范围内;\r\n        // 3.当前输入框中的值，和上次输入框中的值相同时;\r\n        // tslint:disable-next-line:triple-equals\r\n        this.model = String(dateValue) === 'Invalid Date' || !this.isValidValue(dateValue) || this.isDisabledDays(dateValue)\r\n        ? this.oldModel : new Date(TiDateUtil.getDateStr(dateValue));\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 是否为禁用日期\r\n     */\r\n    public isDisabledDays(value: Date): boolean {\r\n        let isDisabled: boolean = false;\r\n        if (Util.isArray(this.disabledDays) && this.disabledDays.length > 0) {\r\n            this.disabledDays.forEach((item: Date) => {\r\n                if (item.getTime() === value.getTime()) {\r\n                    isDisabled = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        return isDisabled;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TiDateEditComponent } from './TiDateEditComponent';\r\nimport { TiTextModule } from '../text/TiTextModule';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TiTextModule\r\n  ],\r\n  exports: [TiDateEditComponent],\r\n  declarations: [TiDateEditComponent]\r\n})\r\nexport class TiDateEditModule {\r\n\r\n}\r\nexport { TiDateEditComponent } from './TiDateEditComponent';\r\n","/* eslint-disable no-param-reassign */\r\nimport {\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    NgZone,\r\n    Output,\r\n    QueryList,\r\n    Renderer2,\r\n    ViewChild,\r\n    ViewChildren,\r\n    Inject\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\nimport { TiDateUtil, TiKeymap, Util } from '../../utils/Util';\r\nimport { TiLocale, TiLocaleWords } from '../../locale/TiLocaleModule';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiDateDominatorComponent } from '../datedominator/TiDateDominatorModule';\r\nimport { TiDropComponent } from '../drop/TiDropModule';\r\nimport { TiDateEditComponent } from '../dateedit/TiDateEditModule';\r\nimport { TiButtonComponent } from '../button/TiButtonModule';\r\nimport { TiTextComponent } from '../text/TiTextModule';\r\n\r\n/**\r\n * 时间日期范围类组件value接口\r\n */\r\nexport interface TiDateValue {\r\n    /**\r\n     * 起始时间： Date类型，在最大值最小值范围内\r\n     */\r\n    begin?: Date;\r\n    /**\r\n     * 结束时间： Date类型，在最大值最小值范围内\r\n     */\r\n    end?: Date;\r\n}\r\n\r\nexport interface TiDateCustomizeOptions {\r\n    /**\r\n     * 自定义时间文本\r\n     */\r\n    label: string;\r\n    /**\r\n     * 自定义时间值\r\n     */\r\n    value: TiDateValue;\r\n}\r\n\r\n/**\r\n * 时间日期格式化配置\r\n */\r\nexport interface TiDatetimeFormat {\r\n    /**\r\n     * 日期格式化配置，默认配置'yyyy/MM/dd'\r\n     *\r\n     * 1. 年可以设置为：'yyyy' —— 四位数字表示年：例如：'2016'；\r\n     *\r\n     * 2. 月可以设置为：'MMMM'——月份英文全称(January-December)；\r\n     * 'MMM'——月份英文简称 (Jan-Dec)；\r\n     * 'MM'——两位数字表示月份 (01-12)；\r\n     * 'M'——开头不补零方式表示月份 (1-12).\r\n     *\r\n     * 3. 日可以设置为：\r\n     * dd——两位数字表示日期(01-31);\r\n     * d——开头不补零数字表示日期 (1-31).\r\n     */\r\n    date: string;\r\n    /**\r\n     * 时间格式化配置，默认配置'HH:mm:ss'\r\n     *\r\n     * 1.小时可以设置为：\r\n     *\r\n     * HH —— 24小时制,两位数字表示小时(00-23)\r\n     *\r\n     * H —— 24小时制，开头不补零数字表示小时(0-23)\r\n     *\r\n     * 2.分钟可以设置为：\r\n     *\r\n     * mm —— 两位数字表示分钟值（00-59）\r\n     *\r\n     * m —— 开头不补零数字表示分钟值（0-59）\r\n     *\r\n     * 3.秒可以设置为：\r\n     *\r\n     * ss —— 两位数字表示秒值(00-59)\r\n     *\r\n     * s —— 开头不补零数字表示秒值(0-59)\r\n     *\r\n     * 说明：开头补零是指当前时间是个位数字时，前边补零，始终保持两位数字\r\n     */\r\n    time: string;\r\n}\r\n\r\n/**\r\n * @ignore\r\n * dateRange以及datetimeRange组件适配datepanel的接口类型\r\n */\r\nexport interface TiPicker {\r\n     value?: TiDateValue;\r\n     type?: string;\r\n     picker?: string;\r\n     min?: Date;\r\n     max?: Date;\r\n     nowDateTime?: Date;\r\n     format?: string | TiDatetimeFormat; // 两种类型:date dateRange组件是string类型，datetime datetimeRange组件是DatetimeFormat类型\r\n     select?(): void; // 月份/日期，点击事件回调函数\r\n     selectTimeFn?(val: any): void;\r\n }\r\n\r\n/**\r\n * @ignore\r\n * 配置time组件的接口\r\n */\r\nexport interface TimeOptions {\r\n    value?: string;\r\n    min?: string;\r\n    max?: string;\r\n}\r\n\r\n// lib编译要求@Component\r\n@Component({\r\n    template: ''\r\n})\r\n\r\nexport class TiDateBaseComponent extends TiFormComponent {\r\n    /**\r\n     * @ignore\r\n     * 下拉距离选择框0px\r\n     */\r\n    private static readonly DOMINATOR_SPACE: number = -30;\r\n    /**\r\n     * 日期/日期时间下拉选择框距离浏览器上下边沿的距离为5px，开发者可在项目中整体配置\r\n     */\r\n    public static BROWSER_SPACE: number = 5;\r\n    /**\r\n     * 设置最小值\r\n     */\r\n    @Input() min: Date = TiDateUtil.minDate();\r\n    /**\r\n     * 设置最大值\r\n     */\r\n    @Input() max: Date = TiDateUtil.maxDate();\r\n    /**\r\n     * 设置日期显示格式；详见测试用例\r\n     *\r\n     * date和dateRange组件中类型为string，默认配置为：'yyyy/MM/dd'；\r\n     *\r\n     * datetime和datatimerange组件中类型为TiDatetimeFormat，默认配置：{data: 'yyyy/MM/dd', time: 'HH:mm:ss'}\r\n     *\r\n     */\r\n    @Input() format: string | TiDatetimeFormat;\r\n    /**\r\n     * 由用户自定义现在时间，如果不设置该属性值，则默认为当前系统时间\r\n     */\r\n    @Input() nowDateTime: Date;\r\n    /**\r\n     * 控制时间日期类组件是否展示清除日期图标（默认显示）\r\n     */\r\n    @Input() clearIcon: boolean = true;\r\n    /**\r\n     * 面板对齐方式\r\n     */\r\n    @Input() panelAlign: 'left' | 'right' = 'left';\r\n    /**\r\n     * 配置自定义时间\r\n     */\r\n    @Input() customizeOptions: TiDateCustomizeOptions;\r\n    /**\r\n     * 自定义禁用日期\r\n     */\r\n    @Input() disabledDays: Array<Date>;\r\n    /**\r\n     * 开始值固定不可选\r\n     */\r\n    @Input() isBeginFixed: boolean = false;\r\n    /**\r\n     * 结束值固定不可选\r\n     */\r\n    @Input() isEndFixed: boolean = false;\r\n    /**\r\n     * 此接口只适用于dateRange组件，是否允许结束日期和开始日期为同一天\r\n     */\r\n    @Input() isAllowBeginEqualEnd: boolean = true;\r\n    /**\r\n     * （date组件无该接口）点击时间日期面板上的确认按钮触发的事件\r\n     */\r\n    @Output() readonly okClick: EventEmitter<any> = new EventEmitter();\r\n    /**\r\n     * 点击日期面板上的日期触发的事件\r\n     */\r\n    @Output() readonly dayClick: EventEmitter<any> = new EventEmitter();\r\n    /**\r\n     * @ignore\r\n     * dominator组件\r\n     */\r\n    @ViewChild(TiDateDominatorComponent, /* TODO: add static flag */ { static: true }) dominatorCom: TiDateDominatorComponent;\r\n    /**\r\n     * @ignore\r\n     * drop下拉组件\r\n     */\r\n    @ViewChild(TiDropComponent, /* TODO: add static flag */ { static: true }) dropCom: TiDropComponent;\r\n    /**\r\n     * @ignore\r\n     *\r\n     * 配合tab快捷键操作的过度Dom\r\n     */\r\n    @ViewChild('input', { static: true }) inputRef: ElementRef;\r\n    /**\r\n     * @ignore\r\n     * dateEdit组件\r\n     */\r\n    @ViewChildren(TiDateEditComponent) dateEditComs: QueryList<TiDateEditComponent>;\r\n    /**\r\n     * @ignore\r\n     * 时间编辑框\r\n     */\r\n    @ViewChildren(TiTextComponent) textComs: QueryList<TiTextComponent>;\r\n    /**\r\n     * @ignore\r\n     * button组件\r\n     */\r\n    @ViewChildren(TiButtonComponent) buttonComs: QueryList<TiButtonComponent>;\r\n\r\n    private readonly localeWords: TiLocaleWords = TiLocale.getLocaleWords();\r\n\r\n    // 该基类主要用于实现公共变量接口声明,公共的事件，以及公共方法\r\n    /**\r\n     * @ignore\r\n     * 保存旧日期显示格式\r\n     */\r\n    public oldFormat: string | TiDatetimeFormat;\r\n    /**\r\n     * @ignore\r\n     * 保存旧开始日期\r\n     */\r\n    public oldBeginValue: Date;\r\n    /**\r\n     * @ignore\r\n     * 保存旧结束日期\r\n     */\r\n    public oldEndValue: Date;\r\n    /**\r\n     * @ignore\r\n     * 保存旧model值：date类型或者datevalue类型\r\n     */\r\n    public oldModel: Date | TiDateValue;\r\n    /**\r\n     * @ignore\r\n     * 判断当前value值是不是合法的，不合法则确认按钮灰化\r\n     */\r\n    public inValidValue: boolean;\r\n    /**\r\n     * @ignore\r\n     * 标记点击叉号\r\n     */\r\n    public isClearClick: boolean;\r\n    /**\r\n     * @ignore\r\n     * 标志是日期还是时间日期\r\n     */\r\n    public isDatetime: boolean;\r\n    /**\r\n     * @ignore\r\n     * 标志是时间日期还是时间日期段\r\n     */\r\n    public isRange: boolean;\r\n    /**\r\n     * @ignore\r\n     * 标志是时间选择面板还是日期选择面板\r\n     */\r\n    public selectTime: boolean = false;\r\n    /**\r\n     * @ignore\r\n     * 对应每个时间日期组件的最大最小值的配置\r\n     */\r\n    public config: {min: Date, max: Date} = {\r\n        min: TiDateUtil.minDate(),\r\n        max: TiDateUtil.maxDate()\r\n    };\r\n    /**\r\n     * @ignore\r\n     * model默认值\r\n     */\r\n    public defaultValue: TiDateValue = {\r\n        begin: null,\r\n        end: null\r\n    };\r\n    /**\r\n     * @ignore\r\n     * 模板初始化\r\n     */\r\n    public datePanel: TiPicker = {\r\n        value: this.defaultValue\r\n    };\r\n\r\n    /**\r\n     * @ignore\r\n     * date/datetime 面板宽度\r\n     */\r\n    public datePanelWidth: string = '286px';\r\n    /**\r\n     * @ignore\r\n     * daterange/datetimerange 面板宽度\r\n     */\r\n    public daterangePanelWidth: string = '558px';\r\n    /**\r\n     * @ignore\r\n     * 日期显示字符串\r\n     */\r\n    public inputValue: string = '';\r\n    private documentKeydownListener: () => void;\r\n    /**\r\n     * @ignore\r\n     * 模板中使用\r\n     */\r\n    public browserSpace: string = TiDateBaseComponent.BROWSER_SPACE + 'px';\r\n    /**\r\n     * @ignore 面板与dominator的距离\r\n     */\r\n    public dominatorSpace: string = TiDateBaseComponent.DOMINATOR_SPACE + 'px';\r\n    /**\r\n     * @ignore\r\n     * 记录当前面板内部编辑区域焦点位置\r\n     */\r\n    public focusedPosition: string = 'begin';\r\n    /**\r\n     * @ignore\r\n     * 时间编辑框placehoder\r\n     */\r\n    public timeplaceholder: string = 'hh:mm:ss';\r\n    /**\r\n     * @ignore\r\n     * 底部选择时间按钮禁用标志\r\n     */\r\n    public timeEditDisabled: boolean;\r\n    /**\r\n     * @ignore\r\n     * 标志是否存在左侧自定义时间区域\r\n     */\r\n    public hasCustomizeTime: boolean = false;\r\n    /**\r\n     * @ignore\r\n     * 可聚焦元素集合\r\n     */\r\n    public focusElementsArr: Array<any> = [];\r\n\r\n    constructor(protected hostRef: ElementRef, protected render: Renderer2, private zone: NgZone,\r\n        @Inject(DOCUMENT) private document) {\r\n        super(hostRef, render);\r\n    }\r\n\r\n    private static getFocusElements(focusComs: any, focusElements: Array<any>): Array<any> {\r\n        for (const focusCom of focusComs.toArray()) {\r\n            focusElements = focusElements.concat(focusCom.getFocusableElems());\r\n        }\r\n\r\n        return focusElements;\r\n    }\r\n\r\n    /**\r\n     * 组件快捷键处理tab键 enter键\r\n     */\r\n    @HostListener('keydown', ['$event']) public onKeydown(event: KeyboardEvent): void {\r\n        switch (event.keyCode) {\r\n            case TiKeymap.KEY_TAB : // TAB键\r\n                this.hidePanel();\r\n                break;\r\n            case TiKeymap.KEY_ENTER : // ENTER键(大键盘)\r\n            case TiKeymap.KEY_NUMPAD_ENTER : // ENTER键(数字小键盘)\r\n                this.responseEnter();\r\n                break;\r\n            default :\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * writeValue区分是不是range组件：\r\n     */\r\n    writeValue(value: any): void {\r\n        super.writeValue(value);\r\n        // 1.daterange和datetimerange组件的处理\r\n        // 新旧值判断处理放在docheck中\r\n        if (this.isRange) {\r\n            // value不是对象时，将value设置为null，输入框中显示空白\r\n            if (!(value instanceof Object) || !this.isValidValue(value)) {\r\n                this.model = null;\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        // 2.date和datetime组件的处理，非法时间日期值统一置为null，显示空\r\n        if (!this.isValidValue(value)) {\r\n            this.model = null;\r\n\r\n            return;\r\n        }\r\n\r\n        // 新旧值相同时不作处理；\r\n        if (TiDateUtil.isDateEqual(value, this.model)) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:use-life-cycle-interface\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        // 是否存在左侧自定义面板\r\n        this.hasCustomizeTime = !Util.isUndefined(this.customizeOptions) && !Util.isNull(this.customizeOptions);\r\n        // format接口校验:对时间日期进行国际化处理\r\n        this.validateFormat(this.isDatetime);\r\n\r\n        // 最大最小值校验\r\n        this.validateMinAndMax(this.config, this.isDatetime);\r\n\r\n        this.zone.runOutsideAngular(() => { // 避免不停触发变化检测\r\n            // document上的Ecs快捷键功能\r\n            this.documentKeydownListener = this.render.listen(this.document, 'keydown', this.keydownHandlerFn);\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        super.ngAfterViewInit();\r\n        // 定义变量存储聚焦元素；\r\n        let focusElements: Array<any> = [];\r\n\r\n        // 获取dateedit的聚焦元素\r\n        focusElements = TiDateBaseComponent.getFocusElements(this.dateEditComs, focusElements);\r\n        // 获取时间编辑框聚焦元素\r\n        if (this.textComs.length !== 0) {\r\n            for (const textCom of this.textComs.toArray()) {\r\n                focusElements = focusElements.concat(textCom.nativeElement);\r\n            }\r\n        }\r\n\r\n        if (this.inputRef) {\r\n            focusElements = focusElements.concat(this.inputRef.nativeElement);\r\n        }\r\n\r\n        // 获取确认取消按钮的聚焦元素\r\n        for (const buttonCom of this.buttonComs.toArray()) {\r\n            focusElements = focusElements.concat(buttonCom.nativeElement);\r\n        }\r\n        this.focusElementsArr = focusElements;\r\n        this.setFocusableElems([this.dominatorCom.nativeElement]\r\n            .concat(this.dropCom.nativeElement)\r\n            .concat(focusElements));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        super.ngOnDestroy();\r\n        if (this.documentKeydownListener) {\r\n            this.documentKeydownListener();\r\n        }\r\n    }\r\n\r\n    protected keydownHandlerFn = (event: KeyboardEvent): void => {\r\n        if (!this.dropCom.isShow) {\r\n            return;\r\n        }\r\n        if (event.keyCode === TiKeymap.KEY_ESCAPE) {\r\n            this.hidePanel();\r\n            this.dominatorCom.focus();\r\n        }\r\n        this.tabKeydown(event);\r\n    }\r\n\r\n    /**\r\n     * 实现按tab键时，focus在下拉面板中循环\r\n     */\r\n    private tabKeydown(event: KeyboardEvent): void {\r\n        if(this.focusElementsArr.length === 0 ) {\r\n            return;\r\n        }\r\n        let focusChanged: boolean = false;\r\n        if (event.keyCode === TiKeymap.KEY_TAB) {\r\n            const panelFocusElementsArr = this.focusElementsArr.filter((item: any) => !item.hasAttribute('disabled'));\r\n            if (event.shiftKey) {\r\n                if(event.target === panelFocusElementsArr[0]) {\r\n                    focusChanged = true;\r\n                    panelFocusElementsArr[panelFocusElementsArr.length - 1].focus();\r\n                }\r\n            } else if (event.target === panelFocusElementsArr[panelFocusElementsArr.length - 1]) {\r\n                focusChanged = true;\r\n                panelFocusElementsArr[0].focus();\r\n            }\r\n        }\r\n        if (focusChanged) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    // ----------------------------- 公共事件处理 -----------------------------\r\n    /**\r\n     * @ignore\r\n     * 点击面板展开收起函数\r\n     */\r\n    public onShowClick(): void {\r\n        if (this.disabled) { // 非灰化可点击展开面板\r\n            return;\r\n        }\r\n\r\n        if (this.dropCom.isShow || this.isClearClick) {\r\n            this.isClearClick = false;\r\n            this.dropCom.hide();\r\n        } else {\r\n            // 配置时间日期面板接口\r\n            this.setPickerDate();\r\n            this.show();\r\n            this.selectTime = false; // 面板打开初次总展示日期面板\r\n            setTimeout(() => {\r\n                if (this.isBeginFixed && !this.isEndFixed) {\r\n                    this.dateEditComs.last.focus(); // 开始值固定，则第二个编辑区域聚焦\r\n                    this.focusedPosition = 'end';\r\n                } else {\r\n                    this.dateEditComs.first.focus(); // 初始化打开面板，第一个编辑区域聚焦\r\n                    this.focusedPosition = 'begin';\r\n                }\r\n            }, 0);\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 左侧自定义时间文本点击事件\r\n     */\r\n    public customizeTimeClickFn(val: TiDateValue): void {\r\n        this.model = val;\r\n        this.dropCom.hide();\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 点击选择时间，根据初始传入值设定下拉选择项\r\n     */\r\n    public selectTimeFn(): void {\r\n        if (this.timeEditDisabled) {\r\n            return;\r\n        }\r\n        this.selectTime = true; // 切换为时间选择面板\r\n        this.textComs.first.nativeElement.focus();\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public selectDateFn(): void {\r\n        this.selectTime = false;\r\n        this.dateEditComs.first.nativeElement.focus();\r\n        this.focusedPosition = 'begin';\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public dateEditClick(val: string): void {\r\n        if (this.isBeginFixed || this.isEndFixed) {\r\n            return;\r\n        }\r\n        this.focusedPosition = val;\r\n        this.selectTime = false;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public dateEditFocus(val: string): void {\r\n        this.focusedPosition = val;\r\n        this.selectTime = false;\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 时间框聚焦\r\n     */\r\n    public timeFocus(val: string): void {\r\n        this.selectTime = true;\r\n        this.focusedPosition = val === 'begin' ? 'beginTime' : 'endTime';\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public setTimeFn(obj: any, beginTime: TimeOptions, endTime?: TimeOptions): void {\r\n        const timePosition: string = obj.timeOption;\r\n        const beginTimeArr: any = beginTime.value.split(':');\r\n        let endTimeArr: any;\r\n        if (!Util.isUndefined(endTime)) {\r\n            endTimeArr = endTime.value.split(':');\r\n        }\r\n        switch (timePosition) {\r\n            case 'beginHour':\r\n                beginTimeArr[0] = obj.val.label;\r\n                break;\r\n            case 'beginMinute':\r\n                beginTimeArr[1] = obj.val.label;\r\n                break;\r\n            case 'beginSecond':\r\n                beginTimeArr[2] = obj.val.label;\r\n                break;\r\n            case 'endHour':\r\n                endTimeArr[0] = obj.val.label;\r\n                break;\r\n            case 'endMinute':\r\n                endTimeArr[1] = obj.val.label;\r\n                break;\r\n            case 'endSecond':\r\n                endTimeArr[2] = obj.val.label;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        beginTime.value = beginTimeArr.join(':');\r\n        if (!Util.isUndefined(endTime)) {\r\n            endTime.value = endTimeArr.join(':');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 点击删除按钮\r\n     */\r\n    public onIconClearClick(event: MouseEvent): void {\r\n        // 阻止事件冒泡：可以防止点击叉号引起面板的显示或者隐藏，但此处不能阻止事件冒泡，\r\n        // 事件不会冒泡到document上，会出现页面上其他下拉类组件面板不收起情况\r\n        // 添加标志量，在onShowClick函数中处理\r\n        if (this.disabled || !this.clearIcon) {\r\n            return;\r\n        }\r\n        this.isClearClick = true;\r\n        this.model = null;\r\n        this.oldBeginValue = null;\r\n        this.oldEndValue = null;\r\n        this.inputValue = '';\r\n        // 时间日期面板显示则隐藏\r\n        this.hidePanel();\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 隐藏drop, 适用于drop中用户点击引起drop隐藏，阻止了整体失焦。\r\n     */\r\n    public hideDrop(): void {\r\n        // 阻止整体失去焦点\r\n        this.dominatorCom.focus();\r\n        this.dropCom.hide();\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 隐藏面板\r\n     */\r\n    public hidePanel(): void {\r\n        if (this.dropCom.isShow) {\r\n            this.dropCom.hide();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * enter键的功能：如果面板展开不处理，面板收起则展开，设置datePanel指令的接口值\r\n     */\r\n    public responseEnter(): void {\r\n        if (this.dropCom.isShow) {\r\n            return;\r\n        }\r\n\r\n        // 面板收起前是年或月面板，按enter键重新设置datePanel指令的接口值\r\n        this.setPickerDate();\r\n\r\n        // 时间面板展开\r\n        this.show();\r\n        setTimeout(()=> {\r\n            this.dateEditComs.first.nativeElement.focus();\r\n            this.focusedPosition = 'begin';\r\n        }, 0);\r\n    }\r\n    /**\r\n     * @ignore\r\n     *\r\n     * 设置按钮禁用场景下 过度input的样式（适配tab快捷键场景）\r\n     */\r\n    public setInputStyle(val: boolean): void {\r\n        if(val) {\r\n            this.render.removeStyle(this.inputRef.nativeElement, 'display');\r\n            this.render.setStyle(this.inputRef.nativeElement, 'opacity', '0');\r\n        } else {\r\n            this.render.setStyle(this.inputRef.nativeElement, 'display', 'none');\r\n        }\r\n    }\r\n\r\n    // ----------------------------- 公共方法处理 -----------------------------\r\n    /**\r\n     * @ignore\r\n     * 判断是不是合法的DatetimeFormat: format为对象 {date:'', time: ''}\r\n     */\r\n    public isValidDatetimeFormat(): boolean {\r\n        return (this.format instanceof Object) && Util.isString(this.format['date']) && Util.isString(this.format['time']);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 最大值最小值校验:和date组件不同，此处不需要做最大最小时分秒处理\r\n     */\r\n    public validateMinAndMax(dateCofig: {min: Date, max: Date}, isDatetime: boolean): void {\r\n        const maxChanged: Date = isDatetime ? this.max : TiDateUtil.changeMaxTime(this.max);\r\n        this.max = TiDateUtil.isDate(this.max) ? maxChanged : dateCofig.max;\r\n\r\n        const minChanged: Date = isDatetime ? this.min : TiDateUtil.changeMinTime(this.min);\r\n        this.min = TiDateUtil.isDate(this.min) ? minChanged : dateCofig.min;\r\n\r\n        // 最大最小值矛盾时，设置为默认值\r\n        if (this.max.getTime() < this.min.getTime()) {\r\n            this.max = dateCofig.max;\r\n            this.min = dateCofig.min;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 校验format接口\r\n     */\r\n    public validateFormat(isDatetime: boolean): void {\r\n        if (isDatetime) {\r\n            this.validateDatetimeFormat();\r\n        } else {\r\n            this.validateDateFormat();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 校验format: string类型，\r\n     */\r\n    public validateDateFormat(): void {\r\n        if (Util.isString(this.format)) {\r\n            return;\r\n        }\r\n        // TODO:如果配置时间日期国际化\r\n        this.format = this.localeWords.tiLocaleDate['date'];\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 校验format: 对象类型{date:'', time:''}\r\n     */\r\n    public validateDatetimeFormat(): void {\r\n        // TODO:初始化为ngLocale格式\r\n        // 用户设置format不是一个对象，设置为国际配置的format或默认值\r\n        if (!(this.format instanceof Object)) {\r\n            this.format = {\r\n                date: this.localeWords.tiLocaleDate['date'],\r\n                time: this.localeWords.tiLocaleDate['time']\r\n            };\r\n\r\n            return;\r\n        }\r\n\r\n        // format 为联合类型:此处处理DatetimeFormat类型\r\n        this.format = this.format as TiDatetimeFormat;\r\n        // 日期格式校验\r\n        if (!Util.isString(this.format.date)) {\r\n            this.format.date = this.localeWords.tiLocaleDate['date'];\r\n        }\r\n\r\n        // 日期格式校验\r\n        if (!Util.isString(this.format.time)) {\r\n            this.format.time = this.localeWords.tiLocaleDate['time'];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 判断range类型的model是否变化：比较起始时间和结束时间\r\n     */\r\n    public rangeValueIsEqual(newValue: TiDateValue, oldValue: TiDateValue, isDatetime: boolean): boolean {\r\n        if (newValue === oldValue) {\r\n            return true;\r\n        }\r\n\r\n        if ((newValue instanceof Object) && (oldValue instanceof Object)) {\r\n            if (isDatetime) {\r\n                return (TiDateUtil.isDatetimeEqual(newValue['begin'], oldValue['begin']) &&\r\n                             TiDateUtil.isDatetimeEqual(newValue['end'], oldValue['end']));\r\n            } else {\r\n                return (TiDateUtil.isDateEqual(newValue['begin'], oldValue['begin']) &&\r\n                             TiDateUtil.isDateEqual(newValue['end'], oldValue['end']));\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // ----------------------------- 动态监听处理 -----------------------------\r\n    /**\r\n     * @ignore\r\n     * model值动态变更：支持仅修改begin或end值\r\n     */\r\n    public setModel(isDatetime: boolean): void {\r\n        if (this.rangeValueIsEqual(this.model, this.oldModel as TiDateValue, isDatetime)) {\r\n            return;\r\n        }\r\n\r\n        // model中begin或者end值的变更\r\n        this.formatValue();\r\n\r\n        // 通过按钮改变model值：当面板处于打开状态时需要重新设置面板接口\r\n        if (this.dropCom.isShow) {\r\n            this.setPickerDate();\r\n        }\r\n\r\n        this.oldModel = (this.model === null) ? null : {\r\n            begin: this.model.begin,\r\n            end: this.model.end\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * datetime与datetimeRange组件format动态变更\r\n     */\r\n    public setFormat(): void {\r\n        if (this.format && this.format['date'] === this.oldFormat['date'] &&\r\n            this.format['time'] === this.oldFormat['time']) {\r\n                return;\r\n        }\r\n\r\n        if (!this.isValidDatetimeFormat()) {\r\n            this.format = this.oldFormat;\r\n\r\n            return;\r\n        }\r\n\r\n        this.formatValue();\r\n        this.oldFormat = this.format;\r\n    }\r\n\r\n    private show(): void {\r\n        if (this.renderer.parentNode(this.dropCom.nativeElement) === document.body) {\r\n           this.dropCom.show();\r\n        } else {\r\n            // 使用setTimeout是为了保证datepanel渲染完成后再显示，否则首次打开时定位计算不准确\r\n            setTimeout(() => {\r\n                this.dropCom.show();\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 决定上下位置的函数\r\n     */\r\n    public determinPositionFn: (layout: any) => string = (layout: any) =>  {\r\n        const needHeight: number = layout.targetLayout.height + TiDateBaseComponent.DOMINATOR_SPACE + TiDateBaseComponent.BROWSER_SPACE;\r\n        if (layout.avilableLayout.bottom >= needHeight) { // 下方空间足够，向下展开\r\n            return this.panelAlign === 'left' ? 'bottom-left' : 'bottom-right';\r\n        } else {\r\n            return this.panelAlign === 'left' ? 'top-left' : 'top-right';\r\n        }\r\n    }\r\n\r\n    // ----------------------------- 需要在子类中实现 -----------------------------\r\n    /**\r\n     * @ignore\r\n     * 0.判断是不是合法的model\r\n     */\r\n    protected isValidValue(value: any): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 1.配置时间日期面板接口\r\n     */\r\n    protected setPickerDate(): void {}\r\n\r\n    /**\r\n     * @ignore\r\n     * 2.根据format格式model值\r\n     */\r\n    protected formatValue(): void {}\r\n\r\n    /**\r\n     * @ignore\r\n     * 3.根据当前值设置确认按钮的状态\r\n     */\r\n    protected setOkBtnState(): void {}\r\n\r\n    /**\r\n     * @ignore\r\n     * 起始面板日期有变化时，要重新设置其time组件对应最大值 datetimeRange组件中实现此方法\r\n     */\r\n    protected setBeginTimeMaxValue(): void {}\r\n\r\n    /**\r\n     * @ignore\r\n     * 起始面板日期有变化时，要重新设置其time组件对应最小值 datetimeRange组件中实现此方法\r\n     */\r\n    protected setBeginTimeMinValue(): void {}\r\n\r\n    /**\r\n     * @ignore\r\n     * 结束日期有变化时，要重新设置其time组件对应最大值 datetimeRange组件中实现此方法\r\n     */\r\n    protected setEndTimeMaxValue(): void {}\r\n\r\n    /**\r\n     * @ignore\r\n     * 结束日期有变化时，要重新设置其time组件对应最小值 datetimeRange组件中实现此方法\r\n     */\r\n    protected setEndTimeMinValue(): void {}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { TiDateBaseComponent } from './TiDateBaseComponent';\r\n// 在使用tiny npm包生产环境编辑时，要求基类也注册。\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: [\r\n    TiDateBaseComponent\r\n  ]\r\n})\r\nexport class TiDateBaseModule {\r\n}\r\nexport { TiDateBaseComponent, TimeOptions, TiPicker, TiDatetimeFormat, TiDateValue, TiDateCustomizeOptions } from './TiDateBaseComponent';\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    Output,\r\n    Renderer2,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport { TiDateUtil, Util } from '../../utils/Util';\r\nimport { TiLocale, TiLocaleWords } from '../../locale/TiLocaleModule';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\nimport { TiDateValue, TimeOptions } from '../datebase/TiDateBaseModule';\r\nimport { TiDropComponent } from './../drop/TiDropModule';\r\nimport { TiListComponent } from '../list/TiListModule';\r\n\r\n/**\r\n * @ignore\r\n * 面板内部年月日\r\n */\r\nexport interface TiDatePanel {\r\n    year: number;\r\n    month: number;\r\n    day: number;\r\n }\r\n\r\n/**\r\n * @ignore\r\n * 面板头部显示文本接口\r\n */\r\nexport interface TiPickerHeadText {\r\n    year?: string;\r\n    month?: string;\r\n    yearRange?: string;\r\n    endpanelYearRange?: string;\r\n    onlyYear?: string;\r\n}\r\n\r\n/**\r\n * @ignore\r\n * 年月日数据的接口：state状态；value年月日值\r\n */\r\nexport interface TiDateValueAndState {\r\n    state: string; // 面板中每个年月日具体的状态：日期：状态值为上个月日期，当前月日期，下个月日期\r\n    value: number | string; // TODO:类型为string或number:此处处理 this.local.monthArr.indexOf(month.value + '')\r\n    isToday?: boolean;\r\n    isMonth?: boolean;\r\n    isYear?: boolean;\r\n}\r\n\r\n/**\r\n * @ignore\r\n * 最大年最小年范围\r\n */\r\nexport interface TiYearRange {\r\n    min: number;\r\n    max: number;\r\n }\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n   selector: 'ti-date-panel',\r\n   templateUrl: './datepanel.html',\r\n   styleUrls: ['./datepanel.less']\r\n})\r\n\r\nexport class TiDatePanelComponent extends TiBaseComponent {\r\n   @Input() value: TiDateValue;\r\n   @Output() readonly valueChange: EventEmitter<TiDateValue> = new EventEmitter<TiDateValue>();\r\n\r\n   @Input() picker: string = 'day'; // 设置年、月、日面板\r\n   @Output() readonly pickerChange: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n   @Input() nowDateTime: Date;\r\n   @Input() max: Date;\r\n   @Input() min: Date;\r\n   @Input() format: string;\r\n   @Input() disabledDays: Array<Date>;\r\n   @Input() endTimeDisabled: boolean;\r\n   @Input() beginTimeDisabled: boolean;\r\n   /**\r\n    * @ignore\r\n    * 面板内部焦点位置标志量\r\n    */\r\n   @Input() focusedPosition: string;\r\n   /**\r\n    * @ignore\r\n    * 面板呈现选择时间或者选择日期 标志量\r\n    */\r\n   @Input() selectTime: boolean;\r\n   /**\r\n    * @ignore\r\n    * 开始时间\r\n    */\r\n   @Input() beginTime: TimeOptions;\r\n   /**\r\n    * @ignore\r\n    * 结束时间\r\n    */\r\n   @Input() endTime: TimeOptions;\r\n   /**\r\n    * @ignore\r\n    * 判断是单日期（时间）还是日期（时间）段\r\n    */\r\n   @Input() isRange: boolean;\r\n    /**\r\n     * 开始日期是否禁用\r\n     */\r\n   @Input() isBeginFixed: boolean = false;\r\n   /**\r\n    * 结束日期是否禁用\r\n    */\r\n   @Input() isEndFixed: boolean = false;\r\n\r\n   // 日期面板，月份面板点击每个日期、月份的事件回调\r\n   // tslint:disable-next-line:no-output-named-after-standard-event\r\n   @Output() readonly select: EventEmitter<any> = new EventEmitter<any>();\r\n   // 时间面板选择时分秒的事件回调\r\n   @Output() readonly selectTimeFn: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n   @ViewChild('next', { static: true }) nextRef: ElementRef;\r\n   @ViewChild('beginHourContainer', { static: true }) private beginHourContainerRef: ElementRef;\r\n   @ViewChild('beginMinuteContainer', { static: true }) private beginMinuteContainerRef: ElementRef;\r\n   @ViewChild('beginSecondContainer', { static: true }) private beginSecondContainerRef: ElementRef;\r\n   @ViewChild('endHourContainer', { static: true }) private endHourContainerRef: ElementRef;\r\n   @ViewChild('endMinuteContainer', { static: true }) private endMinuteContainerRef: ElementRef;\r\n   @ViewChild('endSecondContainer', { static: true }) private endSecondContainerRef: ElementRef;\r\n   private date: TiDatePanel; // 内部时间值：包括年月日\r\n   public dayArr: Array<Array<TiDateValueAndState>> = [];\r\n   public nextdayArr: Array<Array<TiDateValueAndState>> = [];\r\n   public monthArr: Array<Array<TiDateValueAndState>> = [];\r\n   public endpanelMonthArr: Array<Array<TiDateValueAndState>> = [];\r\n   public yearArr: Array<Array<TiDateValueAndState>> = [];\r\n   public endpanelYearArr: Array<Array<TiDateValueAndState>> = [];\r\n   public pickerValue: TiPickerHeadText = {}; // 面板头部显示文本数据\r\n   public nextPickerValue: TiPickerHeadText = {}; // 面板头部显示文本数据\r\n   public isMaxMonth: boolean;\r\n   public isMinMonth: boolean;\r\n   private isMaxYear: boolean;\r\n   private isMinYear: boolean;\r\n   private isMaxYearRange: boolean;\r\n   private isMinYearRange: boolean;\r\n   private oldValue: TiDateValue = { // 当初始值为null时，做新旧值对比渲染时间面板\r\n       begin: undefined,\r\n       end: undefined\r\n   };\r\n   public hourOptions: Array<any> = this.setOptions(24);\r\n   public minuteOptions: Array<any> = this.setOptions(60);\r\n   public secondOptions: Array<any> = this.setOptions(60);\r\n   public endHourOptions: Array<any> = this.setOptions(24);\r\n   public endMinuteOptions: Array<any> = this.setOptions(60);\r\n   public endSecondOptions: Array<any> = this.setOptions(60);\r\n   public beginHour: any;\r\n   public beginMinute: any;\r\n   public beginSecond: any;\r\n   public endHour: any;\r\n   public endMinute: any;\r\n   public endSecond: any;\r\n   public isChinese: boolean = true;\r\n\r\n    public local: {\r\n        weekArr: Array<string>,\r\n        weekTitleArr: Array<string>,\r\n        monthArr: Array<string>,\r\n        yearText: string\r\n    } = {\r\n            weekArr: [],\r\n            weekTitleArr: [],\r\n            monthArr: [],\r\n            yearText: ''\r\n        };\r\n\r\n   constructor(protected render: Renderer2,\r\n               protected hostRef: ElementRef,\r\n               public drop: TiDropComponent\r\n    ) {\r\n        super(hostRef, render);\r\n   }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        const localeWords: TiLocaleWords = TiLocale.getLocaleWords();\r\n        this.isChinese = localeWords.tiLocaleKey === TiLocale.ZH_CN;\r\n        this.local = {\r\n            weekArr: localeWords.tiDate['weekNamesAbb'],\r\n            weekTitleArr: localeWords.tiDate['weeknamesTitle'],\r\n            monthArr: localeWords.tiDate['monthNamesAbb'],\r\n            yearText: localeWords.tiDate['yearSuffixLabel']\r\n        };\r\n        this.drop.dropSubject.subscribe(() => {\r\n            this.setValue();\r\n        });\r\n        this.renderer.listen(this.nativeElement, 'mousedown', (event: MouseEvent): void => {\r\n            event.preventDefault(); // 防止dominator blur行为\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes['endTimeDisabled'] && !changes['endTimeDisabled'].firstChange) {\r\n            this.endHourOptions = this.setOptions(24, 'end');\r\n            this.endMinuteOptions = this.setOptions(60, 'end');\r\n            this.endSecondOptions = this.setOptions(60, 'end');\r\n        }\r\n        if (changes['beginTimeDisabled'] && !changes['beginTimeDisabled'].firstChange) {\r\n            this.hourOptions = this.setOptions(24);\r\n            this.minuteOptions = this.setOptions(60);\r\n            this.secondOptions = this.setOptions(60);\r\n        }\r\n        // format支持动态变更\r\n        if (changes['picker'] && !changes['picker'].firstChange) {\r\n            if (Util.isUndefined(this.date)) {\r\n                return;\r\n            }\r\n\r\n            // 设置下拉面板的数据\r\n            this.setDatePanel();\r\n        }\r\n        // 最大最小值更新时，需要更新面板来保证最大最小值外的禁用有效\r\n        if ((changes['max'] && !changes['max'].firstChange) || (changes['min'] && !changes['min'].firstChange)) {\r\n            this.setDatePanel();\r\n        }\r\n        // 根据传入值确定时间下拉选择项\r\n        if (changes['selectTime'] && !changes['selectTime'].firstChange) {\r\n            const beginTimeStrArr: Array<any> = this.beginTime.value.split(':');\r\n            this.beginHour = this.hourOptions.find((item: any) => item.label === beginTimeStrArr[0]);\r\n            this.beginMinute = this.minuteOptions.find((item: any) => item.label === beginTimeStrArr[1]);\r\n            this.beginSecond = this.secondOptions.find((item: any) => item.label === beginTimeStrArr[2]);\r\n\r\n            if (this.endTime) {\r\n            const endTimeStrArr: Array<any> = this.endTime.value.split(':');\r\n            this.endHour = this.endHourOptions.find((item: any) => item.label === endTimeStrArr[0]);\r\n            this.endMinute = this.endMinuteOptions.find((item: any) => item.label === endTimeStrArr[1]);\r\n            this.endSecond = this.endSecondOptions.find((item: any) => item.label === endTimeStrArr[2]);\r\n            }\r\n            setTimeout(() => {\r\n                this.timeHandleFn(this.beginHour, this.beginHourContainerRef);\r\n                this.timeHandleFn(this.beginMinute, this.beginMinuteContainerRef);\r\n                this.timeHandleFn(this.beginSecond, this.beginSecondContainerRef);\r\n                if (this.endTime) {\r\n                    this.timeHandleFn(this.endHour, this.endHourContainerRef);\r\n                    this.timeHandleFn(this.endMinute, this.endMinuteContainerRef);\r\n                    this.timeHandleFn(this.endSecond, this.endSecondContainerRef);\r\n                }\r\n            }, 0);\r\n        }\r\n\r\n        if (changes['beginTime'] && !changes['beginTime'].firstChange) {\r\n            const beginTimeArr: Array<any> = changes['beginTime'].currentValue.value.split(':');\r\n            this.beginHour = this.hourOptions.find((item: any) => item.label === beginTimeArr[0]);\r\n            this.beginMinute = this.minuteOptions.find((item: any) => item.label === beginTimeArr[1]);\r\n            this.beginSecond = this.secondOptions.find((item: any) => item.label === beginTimeArr[2]);\r\n            this.timeHandleFn(this.beginHour, this.beginHourContainerRef);\r\n            this.timeHandleFn(this.beginMinute, this.beginMinuteContainerRef);\r\n            this.timeHandleFn(this.beginSecond, this.beginSecondContainerRef);\r\n        }\r\n\r\n        if (changes['endTime'] && !changes['endTime'].firstChange) {\r\n            const endTimeArr: Array<any> = changes['endTime'].currentValue.value.split(':');\r\n            this.endHour = this.endHourOptions.find((item: any) => item.label === endTimeArr[0]);\r\n            this.endMinute = this.endMinuteOptions.find((item: any) => item.label === endTimeArr[1]);\r\n            this.endSecond = this.endSecondOptions.find((item: any) => item.label === endTimeArr[2]);\r\n            this.timeHandleFn(this.endHour, this.endHourContainerRef);\r\n            this.timeHandleFn(this.endMinute, this.endMinuteContainerRef);\r\n            this.timeHandleFn(this.endSecond, this.endSecondContainerRef);\r\n        }\r\n\r\n    }\r\n\r\n    private timeHandleFn(model: any, ele: ElementRef) {\r\n        if (model === undefined) {\r\n            return;\r\n        }\r\n        const index: number = model.label;\r\n        this.render.setProperty(ele.nativeElement.children[0], 'scrollTop', index * 30);\r\n        // TODO 动画效果\r\n    }\r\n\r\n    ngDoCheck(): void {\r\n       super.ngDoCheck();\r\n\r\n       // 只有点击面板打开时，才会有接口值，需要渲染面板，在没有打开时间日期面板时不需要渲染面板数据\r\n       if (Util.isUndefined(this.value) || Util.isUndefined(this.max)) {\r\n           return;\r\n       }\r\n\r\n       if (!TiDateUtil.isDateEqual(this.oldValue['begin'], this.value['begin']) ||\r\n           !TiDateUtil.isDateEqual(this.oldValue['end'], this.value['end'])) {\r\n            this.setValue();\r\n            this.oldValue = {\r\n                begin: this.value.begin,\r\n                end: this.value.end\r\n            };\r\n       }\r\n    }\r\n\r\n    // 处理左侧年后退按钮事件\r\n    onPreYearClick(event: MouseEvent): void {\r\n        // 最小月，最小年，最小年时间段：左按钮灰化\r\n        if (this.isPickerYearMinValue()) {\r\n            return;\r\n        }\r\n\r\n        // 日期和月份面板\r\n        if (this.picker === 'day' || this.picker === 'month' || this.picker === 'onlyYearMonth') {\r\n            const year: number = this.date.year - 1; // 年份减1\r\n            if (year >= this.min.getFullYear()) { // 当年份大于等于最小值\r\n                this.date.year = year;\r\n                if (this.isSmallerThanMinMonth(year, this.date.month)) {\r\n                this.date.month = this.min.getMonth() + 1;\r\n                }\r\n                this.setYearMonthText();\r\n                this.setPreNextState(year, this.date.month);\r\n                this.setDayMonthArr(this.picker);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // 年面板\r\n        if (this.picker === 'year') {\r\n            // 当前年减10\r\n            const year: number = this.date.year - 10; // 年份减10\r\n            const minValueRange: TiYearRange = this.getYearRange(this.min.getFullYear()); // 最小年：年面板的范围\r\n            const currentYearRange: TiYearRange = this.getYearRange(year); // 当前年面板的范围\r\n            // 当年份大于等于最小年面板的最小值是有效的\r\n            if (year >= minValueRange.min) {\r\n                this.date.year = currentYearRange.min; // 默认跳转到年面板的第一个有效年\r\n                // 设置下拉面板头部显示文本\r\n                this.setYearMonthText();\r\n\r\n                // 设置左右键状态\r\n                this.setYearRangePreNextState();\r\n\r\n                // 设置年份面板的值和状态\r\n                this.setYearArr();\r\n\r\n                this.setEndpanelYearArr();\r\n            }\r\n        }\r\n    }\r\n\r\n    // 处理左侧月后退按钮事件\r\n    onPreMonthClick(event: MouseEvent): void {\r\n        // 最小月，最小年，最小年时间段：左按钮灰化\r\n        if (this.isMinMonth) {\r\n            return;\r\n        }\r\n        // 日期面板\r\n        let month: number;\r\n        let year: number;\r\n        if (this.date.month === 1) {\r\n            month = 12;\r\n            year = this.date.year - 1;\r\n        } else {\r\n            month = this.date.month - 1;\r\n            year = this.date.year;\r\n        }\r\n\r\n        if (!this.isSmallerThanMinMonth(year, month)) {\r\n            this.date.month = month;\r\n            this.date.year = year;\r\n            this.setYearMonthText();\r\n            this.setPreNextState(year, month);\r\n            this.setDayArr();\r\n            this.setNextDayArr();\r\n        }\r\n    }\r\n    // 处理右侧月前进按钮事件\r\n    onNextMonthClick(event: MouseEvent): void {\r\n        // 最大月，最大年，最大年时间段\r\n        if (this.isMaxMonth) {\r\n            return;\r\n        }\r\n\r\n        let month: number;\r\n        let year: number;\r\n        if (this.date.month === 12) {\r\n            month = 1;\r\n            year = this.date.year + 1;\r\n        } else {\r\n            month = this.date.month + 1;\r\n            year = this.date.year;\r\n        }\r\n\r\n        if (!this.isBiggerThanMaxMonth(year, month)) {\r\n            this.date.month = month;\r\n            this.date.year = year;\r\n            this.setYearMonthText();\r\n            this.setPreNextState(year, month);\r\n            this.setDayArr();\r\n            this.setNextDayArr();\r\n        }\r\n    }\r\n    // 处理右侧年前进按钮事件\r\n    onNextYearClick(event: MouseEvent): void {\r\n        // 最大月，最大年，最大年时间段\r\n        if (this.isPickerYearMaxValue()) {\r\n            return;\r\n        }\r\n\r\n        // 日期和月份面板\r\n        if (this.picker === 'day' || this.picker === 'month' || this.picker === 'onlyYearMonth') {\r\n            const year: number = this.date.year + 1; // 年份加1\r\n            if (year <= this.max.getFullYear()) { // 判断是否小于等于最大年\r\n                this.date.year = year;\r\n                if (this.isBiggerThanMaxMonth(year, this.date.month)) {\r\n                    this.date.month = this.max.getMonth() + 1;\r\n                }\r\n                this.setYearMonthText();\r\n                this.setPreNextState(year, this.date.month);\r\n                this.setDayMonthArr(this.picker);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // 年面板\r\n        if (this.picker === 'year' || this.picker === 'onlyYear') {\r\n            const year: number = this.date.year + 10; // 年份加10\r\n\r\n            const maxValueRange: TiYearRange = this.getYearRange(this.max.getFullYear());\r\n            const currentYearRange: TiYearRange = this.getYearRange(year);\r\n            // 当年份小于等于最大年面板的最大值是有效的\r\n            if (year <= maxValueRange.max) {\r\n                this.date.year = currentYearRange.min;\r\n                    // 设置下拉面板头部显示文本\r\n                this.setYearMonthText();\r\n\r\n                // 设置左右键状态\r\n                this.setYearRangePreNextState();\r\n\r\n                // 设置年份面板的值和状态\r\n                this.setYearArr();\r\n\r\n                this.setEndpanelYearArr();\r\n            }\r\n        }\r\n    }\r\n\r\n    // 面板头部文本点击事件\r\n    onHeadTextClick(picker: string): void {\r\n        // 点击日期面板头部，跳转到月份面板\r\n        this.picker = picker;\r\n        this.pickerChange.emit(picker);\r\n    }\r\n\r\n    // 日期面板：日期点击事件\r\n    onDayClick(isNext: boolean, day: TiDateValueAndState, event: MouseEvent): void {\r\n            if (day.state === 'disable') {\r\n                return;\r\n            }\r\n            if (day.state === 'preMonth') { // 如果是上个月的日期则跳转到上个月\r\n                this.onPreMonthClick(event);\r\n            } else if (day.state === 'nextMonth') { // 如果是下个月的日期则跳转到下个月\r\n                this.onNextMonthClick(event);\r\n            }\r\n            let dateSelect: Date;\r\n            const newDate: TiDatePanel = JSON.parse(JSON.stringify(this.date));\r\n            if (isNext) {\r\n                newDate.year = this.date.month === 12 ? this.date.year + 1 : this.date.year;\r\n                newDate.month = this.date.month === 12 ? 1 : this.date.month + 1;\r\n                dateSelect = new Date(newDate.year, newDate.month - 1, Number(day.value));\r\n            } else {\r\n                dateSelect = new Date(this.date.year, this.date.month - 1, day.value as number);\r\n            }\r\n            if (this.focusedPosition !== 'begin' && this.isRange) {\r\n                if (this.value.end === null && this.value.begin !== null && TiDateUtil.isBigger(this.value.begin, dateSelect)) {\r\n                    this.value.begin = dateSelect;\r\n                    this.valueChange.emit(this.value);\r\n                    // 事件回调：点击日期执行面板收起操作\r\n                    this.select.emit(day.state);\r\n                    return;\r\n                }\r\n                this.value.end = dateSelect;\r\n                if (this.value.begin !== null && TiDateUtil.isBigger(this.value.begin, this.value.end)) {\r\n                    this.value.begin = null;\r\n                }\r\n            } else {\r\n                this.value.begin = dateSelect;\r\n                if (this.value.end !== null && TiDateUtil.isBigger(this.value.begin, this.value.end)) {\r\n                    this.value.end = null;\r\n                }\r\n            }\r\n            this.valueChange.emit(this.value);\r\n            // 事件回调：点击日期执行面板收起操作\r\n            this.select.emit(day.state);\r\n    }\r\n    // 月份面板：月份点击事件\r\n    onMonthClick(month: TiDateValueAndState, event: MouseEvent, isEndClick?: boolean): void {\r\n        // 月份灰化不可点击\r\n        if (month.state === 'disable') {\r\n            return;\r\n        }\r\n        // 当前月值变更\r\n        this.date.month = this.local.monthArr.indexOf(String(month.value)) + 1;\r\n        // 根据当前月更新面板头部月份显示\r\n        this.pickerValue = this.pickerValue instanceof Object ? this.pickerValue : {};\r\n        this.nextPickerValue = this.nextPickerValue instanceof Object ? this.nextPickerValue : {};\r\n        this.pickerValue['month'] = this.local.monthArr[this.date.month - 1];\r\n        this.nextPickerValue['month'] = this.date.month === 12 ? this.local.monthArr[0] : this.local.monthArr[this.date.month];\r\n        // 无日期面板：点击月份将value值变更。将执行select事件回调\r\n        // 有日期面板：点击跳转到日期面板，根据年月设置左右按钮状态和日期面板值；\r\n        if (this.format.indexOf('d') === -1) { // 只显示年月\r\n            this.date.year = isEndClick ? this.date.year + 1 : this.date.year;\r\n            if (this.focusedPosition === 'begin') {\r\n                this.value.begin = new Date(this.date.year, this.date.month - 1);\r\n            } else {\r\n                this.value.end = new Date(this.date.year, this.date.month - 1);\r\n            }\r\n            this.valueChange.emit(this.value);\r\n            this.select.emit();\r\n        } else {\r\n            this.picker = 'day';\r\n            this.pickerChange.emit(this.picker);\r\n        }\r\n    }\r\n\r\n    // 年范围面板：年点击事件\r\n    onYearClick(year: TiDateValueAndState, event: MouseEvent): void {\r\n        if (year.state !== 'disable') {\r\n            this.date.year = year.value as number;\r\n            this.pickerValue = this.pickerValue instanceof Object ? this.pickerValue : {};\r\n            this.nextPickerValue = this.nextPickerValue instanceof Object ? this.nextPickerValue : {};\r\n            this.pickerValue['year'] = `${this.date.year}${this.local.yearText}`;\r\n            this.nextPickerValue['year'] = this.date.month === 12 ? `${this.date.year + 1}${this.local.yearText}`\r\n            : `${this.date.year}${this.local.yearText}`;\r\n            this.nextPickerValue['onlyYear'] = `${this.date.year + 1}${this.local.yearText}`;\r\n            // 只有年份面板\r\n            if (this.format.indexOf('M') === -1) {\r\n                if (this.focusedPosition === 'begin') {\r\n                    this.value.begin = new Date(this.date.year, 1, 1);\r\n                } else {\r\n                    this.value.end = new Date(this.date.year, 1, 1);\r\n                }\r\n                this.valueChange.emit(this.value);\r\n                this.select.emit();\r\n                return;\r\n            }\r\n            // 年月格式\r\n            if (this.format.indexOf('d') === -1) {\r\n                this.picker = 'onlyYearMonth';\r\n                this.setDayMonthArr(this.picker);\r\n                return;\r\n            }\r\n            this.picker = 'month';\r\n            this.pickerChange.emit(this.picker);\r\n        }\r\n    }\r\n\r\n    public onSelect(val: any, timeOption: string): void {\r\n        const obj: any = {\r\n            timeOption,\r\n            val\r\n        };\r\n        this.selectTimeFn.emit(obj);\r\n        switch (timeOption) {\r\n            case 'beginHour':\r\n                this.timeHandleFn(val, this.beginHourContainerRef);\r\n                break;\r\n            case 'beginMinute':\r\n                this.timeHandleFn(val, this.beginMinuteContainerRef);\r\n                break;\r\n            case 'beginSecond':\r\n                this.timeHandleFn(val, this.beginSecondContainerRef);\r\n                break;\r\n            case 'endHour':\r\n                this.timeHandleFn(val, this.endHourContainerRef);\r\n                break;\r\n            case 'endMinute':\r\n                this.timeHandleFn(val, this.endMinuteContainerRef);\r\n                break;\r\n            case 'endSecond':\r\n                this.timeHandleFn(val, this.endSecondContainerRef);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    // 分年月日三个面板：根据不同面板设置相应的值\r\n    private setDatePanel(): void {\r\n        // 设置下拉面板头部显示文本\r\n        this.setYearMonthText();\r\n\r\n        // 设置年月文本；设置左右键状态；设置下拉面板中日期\r\n        switch (this.picker) {\r\n            case 'day':\r\n                this.setPreNextState(this.date.year, this.date.month);\r\n\r\n                this.setDayArr();\r\n                this.setNextDayArr();\r\n\r\n                break;\r\n            case 'month':\r\n            case 'onlyYearMonth':\r\n                this.setPreNextState(this.date.year, this.date.month);\r\n                this.setMonthArr();\r\n                this.setEndpanelMonthArr();\r\n\r\n                break;\r\n            case 'year':\r\n            case 'onlyYear':\r\n                this.setYearRangePreNextState();\r\n\r\n                this.setYearArr();\r\n                this.setEndpanelYearArr();\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n   /**\r\n    * @description 设置展示的日期\r\n    */\r\n   private setValue(): void {\r\n       // 1.根据接口值获取合法的当前值\r\n       let date: Date;\r\n       let today: Date;\r\n       if ((this.value instanceof Object) && TiDateUtil.isDate(this.value.begin)) {\r\n           date = this.value.begin;\r\n       } else if ((this.value instanceof Object) && TiDateUtil.isDate(this.value.end)) {\r\n           date = this.value.end;\r\n       } else {\r\n            // 1.1根据nowDateTime接口获取现在时间\r\n            today = (this.nowDateTime && TiDateUtil.isDate(this.nowDateTime)) ? this.nowDateTime : new Date();\r\n            // 1.2根据最大值最小值对获取的现在时间进行进一步判断\r\n            const year: number = today.getFullYear();\r\n            const month: number = today.getMonth() + 1;\r\n            const day: number = today.getDate();\r\n            date = (!this.isBiggerThanMaxDay(year, month, day) && !this.isSmallerThanMinDay(year, month, day))\r\n                ? today : this.min;\r\n       }\r\n\r\n       // 2.将当前时间的年月日存在对象\r\n       this.date = {\r\n           year: date.getFullYear(),\r\n           month: date.getMonth() + 1,\r\n           day: date.getDate()\r\n       };\r\n\r\n       this.setDatePanel();\r\n   }\r\n\r\n   /**\r\n    * @description 判断参数传来的日期是否大于最大日期：大于返回true，小于返回false\r\n    * @param year 年份\r\n    * @param month 月份\r\n    * @param day 日\r\n    */\r\n   private isBiggerThanMaxDay(year: number, month: number, day: number): boolean {\r\n       // 1.最大值不是合法的时间对象\r\n       if (!TiDateUtil.isDate(this.max)) {\r\n           return false;\r\n       }\r\n\r\n       // 2.重新生成一个新的最大值的原因：防止传入一个带时分的最大值\r\n       let max: Date = this.max;\r\n       max = new Date(max.getFullYear(), max.getMonth(), max.getDate());\r\n       if (max.getTime() < new Date(year, month - 1, day).getTime()) {\r\n           return true;\r\n       }\r\n\r\n       return false;\r\n   }\r\n\r\n   /**\r\n    * @description 判断参数传来的日期是否小于最小日期：小于返回true，大于返回false\r\n    * @param year 年份\r\n    * @param month 月份\r\n    * @param day 日\r\n    */\r\n   private isSmallerThanMinDay(year: number, month: number, day: number): boolean {\r\n       if (!TiDateUtil.isDate(this.min)) {\r\n           return false;\r\n       }\r\n\r\n       // 防止传入一个带时分的最小值\r\n       let min: Date = this.min;\r\n       min = new Date(min.getFullYear(), min.getMonth(), min.getDate());\r\n       if (min.getTime() > new Date(year, month - 1, day).getTime()) {\r\n           return true;\r\n       }\r\n\r\n       return false;\r\n   }\r\n   // 是否为禁用日期\r\n   private isDisabledDay(year: number, month: number, day: number): boolean {\r\n        if (!Util.isArray(this.disabledDays)) {\r\n            return false;\r\n        }\r\n        let isDisabled: boolean = false;\r\n        this.disabledDays.forEach((item: Date) => {\r\n            if (item.getTime() === new Date(year, month - 1, day).getTime()) {\r\n                isDisabled = true;\r\n            }\r\n        });\r\n\r\n        return isDisabled;\r\n   }\r\n\r\n   // 开始日期或者结束日期固定不允许修改时，超出范围的需要禁用\r\n   private isFixedWithDisabled(year: number, month: number, day: number): boolean {\r\n       if (!this.isBeginFixed && !this.isEndFixed || this.value === null) {\r\n           return false;\r\n       }\r\n       // 开始日期有值并且禁用\r\n       if (this.isBeginFixed) {\r\n            if (this.value.begin.getTime() > new Date(year, month - 1, day).getTime()) {\r\n                return true;\r\n            }\r\n       }\r\n       if (this.isEndFixed) {\r\n            if (this.value.end.getTime() < new Date(year, month - 1, day).getTime()) {\r\n                    return true;\r\n            }\r\n       }\r\n\r\n       return false;\r\n   }\r\n\r\n   /**\r\n    * @description 设置下拉面板中年月文本\r\n    */\r\n   private setYearMonthText(): void {\r\n       // 1.大于等于最大年，设置年为最大年，月大于最大月，设置为最大月；\r\n       if (this.date.year >= this.max.getFullYear()) {\r\n           this.date.year = this.max.getFullYear();\r\n           if (this.date.month > (this.max.getMonth() + 1)) {\r\n               this.date.month = this.max.getMonth() + 1;\r\n           }\r\n       }\r\n\r\n       // 2.小于等于最小年，设置年为最小年，月份小于最小月设置为最小月；\r\n       if (this.date.year <= this.min.getFullYear()) {\r\n           this.date.year = this.min.getFullYear();\r\n           if (this.date.month < (this.min.getMonth() + 1)) {\r\n               this.date.month = this.min.getMonth() + 1;\r\n           }\r\n       }\r\n\r\n       // 3.根据年月值，拼成下拉面板中年月文本\r\n       const start: number = this.date.year - this.date.year % 10;\r\n       this.pickerValue = this.pickerValue instanceof Object ? this.pickerValue : {};\r\n       this.nextPickerValue = this.nextPickerValue instanceof Object ? this.nextPickerValue : {};\r\n       this.pickerValue['year'] = `${this.date.year}${this.local.yearText}`;\r\n       this.nextPickerValue['onlyYear'] = `${this.date.year + 1}${this.local.yearText}`;\r\n       this.nextPickerValue['year'] = this.date.month === 12 ? `${this.date.year + 1}${this.local.yearText}`\r\n       : `${this.date.year}${this.local.yearText}`;\r\n       this.pickerValue['month'] = this.local.monthArr[this.date.month - 1];\r\n       this.nextPickerValue['month'] = this.date.month === 12 ? this.local.monthArr[0] : this.local.monthArr[this.date.month];\r\n       this.pickerValue['yearRange'] = `${start} - ${start + 9}`;\r\n       this.pickerValue['endpanelYearRange'] = `${start + 10} - ${start + 19}`;\r\n   }\r\n\r\n   /**\r\n    * @description 设置上月、下月按钮状态：已经是最大、最小月时，将对应的按钮置灰\r\n    * @param year 年份\r\n    * @param month 月份\r\n    */\r\n   private setPreNextState(year: number, month: number): void {\r\n       this.isMaxMonth = this.isEqualToMaxMonth(year, month);\r\n       this.isMinMonth = this.isEqualToMinMonth(year, month);\r\n       this.isMaxYear = year === this.max.getFullYear();\r\n       this.isMinYear = year === this.min.getFullYear();\r\n   }\r\n\r\n   /**\r\n    * @description 判断参数传来的年月是否等于最大月份：等于返回true，不等于返回false\r\n    * @param year 年份\r\n    * @param month 月份\r\n    */\r\n   private isEqualToMaxMonth(year: number, month: number): boolean {\r\n       // 1.最大值不是合法的时间对象\r\n       if (!TiDateUtil.isDate(this.max)) {\r\n           return false;\r\n       }\r\n\r\n       // 2.重新生成一个新的最大值的原因：防止传入一个带时分的最大值\r\n       let max: Date = this.max;\r\n       max = new Date(max.getFullYear(), max.getMonth(), 1);\r\n       if (max.getTime() === new Date(year, month - 1, 1).getTime()) {\r\n           return true;\r\n       }\r\n\r\n       return false;\r\n   }\r\n\r\n   /**\r\n    * @description 判断参数传来的年月是否等于最小月份：等于返回true，不等于返回false\r\n    * @param year 年份\r\n    * @param month 月份\r\n    */\r\n   private isEqualToMinMonth(year: number, month: number): boolean {\r\n       if (!TiDateUtil.isDate(this.min)) {\r\n           return false;\r\n       }\r\n\r\n       let min: Date = this.min;\r\n       min = new Date(min.getFullYear(), min.getMonth(), 1);\r\n       if (min.getTime() === new Date(year, month - 1, 1).getTime()) {\r\n           return true;\r\n       }\r\n\r\n       return false;\r\n   }\r\n   /**\r\n    * @description 根据面板设置 dayArr或monthArr\r\n    *\r\n    */\r\n  private setDayMonthArr(picker: string): void {\r\n    if (picker === 'day') {\r\n      this.setDayArr();\r\n      this.setNextDayArr();\r\n    } else if (picker === 'month' || picker === 'onlyYearMonth') {\r\n      this.setMonthArr();\r\n      this.setEndpanelMonthArr();\r\n    }\r\n  }\r\n   /**\r\n    * @description 根据当前年月值，设置下拉面板中显示的日数据\r\n    */\r\n   // tslint:disable-next-line:cyclomatic-complexity\r\n   // eslint-disable-next-line complexity\r\n   private setDayArr(): void {\r\n       // 获取当前年月\r\n       const year: number = parseInt(String(this.date.year), 10);\r\n       const month: number = parseInt(String(this.date.month), 10);\r\n\r\n       // 1：计算这个月1号是下拉面板第一行的第几个\r\n       // 获取到这个月1号是周几 周一到周六：1-6，周天：0；\r\n       const begin: number = new Date(year, month - 1, 1).getDay();\r\n\r\n       // 2：将上个月的日期存入数组dateArr\r\n       const dateArr: Array<TiDateValueAndState> = []; // 存储下拉面板中所有日的值和状态\r\n       const preMonth: number = (month === 1 ? 12 : (month - 1)); // 上个月\r\n       const preMonthDays: number = new Date(year, preMonth, 0).getDate(); // 上个月总天数\r\n       const preMonthStart: number = preMonthDays - begin + 1; // 获取到第一行的起始值\r\n       let preMonthDayState: string = ''; // 上个月日期的状态\r\n       // 本月是最小月时的上月日期置灰\r\n       preMonthDayState = this.isMinMonth ? 'disable' : 'preMonth';\r\n\r\n       for (let i: number = 0; i < begin; i++) {\r\n            dateArr[i] = {\r\n                value: preMonthStart + i,\r\n                state: preMonthDayState\r\n            };\r\n            if (this.isSmallerThanMinDay(year, month - 1, preMonthStart + i) || this.isDisabledDay(year, month - 1, preMonthStart + i)\r\n            || this.isFixedWithDisabled(year, month - 1, preMonthStart + i)) {\r\n                    dateArr[i].state = 'disable';\r\n            }\r\n       }\r\n\r\n       // 3：将本月的日存入数组dateArr\r\n       let dayNum: number = 1;\r\n       const monthDays: number = new Date(year, month, 0).getDate(); // 这个月总天数\r\n       const length: number = begin + monthDays;\r\n       let state: string = '';\r\n\r\n       for (let j: number = begin; j < length; j++) {\r\n           if (this.isBiggerThanMaxDay(year, month, dayNum) ||\r\n           this.isSmallerThanMinDay(year, month, dayNum) ||\r\n           this.isDisabledDay(year, month, dayNum) ||\r\n           this.isFixedWithDisabled(year, month, dayNum)) {\r\n               state = 'disable'; // 日样式置灰\r\n           } else if (this.isEqualToValue('day', year, month, dayNum)) {\r\n               state = 'current'; // 当前选中\r\n           } else if (this.isBetweenInRange(year, month, dayNum)) {\r\n               state = 'select'; // 在选中范围\r\n           } else {\r\n               state = 'default'; // 没有选中\r\n           }\r\n\r\n           dateArr[j] = {\r\n               value: dayNum,\r\n               state,\r\n               isToday: this.isEqualToToday('day', year, month, dayNum)\r\n       };\r\n\r\n           dayNum++;\r\n       }\r\n\r\n       // 4：将下个月的日存入数组dateArr\r\n       dayNum = 1;\r\n       const nextMonthDayState: string = this.isMaxMonth ? 'disable' : 'nextMonth'; // 下个月日期的状态\r\n       for (let k: number = dateArr.length; k < 42; k++) {\r\n            dateArr[k] = {\r\n                value: dayNum,\r\n                state: nextMonthDayState\r\n            };\r\n\r\n            if (this.isBiggerThanMaxDay(year, month + 1, dayNum) || this.isDisabledDay(year, month + 1, dayNum)\r\n                || this.isFixedWithDisabled(year, month + 1, dayNum)) {\r\n                    dateArr[k].state = 'disable';\r\n            }\r\n\r\n            dayNum++;\r\n       }\r\n\r\n       // 5：将dateArr组装成下拉面板中显示日的二维数组dayArr\r\n       for (let p: number = 0; p < dateArr.length / 7; p++) {\r\n           this.dayArr[p] = [];\r\n           for (let q: number = 0; q < 7; q++) {\r\n               this.dayArr[p].push(dateArr[q + p * 7]);\r\n           }\r\n       }\r\n   }\r\n\r\n  /**\r\n    * @description 根据当前年月值，设置下拉面板中显示的日数据\r\n    */\r\n   // tslint:disable-next-line:cyclomatic-complexity\r\n   // eslint-disable-next-line complexity\r\n   private setNextDayArr(): void {\r\n    // 获取当前年月\r\n    const sss: number = this.date.month === 12 ? 1 : this.date.month + 1;\r\n    const yyy: number = this.date.month === 12 ? this.date.year + 1 : this.date.year;\r\n    const year: number = parseInt(String(yyy), 10);\r\n    const month: number = parseInt(String(sss), 10);\r\n\r\n //    const monthNext: number = parseInt(String(this.date.month + 1), 10);\r\n\r\n    // 1：计算这个月1号是下拉面板第一行的第几个\r\n    // 获取到这个月1号是周几 周一到周六：1-6，周天：0；\r\n    const begin: number = new Date(year, month - 1, 1).getDay();\r\n\r\n    // 2：将上个月的日期存入数组dateArr\r\n    const dateArr: Array<TiDateValueAndState> = []; // 存储下拉面板中所有日的值和状态\r\n    const preMonth: number = (month === 1 ? 12 : (month - 1)); // 上个月\r\n    const preMonthDays: number = new Date(year, preMonth, 0).getDate(); // 上个月总天数\r\n    const preMonthStart: number = preMonthDays - begin + 1; // 获取到第一行的起始值\r\n\r\n    for (let i: number = 0; i < begin; i++) {\r\n         dateArr[i] = {\r\n             value: preMonthStart + i,\r\n             state: 'preMonth'\r\n         };\r\n\r\n         if (this.isBiggerThanMaxDay(year, month - 1, preMonthStart + i) ||\r\n            this.isSmallerThanMinDay(year, month - 1, preMonthStart + i) ||\r\n            this.isDisabledDay(year, month - 1, preMonthStart + i) ||\r\n            this.isFixedWithDisabled(year, month - 1, preMonthStart + i)) {\r\n            dateArr[i].state = 'disable';\r\n         }\r\n    }\r\n\r\n    // 3：将本月的日存入数组dateArr\r\n    let dayNum: number = 1;\r\n    const monthDays: number = new Date(year, month, 0).getDate(); // 这个月总天数\r\n    const length: number = begin + monthDays;\r\n    let state: string = '';\r\n\r\n    for (let j: number = begin; j < length; j++) {\r\n        if (this.isBiggerThanMaxDay(year, month, dayNum) ||\r\n        this.isSmallerThanMinDay(year, month, dayNum) ||\r\n        this.isDisabledDay(year, month, dayNum) ||\r\n        this.isFixedWithDisabled(year, month, dayNum)) {\r\n            state = 'disable'; // 日样式置灰\r\n        } else if (this.isEqualToValue('day', year, month, dayNum)) {\r\n            state = 'current'; // 当前选中\r\n        } else if (this.isBetweenInRange(year, month, dayNum)) {\r\n            state = 'select'; // 在选中范围\r\n        } else {\r\n            state = 'default'; // 没有选中\r\n        }\r\n\r\n        dateArr[j] = {\r\n            value: dayNum,\r\n            state,\r\n            isToday: this.isEqualToToday('day', year, month, dayNum)\r\n    };\r\n\r\n        dayNum++;\r\n    }\r\n\r\n    // 4：将下个月的日存入数组dateArr\r\n    dayNum = 1;\r\n    const nextMonthDayState: string = this.isMaxMonth ? 'disable' : 'nextMonth'; // 下个月日期的状态\r\n    for (let k: number = dateArr.length; k < 42; k++) {\r\n         dateArr[k] = {\r\n             value: dayNum,\r\n             state: nextMonthDayState\r\n         };\r\n\r\n         if (\r\n             this.isBiggerThanMaxDay(year, month + 1, dayNum) ||\r\n             this.isDisabledDay(year, month + 1, dayNum) ||\r\n             this.isFixedWithDisabled(year, month + 1, dayNum)) {\r\n                 dateArr[k].state = 'disable';\r\n         }\r\n\r\n         dayNum++;\r\n    }\r\n\r\n    // 5：将dateArr组装成下拉面板中显示日的二维数组dayArr\r\n    for (let p: number = 0; p < dateArr.length / 7; p++) {\r\n        this.nextdayArr[p] = [];\r\n        for (let q: number = 0; q < 7; q++) {\r\n            this.nextdayArr[p].push(dateArr[q + p * 7]);\r\n        }\r\n    }\r\n}\r\n\r\n   /**\r\n    * @description 判断参数传来的日期是否begin值小于end的值，end值大于begion值\r\n    * @param year 年份\r\n    * @param month 月份\r\n    * @param day 日\r\n    */\r\n   private isOutInRange(year: number, month: number, day: number): boolean {\r\n        const value: TiDateValue = this.value;\r\n        const curValue: number = new Date(year, month - 1, day).getTime();\r\n\r\n        if (!(value instanceof Object)) {\r\n            return false;\r\n        }\r\n        let end: Date = value.end;\r\n        let endValue: number;\r\n        if (TiDateUtil.isDate(value.end)) {\r\n            // 只取年月日：防止传入带有时分秒的值\r\n            end = new Date(end.getFullYear(), end.getMonth(), end.getDate());\r\n            endValue = end.getTime();\r\n\r\n            return curValue > endValue;\r\n        }\r\n\r\n        return false;\r\n   }\r\n\r\n   /**\r\n    * @description 判断参数传来的日期是否等于当前选中的日期：等于返回true，不等于返回false\r\n    * @param year 年份\r\n    * @param month 月份\r\n    * @param day 日\r\n    */\r\n   private isEqualToValue(type?: string, year?: number, month?: number, day?: number): boolean {\r\n        const beginVal: Date = this.value.begin;\r\n        const endVal: Date = this.value.end;\r\n        if (beginVal === null && endVal === null) {\r\n            return false;\r\n        } else {\r\n            let value1: Date;\r\n            let value2: Date;\r\n            let beginV: boolean;\r\n            let endV: boolean;\r\n            if (beginVal !== null) {\r\n                value1 = new Date(beginVal.getFullYear(), beginVal.getMonth(), beginVal.getDate());\r\n                beginV = this.isEqualValue(type, value1, year, month, day);\r\n            }\r\n            if (endVal !== null) {\r\n                value2 = new Date(endVal.getFullYear(), endVal.getMonth(), endVal.getDate());\r\n                endV = this.isEqualValue(type, value2, year, month, day);\r\n            }\r\n\r\n            return beginV || endV;\r\n\r\n        }\r\n   }\r\n\r\n   /**\r\n    * @description 判断参数传来的日期是否在当前选中日期的范围内,并且不等于当前选中的值：符合返回true，不符合返回false\r\n    * @param year 年份\r\n    * @param month 月份\r\n    * @param day 日\r\n    */\r\n   private isBetweenInRange(year: number, month: number, day: number): boolean {\r\n       const value: TiDateValue = this.value;\r\n       // value不是对象，begin或者end不是合法日期\r\n       if (!(value instanceof Object) || !TiDateUtil.isDate(value.begin) || !TiDateUtil.isDate(value.end)) {\r\n           return false;\r\n       }\r\n\r\n       let begin: Date = value.begin;\r\n       begin = new Date(begin.getFullYear(), begin.getMonth(), begin.getDate());\r\n       const beginValue: number = begin.getTime();\r\n\r\n       let end: Date = value.end;\r\n       end = new Date(end.getFullYear(), end.getMonth(), end.getDate());\r\n       const endValue: number = end.getTime();\r\n\r\n       const curValue: number = new Date(year, month - 1, day).getTime();\r\n       if (beginValue < curValue && curValue <= endValue) {\r\n           return true;\r\n       }\r\n\r\n       return false;\r\n   }\r\n\r\n   /**\r\n    * @description 判断参数传来的日期是否等于当前日期时间\r\n    * @param year 年份\r\n    * @param month 月份\r\n    * @param day 日\r\n    */\r\n   private isEqualToToday(type?: string, year?: number, month?: number, day?: number): boolean {\r\n        const today: Date = (this.nowDateTime && TiDateUtil.isDate(this.nowDateTime)) ? this.nowDateTime : new Date();\r\n\r\n        return this.isEqualValue(type, today, year, month, day);\r\n   }\r\n\r\n    // 判断日期是当前日期或当前选中日期\r\n    // tslint:disable-next-line:prefer-function-over-method\r\n    private isEqualValue(type?: string, value?: any, year?: number, month?: number, day?: number): boolean {\r\n    let _value: any;\r\n    if (type === 'year') { // 年\r\n        _value = value.getFullYear();\r\n        if (_value === year) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    if (type === 'month') { // 年、月\r\n        _value = new Date(value.getFullYear(), value.getMonth());\r\n        if (_value.getTime() === new Date(year, month - 1).getTime()) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    // 年、月、日\r\n    _value = new Date(value.getFullYear(), value.getMonth(), value.getDate());\r\n    if (_value.getTime() === new Date(year, month - 1, day).getTime()) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n   /**\r\n    * @description 根据当前年份和最大最小值，设置下拉面板中显示的月份状态\r\n    */\r\n   private setMonthArr(): void {\r\n       const year: number = this.date.year;\r\n       const innerMonth: Array<TiDateValueAndState> = [];\r\n       let state: string = '';\r\n       // 设置每个月份对应的值和状态\r\n       for (let month: number = 1; month <= 12; month++) {\r\n           // tslint:disable-next-line:prefer-conditional-expression\r\n           if (this.isSmallerThanMinMonth(year, month) || (this.isBiggerThanMaxMonth(year, month))) {\r\n            state = 'disable'; // 月样式置灰\r\n           } else if (this.isEqualToValue('month', year, month)) {\r\n            state = 'current'; // 当前选中\r\n           } else {\r\n            state = 'default'; // 没有选中\r\n           }\r\n\r\n           innerMonth[month - 1] = {\r\n            value: this.local.monthArr[month - 1],\r\n            state,\r\n            isMonth: this.isEqualToToday('month', year, month)\r\n        };\r\n       }\r\n\r\n       // 将月份数据格式化为二维数组\r\n       this.monthArr = [];\r\n       for (let p: number = 0; p < 3; p++) {\r\n           this.monthArr[p] = [];\r\n           for (let q: number = 0; q < 4; q++) {\r\n               this.monthArr[p].push(innerMonth[q + p * 4]);\r\n           }\r\n       }\r\n   }\r\n\r\n\r\n   /**\r\n    * @description 根据当前年份和最大最小值，设置下拉面板中显示的月份状态\r\n    */\r\n   private setEndpanelMonthArr(): void {\r\n    const year: number = this.date.year + 1;\r\n    const innerMonth: Array<TiDateValueAndState> = [];\r\n    let state: string = '';\r\n    // 设置每个月份对应的值和状态\r\n    for (let month: number = 1; month <= 12; month++) {\r\n        // tslint:disable-next-line:prefer-conditional-expression\r\n        if (this.isSmallerThanMinMonth(year, month) || (this.isBiggerThanMaxMonth(year, month))) {\r\n         state = 'disable'; // 月样式置灰\r\n        } else if (this.isEqualToValue('month', year, month)) {\r\n         state = 'current'; // 当前选中\r\n        } else {\r\n         state = 'default'; // 没有选中\r\n        }\r\n\r\n        innerMonth[month - 1] = {\r\n         value: this.local.monthArr[month - 1],\r\n         state,\r\n         isMonth: this.isEqualToToday('month', year, month)\r\n     };\r\n    }\r\n\r\n    // 将月份数据格式化为二维数组\r\n    this.endpanelMonthArr = [];\r\n    for (let p: number = 0; p < 3; p++) {\r\n        this.endpanelMonthArr[p] = [];\r\n        for (let q: number = 0; q < 4; q++) {\r\n            this.endpanelMonthArr[p].push(innerMonth[q + p * 4]);\r\n        }\r\n    }\r\n}\r\n\r\n    /**\r\n     * @description 判断参数传来的年月是否小于最小月份：小于返回true，大于返回false\r\n     * @param year 年份\r\n     * @param month 月份\r\n     */\r\n    private isSmallerThanMinMonth(year: number, month: number): boolean {\r\n        if (!TiDateUtil.isDate(this.min)) {\r\n            return false;\r\n        }\r\n\r\n        let min: Date = this.min;\r\n        min = new Date(min.getFullYear(), min.getMonth(), 1);\r\n        if (min.getTime() > new Date(year, month - 1, 1).getTime()) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @description 判断参数传来的年月是否大于最大月份：大于返回true，小于返回false\r\n     * @param year 年份\r\n     * @param month 月份\r\n     */\r\n    private isBiggerThanMaxMonth(year: number, month: number): boolean {\r\n        if (!TiDateUtil.isDate(this.max)) {\r\n            return false;\r\n        }\r\n\r\n        let max: Date = this.max;\r\n        max = new Date(max.getFullYear(), max.getMonth(), 1);\r\n        if (max.getTime() < new Date(year, month - 1, 1).getTime()) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @description 设置按钮状态：\r\n     */\r\n    private setYearRangePreNextState(): void {\r\n        const minValueRange: TiYearRange = this.getYearRange(this.min.getFullYear());\r\n        const maxValueRange: TiYearRange = this.getYearRange(this.max.getFullYear());\r\n        this.isMaxYearRange = (this.date.year >= maxValueRange.min && this.date.year <= maxValueRange.max) ? true : false;\r\n        this.isMinYearRange = (this.date.year >= minValueRange.min && this.date.year <= minValueRange.max) ? true : false;\r\n    }\r\n\r\n    // 获取时间面板：最大值和最小值年面板范围\r\n    private getYearRange(year: number): TiYearRange {\r\n        const minDateRange: number =  year - year % 10;\r\n        const maxDateRange: number =  minDateRange + 9;\r\n\r\n        return {\r\n            min: minDateRange,\r\n            max: maxDateRange\r\n        };\r\n    }\r\n\r\n   /**\r\n    * @description 根据当前年份和最大最小值，设置下拉面板中显示的年份状态\r\n    */\r\n   private setYearArr(): void {\r\n       // 1.获取当前年；算出起始年，\r\n       const innerYear: Array<TiDateValueAndState> = []; // 存储年值\r\n       const year: number = this.date.year - this.date.year % 10;\r\n       // 2.数组的第一个为起始年 -1；\r\n       const start: number = year - 1;\r\n       const end: number = year + 9;\r\n       let index: number = 0;\r\n       let state: string = '';\r\n       const preYearRange: string = (start <= this.min.getFullYear()) ? 'disable' : 'preYear';\r\n       innerYear.push({\r\n           state: preYearRange,\r\n           value: start\r\n       });\r\n       // 3.起始年  - 最终年（起始年+9）（for遍历）\r\n       for (let i: number = year; i <= end; i++) {\r\n           index++;\r\n           if (i < this.min.getFullYear() || i > this.max.getFullYear()) {\r\n               state = 'disable';\r\n           } else if (this.isEqualToValue('year', i)) {\r\n                state = 'current'; // 当前选中\r\n           } else {\r\n               state = 'default';\r\n           }\r\n\r\n           innerYear[index] = {\r\n            value: i,\r\n            state,\r\n            isYear: this.isEqualToToday('year', i)\r\n        };\r\n       }\r\n\r\n       // 判断是不是大于最大年：大于最大年状态为灰化\r\n       const nextYearRange: string = (end >= this.max.getFullYear()) ? 'disable' : 'nextYear';\r\n       innerYear.push({\r\n           state: nextYearRange,\r\n           value: end + 1\r\n       });\r\n       // 将月份数据格式化为二维数组\r\n       this.yearArr = [];\r\n       for (let p: number = 0; p < 3; p++) {\r\n           this.yearArr[p] = [];\r\n           for (let q: number = 0; q < 4; q++) {\r\n               this.yearArr[p].push(innerYear[q + p * 4]);\r\n           }\r\n       }\r\n   }\r\n\r\n   /**\r\n    * @description 根据当前年份和最大最小值，设置下拉面板中显示的年份状态\r\n    */\r\n   private setEndpanelYearArr(): void {\r\n    // 1.获取当前年；算出起始年，\r\n    const innerYear: Array<TiDateValueAndState> = []; // 存储年值\r\n    const year: number = this.date.year - this.date.year % 10 + 10;\r\n    // 2.数组的第一个为起始年 -1；\r\n    const start: number = year - 1;\r\n    const end: number = year + 9;\r\n    let index: number = 0;\r\n    let state: string = '';\r\n    const preYearRange: string = (start <= this.min.getFullYear()) ? 'disable' : 'preYear';\r\n    innerYear.push({\r\n        state: preYearRange,\r\n        value: start\r\n    });\r\n    // 3.起始年  - 最终年（起始年+9）（for遍历）\r\n    for (let i: number = year; i <= end; i++) {\r\n        index++;\r\n        if (i < this.min.getFullYear() || i > this.max.getFullYear()) {\r\n            state = 'disable';\r\n        } else if (this.isEqualToValue('year', i)) {\r\n             state = 'current'; // 当前选中\r\n        } else {\r\n            state = 'default';\r\n        }\r\n\r\n        innerYear[index] = {\r\n         value: i,\r\n         state,\r\n         isYear: this.isEqualToToday('year', i)\r\n     };\r\n    }\r\n\r\n    // 判断是不是大于最大年：大于最大年状态为灰化\r\n    const nextYearRange: string = (end >= this.max.getFullYear()) ? 'disable' : 'nextYear';\r\n    innerYear.push({\r\n        state: nextYearRange,\r\n        value: end + 1\r\n    });\r\n    // 将月份数据格式化为二维数组\r\n    this.endpanelYearArr = [];\r\n    for (let p: number = 0; p < 3; p++) {\r\n        this.endpanelYearArr[p] = [];\r\n        for (let q: number = 0; q < 4; q++) {\r\n            this.endpanelYearArr[p].push(innerYear[q + p * 4]);\r\n        }\r\n    }\r\n}\r\n\r\n   // 设置左年后退按钮灰化\r\n    isPickerYearMinValue(): boolean {\r\n        return this.picker === 'year'? this.isMinYearRange : this.isMinYear;\r\n    }\r\n   // 设置右年前进按钮灰化\r\n    isPickerYearMaxValue(): boolean {\r\n        return this.picker === 'year'? this.isMaxYearRange : this.isMaxYear;\r\n   }\r\n\r\n   public trackByFn(index: number, item: any): number {\r\n        return index;\r\n    }\r\n\r\n    private setOptions(num: number, pos?: string): Array<any> {\r\n        const options: Array<any> = [];\r\n        for (let i: number = 0; i < num; i++) {\r\n            options[i] = {\r\n                label : i < 10 ? '0' + i : String(i),\r\n                disabled: pos === 'end' ? this.endTimeDisabled : this.beginTimeDisabled\r\n            };\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    /**\r\n    * @ignore\r\n    * 时间选择框部分鼠标移出时去除hover样式\r\n    */\r\n    public onMouseleave(listCom: TiListComponent) {\r\n        listCom.hoverOption = null;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiDatePanelComponent } from './TiDatePanelComponent';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\nimport { TiListModule } from '../list/TiListModule';\r\nimport { TiLocaleModule } from '../../locale/TiLocaleModule';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TiIconModule,\r\n    TiListModule,\r\n    TiLocaleModule\r\n  ],\r\n  exports: [TiDatePanelComponent],\r\n  declarations: [TiDatePanelComponent]\r\n})\r\n\r\nexport class TiDatePanelModule {\r\n}\r\nexport { TiDatePanelComponent, TiDatePanel, TiPickerHeadText, TiDateValueAndState, TiYearRange } from './TiDatePanelComponent';\r\n","import {\r\n    Component,\r\n    ContentChild,\r\n    ElementRef,\r\n    NgZone,\r\n    Renderer2,\r\n    SimpleChanges,\r\n    TemplateRef\r\n} from '@angular/core';\r\nimport { TiDateUtil, TiKeymap, Util } from '../../utils/Util';\r\nimport { TiLocale, TiLocaleFormat } from '../../locale/TiLocaleModule';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiDateBaseComponent, TiDateCustomizeOptions } from '../datebase/TiDateBaseModule';\r\n\r\n/**\r\n * Date日期组件\r\n *\r\n * Date组件提供了一种方便的显示和设置日期的方式\r\n *\r\n * <example-url>../tiny3demo/#/date/date-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-date',\r\n    templateUrl: './date.html',\r\n    styleUrls: ['./date.less'],\r\n    // tslint:disable-next-line:use-host-property-decorator\r\n    host: {\r\n        '[class.ti3-date-input-container]': 'true',\r\n        '(blur)': 'hidePanel()'\r\n    },\r\n    providers: [ TiFormComponent.getValueAccessor(TiDateComponent) ]\r\n})\r\nexport class TiDateComponent extends TiDateBaseComponent {\r\n    /**\r\n     * @ignore\r\n     * 日期显示格式: date组件的format为string类型\r\n     */\r\n    public format: string;\r\n    /**\r\n     * @ignore\r\n     * 标记date/datetime的类型\r\n     */\r\n    public isDatetime: boolean = false;\r\n    /**\r\n     * @ignore\r\n     * 用于标记是不是range\r\n     */\r\n    public isRange: boolean = false;\r\n    /**\r\n     * @ignore\r\n     * placeholder提示文本\r\n     */\r\n    public placeholder: string = `${TiLocale.getLocaleWords().tiDate.datePlaceholder}`;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ContentChild('customize', { static: true }) customizeTemplate: TemplateRef<any>;\r\n\r\n\r\n    // tslint:disable-next-line:use-life-cycle-interface\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // format支持动态变更\r\n        if (changes['format'] && !changes['format'].firstChange) {\r\n            // 新的format是非法时，format值保持之前值不变\r\n            if (!Util.isString(changes['format'].currentValue)) {\r\n                this.format = changes['format'].previousValue;\r\n\r\n                return;\r\n            }\r\n            this.formatValue();\r\n            // 配置面板的接口值\r\n            this.setPickerDate();\r\n        }\r\n\r\n        // 验证最大值最小值，为了处理最大值和最小值从合法日期变为undefined 的情景\r\n        if ((changes['max'] && !changes['max'].firstChange) || (changes['min'] && !changes['min'].firstChange)) {\r\n            this.validateMinAndMax(this.config, this.isDatetime);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * model值变化时的回调\r\n     */\r\n    ngOnModelChange(): void {\r\n        if (!TiDateUtil.isDate(this.model)) {\r\n            this.inputValue = '';\r\n\r\n            return;\r\n        }\r\n        this.formatValue();\r\n        this.setPickerDate();\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public setInputValue(value: Date): void {\r\n        let isDisabled: boolean = false;\r\n        if (Util.isArray(this.disabledDays) && this.disabledDays.length > 0) {\r\n            this.disabledDays.forEach((item: Date) => {\r\n                if (item.getTime() === value.getTime()) {\r\n                    isDisabled = true;\r\n                }\r\n            });\r\n        }\r\n        if (isDisabled) {\r\n            return;\r\n        }\r\n        if (this.isValidValue(value)) {\r\n            this.model = value;\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public onKeydownFn(event: KeyboardEvent, val: any, pos: string): void {\r\n        if (event.keyCode === TiKeymap.KEY_ENTER  || event.keyCode === TiKeymap.KEY_NUMPAD_ENTER) {\r\n            this.hideDrop();\r\n        }\r\n     }\r\n\r\n    /**\r\n     * @ignore\r\n     * 配置时间日期面板接口\r\n     */\r\n    public setPickerDate(): void {\r\n        this.datePanel = {\r\n            value : {\r\n                begin: this.model,\r\n                // tslint:disable-next-line:no-null-keyword\r\n                end: null\r\n            },\r\n            picker : 'day',\r\n            min : this.min,\r\n            max : this.max,\r\n            format : this.format,\r\n            nowDateTime : this.nowDateTime,\r\n            select: (): void => {\r\n                // 点击面板：新旧值相同不做处理，不相同，将新值赋给model\r\n                if (!TiDateUtil.isDateEqual(this.model, this.datePanel['value'].begin)) {\r\n                    this.model = this.datePanel['value'].begin;\r\n                }\r\n                this.hideDrop();\r\n            }\r\n        };\r\n\r\n        // 如果只显示年\r\n        if (this.format.indexOf('M') === -1 && this.format !== 'mediumDate') {\r\n            this.datePanel['picker'] = 'year';\r\n        } else if (this.format.indexOf('d') === -1) { // 如果只显示年月\r\n            this.datePanel['picker'] = 'month';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 根据model值和format接口，格式化显示时间日期\r\n     */\r\n    public formatValue(): void {\r\n        this.inputValue = (this.model !== null) ? TiLocaleFormat.formatDate(this.model, this.format) : '';\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 判断是不是合法的model\r\n     */\r\n    public isValidValue(value: Date): boolean {\r\n        if (TiDateUtil.isDate(value) && TiDateUtil.isBetweenMaxAndmin(value, this.min, this.max)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TiDropModule } from '../drop/TiDropModule';\r\nimport { TiDatePanelModule } from '../datepanel/TiDatePanelModule';\r\nimport { TiButtonModule } from '../button/TiButtonModule';\r\nimport { TiDateDominatorModule } from '../datedominator/TiDateDominatorModule';\r\nimport { TiDateComponent } from './TiDateComponent';\r\nimport { TiLocaleModule } from '../../locale/TiLocaleModule';\r\nimport { TiDateEditModule } from '../dateedit/TiDateEditModule';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TiDropModule,\r\n    TiButtonModule,\r\n    TiDateEditModule,\r\n    TiDatePanelModule,\r\n    TiDateDominatorModule,\r\n    TiLocaleModule\r\n  ],\r\n  exports: [TiDateComponent],\r\n  declarations: [TiDateComponent]\r\n})\r\nexport class TiDateModule {\r\n\r\n}\r\nexport { TiDateComponent } from './TiDateComponent';\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    NgZone,\r\n    Renderer2,\r\n    SimpleChanges\r\n} from '@angular/core';\r\nimport { TiDateUtil, TiKeymap, Util } from '../../utils/Util';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiDateBaseComponent, TiDateValue } from '../datebase/TiDateBaseModule';\r\nimport { TiLocale, TiLocaleFormat } from '../../locale/TiLocaleModule';\r\n\r\n/**\r\n * DateRange日期范围组件\r\n *\r\n * DateRange组件提供了一种方便的显示和设置日期范围的方式\r\n *\r\n * <example-url>../tiny3demo/#/daterange/daterange-all</example-url>\r\n */\r\n@Component({\r\n   selector: 'ti-date-range',\r\n   templateUrl: './daterange.html',\r\n   styleUrls: ['./daterange.less'],\r\n   // tslint:disable-next-line:use-host-property-decorator\r\n   host: {\r\n    '[class.ti3-date-range-input-container]': 'true',\r\n    '(blur)': 'hidePanel()'\r\n},\r\n   providers: [ TiFormComponent.getValueAccessor(TiDateRangeComponent)]\r\n})\r\n\r\nexport class TiDateRangeComponent extends TiDateBaseComponent {\r\n    /**\r\n     * @ignore\r\n     * 日期显示格式: date组件的format为string类型\r\n     */\r\n    public format: string;\r\n    /**\r\n     * @ignore\r\n     * 标记date/datetime的类型\r\n     */\r\n    public isDatetime: boolean = false;\r\n    /**\r\n     * @ignore\r\n     * 用于标记是不是range\r\n     */\r\n    public isRange: boolean = true;\r\n    /**\r\n     * @ignore\r\n     * 保存model值\r\n     */\r\n    public oldModel: TiDateValue = {\r\n        begin: null,\r\n        end: null\r\n    };\r\n    /**\r\n     * @ignore\r\n     * placeholder提示文本\r\n     */\r\n    public placeholder: string = `${TiLocale.getLocaleWords().tiDate.rangeBeginLabel} ─ ${TiLocale.getLocaleWords().tiDate.rangeEndLabel}`;\r\n\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // format支持动态变更\r\n        if (changes['format'] && !changes['format'].firstChange) {\r\n            // 新的format是非法时，format值保持之前值不变\r\n            if (!Util.isString(changes['format'].currentValue)) {\r\n                this.format = changes['format'].previousValue;\r\n\r\n                return;\r\n            }\r\n\r\n            this.formatValue();\r\n        }\r\n\r\n        // 验证最大值最小值，为了处理最大值和最小值从合法日期变为undefined 的情景\r\n        if ((changes['max'] && !changes['max'].firstChange) || (changes['min'] && !changes['min'].firstChange)) {\r\n            this.validateMinAndMax(this.config, this.isDatetime);\r\n        }\r\n    }\r\n\r\n    ngDoCheck(): void {\r\n        // 监听value值\r\n        if (!Util.isUndefined(this.model)) {\r\n            if (!this.isValidValue(this.model)) {\r\n                return;\r\n            }\r\n            // 监听model值的变化\r\n            this.setModel(this.isDatetime);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 将value转换成format接口格式的字符串\r\n     */\r\n    public formatValue(): void {\r\n        if (this.model === null || (this.model.begin === null && this.model.end === null)) {\r\n\r\n            this.inputValue = '';\r\n        } else {\r\n            const begin: string = TiLocaleFormat.formatDate(this.model.begin, this.format);\r\n            const end: string = TiLocaleFormat.formatDate(this.model.end, this.format);\r\n            // 注意：中划线用的是制表符中的中划线，与正常的中线区分开2017-2-12 - 2018-3-20\r\n            this.inputValue = `${begin} ─ ${end}`;\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    onKeydownFn(event: KeyboardEvent, pos: string): void {\r\n        if (event.keyCode === TiKeymap.KEY_ENTER  || event.keyCode === TiKeymap.KEY_NUMPAD_ENTER) {\r\n            this.dateEditBlur(pos);\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    dateEditBlur(pos: string): void {\r\n        // 输入值超出最大最小 认为非法\r\n        const value: any = this.datePanel.value;\r\n        if (TiDateUtil.isDate(value.begin) && TiDateUtil.isDate(value.end)) {\r\n            if (TiDateUtil.isBigger(value.begin, value.end)) {\r\n                if (pos === 'begin') {\r\n                    this.datePanel.value.begin = this.oldBeginValue || this.oldModel && this.oldModel.begin;\r\n                } else {\r\n                    this.datePanel.value.end = this.oldEndValue || this.oldModel && this.oldModel.end;\r\n                }\r\n            }\r\n            this.oldBeginValue = this.datePanel.value.begin;\r\n            this.oldEndValue = this.datePanel.value.end;\r\n        }\r\n        this.setOkBtnState();\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 确认按钮\r\n     */\r\n    public onOkClick(): void {\r\n        if (this.inValidValue) {\r\n            return;\r\n        }\r\n\r\n        if (this.datePanel instanceof Object) {\r\n            // 新旧值不同更新model值\r\n            if (!this.rangeValueIsEqual(this.model, this.datePanel['value'], this.isDatetime)) {\r\n                this.model = {\r\n                    begin: this.datePanel['value'].begin,\r\n                    end: this.datePanel['value'].end\r\n                };\r\n            }\r\n        }\r\n\r\n        this.hideDrop();\r\n\r\n        this.okClick.emit(this.model);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 是否为禁用日期\r\n     */\r\n    public isDisabledDays(value: Date): boolean {\r\n        let isDisabled: boolean = false;\r\n        if (Util.isArray(this.disabledDays) && this.disabledDays.length > 0) {\r\n            this.disabledDays.forEach((item: Date) => {\r\n                if (item.getTime() === value.getTime()) {\r\n                    isDisabled = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        return isDisabled;\r\n    }\r\n    /**\r\n     * @ignore\r\n     * model值的合法性判断\r\n     */\r\n    public isValidValue(value: TiDateValue): boolean {\r\n        if (value === null) {\r\n            return true;\r\n        }\r\n\r\n        return this.isValidRange(value) ? true : false;\r\n    }\r\n\r\n    // 判断是不是合法范围\r\n    private isValidRange(value: TiDateValue): boolean {\r\n        if (!(value instanceof Object) || !TiDateUtil.isDate(value.begin) || !TiDateUtil.isDate(value.end)) {\r\n            return false;\r\n        }\r\n\r\n        const startDate: Date = new Date(value.begin.getFullYear(), value.begin.getMonth(), value.begin.getDate());\r\n        const endDate: Date = new Date(value.end.getFullYear(), value.end.getMonth(), value.end.getDate());\r\n\r\n        return startDate.getTime() <= endDate.getTime() && TiDateUtil.isBetweenMaxAndmin(startDate, this.min, this.max)\r\n            && TiDateUtil.isBetweenMaxAndmin(endDate, this.min, this.max);\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 设置确认按钮的状态\r\n     */\r\n    public setOkBtnState(): void {\r\n        const date: TiDateValue = this.datePanel.value;\r\n        let endTime: number;\r\n        let beginTime: number;\r\n        if (TiDateUtil.isDate(date.end)) {\r\n            endTime = new Date(date.end.getFullYear(), date.end.getMonth(), date.end.getDate()).getTime();\r\n        }\r\n        if (TiDateUtil.isDate(date.begin)) {\r\n            beginTime = new Date(date.begin.getFullYear(), date.begin.getMonth(), date.begin.getDate()).getTime();\r\n        }\r\n        const isBeginSmallorEqualEnd: boolean = this.isAllowBeginEqualEnd ? endTime < beginTime : endTime <= beginTime;\r\n        this.inValidValue = !(date instanceof Object)\r\n            || !TiDateUtil.isDate(date.begin)\r\n            || !TiDateUtil.isDate(date.end)\r\n            || isBeginSmallorEqualEnd;\r\n\r\n        if (this.buttonComs) {\r\n            this.setAttr(this.buttonComs.last.nativeElement, 'disabled', this.inValidValue);\r\n            this.setInputStyle(this.inValidValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 配置时间日期面板接口\r\n     */\r\n    public setPickerDate(): void {\r\n        // 做深拷贝的原因：不让model和datePanel组件中value双向绑定，\r\n        // 因为下拉面板中日期变化时，不立即更新到输入框中\r\n        let value: TiDateValue;\r\n        if (this.model === null || this.model === undefined) {\r\n             value = {\r\n                begin: null,\r\n                end: null\r\n             };\r\n        } else {\r\n            value = {\r\n                begin: this.model.begin,\r\n                end: this.model.end\r\n            };\r\n        }\r\n\r\n        this.datePanel = {\r\n            value,\r\n            format: this.format,\r\n            max: this.max,\r\n            min: this.min,\r\n            picker: 'day',\r\n            select: (): void => {\r\n                const obj: any = {\r\n                    value: this.datePanel.value[this.focusedPosition],\r\n                    focusedPosition: this.focusedPosition\r\n                };\r\n                this.dayClick.emit(obj);\r\n                // 初始化选择结束之后，如果开始未选择，焦点转移到开始日期编辑框\r\n                if (this.focusedPosition === 'end' && this.datePanel.value.begin === null) {\r\n                    this.focusedPosition = 'begin';\r\n                    this.dateEditComs.first.focus();\r\n                } else {\r\n                    if (!this.isEndFixed) {\r\n                        this.focusedPosition = 'end';\r\n                        this.dateEditComs.last.focus();\r\n                    }\r\n                }\r\n                this.setOkBtnState();\r\n            }\r\n\r\n        };\r\n\r\n        // 如果只显示年\r\n        if (this.format.indexOf('M') === -1 && this.format !== 'mediumDate') {\r\n            this.datePanel['picker'] = 'onlyYear';\r\n\r\n        } else if (this.format.indexOf('d') === -1) {  // 如果只显示年月\r\n            this.datePanel['picker'] = 'onlyYearMonth';\r\n\r\n        }\r\n        this.setOkBtnState();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TiDropModule } from '../drop/TiDropModule';\r\nimport { TiLocaleModule } from '../../locale/TiLocaleModule';\r\nimport { TiDateRangeComponent } from './TiDateRangeComponent';\r\nimport { TiButtonModule } from '../button/TiButtonModule';\r\nimport { TiDatePanelModule } from '../datepanel/TiDatePanelModule';\r\nimport { TiDateEditModule } from '../dateedit/TiDateEditModule';\r\nimport { TiDateDominatorModule } from '../datedominator/TiDateDominatorModule';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TiLocaleModule,\r\n    TiDropModule,\r\n    TiButtonModule,\r\n    TiDatePanelModule,\r\n    TiDateEditModule,\r\n    TiDateDominatorModule\r\n  ],\r\n  exports: [TiDateRangeComponent],\r\n  declarations: [TiDateRangeComponent]\r\n})\r\n\r\nexport class TiDateRangeModule {\r\n}\r\nexport { TiDateRangeComponent } from './TiDateRangeComponent';\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    NgZone,\r\n    Renderer2,\r\n    SimpleChanges\r\n} from '@angular/core';\r\nimport { TiLocale, TiLocaleFormat } from '../../locale/TiLocaleModule';\r\nimport { TiDateUtil, TiKeymap, Util } from '../../utils/Util';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiDateBaseComponent, TiDatetimeFormat, TimeOptions } from '../datebase/TiDateBaseModule';\r\n\r\n/**\r\n * Datetime日期时间组件\r\n *\r\n * Datetime组件提供了一种方便的显示和设置日期时间的方式。\r\n *\r\n * <example-url>../tiny3demo/#/datetime/datetime-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-datetime',\r\n    templateUrl: './datetime.html',\r\n    styleUrls: ['./datetime.less'],\r\n    host: {\r\n        '[class.ti3-datetime-input-container]': 'true',\r\n        '(blur)': 'hidePanel()'\r\n    },\r\n    providers: [ TiFormComponent.getValueAccessor(TiDatetimeComponent) ]\r\n})\r\nexport class TiDatetimeComponent extends TiDateBaseComponent {\r\n    /**\r\n     * @ignore\r\n     * 配置time组件的接口\r\n     */\r\n    public beginTime: TimeOptions = {};\r\n    /**\r\n     * @ignore\r\n     * 日期显示格式: Datetime组件的format为DatetimeFormat类型\r\n     */\r\n    public format: TiDatetimeFormat;\r\n    /**\r\n     * @ignore\r\n     * 标记date/datetime的类型\r\n     */\r\n    public isDatetime: boolean = true;\r\n    /**\r\n     * @ignore\r\n     * 用于标记是不是range\r\n     */\r\n    public isRange: boolean = false;\r\n    /**\r\n     * @ignore\r\n     * placeholder提示文本\r\n     */\r\n    public placeholder: string = `${TiLocale.getLocaleWords().tiDate.datetimePlaceholder}`;\r\n    /**\r\n     * @ignore\r\n     * 旧时间值\r\n     */\r\n    public oldValue: any = '';\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.oldFormat = this.format;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // 验证最大值最小值，为了处理最大值和最小值从合法日期变为undefined 的情景\r\n        if ((changes['max'] && !changes['max'].firstChange) || (changes['min'] && !changes['min'].firstChange)) {\r\n            this.validateMinAndMax(this.config, this.isDatetime);\r\n        }\r\n    }\r\n\r\n    ngDoCheck(): void {\r\n        // 监听format的变化\r\n        this.setFormat();\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * model值变化时的回调\r\n     */\r\n    ngOnModelChange(): void {\r\n        if (!TiDateUtil.isDate(this.model)) {\r\n            this.inputValue = '';\r\n\r\n            return;\r\n        }\r\n        this.formatValue();\r\n        this.setOkBtnState();\r\n        this.setPickerDate();\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 确认按钮的点击事件处理\r\n     */\r\n    onOkClick(): void {\r\n        if (this.inValidValue) {\r\n            return;\r\n        }\r\n\r\n        if (!TiDateUtil.isDate(this.datePanel['value']['begin'])) {\r\n            this.dropCom.hide();\r\n\r\n            return;\r\n        }\r\n\r\n        // 获取时间的字符串\r\n        const dateStr: string = TiDateUtil.getDateStr(this.datePanel['value']['begin']);\r\n        // 空格误删\r\n        const newValue: Date = new Date(`${dateStr} ${TiDateUtil.addColon(this.beginTime['value'])}`);\r\n        // 点击确认按钮对比新旧值：相等不做处理，不相等将新值赋给model\r\n        if (!TiDateUtil.isDatetimeEqual(this.model, newValue)) {\r\n            this.model = newValue;\r\n        }\r\n\r\n        this.hideDrop();\r\n\r\n        this.okClick.emit(this.model);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 设置下拉面板中datePanel组件接口\r\n     */\r\n    private setDatePanel(): void {\r\n        this.datePanel = {\r\n            picker: 'day',\r\n            max: this.max,\r\n            min: this.min,\r\n            format : this.format,\r\n            nowDateTime: this.nowDateTime,\r\n            value : {\r\n                begin: this.model,\r\n                end: null\r\n                },\r\n            select: (): void => {\r\n                // 点击日期面板值，校验时间的最大值最小值\r\n                // 原因：当选择的日期是最小或者最大时，需要校验当前的时间是否合法\r\n                // 设定时间范围\r\n                if (TiDateUtil.isDateEqual(this.datePanel['value']['begin'], this.max)) {\r\n                    this.beginTime['max'] = TiDateUtil.getTimeStr(this.max);\r\n                    this.beginTime['min'] = '00:00:00';\r\n                } else if (TiDateUtil.isDateEqual(this.datePanel['value']['begin'], this.min)) {\r\n                    this.beginTime['max'] = '23:59:59';\r\n                    this.beginTime['min'] = TiDateUtil.getTimeStr(this.min);\r\n                } else {\r\n                    this.beginTime['min'] = '00:00:00';\r\n                    this.beginTime['max'] = '23:59:59';\r\n                }\r\n                this.setBeginTime();\r\n                this.setOkBtnState();\r\n            },\r\n            selectTimeFn: (obj: any): void => {\r\n                this.setTimeFn(obj, this.beginTime);\r\n                this.setOkBtnState();\r\n            }\r\n        };\r\n    }\r\n    private setBeginTime(): void {\r\n        if (this.timeEditDisabled) {\r\n            this.beginTime['value'] = TiDateUtil.getTimeStr(new Date());\r\n        }\r\n        // 1.获取时间的字符串\r\n        const dateStr: string = TiDateUtil.getDateStr(this.datePanel['value']['begin']);\r\n        // 空格误删\r\n        const datetimeStr: Date = new Date(`${dateStr} ${TiDateUtil.addColon(this.beginTime['value'])}`);\r\n        // 最大值校验\r\n        if (TiDateUtil.isBigger(datetimeStr, this.max)) {\r\n            this.beginTime['value'] = TiDateUtil.getTimeStr(this.max);\r\n        }\r\n        // 最小值校验\r\n        if (TiDateUtil.isSmaller(datetimeStr, this.min)) {\r\n            this.beginTime['value'] = TiDateUtil.getTimeStr(this.min);\r\n        }\r\n        this.oldValue = this.beginTime['value'];\r\n\r\n        this.timeEditDisabled = false;\r\n    }\r\n    /**\r\n     * @ignore\r\n     * @param event\r\n     * @param val\r\n     */\r\n    onKeydownFn(event: KeyboardEvent, val: any): void {\r\n        if (event.keyCode === TiKeymap.KEY_ENTER  || event.keyCode === TiKeymap.KEY_NUMPAD_ENTER) {\r\n            if (!TiDateUtil.isDate(val)) {\r\n                return;\r\n            }\r\n            this.setBeginTime();\r\n            this.setOkBtnState();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public editBlur(val: any): void {\r\n        if (val !== null) {\r\n            this.setBeginTime();\r\n            this.setOkBtnState();\r\n        }\r\n     }\r\n    // 设置下拉面板中time组件接口\r\n    private setTime(): void {\r\n        // value接口设置\r\n        this.setTimeValue();\r\n\r\n        // maxValue接口设置\r\n        this.setTimeMaxValue();\r\n\r\n        // minValue接口设置\r\n        this.setTimeMinValue();\r\n    }\r\n\r\n    private setTimeValue(): void {\r\n        this.beginTime['value'] = TiDateUtil.isDate(this.model) ?  TiDateUtil.getTimeStr(this.model) : '';\r\n    }\r\n\r\n    private setTimeMaxValue(): void {\r\n        if (!TiDateUtil.isDate(this.model)) {\r\n            return;\r\n        }\r\n\r\n        this.beginTime['max'] = (TiDateUtil.isDateEqual(this.model, this.max)) ?\r\n                                    TiDateUtil.getTimeStr(this.max) : '23:59:59';\r\n    }\r\n\r\n    private setTimeMinValue(): void {\r\n        if (!TiDateUtil.isDate(this.model)) {\r\n            return;\r\n        }\r\n\r\n        this.beginTime['min'] = (TiDateUtil.isDateEqual(this.model, this.min)) ?\r\n                                    TiDateUtil.getTimeStr(this.min) : '00:00:00';\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public isValidValue(value: Date): boolean {\r\n        if (TiDateUtil.isDate(value) && TiDateUtil.isBetweenMaxAndmin(value, this.min, this.max)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public setPickerDate(): void {\r\n        // 设置下拉面板中datePanel组件接口\r\n        this.setDatePanel();\r\n\r\n        // 设置下拉面板中time组件接口\r\n        this.setTime();\r\n\r\n        this.setOkBtnState();\r\n\r\n        this.timeEditDisabled = TiDateUtil.isDate(this.model) ? false : true;\r\n\r\n        if (this.timeEditDisabled) {\r\n            this.selectTime = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 设置确认按钮的状态\r\n     */\r\n    public setOkBtnState(): void {\r\n        // 输入中文冒号之后，及时转换为英文冒号\r\n        const inputvalue: string = this.beginTime.value;\r\n        if (!Util.isUndefined(inputvalue)) {\r\n            this.beginTime.value = inputvalue.replace('：', ':');\r\n        }\r\n        const date: Date = this.datePanel.value.begin;\r\n        if (!TiDateUtil.isDate(date)) {\r\n            this.inValidValue = true;\r\n        } else {\r\n            const dateTime: Date = new Date(\r\n                `${TiDateUtil.getDateStr(date)} ${TiDateUtil.addColon(this.beginTime['value'])}`);\r\n            this.inValidValue = !TiDateUtil.isBetweenMaxAndmin(dateTime, this.min, this.max);\r\n        }\r\n        if (this.buttonComs) {\r\n            this.setAttr(this.buttonComs.last.nativeElement, 'disabled', this.inValidValue);\r\n            this.setInputStyle(this.inValidValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 将value转换为format接口格式的字符串\r\n     */\r\n    public formatValue(): void {\r\n        if (this.model === null) {\r\n            this.inputValue = '';\r\n        } else {\r\n            // 空格误删\r\n            const format: string = `${this.format.date} ${TiDateUtil.addAmPm(this.format.time)}`;\r\n            this.inputValue = TiLocaleFormat.formatDateTime(this.model, format);\r\n        }\r\n        this.oldValue = TiDateUtil.getTimeStr(this.model);\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 时间框失焦事件\r\n     */\r\n    public timeBlur(): void {\r\n        this.handleTimeValue();\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 时间框enter事件\r\n     */\r\n    public timeKeydown(event: KeyboardEvent): void {\r\n        if (event.keyCode === TiKeymap.KEY_ENTER  || event.keyCode === TiKeymap.KEY_NUMPAD_ENTER) {\r\n            this.handleTimeValue();\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * time时间框输入内容处理\r\n     */\r\n    public handleTimeValue(): void {\r\n        // 区分中英文冒号\r\n        const reg: RegExp = new RegExp('[\\\\:\\\\：]');\r\n        const dateReg: RegExp = new RegExp('[年\\\\月\\\\日\\\\-\\\\/\\\\.\\\\_]');\r\n        // 输入区间是否存在小数点，非整数\r\n        let isNotInteger: boolean = false;\r\n        this.beginTime = JSON.parse(JSON.stringify(this.beginTime));\r\n\r\n        const timeArr: Array<string> = this.beginTime.value.split(reg);\r\n        timeArr.forEach((item: string, index: number): void => {\r\n            if (item.length === 1) {\r\n                timeArr[index] = '0' + item;\r\n            }\r\n            if (parseInt(item, 10) !== Number(item)) {\r\n                isNotInteger = true;\r\n            }\r\n        });\r\n        const dateStr: string = TiDateUtil.getDateStr(this.datePanel['value']['begin']);\r\n        const dateArr: Array<any> = dateStr.split(dateReg);\r\n        this.beginTime.value = timeArr.join(':');\r\n        const datetime: Date = new Date(`${dateStr} ${TiDateUtil.addColon(this.beginTime['value'])}`);\r\n        const dateVal: Date = new Date(parseInt(dateArr[0], 10), parseInt(dateArr[1], 10), parseInt(dateArr[2], 10),\r\n        parseInt(timeArr[0], 10), parseInt(timeArr[1], 10), parseInt(timeArr[2], 10));\r\n        if (String(datetime) === 'Invalid Date' || String(dateVal) === 'Invalid Date' || timeArr.length > 3 || isNotInteger) {\r\n            this.beginTime.value = this.oldValue;\r\n            this.setOkBtnState();\r\n\r\n            return;\r\n        }\r\n        this.oldValue = this.beginTime.value;\r\n        this.setOkBtnState();\r\n    }\r\n    /**\r\n     * @description 判读字符串是否是合法的时间\r\n     * @param: time: 校验的时间\r\n     */\r\n    private isValidTime(time: string): boolean {\r\n        if (!Util.isString(time) || time.trim() === '') {\r\n            return false;\r\n        }\r\n        const date: any = new Date(`2018/5/15 ${time}`);\r\n\r\n        return !(String(date) === 'Invalid Date');\r\n    }\r\n}\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    HostListener,\r\n    Input,\r\n    NgZone,\r\n    Renderer2,\r\n    SimpleChanges,\r\n    ViewChild,\r\n    Inject\r\n} from '@angular/core';\r\nimport { TiKeymap, Util } from '../../utils/Util';\r\nimport { TiLocale, TiLocaleFormat, TiLocaleWords } from '../../locale/TiLocaleModule';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiDropComponent } from '../drop/TiDropModule';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { TiListComponent } from '../list/TiListModule';\r\n/**\r\n * @ignore\r\n */\r\nexport interface TimeField  {\r\n    hour: string;\r\n    minute: string;\r\n    second: string;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport interface TiComputingParams {\r\n    max: number;\r\n    min: number;\r\n    needAddZero: boolean;\r\n}\r\n\r\n/**\r\n * Time时间组件\r\n *\r\n * Time组件提供了一种方便的显示和设置时间的方式。\r\n *\r\n * <example-url>../tiny3demo/#/time/time-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-time',\r\n    templateUrl: './time.html',\r\n    styleUrls: ['./time.less' ],\r\n    providers: [TiFormComponent.getValueAccessor(TiTimeComponent) ],\r\n    host: {\r\n        '[class.ti3-time-container]': 'true',\r\n        '(blur)': 'onBlur()'\r\n    }\r\n})\r\n\r\nexport class TiTimeComponent extends TiFormComponent {\r\n    /**\r\n     * 设置时间显示格式。各个时间段格式规则; 默认值：'HH:mm:ss'\r\n     *\r\n     * 1.小时可以设置为：\r\n     *\r\n     * HH —— 24小时制,两位数字表示小时(00-23)\r\n     *\r\n     * H —— 24小时制，开头不补零数字表示小时(0-23)\r\n     *\r\n     * 2.分钟可以设置为：\r\n     *\r\n     * mm —— 两位数字表示分钟值（00-59）\r\n     *\r\n     * m —— 开头不补零数字表示分钟值（0-59）\r\n     *\r\n     * 3.秒可以设置为：\r\n     *\r\n     * ss —— 两位数字表示秒值(00-59)\r\n     *\r\n     * s —— 开头不补零数字表示秒值(0-59)\r\n     *\r\n     * 说明：开头补零是指当前时间是个位数字时，前边补零，始终保持两位数字\r\n     */\r\n    @Input() format: string;\r\n    /**\r\n     * 设置时间最大值 默认值：'23:59:59'\r\n     */\r\n    @Input() max: string;\r\n    /**\r\n     * 设置时间最小值 默认值：'00:00:00'\r\n     */\r\n    @Input() min: string;\r\n    /**\r\n     * 是否展示清除时间图标（默认显示）\r\n     *\r\n     * 10.1.2新增接口\r\n     */\r\n   @Input() clearIcon: boolean = true;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('dominator', { static: true }) private containerRef: ElementRef;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild(TiDropComponent, { static: true }) dropCom: TiDropComponent;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('text', { static: true }) textCom: ElementRef;\r\n    /**\r\n     * @ignore\r\n     */\r\n   @ViewChild('input', { static: true }) inputEle: ElementRef;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('button', { static: true }) buttonEle: ElementRef;\r\n    private readonly localeWords: TiLocaleWords = TiLocale.getLocaleWords();\r\n    /**\r\n     * @ignore\r\n     * time编辑框内部value值\r\n     */\r\n    public inputValue: string = '';\r\n    /**\r\n     * @ignore\r\n     * dominator最终显示时间值\r\n     */\r\n    public timeValue: String = '';\r\n    /**\r\n     * @ignore\r\n     */\r\n    public dominatorCom: ElementRef;\r\n    /**\r\n     * @ignore\r\n     * 时间下拉面板宽度，根据时间格式宽度各异\r\n     */\r\n    public timePanelWidth: number = 284;\r\n    /**\r\n     * @ignore\r\n     * 底部确认按钮是否禁用\r\n     */\r\n    public buttonDisabled: boolean = true;\r\n    /**\r\n     * @ignore\r\n     * placeholder提示文本\r\n     */\r\n    public placeholder: string;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public hourOptions: Array<any>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public minuteOptions: Array<any>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public secondOptions: Array<any>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public selectedHour: any;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public selectedMinute: any;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public selectedSecond: any;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public hourScroll: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public minuteScroll: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public secondScroll: number;\r\n    /**\r\n     * @ignore\r\n     * 只展示小时段\r\n     */\r\n    public onlyHour: boolean;\r\n    /**\r\n     * @ignore\r\n     * 只展示时分段\r\n     */\r\n    public onlyHourMinute: boolean;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public oldInputValue: string = '';\r\n    /**\r\n     * @ignore\r\n     * 面板与dominator的距离\r\n     */\r\n    public dominatorSpace: string = '-30px';\r\n    /**\r\n     * @ignore\r\n     * 是否清除\r\n     */\r\n    public isClearClick: boolean;\r\n    private documentKeydownListener: () => void;\r\n\r\n    constructor(\r\n        private zone: NgZone,\r\n        protected hostRef: ElementRef,\r\n        protected renderer2: Renderer2,\r\n        @Inject(DOCUMENT) private document\r\n    ) {\r\n        super(hostRef, renderer2);\r\n    }\r\n\r\n    /**\r\n     * @description: 若时间字符串没有一个冒号时处理成合法的事件字符串（加冒号）\r\n     * @param value 时间字符串\r\n     */\r\n    private static addColon(value: any): string {\r\n        // new Date()时，时间中没有一个冒号得到的是非法时间\r\n        if (value.match(/:/)) {\r\n            return value;\r\n        }\r\n        let ampm: string = value.match(/am|AM|pm|PM/);\r\n        ampm = ampm || '';\r\n\r\n        return `${parseInt(value, 10)}: ${ampm}`;\r\n    }\r\n\r\n    /**\r\n     * @description 判读字符串是否是合法的时间\r\n     * @param: time: 校验的时间\r\n     */\r\n    private static isValidTime(time: string): boolean {\r\n        // value非字符串或者为空字符串时，为非法时间\r\n        if (!Util.isString(time) || time.trim() === '') {\r\n            return false;\r\n        }\r\n\r\n        const date: any = new Date(`2018/5/15 ${TiTimeComponent.addColon(time)}`);\r\n\r\n        // any类型是为了防止编译报错 Date类型不能和string类型比较\r\n        return !(String(date) === 'Invalid Date');\r\n    }\r\n\r\n    /**\r\n     * @description: hh/HH/mm/ss 时间格式时，显示的值处理成2位，不足2位补0\r\n     * @param: num : 各个时间显示框的数值\r\n     * @param: length : 需要处理之后的长度\r\n     */\r\n    private static addZero(num: number, length: number): string {\r\n        const zeroNum: string = `00${num}`;\r\n\r\n        return zeroNum.substr(zeroNum.length - length, length);\r\n    }\r\n    /**\r\n     * @description newVal参数为合法值时返回newVal，否则返回defaultValue参数\r\n     * @param: newVal:新值\r\n     * @param: defaultValue:默认值\r\n     */\r\n    private static verifyTime(newVal: string, defaultValue: string): string {\r\n        return TiTimeComponent.isValidTime(newVal) ? newVal : defaultValue;\r\n    }\r\n    /**\r\n     * @description 比较value1和value2两个时间值大小.value1 < value2时，返回true；否则返回false  ；\r\n     * @param: value1:比较的前一个值\r\n     * @param: value2:比较的后一个值\r\n     */\r\n    private static isSmaller(value1: string, value2: string): boolean {\r\n        return Date.parse(`2018/5/15 ${TiTimeComponent.addColon(value1)}`) < Date.parse(`2018/5/15 ${TiTimeComponent.addColon(value2)}`);\r\n    }\r\n\r\n    /**\r\n     * @description 比较value1和value2两个时间值大小.value1 > value2时，返回true；否则返回false  ；\r\n     * @param: value1:比较的前一个值\r\n     * @param: value2:比较的后一个值\r\n     */\r\n    private static isBigger(value1: string, value2: string): boolean {\r\n        return Date.parse(`2018/5/15 ${TiTimeComponent.addColon(value1)}`) > Date.parse(`2018/5/15 ${TiTimeComponent.addColon(value2)}`);\r\n    }\r\n\r\n    /**\r\n     * @description 比较value1和value2两个时间值大小.value1 <= value2时，返回true；否则返回false  ；\r\n     * @param: value1:比较的前一个值\r\n     * @param: value2:比较的后一个值\r\n     */\r\n    private static isSmallerOrEqual(value1: string, value2: string): boolean {\r\n        return Date.parse(`2018/5/15 ${TiTimeComponent.addColon(value1)}`) <= Date.parse(`2018/5/15 ${TiTimeComponent.addColon(value2)}`);\r\n    }\r\n\r\n    /**\r\n     * @description 比较value1和value2两个时间值大小.value1 >= value2时，返回true；否则返回false  ；\r\n     * @param: value1:比较的前一个值\r\n     * @param: value2:比较的后一个值\r\n     */\r\n    private static isBiggerOrEqual(value1: string, value2: string): boolean {\r\n        return Date.parse(`2018/5/15 ${TiTimeComponent.addColon(value1)}`) >= Date.parse(`2018/5/15 ${TiTimeComponent.addColon(value2)}`);\r\n    }\r\n\r\n    // 组件声明周期钩子--start\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        // 初始化变量\r\n        this.initVariable();\r\n        // 最大最小值校验\r\n        this.validateMaxAndMin();\r\n\r\n        this.showTimeWithFormat();\r\n\r\n        this.setTimeOptions();\r\n\r\n        this.placeholder = this.format;\r\n\r\n        this.zone.runOutsideAngular(() => { // 避免不停触发变化检测\r\n            // document上的Ecs快捷键功能\r\n            this.documentKeydownListener = this.renderer2.listen(this.document, 'keydown', this.keydownHandlerFn);\r\n        });\r\n    }\r\n\r\n    private setTimeOptions() {\r\n        this.hourOptions = this.setOptions(24, 'hour');\r\n        this.minuteOptions = this.setOptions(60, 'minute');\r\n        this.secondOptions = this.setOptions(60, 'second');\r\n    }\r\n    // 根据格式format判断面板展示情况\r\n    private showTimeWithFormat(): void {\r\n        // 纯小时\r\n        if (this.format.indexOf('m') === -1) {\r\n            this.onlyHour = true;\r\n        } else if (this.format.indexOf('s') === -1) { // 仅时分\r\n            this.onlyHourMinute = true;\r\n        }\r\n    }\r\n\r\n    private initVariable(): void {\r\n        // 1. 时间格式校验\r\n        this.format = Util.isString(this.format) ? this.format : this.localeWords.tiLocaleDate['time'];\r\n    }\r\n\r\n    private validateMaxAndMin(): void {\r\n        const defaultMaxValue: string = '23:59:59';\r\n        const defaultMinValue: string = '00:00:00';\r\n        // 最大值合法性校验\r\n        this.max = TiTimeComponent.verifyTime(this.max, defaultMaxValue);\r\n        // 最小值合法性校验\r\n        this.min = TiTimeComponent.verifyTime(this.min, defaultMinValue);\r\n        // 最大最小值矛盾时，设置为默认值\r\n        if (TiTimeComponent.isSmaller(this.max, this.min)) {\r\n            this.min = defaultMinValue;\r\n            this.max = defaultMaxValue;\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        super.ngOnChanges(changes);\r\n        // 1.0 minValue监控\r\n        if (changes['min'] && !changes['min'].isFirstChange()) {\r\n            // 新minValue值非法时，恢复到之前值\r\n            if (!this.isValidMinValue(changes['min'].currentValue)) {\r\n                this.min = changes['min'].previousValue;\r\n\r\n                return;\r\n            }\r\n            // 对value值进行最小值校验\r\n            setTimeout(()=> {\r\n                if (TiTimeComponent.isValidTime(this.model) && TiTimeComponent.isSmaller(this.model, this.min)) {\r\n                    this.model = this.min;\r\n                    this.formatValue();\r\n                }\r\n                this.setDisableData();\r\n            }, 0);\r\n        }\r\n        // 2.0 maxValue监控\r\n        if (changes['max'] && !changes['max'].isFirstChange()) {\r\n            // 新maxValue值非法时，恢复到之前值\r\n            if (!this.isValidMaxValue(changes['max'].currentValue)) {\r\n                this.max = changes['max'].previousValue;\r\n\r\n                return;\r\n            }\r\n            // 对value值进行最小值校验\r\n            setTimeout(()=> {\r\n                if (TiTimeComponent.isValidTime(this.model) && TiTimeComponent.isBigger(this.model, this.max)) {\r\n                    this.model = this.max;\r\n                    this.formatValue();\r\n                }\r\n                this.setDisableData();\r\n            }, 0);\r\n        }\r\n        // 3.0 format监控\r\n        if (changes['format'] && !changes['format'].isFirstChange()) {\r\n            // 新format值非法时，恢复到之前值\r\n            if (!Util.isString(changes['format'].currentValue)) {\r\n                this.format = changes['format'].previousValue;\r\n\r\n                return;\r\n            }\r\n            this.showTimeWithFormat();\r\n            if (TiTimeComponent.isValidTime(this.model)) {\r\n                this.formatValue();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        super.ngAfterViewInit();\r\n        setTimeout(()=> {\r\n            this.dominatorCom = this.containerRef.nativeElement;\r\n            this.setFocusableElems([this.dominatorCom]\r\n            .concat(this.dropCom.nativeElement)\r\n            .concat(this.textCom.nativeElement)\r\n            .concat(this.inputEle.nativeElement)\r\n            .concat(this.buttonEle.nativeElement));\r\n        }, 0);\r\n\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        super.ngOnDestroy();\r\n        if (this.documentKeydownListener) {\r\n            this.documentKeydownListener();\r\n        }\r\n    }\r\n    // 组件声明周期钩子--end\r\n\r\n    // 实现ControlValueAccessor接口\r\n    /**\r\n     * @ignore\r\n     */\r\n    writeValue(value: any): void {\r\n        super.writeValue(value);\r\n        if (value === '' || !this.isValidValue(value)) {\r\n            this.model = '';\r\n            this.buttonDisabled = true;\r\n            this.setDisableData();\r\n\r\n            return;\r\n        }\r\n        this.buttonDisabled = false;\r\n        this.model = value;\r\n        this.formatValue();\r\n        this.setDisableData();\r\n    }\r\n    // 实现ControlValueAccessor接口--end\r\n    /**\r\n     * @ignore\r\n     * @description: 组件整体失焦之后处理函数\r\n     */\r\n    public onBlur(): void {\r\n         // 失焦后下拉关闭\r\n        this.hidePanel();\r\n        this.inputValue = this.model;\r\n        this.setDisableData();\r\n        this.setSelectVal();\r\n        this.getScrollData();\r\n    }\r\n    // 面板延迟200ms关闭,用户输入新值之后，直接点击确认按钮关闭面板时，\r\n    // 面板内部选中项先刷新 再关闭 200ms的延迟 用户可以看到这样一个视觉的过程\r\n    // 200ms通过本地用例，跟规范侧共同决定的一个延时数值\r\n    private hidePanel() {\r\n        setTimeout(()=> {\r\n            this.dropCom.hide();\r\n            // 初始化数据，保证有时间值时，初次打开数据定位在顶部\r\n            this.hourScroll = -1;\r\n            this.minuteScroll = -1;\r\n            this.secondScroll = -1;\r\n        }, 200);\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 点击dominator打开面板\r\n     */\r\n    public onShowClick(): void {\r\n        if(this.disabled) {\r\n            return;\r\n        }\r\n        if (this.isClearClick) {\r\n            this.isClearClick = false;\r\n            return;\r\n        }\r\n        this.getScrollData();\r\n        this.dropCom.show();\r\n        this.textCom.nativeElement.focus();\r\n        this.buttonDisabled = !this.model;\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 点击确认按钮关闭面板\r\n     */\r\n    public okClickFn(): void {\r\n        this.timeValue = this.inputValue;\r\n        this.model = this.inputValue;\r\n        // 记录旧值，当输入非法时，返回之前合法值\r\n        this.oldInputValue = this.inputValue;\r\n        this.containerRef.nativeElement.focus();\r\n        this.hidePanel();\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 时间面板点击选择事件\r\n     * @param val\r\n     * @param title\r\n     */\r\n    public onSelect(val: any, title: string): void {\r\n        // 禁用状态\r\n        if (val.disabled) {\r\n            return;\r\n        }\r\n        const arr = this.onlyHour ? ['00'] : this.onlyHourMinute ? [\"00\", \"00\"] : [\"00\", \"00\", \"00\"];\r\n        const timeArr = this.inputValue === '' ? arr : this.inputValue.split(':');\r\n        switch (title) {\r\n            case 'hour':\r\n                timeArr[0] = val.label;\r\n                this.hourScroll = val.label * 30;\r\n                break;\r\n            case 'minute':\r\n                timeArr[1] = val.label;\r\n                this.minuteScroll = val.label * 30;\r\n                break;\r\n            case 'second':\r\n                timeArr[2] = val.label;\r\n                this.secondScroll = val.label * 30;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.inputValue = timeArr.join(':');\r\n        this.setSelectVal();\r\n        this.oldInputValue = this.inputValue;\r\n        this.buttonDisabled = false;\r\n        this.setDisableData();\r\n    }\r\n\r\n    private setSelectVal(): void {\r\n        if (!TiTimeComponent.isValidTime(this.inputValue)) {\r\n            this.selectedHour = null;\r\n            this.selectedMinute = null;\r\n            this.selectedSecond = null;\r\n            return;\r\n        }\r\n        if (TiTimeComponent.isSmaller(this.inputValue, this.min)) {\r\n            this.inputValue = this.min;\r\n        }\r\n        if (TiTimeComponent.isBigger(this.inputValue, this.max)) {\r\n            this.inputValue = this.max;\r\n        }\r\n        const newtimeArr = this.inputValue.split(':');\r\n        const hourVal: string =  TiTimeComponent.addZero(Number(newtimeArr[0]), 2);\r\n        const minuteVal: string =  TiTimeComponent.addZero(Number(newtimeArr[1]), 2);\r\n        const secondVal: string =  TiTimeComponent.addZero(Number(newtimeArr[2]), 2);\r\n        this.selectedHour = this.getSelectedVal(this.hourOptions, hourVal);\r\n        this.selectedMinute = this.getSelectedVal(this.minuteOptions, minuteVal);\r\n        this.selectedSecond = this.getSelectedVal(this.secondOptions, secondVal);\r\n        // 失焦之后，个位的数字需补零\r\n        if (this.onlyHour) {\r\n            this.inputValue = hourVal;\r\n        } else if (this.onlyHourMinute) {\r\n            this.inputValue = hourVal + ':' + minuteVal;\r\n        } else {\r\n            this.inputValue = hourVal + ':' + minuteVal + ':' + secondVal;\r\n        }\r\n        this.getScrollData();\r\n    }\r\n\r\n    private keydownHandlerFn = (event: KeyboardEvent): void => {\r\n        if (event.keyCode === TiKeymap.KEY_ESCAPE) {\r\n            this.hidePanel();\r\n        }\r\n    }\r\n    /**\r\n     * 组件快捷键处理tab键 enter键\r\n     */\r\n    @HostListener('keydown', ['$event']) public onKeydown(event: KeyboardEvent): void {\r\n        switch (event.keyCode) {\r\n            case TiKeymap.KEY_ENTER : // ENTER键(大键盘)\r\n            case TiKeymap.KEY_NUMPAD_ENTER : // ENTER键(数字小键盘)\r\n                this.responseEnter();\r\n                break;\r\n            default :\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * enter键的功能：如果面板展开不处理，面板收起则展开，设置datePanel指令的接口值\r\n     */\r\n    public responseEnter(): void {\r\n        if (this.dropCom.isShow) {\r\n            return;\r\n        }\r\n        this.getScrollData();\r\n        // 时间面板展开\r\n        this.dropCom.show();\r\n        this.textCom.nativeElement.focus();\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 输入为中文冒号时，自动转换为英文冒号\r\n     * @param val\r\n     */\r\n    public onInputChangeFn(val: any) {\r\n        if(!Util.isEmptyString(val)) {\r\n            let value = val;\r\n            value = value.replace('：', ':');\r\n            this.inputValue = value;\r\n        } else {\r\n            this.buttonDisabled = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 时间框enter事件\r\n     */\r\n    public timeKeydownFn(event: KeyboardEvent, val: string): void {\r\n        if (event.keyCode === TiKeymap.KEY_ENTER  || event.keyCode === TiKeymap.KEY_NUMPAD_ENTER) {\r\n            this.timeBlur(val);\r\n        }\r\n    }\r\n\r\n    public timeBlur(val: string): void {\r\n        if (val === '') {\r\n            this.buttonDisabled = true;\r\n            this.inputValue = '';\r\n            this.oldInputValue = this.inputValue;\r\n            this.getScrollData();\r\n            return;\r\n        }\r\n        // 区分中英文冒号\r\n        const reg: RegExp = new RegExp('[\\\\:\\\\：]');\r\n        let timeArr: Array<any> = val.split(reg);\r\n        const formatArr: Array<any> = this.format.split(':');\r\n        // 用户输入与format不匹配时，按照非法字符处理\r\n        if (timeArr.length !== formatArr.length) {\r\n            this.inputValue = this.oldInputValue;\r\n            return;\r\n        }\r\n        timeArr.forEach((item: any) => {\r\n            if ((item < 0 || item > 59) || isNaN(Number(item) ) || parseInt(item, 10) !== Number(item)) {\r\n                this.inputValue = this.oldInputValue;\r\n                if(Util.isEmptyString(this.inputValue)){\r\n                    this.buttonDisabled = false;\r\n                }\r\n                return;\r\n            }\r\n        });\r\n        this.oldInputValue = this.inputValue;\r\n        this.buttonDisabled = false;\r\n        this.setSelectVal();\r\n        this.getScrollData();\r\n        this.setDisableData();\r\n    }\r\n    // 获取滚动值\r\n    private getScrollData() {\r\n        if (Util.isEmptyString(this.inputValue)) {\r\n            this.hourScroll = 0;\r\n            this.minuteScroll = 0;\r\n            this.secondScroll = 0;\r\n        } else {\r\n            const reg: RegExp = new RegExp('[\\\\:\\\\：]');\r\n            const timeArr: Array<any> = this.inputValue.split(reg);\r\n            this.hourScroll = timeArr[0] * 30;\r\n            this.minuteScroll = timeArr[1] * 30;\r\n            this.secondScroll = timeArr[2] * 30;\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 清除\r\n     */\r\n    public onIconClearClick(): void {\r\n        if (this.disabled || !this.clearIcon) {\r\n            return;\r\n        }\r\n        this.inputValue = '';\r\n        this.oldInputValue = '';\r\n        this.timeValue = '';\r\n        this.model = '';\r\n        this.selectedHour = null;\r\n        this.selectedMinute = null;\r\n        this.selectedSecond = null;\r\n        this.buttonDisabled = true;\r\n        this.isClearClick = true;\r\n        this.setDisableData();\r\n    }\r\n\r\n    private getSelectedVal(options: Array<any>, val: any) {\r\n        return options.find((item: any) => {\r\n            if (!item.disabled && item.label === val) {\r\n              return  item;\r\n            } else {\r\n                return null;\r\n            }\r\n        })\r\n    }\r\n    private setOptions(num: number, labelKey?: string): Array<any> {\r\n        const options: Array<any> = [];\r\n        for (let i: number = 0; i < num; i++) {\r\n            options[i] = {\r\n                label: TiTimeComponent.addZero(i, 2),\r\n                disabled: false\r\n            };\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    private setDisableData() {\r\n        if (this.max === '23:59:59' && this.min === '00:00:00') {\r\n            return false;\r\n        }\r\n        const maxArr = this.max.split(':');\r\n        const minArr = this.min.split(':');\r\n        const timeArr = this.inputValue.split(':');\r\n        // 根据最大最小值判定小时禁用项\r\n        this.hourOptions.forEach((item: any)=> {\r\n            item.disabled = Number(item.label) < Number(minArr[0]) || Number(item.label) > Number(maxArr[0]);\r\n        })\r\n        // 最小小时情况,需考虑分钟禁用\r\n        if (Number(timeArr[0]) === Number(minArr[0])) {\r\n            this.minuteOptions.forEach((minuteItem: any) => {\r\n                minuteItem.disabled = Number(minuteItem.label) < Number(minArr[1]);\r\n            })\r\n        }\r\n        // 最大小时情况,需考虑分钟禁用\r\n        if (Number(timeArr[0]) === Number(maxArr[0])) {\r\n            this.minuteOptions.forEach((minuteItem: any) => {\r\n                minuteItem.disabled = Number(minuteItem.label) >  Number(maxArr[1]);\r\n            })\r\n        }\r\n        // 最小时分情况,需考虑秒数禁用\r\n        if (Number(timeArr[0]) === Number(minArr[0]) && Number(timeArr[1]) === Number(minArr[1])) {\r\n            this.secondOptions.forEach((secondItem: any)=> {\r\n                secondItem.disabled  = Number(secondItem.label) < Number(minArr[2]);\r\n            })\r\n        } else if (Number(timeArr[0]) === Number(maxArr[0]) && Number(timeArr[1]) === Number(maxArr[1])) { // 最大时分情况,需考虑秒数禁用\r\n            this.secondOptions.forEach((secondItem: any)=> {\r\n                secondItem.disabled  = Number(secondItem.label) > Number(maxArr[2]);\r\n            })\r\n        } else {\r\n            this.secondOptions.forEach((secondItem: any)=> {\r\n                secondItem.disabled  = false;\r\n            })\r\n        }\r\n\r\n        // 非临界值(最大最小小时)时需复原\r\n        if (Number(timeArr[0]) !== Number(minArr[0]) && Number(timeArr[0]) !== Number(maxArr[0])) {\r\n            this.minuteOptions.forEach((minuteItem: any) => {\r\n                minuteItem.disabled = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @ignore\r\n    * 时间选择框部分鼠标移出时去除hover样式\r\n    */\r\n    public onMouseleave(listCom: TiListComponent) {\r\n        listCom.hoverOption = null;\r\n    }\r\n    // 组件交互方法集合--end\r\n\r\n    // 内部公共方法集合--start\r\n    /**\r\n     * @description:最大值最小值检验\r\n     */\r\n    private validateValue(): void {\r\n        // 最小值校验\r\n        if (TiTimeComponent.isSmaller(this.model, this.min)) {\r\n            this.model = this.min;\r\n        }\r\n        // 最大值校验\r\n        if (TiTimeComponent.isBigger(this.model, this.max)) {\r\n            this.model = this.max;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 时间格式化及时间各个框显示值设置\r\n     */\r\n    private formatValue(): void {\r\n        // 格式化value\r\n        const date: Date = new Date(`2018/5/15 ${TiTimeComponent.addColon(this.model)}`);\r\n        const formatStr: string = TiLocaleFormat.formatTime(date, this.format);\r\n        if (this.model !== formatStr) {\r\n            this.model = formatStr;\r\n        }\r\n        this.timeValue = this.model;\r\n        this.inputValue = this.model;\r\n        this.oldInputValue = this.inputValue;\r\n        const timeArr: Array<any> = this.inputValue.split(':');\r\n        this.selectedHour = this.getSelectedVal(this.hourOptions, TiTimeComponent.addZero(Number(timeArr[0]), 2));\r\n        this.selectedMinute = this.getSelectedVal(this.minuteOptions, TiTimeComponent.addZero(Number(timeArr[1]), 2));\r\n        this.selectedSecond = this.getSelectedVal(this.secondOptions, TiTimeComponent.addZero(Number(timeArr[2]), 2));\r\n    }\r\n    /**\r\n     * @description: 校验动态更新的minValue是否是合法值\r\n     * @param: minValue:动态更新的传入的minValue\r\n     */\r\n    private isValidMinValue(minValue: string): boolean {\r\n        return TiTimeComponent.isValidTime(minValue) && TiTimeComponent.isSmallerOrEqual(minValue, this.max);\r\n    }\r\n\r\n    /**\r\n     * @description: 校验动态更新的maxValue是否是合法值\r\n     * @param: maxValue:动态更新的传入的maxValue\r\n     */\r\n    private isValidMaxValue(maxValue: string): boolean {\r\n        return TiTimeComponent.isValidTime(maxValue) && TiTimeComponent.isBiggerOrEqual(maxValue, this.min);\r\n    }\r\n\r\n    /**\r\n     * @description: 判断动态更新写入组件的value值是否是一个合法值\r\n     * @param: value 动态更新写入组件的value值\r\n     */\r\n    private isValidValue(value: string): boolean {\r\n        return TiTimeComponent.isValidTime(value) &&\r\n                TiTimeComponent.isBiggerOrEqual(value, this.min) &&\r\n                TiTimeComponent.isSmallerOrEqual(value, this.max);\r\n    }\r\n    // 内部公共方法集合--end\r\n}\r\n","import { FormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiTimeComponent } from './TiTimeComponent';\r\nimport { TiDateDominatorModule } from '../datedominator/TiDateDominatorModule';\r\nimport { TiDropModule } from '../drop/TiDropModule';\r\nimport { TiListModule } from '../list/TiListModule';\r\nimport { TiLocaleModule } from '../../locale/TiLocaleModule';\r\nimport { TiTextModule } from '../text/TiTextModule';\r\nimport { TiButtonModule } from '../button/TiButtonModule';\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        TiButtonModule,\r\n        TiDropModule,\r\n        TiListModule,\r\n        TiDateDominatorModule,\r\n        TiLocaleModule,\r\n        TiTextModule\r\n    ],\r\n    exports: [ TiTimeComponent ],\r\n    declarations: [ TiTimeComponent ]\r\n})\r\n\r\nexport class TiTimeModule {\r\n}\r\nexport { TiTimeComponent } from './TiTimeComponent';\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { TiDropModule } from '../drop/TiDropModule';\r\n\r\nimport { TiLocaleModule } from '../../locale/TiLocaleModule';\r\nimport { TiDatetimeComponent } from './TiDatetimeComponent';\r\nimport { TiButtonModule } from '../button/TiButtonModule';\r\nimport { TiDatePanelModule } from '../datepanel/TiDatePanelModule';\r\nimport { TiDateEditModule } from '../dateedit/TiDateEditModule';\r\nimport { TiDateDominatorModule } from '../datedominator/TiDateDominatorModule';\r\nimport { TiTextModule } from '../text/TiTextModule';\r\nimport { TiTimeModule } from '../time/TiTimeModule';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TiLocaleModule,\r\n    TiDropModule,\r\n    TiButtonModule,\r\n    TiDatePanelModule,\r\n    TiDateEditModule,\r\n    TiTextModule,\r\n    TiTimeModule,\r\n    TiDateDominatorModule\r\n  ],\r\n  exports: [TiDatetimeComponent],\r\n  declarations: [TiDatetimeComponent]\r\n})\r\n\r\nexport class TiDatetimeModule {\r\n}\r\nexport { TiDatetimeComponent } from './TiDatetimeComponent';\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    NgZone,\r\n    Renderer2,\r\n    SimpleChanges\r\n} from '@angular/core';\r\nimport { TiDateUtil, TiKeymap, Util } from '../../utils/Util';\r\nimport { TiLocaleFormat, TiLocale } from '../../locale/TiLocaleModule';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiDateBaseComponent, TiDateCustomizeOptions, TiDatetimeFormat, TiDateValue, TimeOptions } from '../datebase/TiDateBaseModule';\r\n/**\r\n * DatetimeRange日期时间范围组件\r\n *\r\n * Datetime组件提供了一种方便的显示和设置日期时间范围的方式。\r\n *\r\n * <example-url>../tiny3demo/#/datetimerange/datetimerange-all</example-url>\r\n */\r\n@Component({\r\n   selector: 'ti-datetime-range',\r\n   templateUrl: './datetimerange.html',\r\n   styleUrls: ['./datetimerange.less'],\r\n   host: {\r\n    '[class.ti3-datetime-range-input-container]': 'true',\r\n    '(blur)': 'hidePanel()'\r\n},\r\n   providers: [ TiFormComponent.getValueAccessor(TiDatetimeRangeComponent) ]\r\n})\r\n\r\nexport class TiDatetimeRangeComponent extends TiDateBaseComponent {\r\n\r\n    /**\r\n     * @ignore\r\n     * 保存model值\r\n     */\r\n    public oldModel: TiDateValue = {\r\n        begin: null,\r\n        end: null,\r\n    };\r\n    /**\r\n     * @ignore\r\n     * 对应Time组件的接口属性\r\n     */\r\n    public beginTime: TimeOptions = {};\r\n    /**\r\n     * @ignore\r\n     * 对应Time组件的接口属性\r\n     */\r\n    public endTime: TimeOptions = {};\r\n    /**\r\n     * @ignore\r\n     */\r\n    public beginTimeDisabled: boolean;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public endTimeDisabled: boolean;\r\n    /**\r\n     * @ignore\r\n     * 时间日期的format\r\n     */\r\n    public dominatorFormat: string;\r\n    /**\r\n     * @ignore\r\n     * 日期显示格式: Datetime组件的format为DatetimeFormat类型\r\n     */\r\n    public format: TiDatetimeFormat;\r\n    /**\r\n     * @ignore\r\n     * 标记date/datetime的类型\r\n     */\r\n    public isDatetime: boolean = true;\r\n    /**\r\n     * @ignore\r\n     * 用于标记是不是range\r\n     */\r\n    public isRange: boolean = true;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public oldBegintimeValue: any = '';\r\n    /**\r\n     * @ignore\r\n     */\r\n    public oldEndtimeValue: any = '';\r\n    /**\r\n     * @ignore\r\n     * placeholder提示文本\r\n     */\r\n    public placeholder: string = `${TiLocale.getLocaleWords().tiDate.rangeBeginLabel} ─ ${TiLocale.getLocaleWords().tiDate.rangeEndLabel}`;\r\n\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        // 将日期与时间的format拼接为一个字符串\r\n        this.dominatorFormat = `${this.format.date} ${this.format.time}`;\r\n        this.oldFormat = this.format;\r\n        // model有值时，需要记录初始时间值\r\n        if (Util.isUndefined(this.model)) {\r\n            return;\r\n        }\r\n        if (this.model !== null) {\r\n            setTimeout((): void => {\r\n                this.oldBegintimeValue = TiDateUtil.getTimeStr(this.model.begin);\r\n                this.oldEndtimeValue = TiDateUtil.getTimeStr(this.model.end);\r\n            }, 0);\r\n        }\r\n    }\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // 验证最大值最小值，为了处理最大值和最小值从合法日期变为undefined 的情景\r\n        if ((changes['max'] && !changes['max'].firstChange) || (changes['min'] && !changes['min'].firstChange)) {\r\n            this.validateMinAndMax(this.config, this.isDatetime);\r\n        }\r\n    }\r\n\r\n    ngDoCheck(): void {\r\n        if (!Util.isUndefined(this.model)) {\r\n            // 监听model值的变化\r\n            this.setModel(this.isDatetime);\r\n\r\n            // 监听format变化\r\n            this.setFormat();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 确认按钮事件处理\r\n     */\r\n    public onOkClick(): void {\r\n        if (this.inValidValue) {\r\n            return;\r\n        }\r\n\r\n        const beginDateStr: string = TiDateUtil.getDateStr(this.datePanel['value']['begin']);\r\n        // 中间空格误删\r\n        const beginValue: Date = new Date(`${beginDateStr} ${TiDateUtil.addColon(this.beginTime['value'])}`);\r\n\r\n        const endDateStr: string = TiDateUtil.getDateStr(this.datePanel['value']['end']);\r\n        // 中间空格误删\r\n        const endValue: Date = new Date(`${endDateStr} ${TiDateUtil.addColon(this.endTime['value'])}`);\r\n\r\n        const newModel: TiDateValue = {\r\n            begin: beginValue,\r\n            end: endValue\r\n        };\r\n\r\n        // 新旧值不同更新model值\r\n        if (!this.rangeValueIsEqual(this.model, newModel, this.isDatetime)) {\r\n            this.model = newModel;\r\n        }\r\n\r\n        this.hideDrop();\r\n\r\n        this.okClick.emit(this.model);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * model值的合法性判断\r\n     */\r\n    public isValidValue(value: TiDateValue): boolean {\r\n        if (value === null) {\r\n            return true;\r\n        }\r\n\r\n        if (TiDateUtil.isDate(value['begin']) && TiDateUtil.isDate(value['end']) &&\r\n            value['begin'].getTime() <= value['end'].getTime() &&\r\n            TiDateUtil.isBetweenMaxAndmin(value['begin'], this.min, this.max) &&\r\n            TiDateUtil.isBetweenMaxAndmin(value['end'], this.min, this.max)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 将value转换成format接口格式的字符串\r\n     */\r\n    public formatValue(): void {\r\n        if (this.model === null || (this.model.begin === null && this.model.end === null)) {\r\n            this.inputValue = '';\r\n        } else {\r\n            // 空格误删\r\n            const format: string = `${this.format.date} ${TiDateUtil.addAmPm(this.format.time)}`;\r\n            const begin: string = TiLocaleFormat.formatDateTime(this.model.begin, format);\r\n            const end: string = TiLocaleFormat.formatDateTime(this.model.end, format);\r\n            // 注意：中划线用的是制表符中的中划线，与正常的中线区分开2017-2-12 - 2018-3-20\r\n            this.inputValue = `${begin} ─ ${end}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 配置时间日期面板接口\r\n     */\r\n    public setPickerDate(): void {\r\n        // 设置datepanel指令接口\r\n        this.setDatePanelOptions();\r\n\r\n        // 设置time指令接口\r\n        this.setTimeOptions();\r\n\r\n        // 设置OK按钮状态\r\n        this.setOkBtnState();\r\n        this.beginTimeDisabled = this.model === null ? true : false;\r\n        this.endTimeDisabled = this.model === null ? true : false;\r\n        this.timeEditDisabled = this.beginTimeDisabled && this.endTimeDisabled;\r\n    }\r\n\r\n    // 设置datepanel指令接口\r\n    private setDatePanelOptions(): void {\r\n        let value: TiDateValue;\r\n        if (this.model === null) {\r\n             value = {\r\n                begin: null,\r\n                end: null\r\n             };\r\n        } else {\r\n            value = {\r\n                begin: this.model.begin,\r\n                end: this.model.end\r\n            };\r\n        }\r\n\r\n        this.datePanel = {\r\n            value,\r\n            max: this.max,\r\n            min: this.min,\r\n            format : this.format,\r\n            picker: 'day',\r\n            select: (): void => {\r\n                const obj: any = {\r\n                    value: this.datePanel.value[this.focusedPosition],\r\n                    focusedPosition: this.focusedPosition\r\n                };\r\n                this.dayClick.emit(obj);\r\n                // 选择开始日期\r\n                if (this.focusedPosition === 'begin') {\r\n                    if (this.beginTimeDisabled) {\r\n                        this.beginTime['value'] = TiDateUtil.getTimeStr(new Date());\r\n                    }\r\n                    this.beginTimeDisabled = false;\r\n                    this.timeEditDisabled = false;\r\n                    this.dateEditComs.last.focus();\r\n                    this.focusedPosition = 'end';\r\n                } else {\r\n                    if (this.endTimeDisabled) {\r\n                        this.endTime['value'] = TiDateUtil.getTimeStr(new Date());\r\n                    }\r\n                    this.endTimeDisabled = false;\r\n                    if (this.focusedPosition === 'end' && this.datePanel.value.begin === null) {\r\n                        this.focusedPosition = 'begin';\r\n                        this.dateEditComs.first.focus();\r\n                    }\r\n                }\r\n                this.validTime();\r\n                this.setOkBtnState();\r\n            },\r\n            selectTimeFn: (obj: any): void => {\r\n                this.setTimeFn(obj, this.beginTime, this.endTime);\r\n                this.setOkBtnState();\r\n                // 选择结束时分秒 焦点移动到结束时间框\r\n                if (obj.timeOption.includes('end')) {\r\n                    this.textComs.last.nativeElement.focus();\r\n                } else {\r\n                // 选择开始时分秒 焦点移动到开始时间框\r\n                    this.textComs.first.nativeElement.focus();\r\n                }\r\n            }\r\n         };\r\n    }\r\n\r\n    private validTime(): void {\r\n        const beginDateStr: string = this.datePanel.value.begin ? TiDateUtil.getDateStr(this.datePanel.value.begin) : '';\r\n        const beginDateTime: Date = new Date(` ${beginDateStr} ${this.beginTime.value}`);\r\n        const endDateStr: string = this.datePanel.value.end ? TiDateUtil.getDateStr(this.datePanel.value.end) : '';\r\n        const endDateTime: Date = new Date(` ${endDateStr} ${this.endTime.value}`);\r\n        if (TiDateUtil.isSmaller(beginDateTime, this.min)) {\r\n            this.beginTime.value = TiDateUtil.getTimeStr(this.min);\r\n        }\r\n        if (TiDateUtil.isBigger(beginDateTime, this.max)) {\r\n            this.beginTime.value = TiDateUtil.getTimeStr(this.max);\r\n        }\r\n        if (TiDateUtil.isBigger(endDateTime, this.max)) {\r\n            this.endTime.value = TiDateUtil.getTimeStr(this.max);\r\n        }\r\n        this.oldBegintimeValue = this.beginTime['value'];\r\n        this.oldEndtimeValue = this.endTime['value'];\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     *  时间框失焦事件\r\n     */\r\n    public timeBlur(pos: string, val: string): void {\r\n        let timeVal: string = val;\r\n        // 区分中英文冒号\r\n        const reg: RegExp = new RegExp('[\\\\:\\\\：]');\r\n        this.beginTime = JSON.parse(JSON.stringify(this.beginTime));\r\n        this.endTime = JSON.parse(JSON.stringify(this.endTime));\r\n        // 输入区间是否存在小数点，非整数\r\n        let isNotInteger: boolean = false;\r\n        const timeArr: Array<string> = val.split(reg);\r\n        timeArr.forEach((item: string, index: number): void => {\r\n            if (item.length === 1) {\r\n                timeArr[index] = '0' + item;\r\n            }\r\n            if (parseInt(item, 10) !== Number(item)) {\r\n                isNotInteger = true;\r\n            }\r\n        });\r\n        timeVal = timeArr.join(':');\r\n        const dateStr: string = '2020/10/30';\r\n        if (pos === 'begin') {\r\n            this.beginTime.value = timeVal;\r\n            const beginDateVal: Date = new Date(`${TiDateUtil.getDateStr(this.datePanel.value.begin)} ${this.beginTime.value}`);\r\n            const isSmallerThanMin: boolean = TiDateUtil.isSmaller(beginDateVal, this.min);\r\n            const beginDate: Date = new Date(`${dateStr} ${TiDateUtil.addColon(this.beginTime['value'])}`);\r\n            const dateVal: Date = new Date(2020, 10, 30, parseInt(timeArr[0], 10), parseInt(timeArr[1], 10), parseInt(timeArr[2], 10));\r\n            if (String(beginDate) === 'Invalid Date' || String(dateVal) === 'Invalid Date' || timeArr.length > 3 || isNotInteger || !this.isBeginSmallerThanEnd() || isSmallerThanMin) {\r\n                this.beginTime.value = this.oldBegintimeValue;\r\n            } else {\r\n                this.oldBegintimeValue = this.beginTime.value;\r\n            }\r\n        } else {\r\n            this.endTime.value = timeVal;\r\n            const endDateVal: Date = new Date(`${TiDateUtil.getDateStr(this.datePanel.value.end)} ${this.endTime.value}`);\r\n            const isBiggerThanMax: boolean = TiDateUtil.isBigger(endDateVal, this.max);\r\n            const endDate: Date = new Date(`${dateStr} ${TiDateUtil.addColon(this.endTime['value'])}`);\r\n            const dateVal: Date = new Date(2020, 10, 30, parseInt(timeArr[0], 10), parseInt(timeArr[1], 10), parseInt(timeArr[2], 10));\r\n            if (String(endDate) === 'Invalid Date' || String(dateVal) === 'Invalid Date' || timeArr.length > 3 || isNotInteger || !this.isBeginSmallerThanEnd() || isBiggerThanMax) {\r\n                this.endTime.value = this.oldEndtimeValue;\r\n            } else {\r\n                this.oldEndtimeValue = this.endTime.value;\r\n            }\r\n        }\r\n        this.setOkBtnState();\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 时间框enter事件\r\n     */\r\n    public timeKeydown(pos: string, val: string, event: KeyboardEvent): void {\r\n        if (event.keyCode === TiKeymap.KEY_ENTER  || event.keyCode === TiKeymap.KEY_NUMPAD_ENTER) {\r\n            this.timeBlur(pos, val);\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public dateEditBlur(val: any, pos: string): void {\r\n        if (val === null) {\r\n            return;\r\n        }\r\n        if (TiDateUtil.isBetweenMaxAndmin(val, this.min, this.max)) {\r\n            if (pos === 'begin') {\r\n                const inputValue: string = this.dateEditComs.first.nativeElement.firstChild.value;\r\n                if (inputValue === '') {\r\n                    return;\r\n                }\r\n                const beginDateVal: Date = new Date(`${inputValue} ${this.beginTime['value']}`);\r\n                if (TiDateUtil.isDate(this.datePanel.value.end)) {\r\n                    const endDateVal: Date = new Date(`${TiDateUtil.getDateStr(this.datePanel.value.end)} ${this.endTime['value']}`);\r\n                    if (TiDateUtil.isBigger(beginDateVal, endDateVal)) {\r\n                        this.datePanel.value.begin = this.oldBeginValue || this.oldModel && this.oldModel.begin;\r\n                        return;\r\n                    }\r\n                }\r\n                if (this.beginTimeDisabled) {\r\n                    this.beginTime['value'] = TiDateUtil.getTimeStr(new Date());\r\n                }\r\n                this.oldBeginValue = this.datePanel.value.begin;\r\n                this.beginTimeDisabled = false;\r\n            } else {\r\n                if (this.endTimeDisabled) {\r\n                    this.endTime['value'] = TiDateUtil.getTimeStr(new Date());\r\n                }\r\n                const inputValue: string = this.dateEditComs.last.nativeElement.firstChild.value;\r\n                if (inputValue === '') {\r\n                    return;\r\n                }\r\n                const endDateVal: Date = new Date(`${inputValue} ${this.endTime['value']}`);\r\n                if (TiDateUtil.isDate(this.datePanel.value.begin)) {\r\n                    const beginDateVal: Date = new Date(`${TiDateUtil.getDateStr(this.datePanel.value.begin)} ${this.beginTime['value']}`);\r\n                    if (TiDateUtil.isBigger(beginDateVal, endDateVal)) {\r\n                        this.datePanel.value.end = this.oldEndValue || this.oldModel && this.oldModel.end;\r\n                        return;\r\n                    }\r\n                }\r\n                this.oldEndValue = this.datePanel.value.end;\r\n                this.endTimeDisabled = false;\r\n            }\r\n            this.validTime();\r\n            this.setOkBtnState();\r\n            this.timeEditDisabled = this.beginTimeDisabled && this.endTimeDisabled;\r\n        }\r\n\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public onKeydownFn(event: KeyboardEvent, val: any, pos: string): void {\r\n        if (event.keyCode === TiKeymap.KEY_ENTER  || event.keyCode === TiKeymap.KEY_NUMPAD_ENTER) {\r\n            this.dateEditBlur(val, pos);\r\n        }\r\n     }\r\n\r\n    // 设置time指令接口\r\n    private setTimeOptions(): void {\r\n        // 设置开始time指令接口\r\n        this.setBeginTimeOptions();\r\n\r\n        // 设置结束time指令接口\r\n        this.setEndTimeOptions();\r\n    }\r\n\r\n    // 设置开始面板time指令接口\r\n    private setBeginTimeOptions(): void {\r\n        // value接口设置\r\n        this.setBeginTimeValue();\r\n\r\n        // max接口设置\r\n        this.setBeginTimeMaxValue();\r\n\r\n        // min接口设置\r\n        this.setBeginTimeMinValue();\r\n    }\r\n\r\n    // time指令的起始面板的value接口设置 点击删除按钮：如果设置nowDateTime并且值为合法时间日期，时间设置为nowDateTime的时间\r\n    private setBeginTimeValue(): void {\r\n        if (this.model === null || this.model['begin'] === null && this.model['end'] === null) {\r\n            this.beginTime['value'] = '';\r\n\r\n            return;\r\n        }\r\n\r\n        this.beginTime['value'] = TiDateUtil.getTimeStr(this.model.begin);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * time指令的起始面板的max接口设置\r\n     */\r\n    public setBeginTimeMaxValue(): void {\r\n        // 起始日期是最大日期时，时间组件最大值是max接口中的时间；其他情况最大值是\"23:59:59\"\r\n        const value: TiDateValue = this.datePanel['value'];\r\n        this.beginTime['max'] = ((value instanceof Object) && TiDateUtil.isDateEqual(this.max, value['begin'])) ?\r\n                                TiDateUtil.getTimeStr(this.max) : '23:59:59';\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * time指令的起始面板的min接口设置\r\n     */\r\n    public setBeginTimeMinValue(): void {\r\n        // 起始日期是最小日期时，时间组件最小值是min接口中的时间；其他情况最大值是\"00:00:00\"\r\n        const value: TiDateValue = this.datePanel['value'];\r\n        this.beginTime['min'] = ((value instanceof Object) && TiDateUtil.isDateEqual(this.min, value['begin'])) ?\r\n                                TiDateUtil.getTimeStr(this.min) : '00:00:00';\r\n    }\r\n\r\n    // 设置结束面板time指令接口\r\n    private setEndTimeOptions(): void {\r\n        // value接口设置\r\n        this.setEndTimeValue();\r\n\r\n        // max接口设置\r\n        this.setEndTimeMaxValue();\r\n\r\n        // min接口设置\r\n        this.setEndTimeMinValue();\r\n    }\r\n\r\n    // time指令的结束面板的value接口设置\r\n    private setEndTimeValue(): void {\r\n        if (this.model === null || this.model['begin'] === null && this.model['end'] === null) {\r\n            this.endTime['value'] = '';\r\n\r\n            return;\r\n        }\r\n\r\n        this.endTime['value'] = TiDateUtil.getTimeStr(this.model.end);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * time指令的结束面板的max接口设置\r\n     */\r\n    public setEndTimeMaxValue(): void {\r\n        // 结束日期是最大日期时，时间组件最大值是max接口中的时间; 否则，时间组件最大值是\"23:59:59\"\r\n        const value: TiDateValue = this.datePanel['value'];\r\n        this.endTime['max'] = ((value instanceof Object) && TiDateUtil.isDateEqual(this.max, value['end'])) ?\r\n                                TiDateUtil.getTimeStr(this.max) : '23:59:59';\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * time指令的结束面板的min接口设置\r\n     */\r\n    public setEndTimeMinValue(): void {\r\n        // 起始日期是最小日期时，时间组件最小值是min接口中的时间；其他情况最大值是\"00:00:00\"\r\n        const value: TiDateValue = this.datePanel['value'];\r\n        this.endTime['min'] = ((value instanceof Object) && TiDateUtil.isDateEqual(this.min, value['end'])) ?\r\n                                TiDateUtil.getTimeStr(this.min) : '00:00:00';\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 设置确认按钮的状态\r\n     */\r\n    public setOkBtnState(): void {\r\n        // 输入中文冒号之后，及时转换为英文冒号\r\n        const inputvalue: string = this.beginTime.value;\r\n        const inputvalue1: string = this.endTime.value;\r\n        this.beginTime.value = inputvalue.replace('：', ':');\r\n        this.endTime.value = inputvalue1.replace('：', ':');\r\n        // 判断下拉面板中时间区间是否合法\r\n        this.inValidValue = !this.isValidRange();\r\n        if (this.buttonComs) {\r\n            this.setAttr(this.buttonComs.last.nativeElement, 'disabled', this.inValidValue);\r\n            this.setInputStyle(this.inValidValue);\r\n        }\r\n    }\r\n\r\n    // 判断下拉面板中时间区间是否合法\r\n    private isValidRange(): boolean {\r\n        const date: TiDateValue = this.datePanel.value;\r\n\r\n        return (date instanceof Object) && (TiDateUtil.isDate(date.begin)) &&\r\n                (TiDateUtil.isDate(date.end)) && this.isBeginSmallerThanEnd();\r\n    }\r\n\r\n    // 判断起始值和结束值都在最小值最大值之间\r\n    private isBeginSmallerThanEnd(): boolean {\r\n        if (!TiDateUtil.isDate(this.datePanel.value.begin) || !TiDateUtil.isDate(this.datePanel.value.end)) {\r\n            return false;\r\n        }\r\n        // 组装起始日期时间 空格误删\r\n        const begin: Date = new Date(\r\n            `${TiDateUtil.getDateStr(this.datePanel.value.begin)} ${TiDateUtil.addColon(this.beginTime['value'])}`);\r\n        const end: Date = new Date(\r\n            `${TiDateUtil.getDateStr(this.datePanel.value.end)} ${TiDateUtil.addColon(this.endTime['value'])}`);\r\n\r\n        return begin.getTime() <= end.getTime();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TiDropModule } from '../drop/TiDropModule';\r\nimport { TiLocaleModule } from '../../locale/TiLocaleModule';\r\nimport { TiDatetimeRangeComponent } from './TiDatetimeRangeComponent';\r\nimport { TiButtonModule } from '../button/TiButtonModule';\r\nimport { TiDatePanelModule } from '../datepanel/TiDatePanelModule';\r\nimport { TiDateEditModule } from '../dateedit/TiDateEditModule';\r\nimport { TiTimeModule } from '../time/TiTimeModule';\r\nimport { TiTextModule } from '../text/TiTextModule';\r\nimport { TiDateDominatorModule } from '../datedominator/TiDateDominatorModule';\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TiLocaleModule,\r\n    TiDropModule,\r\n    TiButtonModule,\r\n    TiDatePanelModule,\r\n    TiDateEditModule,\r\n    TiTimeModule,\r\n    TiTextModule,\r\n    TiDateDominatorModule\r\n  ],\r\n  exports: [TiDatetimeRangeComponent],\r\n  declarations: [TiDatetimeRangeComponent]\r\n})\r\n\r\nexport class TiDatetimeRangeModule {\r\n}\r\nexport { TiDatetimeRangeComponent } from './TiDatetimeRangeComponent';\r\n","import { Component, ContentChild, ElementRef, EventEmitter, Input, NgZone, Output, Renderer2,\r\n    TemplateRef } from '@angular/core';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiPositionType } from '../../utils/Position';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n    selector: 'ti-dominator',\r\n    templateUrl: './dominator.html',\r\n    styleUrls: ['./dominator.less'],\r\n    host: {\r\n        '[class.ti3-select-dominator-container]': 'true',\r\n        '[class.ti3-multiselect-container]': 'multiple'\r\n    },\r\n    providers: [TiFormComponent.getValueAccessor(TiDominatorComponent)]\r\n})\r\nexport class TiDominatorComponent extends TiFormComponent {\r\n\r\n    @Input() labelKey: string; // 呈现的内容（无删除按钮） TODO: 含删除按钮的场景，扩展为Array\r\n    @Input() placeholder: string; // 组件的预留文本\r\n    @Input() buttonStyle: 'dropdown' |'plus' = 'dropdown'; // 按钮样式 三角or加号 'dropdown' 'plus'\r\n    @Input() multiple: boolean = false; // 单选多选\r\n    @Input() selectedTipPosition: TiPositionType = 'auto'; // 选中项文本超出时tip展开方向\r\n    @Input() dropshow: boolean = false; // 在select组件中使用，记录下拉面板展开状态\r\n    /**\r\n     * @ignore\r\n     * tag的最大宽，TpSearchbox使用\r\n     */\r\n    @Input() tagMaxWidth: string;\r\n    /**\r\n     * 设置dominator最多显示几行，默认2行, multiple为true时生效\r\n     */\r\n    @Input() maxLine: number = 2 ;\r\n    /**\r\n     * 设置是否显示已选项的个数，默认不显示，multiple为true时生效\r\n     *\r\n     * 10.1.0新增\r\n     */\r\n    @Input() showSelectedNumber: boolean = false ;\r\n    /**\r\n     * 设置dominator 内容的最大高度，默认是两行的高度，multiple为true时生效，此参数设置后maxLine接口失效\r\n     */\r\n    @Input() maxHeight: string;\r\n    @Input() type: 'tagsinput' | string;\r\n    /**\r\n     * 单选下拉选择框是否开启清除已选项功能\r\n     *\r\n     * 3.0.8新增\r\n     */\r\n    @Input() clearable: boolean = false;\r\n    @Output() readonly delete: EventEmitter<any> = new EventEmitter<any>();\r\n    /**\r\n     * 当单选下拉选择框开启清除已选项功能时，点击清除按钮时触发\r\n     *\r\n     * 3.0.8新增\r\n     */\r\n    @Output() readonly clear: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @ContentChild(TemplateRef, /* TODO: add static flag */ { static: true }) firstTemplate: TemplateRef<any>;\r\n    @ContentChild('item', /* TODO: add static flag */ { static: true }) itemTemplate: TemplateRef<any>;\r\n    @ContentChild('placeholder') placeholderTemplate: TemplateRef<any>;\r\n\r\n    private isMouseIn: boolean = false;\r\n    constructor(render: Renderer2, hostRef: ElementRef, private zone: NgZone) {\r\n        super(hostRef, render);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        // 每行tag的高度24px, +2 是因为 .ti3-select-dominator-text 元素上下padding\r\n        // tslint:disable-next-line: binary-expression-operand-order\r\n        this.maxHeight = !this.multiple ? '' : this.maxHeight ? this.maxHeight : (this.maxLine * 24 + 2) + 'px';\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        super.ngAfterViewInit();\r\n        this.setFocusableElems([this.nativeElement]);\r\n        this.zone.runOutsideAngular(() => {\r\n            // 内部mousedown事件冒泡至根节点\r\n            this.renderer.listen(this.nativeElement, 'mousedown', (event: MouseEvent): void => {\r\n                if (this.disabled) {\r\n                    event.preventDefault(); // 不能聚焦，不能click\r\n                }\r\n            });\r\n            if (this.clearable && !this.multiple) {\r\n                this.renderer.listen(this.nativeElement, 'mouseenter', (): void => {\r\n                    if (this.disabled || Util.isEmptyString(this.model)) {\r\n                        return;\r\n                    }\r\n                    this.zone.run(() => {\r\n                        this.isMouseIn = true;\r\n                    });\r\n                });\r\n                this.renderer.listen(this.nativeElement, 'mouseleave', (): void => {\r\n                    if (this.isMouseIn) {\r\n                        this.zone.run(() => {\r\n                            this.isMouseIn = false;\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * 兼容旧版：\r\n     * 3.1.2版select只能内嵌一个模板，无命名。\r\n     * 新版可以内嵌2个模板，示例书写要求都命名。\r\n     * 但需要兼容旧版无命名测试用例。\r\n     */\r\n    ngAfterContentInit(): void {\r\n        super.ngAfterContentInit();\r\n        // 如果item模板为空，那么把第一个出现的无标签（无footer等标签）模板作为item\r\n        if (!this.itemTemplate && this.firstTemplate !== this.placeholderTemplate) {\r\n            this.itemTemplate = this.firstTemplate;\r\n        }\r\n    }\r\n    /**\r\n     * 用户点击叉号，删除一个项目\r\n     * @param item\r\n     * @returns\r\n     */\r\n    public onDelete(item: any): void {\r\n        if (item.disabled === true) {\r\n            return;\r\n        }\r\n        // 删除选中\r\n        const index: number = this.model.indexOf(item);\r\n        if (index !== -1) {\r\n            this.model.splice(index, 1);\r\n        }\r\n        this.delete.emit({\r\n            item: item,\r\n            model: this.model\r\n        });\r\n        // 强行向外通知model改变。\r\n        this.model = this.model.concat();\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public onClickClear(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n        this.model = null;\r\n        this.clear.emit();\r\n    }\r\n    public showClear(): boolean {\r\n        return this.clearable && !this.multiple && !this.disabled && (this.isMouseIn || this.focused) && this.model;\r\n    }\r\n}\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\nimport { TiPositionType } from '../../utils/Position';\r\n// TODO: 等待规范统一，可能只保留方形tag\r\n// TODO: hover时是否需要高亮，选中是否高亮。增加selectable接口，表示是否可以选中。\r\n// TODO: 禁用时是否显示叉号？规范和tiny2不一致。\r\n// TODO: 禁用时，不发出原生click事件。\r\n/**\r\n * Tag标签组件，支持显示自定义内容，和删除事件通知。\r\n *\r\n * <example-url>../tiny3demo/#/tag/tag-all</example-url>\r\n */\r\n@Component({\r\n      selector: 'ti-tag',\r\n      templateUrl: './tag.html',\r\n      styleUrls: ['./tag-rect.less'],\r\n      host: {\r\n            '[class.ti3-multiselect-box-cell]': 'true',\r\n            '[class.ti3-multiselect-option-disabled]': 'disabled',\r\n            '[style.maxWidth]': 'maxWidth'\r\n      }\r\n      // styleUrls: ['./tag-rect.less', './tag-arrow.less'],\r\n      // host: {\r\n      //       '[class.ti3-tag-container]': 'shape ===\"arrow\"',\r\n      //       '[class.ti3-multiselect-box-cell]': 'shape ===\"rect\"',\r\n      //       '[class.ti3-multiselect-option-disabled]': 'shape ===\"rect\"&&disabled'\r\n      // }\r\n})\r\nexport class TiTagComponent extends TiBaseComponent {\r\n      // @Input() data; // 数据，作为唯一标识\r\n      /**\r\n       * @ignore\r\n       * 样式：有方形和箭头形两种样式，后面可能废弃箭头样式\r\n       */\r\n      // @Input() shape: 'rect'|'arrow'  = 'rect';\r\n      /**\r\n       * 是否禁用\r\n       */\r\n      @Input() disabled: boolean = false;\r\n      /**\r\n       * 选中项文本超出时tip展开方向\r\n       *\r\n       * 9.0.3新增\r\n       */\r\n      @Input() selectedTipPosition: TiPositionType = 'auto';\r\n      /**\r\n       * @ignore\r\n       * 最大宽度，TpSearchbox 使用\r\n       */\r\n      @Input() maxWidth: string;\r\n      /**\r\n       * 删除Tag时的通知事件\r\n       */\r\n      @Output() readonly delete: EventEmitter<any> = new EventEmitter<any>();\r\n      /**\r\n       * @ignore\r\n       * @param $event\r\n       */\r\n      public onClickDelete($event: MouseEvent): void {\r\n            if (this.disabled) {\r\n                  return;\r\n            }\r\n            $event.stopPropagation(); // 阻止冒泡，阻止了Tag整体的onClick事件，也阻止Tag之外接收到Click。\r\n            this.delete.emit();\r\n      }\r\n      /**\r\n       * 删除Tag标签element\r\n       */\r\n      public remove(): void {\r\n            this.renderer.removeChild(this.renderer.parentNode(this.nativeElement), this.nativeElement);\r\n      }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { TiTagComponent } from './TiTagComponent';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiIconModule\r\n  ],\r\n  exports: [TiTagComponent],\r\n  declarations: [TiTagComponent]\r\n})\r\nexport class TiTagModule {\r\n}\r\nexport { TiTagComponent } from './TiTagComponent';\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiTipModule } from '../../directives/tip/TiTipModule';\r\nimport { TiDominatorComponent } from './TiDominatorComponent';\r\nimport { TiTagModule } from '../tag/TiTagModule';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\nimport { TiLocaleModule } from '../../locale/TiLocaleModule';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiIconModule,\r\n    TiTipModule,\r\n    TiLocaleModule,\r\n    TiTagModule\r\n  ],\r\n  exports: [TiDominatorComponent],\r\n  declarations: [TiDominatorComponent]\r\n})\r\nexport class TiDominatorModule {\r\n}\r\nexport { TiDominatorComponent } from './TiDominatorComponent';\r\n","/*\r\n * @Author: walker\r\n * @Date: 2018-09-06 15:05:42\r\n * @Last Modified by: walker\r\n * @Last Modified time: 2018-09-12 11:03:35\r\n */\r\nimport { Component, ContentChild, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\r\nimport { TiAutocompleteComponent } from '../autocomplete/TiAutocompleteModule';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\n\r\n/**\r\n * 搜索框组件\r\n *\r\n * <example-url>../tiny3demo/#/searchbox/searchbox-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-searchbox',\r\n    templateUrl: './searchbox.html',\r\n    styleUrls: ['./searchbox.less'],\r\n    providers: [TiFormComponent.getValueAccessor(TiSearchboxComponent)],\r\n    host: {\r\n        '[class.ti3-searchbox-container]': 'true',\r\n        '(blur)': 'onBlur()',\r\n        '(focus)': 'onFocus()'\r\n    }\r\n})\r\nexport class TiSearchboxComponent extends TiAutocompleteComponent {\r\n    /**\r\n     * 10.0.4版本新增\r\n     *\r\n     * 是否删除用户搜索内容的首尾空格，不配置时不删除空格\r\n     */\r\n    @Input() trimmed: boolean = false;\r\n    /**\r\n     * search事件，当选中下拉选项/按enter键/点击搜索图标时触发\r\n     *\r\n     * 参数：搜索框文本\r\n     */\r\n    @Output() readonly search: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n    @ContentChild('item', {static: true}) itemTemplate: TemplateRef<any>;\r\n\r\n    /**\r\n     * @ignore\r\n     * input ngModel绑定值\r\n     */\r\n    public inputValue: string;\r\n\r\n    ngOnInit(): void {\r\n        // 默认有清除图标且不可配置\r\n        // 此处先赋值后继承，是由于父类中初始化需要读取clearable的值，设置清除图标\r\n        this.clearable = true;\r\n        super.ngOnInit();\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 组件model更改时，更新input绑定值\r\n     */\r\n    writeValue(model: string) {\r\n        super.writeValue(model);\r\n        this.inputValue = model;\r\n    }\r\n\r\n    // 组件交互方法集合--start\r\n\r\n    /**\r\n     * @ignore\r\n     * enter的触发有两种情况：\r\n     * 1.在input框中输入值，然后按下enter，此时正常执行search\r\n     * 2.在suggestion面板展开的情况下，通过hover选中一项，然后按下enter，\r\n     *   此时的search应该在下拉面板的onDroplistChange回调中触发\r\n     */\r\n    public onInputEnter(): void {\r\n        if (!this.isSearchWithHoverOption()) { // 排除第2中情况\r\n            this.onSearch();\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 搜索事件触发\r\n     */\r\n    public onSearch(): void {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        this.search.emit(this.model);\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 两种情况下触发\r\n     * 1.在suggestion面板展开的情况下，通过hover选中一项，然后按下enter\r\n     * 2.在suggestion面板展开的情况下，通过鼠标点击选中一项\r\n     */\r\n    onDroplistChange(value: { label: string }): void {\r\n        if (value) {\r\n            this.model = this.inputValue = value[this.labelKey] || value.label;\r\n            this.onSearch();\r\n        }\r\n    }\r\n    // 组件交互方法集合--end\r\n\r\n    private isSearchWithHoverOption(): boolean {\r\n        // suggestion面板展开且存在hover选中项的情况\r\n        return this.dropListComp.isShow && this.dropListComp.listCom.hoverOption;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 输入框中内容改变事件\r\n     */\r\n    public onInputChange(value: string): void {\r\n        if (this.disabled || !this.isFocused) {\r\n            return;\r\n        }\r\n\r\n        const searchValue: string = this.trimValue(value);\r\n        this.model = searchValue;\r\n        this.inputChangeObserve.next(searchValue);\r\n    }\r\n\r\n    /**\r\n     * 控制是否删除搜索内容的首尾空格\r\n     */\r\n    private trimValue(value: string): string {\r\n        let searchValue: string = value;\r\n        if (this.trimmed && searchValue) {\r\n            searchValue = searchValue.trim();\r\n        }\r\n\r\n        return searchValue;\r\n    }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { TiSearchboxComponent } from './TiSearchboxComponent';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n    selector: 'ti-searchbox-notsearch',\r\n    templateUrl: './searchbox.html',\r\n    styleUrls: ['./searchbox.less', './searchbox-notsearch.less',  '../text/text.less'],\r\n    providers: [ TiFormComponent.getValueAccessor(TiSearchboxNotsearchComponent) ],\r\n    host: {\r\n        '[class.ti3-searchbox-container]': 'true',\r\n        '(blur)': 'onBlur()',\r\n        '(focus)': 'onFocus()'\r\n    }\r\n    })\r\nexport class TiSearchboxNotsearchComponent extends TiSearchboxComponent {\r\n    onInputEnter(): void {\r\n        event.preventDefault(); // 不做搜索等处理\r\n    }\r\n    onSearch(): void {\r\n        event.preventDefault(); // 点击搜索图标时，阻止默认行为\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiSearchboxComponent } from './TiSearchboxComponent';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TiOverflowModule } from '../../directives/overflow/TiOverflowModule';\r\nimport { TiDroplistModule } from '../droplist/TiDroplistModule';\r\nimport { TiTextModule } from '../text/TiTextModule';\r\nimport { TiSearchboxNotsearchComponent } from './TiSearchboxNotsearchComponent';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\nimport { TiOutlineModule } from '../../directives/outline/TiOutlineModule'\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TiOverflowModule,\r\n    TiDroplistModule,\r\n    TiIconModule,\r\n    TiTextModule,\r\n    TiOutlineModule\r\n  ],\r\n  exports: [TiSearchboxComponent, TiSearchboxNotsearchComponent],\r\n  declarations: [TiSearchboxComponent, TiSearchboxNotsearchComponent]\r\n})\r\nexport class TiSearchboxModule {\r\n}\r\nexport { TiSearchboxComponent } from './TiSearchboxComponent';\r\nexport { TiSearchboxNotsearchComponent } from './TiSearchboxNotsearchComponent';\r\n","import { Component, ContentChild, EventEmitter, Input, Output, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiSearchboxNotsearchComponent } from '../searchbox/TiSearchboxModule';\r\nimport { TiKeymap, Util } from '../../utils/Util';\r\nimport { TiDropComponent } from '../drop/TiDropModule';\r\nimport { TiDroplistComponent } from '../droplist/TiDroplistModule';\r\nimport { TiLocale } from '../../locale/TiLocaleModule';\r\n\r\n/**\r\n * @ignore\r\n * 下拉面板带有可搜索的数组组件，主要用于select，表格列设置。\r\n */\r\n@Component({\r\n    selector: 'ti-dropsearch',\r\n    templateUrl: './dropsearch.html',\r\n    styleUrls: ['./dropsearch.less'],\r\n    providers: [TiFormComponent.getValueAccessor(TiDropsearchComponent)]\r\n})\r\nexport class TiDropsearchComponent extends TiDroplistComponent {\r\n\r\n    @Input() searchable: boolean = false;\r\n    @Input() searchKeys: Array<string>; // 要搜索的字段数组, 默认是labelKey或者全部字段\r\n    @Input() selectAll: boolean = false; // 多选模式下是否有全选功能\r\n    /**\r\n     * 面板对齐方式, drop中的panelAlign接口透传出去\r\n     */\r\n    @Input() panelAlign: 'left' | 'right' = 'left';\r\n\r\n    /**\r\n     * @ignore\r\n     * dominator 到drop的距离\r\n     */\r\n    @Input() dominatorSpace: string = TiDropComponent.DOMINATOR_SPACE + 'px';\r\n\r\n    /**\r\n     * @ignore\r\n     * 10.0.2新增\r\n     *\r\n     * 后台搜索，传出搜索框的值\r\n     */\r\n    @Output() readonly beforeSearch: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @ViewChild(TiSearchboxNotsearchComponent) searchboxCom: TiSearchboxNotsearchComponent;\r\n    @ViewChild(TiDropComponent) dropCom: TiDropComponent;\r\n    @ContentChild('footer', { static: true }) footerTemplateRef: TemplateRef<any>;\r\n\r\n    public searchWord: string; // 搜索框内单词\r\n    public placeholder: string = TiLocale.getLocaleWords().tiSelect.search;\r\n    /**\r\n     * 搜索结果数组\r\n     */\r\n    public searchResult: Array<any> = new Array<any>();\r\n    private oldSearchable: boolean = null;\r\n    public pagination: any; // 没有指定类型是因为如果引入TiPaginationComponent会因为循环引用导致报错\r\n    public focusableElemsInSearch: Array<any> = [];\r\n    public focusableElemsInPagination: Array<any>  = [];\r\n    /**\r\n     * @ignore select的beforeSearch有没有被监听，该值为true，dropsearch的beforeSearch才是真正意义的被监听\r\n     */\r\n    public hasBeforeSearchObservers: boolean;\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        super.ngOnChanges(changes);\r\n        // 外部修改show属性的处理，初始定义在ngOnInit中处理\r\n        if (this.searchable) {\r\n            if (changes['options'] && this.options && !changes['options'].firstChange) {\r\n                this.searchWordChange(this.searchboxCom.model);\r\n            }\r\n        }\r\n\r\n        if (changes['searchable']) {\r\n            this.heightExcludeList = changes['searchable'].currentValue ? TiDroplistComponent.SEARCHBOX_EXCLUDE_HEIGHT : 2;\r\n        }\r\n    }\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.searchResult = this.options;\r\n    }\r\n\r\n    ngAfterViewChecked(): void {\r\n        super.ngAfterViewChecked();\r\n        let focusableElemsChange: boolean;\r\n        if (this.searchable !== this.oldSearchable) {\r\n            super.unlistenKendown();\r\n            if (this.searchable) {\r\n                this.focusableElemsInSearch = this.searchboxCom.getFocusableElems();\r\n                focusableElemsChange = true;\r\n                super.listenKeydown(this.searchboxCom.getFocusableElems()[0]);\r\n            } else {\r\n                this.focusableElemsInSearch = [];\r\n                super.listenKeydown(this.dominatorElem);\r\n            }\r\n            this.oldSearchable = this.searchable;\r\n        }\r\n        if (this.pagination && this.pagination.updateFocusableElems) {\r\n            this.focusableElemsInPagination = this.pagination.getFocusableElems();\r\n            focusableElemsChange = true;\r\n        }\r\n\r\n        if (focusableElemsChange) {\r\n            this.setFocusableElems(this.focusableElemsInSearch.concat(this.focusableElemsInPagination));\r\n        }\r\n    }\r\n    /**\r\n     * 覆盖父类show()\r\n     */\r\n    public show(): void {\r\n        if (this.isShow) {\r\n            return;\r\n        }\r\n        // 清空搜索框并处理下拉列表内容\r\n        if (this.searchable) {\r\n            this.searchResult = this.options;\r\n            setTimeout(() => {\r\n                super.show();\r\n                // 焦点转移至搜索框\r\n                this.searchboxCom.focus();\r\n            }, 0);\r\n        } else {\r\n            super.show();\r\n        }\r\n    }\r\n    /**\r\n     * 覆盖父类hide(), 有搜索框时焦点转移\r\n     */\r\n    public hide(): void {\r\n        if (this.isShow) {\r\n            super.hide();\r\n            if (this.searchable) {\r\n                this.dominatorElem.focus();\r\n                this.searchWord = '';\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 仅hide，不带焦点转移。\r\n     */\r\n    public hideWithoutFocus(): void {\r\n        super.hide();\r\n        this.searchWord = '';\r\n    }\r\n\r\n    public searchWordChange(searchWord: string): void {\r\n        this.beforeSearch.emit();\r\n        if (this.hasBeforeSearchObservers) {\r\n            return;\r\n        }\r\n        if (this.options && this.options.length >= 0) {\r\n            // 搜索结果临时值。结果默认值，是原数据\r\n            let searchResult: Array<any> = this.options;\r\n            // 如果搜索词存在\r\n            if (!Util.isEmptyString(searchWord)) {\r\n                // 如果是分组，则找出第二级item集合\r\n                if (this.options[0] && this.listCom.isGroup(this.options[0])) {\r\n                    searchResult = [];\r\n                    this.options.forEach((group: any) => {\r\n                        searchResult = searchResult.concat(group.children);\r\n                    });\r\n                }\r\n                // 在集合中搜索\r\n                searchResult = searchResult.filter((option: any) => {\r\n                    if (!this.searchKeys) {\r\n                        // 没有定义searchKeys时，取labelKey\r\n                        return Util.isString(option[this.labelKey]) && option[this.labelKey].toLowerCase()\r\n                            .indexOf(searchWord.toLowerCase()) >= 0;\r\n                    } else {\r\n                        //  已定义searchKeys，任一条目匹配即可\r\n                        for (const searchKey of this.searchKeys) {\r\n                            if (Util.isString(option[searchKey]) && option[searchKey].toLowerCase()\r\n                                .indexOf(searchWord.toLowerCase()) >= 0) {\r\n                                return true;\r\n                            }\r\n                        }\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n\r\n            this.setSearchResult(searchResult);\r\n        }\r\n    }\r\n    /**\r\n     * 搜索后，按需重新定位、设置hoverOption\r\n     */\r\n    public setSearchResult(searchResult: Array<any>): void {\r\n        // list个数不同时，重定位下拉位置\r\n        if (this.searchResult?.length !== searchResult.length) {\r\n            setTimeout(() => {\r\n                this.rePosition(true);\r\n            }, 0);\r\n        }\r\n        this.searchResult = searchResult;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TiDropsearchComponent } from './TiDropsearchComponent';\r\nimport { TiDropModule } from '../drop/TiDropModule';\r\nimport { TiListModule } from '../list/TiListModule';\r\nimport { TiSearchboxModule } from '../searchbox/TiSearchboxModule';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TiDropModule,\r\n    TiListModule,\r\n    TiSearchboxModule\r\n  ],\r\n  exports: [TiDropsearchComponent],\r\n  declarations: [TiDropsearchComponent]\r\n})\r\nexport class TiDropsearchModule {\r\n}\r\nexport { TiDropsearchComponent } from './TiDropsearchComponent';\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  OnChanges,\r\n  Renderer2,\r\n  SimpleChanges\r\n} from '@angular/core';\r\n\r\nimport { Util } from '../../utils/Util';\r\n\r\n/**\r\n * @ignore\r\n * 此指令功能:清空宿主元素的子元素，将传入的string或Node放入(append)\r\n *\r\n * 类似angular.js的ng-bind-html功能\r\n */\r\n@Directive({\r\n  selector: '[tiInclude]'\r\n})\r\nexport class TiIncludeDirective implements OnChanges {\r\n    @Input() tiInclude: string | Node; // 只支持string和Node两种类型\r\n    private element: HTMLElement;\r\n    constructor(private elementRef: ElementRef, private renderer: Renderer2) {\r\n        this.element = this.elementRef.nativeElement;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes['tiInclude'] && !Util.isUndefined(this.tiInclude)) {\r\n            // 清空宿主元素的子节点\r\n            if (this.element.childNodes.length > 0) {\r\n                this.element.innerHTML = '';\r\n            }\r\n            // 如果 tiInclude 为字符串，则当作文本节点处理\r\n            const node: Node = Util.isString(this.tiInclude) ?\r\n                this.renderer.createText(this.tiInclude as string) : this.tiInclude;\r\n            this.renderer.appendChild(this.element, node);\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiIncludeDirective } from './TiIncludeDirective';\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [TiIncludeDirective],\r\n  declarations: [TiIncludeDirective]\r\n})\r\nexport class TiIncludeModule {\r\n}\r\nexport { TiIncludeDirective } from './TiIncludeDirective';\r\n","import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiItemComponent } from './TiItemComponent';\r\nimport { TiButtonItemComponent } from './TiButtonItemComponent';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\n/**\r\n * 本组件实现对多个表单元素的布局，支持单列和多列布局。\r\n * 其中包含了tiFormfield、tiItem、tiItemLabel和tiButtonItem几个组件。\r\n *\r\n * <example-url>../tiny3demo/#/formfield/formfield-all</example-url>\r\n */\r\n@Component({\r\n  selector: 'ti-formfield',\r\n  templateUrl: './formfield.html',\r\n  styleUrls: ['./formfield.less']\r\n})\r\nexport class TiFormfieldComponent extends TiBaseComponent {\r\n    /**\r\n     * 默认两列的间距\r\n     */\r\n    private static readonly COLS_GAP: string = '70px';\r\n    /**\r\n     * 设置表单类型，不设置时默认为带输入控件类表单;当为 text 时，为纯文本描述类表单\r\n     *\r\n     * 带输入控件类表单：各个表单条目的内容区主要为输入框、下拉框、按钮组等输入组件；\r\n     *\r\n     * 纯文本描述类表单：各个表单条目的内容区为纯文本。\r\n     */\r\n    @Input() type: 'default' | 'text' = 'default';\r\n    /**\r\n     * 设置表单的标题\r\n     */\r\n    @Input() title: string;\r\n    /**\r\n     * 统一设置表单条目的 label 所占宽度。例如：\"100px\"\r\n     */\r\n    @Input() labelWidth: string;\r\n    /**\r\n     * 设置表单布局的列数\r\n     */\r\n    @Input() colsNumber: number = 1;\r\n    /**\r\n     * 设置列与列之间的间隔，只有多列（colsNumber >= 2）时该属性配置才生效。\r\n     */\r\n    @Input() colsGap: Array<string> = [];\r\n    /**\r\n     * 统一设置表单条目的垂直对齐方式（上下布局表单不支持该属性）。\r\n     */\r\n    @Input() verticalAlign: 'top' | 'middle' | 'bottom' = 'top';\r\n    /**\r\n     * 统一设置纯文本描述类表单的每个表单条目的行高。\r\n     *\r\n     * 纯文本描述类表单不设置时，行高默认为40px；设置值时，例如：'30px',则的行高为30px。\r\n     *\r\n     * 目前纯文本描述类表单有三种应用场景：表格下展表单，行高值40px（默认）；购买页配置信息汇总，行高30PX；订单详情确认，行高22px。\r\n     */\r\n    @Input() textLineHeight: string;\r\n    /**\r\n     * 设置各列宽度（IE不支持，行合并列合并暂不支持）\r\n     *\r\n     * 设置该接口后，colsGap第一个值表示各列间距\r\n     *\r\n     * 10.1.1 新增\r\n     */\r\n    @Input() colsWidth: Array<string> = [];\r\n\r\n    /**\r\n     * @ignore\r\n     * 纯文本描述类表单的type的值\r\n     */\r\n    public readonly textType: string = 'text';\r\n    /**\r\n     * @ignore\r\n     * ti-formfield中包含的所有ti-item的集合\r\n     */\r\n    public items: Array<TiItemComponent> = [];\r\n    /**\r\n     * @ignore\r\n     * ti-formfield中包含的所有ti-btn-item的集合\r\n     */\r\n    public btnItems: Array<TiButtonItemComponent> = [];\r\n    /**\r\n     * @ignore\r\n     * 根据colsNum对 items 分组后的数据\r\n     */\r\n    public groupedItems: Array<any> = [];\r\n    /**\r\n     * @ignore\r\n     * 表单的列数\r\n     */\r\n    public colsNum: number = 1;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public containterObj: { 'vertical-align': string, 'grid-template-columns'?: string, 'grid-column-gap'?: string };\r\n    /**\r\n     * @ignore\r\n     * 当前formfield下ti-item的总个数\r\n     */\r\n    public itemTotal: number = 0;\r\n    /**\r\n     * @ignore\r\n     * 表单是否为上下布局\r\n     */\r\n    public isVertical: boolean = false;\r\n    /**\r\n     * @ignore\r\n     * button样式\r\n     */\r\n    public buttonStyle: { 'margin-left'?: string; };\r\n    /**\r\n     * @ignore\r\n     * 表单是否使用grid布局\r\n     */\r\n    public useGrid: boolean;\r\n    constructor(\r\n        protected hostRef: ElementRef,\r\n        protected renderer: Renderer2,\r\n        private changeDetector: ChangeDetectorRef\r\n    ) {\r\n        super(hostRef, renderer);\r\n    }\r\n\r\n    // tslint:disable-next-line: use-life-cycle-interface\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.isVertical = this.nativeElement.hasAttribute('vertical');\r\n        this.setColsNumber();\r\n        // 统一设置表单内容的垂直对齐方式;\r\n        // tbody、tr、td的verticalAlign继承于此(table),所以此处可以\r\n        // 统一设置表单内容的垂直对齐方式\r\n        this.setFieldStyle();\r\n    }\r\n\r\n    private setColsNumber(): void {\r\n        if (this.colsNumber) {\r\n            // tslint:disable-next-line:prefer-template\r\n            const colsNumber: number = parseInt(String(this.colsNumber), 10);\r\n            if (!Number.isNaN(colsNumber) && colsNumber >= 1) {\r\n                this.colsNum = colsNumber;\r\n            }\r\n        }\r\n    }\r\n\r\n    private setFieldStyle(): void {\r\n        if (!Util.isEmptyString(this.verticalAlign)) {\r\n            this.containterObj = { 'vertical-align': this.verticalAlign };\r\n        }\r\n\r\n        // 设置width接口时，配置grid，IE下不支持grid布局，存在兼容性问题\r\n        const isSupportGrid: boolean = (typeof window !== 'undefined') && (window as any).CSS && (window as any).CSS.supports && (window as any).CSS.supports('(display: grid)');\r\n        this.useGrid = this.colsWidth && this.colsWidth.length > 0 && isSupportGrid;\r\n\r\n        if (this.useGrid) {\r\n            this.labelWidth = this.labelWidth ? this.labelWidth : '80px'; // 给定宽度，确保content对齐；\r\n            for (let i = 0; i < this.colsWidth.length; i++) {\r\n                // 各列设置百分比且设置列间距时，需要重新计算各列宽度，设置宽度-各列间距总和\r\n                const calcWidth: string = `calc( ${this.colsWidth[i]} - ${parseFloat(this.colsGap[0]) * (this.colsWidth.length - 1) / this.colsWidth.length}px)`;\r\n                this.colsWidth[i] = /%$/.test(this.colsWidth[i]) && this.colsGap[0] ? calcWidth : this.colsWidth[i];\r\n            }\r\n            this.containterObj['grid-template-columns'] = `${this.colsWidth.join(' ')}`;\r\n            this.containterObj['grid-column-gap'] = this.colsGap[0]; // 列间距 grid-column-gap属性只支持一个值，取首项作为列间距\r\n            this.buttonStyle = this.isVertical ? {} : { 'margin-left': `calc(${this.labelWidth} + 20px)` }; // 20px padding\r\n\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 需要在TiItemComponent.ts中调用\r\n     */\r\n    public addCntItem(item: TiItemComponent): void {\r\n        this.items.push(item);\r\n        this.items.sort((a: TiItemComponent, b: TiItemComponent) => {\r\n            return a.itemIndex - b.itemIndex;\r\n        });\r\n        this.groupedItems = this.chunkArray(this.items, this.colsNum);\r\n        // 强制变检一次，消除报错(Expression has changed after it was checked)\r\n        this.changeDetector.detectChanges();\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 需要在 TiItemComponent.ts 中调用\r\n     */\r\n    public removeCntItem(item: TiItemComponent): void {\r\n        const itemIndex: number = this.items.indexOf(item);\r\n        if (itemIndex !== -1) {\r\n            this.items.splice(itemIndex, 1);\r\n            this.groupedItems = this.chunkArray(this.items, this.colsNum);\r\n            // 强制变检一次，消除报错(Expression has changed after it was checked)\r\n            // ti-item和ti-formfiled组件都销毁时，视图也已销毁，不需要再强制变检;\r\n            // 因此，强制变检需要在一定的条件下执行，消除服务报错（Attempt to use a destroyed view: detectChanges）\r\n            if (!this.changeDetector['destroyed']) {\r\n                this.changeDetector.detectChanges();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 需要在 TiButtonItemComponent.ts 中调用\r\n     */\r\n    public addBtnItem(item: TiButtonItemComponent): void {\r\n        this.btnItems.push(item);\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 需要在 TiButtonItemComponent.ts 中调用\r\n     */\r\n    public removeBtnItem(item: TiButtonItemComponent): void {\r\n        const itemIndex: number = this.btnItems.indexOf(item);\r\n        if (itemIndex !== -1) {\r\n            this.btnItems.splice(itemIndex, 1);\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:prefer-function-over-method\r\n    private chunkArray(array: Array<TiItemComponent>, size: number): Array<any> {\r\n        const length: number = array ? array.length : 0;\r\n        if (!length || size < 1) {\r\n            return [];\r\n        }\r\n\r\n        const result: Array<Array<TiItemComponent>> = [];\r\n        // 单列\r\n        if (size === 1) {\r\n            array.forEach((item: TiItemComponent) => {\r\n                result.push([item]);\r\n            });\r\n        // 多列\r\n        } else {\r\n            const rowspanNums: Array<number> = new Array(size); // 记录每一列的行合并的信息\r\n            let onegroup: Array<TiItemComponent> = [];\r\n            let colIndex: number = 0;\r\n            array.forEach((item: TiItemComponent, index: number) => {\r\n                while (rowspanNums[colIndex] > 0) {\r\n                    rowspanNums[colIndex] = rowspanNums[colIndex] - 1;\r\n                    colIndex++;\r\n                    if (colIndex === size) {\r\n                        result.push(onegroup);\r\n                        onegroup = [];\r\n                        colIndex = 0;\r\n                    }\r\n                }\r\n\r\n                onegroup.push(item);\r\n                // 如果该单元是行合并，则影响后续行\r\n                if (item.rowspan > 1) {\r\n                    rowspanNums[colIndex] = item.rowspan - 1;\r\n                }\r\n                // 如果该单元是列合并，则影响当前行\r\n                if (item.colspan > 1) {\r\n                    colIndex += (item.colspan - 1);\r\n                }\r\n\r\n                // 设置列间距\r\n                if (colIndex < size - 1) {\r\n                    // 设置宽度时，为使IE下有良好的呈现，取首项作为各列间距\r\n                    item.gapWidth = this.colsWidth && this.colsWidth.length > 0 && this.colsGap[0] ? this.colsGap[0] : (this.colsGap[colIndex] || TiFormfieldComponent.COLS_GAP);\r\n                }\r\n\r\n                colIndex++;\r\n\r\n                if (colIndex === size || index === array.length - 1) {\r\n                    result.push(onegroup);\r\n                    onegroup = [];\r\n                    colIndex = 0;\r\n                }\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 需要在html模板中使用\r\n     */\r\n    public trackByFn(index: number, item: TiItemComponent): number {\r\n        return item.itemIndex;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 每项图标是否占位，设置按钮及content样式\r\n     */\r\n    public getRequire(item: TiItemComponent, index: number): boolean {\r\n        let hasRequire: boolean;\r\n\r\n        for (let i = 0; i < this.groupedItems.length; i++) {\r\n            const groupedItem: TiItemComponent = this.groupedItems[i];\r\n            if (groupedItem[index % this.colsNum] && groupedItem[index % this.colsNum].required) {\r\n                 hasRequire = true;\r\n            }\r\n        }\r\n\r\n        if (index === 0 && hasRequire) {\r\n            this.buttonStyle = { 'margin-left': `calc(${this.labelWidth} + 36px)` }; // 20 padding + 16 图标\r\n        }\r\n\r\n        if (hasRequire) {\r\n            item.contentStyle['width'] = item.hasLabel ? `calc(100% - ${this.labelWidth} - 36px)` : `calc(100% - 16px)`;\r\n        } else {\r\n            // TiItemComponent 初始化时，ti-item-label指令无法获取到label，导致宽度设置不正确，因此在此处设置宽度\r\n            item.contentStyle['width'] = item.hasLabel ? `calc(100% - ${this.labelWidth} - 20px)` : '100%' ;\r\n        }\r\n\r\n        return hasRequire;\r\n    }\r\n}\r\n","import {\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ElementRef,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    SimpleChange,\r\n    SimpleChanges\r\n} from '@angular/core';\r\nimport { TiFormfieldComponent } from './TiFormfieldComponent';\r\nimport { Util } from '../../utils/Util';\r\n\r\n/**\r\n * 本组件嵌在 tiFormfield 中使用，包裹着单个表单条目的所有内容\r\n */\r\n@Component({\r\n    selector: 'ti-item',\r\n    templateUrl: './formfield-item.html'\r\n})\r\nexport class TiItemComponent implements OnInit, OnChanges, OnDestroy {\r\n    /**\r\n     * 设置当前表单条目是否是必填，如果是必填，则前面会显示 *\r\n     */\r\n    @Input() required: boolean = false;\r\n    /**\r\n     * 设置当前表单条目的垂直对齐方式，默认为top（上下布局表单不支持该属性）。\r\n     *\r\n     * 能够覆盖tiFormfield指令上的verticalAlign设置\r\n     */\r\n    @Input() verticalAlign: 'top' | 'middle' | 'bottom';\r\n    /**\r\n     * 设置当前表单条目是否显示\r\n     *\r\n     * tiItem 不支持 ngIf 和 hidden，由该接口来控制单个表单条目的显示与否\r\n     */\r\n    @Input() show: boolean = true;\r\n    /**\r\n     * 行合并，设置当前表单条目可横跨的行数\r\n     */\r\n    @Input() rowspan: number = 1;\r\n    /**\r\n     * 列合并，设置当前表单条目可横跨的列数\r\n     */\r\n    @Input() colspan: number = 1;\r\n    /**\r\n     * 在 ti-formfield 中的展示顺序，数值越大越靠后展示；\r\n     *\r\n     * 要使用该接口时，当前ti-formfield中的所以ti-item都要设置该接口；\r\n     *\r\n     * 不设置时按 ti-item 的解析顺序展示\r\n     *\r\n     * 10.0.1新增\r\n     */\r\n    @Input() index: number;\r\n    /**\r\n     * @ignore\r\n     * tiItem的索引值，用于控制其显示时的位置顺序\r\n     */\r\n    public itemIndex: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public verticalAlignObj: { 'vertical-align'?: string };\r\n    /**\r\n     * @ignore\r\n     */\r\n    public itemStyle: { 'grid-area'?: string };\r\n    /**\r\n     * @ignore\r\n     */\r\n    public labelStyle: { 'vertical-align'?: string, width?: string, 'line-height'?: string };\r\n    /**\r\n     * @ignore\r\n     */\r\n    public contentStyle: { 'vertical-align'?: string, 'line-height'?: string, 'width'?: string };\r\n    /**\r\n     * @ignore\r\n     */\r\n    public element: HTMLElement;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public itemLabel: string | Node;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public hasLabel: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public gapWidth: string = '0px';\r\n    constructor(private formfield: TiFormfieldComponent, private elementRef: ElementRef,\r\n                private changeDetector: ChangeDetectorRef) {}\r\n\r\n    // 有两处改变label\r\n    // 1. label接口传入的值\r\n    // 2. 在ti-item-label组件中修改label的值\r\n    /**\r\n     * 设置当前表单条目的label文本，支持简单字符串文本，如果开发者希望基于html定制文本，\r\n     * 建议使用[TiItemLabelComponent]{@link ./TiItemLabelComponent.html}组件\r\n     *\r\n     * 类型：string | Node\r\n     */\r\n    @Input()\r\n    set label(labelParm: string | Node) {\r\n        this.setItemLabel(labelParm);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.formfield.itemTotal++;\r\n        this.decorateItem();\r\n        if (this.show) {\r\n            this.formfield.addCntItem(this);\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        const showObj: SimpleChange = changes['show'];\r\n        if (showObj && !showObj.firstChange) {\r\n            if (showObj.currentValue) {\r\n                this.formfield.addCntItem(this);\r\n            } else {\r\n                this.formfield.removeCntItem(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        // 在外部将ti-iem销毁时，应将此item从items数组中去掉\r\n        this.formfield.removeCntItem(this);\r\n        this.changeDetector.detach();\r\n    }\r\n\r\n    private decorateItem(): void {\r\n        this.itemIndex = Util.isNumber(this.index) ? this.index : this.formfield.itemTotal - 1;\r\n        this.element = this.elementRef.nativeElement;\r\n        this.verticalAlignObj = Util.isUndefined(this.verticalAlign) ?\r\n            {} : { 'vertical-align': this.verticalAlign };\r\n\r\n        // item-label的自定义的样式（垂直对齐方式、宽度）\r\n        this.labelStyle = {\r\n            'vertical-align': this.verticalAlign,\r\n            width: this.formfield.labelWidth\r\n        };\r\n\r\n        // item-content的自定义的样式（垂直对齐方式）\r\n        this.contentStyle = {\r\n            'vertical-align': this.verticalAlign\r\n        };\r\n        // 为纯文本描述类表单时，可设置 item 的行高\r\n        if (this.formfield.type === this.formfield.textType) {\r\n            this.labelStyle['line-height'] = this.formfield.textLineHeight;\r\n            this.contentStyle['line-height'] = this.formfield.textLineHeight;\r\n        }\r\n\r\n        // item 自定义行列合并样式\r\n        if (this.formfield.useGrid) {\r\n            this.itemStyle = { 'grid-area': `span ${this.rowspan} / span ${this.colspan}` };\r\n        }\r\n    }\r\n\r\n    private setItemLabel(label: string | Node): void {\r\n        if (label) {\r\n            this.hasLabel = true;\r\n            this.itemLabel = label;\r\n        } else {\r\n            this.hasLabel = false;\r\n        }\r\n        this.changeDetector.detectChanges();\r\n    }\r\n}\r\n","import {\r\n  AfterContentInit,\r\n  Component,\r\n  ElementRef\r\n} from '@angular/core';\r\nimport { TiItemComponent } from './TiItemComponent';\r\n/**\r\n * 本组件嵌在 tiItem 中使用，包裹着单个表单条目中 label显示的dom片段\r\n */\r\n@Component({\r\n  selector: 'ti-item-label',\r\n  templateUrl: './formfield-item-label.html'\r\n})\r\nexport class TiItemLabelComponent implements AfterContentInit {\r\n    constructor(private item: TiItemComponent, private elementRef: ElementRef) {}\r\n\r\n    ngAfterContentInit(): void {\r\n      // ti-item 封装在自定义组件里时，使用ti-item-label，开发环境报错ExpressionChangedAfterItHasBeenCheckedError\r\n      Promise.resolve().then(() => {\r\n        this.item.label = this.elementRef.nativeElement;\r\n      });\r\n    }\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChange,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { TiFormfieldComponent } from './TiFormfieldComponent';\r\n\r\n/**\r\n * 本组件嵌在 tiFormfield 中使用，包裹着表单按钮\r\n */\r\n@Component({\r\n  selector: 'ti-button-item',\r\n  templateUrl: './formfield-btn-item.html'\r\n})\r\nexport class TiButtonItemComponent implements OnInit, OnChanges, OnDestroy {\r\n    /**\r\n     * 每一个ti-item占4个td。第一个td用来显示“*”，第二个td用来显示label，\r\n     * 第三个td用来显示content, 第四个td是item间距。\r\n     */\r\n    private static readonly TD_NUM_PER_ITEM: number = 4;\r\n    /**\r\n     * 设置表单按钮是否显示\r\n     *\r\n     * tiButtonItem 不支持 ngIf 和 hidden，由该接口来控制表单按钮的显示与否\r\n     */\r\n    @Input() show: boolean = true;\r\n    /**\r\n     * 设置表单按钮的垂直对齐方式，默认为top（上下布局表单不支持该属性）。\r\n     *\r\n     * 能够覆盖tiFormfield指令上的verticalAlign设置\r\n     */\r\n    @Input() verticalAlign: 'top' | 'middle' | 'bottom';\r\n    /**\r\n     * @ignore\r\n     */\r\n    public verticalAlignObj: { 'vertical-align'?: string } = {};\r\n    /**\r\n     * @ignore\r\n     */\r\n    public btnContent: Node;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public btnColspan: number;\r\n    constructor(private formfield: TiFormfieldComponent, private elementRef: ElementRef) {}\r\n\r\n    ngOnInit(): void {\r\n        this.btnContent = this.elementRef.nativeElement;\r\n        this.btnColspan = (this.formfield.colsNum - 1) * TiButtonItemComponent.TD_NUM_PER_ITEM + 2;\r\n        if (this.verticalAlign) {\r\n            this.verticalAlignObj['vertical-align'] = this.verticalAlign;\r\n        }\r\n\r\n        if (this.show) {\r\n            this.formfield.addBtnItem(this);\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        const showObj: SimpleChange = changes['show'];\r\n\r\n        if (showObj && !showObj.firstChange) {\r\n            if (showObj.currentValue) {\r\n                this.formfield.addBtnItem(this);\r\n            } else {\r\n                this.formfield.removeBtnItem(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.formfield.removeBtnItem(this);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiIncludeModule } from '../../directives/include/TiIncludeModule';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\nimport { TiFormfieldComponent } from './TiFormfieldComponent';\r\nimport { TiItemComponent } from './TiItemComponent';\r\nimport { TiItemLabelComponent } from './TiItemLabelComponent';\r\nimport { TiButtonItemComponent } from './TiButtonItemComponent';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiIconModule,\r\n    TiIncludeModule\r\n  ],\r\n  exports: [TiFormfieldComponent,\r\n            TiItemComponent,\r\n            TiItemLabelComponent,\r\n            TiButtonItemComponent],\r\n  declarations: [TiFormfieldComponent,\r\n                 TiItemComponent,\r\n                 TiItemLabelComponent,\r\n                 TiButtonItemComponent]\r\n})\r\nexport class TiFormfieldModule {\r\n}\r\nexport { TiFormfieldComponent } from './TiFormfieldComponent';\r\nexport { TiItemComponent } from './TiItemComponent';\r\nexport { TiItemLabelComponent } from './TiItemLabelComponent';\r\nexport { TiButtonItemComponent } from './TiButtonItemComponent';\r\n","import { AfterViewInit, Component, ElementRef, Input, Renderer2, ViewChild } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\n\r\n// 文件预览信息接口\r\n// 10.0.2版本新增\r\nexport interface TiFilePreviewInfo {\r\n    /**\r\n     * 文件名称\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * 预览地址\r\n     */\r\n    previewUrl?: string;\r\n\r\n    /**\r\n     * 允许有多余的属性字段\r\n     */\r\n    [propName: string]: any;\r\n}\r\n\r\n/**\r\n * @ignore\r\n *\r\n * 10.0.2版本新增组件\r\n *\r\n * 该组件主要用于图片放大预览\r\n *\r\n * <example-url>../tiny3demo/#/imagepreview/imagepreview-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-imagepreview',\r\n    templateUrl: './imagepreview.html',\r\n    styleUrls: ['./imagepreview.less']\r\n})\r\nexport class TiImagepreviewComponent extends TiBaseComponent implements AfterViewInit {\r\n\r\n    /**\r\n     * 需要预览的文件列表\r\n     */\r\n    @Input() fileList: Array<TiFilePreviewInfo> = [];\r\n\r\n    /**\r\n     * 是否展示文件名称，默认展示\r\n     */\r\n    @Input() showFileName: boolean = true;\r\n\r\n    /**\r\n     * 默认展示的图片的索引\r\n     */\r\n    @Input() index: number = 0;\r\n\r\n    /**\r\n     * @ignore 内部变量\r\n     */\r\n    @ViewChild('imgTemplate', {static: true}) imgTemplate: ElementRef;\r\n    /**\r\n     * @ignore 内部变量\r\n     */\r\n    @ViewChild('switchBtn', {static: true}) switchBtnTemplate: ElementRef;\r\n\r\n    constructor(public sanitizer: DomSanitizer,protected renderer: Renderer2, private elementRef: ElementRef) {\r\n            super(elementRef, renderer);\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.addImgLoadListener();\r\n    }\r\n\r\n    /**\r\n     * @ignore 翻到上一张图片\r\n     */\r\n    public toNext(): void {\r\n        if (this.index === (this.fileList.length - 1)) {\r\n            return;\r\n        }\r\n        this.addImgLoadListener();\r\n        this.index++;\r\n    }\r\n\r\n    /**\r\n     * @ignore 翻到下一张图片\r\n     */\r\n    public toPrevious(): void {\r\n        if (this.index === 0) {\r\n            return;\r\n        }\r\n        this.addImgLoadListener();\r\n        this.index--;\r\n    }\r\n\r\n    // 由于图片高度不确定，需动态设置top值，所以增加load事件。\r\n    private addImgLoadListener(): void {\r\n        this.imgTemplate.nativeElement.onload = (): void => {\r\n            const imgHeight: number = this.imgTemplate.nativeElement.height;\r\n            if (imgHeight !== 0) {\r\n                const top: number = (imgHeight - 48) / 2;\r\n                this.renderer.setStyle(this.switchBtnTemplate.nativeElement, 'top', top + 'px');\r\n            }\r\n            // 防止循环触发load事件\r\n            // tslint:disable-next-line: no-null-keyword\r\n            this.imgTemplate.nativeElement.onload = null;\r\n        };\r\n    }\r\n}\r\n","import {\r\n    AfterContentInit, Component, ElementRef,\r\n    HostListener, Renderer2, ViewChild, ViewEncapsulation, Inject\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { TiKeymap, Util } from '../../utils/Util';\r\nimport { TiRenderer } from '../renderer/TiRenderer';\r\nimport { TiBaseComponent } from '../../components/base/TiBaseModule';\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const animateStyle: string = '0.3s cubic-bezier(0.40, 0.00, 0.20, 1.00)';\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n    selector: 'ti-modal-wrapper',\r\n    templateUrl: './TiModalComponent.html',\r\n    styleUrls: ['./modal.less'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations: [ // 由于动画创建需要在元数据中解析，因此动画定义必须在此处定义\r\n        trigger('modalAnimate', [\r\n            state('show', style({\r\n                opacity : 1\r\n            })),\r\n            state('hide, void', style({\r\n                opacity: 0\r\n            })),\r\n            transition('show => hide', animate(animateStyle)),\r\n            transition('hide => show', animate(animateStyle))\r\n        ]),\r\n        trigger('modalPosAnimate', [\r\n            state('show', style({\r\n                transform: 'translate(0, 0px)'\r\n            })),\r\n            state('hide, void', style({\r\n                transform: 'translate(0, -6px)'\r\n            })),\r\n            transition('show => hide', animate(animateStyle)),\r\n            transition('hide => show', animate(animateStyle))\r\n        ])\r\n    ]\r\n})\r\nexport class TiModalComponent extends TiBaseComponent implements AfterContentInit {\r\n    /**\r\n     * 10.1.1新增\r\n     * 规范刷新，弹窗整体的最大高度为660px（按照最小分辨率1280*768计算）\r\n     */\r\n    private static readonly MODAL_MAX_HEIGHT: number = 660;\r\n    // 可通过tab聚焦的元素选择器列表\r\n    private static readonly tababbleSelector: string = `a[href], area[href], input:not([disabled]):not([tabindex=\\'-1\\']),\r\n       button:not([disabled]):not([tabindex=\\'-1\\']),select:not([disabled]):not([tabindex=\\'-1\\']),\r\n       textarea:not([disabled]):not([tabindex=\\'-1\\']),\r\n       iframe, object, embed, *[tabindex]:not([tabindex=\\'-1\\']), *[contenteditable=true]`;\r\n\r\n    @ViewChild('modalContent', { static: true }) private contentRef: ElementRef;\r\n    @ViewChild('modalEle', { static: true }) protected modalEleRef: ElementRef;\r\n\r\n    protected _showState: string; // 组件显示状态，用于控制动画的状态切换\r\n    set showState(value: string) {\r\n        this._showState = value;\r\n    }\r\n    get showState(): string {\r\n        return this._showState;\r\n    }\r\n    public animation: boolean;  // 是否有动画\r\n    public draggable: boolean;  // 是否可拖拽\r\n    public closeOnEsc: boolean; // 是否可通过ESC键关闭弹框\r\n    public modalInstance: any; // 组件实例，可使用该实例调用方法控制组件行为\r\n    public index: number = 0; // 多个弹出框情况下，zindex层级设置辅助\r\n    public closeIcon: boolean; // 是否有头部关闭按钮\r\n    public modalClass: string; // 弹框样式设置\r\n    public headerAlign: 'center' | 'left' | 'right'; // 头部对齐方式\r\n    public dragOptions: any; // 拖拽配置\r\n    private focusableElements: Array<any> = []; // 弹框中可聚焦元素列表\r\n    constructor(ele: ElementRef, private tiRenderer: TiRenderer, protected renderer: Renderer2, @Inject(DOCUMENT) private document) {\r\n        super(ele, renderer);\r\n    }\r\n\r\n    private static preventEvent(event: Event): void {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n    // 路由切换后，modal还会存在，因此此处做了事件处理\r\n    @HostListener('window:hashchange') onhashchange(): void {\r\n        this.modalInstance._remove();\r\n    }\r\n    // 缩放时重置弹框位置\r\n    @HostListener('window:resize') onResize(): void {\r\n        this.tiRenderer.setStyles(this.contentRef.nativeElement, {\r\n            left: 0,\r\n            top: 0\r\n        });\r\n    }\r\n    // 键盘事件处理\r\n    @HostListener('document:keydown', ['$event']) onKeydown(event: KeyboardEvent): void {\r\n        switch (event.which) {\r\n            case TiKeymap.KEY_ESCAPE:  // close on ESC\r\n                if (this.closeOnEsc) {\r\n                    this.dismissModal();\r\n                }\r\n                break;\r\n            case TiKeymap.KEY_TAB: // tab键用于处理在弹框内循环获取焦点\r\n                this.onTabChange(event);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    // 弹窗外围出现的滚动条滚动会导致下拉等定位在body上的组件相对于宿主元素定位偏移，\r\n    // 因此触发tiScroll事件做处理，事件包括：\r\n    // 整个页面滚动条滚轮滚动事件, mousewheel处理Chrome和IE下事件，DOMMouseScroll处理firefox下事件\r\n    // 整个页面滚动条鼠标滚动事件\r\n    @HostListener('document:mousewheel') @HostListener('document:DOMMouseScroll') @HostListener('window:scroll') onTiScroll(): void {\r\n        Util.trigger(document, 'tiScroll');\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.dragOptions = {// 由于此处需要获取ngContent中的内容,因此在该时机中进行处理\r\n            // 这时弹窗内容DOM还未解析，所以需要使用标签选择器('ti-modal-header')来获取元素\r\n            handle: this.nativeElement.querySelector('ti-modal-header'),\r\n            drag: (opts: {\r\n                position: {\r\n                    left: number\r\n                    top: number\r\n                },\r\n                helper: Element\r\n            }): { left: number, top: number\r\n            } => {\r\n                Util.trigger(document, 'tiScroll');\r\n                // 当前浏览器可视区域的宽高\r\n                const curBrowseWidth: number = document.documentElement.clientWidth;\r\n                const curBrowseheight: number = document.documentElement.clientHeight;\r\n                // 元素原始位置（由于元素本身left和top实时变化，因此取其父元素位置）\r\n                const eleRect: ClientRect | DOMRect = opts.helper.parentElement.getBoundingClientRect();\r\n                // 元素距页面可视区域的可用位置范围\r\n                const minLeft: number = - eleRect.left + document.body.scrollLeft;\r\n                const maxLeft: number = Math.max(curBrowseWidth + minLeft - eleRect.width, minLeft);\r\n                const minTop: number = -eleRect.top + document.body.scrollTop;\r\n                const maxTop: number = Math.max(curBrowseheight + minTop - eleRect.height, minTop);\r\n                const position: { left: number, top: number} = opts.position;\r\n                // 元素left位置根据可用left范围计算\r\n                if (position.left < minLeft) {\r\n                    position.left = minLeft;\r\n                } else if (position.left > maxLeft) {\r\n                    position.left = maxLeft;\r\n                }\r\n                // 元素top位置根据可用top范围计算\r\n                if (position.top < minTop) {\r\n                    position.top = minTop;\r\n                } else if (position.top > maxTop) {\r\n                    position.top = maxTop;\r\n                }\r\n\r\n                return position;\r\n            }\r\n        };\r\n    }\r\n    public dismissModal(): void {\r\n        this.modalInstance.dismiss();\r\n    }\r\n\r\n    public onAnimationDone($event: any): void {\r\n        // 弹框toState有三种状态:'show'/'hide'/null\r\n        // 弹框显示动画结束后,重新将焦点聚焦在弹框元素/弹框中\r\n        if ($event.toState === 'show') {\r\n            this.reStyleModal();\r\n            this.focusInModal();\r\n\r\n            return;\r\n        }\r\n        // 弹框隐藏动画结束后,销毁弹框DOM\r\n        if ($event.toState === 'hide') {\r\n            this.modalInstance._remove();\r\n        }\r\n    }\r\n\r\n    // 弹框打开时，设置弹框元素样式\r\n    private reStyleModal(): void {\r\n        const parentEle: Element = this.nativeElement.querySelector('.ti3-modal-header');\r\n        if (this.draggable !== false) {\r\n            this.renderer.setStyle(parentEle, 'cursor', 'move');\r\n        }\r\n        if (this.headerAlign === 'center' || this.headerAlign === 'right') {\r\n            this.renderer.setStyle(parentEle, 'text-align', this.headerAlign);\r\n        }\r\n\r\n        this.renderer.addClass(this.document.body, 'ti3-modal-open');\r\n        this.setMaxHeight();\r\n    }\r\n    /**\r\n     * 设置弹框高度：\r\n     * 根据UCD3.0规范，modal最大高度不能超过弹框宽度,所以需要获取到modal的宽度值，用其减去modal的header和footer的高度\r\n     * 后设为body的最大高度，当高度超出时，ti-modal-body垂直方向上出现滚动条\r\n     * 10.1.1变更说明：\r\n     * 根据规范变更，弹框高度可以超过弹框宽度，同时弹窗的最大高度是660px。\r\n     */\r\n    private setMaxHeight(): void {\r\n        // 修复SSR问题：ERROR TypeError: modalHeaderEle.getBoundingClientRect is not a function\r\n        const modalHeaderEle: Element = this.nativeElement.querySelector('.ti3-modal-header');\r\n        const modalHeaderHeight: number = modalHeaderEle && (typeof modalHeaderEle.getBoundingClientRect === 'function') ? modalHeaderEle.getBoundingClientRect().height : 0;\r\n        const modalFooterEle: Element = this.nativeElement.querySelector('.ti3-modal-footer');\r\n        const modalFooterHeight: number = modalFooterEle && (typeof modalFooterEle.getBoundingClientRect === 'function') ? modalFooterEle.getBoundingClientRect().height : 0;\r\n        const modalBodyMaxHeight: number = TiModalComponent.MODAL_MAX_HEIGHT - modalHeaderHeight - modalFooterHeight;\r\n        this.renderer.setStyle(this.nativeElement.querySelector('.ti3-modal-body'), 'maxHeight', modalBodyMaxHeight + 'px');\r\n    }\r\n    private focusInModal(): void {\r\n        /**\r\n         * 首先判断新打开的modal是否已存在获取焦点的元素\r\n         * 如果存在，则需要对modal元素再次设置焦点\r\n         * 否则，对modal容器设置焦点\r\n         */\r\n        const activeElement: any = this.document.activeElement;\r\n        const isfocusedInModal: boolean = activeElement && this.nativeElement.contains(activeElement);\r\n        if (isfocusedInModal) {\r\n            /**\r\n             * 对已经设置焦点的元素，再次设置焦点，是为了解决以下两个问题：\r\n             * 1>首次加载时，已经获取焦点的元素，其输入tip提示位置偏移\r\n             * 2>首次加载时，IE浏览器中，已经获取焦点的元素input，光标位置出现偏移\r\n             */\r\n            if (activeElement) {\r\n                activeElement.blur();\r\n                // tiautofocusinmodal属性需要在change校验中使用(ChangeCheck.ts)\r\n                this.renderer.setAttribute(activeElement, 'tiautofocusinmodal', '');\r\n                activeElement.focus();\r\n                this.renderer.removeAttribute(activeElement, 'tiautofocusinmodal');\r\n            }\r\n        } else {\r\n            // 弹窗内未找到已聚焦元素情况下，优先处理 input 和 textarea 原生标签autofocus聚焦\r\n            // (input,textarea.button原生标签的autofocus弹窗打开时无效(chrome是从第二次打开无效)，因此要做此处理)\r\n            let focusEle: any = this.nativeElement.querySelector(`input[autofocus]:not([disabled]):not([tabindex=\\'-1\\']),\r\n                textarea[autofocus]:not([disabled]):not([tabindex=\\'-1\\']), button[autofocus]:not([disabled]):not([tabindex=\\'-1\\'])`);\r\n            // 如果通过上述处理，聚焦元素仍未获取到的情况下，则可聚焦元素为当前弹框\r\n            focusEle = focusEle || this.modalEleRef.nativeElement;\r\n            focusEle.focus();\r\n        }\r\n    }\r\n    // 用于处理tab键行为，确保tab时只可在弹框内循环获取焦点\r\n    private onTabChange(event: KeyboardEvent): void {\r\n        const focusableElementList: Array<Element> = this.getFocusableElesInModal(); // 获取当前弹出框DOM中可以获取焦点的元素列表\r\n        const focusableListLength: number = focusableElementList.length;\r\n        if (focusableListLength === 0) {\r\n            return;\r\n        }\r\n        const target: EventTarget = event.target; // 事件对象元素\r\n        const firstFocusableEle: any = focusableElementList[0]; // 第一个可获取焦点的元素\r\n        const lastFocusableEle: any = focusableElementList[focusableListLength - 1]; // 最后一个可获取焦点的元素\r\n        // 按下tab+shift键时，如果当前已获取焦点元素是弹出框中的第一个可获取焦点元素或弹框本身，则聚焦最后一个元素\r\n        if (event.shiftKey) {\r\n            if (target === firstFocusableEle || target === this.modalEleRef.nativeElement) {\r\n                lastFocusableEle.focus();\r\n                TiModalComponent.preventEvent(event); // 阻止默认事件及继续冒泡，确保此处手动focus生效\r\n            }\r\n\r\n            return;\r\n        }\r\n        // 按下tab键时，如当前已获取焦点元素是弹框中最后一个可获取焦点元素，则聚焦第一个元素\r\n        if (target === lastFocusableEle) {\r\n            firstFocusableEle.focus();\r\n            TiModalComponent.preventEvent(event);\r\n        }\r\n    }\r\n    private getFocusableElesInModal(): Array<Element> {\r\n        if (this.focusableElements.length !== 0) {\r\n            return this.focusableElements;\r\n        }\r\n        const contentEle: Element = this.contentRef.nativeElement;\r\n        if (contentEle) {\r\n            const elements: NodeListOf<Element> = contentEle.querySelectorAll(TiModalComponent.tababbleSelector);\r\n            [].forEach.call(elements, (element: any) => { // 找出页面真实显示的元素，只有显示的元素才可tab聚焦\r\n                if (getComputedStyle(element).display !== 'none' &&\r\n                    element.offsetWidth > 0 && element.offsetHeight > 0) {\r\n                    this.focusableElements.push(element);\r\n                }\r\n            });\r\n        }\r\n\r\n        return this.focusableElements;\r\n    }\r\n}\r\n","import { Component, ViewEncapsulation } from '@angular/core';\r\nimport { TiModalComponent } from './TiModalComponent';\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n    selector: 'ti-modal-wrapper-no-animation',\r\n    templateUrl: './TiModalComponentNoAnimation.html',\r\n    styleUrls: ['./modal.less'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TiModalNoAnimationComponent extends TiModalComponent {\r\n    set showState(value: string) {\r\n        this._showState = value;\r\n        this.onAnimationDone({toState: value});\r\n    }\r\n}\r\n","import { Component, HostListener, Input, Renderer2 } from '@angular/core';\r\nimport { animate, state,  style, transition, trigger } from '@angular/animations';\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const animateStyle: string = '0.3s cubic-bezier(0.40, 0.00, 0.20, 1.00)';\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n    selector: 'ti-backdrop',\r\n    template: `<div class='ti3-modal-backdrop'\r\n                [@.disabled]='!animation' [@backdropAnimate] = 'showState'\r\n                (@backdropAnimate.done)='onAnimationDone($event)'></div>`,\r\n    styleUrls: ['./backdrop.less'],\r\n    animations: [\r\n        trigger('backdropAnimate', [\r\n            state('show', style({\r\n                opacity : 0.2\r\n            })),\r\n            state('hide, void', style({\r\n                opacity: 0\r\n            })),\r\n            transition('show => hide', animate(animateStyle)),\r\n            transition('hide => show', animate(animateStyle))\r\n        ])\r\n    ]\r\n})\r\nexport class TiBackdropComponent {\r\n    constructor(protected renderer: Renderer2) {\r\n    }\r\n\r\n    protected _showState: string; // 组件显示状态，用于控制动画的状态切换\r\n\r\n    set showState(value: string) {\r\n        this._showState = value;\r\n    }\r\n\r\n    get showState(): string {\r\n        return this._showState;\r\n    }\r\n    public animation: boolean;\r\n    public index: number = 0; // 多个弹出框情况下，zindex层级设置辅助\r\n    public destroy: () => void;\r\n    // 在微前端，多个子应用之间url路径跳转,等到弹窗隐藏结束后，this.destroy() 已经无效。\r\n    @HostListener('window:hashchange') onhashchange(): void {\r\n        this.destroy();\r\n    }\r\n    onAnimationDone($event: any): void {\r\n        // 弹框隐藏动画结束后,销毁弹框DOM\r\n        if ($event.toState === 'hide') {\r\n            this.destroy();\r\n\r\n            return;\r\n        }\r\n    }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { TiBackdropComponent } from './TiBackdropComponent';\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n    selector: 'ti-backdrop-no-animation',\r\n    template: `<div class='ti3-modal-backdrop' #backdrop></div>`,\r\n    styleUrls: ['./backdrop.less']\r\n})\r\n\r\nexport class TiBackdropNoAnimationComponent extends TiBackdropComponent {\r\n    set showState(value: string) {\r\n        this._showState = value;\r\n        this.onAnimationDone({toState: value});\r\n    }\r\n}\r\n","import { Component } from '@angular/core';\r\n/**\r\n * 弹框header容器标签，可将弹框头部内容定义在该容器内\r\n */\r\n@Component({\r\n    selector: 'ti-modal-header',\r\n    template: `<span><ng-content></ng-content></span>`,\r\n    host: {\r\n        '[class.ti3-modal-header]': 'true'\r\n    }\r\n})\r\nexport class TiModalHeaderComponent {\r\n}\r\n","import { Component } from '@angular/core';\r\n/**\r\n * 弹框body容器标签，可将弹框body内容定义在该容器内\r\n */\r\n@Component({\r\n    selector: 'ti-modal-body',\r\n    template: `<ng-content></ng-content>`,\r\n    host: {\r\n        '[class.ti3-modal-body]': 'true'\r\n    }\r\n})\r\nexport class TiModalBodyComponent {\r\n}\r\n","import { Component } from '@angular/core';\r\n/**\r\n * 弹框header容器标签，可将弹框底部内容定义在该容器内\r\n */\r\n@Component({\r\n    selector: 'ti-modal-footer',\r\n    template: `<ng-content></ng-content>`,\r\n    host: {\r\n        '[class.ti3-modal-footer]': 'true'\r\n    }\r\n})\r\nexport class TiModalFooterComponent {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { TiRendererModule } from '../renderer/TiRendererModule';\r\nimport { CommonModule } from '@angular/common';\r\n// 命名含有Service的Module，都不是对外暴露的Service，是内部使用。外部使用此Service，导入TiDragModule即可\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiRendererModule\r\n  ]\r\n})\r\nexport class TiDragServiceModule {\r\n}\r\n","import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';\r\nimport { TiRenderer } from '../renderer/TiRenderer';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiDragServiceModule } from './TiDragServiceModule';\r\n// Renderer2注入运行时报错。临时改法，只为通过编译：改为RendererFactory2注入\r\n// 服务的设计目标，并不涉及到渲染。\r\n// https://huncode.com/using-renderer2-inside-services-in-angular/\r\n/**\r\n * 拖拽配置项参数设置接口\r\n */\r\nexport interface TiDraggableConfig {\r\n    /**\r\n     * 可拖拽元素，仅用于服务生成方式的配置\r\n     */\r\n     helper?: Element;\r\n     /**\r\n      * 拖拽生效元素，即只有当鼠标按下该元素时才可开始拖拽\r\n      */\r\n     handle?: Element;\r\n     /**\r\n      * 可拖拽坐标轴，可定义为x/y，即只可在x和Y方向拖拽\r\n      */\r\n     axis?: 'x' | 'y' | null;\r\n     /**\r\n      * 是否可拖拽，仅用于服务生成方式的配置\r\n      */\r\n     disabled?: boolean;\r\n     /**\r\n      * 拖拽开始事件\r\n      */\r\n     start?(): void;\r\n     /**\r\n      * 拖拽中事件\r\n      */\r\n     drag?(): void;\r\n     /**\r\n      * 拖拽结束事件\r\n      */\r\n     stop?(): void;\r\n}\r\n/**\r\n * 拖拽服务，适用于可拖拽元素不在html模板中显示声明的情况，除服务方式外，还提供了指令生成方式[TiDraggableDirective]{@link ../directives/TiDraggableDirective.html}，\r\n * 使用该服务时需要引入模块TiDragServiceModule\r\n *\r\n * <example-url>../tiny3demo/#/drag/drag-all</example-url>\r\n */\r\n@Injectable({\r\n    providedIn: TiDragServiceModule\r\n  })\r\nexport class TiDragService {\r\n    private renderer: Renderer2;\r\n    constructor(rendererFactory: RendererFactory2, private tiRenderer: TiRenderer) {\r\n        /* tslint:disable:no-null-keyword */\r\n        this.renderer = rendererFactory.createRenderer(null, null);\r\n    }\r\n    /**\r\n     * 创建拖拽对象\r\n     *\r\n     * 函数返回值为\r\n     * {\r\n     * destroy: () => void\r\n     * }\r\n     */\r\n    create(options: TiDraggableConfig): {\r\n        destroy(): void\r\n    } {\r\n        const helper: Element = options.helper; // 可拖拽元素，原生HTML类型\r\n        const handle: Element = options.handle || helper; // 拖拽生效元素,未定义情况下，默认为helper元素\r\n        // 标志位，用于记录是否是拖拽引起的事件触发,在mousedown和mouseup中分别进行了置位\r\n        let mouseStart: boolean = false;\r\n        // 记录初始位置信息\r\n        let originalPagePos: {\r\n            pageX: number,\r\n            pageY: number\r\n        };\r\n        let originalPos: {\r\n            left: number\r\n            top: number\r\n        };\r\n        // 设置给helper元素的位置信息，用于位置设置及事件中参数传递\r\n        let position: {\r\n            left: number\r\n            top: number\r\n        };\r\n        // 非定位元素情况下设置left/top无效，因此需先将其设置为relative定位\r\n        // 修复SSR错误：ERROR ReferenceError: getComputedStyle is not defined\r\n        const pos: string = typeof getComputedStyle !== 'undefined' ? getComputedStyle(helper).position : '';\r\n        if (!/(fixed|absolute|relative)/.test(pos)) {\r\n            this.renderer.setStyle(helper, 'position', 'relative');\r\n        }\r\n        // 拖拽时需要用到的mouse事件句柄记录\r\n        let mouseMoveEvt: Function;\r\n        let mouseUpEvt: Function;\r\n        this.renderer.listen(handle, 'mousedown', (event: MouseEvent) => {\r\n            if (options.disabled) {// 灰化情况下不做处理\r\n                return;\r\n            }\r\n            event.preventDefault(); // 阻止拖拽过程中文本的选中处理等操作\r\n            mouseStart = true;\r\n            // 初始拖拽时鼠标距离页面边距位置（包含滚动条在内）\r\n            originalPagePos = {\r\n                pageX: event.pageX,\r\n                pageY: event.pageY\r\n            };\r\n            // 拖拽元素初始位置,由于获取到的位置为'xxpx',因此此处需要转化为数字\r\n            originalPos = position = {\r\n                left: parseInt(getComputedStyle(helper).left, 10) || 0,\r\n                top: parseInt(getComputedStyle(helper).top, 10) || 0\r\n            };\r\n            // 触发初始拖拽事件\r\n            triggerEvt('start');\r\n            mouseMoveEvt = this.renderer.listen(document, 'mousemove', (evt: MouseEvent) => {\r\n                onMouseMove(evt);\r\n            });\r\n            mouseUpEvt = this.renderer.listen(document, 'mouseup', (evt: MouseEvent) => {\r\n                onMouseUp(evt);\r\n            });\r\n        });\r\n        const onMouseMove: (evt: MouseEvent) => void = (evt: MouseEvent): void => {\r\n            // 防止非拖拽触发的mousemove事件\r\n            if (!mouseStart) {\r\n                return;\r\n            }\r\n            evt.preventDefault(); // 阻止拖拽过程中的选中处理等操作\r\n            const topPos: number = (options.axis === 'x')\r\n                                ? originalPos.top\r\n                                : (evt.pageY - originalPagePos.pageY + originalPos.top - document.body.scrollTop);\r\n            const leftPos: number = (options.axis === 'y')\r\n                                    ? originalPos.left\r\n                                    : (evt.pageX - originalPagePos.pageX + originalPos.left - document.body.scrollLeft);\r\n            position = {\r\n                left: leftPos,\r\n                top: topPos\r\n            };\r\n            // 触发拖拽时间，该事件中处理拖拽过程中的位置纠正\r\n            triggerEvt('drag');\r\n            this.tiRenderer.setStyles(helper, {\r\n                left: `${position.left}px`,\r\n                top: `${position.top}px`\r\n            });\r\n        };\r\n        const onMouseUp: (evt: MouseEvent) => void = (evt: MouseEvent): void => {\r\n            mouseStart = false;\r\n            evt.preventDefault();\r\n            triggerEvt('stop');\r\n            // 拖拽停止后，解绑document上的相关事件\r\n            mouseMoveEvt();\r\n            mouseUpEvt();\r\n        };\r\n        const triggerEvt: (evtType: string) => void = (evtType: string): void => {\r\n            if (options[evtType]) {\r\n                const ret: object = options[evtType]({position, helper});\r\n                if (typeof ret === 'object') {\r\n                    position = {...ret, ...position};\r\n                }\r\n            }\r\n        };\r\n\r\n        return {\r\n            destroy: (): void => {\r\n                if (!Util.isUndefined(mouseMoveEvt)) {\r\n                    mouseMoveEvt();\r\n                }\r\n                if (!Util.isUndefined(mouseUpEvt)) {\r\n                    mouseUpEvt();\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n","import {\r\n    Directive,\r\n    ElementRef,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    SimpleChanges\r\n} from '@angular/core';\r\nimport { TiDraggableConfig, TiDragService } from '../../services/drag/TiDragService';\r\n/**\r\n * 拖拽指令，除指令方式外，还提供了服务生成方式[TiDragService]{@link ../injectables/TiDragService.html}\r\n *\r\n * <example-url>../tiny3demo/#/drag/drag-all</example-url>\r\n */\r\n@Directive({\r\n    selector: '[tiDraggable]'\r\n})\r\nexport class TiDraggableDirective implements OnInit, OnChanges, OnDestroy {\r\n    /**\r\n     * 拖拽配置项\r\n     */\r\n    @Input() tiDraggable: TiDraggableConfig;\r\n    /**\r\n     * 拖拽是否灰化，可动态修改\r\n     */\r\n    @Input() tiDragDisabled: boolean = false;\r\n    private dragInstance: {\r\n        destroy(): void\r\n    };\r\n    private options: TiDraggableConfig;\r\n    constructor(private hostEle: ElementRef, private dragService: TiDragService) {}\r\n    ngOnInit(): void {\r\n        this.options = {\r\n            ...this.tiDraggable,\r\n            helper: this.hostEle.nativeElement,\r\n            disabled: this.tiDragDisabled\r\n        };\r\n        this.dragInstance = this.dragService.create(this.options);\r\n    }\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // 通过直接修改options的方式修改disabled状态\r\n        if (changes['tiDragDisabled'] && !changes['tiDragDisabled'].firstChange) {\r\n            this.options.disabled = this.tiDragDisabled;\r\n        }\r\n    }\r\n    ngOnDestroy(): void {\r\n        // 修复SSR错误：TypeError: Cannot read property 'destroy' of undefined\r\n        this.dragInstance && this.dragInstance.destroy();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiDraggableDirective } from './TiDraggableDirective';\r\nimport { TiDragServiceModule } from '../../services/drag/TiDragServiceModule';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiDragServiceModule\r\n  ],\r\n  exports: [TiDraggableDirective, TiDragServiceModule],\r\n  declarations: [TiDraggableDirective]\r\n})\r\nexport class TiDraggableModule {\r\n}\r\nexport { TiDraggableDirective } from './TiDraggableDirective';\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiPopupModule } from '../popup/TiPopupModule';\r\nimport { TiModalComponent } from './TiModalComponent';\r\nimport { TiModalNoAnimationComponent } from './TiModalNoAnimationComponent';\r\nimport { TiBackdropComponent } from './TiBackdropComponent';\r\nimport { TiBackdropNoAnimationComponent } from './TiBackdropNoAnimationComponent';\r\nimport { TiModalHeaderComponent } from './TiModalHeaderComponent';\r\nimport { TiModalBodyComponent } from './TiModalBodyComponent';\r\nimport { TiModalFooterComponent } from './TiModalFooterComponent';\r\nimport { TiRendererModule } from '../renderer/TiRendererModule';\r\nimport { TiDraggableModule } from '../../directives/drag/TiDraggableModule';\r\nimport { TiIconModule } from '../../components/icon/TiIconModule';\r\nimport { TiOutlineModule } from '../../directives/outline/TiOutlineModule';\r\n\r\n@NgModule({\r\n    imports: [CommonModule,\r\n              TiDraggableModule,\r\n              TiIconModule,\r\n              TiPopupModule,\r\n              TiOutlineModule,\r\n              TiRendererModule],\r\n    exports: [TiModalComponent, TiModalNoAnimationComponent,\r\n        TiBackdropNoAnimationComponent, TiModalHeaderComponent,\r\n        TiModalFooterComponent, TiModalBodyComponent],\r\n    declarations: [TiModalComponent, TiModalNoAnimationComponent,\r\n        TiBackdropNoAnimationComponent, TiModalHeaderComponent,\r\n        TiModalFooterComponent, TiModalBodyComponent, TiBackdropComponent],\r\n    entryComponents: [TiModalComponent, TiModalNoAnimationComponent, TiBackdropNoAnimationComponent, TiBackdropComponent]\r\n})\r\nexport class TiModalModule {\r\n}\r\n\r\nexport * from './TiModalInterface';\r\nexport { TiModalHeaderComponent } from './TiModalHeaderComponent';\r\nexport { TiModalFooterComponent } from './TiModalFooterComponent';\r\nexport { TiModalBodyComponent } from './TiModalBodyComponent';\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiImagepreviewComponent } from './TiImagepreviewComponent';\r\nimport { TiModalModule } from '../../services/modal/TiModalModule';\r\nimport { TiIconModule } from '../../components/icon/TiIconModule';\r\nimport { TiOutlineModule } from '../../directives/outline/TiOutlineModule';\r\n\r\n@NgModule({\r\n  imports: [TiModalModule, CommonModule, TiIconModule, TiOutlineModule],\r\n  exports: [TiImagepreviewComponent],\r\n  declarations: [TiImagepreviewComponent]\r\n})\r\n\r\nexport class TiImagepreviewModule {}\r\nexport { TiImagepreviewComponent, TiFilePreviewInfo } from './TiImagepreviewComponent';\r\n","/* eslint-disable no-eq-null */\r\n/* eslint-disable eqeqeq */\r\nimport { Component, ElementRef, Input, QueryList, Renderer2, ViewChildren } from '@angular/core';\r\nimport { TiKeymap, Util } from '../../utils/Util';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\n// 下面注释，可以避免编译lib时正则报错。原理未知，副作用未知。\r\n// @dynamic\r\n/**\r\n * Ip组件\r\n *\r\n * Ip组件提供了一种方便的显示和设置IP地址的功能。\r\n *\r\n * <example-url>../tiny3demo/#/ip/ip-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-ip',\r\n    templateUrl: './ip.html',\r\n    styleUrls: ['./ip.less'],\r\n    providers: [TiFormComponent.getValueAccessor(TiIpComponent)],\r\n    host: {\r\n        '[class.ti_input_ip_container_ipv4]': 'version !== 6',\r\n        '[class.ti_input_ip_container_ipv6]': 'version === 6',\r\n        '(paste)': 'pasteHandle($event)',\r\n        '(blur)': 'blurHandle($event)'\r\n    }\r\n})\r\nexport class TiIpComponent extends TiFormComponent {\r\n    // ipv4 配置参数\r\n    private static readonly ipv4Version: number = 4;\r\n    // 采用华为自研的ipv4正则表达式\r\n    private static readonly ipv4Reg: RegExp = /^(((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))\\.){3}((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))$/i;\r\n    private static readonly ipv4 = {\r\n        ipvCheckReg: /[\\D]/g,\r\n        label: '...',\r\n        placeReg: /\\s/g,\r\n        separator: '.',\r\n        ipValueArray: new Array(4).fill('')\r\n    };\r\n    // ipv6 配置参数\r\n    private static readonly ipv6Version: number = 6;\r\n    // 采用华为自研的ipv6正则表达式\r\n    private static readonly ipv6Reg: RegExp = /^(((([\\da-f]{1,4}):){7}([\\da-f]{1,4}))|(((([\\da-f]{1,4}):){1,7}:)|((([\\da-f]{1,4}):){6}:([\\da-f]{1,4}))|((([\\da-f]{1,4}):){5}:(([\\da-f]{1,4}):)?([\\da-f]{1,4}))|((([\\da-f]{1,4}):){4}:(([\\da-f]{1,4}):){0,2}([\\da-f]{1,4}))|((([\\da-f]{1,4}):){3}:(([\\da-f]{1,4}):){0,3}([\\da-f]{1,4}))|((([\\da-f]{1,4}):){2}:(([\\da-f]{1,4}):){0,4}([\\da-f]{1,4}))|((([\\da-f]{1,4}):){1}:(([\\da-f]{1,4}):){0,5}([\\da-f]{1,4}))|(::(([\\da-f]{1,4}):){0,6}([\\da-f]{1,4}))|(::([\\da-f]{1,4})?))|(((([\\da-f]{1,4}):){6}(((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))\\.){3}((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5])))|((([\\da-f]{1,4}):){5}:(((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))\\.){3}((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5])))|((([\\da-f]{1,4}):){4}:(([\\da-f]{1,4}):)?(((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))\\.){3}((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5])))|((([\\da-f]{1,4}):){3}:(([\\da-f]{1,4}):){0,2}(((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))\\.){3}((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5])))|((([\\da-f]{1,4}):){2}:(([\\da-f]{1,4}):){0,3}(((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))\\.){3}((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5])))|(([\\da-f]{1,4})::(([\\da-f]{1,4}):){0,4}(((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))\\.){3}((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5])))|(::(([\\da-f]{1,4}):){0,5}(((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))\\.){3}((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5])))))$/i;\r\n    private static readonly ipv6 = {\r\n        ipvCheckReg: /[^a-f\\d]/ig,\r\n        label: ':::::::',\r\n        placeReg: /\\s/g,\r\n        separator: ':',\r\n        ipValueArray: new Array(8).fill('')\r\n    };\r\n    private static getGlbInfo(ver: number): any {\r\n        return ver === 4 ? TiIpComponent.ipv4 : TiIpComponent.ipv6;\r\n    }\r\n\r\n    /**\r\n     * ip版本号，可以赋值4或6\r\n     */\r\n    @Input() version: number = 4;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChildren('ipInput') ipInputs: QueryList<ElementRef>;\r\n    /**\r\n     * @ignore\r\n     * 存放 ip 组件各个input框值的数组\r\n     */\r\n    public ipsValues: Array<string>;\r\n\r\n    constructor(protected hostRef: ElementRef, protected renderer2: Renderer2) {\r\n        super(hostRef, renderer2);\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public pasteHandle = (event: any) => {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        event.preventDefault(); // 阻止默认的input原生的粘贴事件（把粘贴板的值粘贴到input框）\r\n        let pasteValue: string = '';\r\n        if (window['clipboardData'] && window['clipboardData'].getData) { // for IE\r\n            pasteValue = window['clipboardData'].getData('Text');\r\n        } else { // For other browser\r\n            try {\r\n                pasteValue = event.clipboardData.getData('Text');\r\n            } catch (err) { }\r\n        }\r\n        const unmaskpaste: string = this.unmask(this.version, pasteValue);\r\n        if (this.isValidIP(this.version, unmaskpaste)) {\r\n            this.updateValue(unmaskpaste); // 粘贴之后更新值\r\n            this.ipsValues = this.splitToIPArray(this.version, this.model); // 内部的操作手动更新数组\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public blurHandle = (event: any) => {\r\n        const ipValue: string = this.generateIPValue(0);\r\n        if (ipValue === '') {\r\n            this.updateValue(ipValue);\r\n        } else {\r\n            const fixedVaule: string = this.blurFixed(this.version, ipValue);\r\n            this.updateValue(this.mask(this.version, fixedVaule));\r\n        }\r\n    }\r\n    private blurFixed(ver: number, ip: string): string {\r\n        const arr: Array<string> = this.splitToIPArray(ver, ip);\r\n        for (let i: number = 0; i < arr.length; i++) {\r\n            if (arr[i] === '') {\r\n                arr[i] = '0';\r\n            }\r\n        }\r\n\r\n        return this.joinToIPValue(ver, arr);\r\n    }\r\n\r\n    // 组件声明周期钩子--start\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.init();\r\n    }\r\n\r\n    private init(): void {\r\n        // 默认是IPv4\r\n        this.version = parseInt(String(this.version), 10) === TiIpComponent.ipv6Version ?\r\n        TiIpComponent.ipv6Version : TiIpComponent.ipv4Version;\r\n        // 初始化ipValueArray  赋值新的数组\r\n        this.ipsValues = TiIpComponent.getGlbInfo(this.version).ipValueArray.concat();\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        super.ngAfterViewInit();\r\n        //  处理 聚焦 并使第一段ip获焦(放在这个钩子的原因：在oninit中拿不到 QueryList 返回的结果集)\r\n        const elements = [];\r\n        this.ipInputs.forEach((item) => {\r\n            elements.push(item.nativeElement);\r\n        });\r\n        // 推荐在onInit()时调用setFocusableElems(), 但是ngFor/ngIf中的元素在ngAfterViewInit()才能获取到\r\n        this.setFocusableElems(elements);\r\n    }\r\n    // 组件声明周期钩子--end\r\n\r\n    // 实现ControlValueAccessor接口--start\r\n    /**\r\n     * @ignore\r\n     */\r\n    writeValue(value: any): void {\r\n\r\n        if (value === '') {\r\n            super.writeValue(value);\r\n            // 对空值做特殊处理,为空时清空IP框\r\n            this.ipsValues = TiIpComponent.getGlbInfo(this.version).ipValueArray.concat();\r\n        } else if (value === this.joinToIPValue(this.version, this.ipsValues)) {\r\n            // 和当前IP框的值相同不处理\r\n        } else if (this.isValidIP(this.version, value) || this.isInputting(this.version, value)) {\r\n            super.writeValue(this.mask(this.version, value));\r\n            this.ipsValues = this.splitToIPArray(this.version, this.model);\r\n        } else {\r\n            // 非法不处理 恢复之前值\r\n            super.writeValue(this.joinToIPValue(this.version, this.ipsValues));\r\n        }\r\n    }\r\n    // 实现ControlValueAccessor接口--end\r\n\r\n    // 组件交互方法集合--start\r\n    /**\r\n     * @ignore\r\n     */\r\n    public keydown(e: any, index: number): void {\r\n        const ipInputs = this.ipInputs;\r\n        const keyCode = e.keyCode;\r\n        this.keydownHandle(e, ipInputs['_results'][index], index, this.version);\r\n        // 按下键为左或右键时，不做重新赋值，避免IE浏览器下重新赋值之后光标位置不准确问题\r\n        if (keyCode === TiKeymap.KEY_ARROW_LEFT || keyCode === TiKeymap.KEY_ARROW_RIGHT) {\r\n            return;\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public input(e: any, index: number): void {\r\n        // 防止中文输入和非法字符的输入\r\n        this.generateIPValue(index);\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public change(index: number): void {\r\n        const ipValues: string = this.generateIPValue(index);\r\n        this.updateValue(ipValues);\r\n    }\r\n\r\n    // 组件交互方法集合--end\r\n\r\n    // 内部公共方法集合--start\r\n    /**\r\n     * @description  将 ip 数组拼接成ip值\r\n     * @param: ver ip版本\r\n     * @param: arr ip字符串中数字组成的数组\r\n     * @returns\r\n     */\r\n    private joinToIPValue(ver: number, arr: Array<string>): string {\r\n        return arr.join(TiIpComponent.getGlbInfo(ver).separator);\r\n    }\r\n    /**\r\n     * @description 将 ip 值分割成ip数组\r\n     * @param: ver ip版本\r\n     * @param: ip ip字符串\r\n     */\r\n    private splitToIPArray(ver: number, ip: string): Array<string> {\r\n        const res: Array<string> = ip ? ip.split(TiIpComponent.getGlbInfo(ver).separator) : [];\r\n\r\n        return res;\r\n    }\r\n    private isInputting(ver: number, value: string): boolean {\r\n        const arr: Array<string> = this.splitToIPArray(ver, value);\r\n\r\n        return arr.indexOf('') >= 0;\r\n    }\r\n    // 判断当前ip值是否合法\r\n    private isValidIP(ver: number, ip: string): boolean {\r\n        if (ip === null || ip === undefined) {\r\n            return false;\r\n        }\r\n        const rgx = (ver === TiIpComponent.ipv4Version) ? TiIpComponent.ipv4Reg : TiIpComponent.ipv6Reg;\r\n        return rgx.test(ip);\r\n    }\r\n    /**\r\n     * @description IP需要去除前面的0，例如：,“012.12.23.002”经过该函数处理后变为：“12.12.23.2”；IPv6支持缩略格式\r\n     * @param: ver ip版本\r\n     * @param: ip ip字符串\r\n     * @returns\r\n     */\r\n    private mask(ver: number, ip: string): string {\r\n        const ipInfo = TiIpComponent.getGlbInfo(ver);\r\n        const part = ip.split(ipInfo.separator);\r\n        const partLength = part.length;\r\n        if (ver === 4) {\r\n            for (let i: number = 0; i < partLength; i++) {\r\n                if (part[i] !== '') {\r\n                    let partNumber = parseInt(part[i], 10);\r\n                    // parseInt(part[i], 10) /= 1;\r\n                    partNumber /= 1; // 将part[j]转化为整数，目的是消除前面的0\r\n                    part[i] = String(partNumber); // 再转化为字符串\r\n                }\r\n            }\r\n        } else {\r\n            // IPv6支持缩略格式，即任何由全0组成的1个或多个16位段的单个连续的字符串 都可以用一个双冒号“::”，且“::”只出现一次；例如：2001:d02::14:95\r\n            // 用‘0’补齐缩略格式缺少个数\r\n            while (part.length < 8) {\r\n                let index = part.indexOf('');\r\n                part.splice(index, 0, '0')\r\n            }\r\n\r\n            part.forEach((partItem, index) => {\r\n                //  查找是否有1-9和字母，如果没有，替换为0，如果有，去除前面的0\r\n                if (partItem.match(/[1-9a-f]/i)) {\r\n                    part[index] = partItem.replace(/^0{1,3}/i, '')\r\n                } else if (partItem !== '0') {\r\n                    part[index] = '0';\r\n                }\r\n            });\r\n        }\r\n\r\n        return part.join(ipInfo.separator);\r\n    }\r\n    /**\r\n     * @description 去掉空格后的IP地址；例如“  12.12 .23.2  ”进过该函数处理后返回：“12.12.23.2”\r\n     * @param: ver ip版本\r\n     * @param: ip ip字符串\r\n     */\r\n    private unmask(ver: number, ip: string): string {\r\n        const iPInfo = TiIpComponent.getGlbInfo(ver);\r\n\r\n        return ip.replace(iPInfo.placeReg, '');\r\n    }\r\n\r\n    /**\r\n     * @description  获取当前ip段输入的值并进行判断，合法时更新到当前ip段输入框内，并拼接返回整体ip值\r\n     * @param: index 当前输入框的下标\r\n     */\r\n    private generateIPValue(index: number): string {\r\n        const ipInfo = TiIpComponent.getGlbInfo(this.version);\r\n        const cellArray = this.ipInputs;\r\n        let value = cellArray['_results'][index].nativeElement.value;\r\n        if (ipInfo.ipvCheckReg.test(value)) {\r\n            value = value.replace(ipInfo.ipvCheckReg, '');\r\n        }\r\n\r\n        // ipv4下，当前输入框值大于255时，强制转换成255\r\n        if (this.version === TiIpComponent.ipv4Version && value > 255) {\r\n            value = 255;\r\n        }\r\n        for (let i: number = 0; i < this.ipsValues.length; i++) {\r\n            if (i === index) {\r\n                this.ipsValues[i] = value;\r\n                cellArray['_results'][index].nativeElement.value = value;\r\n            }\r\n        }\r\n        let ipValues;\r\n        ipValues = this.ipsValues.join(ipInfo.separator);\r\n        if (ipValues === ipInfo.label) {\r\n            ipValues = '';\r\n        }\r\n        return ipValues;\r\n    }\r\n    // 更新value值 //TODO: Tiny3考虑去除这个函数，用writeValue代替\r\n    private updateValue(newValue: string): void {\r\n        if (newValue === this.model) {\r\n            return;\r\n        }\r\n        // 记录ip的值在value中,方便用户获取\r\n        this.model = newValue;\r\n        this.writeValue(newValue);\r\n    }\r\n    // keydown事件触发时，判断并设置组件光标位置\r\n    private keydownHandle(e: any, thisInput: ElementRef, index: number, ver: number): void {\r\n        const ipInputsLength = this.ipInputs.length;\r\n        const nextCell = index < ipInputsLength - 1 ?\r\n            this.ipInputs['_results'][index + 1] : undefined;\r\n        const prevCell = index > 0 ? this.ipInputs['_results'][index - 1] : undefined;\r\n\r\n        const keyCode = e.keyCode;\r\n        // 键盘码110代表. 190代表 >.---当键盘码为这两种时,跳至下一输入框中,并选中该输入框中的值\r\n        if (keyCode === TiKeymap.KEY_NUMPAD_DECIMAL || keyCode === TiKeymap.KEY_PERIOD) {\r\n            if (!Util.isUndefined(nextCell)) {  // 非最后一个输入框时，跳至下一输入框\r\n                nextCell.nativeElement.focus();\r\n                nextCell.nativeElement.select();\r\n            }\r\n            e.preventDefault(); // 不论是否为最后一个输入框,防止默认事件发生,否则输入框中会出现 ...\r\n            return;\r\n        }\r\n        // 光标后移到下一段ip\r\n        if (this.isMoveToNext(e, thisInput, nextCell, ver)) {\r\n            nextCell.nativeElement.focus();\r\n            this.caret(nextCell, 0); // 设置光标位置\r\n        }\r\n\r\n        // 光标前移到上一段ip\r\n        if (this.isMoveToPrevous(keyCode, thisInput, prevCell)) {\r\n            this.caret(prevCell, prevCell.nativeElement.value.length); // 设置光标位置\r\n            e.preventDefault(); // 防止默认事件发生,否则输入框中的回退光标位置会有问题\r\n        }\r\n\r\n    }\r\n    // 判断当前是否需要将光标移至后一段ip\r\n    private isMoveToNext(e: any, thisInput: ElementRef, nextCell: ElementRef, ver: number): boolean {\r\n        // 如果下一段ip不存在直接返回false\r\n        if (Util.isUndefined(nextCell)) {\r\n            return false;\r\n        }\r\n        // 如果输入为合法数字,输入框中已有3个值,光标位于输入框末尾,并且存在下一输入框, 则跳至下一输入框\r\n        let isFullToNext;\r\n        if (ver !== TiIpComponent.ipv6Version) {\r\n            isFullToNext = this.checkIpv4MoveToNext(thisInput, e);\r\n        } else {\r\n            isFullToNext = this.checkIpv6MoveToNext(thisInput, e);\r\n        }\r\n        // 当为向右键时→,且光标位置在该输入框末尾。则直接跳到下一输入框中\r\n        const keyCode = e.keyCode;\r\n        const isRightToNext = keyCode === TiKeymap.KEY_ARROW_RIGHT\r\n            && this.caret(thisInput)[0] === thisInput.nativeElement.value.length;\r\n        return isFullToNext || isRightToNext;\r\n    }\r\n    // 判断当前是否需要将光标移至前一段ip\r\n    private isMoveToPrevous(keyCode: number, thisInput: ElementRef, prevCell: ElementRef): boolean {\r\n        // 1.当为向左键(37),且光标位置位于输入框起始位置时,则跳至前一输入框中;\r\n        // 2.当为backspace键,且已回删至输入框起始位置 跳至前已输入框中\r\n        // 3.输入框处于选中状态时，按backspace键不跳到前一输入框中\r\n        return !Util.isUndefined(prevCell) &&\r\n            ((keyCode === TiKeymap.KEY_ARROW_LEFT && this.caret(thisInput)[0] === 0)  // 按左键\r\n                || (keyCode === TiKeymap.KEY_BACKSPACE && this.caret(thisInput)[0] === 0) // 按后退键并且删除完\r\n                && (this.caret(thisInput)[0] === this.caret(thisInput)[1])); // 输入框处于选中状态按后退键不跳到前一个输入框\r\n    }\r\n\r\n    // 判断当前段ipv4输入框是否已满3,末端是合法字符，且光标位置在此段ip最后\r\n    private checkIpv4MoveToNext(thisInput: ElementRef, e: any): boolean {\r\n        return (thisInput.nativeElement.value.length === 3) && (this.isNumeric(e)\r\n            && (this.caret(thisInput)[0] === 3));\r\n    }\r\n    // 判断当前段ipv6输入框是否已满4未合法字符，且光标位置在此段ip最后\r\n    private checkIpv6MoveToNext(thisInput: ElementRef, e: any): boolean {\r\n        return (thisInput.nativeElement.value.length === 4) && (this.isHexaDecimal(e)\r\n            && (this.caret(thisInput)[0] === 4));\r\n    }\r\n    // 判断输入是否为ipv4合法字符\r\n    private isNumeric(e: any): boolean {\r\n        if (e.shiftKey || e.ctrlKey) {\r\n            return false;\r\n        }\r\n        const code = e.keyCode;\r\n        return (code >= TiKeymap.KEY_0 && code <= TiKeymap.KEY_9) ||\r\n            (code >= TiKeymap.KEY_NUMPAD_0 && code <= TiKeymap.KEY_NUMPAD_9);\r\n    }\r\n    // 判断输入是否为ipv6合法字符\r\n    private isHexaDecimal(e: any): boolean {\r\n        const keyCode = e.keyCode;\r\n        // ctrl键组合其它情况，输入框中不会输入有效字符，返回\r\n        if (e.ctrlKey) {\r\n            return false;\r\n        }\r\n        // 输入有效字符情况：1）a~f 2）有效数字\r\n        const isValidInput = (keyCode >= TiKeymap.KEY_A && keyCode <= TiKeymap.KEY_F)\r\n            || (keyCode >= TiKeymap.KEY_NUMPAD_0 && keyCode <= TiKeymap.KEY_NUMPAD_9)\r\n            || (keyCode >= TiKeymap.KEY_0 && keyCode <= TiKeymap.KEY_9);\r\n        return isValidInput;\r\n    }\r\n\r\n    /**\r\n     * @description  获取或设置光标位置\r\n     * @param: ele 光标所在dom\r\n     * @param: s 开始位置\r\n     * @param: e 结束位置\r\n     */\r\n    private caret(ele: ElementRef, s?: number, e?: number): any {\r\n        const element = ele.nativeElement;\r\n        const setPosition = function (el, start, end) {\r\n            if (el.setSelectionRange) {\r\n                el.focus();\r\n                el.setSelectionRange(start, end);\r\n            } else if (el.createTextRange) {\r\n                const range = el.createTextRange();\r\n                range.collapse(true);\r\n                range.moveEnd('character', end);\r\n                range.moveStart('character', start);\r\n                range.select();\r\n            }\r\n        };\r\n\r\n        if (s != null && e != null) {// setting range\r\n            return setPosition(element, s, e);\r\n        } else if (s != null) {// setting position\r\n            return setPosition(element, s, s);\r\n        }\r\n\r\n        // getting\r\n        if (element.createTextRange && document['selection']) {\r\n            const r = document['selection'].createRange().duplicate();\r\n\r\n            const end = element.value.lastIndexOf(r.text) + r.text.length;\r\n\r\n            r.moveEnd('character', element.value.length);\r\n            const start = (r.text === '') ? element.value.length : element.value.lastIndexOf(r.text);\r\n\r\n            return [start, end];\r\n        }\r\n\r\n        return [element.selectionStart, element.selectionEnd];\r\n    }\r\n    /**\r\n     * @ignore\r\n     * ngFor遍历的 trackBy函数，防止数据更新导致所有DOM重新渲染\r\n     */\r\n    public trackByFn(index: any, item: any): any {\r\n        return index;\r\n    }\r\n    // 内部公共方法集合--end\r\n}\r\n","import { FormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiIpComponent } from './TiIpComponent';\r\nimport { TiTextModule } from '../text/TiTextModule';\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        TiTextModule\r\n    ],\r\n    exports: [TiIpComponent],\r\n    declarations: [TiIpComponent]\r\n})\r\n\r\nexport class TiIpModule {\r\n}\r\nexport { TiIpComponent } from './TiIpComponent';\r\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiValidationConfig } from '../../directives/validation/TiValidationModule';\r\nimport { FormBuilder, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\r\n\r\nexport interface TiIpsectionConfig {\r\n    /**\r\n     * 标志各网段\r\n     */\r\n    section: number;\r\n    /**\r\n     * 网段为select类型时，下拉配置对象\r\n     */\r\n    options?: Array<any>;\r\n    /**\r\n     * 网段为input类型时，设置文本是否加粗\r\n     */\r\n    bold?: boolean;\r\n    /**\r\n     * 网段为input类型时，配置校验提示信息，可参考校验组件示例\r\n     */\r\n    validation?: TiValidationConfig;\r\n    /**\r\n     * 网段为input类型时，配置校验规则，可参考校验组件示例\r\n     */\r\n    validationRules?: Array<ValidatorFn>;\r\n    /**\r\n     * 设置各网段是否灰化\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * 允许有多余的属性字段\r\n     */\r\n    [propName: string]: any;\r\n}\r\n/**\r\n * Ipsection组件，Ip各网段分开处理，各网段有下拉类和输入类两种类型；\r\n *\r\n * 9.0.4新增\r\n *\r\n * <example-url>../tiny3demo/#/ipsection/ipsection-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-ipsection',\r\n    templateUrl: 'ipsection.html',\r\n    styleUrls: ['./ipsection.less'],\r\n    host: {\r\n        '[class.ti3-ipsection-container]': 'true',\r\n        '(blur)': 'onBlur($event)'\r\n    },\r\n    providers: [TiFormComponent.getValueAccessor(TiIpsectionComponent)]\r\n})\r\n\r\nexport class TiIpsectionComponent extends TiFormComponent {\r\n    /**\r\n     * Ip网段配置数组对象，组件按该配置数组对象顺序渲染数据\r\n     */\r\n    @Input() configs: Array<TiIpsectionConfig>;\r\n    /**\r\n     * @ignore\r\n     * 存放 input 控件实例数组\r\n     */\r\n    private controls: Array<FormControl> = [];\r\n    /**\r\n     * @ignore\r\n     * 格式化输入\r\n     */\r\n    public maskInput: string = '000';\r\n    /**\r\n     * @ignore\r\n     * 存放各网段 ip 值的数组\r\n     */\r\n    public ipValues: Array<string> = [];\r\n    /**\r\n     * input控件 FormGroup 实例，服务可通过该实例动态更改某一FormControl实例相关属性（value，disabled，校验规则等）\r\n     */\r\n    public formGroup: FormGroup;\r\n\r\n    constructor(protected hostRef: ElementRef, protected renderer2: Renderer2, private fb: FormBuilder) {\r\n        super(hostRef, renderer2);\r\n        this.formGroup = fb.group({});\r\n    }\r\n\r\n    /**\r\n     * 将ip值分割为数组\r\n     */\r\n    private static splitToIPArray(ipValue: string): Array<string> {\r\n        const ipArray: Array<string> = ipValue ? ipValue.replace(/\\//, '.').split('.') : [];\r\n\r\n        return ipArray;\r\n    }\r\n\r\n    /**\r\n     * 将ip数组拼接为ip值\r\n     */\r\n    private static joinToIPValue(ipArray: Array<string>): string {\r\n        let ipValue: string = ipArray.join('.');\r\n        if (ipArray.length > 4) {\r\n            ipValue = ipValue.replace(/(.*)\\./, '$1/');\r\n        }\r\n\r\n        return ipValue;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        // 创建表单控件实例\r\n        for (let i: number = 0; i < this.configs.length; i++) {\r\n            if (!this.configs[i].options) {\r\n                this.controls[i] = new FormControl();\r\n                this.formGroup.addControl(`input_${i}`, this.controls[i]);\r\n                // input类型网段值更改时触发事件\r\n                this.controls[i].valueChanges.subscribe((value: any) => {\r\n                    this.updateIpValue(i, value);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        const itemElems: HTMLCollection = this.hostRef.nativeElement.getElementsByClassName('ti3-ipsection');\r\n        const focusElements: Array<any> = [];\r\n\r\n        // 设置可聚焦元素\r\n        for (let i: number = 0; i < this.configs.length; i++) {\r\n            if (itemElems[i].firstChild) {\r\n                focusElements.push(itemElems[i].firstChild);\r\n            } else {\r\n                this.setAttr(itemElems[i], 'disabled', this.configs[i].disabled || this.disabled);\r\n                focusElements.push(itemElems[i]);\r\n            }\r\n        }\r\n        this.setFocusableElems(focusElements);\r\n\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 获取model值，并进行初始化处理\r\n     */\r\n    writeValue(value: any): void {\r\n        super.writeValue(value);\r\n        this.ipValues = TiIpsectionComponent.splitToIPArray(value);\r\n\r\n        this.initIpValue();\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 整体失焦触发事件\r\n     */\r\n    onBlur(event: any): void {\r\n        this.formatValue();\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * select类型网段值更改时触发事件\r\n     */\r\n    onChange(i: number, value: any): void {\r\n        this.updateIpValue(i, value);\r\n    }\r\n\r\n    /**\r\n     * 初始化ip值\r\n     */\r\n    private initIpValue(): void {\r\n        for (let i: number = 0; i < this.configs.length; i++) {\r\n            if (this.configs[i].options) {\r\n                // 初始显示默认选中项，若value值在options存在，则显示该值，否则显示下拉配置项第一项\r\n                this.configs[i].selected = this.configs[i].options.find(item => item === this.ipValues[i]) ? this.ipValues[i] : this.configs[i].options[0];\r\n                this.updateIpValue(i, this.configs[i].selected);\r\n            } else {\r\n                // 初始设置value，disabled及校验规则\r\n                this.ipValues[i] = this.ipValues[i] ? parseInt(this.ipValues[i], 10).toString() : '';\r\n                this.controls[i].setValue(this.ipValues[i]);\r\n                this.controls[i].setValidators(this.configs[i].validationRules);\r\n                this.configs[i].disabled || this.disabled ? this.controls[i].disable() : this.controls[i].enable();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初始及失焦处理输入框值，清除Ip网段前面的0\r\n     */\r\n    private formatValue(): void {\r\n        for (let i: number = 0; i < this.configs.length; i++) {\r\n            if (!this.configs[i].options) {\r\n                this.controls[i].setValue(parseInt(this.controls[i].value, 10).toString());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新model值\r\n     */\r\n    private updateIpValue(index?: number, value?: any): string {\r\n        if (this.ipValues.length <= 0 || this.ipValues[index] === value) {\r\n            return;\r\n        }\r\n\r\n        this.ipValues.splice(index, 1, value);\r\n        const ipValue: string = TiIpsectionComponent.joinToIPValue(this.ipValues);\r\n        this.model = (ipValue === '...' || ipValue === '.../') ?  '' : ipValue;\r\n\r\n        return ipValue;\r\n    }\r\n}\r\n","import { Component, ContentChild, EventEmitter, HostListener, Input, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { TiFormComponent, TiWholeComponent } from '../base/TiBaseModule';\r\nimport { TiDominatorComponent } from '../dominator/TiDominatorModule';\r\nimport { TiDropComponent } from '../drop/TiDropModule';\r\nimport { TiDropsearchComponent } from '../dropsearch/TiDropsearchModule';\r\nimport { TiKeymap } from '../../utils/Util';\r\nimport { TiPositionType } from '../../utils/Position';\r\n\r\n\r\n/**\r\n * Select选择下拉组件\r\n *\r\n * 支持单选/多选，分组，搜索，懒加载。\r\n *\r\n * 单选主要功能为从一个数据集合中选择某一条数据，单选与RadioGroup功能相同，只是视觉呈现不同。\r\n *\r\n * 多选主要功能是从一个数据集合中任意选择多条数据，与checkboxGroup功能相同，只是视觉呈现不同。\r\n *\r\n * <example-url>../tiny3demo/#/select/select-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-select',\r\n    templateUrl: './select.html',\r\n    styleUrls: ['./select.less', './select-small.less'],\r\n    providers: [TiFormComponent.getValueAccessor(TiSelectComponent)],\r\n    host: {\r\n        '[class.ti3-select-small]': 'size === \"small\"',\r\n        '(blur)': 'onBlur()'\r\n    }\r\n})\r\nexport class TiSelectComponent extends TiWholeComponent {\r\n    /**\r\n     * @ignore\r\n     * dominator 到drop的距离\r\n     */\r\n    @Input() dominatorSpace: string = TiDropComponent.DOMINATOR_SPACE + 'px';\r\n    /**\r\n     * 是否多选\r\n     */\r\n    @Input() multiple: boolean = false;\r\n    /**\r\n     * 多选时, 选中项显示几行\r\n     *\r\n     * 版本 v9.0.4 添加\r\n     */\r\n    @Input() maxLine: number = 2;\r\n    /**\r\n     * 选中项文本超出时tip展开方向\r\n     *\r\n     * 9.0.3 新增\r\n     */\r\n    @Input() selectedTipPosition: TiPositionType = 'auto';\r\n    /**\r\n     * 预留文本\r\n     */\r\n    @Input() placeholder: string = '';\r\n     // 面板配置\r\n    /**\r\n     * 下拉面板的最大显示宽度，该变量与下拉类组件保持一致\r\n     *\r\n     * 1.\"justified\"(默认): 下拉框的宽度与Select组件的宽度保持一致；\r\n     *\r\n     * 2.\"auto\": 下拉框的宽度根据下拉选项的内容自动撑开；\r\n     *\r\n     * 3.表示宽度的字符串: 设置固定的下拉框宽度(不小于Select组件的宽度)。例如：\"200px\"\r\n     */\r\n    @Input() panelWidth: 'justified' | 'auto'| string = 'justified'; // TODO: 确认类型\r\n    /**\r\n     * 下拉面板的最大显示高度，溢出时则出滚动条。\r\n     *\r\n     *  缺省值 : 最大显示8条数据（有无searchbox都显示8条）\r\n     */\r\n    @Input() panelMaxHeight: string;\r\n    /**\r\n     * 无数据时的显示文本\r\n     */\r\n    @Input() noDataText: string = '...';\r\n    // 列表数据配置\r\n    /**\r\n     * 下拉选项的全部数据\r\n     */\r\n    @Input() options: Array<any>;\r\n    /**\r\n     * 要显示的字段\r\n     */\r\n    @Input() labelKey: string = 'label';\r\n    /**\r\n     * 要搜索的字段数组, 默认是[labelKey]\r\n     */\r\n    @Input() searchKeys: Array<string>;\r\n    // 其他配置\r\n    /**\r\n     * 是否显示搜索框\r\n     */\r\n    @Input() searchable: boolean = false;\r\n    /**\r\n     * @ignore\r\n     * 大小样式\r\n     */\r\n    @Input() size: 'default' | 'small' = 'default';\r\n    /**\r\n     * 文字超长显示...，hover时tip弹出方向\r\n     */\r\n    @Input() tipPosition: TiPositionType = 'right';\r\n    /**\r\n     * 单选下拉选择框是否开启清除已选项功能\r\n     *\r\n     * 3.0.8新增\r\n     */\r\n    @Input() clearable: boolean = false;\r\n    /**\r\n     * 多选下拉选择框是否开启全选功能\r\n     *\r\n     * 3.1.2新增\r\n     */\r\n    @Input() selectAll: boolean = false;\r\n    /**\r\n     * 设置是否显示已选项的个数，默认不显示，multiple为true时生效\r\n     *\r\n     * 10.1.0新增\r\n     */\r\n    @Input() showSelectedNumber: boolean = false ;\r\n    /**\r\n     * 用户想要打开面板的通知事件，一般用于数据懒加载。使用方式，见懒加载示例\r\n     */\r\n    @Output() readonly beforeOpen: EventEmitter<TiSelectComponent> = new EventEmitter<TiSelectComponent>();\r\n    // 3.0.2增加select接口\r\n    /**\r\n     * 多选选中/取消选中事件，向外通知option数据，需要自行判断option数据是否选中。\r\n     */\r\n    // tslint:disable-next-line:no-output-named-after-standard-event\r\n    @Output() readonly select: EventEmitter<any> = new EventEmitter<any>();\r\n    /**\r\n     * 当单选下拉选择框开启清除已选项功能时，点击清除按钮时触发\r\n     *\r\n     * 3.0.8新增\r\n     */\r\n    @Output() readonly clear: EventEmitter<any> = new EventEmitter<any>();\r\n    /**\r\n     * @ignore\r\n     * 10.0.2新增\r\n     *\r\n     * 后台搜索，传出搜索框的值\r\n     */\r\n    @Output() readonly beforeSearch: EventEmitter<any> = new EventEmitter<any>();\r\n    /**\r\n     * @ignore\r\n     * 用户写的item模板，firstTemplate是第一个或者唯一的template\r\n     */\r\n    @ContentChild(TemplateRef, /* TODO: add static flag */ { static: true }) firstTemplate: TemplateRef<any>;\r\n    @ContentChild('item', /* TODO: add static flag */ { static: true }) itemTemplate: TemplateRef<any>;\r\n    @ContentChild('selected', /* TODO: add static flag */ { static: true }) selectedTemplate: TemplateRef<any>;\r\n    @ContentChild('placeholder', /* TODO: add static flag */ { static: true }) placeholderTemplate: TemplateRef<any>;\r\n    @ContentChild('footer', /* TODO: add static flag */ { static: true }) footerTemplate: TemplateRef<any>;\r\n\r\n    /**\r\n     * @ignore\r\n     * 内部标签donimator组件\r\n     */\r\n    @ViewChild(TiDominatorComponent, /* TODO: add static flag */ { static: true }) dominatorCom: TiDominatorComponent;\r\n    /**\r\n     * @ignore\r\n     * 内部标签Droplist组件\r\n     */\r\n    @ViewChild(TiDropsearchComponent, { static: true }) dropsearchCom: TiDropsearchComponent;\r\n    protected oldSearchable: boolean = null;\r\n    public pagination: any; // 没有指定类型是因为如果引入TiPaginationComponent会因为循环引用导致报错\r\n    // tslint:disable-next-line: use-life-cycle-interface\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        if (this.beforeSearch.observers.length !== 0) {\r\n            this.dropsearchCom.hasBeforeSearchObservers = true;\r\n        }\r\n    }\r\n    /**\r\n     * 兼容旧版：\r\n     * 3.1.2版select只能内嵌一个模板，无命名。\r\n     * 新版可以内嵌四个模板，示例书写要求都命名。\r\n     * 但需要兼容旧版无命名测试用例。\r\n     */\r\n    // tslint:disable-next-line: use-life-cycle-interface\r\n    ngAfterContentInit(): void {\r\n        super.ngAfterContentInit();\r\n        // 如果item模板为空，那么把第一个出现的无标签（无footer等标签）模板作为item\r\n        if (!this.itemTemplate && this.firstTemplate) {\r\n            const firstTemplateEle: Element = this.firstTemplate.elementRef.nativeElement;\r\n            if (firstTemplateEle !== (this.selectedTemplate && this.selectedTemplate.elementRef.nativeElement)\r\n                && firstTemplateEle !== (this.placeholderTemplate && this.placeholderTemplate.elementRef.nativeElement)\r\n                && firstTemplateEle !== (this.footerTemplate && this.footerTemplate.elementRef.nativeElement)) {\r\n                    this.itemTemplate = this.firstTemplate;\r\n            }\r\n        }\r\n    }\r\n    // tslint:disable-next-line: use-life-cycle-interface\r\n    ngAfterViewChecked(): void {\r\n        // 要支持searchable的动态变更，所以ngAfterViewChecked才能获知搜索框节点。\r\n        if (this.searchable !== this.oldSearchable) {\r\n            this.oldSearchable = this.searchable;\r\n            if (this.searchable) {\r\n                this.setFocusableElems(this.dominatorCom.getFocusableElems()\r\n                    .concat(this.dropsearchCom.getFocusableElems()));\r\n            } else {\r\n                this.setFocusableElems(this.dominatorCom.getFocusableElems());\r\n            }\r\n        }\r\n        if (this.pagination && this.pagination.updateFocusableElems) {\r\n            this.setFocusableElems(this.dominatorCom.getFocusableElems()\r\n                    .concat(this.dropsearchCom.getFocusableElems()));\r\n            this.pagination.updateFocusableElems = false;\r\n        }\r\n        // 上面设置好focusElems后，调用父类逻辑afterViewChecked才去设置autofocs\r\n        super.ngAfterViewChecked();\r\n\r\n    }\r\n\r\n    /**\r\n     * 切换面板开合状态\r\n     */\r\n    public toggle(): void {\r\n        if (!this.dropsearchCom.isShow) { // 面板关闭时\r\n            this.wantOpen();\r\n        } else { // 面板开时\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * 打开面板\r\n     */\r\n    public open(): void {\r\n        this.dropsearchCom.show();\r\n    }\r\n    /**\r\n     * 闭合面板\r\n     */\r\n    public close(): void {\r\n        this.dropsearchCom.hide();\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 处理点击Dominator事件\r\n     */\r\n    public onClickDominator(): void {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        this.toggle();\r\n    }\r\n    /**\r\n     * @ignore\r\n     * ti-select键盘事件处理：回车/空格情况下，展开面板\r\n     * @param event 按键事件\r\n     * @returns void\r\n     */\r\n    @HostListener('keydown', ['$event']) public onKeydown(event: KeyboardEvent): void {\r\n        if (this.disabled || this.dropsearchCom.isShow) {\r\n            return;\r\n        }\r\n        const enterKeyCodeArr: Array<number> = [TiKeymap.KEY_SPACE, TiKeymap.KEY_ENTER, TiKeymap.KEY_NUMPAD_ENTER];\r\n        if (enterKeyCodeArr.includes(event.keyCode)) {\r\n            this.wantOpen();\r\n            // 如果响应了按键，那么不再冒泡\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 失焦情况下，仅关闭面板，不做聚焦等处理\r\n     */\r\n    public onBlur(): void {\r\n        this.dropsearchCom.hideWithoutFocus();\r\n    }\r\n    /**\r\n     *  点击或者toggle()，触发想要打开面板\r\n     */\r\n    protected wantOpen(): void {\r\n      if (this.beforeOpen.observers.length === 0) { // 无beforeOpen懒加载，直接打开\r\n            this.open();\r\n      } else { // 有beforeOpen懒加载，发出事件\r\n            this.beforeOpen.emit(this);\r\n      }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 多选带searchbox场景下，dominator中元素删除时，需要聚焦于searchbox\r\n     */\r\n    public onDeleteDominator(): void {\r\n        if (this.dropsearchCom.isShow) {\r\n            this.dropsearchCom.focus();\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 触发select事件\r\n     */\r\n    public onSelect(option: any): void {\r\n        this.select.emit(option);\r\n        if (this.multiple) {\r\n            return;\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 单选点击清除按钮时触发clear事件, 如果下拉中有搜索,则需要聚焦于searchbox。\r\n     */\r\n    public onClearDominator(): void {\r\n        if (this.multiple || !this.clearable) {\r\n            return;\r\n        }\r\n        this.clear.emit();\r\n        if (this.searchable && this.dropsearchCom.isShow) {\r\n            this.dropsearchCom.focus();\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public onBeforeSearch(): void {\r\n        this.beforeSearch.emit(this);\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 10.0.2新增\r\n     *\r\n     * 获取可搜索场景下，搜索框的内容\r\n     * @returns 搜索框的内容\r\n     */\r\n    public getSearchWord(): string {\r\n        return this.dropsearchCom.searchWord;\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 10.0.2新增\r\n     *\r\n     * 设置搜索结果\r\n     * @params 业务搜索后的结果，组件不再进行数据处理\r\n     */\r\n    public setSearchResult(searchResult: Array<any>): void {\r\n        this.dropsearchCom.setSearchResult(searchResult);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TiDropModule } from '../drop/TiDropModule';\r\nimport { TiDropsearchModule } from '../dropsearch/TiDropsearchModule';\r\nimport { TiDominatorModule } from '../dominator/TiDominatorModule';\r\nimport { TiSelectComponent } from './TiSelectComponent';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TiDominatorModule,\r\n    TiDropModule,\r\n    TiDropsearchModule\r\n  ],\r\n  exports: [TiSelectComponent],\r\n  declarations: [TiSelectComponent]\r\n})\r\nexport class TiSelectModule {\r\n}\r\n\r\nexport { TiSelectComponent } from './TiSelectComponent';\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Input,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { DefaultValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { TiBrowser, Util } from '../../utils/Util';\r\n/**\r\n * TiMask 格式化数字指令\r\n *\r\n * 该指令主要用于输入框中，限制用户只能输入数字，可以通过设置tiMask属性接口设置其数字的格式：身份证，手机号码等形式输入。\r\n *\r\n * 输入框中呈现的是格式化后的数字，但是通过ngModel取得的值为纯数字的值，如输入框中呈现的值为'123 456 789'，通过ngModel取得的值为'123456789'\r\n *\r\n * <example-url>../tiny3demo/#/maskinput/maskinput-all</example-url>\r\n */\r\n@Directive({\r\n    selector: '[tiMask]',\r\n    providers: [\r\n        {// MASK_INPUT_VALUE_ACCESSOR, 原本是外部变量或者static变量，lib编译不通过\r\n            provide: NG_VALUE_ACCESSOR,\r\n            // tslint:disable-next-line:no-forward-ref\r\n            useExisting: forwardRef(() => TiMaskDirective),\r\n            multi: true\r\n        }\r\n    ],\r\n    host: {\r\n        '(input)': 'handleInput($event.target.value)',\r\n        '(compositionstart)': 'handleCompositionStart()',\r\n        '(compositionend)': 'handleCompositionEnd($event.target.value)',\r\n        '(blur)': 'blur()'\r\n    }\r\n})\r\nexport class TiMaskDirective extends DefaultValueAccessor  {\r\n    private static readonly NUM_SIGN: string = '0';\r\n    /**\r\n     * 设置其数字的格式：身份证，手机号码等形式输入，例如手机号格式：'000 0000 0000'，\r\n     * 其中 '0' 代表数字。\r\n     */\r\n    @Input('tiMask') format: string = '000 0000 0000';\r\n    private element: HTMLInputElement;\r\n    private ctxPos: any;\r\n    private valueCharPosOffset: any;\r\n    private composing: boolean = false; // 是否正在拼写拼音\r\n    private onChangeFn: Function; // 需要在registerOnChange中注册，用于改变模型值时调用\r\n    private modelValue: any;\r\n    constructor(private renderer: Renderer2, private elementRef: ElementRef) {\r\n            // super中第三个参数是DefaultValueAccessor中对文本段落(例如中文)输入的处理的一个标志位,\r\n            // 表示是否为非安卓系统，在PC端此参数为true。后续如果要处理移动端，则可能需要动态根据此参数对\r\n            // 文本段落(例如中文)输入做处理。\r\n            super(renderer, elementRef, true);\r\n            this.element = this.elementRef.nativeElement;\r\n    }\r\n\r\n    // 获取在format范围内的有效字符串\r\n    private static getClearValue(value: any, format: string): void {\r\n        const formatNumLen: number = format.replace(/[^0]/g, '').length;\r\n        let clearValue: any = value.replace(/\\D/g, '');\r\n        clearValue = clearValue.slice(0, formatNumLen);\r\n\r\n        return clearValue;\r\n    }\r\n\r\n    private static formatValue(value: any, format: string): any {\r\n        if (!value) {\r\n            return '';\r\n        }\r\n        const clearValue: any = TiMaskDirective.getClearValue(value, format);\r\n        const clearValueLen: number = clearValue.length; // value长度\r\n        let valueCharPosOffset: number = 0; // value字符位置增量\r\n        let valueCharPos: number; // 循环中的value字符位置\r\n        let newValue: any = '';\r\n        let formatChar: string;\r\n        for (let i: number = 0, len: number = format.length; i < len; i++) {\r\n            valueCharPos = i - valueCharPosOffset;\r\n            if (valueCharPos >= clearValueLen) { // value内容循环完成情况下,不进行处理\r\n                break;\r\n            }\r\n            formatChar = format[i];\r\n            if (formatChar === TiMaskDirective.NUM_SIGN) { // format字符为数字情况下的处理\r\n                newValue += clearValue[valueCharPos];\r\n            } else {\r\n                // format字符非数字情况下的处理,此时value字段中增加format字符\r\n                valueCharPosOffset++;\r\n                newValue += formatChar;\r\n            }\r\n        }\r\n\r\n        return newValue;\r\n    }\r\n\r\n    // model => view\r\n    /**\r\n     * @ignore\r\n     */\r\n    writeValue(value: any): void {\r\n        // 使用ngModel时，初始赋值第一次传入的value为null\r\n        if (value === null) {\r\n            return;\r\n        }\r\n        // format modelValue\r\n        const formatValue: any = TiMaskDirective.formatValue(value, this.format);\r\n        // Write formatted modelValue to view\r\n        super.writeValue(formatValue);\r\n        // 格式化后也需要通知修改模型值\r\n        this.modelValue = this.getAntiFormatValue(formatValue);\r\n        if (this.modelValue !== value) {\r\n            if (Util.isUndefined(this.onChangeFn)) {\r\n                // 在reactive-form中使用，初始化赋值调用writeValue时，\r\n                // 此时registerOnChange还未被调用，onChangeFn还未被赋值，\r\n                // 所以要使用setTimeout等onChangeFn被赋值后再调用\r\n                setTimeout(() => {\r\n                    this.onChangeFn(this.modelValue);\r\n                }, 0);\r\n            } else {\r\n                this.onChangeFn(this.modelValue);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    registerOnChange(fn: (value: any) => void): void { this.onChangeFn = fn; }\r\n\r\n    /**\r\n     * @ignore\r\n     * view => model\r\n     */\r\n    public handleInput(value: any): void {\r\n        if (!this.composing) {\r\n            // 在parser()中对view值进行格式化处理，再重写view的值；\r\n            this.parser(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 中文输入之前(在输入拼音前)\r\n     */\r\n    public handleCompositionStart(): void {\r\n        // 在IE和FF下中文输入法下，输入拼音时不会触发input事件，\r\n        // 但是在Chrome下，输入拼音时会触发input事件，所以针对Chrome要做特殊处理，\r\n        // 使其在输入拼音时不做格式化处理\r\n        if (TiBrowser.isChrome()) {\r\n            this.composing = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 文本段完成输入或取消输入\r\n     */\r\n    public handleCompositionEnd(value: any): void {\r\n        if (TiBrowser.isChrome()) {\r\n            this.composing = false;\r\n            // 在Chrome下compositionend比input执行滞后，\r\n           this.parser(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public blur(): void {\r\n        // 此处的onTouched继承于DefaultValueAccessor\r\n        this.onTouched();\r\n    }\r\n\r\n    private parser(value: any): void {\r\n        const formattedValue: any = TiMaskDirective.formatValue(value, this.format);\r\n        this.setCtxPos(value, this.format);\r\n        const ctxPos: number = this.ctxPos;\r\n\r\n        // 设置viewValue及光标位置\r\n        if (value !== formattedValue) {\r\n            this.renderer.setProperty(this.element, 'value', formattedValue);\r\n            // 设置光标位置：value非法及输入数字后需要变换位置情况下，需要设置光标位置\r\n            if (this.element === document.activeElement) {\r\n                this.element.setSelectionRange(ctxPos, ctxPos);\r\n            }\r\n        }\r\n        const modelValue: any = this.getAntiFormatValue(formattedValue);\r\n        if (modelValue !== this.modelValue) {\r\n            this.onChangeFn(modelValue);\r\n            this.modelValue = modelValue;\r\n        }\r\n    }\r\n\r\n    // 获取反格式化后的value\r\n    private getAntiFormatValue(formattedValue: any): any {\r\n        return formattedValue.replace(/\\D/g, '');\r\n    }\r\n\r\n    private setCtxPos(value: any, format: string): void {\r\n        // 元素有光标情况下，设置元素光标位置\r\n        this.initCtxPos();\r\n\r\n        if (!value) {\r\n            return;\r\n        }\r\n\r\n        // value非空情况下的处理\r\n        this.valueCharPosOffset = 0; // value字符位置增量\r\n        const ctxPos: number = this.ctxPos; // 初始化ctxPos，后续循环中会以此为光标位置作为对比值\r\n        for (let i: number = 0, len: number = format.length; i < len; i++) {\r\n            if (i - this.valueCharPosOffset >= value.length) { // value字符循环完成情况下,不进行后续处理\r\n                break;\r\n            }\r\n            this.setCharPos(i, value, format, ctxPos);\r\n        }\r\n    }\r\n\r\n    private setCharPos(pos: number, value: any, format: string, ctxPos: number): void {\r\n        const valueCharPos: number = pos - this.valueCharPosOffset; // 循环中的value字符位置\r\n        const valueChar: any = value[valueCharPos]; // 当前value字符\r\n        const formatChar: string = format[pos]; // 当前format字符\r\n        if (formatChar === TiMaskDirective.NUM_SIGN) { // format为数字情况下的处理\r\n            this.setPosWithNum(value, valueChar, valueCharPos, ctxPos);\r\n        } else { // format非数字情况处理\r\n            this.setPosWithoutNum(valueChar, valueCharPos, formatChar, ctxPos);\r\n        }\r\n    }\r\n\r\n    private setPosWithNum(value: any, valueChar: any, valueCharPos: number, ctxPos: number): void {\r\n        if (valueChar.match(/\\d/)) { // value字符相匹配情况下,不做处理\r\n            return;\r\n        }\r\n\r\n        // value字符不匹配情况下,光标前移，直到找到下一个数字为止\r\n        let valueCharNew: any;\r\n        for (let j: number = valueCharPos, valueLen: number = value.length; j < valueLen; j++) {\r\n            valueCharNew = value[j];\r\n            if (valueCharNew.match(/\\d/)) { // 找到value字符为数字的情况下，结束循环\r\n                return;\r\n            }\r\n\r\n            // 找到value字符非数字情况下，过滤掉该字符，光标前移，value偏移量后移，下次循环跳过该字符的检索\r\n            if (ctxPos && ctxPos >= j + 1) {\r\n                this.ctxPos--;\r\n            }\r\n            this.valueCharPosOffset--;\r\n        }\r\n    }\r\n\r\n    private setPosWithoutNum(valueChar: any, valueCharPos: number, formatChar: string, ctxPos: number): void {\r\n        // value为数字情况下,value偏移量前移,确保下次循环依然为该value字符\r\n        if (valueChar.match(/\\d/)) {\r\n            this.valueCharPosOffset++;\r\n            if (ctxPos && ctxPos >= valueCharPos + 1) {\r\n                this.ctxPos++;\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // value非数字且不匹配format字符情况下,过滤掉该字符,下次继续循环下个value字符\r\n        if ((valueChar !== formatChar) &&\r\n            (ctxPos && ctxPos >= valueCharPos + 1)) {\r\n            this.ctxPos--;\r\n        }\r\n    }\r\n\r\n    private initCtxPos(): void {\r\n        let ctxPositon: number;\r\n        if (this.element === document.activeElement) {\r\n            ctxPositon = this.element.selectionStart;\r\n        }\r\n        this.ctxPos = ctxPositon;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiMaskDirective } from './TiMaskDirective';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [TiMaskDirective],\r\n  declarations: [TiMaskDirective]\r\n})\r\nexport class TiMaskModule {\r\n}\r\nexport { TiMaskDirective } from './TiMaskDirective';\r\n","/* tslint:disable:no-implicit-dependencies */\r\nimport { NgControl } from '@angular/forms';\r\nimport { ElementRef } from '@angular/core';\r\nimport { TiValidationConfig } from '../TiValidationInterface';\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class CheckHandle {\r\n    constructor(protected validationConf: TiValidationConfig, protected commonHandle: any) {\r\n    }\r\n    onStatusChange(ele: ElementRef, formControl: NgControl): void {\r\n    }\r\n    onFocus(ele: ElementRef, formControl: NgControl): void {\r\n    }\r\n    onBlur(ele: ElementRef, formControl: NgControl): void {\r\n    }\r\n    destroy(ele: ElementRef): void {\r\n        this.commonHandle.destroyTip(ele);\r\n    }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { TiBaseComponent } from '../../components/base/TiBaseModule';\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n    selector: 'ti-pending-state',\r\n    templateUrl: './pending-state.html',\r\n    styleUrls: ['./pending-state.less'],\r\n    host: {\r\n        '[class.ti3-validation-pending-container]': 'true'\r\n    }\r\n})\r\nexport class TiPendingStateComponent extends TiBaseComponent {\r\n    // 校验元素\r\n    @Input() validElement: any;\r\n\r\n    ngOnInit(): void {\r\n        this.renderer.addClass(this.validElement, 'ti3-text-input-show-pending');\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.validElement) {\r\n            this.renderer.removeClass(this.validElement, 'ti3-text-input-show-pending');\r\n        }\r\n    }\r\n}\r\n","import { Util } from '../../../utils/Util';\r\nimport { CheckHandle } from './CheckHandle';\r\nimport { NgControl, ValidationErrors } from '@angular/forms';\r\nimport { ComponentRef, ElementRef } from '@angular/core';\r\nimport { TiPendingStateComponent } from '../TiPendingStateComponent';\r\n\r\n/**\r\n * @ignore\r\n *\r\n * 10.1.0新增\r\n */\r\nexport class AsyncCheck extends CheckHandle {\r\n    // 处理异步校验错误提示信息\r\n    public onStatusChange(ele: ElementRef, formControl: NgControl): void {\r\n        // 清除先前校验信息\r\n        this.commonHandle.clearValidMsg(ele);\r\n\r\n        const errors: ValidationErrors = formControl.control.errors;\r\n        if (!errors) {\r\n            return;\r\n        }\r\n\r\n        const ruleKey: string = Object.keys(errors)[0];\r\n        const ruleErrors: any = errors[ruleKey];\r\n        // 添加异步校验错误提示信息\r\n        if (typeof ruleErrors === 'object' && Util.isString(ruleErrors.tiAsyncErrorMessage)) {\r\n            this.commonHandle.addValidMsg(ele, this.validationConf, formControl, true);\r\n        }\r\n    }\r\n\r\n    // 处理异步校验pending状态时的loading图标\r\n    public onAsyncStatusChange(ele: ElementRef, formControl: NgControl): void {\r\n        if (formControl.pending) {\r\n            this.addPendingIcon(ele, formControl);\r\n        } else {\r\n            this.clearPendingIcon(ele);\r\n        }\r\n    }\r\n\r\n    public addPendingIcon(ele: ElementRef, formControl: NgControl): void {\r\n        if (ele.nativeElement.tiPendingStateRef) {\r\n            return;\r\n        }\r\n        const pendingStateRef: ComponentRef<any> = this.getPendingStateRef(ele);\r\n        const pendingDom: Element = pendingStateRef.location.nativeElement;\r\n        if (pendingDom === null || pendingDom.childNodes.length === 0) {\r\n            return;\r\n        }\r\n        this.commonHandle._tiRenderer.insertAfter(pendingDom, ele.nativeElement);\r\n\r\n        ele.nativeElement.tiPendingStateRef = pendingStateRef;\r\n    }\r\n\r\n    public clearPendingIcon(ele: ElementRef): void {\r\n        const pendingStateRef: ComponentRef<any>  = ele.nativeElement.tiPendingStateRef;\r\n        if (pendingStateRef) {\r\n            pendingStateRef.destroy();\r\n            ele.nativeElement.tiPendingStateRef = undefined;\r\n        }\r\n    }\r\n\r\n    private getPendingStateRef(ele: ElementRef): ComponentRef<any> {\r\n        const pendignComponentRef: ComponentRef<any> = this.commonHandle._tiPopupService.createCompoentRef({\r\n            componentType: TiPendingStateComponent,\r\n            context: {\r\n                validElement: ele.nativeElement\r\n            }\r\n        });\r\n\r\n        return pendignComponentRef;\r\n    }\r\n}\r\n","import { Util } from '../../../utils/Util';\r\nimport { AsyncCheck } from './AsyncCheck';\r\nimport { NgControl, ValidationErrors } from '@angular/forms';\r\nimport { ElementRef } from '@angular/core';\r\nimport { TiValidationConfig } from '../TiValidationInterface';\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class ChangeCheck extends AsyncCheck {\r\n    public onStatusChange(ele: ElementRef, formControl: NgControl): void {\r\n        super.onStatusChange(ele, formControl);\r\n        this._checkHandle(ele, this.validationConf, formControl);\r\n    }\r\n    public onFocus(ele: ElementRef, formControl: NgControl): void {\r\n        this._checkHandle(ele, this.validationConf, formControl);\r\n    }\r\n    public onBlur(ele: ElementRef, formControl: NgControl): void {\r\n        // 清除先前校验信息,已失焦情况不做校验提示或tip提示,只边框标红,边框标红在样式类中通过ng-invalid处理\r\n        this.commonHandle.destroyTip(ele);\r\n    }\r\n\r\n    // 校验处理函数,该函数覆盖了focus和statusChange状态下的校验处理\r\n    private _checkHandle(ele: ElementRef, validationConf: TiValidationConfig, formControl: NgControl): void {\r\n        this.commonHandle.destroyTip(ele); // 清除先前校验信息\r\n        // 已失焦情况不做校验提示或tip提示,只边框标红,边框标红只在样式类中通过ng-invalid处理,JS中无需处理\r\n        if (!this.commonHandle.isFocused(ele)) {\r\n            return;\r\n        }\r\n\r\n        // 三种情况只做Tip提示：\r\n        // 1.初次focus且初次focus情况下输入值未发生改变时不进行校验\r\n        //   (初次focus值一旦发生变化且出错情况下,就要改变为错误提示)\r\n        // 2.校验正确\r\n        // 3.是弹窗中autofocus的元素\r\n        // （弹窗中autofocus的元素，在弹窗打开动画结束后会先blur再focus,会使其由untouched变成touched,\r\n        // 但需要使其表现与初次focus一致）\r\n        const errors: ValidationErrors = formControl.control.errors;\r\n        if ((formControl.pristine && formControl.untouched) || errors === null ||\r\n            ele.nativeElement.querySelector('[tiautofocusinmodal]')) {\r\n            this._addTip(ele, validationConf, validationConf && validationConf.tip);\r\n\r\n            return;\r\n        }\r\n        // 其它情况下做错误提示\r\n        this._addValidTip(ele, errors, validationConf);\r\n    }\r\n\r\n    // 显示错误提示信息\r\n    private _addValidTip(ele: ElementRef, errors: ValidationErrors, validationConf: TiValidationConfig): void {\r\n        const tipContentDom: any = this.commonHandle.getErrorMsg(errors, validationConf);\r\n        if (tipContentDom === null) {// 无错误信息情况下,不做处理\r\n            return;\r\n        }\r\n        this._addTip(ele, validationConf, tipContentDom);\r\n    }\r\n\r\n    // 显示tip提示\r\n    private _addTip(ele: ElementRef, validationConf: TiValidationConfig, tipContent: string): /* ViewContainerData */void {\r\n        // tip内容无效情况下不做处理\r\n        if (tipContent === '' || Util.isUndefined(tipContent)) {\r\n            return;\r\n        }\r\n        // 添加Tip提示\r\n        this.commonHandle.generateTip(ele, tipContent, validationConf);\r\n    }\r\n}\r\n","import { Util } from '../../../utils/Util';\r\nimport { CheckHandle } from './CheckHandle';\r\n/* tslint:disable:no-implicit-dependencies */\r\nimport { NgControl } from '@angular/forms';\r\nimport { ElementRef } from '@angular/core';\r\nimport { TiValidationConfig } from '../TiValidationInterface';\r\n/**\r\n * @ignore\r\n */\r\nexport class BlurCheck extends CheckHandle {\r\n    public onStatusChange(ele: ElementRef, formControl: NgControl): void {\r\n        if (this.commonHandle.isFocused(ele)) {// 获取焦点/正在输入情况下,显示/修改tip提示\r\n            this.addTip(ele, this.validationConf, formControl);\r\n\r\n            return;\r\n        }\r\n        // 未输入过且未聚焦的情况下,先清除先前校验信息(存在reset即改变untounced状态情况下清除校验信息)\r\n        if (formControl.untouched) {\r\n            this.commonHandle.clearValidMsg(ele); // 清除先前校验信息\r\n\r\n            return;\r\n        }\r\n        // 失焦情况下,根据校验结果,显示/清除错误提示\r\n        this.commonHandle.clearValidMsg(ele); // 清除先前校验信息\r\n        this.commonHandle.addValidMsg(ele, this.validationConf, formControl);\r\n    }\r\n    public onFocus(ele: ElementRef, formControl: NgControl): void {\r\n        this.commonHandle.clearValidMsg(ele); // 清除先前错误提示信息\r\n        this.addTip(ele, this.validationConf, formControl);\r\n    }\r\n    public onBlur(ele: ElementRef, formControl: NgControl): void {\r\n        this.commonHandle.destroyTip(ele); // 清除先前校验信息\r\n        this.commonHandle.addValidMsg(ele, this.validationConf, formControl);\r\n    }\r\n\r\n    public addTip(ele: ElementRef, validationConf: TiValidationConfig, formControl: NgControl): void {// 该方法子类会复写\r\n        this.commonHandle.destroyTip(ele); // 清除先前tip提示信息\r\n        const tipContent: string = validationConf && validationConf.tip;\r\n        // tip内容无效情况下不做处理\r\n        if (tipContent === '' || Util.isUndefined(tipContent)) {\r\n            return;\r\n        }\r\n        // 添加Tip提示并缓存\r\n        this.commonHandle.generateTip(ele, tipContent, validationConf);\r\n    }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n/* tslint:disable:no-implicit-dependencies */\r\nimport { FormControl, ValidationErrors } from '@angular/forms';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiLocale, TiLocaleWords } from '../../locale/TiLocaleModule';\r\n/**\r\n * @ignore\r\n */\r\nexport interface MsgItem {\r\n  msg: string;\r\n  validStatus: any;\r\n}\r\n/**\r\n * @ignore\r\n */\r\nexport interface MsgModel {\r\n  level: number;\r\n  msgItems: Array<MsgItem>;\r\n  securityText: string;\r\n  securityStatus: string;\r\n}\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n  selector: 'ti-pwd-msg',\r\n  templateUrl: './TiPwdMsgComponent.html',\r\n  styleUrls: ['./pwdMsg.less']\r\n})\r\nexport class TiPwdMsgComponent implements OnInit {\r\n  @Input() control: FormControl;\r\n  @Input() msgItems: Array<MsgItem>;\r\n  @Input() validator: any;\r\n  @Input() levelFn: Function;\r\n  public msgModel: MsgModel = {\r\n    level: -1,\r\n    msgItems: [],\r\n    securityText: '',\r\n    securityStatus: ''\r\n  };\r\n\r\n  private static _getPwdStrengthLan(key: string): string {\r\n    return (TiLocale.getLocaleWords() as TiLocaleWords).tiValid.passwordStrength[key];\r\n  }\r\n\r\n  // 获取各项规则提示\r\n  private static _getMsgItems(msgObj: any, control: FormControl): Array<any> {\r\n      let validStatus: number|boolean;\r\n      if (control.untouched && control.pristine) { // 初次聚焦,未输入情况下，不校验\r\n          validStatus = -1;\r\n      }\r\n\r\n      const msgInfoArr: Array<any> = [];\r\n      let msgItem: string = '';\r\n      for (const key in msgObj) {\r\n        if (msgObj.hasOwnProperty(key)) {\r\n          msgItem = msgObj[key];\r\n          msgInfoArr.push({\r\n              msg: msgItem,\r\n              validStatus: TiPwdMsgComponent._getValidStatus(validStatus, key, control)\r\n          });\r\n        }\r\n      }\r\n\r\n      return msgInfoArr;\r\n  }\r\n\r\n  private static _getValidStatus(validStatus: number|boolean, key: string, control: FormControl): number|boolean {\r\n    const errors: ValidationErrors | null = control.errors;\r\n    // validStatus已定义情况下，直接返回\r\n    if (!Util.isUndefined(validStatus)) {\r\n      return validStatus;\r\n    }\r\n    // errors中有该条消息，说明校验未通过\r\n    if (errors && !Util.isUndefined(errors[key])) {\r\n      return false;\r\n    }\r\n    // 值为空的情况下，除notEqualPosRev外，其他规则均为错误\r\n    if (control.value === '' && key !== 'notEqualPosRev') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 获取密码强度等级\r\n   * @param value 输入值\r\n   * @param validator 校验规则配置\r\n   * @param levelFn 密码等级计算函数\r\n   * @returns  密码强度等级\r\n   */\r\n  private static _getLevel(value: string, validator: any, levelFn: Function): number {\r\n    return levelFn(value, validator);\r\n  }\r\n  ngOnInit(): void {\r\n    const value: string = this.control.value;\r\n    // level计算\r\n    let level: number = -1;\r\n    if (!(value === null || value.length === 0)) { // value值为空情况下,level无效处理\r\n        level = TiPwdMsgComponent._getLevel(value, this.validator, this.levelFn);\r\n    }\r\n\r\n    // 设置呈现时需要使用的字段\r\n    this.msgModel = {\r\n        level,\r\n        msgItems: TiPwdMsgComponent._getMsgItems(this.msgItems, this.control),\r\n        securityText: TiPwdMsgComponent._getPwdStrengthLan('securityText'),\r\n        securityStatus: level === -1 ? '' : TiPwdMsgComponent._getPwdStrengthLan('levelDecArr')[level]\r\n    };\r\n  }\r\n}\r\n","import { Util } from '../../../utils/Util';\r\nimport { TiPasswordValidatorConfig } from '../TiValidationInterface';\r\n/**\r\n * @ignore\r\n */\r\nexport interface TiPwdParams {\r\n    minCharLen: number;\r\n    minCharTypeNum: number;\r\n    charTypeRegObj: any;\r\n}\r\n/**\r\n * @ignore\r\n */\r\nexport class TiPwdConfig {\r\n    public static pwdTipPostion: string = 'right';\r\n    public static pwdTipMaxWidth: string = '440px';\r\n    // pwd校验规则\r\n    public static pwdCharTypeRegObj: any = {// 默认字串类型集合,特殊规则可在此处进行配置\r\n        // specialCharReg: /[~`!\\?,.:;\\-_'\"\\(\\)\\{\\}\\[\\]\\/<>@#\\$%\\^&\\*\\+\\|\\\\=\\s]/,\r\n        // https://www.bejson.com/zhuanyi/ Json转义工具有错，单引号未转义\r\n        specialCharReg: new RegExp('[~`!\\\\?,.:;\\\\-_\\'\\\"\\\\(\\\\)\\\\{\\\\}\\\\[\\\\]\\\\/<>@#\\\\$%\\\\^&\\\\*\\\\+\\\\|\\\\\\\\=\\\\s]'),\r\n        lowerCharReg: new RegExp('[a-z]+'),\r\n        upperCharReg: new RegExp('[A-Z]+'),\r\n        digitsCharReg: new RegExp('[0-9]+')\r\n    };\r\n    public static pwdValidator: any = {\r\n        rule: 'password',\r\n        params: {\r\n            rangeSize: [6, 32],\r\n            minCharType: [2] // 该校验方法支持两个参数传递,第二个参数为charTypeRegObj,不传递第二个参数情况下,代表使用该配置中的默认值\r\n        },\r\n        message: {\r\n            rangeSize: '', // ''代表使用组件国际化语言中的默认提示文本\r\n            minCharType: '',\r\n            notEqualPosRev: ''\r\n        }\r\n    };\r\n    // /**\r\n    //  * 计算密码熵值,具体的计算密码熵值的算法如下：\r\n    //  * 1、第一个字符为4bits\r\n    //  * 2、2-8个字符，每一个字符为2bits\r\n    //  * 3、9-20个字符之间，每一个字符为1.5bits\r\n    //  * 4、21个字符之后，每一个字符为1bit\r\n    //  * 5、如果密码中同时存在大写字母和特殊字符，则熵值+6\r\n    //  * @param {String} str 密码字串\r\n    //  * @param {Number} minLen 密码最小长度\r\n    //  * @param {Number} minType 密码最小组合种类\r\n    //  * @returns {Number} level 密码等级\r\n    //  */\r\n    public static pwdLevelFn(value: string, validator: TiPasswordValidatorConfig): number {\r\n        const validatorParam: TiPwdParams = getValidatorParam();\r\n        const minCharLen: number = validatorParam.minCharLen;\r\n        const minCharTypeNum: number = validatorParam.minCharTypeNum;\r\n        const charTypeRegObj: any = validatorParam.charTypeRegObj as any;\r\n        // 根据字符个数初步计算熵值\r\n        const len: number = value.length;\r\n        let pwdScore: number = 0;\r\n        if (len >= 21) {\r\n            pwdScore = (len - 21) + 1.5 * 12 + 2 * 7 + 4;\r\n        } else if (len >= 9 && len < 21) {\r\n            pwdScore = (len - 9 + 1) * 1.5 + 2 * 7 + 4;\r\n        } else if (len >= 2 && len < 9) {\r\n            pwdScore = (len - 2 + 1) * 2 + 4;\r\n        } else if (len >= 1 && len < 2) {\r\n            pwdScore = 4;\r\n        }\r\n        // 同时存在大写字母和特殊字符，熵值+6\r\n        if (charTypeRegObj.upperCharReg &&\r\n            charTypeRegObj.upperCharReg.test(value) &&\r\n            charTypeRegObj.specialCharReg.test(value)) {\r\n            pwdScore += 6;\r\n\r\n            // 重置正则表达式的lastIndex属性:只有正则表达式使用了表示全局检索的 \"g\" 标志时，该属性才会起作用，\r\n            // 当前正则匹配到字串后，下次使用同样的正则匹配该字串时，正则检查位置会发生变化\r\n            charTypeRegObj.upperCharReg.lastIndex = 0;\r\n            charTypeRegObj.specialCharReg.lastIndex = 0;\r\n        }\r\n\r\n        // 根据熵值计算等级\r\n        return countLevel(pwdScore);\r\n\r\n        function getValidatorParam(): TiPwdParams {\r\n            const params: any = validator.params;\r\n            // 默认值设定\r\n            let minCharLength: number = 0;\r\n            let minCharTypeNumber: number = 0;\r\n            let charTypeRegObject: any = {// 默认字串类型集合,特殊规则可在此处进行配置\r\n                specialCharReg: /[~`!\\?,.:;\\-_'\"\\(\\)\\{\\}\\[\\]\\/<>@#\\$%\\^&\\*\\+\\|\\\\=\\s]/,\r\n                lowerCharReg: /[a-z]+/,\r\n                upperCharReg: /[A-Z]+/,\r\n                digitsCharReg: /[0-9]+/\r\n            };\r\n\r\n            // 通过rangeSize规则获取最小长度\r\n            const rangeSizeParams: number = params.rangeSize;\r\n            if (!Util.isUndefined(rangeSizeParams)) {\r\n                minCharLength = parseInt(rangeSizeParams[0], 10) || 0;\r\n            }\r\n            // 通过minCharType规则获取最小字符类型及其正则\r\n            const minCharTypeParams: number = params.minCharType;\r\n            if (!Util.isUndefined(minCharTypeParams)) {\r\n                minCharTypeNumber = parseInt(minCharTypeParams[0], 10) || 0;\r\n                charTypeRegObject = minCharTypeParams[1] || charTypeRegObject;\r\n            }\r\n\r\n            // 返回对象值\r\n            return {\r\n                minCharLen: minCharLength,\r\n                minCharTypeNum: minCharTypeNumber,\r\n                charTypeRegObj: charTypeRegObject\r\n            };\r\n        }\r\n\r\n        /**\r\n         * 计算密码等级\r\n         * 低： 0~25.5（ 小于等于25 .5）\r\n         * 中： 25.5~30(大于25 .5 小于等于30)\r\n         * 高： 30~（大于30）\r\n         * @param score 密码分数\r\n         * @returns 密码等级\r\n         */\r\n        function countLevel(score: number): number {\r\n            let level: number = 0;\r\n            if (score > 30) {\r\n                level = 2;\r\n            } else if (score > 25.5 && score <= 30) {\r\n                level = 1;\r\n            } else if (score >= 0 && score <= 25.5) {\r\n                level = 0;\r\n            }\r\n            level = levelHandle(minCharLen, minCharTypeNum, level);\r\n\r\n            return level;\r\n        }\r\n\r\n        // 密码降级处理\r\n        function levelHandle(psdLen: number, psdType: number, level: number): number {\r\n            const type: number = getCharType(value);\r\n            let pwdLevel: number = level;\r\n            if (level > 0) {\r\n                if ((psdLen && len < psdLen) || (psdType && type < psdType)) {\r\n                    pwdLevel = level - 1;\r\n                }\r\n            }\r\n\r\n            return pwdLevel;\r\n        }\r\n\r\n        // 获取当前密码字符种类\r\n        function getCharType(str: string): number {\r\n            let typeNum: number = 0;\r\n            for (const key in charTypeRegObj) {\r\n                if (charTypeRegObj.hasOwnProperty(key)) {\r\n                    const regExp: RegExp = charTypeRegObj[key];\r\n                    if (regExp.test(str)) {\r\n                        typeNum++;\r\n                        regExp.lastIndex = 0;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return typeNum;\r\n        }\r\n    }\r\n}\r\n","import { TiPwdConfig } from './checkHandle/TiPwdConfig';\r\nimport { TiPositionType } from '../../utils/Position';\r\n// 定义组件默认配置参数\r\n/**\r\n * @ignore\r\n */\r\nexport class TiValidationDefaultConfig extends TiPwdConfig {\r\n    // 默认校验方式\r\n    public static type: 'change'|'blur'|'password' = 'change';\r\n    public static tipPosition: TiPositionType = 'right';\r\n}\r\n","import { Util } from '../../../utils/Util';\r\nimport { TiPwdMsgComponent } from '../TiPwdMsgComponent';\r\nimport { BlurCheck } from './BlurCheck';\r\nimport { CheckHandle } from './CheckHandle';\r\nimport { TiValidationDefaultConfig } from '../TiValidationConfig';\r\nimport { TiPasswordValidatorConfig, TiValidationConfig } from '../TiValidationInterface';\r\n/* tslint:disable:no-implicit-dependencies */\r\nimport { NgControl } from '@angular/forms';\r\nimport { ElementRef } from '@angular/core';\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class PwdCheck extends BlurCheck implements CheckHandle {\r\n    private msgItems: any;\r\n    private validator: TiPasswordValidatorConfig;\r\n    private levelFn: (value: string, validator: TiPasswordValidatorConfig) => void;\r\n    constructor(private config: TiValidationConfig, private common: any) {\r\n        super(config, common);\r\n        const pwdConfig: any = this.config && this.config.passwordConfig;\r\n        // 设置参数，用于规则提示组件数据组装\r\n        this._setValidator(pwdConfig);\r\n        this._setMsgItems();\r\n        this._setLevelFn(pwdConfig);\r\n    }\r\n\r\n    onFocus(ele: ElementRef, formControl: NgControl): void {\r\n        // 由于密码组件需要依赖于其他输入框，因此在focus时需要更新其状态\r\n        formControl.control.updateValueAndValidity();\r\n        super.onFocus(ele, formControl);\r\n    }\r\n\r\n    // 设置validator params和msg\r\n    private _setValidator(pwdConfig: any): void {\r\n        let pwdValidator: any = TiValidationDefaultConfig.pwdValidator;\r\n        if (pwdConfig && pwdConfig.validator) {// validator定义情况下,处理validator\r\n            const pwdValidatorConfig: TiPasswordValidatorConfig = pwdConfig.validator;\r\n            if (Util.isUndefined(pwdValidatorConfig.rule) ||\r\n                pwdValidatorConfig.rule === pwdValidator.rule) { // 依然使用默认规则情况下,只做参数合并\r\n                pwdValidator = {\r\n                    params: {...pwdValidator.params, ...pwdValidatorConfig.params},\r\n                    message: {...pwdValidator.message, ...pwdValidatorConfig.message}\r\n                };\r\n            } else {\r\n                pwdValidator = {\r\n                    params: pwdValidatorConfig.params,\r\n                    message: pwdValidatorConfig.message\r\n                };\r\n            }\r\n        }\r\n        this.validator = pwdValidator;\r\n    }\r\n\r\n    // 设置msgItems,msgItems数据格式为:{ruleKey: msgStr,...}\r\n    // 其中msgStr为格式化后的页面可显示字串\r\n    private _setMsgItems(): void {\r\n        const validatorConfig: TiPasswordValidatorConfig = this.validator;\r\n        const msgConfig: any = validatorConfig.message;\r\n        const paramsConfig: any = validatorConfig.params;\r\n        let msgStr: string;\r\n        const msgItems: any = {};\r\n        // msgConfig中定义的规则提示才会在页面中显示\r\n        for (const key in msgConfig) {\r\n            if (msgConfig.hasOwnProperty(key)) {\r\n                // 规则提示优先从config中读取,如果读取到的是无效字串,则从国际化默认配置中读取\r\n                msgStr = msgConfig[key] || this.common.getMsg(key);\r\n                // 如果对应的规则有参数的情况下,则根据参数做字串格式化\r\n                if (paramsConfig && paramsConfig.hasOwnProperty(key)) {\r\n                    msgStr = Util.formatEntry(msgStr, paramsConfig[key]);\r\n                }\r\n                msgItems[key] = msgStr;\r\n            }\r\n        }\r\n        this.msgItems = msgItems;\r\n    }\r\n\r\n    // 设置levelFn:levelFn支持业务自定义\r\n    private _setLevelFn(pwdConfig: any): void {\r\n        let levelFn: (value: string, validator: TiPasswordValidatorConfig) => void = TiValidationDefaultConfig.pwdLevelFn;\r\n        if (pwdConfig && Util.isFunction(pwdConfig.levelFn)) {\r\n            levelFn = pwdConfig.levelFn;\r\n        }\r\n        this.levelFn = levelFn;\r\n    }\r\n    public addTip(ele: ElementRef, validationConf: TiValidationConfig, formControl: NgControl): void {\r\n        this.commonHandle.destroyTip(ele); // 清除先前提示信息\r\n        const inputsObj: any = {\r\n            msgItems: this.msgItems,\r\n            validator: this.validator,\r\n            control: formControl,\r\n            levelFn: this.levelFn\r\n        };\r\n        // tip默认值设置\r\n        const configAssigned: TiValidationDefaultConfig = {\r\n            tipPosition: TiValidationDefaultConfig.pwdTipPostion,\r\n            tipMaxWidth: TiValidationDefaultConfig.pwdTipMaxWidth,\r\n            ...validationConf};\r\n        this.common.generateTip(ele, TiPwdMsgComponent, configAssigned, inputsObj);\r\n    }\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TiBaseComponent } from '../../components/base/TiBaseModule';\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n    selector: 'ti-error-msg',\r\n    template: `\r\n        <span class=\"ti3-error-icon-bg\">\r\n            <span class='ti3-error-icon ti3-icon ti3-icon-alert-warn'></span>\r\n        </span>\r\n        <span class=\"ti3-validate-text\" [innerHTML]=\"errorMessage\"></span>\r\n    `,\r\n    styleUrls: ['./errorMsg.less'],\r\n    encapsulation: ViewEncapsulation.None, // 由于样式文件中存在全局样式，因此使用该方式\r\n    host: {\r\n        '[class.ti3-unifyvalid-error-container]': 'isAppendBody',\r\n        '[class.ti3-unifyvalid-tip-error-container]': 'true'\r\n    }\r\n})\r\nexport class TiErrorMsgComponent extends TiBaseComponent {\r\n    @Input() errorMessage: string;\r\n    @Input() isAppendBody: boolean;\r\n}\r\n","import { NgModule } from '@angular/core';\r\n// 命名含有Service的Module，都不是对外暴露的Service，是内部使用。外部使用此Service，导入TiDragModule即可\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n})\r\nexport class CommonServiceModule {\r\n}\r\n","import { ComponentRef, ElementRef, Injectable, Renderer2 } from '@angular/core';\r\nimport { TiLocale, TiLocaleWords } from '../../../locale/TiLocaleModule';\r\nimport { TiRenderer } from '../../../services/renderer/TiRenderer';\r\nimport { TiPopupService } from '../../../services/popup/TiPopupService';\r\nimport { Util } from '../../../utils/Util';\r\nimport { TiTipService } from '../../../services/tip/TiTipService';\r\nimport { TiTipRef } from '../../../services/tip/TiTipInterface';\r\nimport { TiValidationDefaultConfig } from '../TiValidationConfig';\r\nimport { TiValidationConfig } from '../TiValidationInterface';\r\nimport { TiErrorMsgComponent } from '../TiErrorMsgComponent';\r\n/* tslint:disable:no-implicit-dependencies */\r\nimport { NgControl, ValidationErrors } from '@angular/forms';\r\nimport { CommonServiceModule } from './CommonServiceModule';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@Injectable({\r\n    providedIn: CommonServiceModule\r\n})\r\nexport class CommonService {\r\n    constructor(private _renderer: Renderer2,\r\n                private _tiRenderer: TiRenderer,\r\n                private _tipService: TiTipService,\r\n                private _tiPopupService: TiPopupService<TiErrorMsgComponent>) {\r\n    }\r\n\r\n    // 获取错误信息源字串\r\n    private static _getSourceStr(ruleKey: string, ruleErrors: any, validationConf: TiValidationConfig, isAsync: boolean): string {\r\n        // 优先使用tiValidation中的规则项配置errorMsg\r\n        const errMsgConf: any = validationConf && validationConf.errorMessage;\r\n        if (!Util.isUndefined(errMsgConf) && Util.isString(errMsgConf[ruleKey])) {\r\n            return errMsgConf[ruleKey];\r\n        }\r\n\r\n        if (typeof ruleErrors === 'object') {\r\n            // 获取自定义校验规则中的 tiErrorMsg\r\n            if (!isAsync && Util.isString(ruleErrors.tiErrorMessage)) {\r\n                return ruleErrors.tiErrorMessage;\r\n            }\r\n\r\n            // 获取自定义异步校验规则中的 tiAsyncErrorMessage\r\n            if (isAsync && Util.isString(ruleErrors.tiAsyncErrorMessage)) {\r\n                return ruleErrors.tiAsyncErrorMessage;\r\n            }\r\n        }\r\n\r\n        // 获取到的tiValidation errorMsg无效情况下,使用默认规则提示\r\n        return (TiLocale.getLocaleWords() as TiLocaleWords).tiValid.errorMsg[ruleKey] || '';\r\n    }\r\n\r\n    // 获取错误提示字符串，思路是：\r\n    // 1.先获取错误信息源字串（可能带params标识{0}/{1}等）;\r\n    // 2.将获取的源字串中的参数替换为真实数据\r\n    private static _getErrorStr(errors: ValidationErrors, validationConf: TiValidationConfig, isAsync: boolean): string {\r\n        const ruleKey: string = Object.keys(errors)[0];\r\n        const ruleErrors: any = errors[ruleKey];\r\n        const msgStr: string = CommonService._getSourceStr(ruleKey, ruleErrors, validationConf, isAsync);\r\n        // 获取错误信息参数,无参数情况下,不需做格式匹配直接返回\r\n        // errors格式示例：{required:true,{'maxlength': {'requiredLength': maxLength, 'actualLength': length}}}\r\n        if ((typeof ruleErrors) !== 'object') {\r\n            return msgStr;\r\n        }\r\n        const params: Array<string> = Object.values(ruleErrors); // 此处对错误信息定义有要求：要求错误返回对象与词条中的参数次序与一致\r\n\r\n        return Util.formatEntry(msgStr, params);\r\n    }\r\n    public isFocused(ele: any): boolean {\r\n        return ele.nativeElement.attributes.tiFocused !== undefined;\r\n    }\r\n    // 获取密码校验中校验规则信息\r\n    public getMsg(ruleKey: string, params: any): string {\r\n        const messageStr: string = (TiLocale.getLocaleWords() as TiLocaleWords).tiValid.message[ruleKey];\r\n\r\n        return Util.formatEntry(messageStr, params);\r\n    }\r\n    // 获取错误提示信息DOM文本，此处TiErrorMsgComponent组件处理的不仅是提示信息，还包括错误时的组件边框变红样式加载\r\n    public getErrorMsg(errors: ValidationErrors, validationConf: TiValidationConfig, isAppendBody: boolean = false, isAsync?: boolean): Element {\r\n        const errorMsg: string = CommonService._getErrorStr(errors, validationConf, isAsync);\r\n        if (!errorMsg) {\r\n            return null;\r\n        }\r\n        const errorMsgComponentRef: ComponentRef<any> = this._tiPopupService.createCompoentRef({\r\n            componentType: TiErrorMsgComponent,\r\n            context: {\r\n                errorMessage: errorMsg,\r\n                isAppendBody\r\n            }\r\n        });\r\n\r\n        return errorMsgComponentRef.location.nativeElement;\r\n    }\r\n\r\n    // 调用ti-Tip组件生成Tip提示,该公共方法中同时传递了tip的位置信息等\r\n    public generateTip(ele: ElementRef, tipContent: string, validationConf: TiValidationConfig, context?: any): TiTipRef {\r\n        const tipInstance: TiTipRef = this._tipService.create(ele.nativeElement, {\r\n            position: validationConf.tipPosition || TiValidationDefaultConfig.tipPosition,\r\n            maxWidth: validationConf.tipMaxWidth\r\n        });\r\n        tipInstance.show(tipContent, context);\r\n        ele.nativeElement.tiValidTip = tipInstance;\r\n\r\n        return tipInstance;\r\n    }\r\n    // 销毁Tip提示\r\n    public destroyTip(ele: ElementRef): void {\r\n        const tipEle: TiTipRef = ele.nativeElement.tiValidTip;\r\n        if (!Util.isUndefined(tipEle)) {\r\n            tipEle.hide();\r\n        }\r\n    }\r\n    // 根据errors结果生成可占位的错误提示信息(blurCheck和pwdCheck中使用)\r\n    public addValidMsg(ele: ElementRef, validationConf: TiValidationConfig, formControl: NgControl, isAsync?: boolean): void {\r\n        const errors: ValidationErrors = formControl.control.errors;\r\n        // 校验正确情况下不做处理\r\n        if (errors === null) {\r\n            return;\r\n        }\r\n        const errorDom: Element = this.getErrorMsg(errors, validationConf, true, isAsync);\r\n        if (errorDom === null || errorDom.childNodes.length === 0) {\r\n            return;\r\n        }\r\n        // 添加错误信息\r\n        if (validationConf && validationConf.errorMessageWrapper) {\r\n            this._renderer.appendChild(validationConf.errorMessageWrapper, errorDom);\r\n        } else if (ele.nativeElement.hasAttribute('tiTextarea')) {\r\n            this._tiRenderer.insertAfter(errorDom, this._renderer.parentNode(ele.nativeElement));\r\n        } else {\r\n            this._tiRenderer.insertAfter(errorDom, ele.nativeElement);\r\n        }\r\n        ele.nativeElement.tiErrorMessage = errorDom;\r\n    }\r\n    // 销毁可占位的错误提示信息(blurCheck和pwdCheck中使用)\r\n    public clearValidMsg(ele: ElementRef): void {\r\n        const errMsgDom: any  = ele.nativeElement.tiErrorMessage;\r\n        if (!Util.isUndefined(errMsgDom)) {\r\n            this._renderer.removeChild(errMsgDom.parentNode, errMsgDom);\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonServiceModule } from './CommonServiceModule';\r\n// 命名含有Service的Module，都不是对外暴露的Service，是内部使用。外部使用此Service，导入TiDragModule即可\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonServiceModule\r\n  ]\r\n})\r\nexport class CheckStyleModule {\r\n}\r\n","// 该功能类用于根据校验方式定义校验实体执行函数\r\nimport { Injectable } from '@angular/core';\r\nimport { ChangeCheck } from './ChangeCheck';\r\nimport { BlurCheck } from './BlurCheck';\r\nimport { PwdCheck } from './PwdCheck';\r\nimport { CommonService } from './CommonService';\r\nimport { TiValidationDefaultConfig } from '../TiValidationConfig';\r\nimport { Util } from '../../../utils/Util';\r\nimport { TiValidationConfig, TiValidationType } from '../TiValidationInterface';\r\nimport { CheckStyleModule } from './CheckStyleModule';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@Injectable({\r\n    providedIn: CheckStyleModule\r\n})\r\nexport class CheckStyleService {\r\n    constructor(private commonService: CommonService) {\r\n    }\r\n    public createHandler(type: TiValidationType | '', config: TiValidationConfig): any {\r\n        let resultType: any = type;\r\n        // 设置checkStyle默认值\r\n        if (Util.isUndefined(type)) {\r\n            resultType = TiValidationDefaultConfig.type;\r\n            // 设置passwordConfig情况下，type默认为'password'\r\n            if (!Util.isUndefined(config.passwordConfig)) {\r\n                resultType = 'password';\r\n            }\r\n        }\r\n        // 根据不同的配置，设置校验方式执行函数\r\n        let handle: any;\r\n        switch (resultType) {\r\n            case 'blur':\r\n                handle = new BlurCheck(config, this.commonService);\r\n                break;\r\n            case 'password':\r\n                handle = new PwdCheck(config, this.commonService);\r\n                break;\r\n            default: // 定义为'change'及其他无效方式,均采用change校验方式\r\n                handle = new ChangeCheck(config, this.commonService);\r\n        }\r\n\r\n        return handle;\r\n    }\r\n}\r\n","import { Directive, ElementRef, Input, OnChanges, OnDestroy, OnInit, Renderer2, RendererFactory2, SimpleChanges } from '@angular/core';\r\n/* tslint:disable:no-implicit-dependencies */\r\nimport { NgControl } from '@angular/forms';\r\nimport { CheckStyleService } from './checkHandle/CheckStyleService';\r\nimport { CommonService } from './checkHandle/CommonService';\r\nimport { TiValidationConfig } from './TiValidationInterface';\r\nimport { Subscription, timer } from 'rxjs';\r\nimport { debounce } from 'rxjs/operators';\r\n\r\n/**\r\n * Tiny校验是基于Angular提供的表单校验进行的封装，在使用Tiny组件前，请先了解[Angular表单校验]{@link https://angular.io/guide/form-validation}\r\n *\r\n * 组件支持的校验规则及方法见 [TiValidators]{@link ../classes/TiValidators.html}\r\n *\r\n * <example-url>../tiny3demo/#/validation/validation-all</example-url>\r\n */\r\n@Directive({\r\n  selector: '[tiValidation]',\r\n  // 声明该组件定义时需要用到的服务\r\n  providers: [CheckStyleService, CommonService],\r\n  host: {\r\n    '(focus)': 'onFocus()',\r\n    '(blur)': 'onBlur()'\r\n  }\r\n})\r\nexport class TiValidationDirective implements OnInit, OnChanges, OnDestroy {\r\n  public static readonly ASYNC_DEBOUNCE_TIME: number = 500; // 这个数值跟tiny2的异步校验一致\r\n  /**\r\n   * 校验配置信息\r\n   */\r\n  @Input() tiValidation: TiValidationConfig;\r\n  /**\r\n   * 错误提示信息显示容器，适用于blur/password类型校验形式下，错误提示信息位置自定义场景\r\n   */\r\n  @Input() errorMessageWrapper: Element;\r\n  private renderer: Renderer2;\r\n  // 当前formControl的statusChanges订阅，在指令销毁时取消\r\n  private formStatusSubscription: Subscription;\r\n  private asyncFormStatusSubscription: Subscription;\r\n  constructor(private formControl: NgControl,\r\n              private checkStyleFactory: CheckStyleService,\r\n              private element: ElementRef,\r\n              rendererFactory: RendererFactory2) {\r\n        /* tslint:disable:no-null-keyword */\r\n        this.renderer = rendererFactory.createRenderer(null, null);\r\n  }\r\n  private _validationHandleFn: any;\r\n  private eleNative: Element = this.element.nativeElement;\r\n  ngOnInit(): void {\r\n    // 初始化handleFn,用于处理tiValidation指令声明但未定义值场景\r\n    this._setHandleFn();\r\n    // 订阅onStatusChange事件,传递校验时机\r\n    this.formStatusSubscription = this.formControl.statusChanges.subscribe(() => {\r\n      this._validationHandleFn.onStatusChange(this.element, this.formControl);\r\n    });\r\n    // 订阅onStatusChange事件来特别处理异步校验pending状态的loading图标\r\n    if (this.formControl.control.asyncValidator) {\r\n      this.asyncFormStatusSubscription =  this.formControl.statusChanges\r\n        .pipe(\r\n          // 由于异步校验有防抖处理(输入停顿后再进行异步校验)，所以需要在异步校验开始时才能出现loading图标\r\n          debounce(() => timer(Number(this.formControl.pending) * TiValidationDirective.ASYNC_DEBOUNCE_TIME))\r\n        )\r\n        .subscribe(() => {\r\n          if (this._validationHandleFn.onAsyncStatusChange) {\r\n            this._validationHandleFn.onAsyncStatusChange(this.element, this.formControl);\r\n          }\r\n        });\r\n    }\r\n  }\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['tiValidation'] && !changes['tiValidation'].firstChange) { // validation动态修改支持,此处根据validation重新创建校验实体方法函数\r\n      this._setHandleFn();\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n    // 宿主元素销毁时，销毁其附属tip\r\n    this._validationHandleFn.destroy(this.element);\r\n    // 取消formControl中statusChanges的订阅\r\n    this.formStatusSubscription.unsubscribe();\r\n    if (this.asyncFormStatusSubscription) {\r\n      this.asyncFormStatusSubscription.unsubscribe();\r\n    }\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  onFocus(): void {\r\n    this._markAsFocus();\r\n    this._validationHandleFn.onFocus(this.element, this.formControl);\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  onBlur(): void {\r\n    this._markAsBlur();\r\n    this._validationHandleFn.onBlur(this.element, this.formControl);\r\n  }\r\n  private _setHandleFn(): void {\r\n    // 将errorMessageWrapper和tiValidation属性合并，方便后续处理\r\n    const validationConfig: TiValidationConfig = {...this.tiValidation, errorMessageWrapper: this.errorMessageWrapper};\r\n    this._validationHandleFn = this.checkStyleFactory.\r\n            createHandler(this.tiValidation && this.tiValidation.type, validationConfig);\r\n\r\n    // 失焦校验时给宿主元素添加tiBlurCheck属性标识\r\n    if (this.tiValidation && this.tiValidation.type === 'blur') {\r\n      this.renderer.setAttribute(this.eleNative, 'tiBlurCheck', '');\r\n    }\r\n  }\r\n\r\n  // 设置focus状态标志,标志包括两部分(如下markAsBlur逻辑类似)：\r\n  // 1.样式类,用于根据focus/blur状态设置CSS中表单边框颜色;\r\n  // 2.标志位,用于根据focus/blur判断是否显示提示信息\r\n  private _markAsFocus(): void {\r\n    this.renderer.setAttribute(this.eleNative, 'tiFocused', 'tiFocused');\r\n  }\r\n  private _markAsBlur(): void {\r\n    this.renderer.removeAttribute(this.eleNative, 'tiFocused');\r\n  }\r\n}\r\n","/* eslint-disable no-eq-null */\r\n/* eslint-disable eqeqeq */\r\n/* tslint:disable:no-implicit-dependencies */\r\nimport { AbstractControl, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\r\nimport { Util } from '../../../utils/Util';\r\nimport { TiPwdConfig } from '../checkHandle/TiPwdConfig';\r\n// 下面注释，可以避免编译lib时正则报错。原理未知，副作用未知。\r\n// @dynamic\r\n/**\r\n * Tiny封装的常用校验规则及校验方法\r\n *\r\n * ### 规则使用\r\n * **提供了两种使用方式：**\r\n *\r\n * 1.静态方法：通过TiValidators.XXX（规则名）在JS中定义\r\n *\r\n * 2.指令方式：对应规则的指令名为tiXXX(规则名首字母大写)，如required规则的指令名为 tiRequired\r\n *\r\n * **支持的校验规则如下：**\r\n *\r\n * | 规则名称    |  配置参数意义/类型   |  规则描述  |\r\n * | --------   | :-----   | :---- |\r\n * | required   | 无       |  为空校验    |\r\n * | maxLength    | 最大字符长度/number      |  字符长度最大值校验    |\r\n * | minLength    | 最小字符长度/number      |   字符长度最小值校验    |\r\n * | rangeSize    | 最小长度限制/number <br/> 最大长度限制/number      |   字符长度大小区间校验    |\r\n * | maxValue    | 最大数值/number      |  数字最大数值校验    |\r\n * | minValue    | 最小数值/number      |   数字最小数值校验    |\r\n * | rangeValue    | 最小数值限制/number <br/> 最大数值限制/number    |   数字大小区间校验    |\r\n * | regExp   | 正则表达式参数/RegExp|string（不包括正则表达式头尾标识符'^(?:'、')$'）       |  正则校验    |\r\n * | email    | 无      |  邮箱校验    |\r\n * | contains    | 包含的内容/(string/number)     |   包含校验    |\r\n * | notContains    | 不包含的内容/(string/number)      |   不包含校验    |\r\n * | equal   | 相等的内容/(string/number)     |  相等校验    |\r\n * | notEqual    | 不相等的内容/(string/number)    |  不相等校验    |\r\n * | notScript    | 无      |   包含script标签校验    |\r\n * | port    |  无     |   端口号校验，范围为0~65535    |\r\n * | date    | 无      |   日期类型校验    |\r\n * | url    |  无     |   url校验    |\r\n * | integer    | 无      |   整数校验    |\r\n * | number    |  无     |   数字校验 |\r\n * | digits    | 无      |   正整数校验    |\r\n * | ipv4    |  无     |   ipv4校验    |\r\n * | ipv6    |  无     |   ipv6校验    |\r\n * | minCharType | 1. 符合要求的字符种类/number;<br/>2. 字符集对象类型（可选）/{string:RegExp}。<br/>默认的字符种类分别为：大写字母、小写字母、数字、特殊字符`~!@#$%^&*()-_=+\\\\\\|[{}];:\\'\\\",<.>/?  和空格 | 符合最小字符种类校验，默认情况为至少包含2种字符类型`。  |\r\n * | notEqualPosRev    |  需要比对的表单formControl对象获取函数/ () => AbstractControl     |   不能和表单对象的正序或倒序相同    |\r\n * | password    | 密码校验各项规则参数/对象形式 |   密码校验   |\r\n *\r\n *\r\n *  **password规则的参数类型**\r\n *\r\n *    {\r\n *        rangeSize?: [number, number],\r\n *        minCharType?: [bumber, {\r\n *            digitsCharReg: RegExp,\r\n *            specialCharReg: RegExp,\r\n *            lowerCharReg: RegExp,\r\n *            upperCharReg: RegExp}],\r\n *        notEqualPosRev: () => AbstractControl\r\n *    }\r\n */\r\nexport class TiValidators {\r\n  /* tslint:disable:max-line-length */\r\n  private static readonly EMAIL_REGEXP: RegExp = /^((([A-Za-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([A-Za-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([A-Za-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([A-Za-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([A-Za-z]|\\d|-|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([A-Za-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([A-Za-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([A-Za-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([A-Za-z]|\\d|-|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([A-Za-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/;\r\n  private static readonly SCRIPT_REGEXP: RegExp = /<+\\/?[Ss][Cc][Rr][Ii][Pp][Tt] *.*>*/;\r\n  private static readonly DIGITS_REGEXP: RegExp = /^\\d+$/;\r\n  private static readonly PORT_RANGE: Array<number> = [0, 65535];\r\n  // URL规则，其中IPv4部分，采用了下面华为自研的ipv4正则表达式\r\n  private static readonly URL_REGEXP: RegExp = /^(https?|s?ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))\\.){3}((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5])))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i;\r\n  private static readonly INTEGER_REGEXP: RegExp = /^-?\\d+$/;\r\n  private static readonly NUMBER_REGEXP: RegExp = /^(?:-?\\d+|-?\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/;\r\n  // 采用华为自研的ipv4正则表达式\r\n  private static readonly IPV4_REGEXP: RegExp = /^(((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))\\.){3}((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))$/i;\r\n  // 采用华为自研的ipv6正则表达式\r\n  private static readonly IPV6_REGEXP: RegExp = /^(((([\\da-f]{1,4}):){7}([\\da-f]{1,4}))|(((([\\da-f]{1,4}):){1,7}:)|((([\\da-f]{1,4}):){6}:([\\da-f]{1,4}))|((([\\da-f]{1,4}):){5}:(([\\da-f]{1,4}):)?([\\da-f]{1,4}))|((([\\da-f]{1,4}):){4}:(([\\da-f]{1,4}):){0,2}([\\da-f]{1,4}))|((([\\da-f]{1,4}):){3}:(([\\da-f]{1,4}):){0,3}([\\da-f]{1,4}))|((([\\da-f]{1,4}):){2}:(([\\da-f]{1,4}):){0,4}([\\da-f]{1,4}))|((([\\da-f]{1,4}):){1}:(([\\da-f]{1,4}):){0,5}([\\da-f]{1,4}))|(::(([\\da-f]{1,4}):){0,6}([\\da-f]{1,4}))|(::([\\da-f]{1,4})?))|(((([\\da-f]{1,4}):){6}(((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))\\.){3}((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5])))|((([\\da-f]{1,4}):){5}:(((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))\\.){3}((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5])))|((([\\da-f]{1,4}):){4}:(([\\da-f]{1,4}):)?(((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))\\.){3}((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5])))|((([\\da-f]{1,4}):){3}:(([\\da-f]{1,4}):){0,2}(((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))\\.){3}((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5])))|((([\\da-f]{1,4}):){2}:(([\\da-f]{1,4}):){0,3}(((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))\\.){3}((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5])))|(([\\da-f]{1,4})::(([\\da-f]{1,4}):){0,4}(((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))\\.){3}((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5])))|(::(([\\da-f]{1,4}):){0,5}(((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5]))\\.){3}((1?[1-9]?\\d)|(10\\d)|(2[0-4]\\d)|(25[0-5])))))$/i;\r\n  private static isEmptyInputValue(value: any): boolean {\r\n    // we don't check for string here so it also works with arrays\r\n    // tslint:disable-next-line:no-null-keyword\r\n    return value == null || value.length === 0;\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static required(control: AbstractControl): ValidationErrors|null {\r\n    return Validators.required(control);\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static maxLength(maxLength: number): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      const length: number = control.value ? control.value.length : 0;\r\n\r\n      return length > maxLength ?\r\n          {maxLength: {requiredLength: maxLength, actualLength: length}} :\r\n          null;\r\n    };\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static minLength(minLength: number): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (TiValidators.isEmptyInputValue(control.value)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n      const length: number = control.value ? control.value.length : 0;\r\n\r\n      return length < minLength ?\r\n          {minLength: {requiredLength: minLength, actualLength: length}} :\r\n          null;\r\n    };\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static rangeSize(minLength: number, maxLength: number): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (TiValidators.isEmptyInputValue(control.value)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n      const length: number = control.value ? control.value.length : 0;\r\n\r\n      return length > maxLength || length < minLength ?\r\n          {rangeSize: {requiredMinLength: minLength, requiredMaxLength: maxLength, actualLength: length}} :\r\n          null;\r\n    };\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static maxValue(max: number): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (TiValidators.isEmptyInputValue(control.value) || TiValidators.isEmptyInputValue(max)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n      const value: number = parseFloat(control.value);\r\n\r\n      // Controls with NaN values after parsing should be treated as not having a\r\n      // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\r\n      return !isNaN(value) && value > max ? {maxValue: {requiredMaxValue: max, actual: control.value}} : null;\r\n    };\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static minValue(min: number): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (TiValidators.isEmptyInputValue(control.value) || TiValidators.isEmptyInputValue(min)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n      const value: number = parseFloat(control.value);\r\n\r\n      // Controls with NaN values after parsing should be treated as not having a\r\n      // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\r\n      return !isNaN(value) && value < min ? {minValue: {requiredMinValue: min, actual: control.value}} : null;\r\n    };\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static rangeValue(min: number, max: number): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (TiValidators.isEmptyInputValue(control.value) || TiValidators.isEmptyInputValue(min) || TiValidators.isEmptyInputValue(max)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n      const value: number = parseFloat(control.value);\r\n\r\n      // Controls with NaN values after parsing should be treated as not having a\r\n      // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\r\n      return !isNaN(value) && (value < min || value > max) ? {rangeValue: {requiredMinValue: min,\r\n          requiredMaxValue: max, actual: control.value}} : null;\r\n    };\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static regExp(pattern: string|RegExp): ValidatorFn {\r\n    if (!pattern) {\r\n      return Validators.nullValidator;\r\n    }\r\n    let regex: RegExp;\r\n    let regexStr: string;\r\n    if (typeof pattern === 'string') {\r\n      regexStr = '';\r\n\r\n      if (pattern.charAt(0) !== '^') {\r\n        regexStr += '^';\r\n      }\r\n\r\n      regexStr += pattern;\r\n\r\n      if (pattern.charAt(pattern.length - 1) !== '$') {\r\n        regexStr += '$';\r\n      }\r\n\r\n      regex = new RegExp(regexStr);\r\n    } else {\r\n      regexStr = pattern.toString();\r\n      regex = pattern;\r\n    }\r\n\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (TiValidators.isEmptyInputValue(control.value)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n      const value: string = control.value;\r\n\r\n      return regex.test(value) ? null : {regExp: {requiredPattern: regexStr, actualValue: value}};\r\n    };\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static email(control: AbstractControl): ValidationErrors|null {\r\n    if (TiValidators.isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    return TiValidators.EMAIL_REGEXP.test(control.value) ? null : {email: true};\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static contains(contain: string|number): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (TiValidators.isEmptyInputValue(control.value) || TiValidators.isEmptyInputValue(contain)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n\r\n      return control.value.indexOf(contain) === -1 ?\r\n        {contains: {requiredContains: contain, actualValue: control.value}} : null;\r\n    };\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static notContains(contain: string|number): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (TiValidators.isEmptyInputValue(control.value) || TiValidators.isEmptyInputValue(contain)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n\r\n      return control.value.indexOf(contain) !== -1 ?\r\n        {notContains: {requiredNotContains: contain, actualValue: control.value}} : null;\r\n    };\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static equal(equal: string|number): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (TiValidators.isEmptyInputValue(control.value) || TiValidators.isEmptyInputValue(equal)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n\r\n      return control.value !== equal ?\r\n        {equal: {requiredEqual: equal, actualValue: control.value}} : null;\r\n    };\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static notEqual(equal: string|number): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (TiValidators.isEmptyInputValue(control.value) || TiValidators.isEmptyInputValue(equal)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n\r\n      return control.value === equal ?\r\n        {notEqual: {requiredNotEqual: equal, actualValue: control.value}} : null;\r\n    };\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static notScript(control: AbstractControl): ValidationErrors|null {\r\n    if (TiValidators.isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    return TiValidators.SCRIPT_REGEXP.test(control.value) ? {notScript: true} : null;\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static port(control: AbstractControl): ValidationErrors|null {\r\n    if (TiValidators.isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    return TiValidators.DIGITS_REGEXP.test(control.value) && (control.value >= TiValidators.PORT_RANGE[0]) &&\r\n        (control.value <= TiValidators.PORT_RANGE[1]) ?\r\n        null : {port: {min: TiValidators.PORT_RANGE[0], max: TiValidators.PORT_RANGE[1]}};\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static date(control: AbstractControl): ValidationErrors|null {\r\n    if (TiValidators.isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    return !/Invalid|NaN/.test(new Date(control.value).toString()) ?\r\n        null : {date: true};\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static url(control: AbstractControl): ValidationErrors|null {\r\n    if (TiValidators.isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    return TiValidators.URL_REGEXP.test(control.value) ?\r\n        null : {url: true};\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static integer(control: AbstractControl): ValidationErrors|null {\r\n    if (TiValidators.isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    return TiValidators.INTEGER_REGEXP.test(control.value) ?\r\n        null : {integer: true};\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static number(control: AbstractControl): ValidationErrors|null {\r\n    if (TiValidators.isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    return TiValidators.NUMBER_REGEXP.test(control.value) ?\r\n        null : {number: true};\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static digits(control: AbstractControl): ValidationErrors|null {\r\n    if (TiValidators.isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    return TiValidators.DIGITS_REGEXP.test(control.value) ?\r\n        null : {digits: true};\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static ipv4(control: AbstractControl): ValidationErrors|null {\r\n    if (TiValidators.isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    return TiValidators.IPV4_REGEXP.test(control.value) ?\r\n        null : {ipv4: true};\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n  public static ipv6(control: AbstractControl): ValidationErrors|null {\r\n    if (TiValidators.isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    return TiValidators.IPV6_REGEXP.test(control.value) ?\r\n        null : {ipv6: true};\r\n  }\r\n  /**\r\n   * @ignore\r\n   * 密码字符类型最小种类校验\r\n   * 用于密码校验，其规则如下：\r\n   * 口令必须包含且只能包含如下至少两种字符的组合:\r\n   * －至少一个小写字母；\r\n   * －至少一个大写字母；\r\n   * －至少一个数字；\r\n   * －至少一个特殊字符：`~!@#$%^&*()-_=+\\|[{}];:'\",<.>/?和空格\r\n   * @param  num 字符类型最小个数\r\n   * @param  charTypeRegObj 字符类型校验正则表达式，涉及到强度计算，参考defaults中定义\r\n   */\r\n  public static minCharType(num: number, charTypeRegObj?: any): ValidatorFn {\r\n    /**\r\n     * 正则表达式转为字符串并首尾去除“/”符号，为添加g修饰符做准备\r\n     */\r\n    function regExpToString(regExp: RegExp): string {\r\n        if (typeof regExp !== 'object') {\r\n            return '';\r\n        }\r\n        const regExpStr: string = String(regExp);\r\n\r\n        return regExpStr.substring(1, regExpStr.length - 1);\r\n    }\r\n\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (TiValidators.isEmptyInputValue(control.value) || TiValidators.isEmptyInputValue(num) || num === 0) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n      // 各类字符校验正则表达式集合,默认使用pwdConfig中的默认配置\r\n      const charRegObj: any = typeof charTypeRegObj === 'object' ? charTypeRegObj :\r\n          TiPwdConfig.pwdCharTypeRegObj;\r\n\r\n      // 校验输入是否符合单条校验字符规则，并记录符合的单条规则个数\r\n      let checkValidNum: number = 0; // 校验通过结果个数\r\n      let checkResult: any; // 校验结果临时变量\r\n      let replacedValue: string = control.value; // 正则替换后的value值\r\n      for (const key in charRegObj) {\r\n        if (charRegObj.hasOwnProperty(key)) {\r\n          const regExp: RegExp = charRegObj[key];\r\n          checkResult = regExp.test(control.value);\r\n          if (checkResult) {\r\n              checkValidNum++;\r\n              // 使用全局替换方式，用于替换字串中所有符合正则规则的字符\r\n              replacedValue = regExp.global\r\n                              ? replacedValue.replace(regExp, '')\r\n                              : replacedValue.replace(new RegExp(regExpToString(regExp), 'g'), '');\r\n          }\r\n        }\r\n      }\r\n\r\n      // 替换后的值非空情况:代表值中存在非法字符\r\n      return replacedValue.length > 0 || checkValidNum < num ?\r\n        {minCharType: true} : null;\r\n    };\r\n  }\r\n  /**\r\n   * @ignore\r\n   * 用于密码校验：密码不能和用户名或其倒序相同\r\n   * @param  getControlFn 获取对比的表单元素formControl函数\r\n   */\r\n  public static notEqualPosRev(getControlFn: () => AbstractControl): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (TiValidators.isEmptyInputValue(control.value) || Util.isUndefined(getControlFn && getControlFn())) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n      const value: string = control.value;\r\n      const refreValue: string = getControlFn().value;\r\n\r\n      // 使用如下方式会出现卡顿的情况：\r\n      // 对比formControl value修改时，需要同步修改该表单的状态，否则会存在下次focus该元素或表单整体校验时\r\n      // 该元素校验结果依然是上次的结果\r\n      // getControlFn().valueChanges.subscribe(() => {\r\n      //   control.updateValueAndValidity();\r\n      // });\r\n\r\n      return (value.toLowerCase() !== refreValue.split('')\r\n          .reverse()\r\n          .join('')\r\n          .toLowerCase()) &&\r\n          (value.toLowerCase() !== refreValue.toLowerCase()) ?\r\n          null : {notEqualPosRev: true};\r\n    };\r\n  }\r\n  /**\r\n   * @ignore\r\n   * 密码校验规则\r\n   * @param pValue 规则参数:{ruleKey: param}\r\n   */\r\n  public static password(pValue: {\r\n    rangeSize?: [number, number];\r\n    minCharType?: [number, any];\r\n    notEqualPosRev?(): AbstractControl;\r\n  }): ValidatorFn {\r\n    const rangeSizeParamArr: Array<number> = pValue.rangeSize || TiPwdConfig.pwdValidator.params.rangeSize;\r\n    const minCharTypeParamArr: Array<any> = pValue.minCharType || TiPwdConfig.pwdValidator.params.minCharType;\r\n    if (Util.isUndefined(minCharTypeParamArr[1])) {\r\n      minCharTypeParamArr[1] = TiPwdConfig.pwdCharTypeRegObj;\r\n    }\r\n    const validatorComposeArr: Array<any> = [TiValidators.required,\r\n      TiValidators.rangeSize(rangeSizeParamArr[0], rangeSizeParamArr[1]),\r\n      TiValidators.minCharType(minCharTypeParamArr[0], minCharTypeParamArr[1]),\r\n      TiValidators.notEqualPosRev(pValue.notEqualPosRev)];\r\n\r\n      // 由于错误提示为password专有提示,需要自定义password error,而compose方法不能自定义,因此此处未使用compose\r\n    // 此外,各子规则的错误依然需要保留,用于规则提示信息\r\n    return (control: AbstractControl): any => {\r\n      return _mergeErrorsPwd(_executeValidators(control, validatorComposeArr));\r\n    };\r\n    function _executeValidators(control: AbstractControl, validators: Array<ValidatorFn>): Array<any> {\r\n      return validators.map((v: any) => v(control));\r\n    }\r\n    function _mergeErrorsPwd(arrayOfErrors: Array<ValidationErrors>): ValidationErrors|null {\r\n      const res: {[key: string]: any} =\r\n          arrayOfErrors.reduce((resource: ValidationErrors | null, errors: ValidationErrors | null) => {\r\n            return errors != null ? {...resource, ...errors} : resource;\r\n          }, {});\r\n\r\n      return Object.keys(res).length === 0 ? null : {password: true, ...res};\r\n    }\r\n  }\r\n  // 该方法用于整体校验:由于表单未foucs时,即使错误也不会显示红框,\r\n  // 而整体校验时需要将错误的表单边框标红显示,因此需要显示调用整体校验方法\r\n  /**\r\n   * 该方法用于整体校验\r\n   *\r\n   * 参数form：需要校验的表单族\r\n   *\r\n   * 参数updateValueAndValidityConfig：可选，check方法内部使用的校验方法是AbstractControl的updateValueAndValidity方法，此处将方法参数开放给开发者，参数意义具体可参考https://angular.io/api/forms/AbstractControl#updatevalueandvalidity\r\n   *\r\n   * 返回：表单错误信息\r\n   */\r\n  public static check(form: FormGroup, updateValueAndValidityConfig?: { onlySelf?: boolean; emitEvent?: boolean; }): ValidationErrors | null {\r\n    let errors: any = {};\r\n    if (form.errors) {\r\n      errors = {...errors, ...form.errors};\r\n    }\r\n    for (const key in form.controls) {\r\n      if (form.controls.hasOwnProperty(key)) {\r\n        const control: AbstractControl | any = form.controls[key];\r\n        if (control.controls) { // 嵌套的FormArray,FormGroup\r\n          const checkedErrors: any = TiValidators.check(control, updateValueAndValidityConfig);\r\n          if (checkedErrors !== null) {\r\n            errors[key] = checkedErrors;\r\n          }\r\n        } else {\r\n          control.markAsTouched();\r\n          // 由于表单间可能有关联关系（如密码校验的notEqualPosRev，该关联关系需要对单个表单元素再次校验\r\n          control.updateValueAndValidity(updateValueAndValidityConfig);\r\n          // 读取errors信息\r\n          if (control.errors !== null) {\r\n            errors[key] = control.errors;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // 无errors信息时，设置为null，方便业务处理\r\n    if (JSON.stringify(errors) === '{}') {\r\n      errors = null;\r\n    }\r\n\r\n    return errors;\r\n  }\r\n}\r\n","import { Directive, forwardRef, OnChanges, SimpleChanges, Type } from '@angular/core';\r\n/* tslint:disable:no-implicit-dependencies */\r\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\r\nimport { TiValidators } from '../TiValidators';\r\nimport { Util } from '../../../../utils/Util';\r\n// 下面注释，是为了避免lib编译错误。具体原理未知，副作用未知。\r\n// @dynamic\r\n/**\r\n * @ignore\r\n */\r\n@Directive({selector: '[BaseValidator]'})\r\nexport class BaseValidator implements Validator, OnChanges {\r\n  public validatorStr: string;\r\n  public baseValue: string; // 需要传参的校验规则的参数\r\n  public enabled: boolean = true; // 无需传参的校验规则是否开启校验\r\n  private _validator: ValidatorFn = Validators.nullValidator;\r\n  private _onChange?: () => void;\r\n\r\n  /**\r\n   * 获取各directive中的参数配置\r\n   * @param validatorClass 校验实现类\r\n   * @param name 校验指令名：由于该方法在类外部调用，无法使用BaseValidator中的参数，因此需要传入\r\n   */\r\n  public static getDirectiveConfig(validatorClass: Type<any>, name: string): Directive {\r\n    return {\r\n        selector: `[${name}][formControlName],[${name}][formControl],[${name}][ngModel]`,\r\n        providers: [{\r\n            provide: NG_VALIDATORS,\r\n            /* tslint:disable:no-forward-ref */\r\n            useExisting: forwardRef(() => validatorClass),\r\n            multi: true\r\n        }]\r\n    };\r\n  }\r\n  public static getValidatorStr(name: string): any {\r\n    return name.replace(new RegExp('ti'), '')\r\n    .replace(new RegExp('^\\\\S'), (s: string) => {\r\n      return s.toLowerCase();\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['baseValue'] || changes['enabled']) {\r\n      this._createValidator();\r\n      if (this._onChange) {\r\n        this._onChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(c: AbstractControl): ValidationErrors|null {\r\n    return (this.enabled === false || this.enabled as any === 'false') ? null : this._validator(c);\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  private _createValidator(): void {\r\n    const validatorStr: string = this.validatorStr;\r\n    const validatorParam: string = this.baseValue;\r\n    /* tslint:disable:prefer-conditional-expression */\r\n    if (Util.isArray(validatorParam)) {\r\n      /* tslint:disable:no-null-keyword */\r\n      this._validator = TiValidators[validatorStr].apply(null, validatorParam);\r\n    } else if (!Util.isUndefined(validatorParam)) {\r\n      this._validator = TiValidators[validatorStr](validatorParam);\r\n    } else {\r\n      this._validator = TiValidators[validatorStr];\r\n    }\r\n  }\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(MaxLengthValidatorDirective, MaxLengthValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiMaxLength][formControlName],[tiMaxLength][formControl],[tiMaxLength][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => MaxLengthValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class MaxLengthValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiMaxLength';\r\n  @Input(MaxLengthValidatorDirective.NAME) baseValue: any;\r\n  validatorStr: string = BaseValidator.getValidatorStr(MaxLengthValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(RangeSizeValidatorDirective, RangeSizeValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiRangeSize][formControlName],[tiRangeSize][formControl],[tiRangeSize][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => RangeSizeValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class RangeSizeValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiRangeSize';\r\n  @Input(RangeSizeValidatorDirective.NAME) baseValue: any;\r\n  validatorStr: string = BaseValidator.getValidatorStr(RangeSizeValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(RangeValueValidatorDirective, RangeValueValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiRangeValue][formControlName],[tiRangeValue][formControl],[tiRangeValue][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => RangeValueValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class RangeValueValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiRangeValue';\r\n  @Input(RangeValueValidatorDirective.NAME) baseValue: any;\r\n  validatorStr: string = BaseValidator.getValidatorStr(RangeValueValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(MinLengthValidatorDirective, MinLengthValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiMinLength][formControlName],[tiMinLength][formControl],[tiMinLength][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => MinLengthValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class MinLengthValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiMinLength';\r\n  @Input(MinLengthValidatorDirective.NAME) baseValue: any;\r\n  validatorStr: string = BaseValidator.getValidatorStr(MinLengthValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(EmailValidatorDirective, EmailValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiEmail][formControlName],[tiEmail][formControl],[tiEmail][ngModel]`,\r\n  providers: [{\r\n    provide: NG_VALIDATORS,\r\n    // tslint:disable-next-line: no-forward-ref\r\n    useExisting: forwardRef(() => EmailValidatorDirective),\r\n    multi: true\r\n  }]\r\n})\r\nexport class EmailValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiEmail';\r\n  @Input(EmailValidatorDirective.NAME) enabled: boolean;\r\n  validatorStr: string = BaseValidator.getValidatorStr(EmailValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(NotScriptValidatorDirective, NotScriptValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiNotScript][formControlName],[tiNotScript][formControl],[tiNotScript][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => NotScriptValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class NotScriptValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiNotScript';\r\n  @Input(NotScriptValidatorDirective.NAME) enabled: boolean;\r\n  validatorStr: string = BaseValidator.getValidatorStr(NotScriptValidatorDirective.NAME);\r\n}\r\n","// tslint:disable-next-line: ordered-imports\r\nimport { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(ContainsValidatorDirective, ContainsValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiContains][formControlName],[tiContains][formControl],[tiContains][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => ContainsValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class ContainsValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiContains';\r\n  @Input(ContainsValidatorDirective.NAME) baseValue: string;\r\n  validatorStr: string = BaseValidator.getValidatorStr(ContainsValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(NotContainsValidatorDirective, NotContainsValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiNotContains][formControlName],[tiNotContains][formControl],[tiNotContains][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => NotContainsValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class NotContainsValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiNotContains';\r\n  @Input(NotContainsValidatorDirective.NAME) baseValue: any;\r\n  validatorStr: string = BaseValidator.getValidatorStr(NotContainsValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(DateValidatorDirective, DateValidatorDirective.NAME))\r\n@Directive({\r\n    selector: `[tiDate][formControlName],[tiDate][formControl],[tiDate][ngModel]`,\r\n    providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => DateValidatorDirective),\r\n      multi: true\r\n    }]\r\n  })\r\nexport class DateValidatorDirective extends BaseValidator {\r\n    static readonly NAME: string = 'tiDate';\r\n    @Input(DateValidatorDirective.NAME) enabled: boolean;\r\n    validatorStr: string = BaseValidator.getValidatorStr(DateValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(DigitsValidatorDirective, DigitsValidatorDirective.NAME))\r\n@Directive({\r\n    selector: `[tiDigits][formControlName],[tiDigits][formControl],[tiDigits][ngModel]`,\r\n    providers: [{\r\n        provide: NG_VALIDATORS,\r\n        // tslint:disable-next-line: no-forward-ref\r\n        useExisting: forwardRef(() => DigitsValidatorDirective),\r\n        multi: true\r\n    }]\r\n  })\r\nexport class DigitsValidatorDirective extends BaseValidator {\r\n    static readonly NAME: string = 'tiDigits';\r\n    @Input(DigitsValidatorDirective.NAME) enabled: boolean;\r\n    validatorStr: string = BaseValidator.getValidatorStr(DigitsValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(EqualValidatorDirective, EqualValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiEqual][formControlName],[tiEqual][formControl],[tiEqual][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => EqualValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class EqualValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiEqual';\r\n  @Input(EqualValidatorDirective.NAME) baseValue: string;\r\n  validatorStr: string = BaseValidator.getValidatorStr(EqualValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(Ipv4ValidatorDirective, Ipv4ValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiIpv4][formControlName],[tiIpv4][formControl],[tiIpv4][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => Ipv4ValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class Ipv4ValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiIpv4';\r\n  @Input(Ipv4ValidatorDirective.NAME) enabled: boolean;\r\n  validatorStr: string = BaseValidator.getValidatorStr(Ipv4ValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(Ipv6ValidatorDirective, Ipv6ValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiIpv6][formControlName],[tiIpv6][formControl],[tiIpv6][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => Ipv6ValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class Ipv6ValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiIpv6';\r\n  @Input(Ipv6ValidatorDirective.NAME) enabled: boolean;\r\n  validatorStr: string = BaseValidator.getValidatorStr(Ipv6ValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(MaxValueValidatorDirective, MaxValueValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiMaxValue][formControlName],[tiMaxValue][formControl],[tiMaxValue][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => MaxValueValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class MaxValueValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiMaxValue';\r\n  @Input(MaxValueValidatorDirective.NAME) baseValue: any;\r\n  validatorStr: string = BaseValidator.getValidatorStr(MaxValueValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(IntegerValidatorDirective, IntegerValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiInteger][formControlName],[tiInteger][formControl],[tiInteger][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => IntegerValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class IntegerValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiInteger';\r\n  @Input(IntegerValidatorDirective.NAME) enabled: boolean;\r\n  validatorStr: string = BaseValidator.getValidatorStr(IntegerValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(MinValueValidatorDirective, MinValueValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiMinValue][formControlName],[tiMinValue][formControl],[tiMinValue][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => MinValueValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class MinValueValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiMinValue';\r\n  @Input(MinValueValidatorDirective.NAME) baseValue: any;\r\n  validatorStr: string = BaseValidator.getValidatorStr(MinValueValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(NotEqualValidatorDirective, NotEqualValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiNotEqual][formControlName],[tiNotEqual][formControl],[tiNotEqual][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => NotEqualValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class NotEqualValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiNotEqual';\r\n  @Input(NotEqualValidatorDirective.NAME) baseValue: any;\r\n  validatorStr: string = BaseValidator.getValidatorStr(NotEqualValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(NumberValidatorDirective, NumberValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiNumber][formControlName],[tiNumber][formControl],[tiNumber][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => NumberValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class NumberValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiNumber';\r\n  @Input(NumberValidatorDirective.NAME) enabled: boolean;\r\n  validatorStr: string = BaseValidator.getValidatorStr(NumberValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(PasswordValidatorDirective, PasswordValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiPassword][formControlName],[tiPassword][formControl],[tiPassword][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => PasswordValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class PasswordValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiPassword';\r\n  @Input(PasswordValidatorDirective.NAME) baseValue: any;\r\n  validatorStr: string = BaseValidator.getValidatorStr(PasswordValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(PortValidatorDirective, PortValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiPort][formControlName],[tiPort][formControl],[tiPort][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => PortValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class PortValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiPort';\r\n  @Input(PortValidatorDirective.NAME) enabled: boolean;\r\n  validatorStr: string = BaseValidator.getValidatorStr(PortValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(RegExpValidatorDirective, RegExpValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiRegExp][formControlName],[tiRegExp][formControl],[tiRegExp][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => RegExpValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class RegExpValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiRegExp';\r\n  @Input(RegExpValidatorDirective.NAME) baseValue: any;\r\n  validatorStr: string = BaseValidator.getValidatorStr(RegExpValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(UrlValidatorDirective, UrlValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiUrl][formControlName],[tiUrl][formControl],[tiUrl][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => UrlValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\n// @Directive(BaseValidator.getDirectiveConfig(RequiredValidatorDirective, RequiredValidatorDirective.NAME))\r\nexport class UrlValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiUrl';\r\n  @Input(UrlValidatorDirective.NAME) enabled: boolean;\r\n  validatorStr: string = BaseValidator.getValidatorStr(UrlValidatorDirective.NAME);\r\n}\r\n","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { BaseValidator } from './BaseValidator';\r\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\n// @Directive(BaseValidator.getDirectiveConfig(RequiredValidatorDirective, RequiredValidatorDirective.NAME))\r\n@Directive({\r\n  selector: `[tiRequired][formControlName],[tiRequired][formControl],[tiRequired][ngModel]`,\r\n  providers: [{\r\n      provide: NG_VALIDATORS,\r\n      // tslint:disable-next-line: no-forward-ref\r\n      useExisting: forwardRef(() => RequiredValidatorDirective),\r\n      multi: true\r\n  }]\r\n})\r\nexport class RequiredValidatorDirective extends BaseValidator {\r\n  static readonly NAME: string = 'tiRequired';\r\n  @Input(RequiredValidatorDirective.NAME) enabled: boolean;\r\n  validatorStr: string = BaseValidator.getValidatorStr(RequiredValidatorDirective.NAME);\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiIconModule } from '../../components/icon/TiIconModule';\r\nimport { TiLoadingModule } from '../../components/loading/TiLoadingModule';\r\nimport { TiValidationDirective } from './TiValidationDirective';\r\nimport { TiPwdMsgComponent } from './TiPwdMsgComponent';\r\nimport { TiErrorMsgComponent } from './TiErrorMsgComponent';\r\nimport { TiPendingStateComponent } from './TiPendingStateComponent';\r\nimport { MaxLengthValidatorDirective } from './validators/directives/MaxLengthValidatorDirective';\r\nimport { RangeSizeValidatorDirective } from './validators/directives/RangeSizeValidatorDirective';\r\nimport { RangeValueValidatorDirective } from './validators/directives/RangeValueValidatorDirective';\r\nimport { MinLengthValidatorDirective } from './validators/directives/MinLengthValidatorDirective';\r\nimport { EmailValidatorDirective } from './validators/directives/EmailValidatorDirective';\r\nimport { NotScriptValidatorDirective } from './validators/directives/NotScriptValidatorDirective';\r\nimport { ContainsValidatorDirective } from './validators/directives/ContainsValidatorDirective';\r\nimport { NotContainsValidatorDirective } from './validators/directives/NotContainsValidatorDirective';\r\nimport { DateValidatorDirective } from './validators/directives/DateValidatorDirective';\r\nimport { DigitsValidatorDirective } from './validators/directives/DigitsValidatorDirective';\r\nimport { EqualValidatorDirective } from './validators/directives/EqualValidatorDirective';\r\nimport { Ipv4ValidatorDirective } from './validators/directives/Ipv4ValidatorDirective';\r\nimport { Ipv6ValidatorDirective } from './validators/directives/Ipv6ValidatorDirective';\r\nimport { MaxValueValidatorDirective } from './validators/directives/MaxValueValidatorDirective';\r\nimport { IntegerValidatorDirective } from './validators/directives/IntegerValidatorDirective';\r\nimport { MinValueValidatorDirective } from './validators/directives/MinValueValidatorDirective';\r\nimport { NotEqualValidatorDirective } from './validators/directives/NotEqualValidatorDirective';\r\nimport { NumberValidatorDirective } from './validators/directives/NumberValidatorDirective';\r\nimport { PasswordValidatorDirective } from './validators/directives/PasswordValidatorDirective';\r\nimport { PortValidatorDirective } from './validators/directives/PortValidatorDirective';\r\nimport { RegExpValidatorDirective } from './validators/directives/RegExpValidatorDirective';\r\nimport { UrlValidatorDirective } from './validators/directives/UrlValidatorDirective';\r\nimport { RequiredValidatorDirective } from './validators/directives/RequiredValidatorDirective';\r\nimport { TiRendererModule } from '../../services/renderer/TiRendererModule';\r\nimport { TiTipModule } from '../tip/TiTipModule';\r\nimport { BaseValidator } from './validators/directives/BaseValidator';\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiIconModule,\r\n    TiRendererModule,\r\n    TiTipModule, // 引用TiTipModule，可以使用Tip指令和Tip服务\r\n    TiLoadingModule\r\n  ],\r\n  // 下面必须写两遍，因为生产环境不允许编译之前执行函数。\r\n  exports: [\r\n    BaseValidator,\r\n    TiErrorMsgComponent,\r\n    TiPendingStateComponent,\r\n    TiValidationDirective, // 额外加的\r\n    MaxLengthValidatorDirective, RangeSizeValidatorDirective, RangeValueValidatorDirective, MinLengthValidatorDirective,\r\n    EmailValidatorDirective, NotScriptValidatorDirective, ContainsValidatorDirective, NotContainsValidatorDirective,\r\n    DateValidatorDirective, DigitsValidatorDirective, EqualValidatorDirective, Ipv4ValidatorDirective, Ipv6ValidatorDirective,\r\n    MaxValueValidatorDirective, IntegerValidatorDirective,\r\n    MinValueValidatorDirective, NotEqualValidatorDirective, NumberValidatorDirective, PasswordValidatorDirective,\r\n    PortValidatorDirective, RegExpValidatorDirective, UrlValidatorDirective, RequiredValidatorDirective\r\n  ],\r\n  declarations: [\r\n    BaseValidator,\r\n    TiValidationDirective, TiPwdMsgComponent, TiPendingStateComponent, TiErrorMsgComponent, // 额外加的\r\n    MaxLengthValidatorDirective, RangeSizeValidatorDirective, RangeValueValidatorDirective, MinLengthValidatorDirective,\r\n    EmailValidatorDirective, NotScriptValidatorDirective, ContainsValidatorDirective, NotContainsValidatorDirective,\r\n    DateValidatorDirective, DigitsValidatorDirective, EqualValidatorDirective, Ipv4ValidatorDirective, Ipv6ValidatorDirective,\r\n    MaxValueValidatorDirective, IntegerValidatorDirective,\r\n    MinValueValidatorDirective, NotEqualValidatorDirective, NumberValidatorDirective, PasswordValidatorDirective,\r\n    PortValidatorDirective, RegExpValidatorDirective, UrlValidatorDirective, RequiredValidatorDirective\r\n  ],\r\n  entryComponents: [TiPwdMsgComponent, TiErrorMsgComponent, TiPendingStateComponent]\r\n})\r\nexport class TiValidationModule {\r\n}\r\nexport { TiValidationDirective } from './TiValidationDirective';\r\nexport { TiPasswordValidatorConfig, TiValidationConfig, TiValidationType } from './TiValidationInterface';\r\nexport { TiValidators } from './validators/TiValidators';\r\nexport { BaseValidator} from './validators/directives/BaseValidator';\r\nexport { TiErrorMsgComponent } from './TiErrorMsgComponent';\r\nexport { TiPendingStateComponent } from './TiPendingStateComponent';\r\nexport { MaxLengthValidatorDirective } from './validators/directives/MaxLengthValidatorDirective';\r\nexport { RangeSizeValidatorDirective } from './validators/directives/RangeSizeValidatorDirective';\r\nexport { RangeValueValidatorDirective } from './validators/directives/RangeValueValidatorDirective';\r\nexport { MinLengthValidatorDirective } from './validators/directives/MinLengthValidatorDirective';\r\nexport { EmailValidatorDirective } from './validators/directives/EmailValidatorDirective';\r\nexport { NotScriptValidatorDirective } from './validators/directives/NotScriptValidatorDirective';\r\nexport { ContainsValidatorDirective } from './validators/directives/ContainsValidatorDirective';\r\nexport { NotContainsValidatorDirective } from './validators/directives/NotContainsValidatorDirective';\r\nexport { DateValidatorDirective } from './validators/directives/DateValidatorDirective';\r\nexport { DigitsValidatorDirective } from './validators/directives/DigitsValidatorDirective';\r\nexport { EqualValidatorDirective } from './validators/directives/EqualValidatorDirective';\r\nexport { Ipv4ValidatorDirective } from './validators/directives/Ipv4ValidatorDirective';\r\nexport { Ipv6ValidatorDirective } from './validators/directives/Ipv6ValidatorDirective';\r\nexport { MaxValueValidatorDirective } from './validators/directives/MaxValueValidatorDirective';\r\nexport { IntegerValidatorDirective } from './validators/directives/IntegerValidatorDirective';\r\nexport { MinValueValidatorDirective } from './validators/directives/MinValueValidatorDirective';\r\nexport { NotEqualValidatorDirective } from './validators/directives/NotEqualValidatorDirective';\r\nexport { NumberValidatorDirective } from './validators/directives/NumberValidatorDirective';\r\nexport { PasswordValidatorDirective } from './validators/directives/PasswordValidatorDirective';\r\nexport { PortValidatorDirective } from './validators/directives/PortValidatorDirective';\r\nexport { RegExpValidatorDirective } from './validators/directives/RegExpValidatorDirective';\r\nexport { UrlValidatorDirective } from './validators/directives/UrlValidatorDirective';\r\nexport { RequiredValidatorDirective } from './validators/directives/RequiredValidatorDirective';\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { TiIpsectionComponent } from './TiIpsectionComponent';\r\nimport { TiSelectModule } from '../select/TiSelectModule';\r\nimport { TiMaskModule } from '../../directives/maskinput/TiMaskModule';\r\nimport { TiTextModule } from '../text/TiTextModule';\r\nimport { TiValidationModule } from '../../directives/validation/TiValidationModule';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TiMaskModule,\r\n    TiSelectModule,\r\n    TiTextModule,\r\n    ReactiveFormsModule,\r\n    TiValidationModule],\r\n  exports: [TiIpsectionComponent],\r\n  declarations: [TiIpsectionComponent]\r\n})\r\n\r\nexport class TiIpsectionModule { }\r\nexport { TiIpsectionComponent, TiIpsectionConfig } from './TiIpsectionComponent';\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    NgZone,\r\n    Optional,\r\n    Output,\r\n    Renderer2,\r\n    SimpleChange,\r\n    SimpleChanges,\r\n    ViewEncapsulation,\r\n    Inject\r\n} from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router, UrlTree } from '@angular/router';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { Util } from '../../utils/Util';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\nimport { TiLeftmenuLevel1Component } from './TiLeftmenuLevel1Component';\r\nimport { TiRenderer } from '../../services/renderer/TiRenderer';\r\n\r\n/**\r\n * 左侧菜单各项数据接口\r\n *\r\n * 是TiLeftmenuLevel1 和 TiLeftmenuLevel2 组件的 item 接口的数据类型\r\n */\r\nexport interface TiLeftmenuItem {\r\n    /**\r\n     * 设置当前菜单项对应的路由，与 Router.navigate方法的第一个参数一样\r\n     */\r\n    router?: Array<any>;\r\n    // routerExtras?: { relativeTo?: string, queryParams?: Object, fragment?: string };\r\n    /**\r\n     * 设置当前菜单项对应路由的配置信息，与 Router.navigate方法的第二个参数一样\r\n     */\r\n    routerExtras?: NavigationExtras;\r\n    /**\r\n     * 设置一个router路由列表，当该列表中的路由被激活时，其对应的菜单项被激活处于高亮状态。\r\n     * 其使用场景为多个路由对应同一个左侧菜单项。\r\n     *\r\n     * routerList 数组中每一个元素与 Router.navigate方法的第一个参数一样\r\n     */\r\n    routerList?: Array<Array<any>>; // 数组中元素也为数组\r\n    /**\r\n     * 链接地址，点击后路由激活项不变，在新页面打开配置地址。\r\n     *\r\n     * 10.0.1新增\r\n     *\r\n     * v10.0.1 ~ v10.1.3版本存在XSS攻击(url类型)风险和用户点击这个链接并进入一个新的标签，新标签中的页面如果存在恶意代码，就可以将原网站直接导航到一个虚假网站的安全风险。\r\n     *\r\n     * v10.1.4 版本做了安全处理，已不存在上述两种安全问题，建议业务尽快升级版本。\r\n     */\r\n    href?: string;\r\n    /**\r\n     * 设置分界线（只支持一级菜单），在设置该属性菜单项的底部生成一条区块分界线。\r\n     *\r\n     * 10.0.2新增\r\n     */\r\n    showDividingLine?: boolean;\r\n    /**\r\n     * 允许有多余的属性字段\r\n     */\r\n    [propName: string]: any;\r\n}\r\n/**\r\n * TiLeftmenu组件提供了一种方便灵活实现页面布局左侧菜单的方式，支持两级菜单。\r\n *\r\n * 其内部包含5个组件:\r\n *\r\n * TiLeftmenu : 左侧菜单最外层的指令；\r\n *\r\n * TiLeftmenuGroup: 菜单分组指令；\r\n *\r\n * TileftmenuGroupItem：分组文本内容指令；\r\n *\r\n * TiLeftmenuHead : 菜单头部内容指令；\r\n *\r\n * TiLeftmenuLevel1 ：一级菜单指令；\r\n *\r\n * TiLeftmenuItem ：一级菜单文本内容指令；\r\n *\r\n * TiLeftmenuLevel2 ：二级菜单指令。\r\n *\r\n * <example-url>../tiny3demo/#/leftmenu/leftmenu-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-leftmenu',\r\n    templateUrl: './leftmenu.html',\r\n    styleUrls: ['./leftmenu.less'],\r\n    host: {\r\n        '[class.ti3-leftmenu-container]': 'true',\r\n        '[class.ti3-leftmenu-hide]': 'collapsed'\r\n    },\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TiLeftmenuComponent extends TiBaseComponent {\r\n    /**\r\n     * 设置激活菜单项。这个值应该是 TiLeftmenuLevel1 和 TiLeftmenuLevel2 组件的 item 接口传入的值的集合中的一个(item)\r\n     *\r\n     * 此接口是双向绑定的，设置时中括号“[]”和圆括号“()”要同时使用\r\n     */\r\n    @Input() active: TiLeftmenuItem;\r\n    /**\r\n     * 激活菜单项改变时向外通知\r\n     */\r\n\r\n    @Output() readonly activeChange: EventEmitter<TiLeftmenuItem> = new EventEmitter();\r\n    /**\r\n     * 控制右侧内容区的刷新\r\n     *\r\n     * 注意：当重复点击当前激活菜单项时，需要刷新右侧内容区，为了实现此功能设置了该接口；\r\n     * 该接口是双向绑定的，当重复点击当前激活菜单项时，reloadState的值会经历 true(上次的值) -> false -> true\r\n     * 的变化过程，开发者给改接口与其右侧区域容器上ngIf接口绑定的是同一个变量，所以ngIf的值也会经历同样的变化，\r\n     * 从而做到右侧内容区的刷新。\r\n     */\r\n    @Input() reloadState: boolean = true;\r\n    /**\r\n     * 右侧内容区是否需要刷新的状态值改变时向外通知\r\n     */\r\n    @Output() readonly reloadStateChange: EventEmitter<boolean> = new EventEmitter();\r\n    // routable接口在3.0.3版本起对外隐藏，10.0.1重新开放\r\n    /**\r\n     * 10.0.1新增\r\n     *\r\n     * 设置是否使用路由来控制菜单对应内容显示/隐藏，默认使用路由。\r\n     */\r\n    @Input() routable: boolean = true;\r\n    /**\r\n     * 是否开启左侧菜单面板可折叠功能，默认开启。\r\n     */\r\n    @Input() toggleable: boolean = true;\r\n    /**\r\n     * 左侧菜单面板是否为收起状态，用于设置面板收起/展开状态，默认展开。\r\n     */\r\n    @Input() collapsed: boolean = false;\r\n    /**\r\n     * 左侧菜单面板收起/展开状态改变时向外通知\r\n     */\r\n    @Output() readonly collapsedChange: EventEmitter<boolean> = new EventEmitter();\r\n    /**\r\n     * @ignore\r\n     * tiLeftmenu中包含的 TiLeftmenuLevel1Component 实例集合\r\n     */\r\n    public level1Items: Array<TiLeftmenuLevel1Component> = [];\r\n    private navigationSubscription: Subscription;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public readonly resolvedPromise: Promise<any> = Promise.resolve(null);\r\n    /**\r\n     * 标志量，是否为url改变(需要去改变active)\r\n     */\r\n    private isUrlChange: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private panelContainer: any;\r\n    /**\r\n     * 滚动条的宽度, 在 TiLeftmenuFoot中也有使用\r\n     * @ignore\r\n     */\r\n    public scrollWidth: number;\r\n\r\n    constructor(elementRef: ElementRef, public renderer2: Renderer2,\r\n                @Optional() private router: Router,\r\n                @Optional() private activeRoute: ActivatedRoute,\r\n                private tiRenderer: TiRenderer, private zone: NgZone, @Inject(DOCUMENT) private document) {\r\n        super(elementRef, renderer2);\r\n    }\r\n\r\n    // 判断item的router是否是父路由下默认激活的子路由（即子路由与父路由路径一致）\r\n    private static isDefaultActiveChildRoute(item: TiLeftmenuItem): boolean {\r\n        // 默认激活的子路由的router可设为[]或['']\r\n        return !item.router || item.router.length === 0 || item.router[0] === '';\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        // 初始时右侧内容区默认显示，需使外部用户的reloadState值为true。\r\n        // 双向绑定数据时，对初始传入的值立即修改并传出时会报错，\r\n        // 此处参考ngModel源码setValue的处理，使用promise延后执行时序\r\n        this.resolvedPromise.then(() => {\r\n            this.reloadStateChange.emit(true);\r\n        });\r\n        this.scrollWidth = this.getScrollbarSize('Y');\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        super.ngAfterViewInit();\r\n\r\n        if (!this.routable) {\r\n            return;\r\n        }\r\n\r\n        // 直接输入url(刷新页面)改变状态时，leftmenu能同步修改激活状态\r\n        const urlActiveItem: TiLeftmenuItem = this.getActiveItemByUrl(this.level1Items);\r\n\r\n        if (urlActiveItem) {\r\n            // 双向绑定数据时，对初始传入的值立即修改并传出时会报错，\r\n            // 此处参考ngModel源码setValue的处理，使用promise延后执行时序\r\n            this.resolvedPromise.then(() => {\r\n                if (urlActiveItem !== this.active) {\r\n                    this.isUrlChange = true;\r\n                    this.active = urlActiveItem;\r\n                    this.activeChange.emit(this.active);\r\n                }\r\n            });\r\n        } else {\r\n            this.link();\r\n        }\r\n\r\n        // 从非leftMenu处跳转改变状态时，leftmenu能同步修改激活状态\r\n        this.navigationSubscription = this.router.events.subscribe((evt: any) => {\r\n            if (evt instanceof NavigationEnd) {\r\n                const newActiveItem: TiLeftmenuItem = this.getActiveItemByUrl(this.level1Items);\r\n                if (newActiveItem && newActiveItem !== this.active) {\r\n                    this.active = newActiveItem;\r\n                    this.activeChange.emit(this.active);\r\n                    this.isUrlChange = true;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.panelContainer = this.nativeElement.querySelector('.ti3-leftmenu-panel-container');\r\n        const headElement: any = this.nativeElement.querySelector('.ti3-leftmenu-head');\r\n        let headCloneElement: any ;\r\n        this.zone.runOutsideAngular(() => { // 避免不停触发变化检测\r\n            this.renderer2.listen(this.panelContainer, 'scroll', (): void => {\r\n                const scrollTop: number = this.panelContainer.scrollTop;\r\n                if (scrollTop > 0) {\r\n                    if (!headCloneElement) {\r\n                        headCloneElement = headElement.cloneNode(true);\r\n                        this.renderer2.addClass(headCloneElement, 'ti3-leftmenu-head-clone');\r\n\r\n                        this.renderer2.setStyle(headCloneElement, 'width', `calc(100% - ${this.scrollWidth}px)`);\r\n                        this.nativeElement.appendChild(headCloneElement);\r\n                    }\r\n                } else if (headCloneElement) {\r\n                    this.nativeElement.removeChild(headCloneElement);\r\n                    headCloneElement = undefined;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        const activeObj: SimpleChange = changes['active'];\r\n        if (activeObj && !activeObj.firstChange) {\r\n            for (const level1Item of this.level1Items) {\r\n                level1Item.setShowChildren();\r\n                level1Item.setActiveState();\r\n            }\r\n\r\n            if (this.routable && !this.isUrlChange) {\r\n                this.link();\r\n            }\r\n\r\n            this.isUrlChange = false;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.navigationSubscription) {\r\n            this.navigationSubscription.unsubscribe();\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 模板中使用\r\n     */\r\n    public toggleClickFn(): void {\r\n        this.collapsed = !this.collapsed;\r\n        this.collapsedChange.emit(this.collapsed);\r\n    }\r\n\r\n    private getActiveItemByUrl(arr: Array<any>): TiLeftmenuItem {\r\n        let resultItem: TiLeftmenuItem;\r\n        for (const component of arr) {\r\n            if (this.isActived(component.item)) {\r\n                resultItem = component.item;\r\n                if (TiLeftmenuComponent.isDefaultActiveChildRoute(component.item)) {\r\n                    continue;\r\n                } else {\r\n                    return resultItem;\r\n                }\r\n            }\r\n\r\n            if (component.children && component.children.length > 0) {\r\n                const result: TiLeftmenuItem = this.getActiveItemByUrl(component.children);\r\n                if (result) {\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n\r\n        return resultItem;\r\n    }\r\n\r\n    private isActived(item: TiLeftmenuItem): boolean {\r\n        const relativeRoute: NavigationExtras = this.getRelativeRoute(item.routerExtras);\r\n        if (this.isMatchCurrentUrl(item.router, relativeRoute)) {\r\n            return true;\r\n        }\r\n\r\n        if (Util.isArray(item.routerList) && item.routerList.length > 0) {\r\n            for (const router of item.routerList) {\r\n                if (this.isMatchCurrentUrl(router, relativeRoute)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private isMatchCurrentUrl(router: Array<any>, relativeRoute: NavigationExtras): boolean {\r\n        if (!Util.isArray(router)) {\r\n            return false;\r\n        }\r\n\r\n        const itemUrlTree: UrlTree = this.router.createUrlTree(router, relativeRoute);\r\n\r\n        return this.router.isActive(itemUrlTree, false);\r\n    }\r\n\r\n    private link(): void {\r\n        if (this.active) {\r\n            this.navigate(this.active);\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public navigate(item: TiLeftmenuItem): void {\r\n        if (TiLeftmenuComponent.isDefaultActiveChildRoute(item)) {\r\n            //  routeConfig 可能为null\r\n            if (!this.activeRoute.routeConfig) {\r\n                return;\r\n            }\r\n            const path: string = this.activeRoute.routeConfig.path;\r\n            const url: string = this.router.routerState.snapshot.url;\r\n            const rootUrl: string = url.split(path)[0];\r\n            // 绝对路径跳转\r\n            this.router.navigate([rootUrl + path], item.routerExtras);\r\n        } else {\r\n            this.router.navigate(item.router, this.getNavigationExtras(item.routerExtras));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 点击当前选中项时，触发内容区重载\r\n     * @param item 当前点击项\r\n     */\r\n    public triggerReload(item: TiLeftmenuItem): void {\r\n        // 使reloadState由false变为true,配合内容区的ngIf做到内容区的重载\r\n        this.reloadStateChange.emit(false);\r\n        setTimeout(() => {\r\n            this.reloadStateChange.emit(true);\r\n            // 如果当前路由就是item.router对应路由，则此导航不作用(路由相同)；\r\n            // 如果当前路由是item.routerList中的路由，则需要跳转到item.router对应路由\r\n            this.navigate(item);\r\n        }, 0);\r\n    }\r\n\r\n    private getNavigationExtras(routerExtras: Object): Object {\r\n        return { relativeTo: this.activeRoute, ...routerExtras};\r\n    }\r\n\r\n    private getRelativeRoute(routerExtras: Object): NavigationExtras {\r\n        if (!routerExtras || !routerExtras['relativeTo']) {\r\n            return { relativeTo: this.activeRoute };\r\n        }\r\n\r\n        return { relativeTo: routerExtras['relativeTo'] };\r\n    }\r\n        /**\r\n     * 得到浏览器滚动条的宽度和高度\r\n     * 代表滚动条的方向，取值为X or Y\r\n     */\r\n    private getScrollbarSize(direction: string): number {\r\n        const outerDiv: any = this.renderer.createElement('div');\r\n        const innerDiv: any = this.renderer.createElement('div');\r\n\r\n        this.renderer.setStyle(innerDiv, 'width', '100%');\r\n        this.renderer.setStyle(innerDiv, 'height', '100%');\r\n\r\n        this.renderer.appendChild(outerDiv, innerDiv);\r\n        this.tiRenderer.setStyles(outerDiv, {\r\n            position: 'absolute',\r\n            top: '-9999px',\r\n            left: '-9999px',\r\n            width: '100px',\r\n            height: '100px',\r\n            overflow: 'hidden'\r\n        });\r\n\r\n        this.renderer.appendChild(this.document.body, outerDiv);\r\n\r\n        const field: string = direction === 'X' ? 'height' : 'width';\r\n        const noScrollSize: number = typeof innerDiv.getBoundingClientRect === 'function' ? innerDiv.getBoundingClientRect()[field] : 0;\r\n        this.renderer.setStyle(outerDiv, 'overflow', 'scroll');\r\n        const withScrollSize: number = typeof innerDiv.getBoundingClientRect === 'function' ? innerDiv.getBoundingClientRect()[field] : 0;\r\n        this.document.body.removeChild(outerDiv);\r\n\r\n        return parseFloat((noScrollSize - withScrollSize).toFixed(1));\r\n\r\n    }\r\n}\r\n","import {\r\n  Component\r\n} from '@angular/core';\r\n/**\r\n * TiLeftmenuHead是菜单头部组件，其包裹的元素会作为leftmenu的菜单头部\r\n */\r\n@Component({\r\n  selector: 'ti-leftmenu-head',\r\n  templateUrl: './leftmenu-head.html',\r\n  host: {\r\n    '[class.ti3-leftmenu-head]': 'true'\r\n  }\r\n})\r\nexport class TiLeftmenuHeadComponent {\r\n}\r\n","import { Component } from \"@angular/core\";\r\n/**\r\n * TiLeftmenuGroupItem 是分组菜单文本内容组件，嵌在 TiLeftmenuGroupComponent组件中使用，其包裹的元素会作为 leftmenu 的分组菜单项内容显示\r\n *\r\n * 3.1.3新增\r\n *\r\n */\r\n@Component({\r\n    selector: 'ti-leftmenu-group-item',\r\n    templateUrl: './leftmenu-group-item.html'\r\n})\r\n\r\nexport class TiLeftmenuGroupItemComponent {}\r\n","import { TiLeftmenuLevel1Component } from './TiLeftmenuLevel1Component';\r\nimport { Component, Input } from '@angular/core';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\n\r\n/**\r\n * TiLeftmenuGroup 是分组菜单组件，嵌在 TiLeftmenu组件中使用。\r\n *\r\n * 3.1.3新增\r\n *\r\n */\r\n@Component({\r\n    selector: 'ti-leftmenu-group',\r\n    templateUrl: './leftmenu-group.html',\r\n    host: {\r\n        '[class.ti3-leftmenu-group-container]': 'true'\r\n    }\r\n})\r\n\r\nexport class TiLeftmenuGroupComponent extends TiBaseComponent{\r\n    /**\r\n     * 设置当前分组菜单项是否展开\r\n     */\r\n    @Input() expanded: boolean = false;\r\n    /**\r\n     * @ignore\r\n     * 当前TiLeftmenuGroup下的所有TiLeftmenuLevel1的集合\r\n     */\r\n    public children: Array<TiLeftmenuLevel1Component> = [];\r\n\r\n    /**\r\n     * @ignore\r\n     * 在模板中使用，实现分组的展开与收起\r\n     */\r\n    public clickGroup(): void {\r\n        this.expanded = !this.expanded;\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 在模板中使用，当前分组中的子项是否有激活项\r\n     */\r\n    public hasActivedChild(): boolean {\r\n        if (!this.children || this.children.length <= 0) {\r\n            return false;\r\n        }\r\n\r\n        for (const level1 of this.children) {\r\n\r\n            if (level1.isActived || level1.hasActivedChildren()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef\r\n} from '@angular/core';\r\n/**\r\n * TiLeftmenuItem 是一级菜单文本内容组件，嵌在 TiLeftmenuLevel1Component组件中使用，其包裹的元素会作为 leftmenu 的一级菜单的菜单项内容显示\r\n */\r\n@Component({\r\n  selector: 'ti-leftmenu-item',\r\n  templateUrl: './leftmenu-item.html',\r\n  host: {\r\n    '[class.ti3-leftmenu-level1-label]': 'true'\r\n  }\r\n})\r\nexport class TiLeftmenuItemComponent {\r\n  /**\r\n   * @ignore\r\n   */\r\n  public element: any;\r\n  constructor(elementRef: ElementRef) {\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ElementRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Renderer2,\r\n  SecurityContext\r\n} from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\nimport { TiLeftmenuComponent, TiLeftmenuItem } from './TiLeftmenuComponent';\r\nimport { TiLeftmenuGroupComponent } from './TiLeftmenuGroupComponent';\r\nimport { TiLeftmenuLevel2Component } from './TiLeftmenuLevel2Component';\r\nimport { TiLeftmenuItemComponent } from './TiLeftmenuItemComponent';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\n/**\r\n * TiLeftmenuLevel1Component 是一级菜单组件，嵌在 TiLeftmenu 中使用\r\n *\r\n */\r\n@Component({\r\n  selector: 'ti-leftmenu-level1',\r\n  templateUrl: './leftmenu-level1.html',\r\n  host: {\r\n        '[class.ti3-leftmenu-level1]': 'true',\r\n        '[class.ti3-leftmenu-level1-dividing]': 'item.showDividingLine'\r\n    }\r\n})\r\n\r\nexport class TiLeftmenuLevel1Component extends TiBaseComponent implements AfterViewInit, OnDestroy, OnInit {\r\n    /**\r\n     * 设置当前菜单项的内容信息\r\n     *\r\n     * router(类型：Array<any>): 设置当前项对应的路由，与 Router.navigate方法的第一个参数一样；\r\n     *\r\n     * routerExtras(类型：NavigationExtras): 设置当前项对应路由的配置信息，与 Router.navigate方法的第二个参数一样；\r\n     *\r\n     * routerList(类型：Array<Array<any>>): 设置一个router路由列表，当该列表中的路由被激活时，其对应的菜单项被激活处于高亮状态。\r\n     * 其使用场景为多个路由对应同一个左侧菜单项。\r\n     *\r\n     * href(类型：string)：v10.0.1版本新增，为该菜单配置链接地址，点击后路由激活项不变，在新页面打开配置地址。\r\n     * v10.0.1 ~ v10.1.3版本存在XSS攻击(url类型)风险和用户点击这个链接并进入一个新的标签，新标签中的页面如果存在恶意代码，就可以将原网站直接导航到一个虚假网站的安全风险。\r\n     * v10.1.4 版本做了安全处理，已不存在上述两种安全问题，建议业务尽快升级版本。\r\n     */\r\n    @Input() item: TiLeftmenuItem;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ContentChild(TiLeftmenuItemComponent, /* TODO: add static flag */ { static: true }) leftmenuItem: TiLeftmenuItemComponent;\r\n    /**\r\n     * @ignore\r\n     * 当前 TiLeftmenuLevel1下所有的 TiLeftmenuLevel2 的集合\r\n     */\r\n    public children: Array<TiLeftmenuLevel2Component> = [];\r\n    /**\r\n     * @ignore\r\n     * 模板中使用，二级菜单是否展开\r\n     */\r\n    public showChildren: boolean = false;\r\n    /**\r\n     * @ignore\r\n     * 模板中使用，是否是激活状态\r\n     */\r\n    public isActived: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private leftmenu: TiLeftmenuComponent;\r\n    private element: any;\r\n    constructor(leftmenu: TiLeftmenuComponent, private elementRef: ElementRef, renderer2: Renderer2,\r\n                private changeRef: ChangeDetectorRef, @Optional() private leftmenuGroup: TiLeftmenuGroupComponent,\r\n                private domSanitizer: DomSanitizer) {\r\n            super(elementRef, renderer2);\r\n            this.element = this.elementRef.nativeElement;\r\n            this.leftmenu = leftmenu;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (this.leftmenuGroup) {\r\n            this.leftmenuGroup.children.push(this);\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n         this.setShowChildren();\r\n         this.setActiveState();\r\n         this.leftmenu.level1Items.push(this);\r\n         this.changeRef.detectChanges();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n       const index: number = this.leftmenu.level1Items.indexOf(this);\r\n       if (this.leftmenuGroup) {\r\n            const groupIndex: number = this.leftmenuGroup.children.indexOf(this);\r\n            if (groupIndex !== -1) {\r\n                this.leftmenuGroup.children.splice(groupIndex, 1);\r\n           }\r\n       }\r\n\r\n       if (index !== -1) {\r\n            this.leftmenu.level1Items.splice(index, 1);\r\n       }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 模板中使用，点击一级菜单项时调用\r\n     */\r\n    public selectFn(): void {\r\n        if (this.item.href) {\r\n            this.openHref(this.item.href);\r\n            this.element.querySelector('.ti3-leftmenu-level1-item')\r\n            .blur();\r\n\r\n            return;\r\n        }\r\n        const oldactive: TiLeftmenuItem = this.leftmenu.active;\r\n\r\n        if (this.hasChildren()) {\r\n            this.showChildren = !this.showChildren;\r\n            this.isActived = !this.showChildren && this.hasActivedChildren();\r\n            if (this.showChildren) {\r\n                for (const level1Items of this.leftmenu.level1Items) {\r\n                    if (level1Items === this) {\r\n                        continue;\r\n                    }\r\n                    if (level1Items.showChildren) {\r\n                        level1Items.showChildren = false;\r\n                        if (level1Items.hasActivedChildren()) {\r\n                            level1Items.isActived = true;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (this.leftmenu.routable) {\r\n                // 点击当前已经激活的item时，刷新对应路由\r\n                if (this.item === oldactive) {\r\n                    this.leftmenu.triggerReload(this.item);\r\n                } else {\r\n                    // 点击其他项需要进行跳转，来触发路由守卫，实际是否跳转取决于路由守卫返回值。\r\n                    this.leftmenu.navigate(this.item);\r\n                }\r\n            } else {\r\n                if (this.item !== oldactive) {\r\n                    this.leftmenu.active = this.item;\r\n                    this.leftmenu.activeChange.emit(this.item);\r\n                    this.isActived = true;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 在 TiLeftmenuComponent.ts 中调用了\r\n     */\r\n    public setShowChildren(): void {\r\n        // 初始化时，子菜单中有当前选中状态时，显示子菜单\r\n        this.showChildren = this.hasActivedChildren();\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 在模板上使用\r\n     */\r\n    public hasChildren(): boolean {\r\n        return this.children && this.children.length > 0;\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 在模板上使用\r\n     */\r\n    public hasActivedChildren(): boolean {\r\n        if (!this.hasChildren()) {\r\n            return false;\r\n        }\r\n\r\n        const result: Array<TiLeftmenuLevel2Component> = this.children.filter((level2: TiLeftmenuLevel2Component) => {\r\n            return level2.item === this.leftmenu.active;\r\n        });\r\n\r\n        return result.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 设置当前菜单是否处于激活状态，下边两种情况下将当前菜单设置为激活状态：\r\n     *\r\n     * 有子菜单时，当子菜单有有激活状态项并且子菜单关闭状态情况下；\r\n     *\r\n     * 没有子菜单时，当前菜单就是激活菜单项。\r\n     */\r\n    public setActiveState(): void {\r\n        this.isActived = (this.hasActivedChildren() && !this.showChildren)\r\n            || this.item === this.leftmenu.active;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public onStateIconClick(): void {\r\n      Util.trigger(this.leftmenuItem.element, 'click');\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 如果有链接，跳转新页面\r\n     */\r\n    public openHref(href: string): void {\r\n        const newTab: any = window.open(this.domSanitizer.sanitize(SecurityContext.URL, href), '_blank');\r\n        // IE 下有时 newTab 不存在\r\n        if (newTab) {\r\n            newTab.opener = null;\r\n        }\r\n    }\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  Renderer2,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  AfterViewInit,\r\n  NgZone\r\n} from '@angular/core';\r\nimport { TiLeftmenuComponent, TiLeftmenuItem } from './TiLeftmenuComponent';\r\nimport { TiLeftmenuLevel1Component } from './TiLeftmenuLevel1Component';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\n/**\r\n * TiLeftmenuLevel2Component 是二级菜单组件，嵌在 TiLeftmenuLevel1 中使用\r\n */\r\n@Component({\r\n  selector: 'ti-leftmenu-level2',\r\n  templateUrl: './leftmenu-level2.html',\r\n  host: {\r\n    '[class.ti3-leftmenu-level2]': 'true',\r\n    '[class.ti3-leftmenu-level2-active]': 'this.item === this.leftmenu.active',\r\n    '[attr.tabindex]': '0',\r\n    '[id]': 'appendId(\"leftmenu_level2\")',\r\n    '(click)': 'selectFn()',\r\n    '(keyup.enter)': 'selectFn()'\r\n  }\r\n})\r\n\r\nexport class TiLeftmenuLevel2Component extends TiBaseComponent implements OnInit, OnDestroy, AfterViewInit {\r\n  /**\r\n   * 设置当前菜单项的内容信息\r\n   *\r\n   * router(类型：Array<any>): 设置当前项对应的路由，与 Router.navigate方法的第一个参数一样；\r\n   *\r\n   * routerExtras(类型：NavigationExtras): 设置当前项对应路由的配置信息，与 Router.navigate方法的第二个参数一样；\r\n   *\r\n   * routerList(类型：Array<Array<any>>): 设置一个router路由列表，当该列表中的路由被激活时，其对应的菜单项被激活处于高亮状态。\r\n   * 其使用场景为多个路由对应同一个左侧菜单项。\r\n   *\r\n   * href(类型：string)：v10.0.1版本新增，为该菜单配置链接地址，点击后路由激活项不变，在新页面打开配置地址。\r\n   * v10.0.1 ~ v10.1.3版本存在XSS攻击(url类型)风险和用户点击这个链接并进入一个新的标签，新标签中的页面如果存在恶意代码，就可以将原网站直接导航到一个虚假网站的安全风险。\r\n   * v10.1.4 版本做了安全处理，已不存在上述两种安全问题，建议业务尽快升级版本。\r\n   */\r\n  @Input() item: TiLeftmenuItem;\r\n  /**\r\n   * @ignore\r\n   */\r\n  public leftmenu: TiLeftmenuComponent;\r\n  public level2Ele: any;\r\n  public renderer: any;\r\n\r\n  constructor(elementRef: ElementRef, renderer2: Renderer2, leftmenu: TiLeftmenuComponent, private level1: TiLeftmenuLevel1Component\r\n    ,private zone: NgZone) {\r\n    super(elementRef, renderer2);\r\n    this.leftmenu = leftmenu;\r\n    this.level2Ele = elementRef;\r\n    this.renderer = renderer2;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.level1.children.push(this);\r\n  }\r\n  ngAfterViewInit(): void {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.renderer.listen(this.level2Ele.nativeElement, 'mousedown', (): void => {\r\n          this.renderer.setStyle(this.level2Ele.nativeElement, 'outline', 'none');\r\n      });\r\n      this.renderer.listen(this.level2Ele.nativeElement, 'blur', (): void => {\r\n          this.renderer.setStyle(this.level2Ele.nativeElement, 'outline', '');\r\n      });\r\n    });\r\n}\r\n  /**\r\n   * @ignore\r\n   * 模板中使用，点击二级菜单项时调用\r\n   */\r\n  public selectFn(): void {\r\n    if (this.item.href) {\r\n      this.level1.openHref(this.item.href);\r\n      this.level2Ele.nativeElement.blur(); // 为了没有outline。\r\n\r\n      return;\r\n    }\r\n\r\n    if (this.leftmenu.routable) {\r\n      // 点击当前已经激活的item时，刷新对应路由\r\n      if (this.leftmenu.active === this.item) {\r\n         this.leftmenu.triggerReload(this.item);\r\n      } else {\r\n        // 点击其他项需要进行跳转，来触发路由守卫，实际是否跳转取决于路由守卫返回值。\r\n        this.leftmenu.navigate(this.item);\r\n      }\r\n    } else {\r\n      if (this.leftmenu.active !== this.item) {\r\n        this.leftmenu.active = this.item;\r\n        this.leftmenu.activeChange.emit(this.item);\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n       const index: number = this.level1.children.indexOf(this);\r\n       if (index !== -1) {\r\n            this.level1.children.splice(index, 1);\r\n       }\r\n    }\r\n}\r\n","import { TiLeftmenuComponent } from './TiLeftmenuComponent';\r\nimport { Component, ElementRef, Renderer2 } from '@angular/core';\r\n@Component({\r\n    selector: 'ti-leftmenu-foot',\r\n    templateUrl: './leftmenu-foot.html',\r\n    host: {\r\n        '[class.ti3-leftmenu-foot]': 'true'\r\n    }\r\n})\r\n\r\nexport class TiLeftmenuFootComponent {\r\n    constructor(private renderer2: Renderer2, private elementRef: ElementRef, private tiLeftmenu: TiLeftmenuComponent) {}\r\n\r\n    ngAfterViewInit(): void {\r\n        const templateDom: any = this.renderer2.createElement('div');\r\n        const panelDom: any = this.tiLeftmenu.nativeElement.querySelector('.ti3-leftmenu-panel');\r\n        const hostElement: any = this.elementRef.nativeElement;\r\n        // 修复SSR错误：ERROR ReferenceError: getComputedStyle is not defined\r\n        const spaceRight: string = typeof getComputedStyle === 'function' ? getComputedStyle(hostElement).getPropertyValue('stroke-width') : '0';\r\n\r\n        this.renderer2.setStyle(templateDom, 'height', hostElement.offsetHeight + 'px');\r\n        this.renderer2.appendChild(panelDom, templateDom);\r\n\r\n        this.renderer2.setStyle(hostElement, 'width', `calc(100% - ${this.tiLeftmenu.scrollWidth}px)`);\r\n        this.renderer2.setStyle(hostElement, 'marginRight', `${this.tiLeftmenu.scrollWidth}px`);\r\n        this.renderer2.setStyle(hostElement, 'paddingRight', `calc(${spaceRight} - ${this.tiLeftmenu.scrollWidth}px)`);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\nimport { TiRendererModule } from '../../services/renderer/TiRendererModule';\r\nimport { TiLeftmenuComponent } from './TiLeftmenuComponent';\r\nimport { TiLeftmenuHeadComponent } from './TiLeftmenuHeadComponent';\r\nimport { TiLeftmenuGroupItemComponent } from './TiLeftmenuGroupItemComponent';\r\nimport { TiLeftmenuGroupComponent } from './TiLeftmenuGroupComponent';\r\nimport { TiLeftmenuLevel1Component } from './TiLeftmenuLevel1Component';\r\nimport { TiLeftmenuItemComponent } from './TiLeftmenuItemComponent';\r\nimport { TiLeftmenuLevel2Component } from './TiLeftmenuLevel2Component';\r\nimport { TiLeftmenuFootComponent } from './TiLeftmenuFootComponent';\r\nimport { TiOutlineModule } from '../../directives/outline/TiOutlineModule';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiIconModule,\r\n    TiRendererModule,\r\n    TiOutlineModule\r\n  ],\r\n  exports: [TiLeftmenuComponent,\r\n            TiLeftmenuHeadComponent,\r\n            TiLeftmenuLevel1Component,\r\n            TiLeftmenuItemComponent,\r\n            TiLeftmenuLevel2Component,\r\n            TiLeftmenuGroupComponent,\r\n            TiLeftmenuGroupItemComponent,\r\n            TiLeftmenuFootComponent],\r\n  declarations: [TiLeftmenuComponent,\r\n                 TiLeftmenuHeadComponent,\r\n                 TiLeftmenuLevel1Component,\r\n                 TiLeftmenuItemComponent,\r\n                 TiLeftmenuLevel2Component,\r\n                 TiLeftmenuGroupComponent,\r\n                 TiLeftmenuGroupItemComponent,\r\n                 TiLeftmenuFootComponent]\r\n})\r\nexport class TiLeftmenuModule {\r\n}\r\nexport * from './TiLeftmenuComponent';\r\nexport { TiLeftmenuComponent, TiLeftmenuItem } from './TiLeftmenuComponent';\r\nexport { TiLeftmenuHeadComponent } from './TiLeftmenuHeadComponent';\r\nexport { TiLeftmenuLevel1Component } from './TiLeftmenuLevel1Component';\r\nexport { TiLeftmenuItemComponent } from './TiLeftmenuItemComponent';\r\nexport { TiLeftmenuLevel2Component } from './TiLeftmenuLevel2Component';\r\nexport { TiLeftmenuGroupComponent } from './TiLeftmenuGroupComponent';\r\nexport { TiLeftmenuGroupItemComponent } from './TiLeftmenuGroupItemComponent';\r\nexport { TiLeftmenuFootComponent } from './TiLeftmenuFootComponent';\r\n","import { NgModule } from '@angular/core';\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: []\r\n})\r\nexport class TiTableFixedHeadServiceModule {\r\n}\r\n","import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';\r\nimport { TiRenderer } from '../../services/renderer/TiRenderer';\r\nimport { TiTableFixedHeadServiceModule } from './TiTableFixedHeadServiceModule';\r\nimport { ResizableOpts, TiColsResizableDirective } from './TiColsResizableDirective';\r\nimport { TiTableComponent } from './TiTableComponent';\r\n/**\r\n * @ignore\r\n * 提供表头锁定功能\r\n */\r\n@Injectable({\r\n    providedIn: TiTableFixedHeadServiceModule\r\n})\r\nexport class TiTableFixedHeadService {\r\n    private renderer: Renderer2;\r\n    constructor(rendererFactory: RendererFactory2,\r\n                private tiRenderer: TiRenderer) {\r\n        this.renderer = rendererFactory.createRenderer(null, null);\r\n    }\r\n\r\n    public getTheadContainer(hostEle: any): any {\r\n        return this.tiRenderer.findChildrenByClassName(hostEle, 'ti3-table-fixed-head')[0];\r\n    }\r\n\r\n    public getTbodyContainer(theadContainer: any): any {\r\n        const tbodyContainer: any = theadContainer.nextElementSibling;\r\n        if (tbodyContainer && this.tiRenderer.hasClass(tbodyContainer, 'ti3-table-container')) {\r\n            return tbodyContainer;\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    public processOverflowY(theadContainer: any, tbodyContainer: any, tableCom: TiTableComponent): void {\r\n        const headTable: any = theadContainer.children[0];\r\n        const scrollBarWidth: number = this.getScrollBarWidth('Y');\r\n        const isOverflowedY: boolean = this.overflowedResult(tbodyContainer, 'Y');\r\n        const isOverflowedX: boolean = this.overflowedResult(tbodyContainer, 'X');\r\n        // 根据表体的宽度来设置表头的宽度\r\n        if (isOverflowedY && !isOverflowedX) {\r\n            this.renderer.setStyle(headTable, 'width', `calc(100% - ${scrollBarWidth}px)`);\r\n        } else {\r\n            this.renderer.setStyle(headTable, 'width', '100%');\r\n        }\r\n\r\n        const fixheadFiller: any = this.tiRenderer.findChildrenByClassName(theadContainer, 'ti3-table-fixed-head-filler')[0];\r\n        // 1px为经验值，避免计算的误差导致填充块和表头之间有一点空白间隔\r\n        const fillerWidth: number = scrollBarWidth + 1;\r\n        // 根据Y轴是否有滚动条来控制表头右侧的填充块的有无\r\n        if (isOverflowedY) {\r\n            if (tableCom.fixedColumnInfo.thFixedRight) {\r\n                this.renderer.setStyle(tableCom.fixedColumnInfo.thFixedRight, 'right', `${scrollBarWidth}px`);\r\n            }\r\n\r\n            if (fixheadFiller) {\r\n                this.renderer.setStyle(fixheadFiller, 'width', fillerWidth + 'px');\r\n\r\n                return;\r\n            }\r\n\r\n            const headerFiller: any = document.createElement('div');\r\n            this.renderer.addClass(headerFiller, 'ti3-table-fixed-head-filler');\r\n            this.renderer.setStyle(headerFiller, 'width', fillerWidth + 'px');\r\n            theadContainer.appendChild(headerFiller);\r\n        } else if (fixheadFiller) {\r\n            this.renderer.removeChild(theadContainer, fixheadFiller);\r\n            if (tableCom.fixedColumnInfo.thFixedRight) {\r\n                this.renderer.setStyle(tableCom.fixedColumnInfo.thFixedRight, 'right', 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    public removeTbodyContainerBorderBottom(tbodyContainer: any, displayedData: Array<Object>): void {\r\n        const tbody: any = tbodyContainer.children[0].children[1];\r\n        const hasNodataTbody: any = this.tiRenderer.findChildrenByClassName(tbody, 'ti3-table-nodata').length > 0;\r\n        const hasNodataGuideTbody: any = this.tiRenderer.findChildrenByClassName(tbody, 'ti3-table-nodata-guide').length > 0;\r\n        const hasLoadfailTbody: any = this.tiRenderer.findChildrenByClassName(tbody, 'ti3-table-loadfail').length > 0;\r\n        const hasNodataSimpleTbody: any = this.tiRenderer.findChildrenByClassName(tbody,'ti3-table-nodata-simple').length > 0;\r\n        // 判断是否包含表格无数据，有图片是大间距，其他场景全部为单行文字样式，包括以下四种情况；\r\n        // 1、表格无数据：ti-table-nodata（有图片）；\r\n        // 2、查询内容为空，提示用户'购买商品'：ti-table-nodata-guide；\r\n        // 3、加载不成功，提示'重新加载'：ti-table-loadfail。\r\n        // 4. 表格无数据：ti-table-nodata-simple，只有文字提示（无图片）\r\n        const noBorderTerm: any = hasNodataTbody || hasNodataGuideTbody || hasLoadfailTbody || hasNodataSimpleTbody;\r\n\r\n        if (displayedData.length === 0 && noBorderTerm) {\r\n            this.renderer.setStyle(tbodyContainer, 'border-bottom', 'none');\r\n        } else {\r\n            this.renderer.setStyle(tbodyContainer, 'border-bottom', '');\r\n        }\r\n    }\r\n\r\n    // 由于用scrollHeight计算在IE和火狐下偶尔有1px的误差，\r\n    // 所以此处直接获取表格更准确的高度和容器的clientHeight作对比\r\n    public overflowedResult(tbodyContainer: any, direction: string, isNum?: boolean): any {\r\n        let containerSize: number = 0;\r\n        let tbodySize: number = 0;\r\n        const tbodyTable: any = tbodyContainer.children[0];\r\n        if (direction === 'X') {\r\n            containerSize = tbodyContainer.clientWidth;\r\n            // 修复SSR错误：ERROR TypeError: tbodyTable.getBoundingClientRect is not a function\r\n            if (typeof tbodyTable.getBoundingClientRect !== 'function') {\r\n                return;\r\n            }\r\n            tbodySize = this.numRound(tbodyTable.getBoundingClientRect().width, 0);\r\n        } else {\r\n            containerSize = tbodyContainer.clientHeight;\r\n            // 修复SSR错误：ERROR TypeError: tbodyTable.getBoundingClientRect is not a function\r\n            if (typeof tbodyTable.getBoundingClientRect !== 'function') {\r\n                return;\r\n            }\r\n            tbodySize = this.numRound(tbodyTable.getBoundingClientRect().height, 0);\r\n        }\r\n\r\n        // 若isNum为true，返回差值，否则返回布尔值\r\n        return isNum ? (tbodySize - containerSize) : (tbodySize > containerSize);\r\n    }\r\n\r\n    public processYScrollStateChange(colsResizableDire: TiColsResizableDirective): void {\r\n        const options: ResizableOpts = colsResizableDire.resizableOpts;\r\n        // 主要处理 columns 初始异步的场景\r\n        if (!options.ths || options.ths.length === 0) {\r\n            return;\r\n        }\r\n        const tbodyContainer: any = colsResizableDire.tableCom.tbodyContainer;\r\n        const theadContainer: any = colsResizableDire.tableCom.theadContainer;\r\n        const newYScrollState: boolean = this.overflowedResult(tbodyContainer, 'Y');\r\n        if (newYScrollState === options.yScrollState) {\r\n            this.processOverflowY(theadContainer, tbodyContainer, colsResizableDire.tableCom);\r\n\r\n            return;\r\n        }\r\n\r\n        const newXScrollState: boolean = this.overflowedResult(tbodyContainer, 'X');\r\n        let lastColIndex: number = options.ths.length - 1;\r\n        let lastTh: any = options.ths[lastColIndex];\r\n        let lastThWidth: number = options.storedSizes[lastColIndex];\r\n        const scrollBarWidth: number = this.getScrollBarWidth('Y');\r\n        // 纵向滚动条由无到有\r\n        if (newYScrollState) {\r\n            if (newXScrollState && newXScrollState === options.xScrollState) {\r\n                options.storeTableWidthChange += scrollBarWidth;\r\n            } else {\r\n                // 第一次纵向滚动条状态发生变化要减小表格宽度时，去减小非特殊列中宽度最大的一列的宽度\r\n                // 这样处理是为了避免最后一列的宽度变小\r\n                if (colsResizableDire.isfirstYScrollStateChange) {\r\n                    lastTh = this.getMaxWidthTh(colsResizableDire);\r\n                    if (lastTh) {\r\n                        lastColIndex = parseInt(lastTh.getAttribute('ti-visible-index'), 10);\r\n                        lastThWidth = options.storedSizes[lastColIndex];\r\n                    }\r\n                }\r\n                options.storedSizes[lastColIndex] = lastThWidth - scrollBarWidth;\r\n            }\r\n\r\n            // 纵向滚动条由有到无\r\n        } else {\r\n            if (newXScrollState === options.xScrollState) {\r\n                if (newXScrollState) {\r\n                    options.storeTableWidthChange -= scrollBarWidth;\r\n                } else {\r\n                    options.storedSizes[lastColIndex] = lastThWidth + scrollBarWidth;\r\n                }\r\n            } else if (!newXScrollState) {\r\n                options.storedSizes[lastColIndex] = lastThWidth + (scrollBarWidth -\r\n                    options.storeTableWidthChange);\r\n                options.storeTableWidthChange = 0;\r\n            }\r\n        }\r\n        if (lastTh) {\r\n            colsResizableDire.setWidth(lastTh, options.storedSizes[lastColIndex]);\r\n            colsResizableDire.setWidth(options.secondThs[lastColIndex], options.storedSizes[lastColIndex]);\r\n        }\r\n\r\n        this.processOverflowY(theadContainer, tbodyContainer, colsResizableDire.tableCom);\r\n        colsResizableDire.isfirstYScrollStateChange = false;\r\n        options.xScrollState = this.overflowedResult(tbodyContainer, 'X');\r\n        options.yScrollState = this.overflowedResult(tbodyContainer, 'Y');\r\n\r\n        // 纵向滚动条状态改变时可能会引起列宽改变和横向滚动条状态改变，所以要处理列固定\r\n        if (colsResizableDire.tableCom.fixedColumnInfo.hasFixedColumn) {\r\n            colsResizableDire.tableCom.processFixedColumn();\r\n        }\r\n    }\r\n\r\n    private getMaxWidthTh(colsResizableDire: TiColsResizableDirective): any {\r\n        const options: ResizableOpts = colsResizableDire.resizableOpts;\r\n        colsResizableDire.updateStoredSizes();\r\n\r\n        const ths: Array<any> = options.ths.filter((th: any) => {\r\n            // 排除最后一列和不可拖动的列\r\n            return !th.hasAttribute(colsResizableDire.notResizableAttr) && !colsResizableDire.isLastColumn(th);\r\n        });\r\n\r\n        // 按列宽从小到大排序\r\n        const sortedThs: Array<any> = ths.sort((a: any, b: any) => {\r\n            const indexA: number = parseInt(a.getAttribute('ti-visible-index'), 10);\r\n            const indexB: number = parseInt(b.getAttribute('ti-visible-index'), 10);\r\n\r\n            return options.storedSizes[indexA] - options.storedSizes[indexB];\r\n        });\r\n\r\n        // 返回宽度最大的列\r\n        return sortedThs[sortedThs.length - 1];\r\n    }\r\n\r\n    // 处理在列拖动过程中横向滚动条的出现引起纵向滚动条出现时的账本(storeColsWidthChange)的变化\r\n    public handleYOverflowedWithX(resizableOpts: ResizableOpts, tbodyContainer: any): void {\r\n        const newYScrollState: boolean = this.overflowedResult(tbodyContainer, 'Y');\r\n\r\n        if (newYScrollState === resizableOpts.yScrollState) {\r\n            return;\r\n        }\r\n\r\n        const scrollBarWidth: number = this.getScrollBarWidth('Y');\r\n        const newXScrollState: boolean = this.overflowedResult(tbodyContainer, 'X');\r\n        if (newYScrollState) {\r\n            resizableOpts.storeTableWidthChange += scrollBarWidth;\r\n            resizableOpts.isYOverflowedWithX = true;\r\n        }\r\n\r\n        resizableOpts.xScrollState = newXScrollState;\r\n        resizableOpts.yScrollState = newYScrollState;\r\n    }\r\n\r\n    public handleYNotOverflowedWithX(resizableOpts: ResizableOpts, tbodyContainer: any): void {\r\n        const scrollBarWidthX: number = this.getScrollBarWidth('X');\r\n        const scrollBarWidthY: number = this.getScrollBarWidth('Y');\r\n        const overflowedHeight: number = this.overflowedResult(tbodyContainer, 'Y', true);\r\n        const overflowedWidth: number = this.overflowedResult(tbodyContainer, 'X', true);\r\n        // 当列拖动横向滚动条出现导致纵向滚动条出现后，再缩小列宽时，由于无法准确获得横向滚动条消失的时刻去对表格\r\n        // 宽度做补偿，所以当表格列宽到达容器边界附近时，用临时将overflow-x设为hidden的方式使横向滚动条消失。\r\n        if (resizableOpts.isYOverflowedWithX && overflowedHeight > 0 && overflowedHeight <= scrollBarWidthX &&\r\n            overflowedWidth > 0 && overflowedWidth <= scrollBarWidthY) {\r\n            this.renderer.setStyle(tbodyContainer, 'overflow-x', 'hidden');\r\n            // 对账本(storeTableWidthChange)清零\r\n            resizableOpts.storeTableWidthChange = 0;\r\n            resizableOpts.isYOverflowedWithX = false;\r\n\r\n            setTimeout(() => {\r\n                this.renderer.setStyle(tbodyContainer, 'overflow-x', 'auto');\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    // 获取滚动条宽度\r\n    public getScrollBarWidth(direction: string): number {\r\n        const temporaryDiv: any = document.createElement('div');\r\n        this.tiRenderer.setStyles(temporaryDiv, {\r\n            position: 'absolute',\r\n            top: '-9999px',\r\n            left: '-9999px',\r\n            width: '100px',\r\n            height: '100px',\r\n            overflow: 'hidden'\r\n        });\r\n        const nestDiv: any = document.createElement('div');\r\n        this.tiRenderer.setStyles(nestDiv, { width: '100%', height: '100%' });\r\n        temporaryDiv.appendChild(nestDiv);\r\n        document.body.appendChild(temporaryDiv);\r\n        const noScrollWidth: number = nestDiv.getBoundingClientRect().width;\r\n        const noScrollHeight: number = nestDiv.getBoundingClientRect().height;\r\n        this.renderer.setStyle(temporaryDiv, 'overflow', 'scroll');\r\n        const scrollWidth: number = nestDiv.getBoundingClientRect().width;\r\n        const scrollHeight: number = nestDiv.getBoundingClientRect().height;\r\n        this.renderer.removeChild(document.body, temporaryDiv);\r\n        const scrollBarWidthX: number = this.numRound(noScrollHeight - scrollHeight, 1);\r\n        const scrollBarWidthY: number = this.numRound(noScrollWidth - scrollWidth, 1);\r\n\r\n        return direction === 'X' ? scrollBarWidthX : scrollBarWidthY;\r\n    }\r\n\r\n    // 对浮点数四舍五入保留指定小数位数的数字\r\n    public numRound(num: number, decimal: number): number {\r\n        return parseFloat(num.toFixed(decimal));\r\n    }\r\n}\r\n","import {\r\n    AfterViewChecked,\r\n    AfterViewInit,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    IterableChanges,\r\n    IterableDiffer,\r\n    IterableDiffers,\r\n    NgZone,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    Renderer2,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport { TiRenderer } from '../../services/renderer/TiRenderer';\r\nimport { Util } from '../../utils/Util';\r\nimport { Subject } from 'rxjs';\r\nimport { TiTableFixedHeadService } from './TiTableFixedHeadService';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\n\r\n/**\r\n * TiTable 组件上 srcData 输入接口中 state 属性值的类型接口\r\n */\r\nexport interface TiTableSrcState {\r\n    /**\r\n     * 传给组件的表格源数据是否已经过搜索处理\r\n     */\r\n    searched: boolean;\r\n    /**\r\n     * 传给组件的表格源数据是否已经过排序处理\r\n     */\r\n    sorted: boolean;\r\n    /**\r\n     * 传给组件的表格源数据是否已经过分页处理\r\n     */\r\n    paginated: boolean;\r\n}\r\n/**\r\n * 表格当前数据的搜索、排序、分页状态值接口\r\n */\r\nexport interface TiTableDataState {\r\n    /**\r\n     * 搜索状态，其包含两个属性：\r\n     *\r\n     * searchWords：类型为Array<string>，搜索字符串集合\r\n     *\r\n     * searchKeys：类型为Array，搜索指定的字段范围\r\n     *\r\n     */\r\n    search: { searchWords: Array<string>, searchKeys?: Array<string> };\r\n    /**\r\n     * 排序状态，其包含两个属性：\r\n     *\r\n     * sortKey：类型为 String，进行排序的数据属性\r\n     *\r\n     * asc：类型为 Boolean，是否为升序\r\n     *\r\n     */\r\n    sort: { sortKey: string, asc: boolean };\r\n    /**\r\n     * 分页状态，其包含两个属性：\r\n     *\r\n     * currentPage：类型Number，表示当前页\r\n     *\r\n     * itemsPerPage：类型为Number，每页显示条数\r\n     *\r\n     */\r\n    pagination: { currentPage: number, itemsPerPage: number};\r\n}\r\n\r\n/**\r\n * 表格行数据类型接口\r\n */\r\nexport interface TiTableRowData {\r\n    /**\r\n     * 控制当前详情行是否展开\r\n     *\r\n     */\r\n    showDetails?: boolean;\r\n    /**\r\n     * 允许有多余的属性字段\r\n     *\r\n     */\r\n    [propName: string]: any;\r\n}\r\n/**\r\n * TiTable 组件上 srcData 输入接口的数据类型接口\r\n */\r\nexport interface TiTableSrcData {\r\n    state: TiTableSrcState;\r\n    /**\r\n     * 表格源数据\r\n     *\r\n     */\r\n    data: Array<TiTableRowData>;\r\n}\r\n\r\n/**\r\n * 表格的各列信息\r\n *\r\n */\r\nexport interface TiTableColumns {\r\n    /**\r\n     * 表头列文本内容。当某一列的title为空字符串时，当前列一直在表格中显示，但是不出现在控制列动态\r\n     * 隐藏/显示 设置面板中，例如单选列、多选列、详情展开图标列;\r\n     *\r\n     */\r\n    title?: string;\r\n    /**\r\n     * 设置列宽，支持百分比和px值;\r\n     */\r\n    width?: string;\r\n    /**\r\n     * 此属性只有在表格具有列动态 显示/隐藏 功能时才需要设置，show可以分别设置如下值：\r\n     *\r\n     *  true： 表示该列默认显示，用户可以通过面板操作切换其 显示/隐藏 状态。\r\n     *\r\n     *  false : 表示该列默认隐藏，用户可以通过面板操作切换其 显示/隐藏 状态。\r\n     *\r\n     *  undefined : 表示该列不具备动态 显示/隐藏 功能，固定显示。\r\n     *\r\n     * 注意：设置show属性值时，title为空字符串时，该列固定显示，但不出现在列操作面板中。\r\n     */\r\n    show?: boolean;\r\n    /**\r\n     * 允许有多余的属性字段\r\n     */\r\n    [propName: string]: any;\r\n}\r\n\r\n/**\r\n * 表格当前页、每页个数记忆开关\r\n * 10.1.2版本新增\r\n */\r\nexport interface TiPaginationStorageConfig {\r\n    currentPage?: boolean;\r\n    itemsPerPage?: boolean;\r\n}\r\n/**\r\n * 表格记忆各项开关\r\n * 10.0.4 新增\r\n */\r\nexport interface TiTableStorageConfig {\r\n    /**\r\n     * 排序\r\n     */\r\n    sort: boolean;\r\n    /**\r\n     * 分页\r\n     */\r\n    pagination: boolean | TiPaginationStorageConfig;\r\n    /**\r\n     * 列宽\r\n     */\r\n    colsWidth: boolean;\r\n    /**\r\n     * 允许有多余的属性字段\r\n     */\r\n    [propName: string]: any;\r\n}\r\n/**\r\n * TiTable 表格组件\r\n *\r\n * 支持以表格的形式展示多条数据\r\n *\r\n * 支持前后台分页、搜索、排序、详情展开、列拖动（调整列宽）、控制列动态隐藏/显示、行复选、行单选、\r\n * 表格单元格(th, td)智能tip、树表、列文本对齐方式、表头固定等功能\r\n *\r\n * <example-url>../tiny3demo/#/table/table-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-table',\r\n    templateUrl: './table.html',\r\n    styleUrls: ['./table.less'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    host: {\r\n        '[class.ti3-table]': 'true'\r\n    }\r\n})\r\n\r\nexport class TiTableComponent extends TiBaseComponent implements OnInit, AfterViewChecked, AfterViewInit, OnDestroy {\r\n    private static DEFAULT_SRC_DATA: TiTableSrcData = {\r\n        data: [],\r\n        state: {\r\n            searched: false,\r\n            sorted: false,\r\n            paginated: false\r\n        }\r\n    };\r\n    /**\r\n     * 设置表格源数据及其处理数据状态\r\n     *\r\n     * data: 表格源数据。一般情况下，前台分页时传入表格全部数据，后台分页时传入当前页数据。\r\n     *\r\n     * state: 用来标识传入的表格源数据是否已经经过排序(sorted)、过滤(searched)、分页(paginated)等处理。\r\n     *\r\n     * 应用举例：后台分页场景下，传入的data为当前页数据（即已经进行了分页），因此应将paginated设置为true；\r\n     *          如果传入的数据已经进行了排序（如后台排序场景），则应将sorted设置为true。\r\n     */\r\n    @Input() srcData: TiTableSrcData = TiTableComponent.DEFAULT_SRC_DATA;\r\n    /**\r\n     * 设置表格实时呈现的数据。表格源数据经过排序、搜索、分页处理之后即为displayedData\r\n     *\r\n     * 注意：\r\n     *\r\n     * 1. 产品在开发中，只需在初始化时将其设置为 [ ] 即可，组件内部将自动完成对其赋值和更新;\r\n     *\r\n     * 2. 开发者应该在 tbody>tr 中完成对 displayedData 的遍历和显示（如通过ngFor）。\r\n     */\r\n    @Input() displayedData: Array<TiTableRowData>; // 表格中实时展示的数据集\r\n    /**\r\n     * 表格记忆，既是开关，又是存储id, 所以每一个表格需要设置唯一值。\r\n     * 10.0.4 新增\r\n     */\r\n    @Input() storageId: string;\r\n    /**\r\n     * 表格记忆各项开关配置\r\n     * 10.0.4 新增\r\n     */\r\n    @Input() storageConfig: TiTableStorageConfig = {\r\n        sort: true,\r\n        pagination: true,\r\n        colsWidth: true,\r\n    };\r\n    /**\r\n     * 表格实时呈现的数据改变时向外通知\r\n     */\r\n    @Output() readonly displayedDataChange: EventEmitter<Array<TiTableRowData>> = new EventEmitter();\r\n    /**\r\n     * 设置表格的各列信息。开发者可以使用该接口的值在 thead>tr>th 中完成对表头内容的设置；\r\n     *\r\n     * 控件内部根据columns设置完成必要的逻辑处理。 建议对columns数组中的对象设置如下属性：\r\n     *\r\n     * title: 表头列文本内容。当某一列的title为空字符串时，当前列一直在表格中显示，但是不出现在控制列动态\r\n     *         隐藏/显示 设置面板中，例如单选列、多选列、详情展开图标列;\r\n     *\r\n     * width: 设置列宽，支持百分比和px值;\r\n     *\r\n     * show: 此属性只有在表格具有列动态 显示/隐藏 功能时才需要设置，show可以分别设置如下值：\r\n     *\r\n     *       true： 表示该列默认显示，用户可以通过面板操作切换其 显示/隐藏 状态。\r\n     *\r\n     *       false : 表示该列默认隐藏，用户可以通过面板操作切换其 显示/隐藏 状态。\r\n     *\r\n     *       undefined : 表示该列不具备动态 显示/隐藏 功能，固定显示。\r\n     *\r\n     *       注意：设置show属性值时，title为空字符串时，该列固定显示，但不出现在列操作面板中。\r\n     */\r\n    @Input() columns: Array<TiTableColumns> = [];\r\n    /**\r\n     * 设置表格搜索功能的需被检索的字符串的集合。\r\n     *\r\n     * 此接口需配合searchKeys使用。\r\n     *\r\n     *  1. searchWords长度为1时，在searchKeys指定的字段下搜索searchWords[0]指定的字符串,\r\n     *     在指定字段中的任一字段中搜索到时即满足条件(并集)。如：searchWords: ['b'],\r\n     *     searchKeys: ['firstName', 'lastName']，则在firstName字段包含‘b’，\r\n     *     或在lastName字段包含‘b’时本行数据即满足搜索条件;\r\n     *\r\n     * 2. searchWords长度大于1且searchKeys与searchWords长度相等时，在searchKeys指定的字段下搜索searchWords对应(按顺序)元素指定的字符串,\r\n     *    在指定字段中的所有字段搜索到对应字符串时才满足条件(交集)。如：searchWords: ['b', '18'],\r\n     *    searchKeys: ['firstName', 'age']，则在firstName字段包含‘b’且\r\n     *    在age字段包含‘18’时本行数据才满足搜索条件。\r\n     */\r\n    @Input() searchWords: Array<string> = null;\r\n    /**\r\n     * 为表格搜索功能指定搜索的字段范围。\r\n     *\r\n     * 此接口需配合searchWords使用。\r\n     */\r\n    @Input() searchKeys: Array<string> = null; // 是否使用null\r\n    /**\r\n     * 有详情功能时，设置组件是否开启当前页只显示一行详情的功能。\r\n     *\r\n     * 设置为true，表示表格中当前页只展示一行的详情，不设置或设为false时，可展开多行的详情。\r\n     */\r\n    @Input() closeOtherDetails: boolean = false;\r\n    /**\r\n     * 当表格数据状态变化时向外通知\r\n     *\r\n     * 1.功能描述：\r\n     *\r\n     * 状态变化指的是表格的排序、搜索、分页参数发生了变化，触发变化的原因可能是用户操作，也可能是开发者设置。\r\n     * 该回调为后台分页、后台排序和后台过滤提供了处理时机，例如，用户点击第2页时，由于页码的变化，必定会触发本回调函数，\r\n     * 进而开发者可以在该回调中向后台发请求获取第2页的数据，并赋给表格。\r\n     *\r\n     * 注意事项：初始化时不会触发该回调，只有表格状态动态改变时才会触发该回调，所以需要用户自己在初始时向后端发送请求获取表格初始化数据。\r\n     *\r\n     * 2.函数入参：TiTableComponent 组件实例\r\n     *\r\n     */\r\n    @Output() readonly stateUpdate: EventEmitter<TiTableComponent> = new EventEmitter();\r\n    /**\r\n     * @ignore\r\n     */\r\n    public hostEle: Element;\r\n    private srcDataDiffer: IterableDiffer<object>;\r\n    private data: Array<TiTableRowData>;\r\n    private promise: Promise<any> = Promise.resolve(null);\r\n    /**\r\n     * @ignore 判断是否使用了ti-head-sort组件\r\n     */\r\n    public enableSort: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public paginationSubject: Subject<any> = new Subject<any>();\r\n    /**\r\n     * @ignore\r\n     */\r\n    public viewInitSubject: Subject<any> = new Subject<any>();\r\n     /**\r\n     * @ignore\r\n     */\r\n    public containerScrollXChangeSubject: Subject<any> = new Subject<any>();\r\n    /**\r\n     * @ignore\r\n     */\r\n    public thResizeSubject: Subject<any> = new Subject<any>();\r\n    /**\r\n     * @ignore\r\n     */\r\n    public updateFixedThLeftSubject: Subject<any> = new Subject<any>();\r\n    /**\r\n     * @ignore\r\n     */\r\n    public updateFixedTdLeftSubject: Subject<any> = new Subject<any>();\r\n    /**\r\n     * @ignore\r\n     */\r\n    public updateColumnsSubject: Subject<Array<TiTableColumns>> = new Subject<Array<TiTableColumns>>();\r\n    /**\r\n     * @ignore\r\n     * 其中包含了sort、search、pagination三个属性，每个属性都描述了当前表格数据的参数状态:\r\n     *\r\n     * sort：object类型，包含了sortKey（类型为string，进行排序的数据属性）、asc（类型为Boolean，是否为升序）属性；\r\n     *\r\n     * search: object类型，包含了searchWords（类型为array<string>，搜索字符串集合）、searchKeys（类型为Array，搜索指定的字段范围）属性；\r\n     *\r\n     * pagination: object类型，包含了currentPage（类型number，表示当前页）、itemsPerPage（类型为Number，每页显示条数）属性。\r\n     */\r\n    public dataState: TiTableDataState = {\r\n        search: { searchWords: null, searchKeys: null },\r\n        sort: { sortKey: '', asc: null },\r\n        pagination: { currentPage: -1, itemsPerPage: -1 }\r\n    };\r\n    /**\r\n     * @ignore 子元素需要访问，所以public\r\n     */\r\n    public localStorageState: { [propName: string]: any };\r\n    /**\r\n     * @ignore 子元素需要访问，所以public\r\n     */\r\n    public sessionStorageState: { [propName: string]: any };\r\n    private isDataStateChange: boolean = false;\r\n    private oldSearchWords: Array<string> = null;\r\n    private oldSearchKeys: Array<string> = null;\r\n    private oldPagination: {currentPage: number, itemsPerPage: number} = { currentPage: -1, itemsPerPage: -1 };\r\n    private oldSort: {sortKey: string, asc: boolean} = {sortKey: '', asc: null};\r\n    /**\r\n     * 触发 stateUpdate 的事件(即引起表格数据状态改变的起因事件)，其有\"search\", \"sort\", \"pagination\"这三个值\r\n     */\r\n    private triggerEvent: 'search' | 'sort' | 'pagination';\r\n    private searchedResult: Array<TiTableRowData> = [];\r\n    private customCompareFn: (a: TiTableRowData, b: TiTableRowData, sortKey?: string) => number;\r\n    /**\r\n     * @ignore\r\n     * 表格是否为表头锁定\r\n     */\r\n    public isFixedHead: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public theadContainer: Element;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public tbodyContainer: Element;\r\n    private oldTbodyHeight: number = 0;\r\n    private unlistenFixedHeadWindowResize: () => void;\r\n    private unlistenFixedColumnWindowResize: () => void;\r\n    private unlistenWindowBeforeunload: () => void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public processYScrollStateChangeWithColsResizable: () => void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public fixedColumnInfo: {\r\n        hasFixedColumn?: boolean,\r\n        container?: any,\r\n        thFixedRight?: any,\r\n        containerWidth?: number,\r\n        fixedColumnLeftValues?: Array<number>,\r\n        columnFixedLeftLastIndex?: number\r\n    } = {};\r\n\r\n    constructor(private iterableDiffers: IterableDiffers,\r\n                elementRef: ElementRef,\r\n                private fixedHeadService: TiTableFixedHeadService,\r\n                renderer: Renderer2,\r\n                private zone: NgZone,\r\n                private tiRenderer: TiRenderer) {\r\n            super(elementRef, renderer);\r\n            this.hostEle = elementRef.nativeElement;\r\n    }\r\n\r\n    /**\r\n     * 测试某一字串(testStr)中是否存在子串(key)\r\n     * @param testStr 待检索的字符串或数值\r\n     * @param key 检索的子串\r\n     */\r\n    private static isMatched(testStr: any, keywords: string): boolean {\r\n        return (Util.isString(testStr) || Util.isNumber(testStr)) ?\r\n            (String(testStr)).toLowerCase()\r\n            .indexOf(keywords.toLowerCase()) >= 0 : false;\r\n    }\r\n\r\n    private static searchByOneWord(src: Array<TiTableRowData>, searchWords: Array<string>,\r\n                                   searchKeys: Array<string>): Array<TiTableRowData> {\r\n        const output: Array<TiTableRowData> = [];\r\n        src.forEach((item: TiTableRowData) => {\r\n            if (searchKeys && searchKeys.length > 0) {\r\n                for (const key of searchKeys) {\r\n                    if (TiTableComponent.isMatched(item[key], searchWords[0])) {\r\n                        output.push(item);\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                for (const key in item) {\r\n                    if (TiTableComponent.isMatched(item[key], searchWords[0])) {\r\n                        output.push(item);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return output;\r\n    }\r\n\r\n    private static searchByMoreThanOneWord(src: Array<TiTableRowData>, searchWords: Array<string>,\r\n                                           searchKeys: Array<string>): Array<TiTableRowData> {\r\n        const output: Array<TiTableRowData> = [];\r\n        src.forEach((item: TiTableRowData) => {\r\n            let isMatched: boolean = true;\r\n            for (let i: number = 0; i < searchKeys.length; i++) {\r\n                if (!TiTableComponent.isMatched(item[searchKeys[i]], searchWords[i])) {\r\n                    isMatched = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (isMatched) {\r\n                output.push(item);\r\n            }\r\n        });\r\n\r\n        return output;\r\n    }\r\n\r\n    private static getSearchedData(inputData: Array<TiTableRowData>, searchWords: Array<string>,\r\n                                   searchKeys: Array<string>): Array<TiTableRowData> {\r\n        let outData: Array<TiTableRowData> = [];\r\n\r\n        if (searchWords && searchWords.length === 1) {\r\n            outData = TiTableComponent.searchByOneWord(inputData, searchWords, searchKeys);\r\n        } else if (searchWords && searchWords.length > 1 && searchKeys &&\r\n            searchKeys.length === searchWords.length) {\r\n            outData = TiTableComponent.searchByMoreThanOneWord(inputData, searchWords, searchKeys);\r\n        }\r\n\r\n        return outData;\r\n    }\r\n\r\n    private static doCompare(a: any, b: any): number {\r\n        let result: number = 0;\r\n        if (a.type === b.type) {\r\n            if (a.value !== b.value) {\r\n                result = a.value < b.value ? -1 : 1;\r\n            }\r\n        } else {\r\n            result = a.type < b.type ? -1 : 1;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private static getPredicateValue(value: TiTableRowData, predicate: string): any {\r\n        if (!Util.isEmptyString(predicate) && value.hasOwnProperty(predicate)) {\r\n            return value[predicate];\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    private static getPredicateValueObj(value: any, index: number): {value: any, type: string} {\r\n        let resultVal: any = value;\r\n        if (value === null) {\r\n            resultVal = 'null';\r\n        } else if (Util.isString(value)) {\r\n            resultVal = value.toLowerCase();\r\n        } else if (Util.isArray(value)) {\r\n            resultVal = value.toString();\r\n        } else if (typeof value === 'object') {\r\n            resultVal = index;\r\n        } else if (Util.isFunction(value)) {\r\n            const resultValue: any = value();\r\n\r\n            return TiTableComponent.getPredicateValueObj(resultValue, index);\r\n        }\r\n        const type: string = typeof resultVal;\r\n\r\n        return { value: resultVal, type };\r\n    }\r\n\r\n    private static safeCopy(data: Array<any>): Array<any> {\r\n        return data ? [].concat(data) : [];\r\n    }\r\n\r\n    private static isValueEqual(n: any, o: any): boolean {\r\n        if (!(n instanceof Object) || !(o instanceof Object)) {\r\n            return n === o;\r\n        }\r\n\r\n        if (Util.isArray(n) && Util.isArray(o)) {\r\n            if (n.length !== o.length) {\r\n                return false;\r\n            } else {\r\n                for (let i: number = 0; i < o.length; i++) {\r\n                    if (n[i] !== o[i]) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        if (Object.keys(n).length !== Object.keys(o).length) {\r\n            return false;\r\n        } else {\r\n            for (const key in n) {\r\n                if (!o.hasOwnProperty(key) || n[key] !== o[key]) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        if (!this.srcData) {\r\n            this.srcData = TiTableComponent.DEFAULT_SRC_DATA;\r\n        }\r\n        if (!this.srcData.data) {\r\n            this.srcData.data = [];\r\n        }\r\n        this.srcDataDiffer = this.iterableDiffers.find(this.srcData.data)\r\n            .create();\r\n\r\n        if (this.searchWords !== null) {\r\n            this.oldSearchWords = TiTableComponent.safeCopy(this.searchWords);\r\n            this.dataState.search.searchWords = this.searchWords;\r\n        }\r\n\r\n        if (this.searchKeys !== null) {\r\n            this.oldSearchKeys = TiTableComponent.safeCopy(this.searchKeys);\r\n            this.dataState.search.searchKeys = this.searchKeys;\r\n        }\r\n        // 表格记忆\r\n        if (this.storageId) {\r\n            this.initStorageDataState();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.initFixedHead();\r\n        if (this.fixedColumnInfo.hasFixedColumn) {\r\n            this.addFixedColumnBehavior();\r\n        }\r\n        this.viewInitSubject.next();\r\n        if (this.storageId) {\r\n            // 在ngOnDestroy 无法保存，所有使用beforeunload\r\n            // 为什么不用unload? beforeunload 兼容比unload效果好\r\n            // 参考：https://sinaad.github.io/xfe/2016/06/29/beforeunlod-vs-unload/\r\n            // 修复SSR报错：ERROR ReferenceError: window is not defined\r\n            if(typeof window ==='undefined'){\r\n                return;\r\n            }\r\n            this.unlistenWindowBeforeunload = this.renderer.listen(window, 'beforeunload', () => {\r\n                this.updateStorageDataState();\r\n            });\r\n        }\r\n    }\r\n\r\n    // 为了确保表格内嵌组件(比如tiHeadSort,tiPagination等)的数据变化在表格组件中能监听到，排序、搜索、分页\r\n    // 的相关数据监听需要放在表格组件的AfterViewChecked周期中。因为表格组件的AfterViewChecked生命周期晚于\r\n    // 内嵌组件(比如tiHeadSort,tiPagination等)的各个checked生命周期。\r\n    // tslint:disable-next-line:cyclomatic-complexity\r\n    // eslint-disable-next-line complexity\r\n    ngAfterViewChecked(): void {\r\n        // 监听srcData.data的变化\r\n        const dataArr: Array<TiTableRowData>  = this.srcData && this.srcData.data ? this.srcData.data : [];\r\n        const srcDataDiffer: IterableChanges<TiTableRowData> = this.srcDataDiffer.diff(dataArr);\r\n        if (srcDataDiffer) {\r\n            this.updateSafeCopy();\r\n            this.data2displayed();\r\n        }\r\n\r\n        // 监听search相关接口值变化\r\n        if (this.searchWords !== null &&\r\n            !TiTableComponent.isValueEqual(this.searchWords, this.oldSearchWords)) {\r\n            this.oldSearchWords = TiTableComponent.safeCopy(this.searchWords);\r\n            this.isDataStateChange = true;\r\n            this.triggerEvent = 'search';\r\n            this.dataState.search.searchWords = this.searchWords;\r\n            // 搜索时，如果使用分页时，把用于表格内部计算分页的当前页码置为1\r\n            if (this.dataState.pagination.itemsPerPage !== -1 && this.dataState.pagination.currentPage !== 1) {\r\n                this.dataState.pagination.currentPage = 1;\r\n                // 使用Promise是为了解决使用stateUpdate接口做后台分页+后台搜索时，\r\n                // 分页组件ExpressionChangedAfterItHasBeenCheckedError报错问题。\r\n                // 此处不能使用setTimeout来解决，使用setTimeout会导致stateUpdate多次执行。\r\n                this.promise.then(() => {\r\n                        this.paginationSubject.next({ currentPage: 1 });\r\n                });\r\n            }\r\n        }\r\n\r\n        if (this.searchKeys !== null && this.searchWords.length > 0 &&\r\n            !TiTableComponent.isValueEqual(this.searchKeys, this.oldSearchKeys)) {\r\n            this.oldSearchKeys = TiTableComponent.safeCopy(this.searchKeys);\r\n            this.isDataStateChange = true;\r\n            this.triggerEvent = 'search';\r\n            this.dataState.search.searchKeys = this.searchKeys;\r\n            // 搜索时，如果使用分页时，把用于表格内部计算分页的当前页码置为1\r\n            if (this.dataState.pagination.itemsPerPage !== -1 && this.dataState.pagination.currentPage !== 1) {\r\n                this.dataState.pagination.currentPage = 1;\r\n                this.promise.then(() => {\r\n                        this.paginationSubject.next({ currentPage: 1 });\r\n                });\r\n            }\r\n        }\r\n\r\n        if (!TiTableComponent.isValueEqual(this.dataState.sort, this.oldSort)) {\r\n            this.oldSort = {...this.dataState.sort};\r\n            this.isDataStateChange = true;\r\n            this.triggerEvent = 'sort';\r\n        }\r\n\r\n        if (this.dataState.pagination.currentPage !== -1 &&\r\n            this.dataState.pagination.itemsPerPage !== -1 &&\r\n            !TiTableComponent.isValueEqual(this.dataState.pagination, this.oldPagination)) {\r\n            this.oldPagination = {...this.dataState.pagination};\r\n            this.isDataStateChange = true;\r\n            this.triggerEvent = 'pagination';\r\n        }\r\n\r\n        if (this.isDataStateChange) {\r\n            this.updateTable();\r\n            this.isDataStateChange = false;\r\n        }\r\n\r\n        if (this.isFixedHead && this.getTbodyHeight() !== this.oldTbodyHeight) {\r\n            // 有些场景下(例如，两页显示数据条数相同，从其中一页跳到另一页时)获取高度不准确，\r\n            // 所以此处添加setTimeout\r\n            setTimeout(() => {\r\n                if (this.hostEle.hasAttribute('tiColsResizable') && this.processYScrollStateChangeWithColsResizable) {\r\n                    this.processYScrollStateChangeWithColsResizable();\r\n                } else {\r\n                    this.fixedHeadService.processOverflowY(this.theadContainer, this.tbodyContainer, this);\r\n                }\r\n                this.fixedHeadService.removeTbodyContainerBorderBottom(this.tbodyContainer, this.displayedData);\r\n            }, 0);\r\n            this.oldTbodyHeight = this.getTbodyHeight();\r\n        }\r\n\r\n        // 表格容器宽度改变时，列宽和横向滚动条状态都可能发生改变，这时需要处理表格列固定\r\n        if (this.fixedColumnInfo.hasFixedColumn) {\r\n            const containerWidth: number = this.fixedColumnInfo.container.clientWidth;\r\n            if (containerWidth !== this.fixedColumnInfo.containerWidth) {\r\n                this.fixedColumnInfo.containerWidth = containerWidth;\r\n                this.processFixedColumn();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.isFixedHead && this.unlistenFixedHeadWindowResize) {\r\n            this.unlistenFixedHeadWindowResize();\r\n        }\r\n\r\n        if (this.unlistenFixedColumnWindowResize) {\r\n            this.unlistenFixedColumnWindowResize();\r\n        }\r\n\r\n        if(this.storageId) {\r\n            // 路由跳转时，页面没有刷新，beforeunload监听不生效，所以要更新一次记忆数据。\r\n            this.updateStorageDataState();\r\n            // 修复SSR错误：TypeError: this.unlistenWindowBeforeunload is not a function\r\n            (typeof this.unlistenWindowBeforeunload === 'function') && this.unlistenWindowBeforeunload();\r\n        }\r\n    }\r\n    // 初始化表格记忆\r\n    private initStorageDataState(): void {\r\n\r\n        // 修复SSR报错：ERROR ReferenceError: window is not defined\r\n        if (typeof window === 'undefined') {\r\n            return;\r\n        }\r\n        // 缓存在sessionStorage中的数据\r\n        let sessionStorageState = window.sessionStorage.getItem(this.storageId);\r\n        // 缓存在localStorage 中的数据\r\n        let localStorageState = window.localStorage.getItem(this.storageId);\r\n\r\n        // 版本发布后，用户第一次访问时，sessionStorageState、localStorageState是null\r\n        this.sessionStorageState = sessionStorageState ? JSON.parse(sessionStorageState) : {};\r\n        this.localStorageState = localStorageState ? JSON.parse(localStorageState) : {};\r\n\r\n    }\r\n    // 更新本地存储中的\r\n    private updateStorageDataState() {\r\n\r\n        const localStorageState = { ...this.localStorageState };\r\n        const sessionStorageState = { ...this.sessionStorageState };\r\n\r\n        // 排序\r\n        if (this.storageConfig.sort && this.dataState.sort.sortKey) {\r\n            sessionStorageState['sort'] = this.dataState.sort;\r\n        }\r\n\r\n        // 表格分页\r\n        // tslint:disable-next-line: max-line-length\r\n        if ((this.storageConfig.pagination === true || (this.storageConfig.pagination && this.storageConfig.pagination['itemsPerPage'] === true)) &&\r\n            this.dataState.pagination.itemsPerPage !== -1) {\r\n            // 每页条数\r\n            localStorageState['itemsPerPage'] = this.dataState.pagination.itemsPerPage;\r\n        }\r\n        // 表格分页\r\n        // tslint:disable-next-line: max-line-length\r\n        if ((this.storageConfig.pagination === true || (this.storageConfig.pagination && this.storageConfig.pagination['currentPage'] === true)) &&\r\n            this.dataState.pagination.currentPage !== -1) {\r\n            // 当前页\r\n            sessionStorageState['currentPage'] = this.dataState.pagination.currentPage;\r\n        }\r\n\r\n        if(this.dataState.search.searchKeys){\r\n            localStorageState['searchKeys'] = this.dataState.search.searchKeys\r\n        }\r\n        if(this.dataState.search.searchWords) {\r\n            localStorageState['searchWords'] = this.dataState.search.searchWords;\r\n        }\r\n\r\n        if (Object.keys(sessionStorageState).length > 0) {\r\n            // 修复：SSR报错：ReferenceError: window is not defined\r\n            (typeof window !== 'undefined') && window.sessionStorage.setItem(\r\n                this.storageId,\r\n                JSON.stringify(sessionStorageState)\r\n            );\r\n        }\r\n        if (Object.keys(localStorageState).length > 0) {\r\n            (typeof window !== 'undefined') && window.localStorage.setItem(\r\n                this.storageId,\r\n                JSON.stringify(localStorageState)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public updatePagination(currentPage: number, itemsPerPage: number): void {\r\n        if (this.oldPagination.currentPage === -1 &&\r\n            this.oldPagination.itemsPerPage === -1) {\r\n            this.oldPagination = {\r\n                currentPage,\r\n                itemsPerPage\r\n            };\r\n        }\r\n        this.dataState.pagination.currentPage = currentPage;\r\n        this.dataState.pagination.itemsPerPage = itemsPerPage;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 排序状态更新及处理\r\n     *\r\n     * @param sortKey - 进行排序的数据属性（如对数据的name属性值进行排序，则传入\"name\"）\r\n     * @param reverse - 是否为降序，true表示降序，false表示升序，null表示无序\r\n     * @param isDefaultSort - 是否为默认排序\r\n     */\r\n    public updateSort(sortKey: string, reverse: boolean, isDefaultSort: boolean,\r\n                      compareFn: (a: TiTableRowData, b: TiTableRowData, sortKey?: string) => number): void {\r\n        if (isDefaultSort) {\r\n            this.oldSort = {\r\n                sortKey,\r\n                asc: !reverse\r\n            };\r\n        }\r\n        this.dataState.sort.sortKey = sortKey;\r\n        this.dataState.sort.asc = Util.isNull(reverse) ? reverse : !reverse;\r\n        this.customCompareFn = compareFn;\r\n    }\r\n    /**\r\n     * 获取表格当前的数据状态(sort、search、pagination)\r\n     * @return TiTableDataState\r\n     */\r\n    public getDataState(): TiTableDataState {\r\n        return this.dataState;\r\n    }\r\n\r\n    /**\r\n     * 获取当前触发 stateUpdate 的事件(即引起表格数据状态改变的起因事件)\r\n     * @return 有\"search\", \"sort\", \"pagination\"这三个值\r\n     */\r\n    public getTriggerEvent(): string {\r\n       return this.triggerEvent;\r\n    }\r\n\r\n    /**\r\n     * 如果使用到了表格组件搜索功能，可通过此方法获取到搜索的数据结果。\r\n     * @return 搜索到的数据集合\r\n     *\r\n     * 3.0.9新增\r\n     */\r\n    public getSearchedResult(): Array<TiTableRowData> {\r\n        return this.searchedResult;\r\n     }\r\n\r\n    private updateTable(): void {\r\n        if (this.isFrontPagination() || this.isFrontSort() || this.isFrontSearch()) {\r\n            this.data2displayed();\r\n        }\r\n        // 延时的目的是防止stateUpdate 回调中同步修改数据时报错。\r\n        this.promise.then(() => {\r\n            this.stateUpdate.emit(this);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 根据数据状态(search,sort,pagination)处理数据\r\n     */\r\n    private dataProcessor(data: Array<any>): Array<any> {\r\n        let output = data;\r\n        // 如果存在过滤条件且开发者传递的源数据尚未进行过滤处理，则进行前台过滤处理\r\n        if (this.isFrontSearch()) {\r\n            output = TiTableComponent.getSearchedData(output, this.searchWords, this.searchKeys);\r\n            this.searchedResult = [].concat(output);\r\n            const totalNumber: number = output.length;\r\n            // 如果存在分页且开发者传递的源数据尚未进行分页处理，即进行前台分页,\r\n            if (this.isFrontPagination()) {\r\n                this.promise.then(() => {\r\n                    this.paginationSubject.next({ totalNumber });\r\n                });\r\n            }\r\n        }\r\n        // 如果存在排序且开发者传递的源数据尚未进行排序处理，则进行前台排序处理（字典排序）\r\n        if (this.isFrontSort()) {\r\n            output = this.getSortedData(output, this.dataState.sort.sortKey, this.dataState.sort.asc);\r\n        }\r\n\r\n        // 存在分页且开发者传递的源数据尚未进行分页处理，则进行前台分页\r\n        if (this.isFrontPagination()) {\r\n            const pagination: { currentPage: number, itemsPerPage: number } = this.dataState.pagination;\r\n            const start: number = (pagination.currentPage - 1) * pagination.itemsPerPage;\r\n            output = output.slice(start, start + parseInt(pagination.itemsPerPage.toString(), 10));\r\n        }\r\n\r\n        return output;\r\n    }\r\n    /**\r\n     * data => displayedData，处理分3步：\r\n     * 1. 复制data数据\r\n     * 2. 根据 分页、过滤、排序 处理数据\r\n     * 3. 通过displayedDataChange 事件更新到displayedData\r\n     */\r\n    private data2displayed() {\r\n        // 复制源数据\r\n        let output: Array<any> = TiTableComponent.safeCopy(this.data);\r\n\r\n        // 处理数据\r\n        output = this.dataProcessor(output);\r\n\r\n        // 更新到displayedData\r\n        this.promise.then(() => {\r\n            // 同步修改内部数据\r\n            this.displayedData = output;\r\n            this.displayedDataChange.emit(output);\r\n        });\r\n    }\r\n    private isFrontSearch(): boolean {\r\n        const srcState: TiTableSrcState = this.getSrcState();\r\n        return (this.searchWords && this.searchWords.length > 0) && (!srcState || !srcState.searched);\r\n    }\r\n    private isFrontSort(): boolean {\r\n        const srcState: TiTableSrcState = this.getSrcState();\r\n        return this.enableSort && (!srcState || !srcState.sorted);\r\n    }\r\n    private isFrontPagination(): boolean {\r\n        const srcState: TiTableSrcState = this.getSrcState();\r\n        const pagination: { currentPage: number, itemsPerPage: number } = this.dataState.pagination;\r\n        return (pagination.currentPage !== -1 && pagination.itemsPerPage !== -1 && (!srcState || !srcState.paginated));\r\n    }\r\n\r\n    private getSortedData(data: Array<TiTableRowData>, predicate: string, asc: boolean): Array<TiTableRowData> {\r\n        let resultArr: Array<TiTableRowData> = [];\r\n        if (!Util.isArray(data)) {\r\n            return resultArr;\r\n        }\r\n\r\n        // 无序状态\r\n        if (!predicate || asc === null) {\r\n            return data;\r\n        }\r\n\r\n        const compareArr: Array<{value: TiTableRowData, index: number, predicateValueObj: {value: any, type: string}}> =\r\n            data.map((value: TiTableRowData, index: number) => {\r\n            const predicateValue: any = TiTableComponent.getPredicateValue(value, predicate);\r\n\r\n            return {\r\n                value,\r\n                index,\r\n                predicateValueObj: TiTableComponent.getPredicateValueObj(predicateValue, index)\r\n            };\r\n        });\r\n        compareArr.sort(this.compareTo);\r\n        resultArr = compareArr.map((item: {value: TiTableRowData, index: number, predicateValueObj: {value: any, type: string}}) => {\r\n            return item.value;\r\n        });\r\n        if (!asc) {\r\n            resultArr.reverse();\r\n        }\r\n\r\n        return resultArr;\r\n    }\r\n\r\n    private compareTo = (v1: {value: TiTableRowData, index: number, predicateValueObj: {value: any, type: string}},\r\n                         v2: {value: TiTableRowData, index: number, predicateValueObj: {value: any, type: string}}): number => {\r\n        let result: number = 0;\r\n        if (Util.isFunction(this.customCompareFn)) {\r\n            result = this.customCompareFn(v1.value, v2.value, this.dataState.sort.sortKey);\r\n        } else {\r\n            result = TiTableComponent.doCompare(v1.predicateValueObj, v2.predicateValueObj);\r\n            if (result === 0) {\r\n                result = v1.index - v2.index;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private updateSafeCopy(): void {\r\n        this.data = TiTableComponent.safeCopy(this.srcData &&  this.srcData.data ?\r\n            this.srcData.data : []);\r\n    }\r\n\r\n    private getSrcState(): TiTableSrcState {\r\n        return this.srcData && this.srcData.state ? this.srcData.state : undefined;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public closeOtherDetailsFn(currentRow: TiTableRowData): void {\r\n        this.displayedData.forEach((row: TiTableRowData) => {\r\n            if (row !== currentRow && row['showDetails']) {\r\n                this.promise.then(() => {\r\n                    row['showDetails'] = false;\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private initFixedHead(): void {\r\n        this.theadContainer = this.fixedHeadService.getTheadContainer(this.hostEle);\r\n        if (!this.theadContainer) {\r\n            return;\r\n        }\r\n        this.tbodyContainer = this.fixedHeadService.getTbodyContainer(this.theadContainer);\r\n        this.isFixedHead = !Util.isUndefined(this.theadContainer) && !Util.isUndefined(this.tbodyContainer);\r\n\r\n        if (this.isFixedHead) {\r\n            this.renderer.listen(this.tbodyContainer, 'scroll', () => {\r\n                const scrollLeft: number = this.tbodyContainer.scrollLeft;\r\n                this.renderer.setStyle(this.theadContainer.children[0], 'marginLeft', -scrollLeft + 'px');\r\n                Util.trigger(document, 'tiScroll');\r\n            });\r\n\r\n            this.unlistenFixedHeadWindowResize = this.renderer.listen('window', 'resize', () => {\r\n                this.fixedHeadService.processOverflowY(this.theadContainer, this.tbodyContainer, this);\r\n            });\r\n        }\r\n    }\r\n\r\n    private getTbodyHeight(): number {\r\n        // 修复SSR报错：ERROR TypeError: this.tbodyContainer.children[0].getBoundingClientRect is not a function\r\n        if(typeof this.tbodyContainer.children[0].getBoundingClientRect !== 'function'){\r\n            return 0;\r\n        }\r\n        return this.fixedHeadService.numRound(this.tbodyContainer.children[0].getBoundingClientRect().height, 0);\r\n    }\r\n\r\n    private addFixedColumnBehavior(): void {\r\n        const container: any = this.tiRenderer.findChildrenByClassName(this.hostEle, 'ti3-table-container')[0];\r\n        if (!container) {\r\n            return;\r\n        }\r\n        this.zone.runOutsideAngular(() => {\r\n            this.renderer.listen(container, 'scroll', () => {\r\n                const scrollLeft: number = container.scrollLeft;\r\n                const isRightColumnFloat: boolean = scrollLeft + container.clientWidth < container.scrollWidth;\r\n                this.containerScrollXChangeSubject.next({\r\n                    scrollLeft,\r\n                    isRightColumnFloat\r\n                });\r\n            });\r\n\r\n            this.unlistenFixedColumnWindowResize = this.renderer.listen('window', 'resize', () => {\r\n                const containerWidth: number = this.fixedColumnInfo.container.clientWidth;\r\n                if (containerWidth !== this.fixedColumnInfo.containerWidth) {\r\n                    this.fixedColumnInfo.containerWidth = containerWidth;\r\n                    this.processFixedColumn();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public processFixedColumn(): void {\r\n        const scrollLeft: number = this.fixedColumnInfo.container.scrollLeft;\r\n        const isRightColumnFloat: boolean = scrollLeft + this.fixedColumnInfo.container.clientWidth < this.fixedColumnInfo.container.scrollWidth;\r\n        this.containerScrollXChangeSubject.next({\r\n            scrollLeft,\r\n            isRightColumnFloat\r\n        });\r\n        this.updateFixedThLeftSubject.next();\r\n        this.updateFixedTdLeftSubject.next();\r\n    }\r\n}\r\n","import {\r\n    Component, ElementRef, Renderer2, SimpleChanges\r\n} from '@angular/core';\r\nimport { TiDropsearchComponent } from '../dropsearch/TiDropsearchModule';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiBrowser } from '../../utils/Util';\r\n\r\n/**\r\n * @ignore\r\n * TiHeadFilterDrop 表头过滤漏斗组件的下拉框选择组件\r\n */\r\n@Component({\r\n    selector: 'ti-head-filter-drop',\r\n    templateUrl: './head-filter-drop.html',\r\n    styleUrls:['./head-filter-drop.less'],\r\n    providers: [TiFormComponent.getValueAccessor(TiHeadFilterDropComponent)]\r\n})\r\nexport class TiHeadFilterDropComponent extends TiDropsearchComponent {\r\n    public static readonly DOMINATOR_SPACE: number = 6;\r\n    public dominatorSpace: string = TiHeadFilterDropComponent.DOMINATOR_SPACE + 'px';\r\n    // 选中项\r\n    public selected: Array<any>;\r\n    protected heightExcludeContent: number = 10; // 上下边框为2，上下padding为8\r\n    protected buttonHeight: number = 45; // 确定、取消按钮高度\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        super.ngOnChanges(changes);\r\n\r\n        // 重新设置headfilterdrop的heightExcludeList\r\n        if (changes['searchable']) {\r\n            if (changes['searchable'].currentValue) {\r\n                this.heightExcludeList = this.multiple ? this.heightExcludeContent + this.buttonHeight + TiDropsearchComponent.SEARCHBOX_EXCLUDE_HEIGHT\r\n                    : this.heightExcludeContent + TiDropsearchComponent.SEARCHBOX_EXCLUDE_HEIGHT;\r\n            } else {\r\n                this.heightExcludeList = this.multiple ? this.heightExcludeContent + this.buttonHeight : this.heightExcludeContent;\r\n            }\r\n        }\r\n    }\r\n\r\n    writeValue(model: any): void {\r\n        super.writeValue(model);\r\n        // 初始化selected选中项\r\n        if (this.multiple) {\r\n            this.selected = [...model ? model : []];\r\n        } else {\r\n            this.selected = model ? model : '';\r\n        }\r\n    }\r\n\r\n    onSelect(option: any): void {\r\n        // 多选时不处理onSelect事件（在点击确定按钮时触发）\r\n        if (this.multiple) {\r\n            return;\r\n        }\r\n        super.onSelect(option);\r\n        this.model = option;\r\n    }\r\n\r\n    public hide(): void {\r\n        // 处理问题：IE 下有搜索框时，在下拉中选择完收起后漏斗图标由于聚焦而有了虚线框\r\n        if (TiBrowser.isIE() && this.searchable) {\r\n            this.render.setStyle(this.dominatorElem, 'outlineStyle', 'none');\r\n            super.hide();\r\n        } else {\r\n            super.hide();\r\n        }\r\n\r\n        // 还原selected选中项\r\n        if (this.multiple) {\r\n            this.selected = [...this.model ? this.model : []];\r\n        }\r\n    }\r\n\r\n    hideWithoutFocus(): void {\r\n        super.hideWithoutFocus();\r\n        // 还原selected选中项\r\n        if (this.multiple) {\r\n            this.selected = [...this.model ? this.model : []];\r\n        }\r\n    }\r\n\r\n    // 按钮面板鼠标按下事件（解决因点击按钮面板导致整个下拉面板隐藏的问题）\r\n    btnContainerMousedown(event: any): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    // 确定按钮\r\n    okClick(): void {\r\n        // 选中值发生改变时对model值做处理\r\n        if (JSON.stringify(this.selected) !== JSON.stringify(this.model ? this.model : [])) {\r\n            this.model = [...this.selected];\r\n        }\r\n        // 触发onSelect事件\r\n        this.select.emit(this.model);\r\n        this.hide();\r\n    }\r\n\r\n    // 取消按钮\r\n    cancelClick(): void {\r\n        // 还原selected选中项\r\n        this.selected = [...this.model ? this.model : []];\r\n        this.hide();\r\n    }\r\n}\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    Input,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport { TiSelectComponent } from '../select/TiSelectModule';\r\nimport { TiHeadFilterDropComponent } from './TiHeadFilterDropComponent';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiBrowser } from '../../utils/Util';\r\n\r\n// 下面注释，可以避免编译lib时正则报错。原理未知，副作用未知。\r\n// @dynamic\r\n/**\r\n * TiHeadFilter 表头过滤(漏斗)组件， 嵌在表头的 th 中使用。\r\n *\r\n * ti-head-filter 用来显示过滤操作漏斗图标，点击其可打开下拉框，选中下拉框中的选项时，\r\n * 可在提供的 select 事件中做对应的表格数据过滤处理。\r\n *\r\n * ### 接口说明\r\n * **Inputs：**\r\n *\r\n * |     名称    |  类型   | 默认值   | 功能描述  |\r\n * | --------   | :-----   | :---- | :---- |\r\n * | options   | array  | [] | 所有过滤项 |\r\n * | ngModel   | object  | false | 可设置和获取 headfilter下拉选中值 |\r\n * | labelKey   |  string  | 'label' | 下拉面板中要显示的字段, 10.0.2版本新增 |\r\n * | panelMaxHeight   |  string  | 最大显示8条数据 | 下下拉面板的最大显示高度，溢出时则出滚动条。 |\r\n * | id   | string  | undefined | HTML属性id，自动化测试要求必须给id赋值 |\r\n * | select   | function  | 无 | 下拉面板选中事件，向外通知选中数据 |\r\n * | multiple   |  boolean  | false | 下拉面板是否为多选 |\r\n * | selectAll   |  boolean  | false | 下拉面板是否显示全选框 |\r\n * | panelAlign   |  string  | 'left' | 下拉面板展开对齐方式，9.0.4版本新增 |\r\n * | searchable   |  boolean  | false | 是否开启搜索功能，10.0.2版本新增 |\r\n * | panelWidth   |  'auto' 或 string  | 'auto' | 设置下拉面板的宽度，\"auto\"表示下拉框的宽度根据下拉选项的内容自动撑开，也可设置固定的下拉框宽度(不小于过滤图标的宽度)，例如：\"200px\", 10.0.2版本新增 |\r\n * | noDataText   |  string  | '...' | 无数据时的显示文本。10.0.3版本新增 |\r\n *\r\n * <p><span style=\"color: red\">以下说明不可用，不做参考。</span>该组件只有以上5个Input接口和1个Output接口\r\n * 可用，其余方法、Input、输出等(继承于TiSelectComponent,是供select的内部使用的)都不可用</p>\r\n */\r\n@Component({\r\n    selector: 'ti-head-filter',\r\n    templateUrl: './head-filter.html',\r\n    styleUrls:['./head-filter.less'],\r\n    providers: [TiFormComponent.getValueAccessor(TiHeadFilterComponent)],\r\n    host: {\r\n        '[class.ti3-head-filter-container]': 'true',\r\n        '(blur)': 'onBlur()'\r\n    }\r\n})\r\nexport class TiHeadFilterComponent extends TiSelectComponent {\r\n    /**\r\n     * 面板对齐方式\r\n     *\r\n     * 9.0.4新增\r\n     */\r\n    @Input() panelAlign: 'left' | 'right' = 'left';\r\n    // 由于headfilter与select中的panelWidth的默认值和类型不一样，所以这里重定义panelWidth接口\r\n    /**\r\n     * 下拉面板的最大显示宽度，该变量与下拉类组件保持一致\r\n     *\r\n     * 1.\"auto\": 下拉框的宽度根据下拉选项的内容自动撑开；\r\n     *\r\n     * 2.表示宽度的字符串: 设置固定的下拉框宽度(不小于Select组件的宽度)。例如：\"200px\"\r\n     *\r\n     * 10.0.2版本新增，默认为'auto'，10.1.2起<b>搜索场景下</b>默认值修改为“180px”，\r\n     */\r\n    // 置为undefined是为了覆盖父类的panelWidth值\r\n    @Input() panelWidth: 'auto'| string = undefined;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('filterIcon', { static: true }) filterIconEleRef: ElementRef;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild(TiHeadFilterDropComponent, { static: true }) dropsearchCom: TiHeadFilterDropComponent;\r\n\r\n    ngAfterViewChecked(): void {\r\n        // 这里不能调用父类方法，因为Select父类对dominator处理，空指针报错。\r\n        // TODO: 看是否能够不继承select\r\n        if (this.searchable !== this.oldSearchable) {\r\n            this.oldSearchable = this.searchable;\r\n            if (this.searchable) {\r\n                this.setFocusableElems([this.filterIconEleRef.nativeElement]\r\n                    .concat(this.dropsearchCom.getFocusableElems()));\r\n            } else {\r\n                this.setFocusableElems([this.filterIconEleRef.nativeElement]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 失焦情况下，仅关闭面板，不做聚焦等处理\r\n     */\r\n    public onBlur(): void {\r\n        super.onBlur();\r\n        if (TiBrowser.isIE() && this.searchable) {\r\n            if (getComputedStyle(this.filterIconEleRef.nativeElement).outlineStyle === 'none') {\r\n                this.renderer.setStyle(this.filterIconEleRef.nativeElement, 'outlineStyle', '');\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {\r\n  Component,\r\n  DoCheck,\r\n  ElementRef,\r\n  Input,\r\n  OnInit\r\n} from '@angular/core';\r\nimport { TiTableComponent } from './TiTableComponent';\r\n/**\r\n * TiHeadSort 表头排序(上下箭头)组件\r\n *\r\n * 嵌在表头的th中使用，点击该组件时表格数据按该列的排序规则进行升序/降序排序\r\n *\r\n * 组件有默认的排序规则，也可支持自定义排序规则\r\n */\r\n@Component({\r\n  selector: 'ti-head-sort',\r\n  templateUrl: './head-sort.html',\r\n  host: {\r\n      '[class.ti3-sort-container]': 'true',\r\n      '[class.ti3-sort-ascent]': 'sortKey === table.dataState.sort.sortKey && clickNum % 3 === 1',\r\n      '[class.ti3-sort-descent]': 'sortKey === table.dataState.sort.sortKey && clickNum % 3 === 2',\r\n      '(click)': 'onClick()'\r\n  }\r\n})\r\n\r\nexport class TiHeadSortComponent implements OnInit, DoCheck {\r\n    /**\r\n     * 指定当前列进行排序的数据属性\r\n     *\r\n     * 例如：根据表格数据中的\"firstName\"属性值进行排序，则需将该接口的值设置为\"firstName\"\r\n     */\r\n    @Input() sortKey: string;\r\n    /**\r\n     * 指定初始时在对应 sortKey下是否为升序排序。默认值为null, 表示无序(不升序也不降序)\r\n     */\r\n    @Input() asc: boolean = null;\r\n    /**\r\n     * 指定排序对比规则，其参数有三个，依次为：\r\n     *\r\n     * a: 第一个对比值\r\n     *\r\n     * b: 第二个对比值\r\n     *\r\n     * sortKey: 当前数据排序依据的属性\r\n     */\r\n    @Input() compareFn: (a: any, b: any, sortKey?: string) => number; // 自定义的排序规则\r\n    /**\r\n     * @ignore\r\n     */\r\n    public clickNum: number = 0;\r\n    private hostElement: HTMLElement;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public table: TiTableComponent;\r\n    constructor(private elementRef: ElementRef, table: TiTableComponent) {\r\n        this.hostElement = this.elementRef.nativeElement;\r\n        this.table = table;\r\n    }\r\n    ngOnInit(): void {\r\n        // 更新TiTableComponent的enableSort，表示启用了排序。\r\n        this.table.enableSort = true;\r\n        // 修复SSR报错：ERROR TypeError: Cannot read property 'sort' of undefined\r\n        // 表格记忆\r\n        if (this.table.storageId && this.table.storageConfig && this.table.storageConfig.sort && this.table.sessionStorageState && this.table.sessionStorageState.sort) {\r\n            if (this.sortKey === this.table.sessionStorageState.sort.sortKey) {\r\n                this.asc = this.table.sessionStorageState.sort.asc;\r\n            } else {\r\n                this.asc = null;\r\n            }\r\n        }\r\n        if (this.asc !== null) {\r\n            this.clickNum = this.asc ? 0 : 1;\r\n            // 如果有默认排序，即排序的初始化，将排序初始化的各个值赋给 tiTable 的 tableState 对应的 sort 属性\r\n            this.sort(true);\r\n        }\r\n    }\r\n\r\n    ngDoCheck(): void {\r\n        if (this.table.dataState.sort.sortKey !== this.sortKey) {\r\n            this.clickNum = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public onClick(): void {\r\n        if (!this.sortKey) {\r\n            return;\r\n        }\r\n        this.sort(false);\r\n    }\r\n\r\n    private sort(isDefaultSort: boolean): void {\r\n        this.clickNum++;\r\n        // this.clickNum整除3余2表示降序，余1表示升序，余0表示无序\r\n        const isDesc: boolean = this.clickNum % 3 === 2 ? true : this.clickNum % 3 === 1 ? false : null;\r\n        this.table.updateSort(this.sortKey, isDesc, isDefaultSort, this.compareFn);\r\n    }\r\n}\r\n","import {\r\n  Component,\r\n  DoCheck,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport { TiBrowser, Util } from '../../utils/Util';\r\nimport { TiTableComponent, TiTableRowData } from './TiTableComponent';\r\n/**\r\n * TiDetailsIcon 详情展开图标组件\r\n *\r\n * ti-details-icon 用来显示详情展开图标，其嵌在详情展开列的 td 标签中；\r\n * 点击该图标，对应详情行在展开/收起两个状态之间切换。\r\n */\r\n@Component({\r\n  selector: 'ti-details-icon',\r\n  templateUrl: './details-icon.html',\r\n  host: {\r\n      '(click)': 'onClick()'\r\n  }\r\n})\r\n\r\nexport class TiDetailsIconComponent implements OnInit, DoCheck {\r\n    /**\r\n     * @ignore\r\n     * 表格详情中，非详情行标记样式类\r\n     */\r\n    public static TABLE_ClASS_DETAIL_BASE: string = 'ti3-table-detail-icon-tr';\r\n    /**\r\n     * 当前行数据\r\n     */\r\n    @Input() row: TiTableRowData;\r\n    /**\r\n     * 当前行索引值，即 ngFor的对应的index\r\n     */\r\n    @Input() index: number;\r\n    /**\r\n     * 点击详情展开图标时触发此接口函数，其中showDetails属性控制其是否展开；\r\n     *\r\n     * 一旦使用此接口，就由开发者决定其是否要展开或收起。\r\n     */\r\n    @Output() readonly beforeToggle: EventEmitter<TiTableRowData> = new EventEmitter();\r\n    private oldShowDetails: boolean = false;\r\n    private element: any;\r\n    constructor(private table: TiTableComponent, private elementRef: ElementRef,\r\n                private renderer: Renderer2) {\r\n        this.element = this.elementRef.nativeElement;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.row = Util.isUndefined(this.row) ? {} : this.row;\r\n        this.row.showDetails = Util.isUndefined(this.row.showDetails) ? false : this.row.showDetails;\r\n        // 给当前行添加样式类标记\r\n        const parentTr: any = this.renderer.parentNode(this.renderer.parentNode(this.element));\r\n        this.renderer.addClass(parentTr, TiDetailsIconComponent.TABLE_ClASS_DETAIL_BASE);\r\n    }\r\n\r\n    ngDoCheck(): void {\r\n        // 如果需要关闭其它行的详情(即只能展开一行的详情)时，需要监听showDetails\r\n        if (this.table.closeOtherDetails && this.row.showDetails !== this.oldShowDetails) {\r\n            this.oldShowDetails = this.row.showDetails;\r\n            if (this.row.showDetails) {\r\n                // 当打开当前行的详情时，关闭其他行的详情\r\n                this.table.closeOtherDetailsFn(this.row);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public onClick(): void {\r\n        if (this.beforeToggle.observers.length > 0) {\r\n            this.beforeToggle.emit(this.row);\r\n        } else {\r\n            this.row.showDetails = !this.row.showDetails;\r\n        }\r\n\r\n        // 为了解决 codeclub #1720\r\n        // 在chrome浏览器下，滚动条滚到底部后，这时页面内容高度变小，滚动条保留在底部(正常的现象),\r\n        // 之后页面内容高度再变大时，滚动条依然保留在底部。\r\n        // 这导致了当页面滚动条拖动到底部后，将表格的pagesize由大变小(如20条修改为10条)，再去点击某一行详情展开时，\r\n        // 视觉上详情行是向上展开的，其原因是滚动条一直停留在底部；这时，只要稍微手动触发滚动条滚动，详情正常展开\r\n        // 注意：此问题只修复了在body上出滚动条的表格的详情展开问题。\r\n        if (TiBrowser.isChrome()) {\r\n            const scrollTop: number = Math.ceil(document.documentElement.scrollTop);\r\n            // 窗口可视区域高度\r\n            const height: number = document.documentElement.clientHeight;\r\n            const scrollHeight: number = document.body.scrollHeight;\r\n            if (scrollTop > 0 && scrollTop + height >= scrollHeight) {\r\n                document.body.scrollTop = scrollTop - 0.5;\r\n                document.body.scrollTop = scrollTop + 0.5;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {\r\n  Directive,\r\n  DoCheck,\r\n  Input,\r\n  Renderer2,\r\n  TemplateRef,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport { TiTableComponent, TiTableRowData } from './TiTableComponent';\r\nimport { TiDetailsIconComponent } from './TiDetailsIconComponent';\r\n/**\r\n * TiDetailsTr 详情行结构指令\r\n *\r\n * 使用时需要在其前面加 * 语法糖，传入当前行数据；\r\n * 其内部根据row.showDetails的值来控制详情行是否显示，功能类似于ngIf。\r\n */\r\n@Directive ({\r\n    selector: '[tiDetailsTr]'\r\n})\r\nexport class TiDetailsTrDirective implements DoCheck {\r\n    /**\r\n     * 当前行数据\r\n     */\r\n    @Input('tiDetailsTr') row: TiTableRowData;\r\n    private oldShowDetails: boolean;\r\n    constructor(private templateRef: TemplateRef<any>,\r\n                private viewContainerRef: ViewContainerRef,\r\n                private renderer: Renderer2, private table: TiTableComponent) {\r\n    }\r\n\r\n    ngDoCheck(): void {\r\n        if (this.row.showDetails !== this.oldShowDetails) {\r\n            this.updateView();\r\n            this.oldShowDetails = this.row.showDetails;\r\n        }\r\n\r\n    }\r\n    private updateView(): void {\r\n        if (this.row.showDetails) {\r\n            // 上下文参数是否需要传递\r\n            this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            // 结构指令的宿主元素是一个 comment(注释) 的Node节点，\r\n            // 生成节点元素插入DOM中的位置跟angularCompilerOptions.enableIvy 配置有关，true时在宿主元素之前，false时在宿主元素之后，\r\n            // 而 ng9开始angularCompilerOptions.enableIvy 默认为true,但一些项目为兼容性，强制设置为了false，所以要做一下兼容处理\r\n            let detailTr: HTMLElement;\r\n            const nativeElement = this.templateRef.elementRef.nativeElement;\r\n            if (nativeElement.previousSibling && nativeElement.previousSibling.classList &&\r\n                nativeElement.previousSibling.classList.contains(TiDetailsIconComponent.TABLE_ClASS_DETAIL_BASE)) {\r\n                detailTr = nativeElement.nextSibling;\r\n            } else {\r\n                detailTr = nativeElement.previousSibling;\r\n            }\r\n\r\n            this.renderer.addClass(detailTr, 'ti3-details-tr');\r\n        } else {\r\n            this.viewContainerRef.clear();\r\n            //  TODO: 方案是否可优化\r\n            // 表头锁定时，展开时可在table的AfterViewChecked中获取到表格变化后的高度，\r\n            // 但是收起时，在table的AfterViewChecked中获取不到表格变化后的高度，不能及时处理滚动条的变化\r\n            // 所以此处使用setTimeout使其延时触发table的AfterViewChecked，使其能够处理由高度变化引起的滚动条状态的改变\r\n            // 注：使用ngIf指令也是如此效果\r\n            if (this.table.isFixedHead) {\r\n                setTimeout(() => {}, 0);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {\r\n    AfterViewInit,\r\n    Directive,\r\n    ElementRef,\r\n    OnDestroy,\r\n    Renderer2\r\n} from '@angular/core';\r\nimport { TiTableComponent } from './TiTableComponent';\r\n/**\r\n * TiColspan 表格跨列数colspan 计算，\r\n *\r\n * 根据表头第一行tr中th的数目，同步colspan数。\r\n *\r\n * 主要配合表格详情展开功能使用，用于表格详情展示行的的列合并。\r\n *\r\n */\r\n@Directive({\r\n    selector: 'td[tiColspan]'\r\n})\r\nexport class TiColspanDirective implements AfterViewInit, OnDestroy {\r\n    //\r\n    private firstTrObserver: MutationObserver;\r\n    constructor(private table: TiTableComponent, private renderer: Renderer2, private elementRef: ElementRef) {\r\n    }\r\n    ngAfterViewInit(): void {\r\n        // 获取thead中第一行tr\r\n        const tableFirstTr = (this.table.nativeElement as HTMLElement).querySelector('table>thead>tr');\r\n        if (!tableFirstTr) {\r\n            return;\r\n        }\r\n        // 初始化设置一次colspan\r\n        this.renderer.setAttribute(this.elementRef.nativeElement, 'colspan', String(tableFirstTr.children.length));\r\n        // 修复SSR报错：ERROR ReferenceError: MutationObserver is not defined\r\n        if(typeof MutationObserver === 'undefined'){\r\n            return;\r\n        }\r\n        this.firstTrObserver = new MutationObserver((mutationsList) => {\r\n            for (let mutation of mutationsList) {\r\n                if (mutation.type === 'childList') {\r\n                    this.renderer.setAttribute(this.elementRef.nativeElement, 'colspan', String(tableFirstTr.children.length));\r\n                }\r\n            }\r\n        });\r\n        // 只需要处理tr中th的增删，所以只配置 childList为true,\r\n        this.firstTrObserver.observe(tableFirstTr, { childList: true, });\r\n    }\r\n    ngOnDestroy(): void {\r\n        if (this.firstTrObserver) {\r\n            this.firstTrObserver.disconnect();\r\n        }\r\n    }\r\n}\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    IterableChanges,\r\n    IterableDiffer,\r\n    IterableDiffers,\r\n    NgZone,\r\n    Renderer2\r\n} from '@angular/core';\r\nimport { TiDropsearchComponent } from '../dropsearch/TiDropsearchModule';\r\nimport { TiTableColumns, TiTableComponent } from './TiTableComponent';\r\n\r\n/**\r\n * @ignore\r\n * TiColsToggleDrop 控制列动态隐藏/显示的下拉组件\r\n *\r\n */\r\n@Component({\r\n    selector: 'ti-cols-toggle-drop',\r\n    templateUrl: './cols-toggle-drop.html',\r\n    host: {\r\n        '[class.ti3-cols-toggle-drop-container]': 'true'\r\n    }\r\n})\r\nexport class TiColsToggleDropComponent extends TiDropsearchComponent {\r\n    public static readonly DOMINATOR_SPACE: number = 4;\r\n    public static readonly DEFAULT_LIST_MAX_HEIGHT: number = 30 * 8 + 8;\r\n    public static readonly LIST_WITH_SEARCHBOX_MAX_HEIGHT: number = 30 * 7;\r\n    public static readonly SEARCHBOX_AREA_HEIGHT: number = 28 + 6 + 4; // 搜索框所占区域高度\r\n    public static readonly DROP_VERTICAL_PADDING: number = 4 + 4;\r\n    public dominatorSpace: string = TiColsToggleDropComponent.DOMINATOR_SPACE + 'px';\r\n    public columns: Array<TiTableColumns> = [];\r\n    public selectedColumns: Array<TiTableColumns>; // TODO: 可以不定义此变量，用this.model来代替\r\n    public readonly listLabelKey: string = 'title';\r\n    private columnsDiffer: IterableDiffer<TiTableColumns>;\r\n    private optionsChangeInner: boolean = false;\r\n    constructor(private iterableDiffers: IterableDiffers, elementRef: ElementRef,\r\n                renderer2: Renderer2, zone: NgZone, private table: TiTableComponent) {\r\n            super(renderer2, elementRef, zone);\r\n    }\r\n\r\n    private static trackByFn(index: number, item: any): string {\r\n        // 表格记忆show属性也需要跟踪\r\n        return item.title + item.show;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.multiple = true; // 设置为多选。\r\n        this.heightExcludeList = this.searchable ? TiColsToggleDropComponent.DROP_VERTICAL_PADDING +\r\n            TiColsToggleDropComponent.SEARCHBOX_AREA_HEIGHT : TiColsToggleDropComponent.DROP_VERTICAL_PADDING;\r\n        this.defaultListMaxHeight = this.searchable ? TiColsToggleDropComponent.LIST_WITH_SEARCHBOX_MAX_HEIGHT :\r\n            TiColsToggleDropComponent.DEFAULT_LIST_MAX_HEIGHT;\r\n        this.searchKeys = ['title'];\r\n        this.columnsDiffer = this.iterableDiffers.find(this.options)\r\n            .create(TiColsToggleDropComponent.trackByFn);\r\n    }\r\n\r\n    ngDoCheck(): void { // 动态监听columns的变化(主要是引用不变，内容变化colums.push等)，是否需要,noempty 有影响(数据引用变了才会进pipe)\r\n        super.ngDoCheck();\r\n        const columnsDiffer: IterableChanges<TiTableColumns> = this.columnsDiffer.diff(this.options);\r\n        if (columnsDiffer) {\r\n            if (this.optionsChangeInner) {\r\n                this.optionsChangeInner = false;\r\n            } else {\r\n                this.selectedColumns = this.options.filter((column: { show?: boolean }) => {\r\n                    return column.show === true || column.show === undefined;\r\n                });\r\n                this.columns = this.options.concat(); // 强制变化，不然colums.push的列不能出现在列表中，与自定义的noempty有关\r\n            }\r\n\r\n            // columns变化需要处理列固定\r\n            if(this.table.fixedColumnInfo.hasFixedColumn) {\r\n                // 需要延迟处理，columns变化时，组件渲染还未完成。\r\n                // 但如果在ngAfterViewChecked处理，太频繁，影响性能。\r\n                setTimeout((): void => {\r\n                    // 处理左侧列固定\r\n                    this.table.updateFixedThLeftSubject.next();\r\n                    this.table.updateFixedTdLeftSubject.next();\r\n                    // 处理右侧列固定\r\n                    const scrollLeft: number = this.table.fixedColumnInfo.container.scrollLeft;\r\n                    const isRightColumnFloat: boolean =\r\n                        scrollLeft + this.table.fixedColumnInfo.container.clientWidth < this.table.fixedColumnInfo.container.scrollWidth;\r\n                    this.table.containerScrollXChangeSubject.next({\r\n                        scrollLeft,\r\n                        isRightColumnFloat\r\n                    });\r\n                }, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onSelect(option: any): void {\r\n        if (option === this.listCom.optionSelectAll) {\r\n            this.options.forEach((item: any) => {\r\n                if (!this.isDisabledFn(item)) {\r\n                    item.show = this.selectedColumns.includes(item);\r\n                }\r\n            });\r\n        } else {\r\n            option.show = this.selectedColumns.includes(option);\r\n        }\r\n        this.optionsChangeInner = true;\r\n        // 需要在父类select.emit之前，更改option内容\r\n        super.onSelect(option);\r\n        // TODO: 没有处理，用户主动改变绑定变量selectedColumns。应该在docheck里监听selectedColumns（this.model）\r\n    }\r\n\r\n    public isDisabledFn = (item: {disabled?: boolean, show?: boolean}): boolean => {\r\n        return item.disabled === true || (item.show === undefined && item !== this.listCom.optionSelectAll);\r\n    }\r\n\r\n    // 鼠标点击到搜索框外围的空白，会失焦导致面板关闭\r\n    // 此处做特殊处理,当点击空白时通过阻止默认事件的方式处理\r\n    public onMousedownSearchBoxOuter(event: MouseEvent): void {\r\n        if ((event.target as any).tagName === 'INPUT') {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n    }\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { TiTableComponent } from './TiTableComponent';\r\nimport { TiColsToggleDropComponent } from './TiColsToggleDropComponent';\r\nimport { TiSelectComponent } from '../select/TiSelectModule';\r\nimport { TiLocale } from '../../locale/TiLocaleModule';\r\nimport { TiPositionType } from '../../utils/Position';\r\n// 下面注释，可以避免编译lib时正则报错。原理未知，副作用未知。\r\n// @dynamic\r\n/**\r\n * TiColsToggle 控制列动态隐藏/显示的组件\r\n *\r\n * ti-cols-toggle 用来显示列操作按钮，点击该按钮可在打开的下拉中设置各列的隐藏/显示；\r\n * 在 ti-table 标签内，开发者可灵活设置其位置。\r\n *\r\n * TiTable 上的 columns 接口传入值各项(列)的 show 和 title 属性值影响着各列的隐藏/显示状\r\n * 态,具体可参考 TiTableComponen t组件的 columns 输入接口说明。\r\n *\r\n * 开发者必须给需要动态显示/隐藏的列(th，td)使用 ngIf, 利用 ngIf 和 tiTable 上的 columns\r\n * 接口值中每列的show的值来控制当前列的显示或隐藏。\r\n *\r\n * ### 接口说明\r\n * **Inputs：**\r\n *\r\n * |     名称    |  类型   | 默认值   | 功能描述  |\r\n * | --------   | :-----   | :---- | :---- |\r\n * |  disabled   | boolean  | false | 设置列操作按钮是否禁用 |\r\n * | searchable   | boolean  | false | 是否显示搜索框 |\r\n * | selectAll   | boolean  | false | 是否开启全选功能。3.1.2新增 |\r\n * | panelWidth   |  string  | 'justified' | 下拉面板的宽度，可选值为'justified'(默认), 'auto'或自定义宽度，但宽度不能小于select面板的宽度 |\r\n * | noDataText   |  string  | '...' | 无数据时的显示文本。10.0.3版本新增 |\r\n * | select   | EventEmitter<TiTableColumns>  | 无 | 选中/取消选中事件，向外通知当前项数据，需要自行判断当前项是否选中。Tiny3.1.2 版本新增 |\r\n * | focus   | HTML事件  | 无 | 聚焦事件 |\r\n * | blur   | HTML事件  | 无 | 失焦事件 |\r\n *\r\n * <p><span style=\"color: red\">以下说明不可用，不做参考。</span>该组件只有以上disabled、searchable、panelWidth、selectAll 这四个Input接口\r\n * 和foucs、blur、select 这三个事件接口可用，其余方法、Input、输出等(继承于TiSelectComponent,是供select的内部使用的)都不可用</p>\r\n */\r\n@Component({\r\n  selector: 'ti-cols-toggle',\r\n  templateUrl: './cols-toggle.html',\r\n  host: {\r\n      '[class.ti3-cols-toggle-container]': 'true',\r\n      '(blur)': 'onBlur()'\r\n  }\r\n})\r\nexport class TiColsToggleComponent extends TiSelectComponent {\r\n    private static readonly DEFAULT_PANEL_WIDTH: number = 250;\r\n    private static readonly MAX_PANEL_WIDTH: number = 300;\r\n    private static readonly MIN_PANEL_WIDTH: number = 200;\r\n    /**\r\n     * @ignore\r\n     * 10.0.3版本之前服务使用tiTip指令自行实现提示\r\n     *\r\n     * 此处做兼容性处理，添加该接口判断服务是否使用指令实现\r\n     *\r\n     * 10.0.3新增\r\n     */\r\n    @Input() tiTip: string;\r\n    /**\r\n     * 设置tip提示内容，默认文本'自定义列表项'（国际化）\r\n     *\r\n     * 10.0.3新增\r\n     */\r\n    @Input() tipContent: string = TiLocale.getLocaleWords().tiTable.colsToggleTip;\r\n    /**\r\n     * 设置tip提示方向\r\n     *\r\n     * 10.0.3新增\r\n     */\r\n    @Input() tipPosition: TiPositionType = 'top';\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('toggleMenu', { static: true }) toggleMenuEleRef: ElementRef;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild(TiColsToggleDropComponent, { static: true }) dropsearchCom: TiColsToggleDropComponent;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public table: TiTableComponent;\r\n    // 标记是否需要更新聚焦元素\r\n    private shouldUpdateFocusableElems: boolean = false;\r\n    constructor(table: TiTableComponent, elementRef: ElementRef,\r\n                renderer2: Renderer2) {\r\n            super(elementRef, renderer2);\r\n            this.table = table;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // 兼容使用tiTip指令实现的tip提示\r\n        this.tipContent = this.tiTip ? '' : this.tipContent;\r\n        this.tipPosition = this.tiTip ? undefined : this.tipPosition ;\r\n        this.setDropPanelWidth();\r\n        super.ngOnInit();\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        super.ngAfterViewInit();\r\n        this.updateFocusableElems();\r\n        // TODO：严格来说，不应该继承自Select，Select中有对dominator的处理。看有没有更好实现方式。\r\n    }\r\n\r\n    ngAfterViewChecked(): void {\r\n        // 这里不能调用父类方法，因为Select父类对dominator处理，空指针报错。\r\n        // TODO: 看是否能够不继承select\r\n\r\n        if (this.shouldUpdateFocusableElems) {\r\n            this.shouldUpdateFocusableElems = false;\r\n            this.updateFocusableElems();\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes['searchable'] && !changes['searchable'].firstChange) {\r\n            // searchable 参数变更后，dropSearch 组件中会重新获取搜索输入框元素，this.dropsearchCom.getFocusableElems() 方法获取的搜索框元素失效。\r\n            // 由于dropSearch在ngAfterViewChecked中变更聚焦元素，时机比ngOnChanges晚，但比组件的ngAfterViewChecked早，\r\n            // 所以用shouldUpdateFocusableElems变量标记是否需要更新聚焦元素，之后在ngAfterViewChecked中处理\r\n            this.shouldUpdateFocusableElems = true;\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 在失焦时，通知更新了表格的列数据，用于表格记忆上传列显示数据\r\n     */\r\n    public onBlur(): void {\r\n        super.onBlur();\r\n        // 表格记忆通知列切换变化\r\n        if(this.table.storageId){\r\n            this.table.updateColumnsSubject.next();\r\n        }\r\n    }\r\n    // 更新可聚焦元素\r\n    private updateFocusableElems(): void {\r\n        if (this.searchable) {\r\n            // 推荐在onInit()时调用setFocusableElems(), 但是ngFor/ngIf中的元素在ngAfterViewInit()才能获取到\r\n            this.setFocusableElems([this.toggleMenuEleRef.nativeElement].concat(this.dropsearchCom.getFocusableElems()));\r\n        } else {\r\n            this.setFocusableElems([this.toggleMenuEleRef.nativeElement]);\r\n        }\r\n    }\r\n\r\n     private setDropPanelWidth(): void {  // TODO:\r\n        const panelWidthNum: number = parseInt(this.panelWidth, 10);\r\n        //  if (!Util.isNumber()) {\r\n        //      this.panelWidth = TiColsToggleComponent.DEFAULT_PANEL_WIDTH + 'px';\r\n        //      return;\r\n        //  }\r\n\r\n        if (panelWidthNum > TiColsToggleComponent.MAX_PANEL_WIDTH) {\r\n            this.panelWidth = `${TiColsToggleComponent.MAX_PANEL_WIDTH}px`;\r\n\r\n            return;\r\n        }\r\n\r\n        if (panelWidthNum < TiColsToggleComponent.MIN_PANEL_WIDTH) {\r\n            this.panelWidth = `${TiColsToggleComponent.MIN_PANEL_WIDTH}px`;\r\n        }\r\n    }\r\n}\r\n","import {\r\n  Directive,\r\n  DoCheck,\r\n  ElementRef,\r\n  IterableChanges,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  Renderer2,\r\n  Inject\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { TiTableColumns, TiTableComponent } from './TiTableComponent';\r\nimport { TiRenderer } from '../../services/renderer/TiRenderer';\r\nimport { Util } from '../../utils/Util';\r\n\r\nimport { TiTableFixedHeadService } from './TiTableFixedHeadService';\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport interface ResizableOpts {\r\n    table: any;\r\n    ths: Array<any>;\r\n    wrap: any; // 包裹表格的父容器，拖动表格超过父容器时出滚动条\r\n    mouseXPosition: number; // 光标位置，列拖动时使用\r\n    target: any; // 拖动的当前列\r\n    storedSizes: Array<number>; // 用来实时保存各列宽度\r\n    storedSortEleSizes: Array<number>; // 用来保存各列sort元素的宽度,\r\n    storeTableWidthChange: number;\r\n    secondTable?: any;\r\n    secondThs?: Array<any>;\r\n    xScrollState?: boolean;\r\n    yScrollState?: boolean;\r\n    isYOverflowedWithX?: boolean; // 表头锁定时,列拖动过程中横向滚动条的出现导致纵向滚动条出现的标志位\r\n}\r\n/**\r\n * TiColsResizable 表格列拖动指令\r\n *\r\n * 支持拖动表格列来调整各列宽度。\r\n *\r\n * 在ti-table标签上加了tiColsResizable属性，则表格自动具有列拖动功能；\r\n * 同时还需要对table元素包裹父容器div，并对父容器设置 ti3-resize-wrapper样式类。\r\n */\r\n@Directive ({\r\n    selector: 'ti-table[tiColsResizable]'\r\n})\r\nexport class TiColsResizableDirective implements OnInit, DoCheck, OnDestroy {\r\n    /**\r\n     * @ignore\r\n     */\r\n    public static readonly UNSELECTABLE_CLASS: string =  'ti3-unselectable';\r\n    /**\r\n     * @ignore\r\n     * 移到表头能够显示拖动线的感应范围\r\n     */\r\n    public static readonly COL_BORDER_RANGE: number = 10;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public readonly notResizableAttr: string = 'not-resizable';\r\n    /**\r\n     * @ignore\r\n     */\r\n    public resizableOpts: ResizableOpts = {\r\n        table: null,\r\n        ths: null,\r\n        wrap: null,\r\n        mouseXPosition: 0,\r\n        target: null,\r\n        storedSizes: [],\r\n        storedSortEleSizes: [],\r\n        storeTableWidthChange: 0,\r\n        isYOverflowedWithX: false\r\n    }; // 初始化列拖动属性的配置项\r\n    private hostEle: Element;\r\n    private documentMouseMoveListener: () => void;\r\n    private documentMouseUpListener: () => void;\r\n    private windowResizeListener: () => void;\r\n    private isDragStart: boolean = false;\r\n    private columsDiffer: IterableDiffer<Object>;\r\n    private subscription: Subscription;\r\n    private isColumnsInit: boolean = true;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public isfirstYScrollStateChange: boolean = true;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public tableCom: TiTableComponent;\r\n    constructor(tableCom: TiTableComponent, private renderer: Renderer2,\r\n                private elementRef: ElementRef, private zone: NgZone, private tiRenderer: TiRenderer,\r\n                private iterableDiffers: IterableDiffers,\r\n                private fixedHeadService: TiTableFixedHeadService,\r\n                @Inject(DOCUMENT) private document) {\r\n        this.hostEle = this.elementRef.nativeElement;\r\n        this.tableCom = tableCom;\r\n    }\r\n\r\n    private static getThs(table: Element): Array<Element> {\r\n        return Array.from(table.children[0].children[0].children);\r\n    }\r\n\r\n    private static getWidth(element: any): number {\r\n        return parseFloat(element.getBoundingClientRect().width\r\n            .toFixed(1));\r\n    }\r\n\r\n    private static trackByFn(index: number, item: {show?: boolean}): boolean {\r\n        return item.show;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.subscription = this.tableCom.viewInitSubject.subscribe(() => {\r\n            this.processColsResizable();\r\n            this.isColumnsInit = false; // 主要处理 columns 初始为空，异步的场景\r\n            // 表格记忆\r\n            // 版本更新后用户第一次访问，localStorageState['colsWidth']不存在\r\n            // 修复SSR错误：ERROR TypeError: Cannot read property 'colsWidth' of undefined \r\n            if (this.tableCom.storageId && this.tableCom.storageConfig && this.tableCom.storageConfig.colsWidth\r\n                && this.tableCom.localStorageState && this.tableCom.localStorageState['colsWidth']) {\r\n                this.initStorageColsWidth();\r\n            }\r\n        });\r\n\r\n        this.columsDiffer = this.iterableDiffers.find(this.tableCom.columns)\r\n            .create(TiColsResizableDirective.trackByFn);\r\n    }\r\n\r\n    ngDoCheck(): void {\r\n        const columsDiffer: IterableChanges<TiTableColumns> = this.columsDiffer.diff(this.tableCom.columns);\r\n        if (columsDiffer) {\r\n            if (this.isColumnsInit) {\r\n                this.isColumnsInit = false;\r\n\r\n                return;\r\n            }\r\n            this.zone.runOutsideAngular(() => {\r\n                setTimeout(() => {\r\n                    this.setDefaultWidth();\r\n             }, 0);\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscription.unsubscribe();\r\n        if (this.documentMouseMoveListener) {\r\n            this.documentMouseMoveListener();\r\n        }\r\n        if (this.documentMouseUpListener) {\r\n            this.documentMouseUpListener();\r\n        }\r\n        if (this.windowResizeListener) {\r\n            this.windowResizeListener();\r\n        }\r\n    }\r\n\r\n    private processColsResizable(): void {\r\n        this.setTableWidthChange();\r\n        const table: any = this.resizableOpts.table = this.getTable();\r\n        const thead: any = table.children[0];\r\n        if (this.tableCom.isFixedHead) {\r\n            this.resizableOpts.secondTable = this.getSecondTable();\r\n            this.resizableOpts.xScrollState = this.overflowedX();\r\n            this.resizableOpts.yScrollState = this.overflowedY();\r\n            this.resizableOpts.ths = TiColsResizableDirective.getThs(table);\r\n            this.resizableOpts.secondThs = TiColsResizableDirective.getThs(this.resizableOpts.secondTable);\r\n            this.tableCom.processYScrollStateChangeWithColsResizable = (): void => {\r\n                this.fixedHeadService.processYScrollStateChange(this);\r\n            };\r\n        }\r\n        this.zone.runOutsideAngular(() => { // 避免不停触发变化检测\r\n            this.renderer.listen(thead, 'mousemove', (event: MouseEvent) => {\r\n                const currentTh: any = event.target;\r\n\r\n                if (currentTh['nodeName'] !== 'TH') {\r\n                    return;\r\n                }\r\n\r\n                // 获取当前th距页面文档的left值\r\n                const left: number = currentTh['getBoundingClientRect']().left + this.document.documentElement.scrollLeft;\r\n                const thWidth: number = currentTh['getBoundingClientRect']().width;\r\n                // 判断光标是否落在th的右边缘\r\n                const isOnColBorder: boolean = Math.abs(event.pageX - Math.round(left + thWidth)) <=\r\n                    TiColsResizableDirective.COL_BORDER_RANGE;\r\n\r\n                if (isOnColBorder) {\r\n                    if (event.target['hasAttribute'](this.notResizableAttr) ||\r\n                        this.isLastColumn(currentTh)) {\r\n                        return;\r\n                    }\r\n                    this.createDividingLine(currentTh);\r\n                } else {\r\n                    this.removeDividingLine();\r\n                }\r\n            });\r\n            this.renderer.listen(thead, 'mouseleave', () => {\r\n                this.removeDividingLine();\r\n            });\r\n            this.renderer.listen(thead, 'mousedown', (event: MouseEvent) => {\r\n                const currentTh: any = event.target;\r\n                if (this.tiRenderer.hasClass(currentTh, 'col-resize-active')) {\r\n                    this.isDragStart = true;\r\n                    // 鼠标点击的当前列\r\n                    this.resizableOpts.target = currentTh;\r\n                    // 更新光标位置\r\n                    this.resizableOpts.mouseXPosition = event.pageX;\r\n                    // 在拖动前获取当前表格最新的列信息、宽度，很关键，使得设置宽度与样式实际宽度一直\r\n                    this.updateTableInfo();\r\n                    // 给页面设置不可选样式，避免拖动时页面或表格内部出现被选中的蓝色区域\r\n                    this.toggleTextSelection(true);\r\n                }\r\n\r\n                if (this.tableCom.isFixedHead) {\r\n                    this.resizableOpts.xScrollState = this.overflowedX();\r\n                    this.resizableOpts.yScrollState = this.overflowedY();\r\n                }\r\n            });\r\n\r\n            const tableContainer: any = this.tiRenderer.findChildrenByClassName(this.hostEle, 'ti3-resize-wrapper')[0];\r\n            if (!this.tiRenderer.hasClass(tableContainer, 'ti3-table-container')) {\r\n                this.renderer.listen(tableContainer, 'scroll', () => {\r\n                    Util.trigger(this.document, 'tiScroll');\r\n                });\r\n            }\r\n\r\n            this.documentMouseMoveListener = this.renderer.listen(this.document, 'mousemove', (event: MouseEvent) => {\r\n                // 列拖动的动作应该是先mousedown，然后mousemove，因此先判断是否已经触发了mousedown\r\n                if (!this.isDragStart || this.resizableOpts.mouseXPosition === 0 || !this.resizableOpts.target) {\r\n                    return;\r\n                }\r\n\r\n                this.mouseMove(event);\r\n            });\r\n            this.documentMouseUpListener = this.renderer.listen(this.document, 'mouseup', (event: MouseEvent) => {\r\n                if (!this.isDragStart) {\r\n                    return;\r\n                }\r\n\r\n                this.toggleTextSelection(false); // 恢复页面可选样式\r\n                this.stopResize(); // 保存最新宽度到浏览器中\r\n                this.isDragStart = false;\r\n            });\r\n\r\n            // 修复SSR报错：ERROR ReferenceError: window is not defined\r\n            if(typeof window === 'undefined'){\r\n                return;\r\n            }\r\n            this.windowResizeListener = this.renderer.listen(window, 'resize', () => {\r\n                this.setTableWidthChange();\r\n            });\r\n        });\r\n    }\r\n\r\n    private mouseMove(event: MouseEvent): void {\r\n        const options: ResizableOpts = this.resizableOpts;\r\n        const lastColIndex: number = options.ths.length - 1;\r\n        const curColIndex: number = parseInt(options.target.getAttribute('ti-visible-index'), 10);\r\n        const colWidth: number = options.storedSizes[curColIndex];\r\n        const leftEdge: number = parseFloat((event.pageX - options.mouseXPosition).toFixed(1));\r\n        const minWidth: number = this.getColMinWidth(options.target);\r\n\r\n        // 当拖拽方向为列宽度减小的方向且列宽已达到文本区最小宽度时阻止拖动\r\n        if ((leftEdge >= 0) || (colWidth + leftEdge > Math.ceil(minWidth))) {\r\n            // 更新拖动列宽度\r\n            options.storedSizes[curColIndex] += leftEdge;\r\n            this.setWidth(options.target, options.storedSizes[curColIndex]);\r\n\r\n            // 对最后一列的列宽的整体处理方案：\r\n            // 如果更新拖动列宽度后的表格的总宽度小于表格初始宽度，则将宽度差补偿到最后一列;\r\n            // 如果更新拖动列宽度后的表格的总宽度大于表格初始宽度，且之前最后一列列宽有补偿时，\r\n            // 将最后一列的补偿先抵消掉，然后有超出时再出滚动条\r\n\r\n            // s: storeTableWidthChange(此次拖动前各列拖动值的累计和)\r\n            // b: 此次拖动前给末列的补偿值\r\n            // l: leftEdge(此次拖动的距离)\r\n            //   s      l        s + l       b       此次拖动后对末列宽的设置\r\n            //  -5     -1       -6 < 0      +5          +1(-leftEdge)\r\n            //  -5     +3       -2 < 0      +5          -3(-leftEdge)\r\n            //  +5     -8       -3 < 0       0          +3(-(storeColsWidthChange+leftEdge))\r\n            //  -5     +8        3 > 0      +5          -5(+storeColsWidthChange)\r\n            //  +5     +3        8 > 0       0          +0(不做处理)\r\n            //  +5     -3        2 > 0       0          +0(不做处理)\r\n            if (leftEdge + options.storeTableWidthChange < 0) {\r\n                if (options.storeTableWidthChange < 0) {\r\n                    options.storedSizes[lastColIndex] -= leftEdge;\r\n                } else {\r\n                    options.storedSizes[lastColIndex] -= (leftEdge + options.storeTableWidthChange);\r\n                }\r\n            } else {\r\n                if (options.storeTableWidthChange < 0) {\r\n                    options.storedSizes[lastColIndex] += options.storeTableWidthChange;\r\n                }\r\n            }\r\n\r\n            this.setWidth(options.ths[lastColIndex], options.storedSizes[lastColIndex]);\r\n\r\n            // 更新各列拖动相对值的累计和\r\n            options.storeTableWidthChange += leftEdge;\r\n\r\n            // 表头锁定\r\n            if (this.tableCom.isFixedHead) {\r\n\r\n                // 更新第二个表格（bodyTable）中的当前列和最后一列的宽度\r\n                this.setWidth(options.secondThs[curColIndex], options.storedSizes[curColIndex]);\r\n                this.setWidth(options.secondThs[options.secondThs.length - 1], options.storedSizes[lastColIndex]);\r\n\r\n                this.fixedHeadService.handleYNotOverflowedWithX(this.resizableOpts, this.tableCom.tbodyContainer);\r\n\r\n                // 当横向滚动条出现导致纵向滚动条出现时对账本做处理\r\n                this.fixedHeadService.handleYOverflowedWithX(this.resizableOpts, this.tableCom.tbodyContainer);\r\n\r\n                // 纵向滚动条状态变化时对固定的表头右边填充块的处理\r\n                this.fixedHeadService.processOverflowY(this.tableCom.theadContainer, this.tableCom.tbodyContainer, this.tableCom);\r\n            }\r\n\r\n            if (this.tableCom.fixedColumnInfo.hasFixedColumn) {\r\n                this.tableCom.thResizeSubject.next({\r\n                    th: options.target,\r\n                    leftEdge,\r\n                    resizableOpts: this.resizableOpts\r\n                });\r\n                const container: any = this.tableCom.fixedColumnInfo.container;\r\n                if (container) {\r\n                    const scrollLeft: number = container.scrollLeft;\r\n                    const isRightColumnFloat: boolean = scrollLeft + container.clientWidth < container.scrollWidth;\r\n                    this.tableCom.containerScrollXChangeSubject.next({\r\n                        scrollLeft,\r\n                        isRightColumnFloat\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        // 更新光标位置\r\n        options.mouseXPosition = event.pageX;\r\n    }\r\n\r\n    private getColMinWidth(thElement: any): number {\r\n        // 此处的值是'...'所占宽度，文本区的宽度最小为省略号所占宽度；当容器宽度小于此值时，文本会完全显示，但超出部分会直接被截断。\r\n        // Chrome 和 IE下省略号'...'所占宽度大概为10px;\r\n        // Firefox 下不会出现只有'...'的情况，最小为：一个字符 + '...',其所占宽度大概为28px(中文字符下)；\r\n        // 此处为保证三个浏览器都表现正常，取值29(28 + 1, 1为矫正偏差值)。\r\n        let minWidth: number = 29;\r\n\r\n        minWidth += parseFloat(window.getComputedStyle(thElement).paddingLeft) +\r\n            parseFloat(window.getComputedStyle(thElement).paddingRight);\r\n        const sortEle: any = this.tiRenderer.findChildrenByClassName(thElement, 'ti3-sort-container')[0];\r\n        const iconsEle: any = this.tiRenderer.findChildrenByClassName(thElement, 'ti3-cell-icons-container')[0];\r\n        const headFilterEle: any = this.tiRenderer.findChildrenByClassName(thElement, 'ti3-head-filter-container')[0];\r\n\r\n        if (sortEle) {\r\n            const sortWidth: number = parseFloat(sortEle.getBoundingClientRect().width\r\n                .toFixed(1));\r\n            minWidth += sortWidth;\r\n        }\r\n\r\n        if (iconsEle) {\r\n            const filterWidth: number = parseFloat(iconsEle.getBoundingClientRect().width\r\n                .toFixed(1));\r\n            minWidth += filterWidth;\r\n        }\r\n\r\n        if (headFilterEle) {\r\n            const headFilterWidth: number = parseFloat(headFilterEle.getBoundingClientRect().width\r\n                .toFixed(1));\r\n            minWidth += headFilterWidth;\r\n        }\r\n\r\n        return minWidth;\r\n    }\r\n\r\n    private setTableWidthChange(): void {\r\n        const tableContainer: any = this.tiRenderer.findChildrenByClassName(this.hostEle, 'ti3-resize-wrapper')[0];\r\n        // 表格容器自身宽度（不包括Y方向滚动条的宽度）\r\n        const clientWidth: number = tableContainer ? tableContainer['clientWidth'] : 0;\r\n        // 表格容器实际内容区域宽度\r\n        const scrollWidth: number = tableContainer ? tableContainer['scrollWidth'] : 0;\r\n\r\n        // resizableOpts.storeColsWidthChange为各列拖动相对值的累计和\r\n        // 将表格内容溢出部分的宽度赋给各列拖动相对值的累计和\r\n        this.resizableOpts.storeTableWidthChange = scrollWidth - clientWidth;\r\n    }\r\n\r\n    private stopResize(): void {\r\n        this.updateStoredSizes();\r\n        this.resizableOpts.mouseXPosition = 0;\r\n        this.resizableOpts.target = null;\r\n        if (this.tableCom.isFixedHead) {\r\n            this.resizableOpts.xScrollState = this.overflowedX();\r\n            this.resizableOpts.yScrollState = this.overflowedY();\r\n        }\r\n    }\r\n\r\n    private getTable(): any {\r\n        // 用户给table元素加父容器，通过父容器设置overflow属性\r\n        const tableContainerClassName: string = this.tableCom.isFixedHead ? 'ti3-table-fixed-head' : 'ti3-resize-wrapper';\r\n        const tableContainer: any = this.tiRenderer.findChildrenByClassName(this.hostEle, tableContainerClassName)[0];\r\n        const table: any = tableContainer.children[0].nodeName === 'TABLE' ? tableContainer.children[0] : null;\r\n\r\n        return table;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public isLastColumn(th: any): boolean {\r\n        const parentElement: any = th.parentElement;\r\n        if (!parentElement) {\r\n            return true;\r\n        }\r\n        const ths: any = th.parentElement.children;\r\n        const index: number = Array.from(ths)\r\n            .indexOf(th);\r\n\r\n        return index === ths.length - 1;\r\n    }\r\n\r\n    // 当光标移到感应区时，出现拖动分割线\r\n    private createDividingLine(th: any): void {\r\n        this.renderer.addClass(th, 'col-resize-active');\r\n\r\n        const index: number = Array.from(th.parentElement.children)\r\n            .indexOf(th);\r\n        const bodyTable: any = this.tableCom.isFixedHead ? this.resizableOpts.secondTable : this.resizableOpts.table;\r\n        // 防止不存在tbody的场景报错\r\n        if(!bodyTable.children[1]){\r\n            return;\r\n        }\r\n        const trs: Array<any> = Array.from(bodyTable.children[1].children)\r\n            .filter((tr: any) => {\r\n                return this.needDividingLine(tr);\r\n        });\r\n        trs.forEach((tr: any) => {\r\n            // 分组场景index 大于tr.children.length\r\n            if (!tr.children[index]) {\r\n                return;\r\n            }\r\n            this.renderer.addClass(tr.children[index], 'col-resize-active');\r\n        });\r\n    }\r\n\r\n    // 当光标离开感应区时，拖动分割线消失\r\n    private removeDividingLine(): void {\r\n        const bodyTable: any = this.tableCom.isFixedHead ? this.resizableOpts.secondTable : this.resizableOpts.table;\r\n        const ths: Array<any> = Array.from(this.resizableOpts.table.children[0].children[0].children);\r\n\r\n        ths.forEach((th: Element) => {\r\n            this.renderer.removeClass(th, 'col-resize-active');\r\n        });\r\n\r\n        // 防止不存在tbody的场景报错\r\n        if(!bodyTable.children[1]) {\r\n            return;\r\n        }\r\n        const trs: Array<any> = Array.from(bodyTable.children[1].children);\r\n        trs.forEach((tr: Element) => {\r\n            if (!this.needDividingLine(tr)) {\r\n                return;\r\n            }\r\n            Array.from(tr.children)\r\n                .forEach((td: any) => {\r\n                    this.renderer.removeClass(td, 'col-resize-active');\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateTableInfo(): void {\r\n        this.resizableOpts.ths = TiColsResizableDirective.getThs(this.resizableOpts.table);\r\n        this.updateStoredSizes(); // 保存最新宽度\r\n        this.setComputedWidth(); // 设置最新宽度\r\n    }\r\n\r\n    private initStorageColsWidth():void {\r\n\r\n        this.resizableOpts.ths = TiColsResizableDirective.getThs(this.resizableOpts.table);\r\n        this.resizableOpts.storedSizes = this.tableCom.localStorageState['colsWidth'];\r\n        this.setComputedWidth();\r\n        // 各列宽度设置后，可能出现滚动条，所以要计算一次 storeTableWidthChange的值\r\n        this.setTableWidthChange();\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 将当前表格各列的宽度更新到到resizableOpts.storedSizes中\r\n     */\r\n    public updateStoredSizes = (): void => {\r\n        this.resizableOpts.storedSizes = [];\r\n        this.resizableOpts.ths.forEach((th: any, index: number) => {\r\n            this.tiRenderer.setAttributes(th, {'ti-visible-index': index});\r\n            this.resizableOpts.storedSizes[index] = TiColsResizableDirective.getWidth(th);\r\n        });\r\n        // 更新表格记忆\r\n        if(this.tableCom.storageId&&this.tableCom.storageConfig.colsWidth){\r\n            this.tableCom.localStorageState['colsWidth']= this.resizableOpts.storedSizes;\r\n        }\r\n    }\r\n\r\n    private setComputedWidth(): void {\r\n        if (this.resizableOpts.table && this.resizableOpts.ths && this.resizableOpts.ths.length) {\r\n            this.resizableOpts.ths.forEach((th: any, index: number) => {\r\n                this.setWidth(th, this.resizableOpts.storedSizes[index]);\r\n                // 表头锁定\r\n                if (this.tableCom.isFixedHead) {\r\n                    this.resizableOpts.secondThs = TiColsResizableDirective.getThs(this.resizableOpts.secondTable);\r\n                    this.setWidth(this.resizableOpts.secondThs[index], this.resizableOpts.storedSizes[index]);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public setWidth = (element: any, width: number): void => {\r\n        this.renderer.setStyle(element, 'width', width + 'px');\r\n    }\r\n\r\n    // 将表格宽度设置为默认宽度\r\n    private setDefaultWidth(): void {\r\n        const ths: Array<any> = this.resizableOpts.ths = TiColsResizableDirective.getThs(this.resizableOpts.table);\r\n        // 列隐藏或显示后，将各列宽设置为初始用户设置的列宽\r\n        ths.forEach((th: any) => {\r\n            const width: string = th.getAttribute('width') ? th.getAttribute('width') : '';\r\n            // 注意：设置列宽的方式有多种，此处统一默认以width属性设置的宽为准\r\n            this.renderer.setStyle(th, 'width', width);\r\n        });\r\n\r\n        // 表头锁定\r\n        if (this.tableCom.isFixedHead) {\r\n            const secondTable: any = this.getSecondTable();\r\n            const secondThs: Array<any> = TiColsResizableDirective.getThs(secondTable);\r\n            this.resizableOpts.secondThs = secondThs;\r\n            this.resizableOpts.xScrollState = this.overflowedX();\r\n            this.resizableOpts.yScrollState = this.overflowedY();\r\n\r\n            secondThs.forEach((th: any) => {\r\n                const width: string = th.getAttribute('width') ? th.getAttribute('width') : '';\r\n                // 注意：设置列宽的方式有多种，此处统一默认以width属性设置的宽为准\r\n                this.renderer.setStyle(th, 'width', width);\r\n            });\r\n            this.fixedHeadService.processYScrollStateChange(this);\r\n        }\r\n        this.setTableWidthChange();\r\n    }\r\n\r\n    // 当列拖动进行时去掉文字可选样式(user-select: none)\r\n    private toggleTextSelection(toggle: boolean): void {\r\n        const body: any = this.document.body;\r\n        if (toggle) {\r\n            this.renderer.addClass(body, 'ti3-unselectable');\r\n            this.renderer.setAttribute(body, 'unselectable', 'on');\r\n        } else {\r\n            this.renderer.removeClass(body, 'ti3-unselectable');\r\n            body.removeAttribute('unselectable');\r\n        }\r\n    }\r\n\r\n    private needDividingLine(tr: any): boolean {\r\n        if (!tr) {\r\n            return false;\r\n        }\r\n        const classes: Array<string> = ['ti3-details-tr', 'ti3-table-nodata', 'ti3-table-loadfail',\r\n            'ti3-table-nodata-guide', 'ti3-table-nodata-simple'];\r\n        for (const className of classes) {\r\n            if (this.tiRenderer.hasClass(tr, className)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // 供表头锁定使用\r\n    private getSecondTable(): Element {\r\n        const secondTableContainer: any = this.tiRenderer.findChildrenByClassName(this.hostEle, 'ti3-resize-wrapper')[0];\r\n\r\n        return secondTableContainer ? secondTableContainer.children[0] : null;\r\n    }\r\n\r\n    private overflowedX(isNum?: boolean): any {\r\n        return this.fixedHeadService.overflowedResult(this.tableCom.tbodyContainer, 'X', isNum);\r\n    }\r\n\r\n    private overflowedY(isNum?: boolean): any {\r\n        return this.fixedHeadService.overflowedResult(this.tableCom.tbodyContainer, 'Y', isNum);\r\n    }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnInit,\r\n  Renderer2,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { TiRenderer } from '../../services/renderer/TiRenderer';\r\nimport { TiPositionType } from '../../utils/Position';\r\n\r\n/**\r\n * TiCellText 表格单元格中放置文本的容器组件\r\n *\r\n * 提供文本溢出时出省略号...,且hover时出tip的功能。\r\n *\r\n * 配合TiCellText组件使用可使表格单元格中内容显示不下时，文本出省略号...,\r\n * 而文本后的放在TiCellIcons图标始终可以显示出来\r\n *\r\n */\r\n@Component({\r\n  selector: 'ti-cell-text',\r\n  templateUrl: './cell-text.html',\r\n  host: {\r\n      '[class.ti3-cell-text-container]': 'true'\r\n  }\r\n})\r\nexport class TiCellTextComponent implements AfterViewInit {\r\n    /**\r\n     * 设置文本超长显示时Tip内容项\r\n     */\r\n    @Input() tipContent: string;\r\n    /**\r\n     * 设置文本超长显示时Tip位置\r\n     */\r\n    @Input() tipPosition: TiPositionType;\r\n    @ViewChild('text', { static: true }) private cellTextEle: ElementRef;\r\n    constructor(private renderer: Renderer2, private elementRef: ElementRef,\r\n                private tiRenderer: TiRenderer) {}\r\n\r\n    ngAfterViewInit(): void {\r\n        setTimeout(() => {\r\n            this.setMaxWidth();\r\n        }, 0);\r\n    }\r\n\r\n    private setMaxWidth(): void {\r\n        let otherWidth: number = 0;\r\n        const parent: Element = this.renderer.parentNode(this.elementRef.nativeElement);\r\n        const iconsContainer: Element = this.tiRenderer.findChildrenByClassName(parent, 'ti3-cell-icons-container')[0];\r\n        const sortContainer: Element = this.tiRenderer.findChildrenByClassName(parent, 'ti3-sort-container')[0];\r\n        const headFilterContainer: Element = this.tiRenderer.findChildrenByClassName(parent, 'ti3-head-filter-container')[0];\r\n        const renameContainer: Element = this.tiRenderer.findChildrenByTagName(parent, 'TP-RENAME')[0];\r\n\r\n        // 修复SSR报错：ERROR TypeError: sortContainer.getBoundingClientRect is not a function\r\n        if(typeof parent.getBoundingClientRect !== 'function'){\r\n            return;\r\n        }\r\n        // 修复SSR报错：ERROR TypeError: Cannot read property 'getBoundingClientRect' of undefined\r\n        if (iconsContainer) {\r\n            const iconsContainerWidth: number = parseFloat(iconsContainer.getBoundingClientRect().width\r\n                .toFixed(1));\r\n            otherWidth += iconsContainerWidth;\r\n        }\r\n\r\n        if (sortContainer) {\r\n            const sortContainerWidth: number = parseFloat(sortContainer.getBoundingClientRect().width\r\n                .toFixed(1));\r\n            otherWidth += sortContainerWidth;\r\n        }\r\n\r\n        if (headFilterContainer) {\r\n            const headFilterContainerWidth: number = parseFloat(headFilterContainer.getBoundingClientRect().width\r\n                .toFixed(1));\r\n            otherWidth += headFilterContainerWidth;\r\n        }\r\n\r\n        if (renameContainer) {\r\n            const renameContainerWidth: number = parseFloat(renameContainer.getBoundingClientRect().width\r\n                .toFixed(1));\r\n            otherWidth += renameContainerWidth;\r\n        }\r\n\r\n        this.renderer.setStyle(this.cellTextEle.nativeElement, 'max-width', `calc(100% - ${otherWidth}px)`);\r\n    }\r\n}\r\n","import {\r\n  Component\r\n} from '@angular/core';\r\n\r\n/**\r\n * TiCellIcons 表格单元格中放置图标的容器组件\r\n *\r\n * 配合TiCellText组件使用可使表格单元格中内容显示不下时，文本出省略号...,\r\n * 而文本后的放在TiCellIcons图标始终可以显示出来\r\n *\r\n */\r\n@Component({\r\n  selector: 'ti-cell-icons',\r\n  templateUrl: './cell-icons.html',\r\n  host: {\r\n      '[class.ti3-cell-icons-container]': 'true'\r\n  }\r\n})\r\nexport class TiCellIconsComponent {\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Util } from '../../utils/Util';\r\n/**\r\n * @ignore\r\n * TiColumnsPipe 过滤掉columns中的title为空的数据项\r\n *\r\n */\r\n@Pipe({ name: 'tiColumns' })\r\nexport class TiColumnsPipe implements PipeTransform {\r\n    transform(value: Array<any>): Array<any> {\r\n        return value.filter((item: any) => !Util.isEmptyString(item.title));\r\n    }\r\n}\r\n","import {\r\n    AfterViewChecked,\r\n    Directive,\r\n    ElementRef,\r\n    NgZone,\r\n    OnInit,\r\n    OnDestroy,\r\n    Renderer2,\r\n    Input\r\n} from '@angular/core';\r\nimport { TiRenderer } from '../../services/renderer/TiRenderer';\r\nimport { TiTableComponent } from './TiTableComponent';\r\nimport { TiBrowser } from '../../utils/Util';\r\nimport { Subscription } from 'rxjs';\r\n/**\r\n * tiColumnFixed 表格列固定(IE和Edge浏览器不支持)\r\n *\r\n * 适用场景：对于列数很多的表格，可以固定前后列，横向滚动查看其它数据。\r\n *\r\n * 规范：左侧支持最多3列固定(3列不包含单选/复选框所在列)，右侧支持最多1列固定。横向滚动条贯穿左右，与表格最左和最右对齐。\r\n * 表格下展场景不需要支持列固定。\r\n *\r\n * 9.0.4新增\r\n */\r\n@Directive({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: 'th[tiColumnFixed], td[tiColumnFixed]',\r\n    host: {\r\n        '[class.ti3-table-column-fixed-right]': \"!notSupportBrowser && type === 'right'\",\r\n        '[class.ti3-table-column-fixed-left]': \"!notSupportBrowser && type === 'left'\"\r\n    }\r\n})\r\nexport class TiColumnFixedDirective implements OnInit, AfterViewChecked, OnDestroy {\r\n    /**\r\n     * tiColumnFixed 开启列固定功能；接口传入 left 为在左侧固定,左侧可连续多列固定，且必须从第一列开始固定；\r\n     * 接口传入 right 为在右侧固定，右侧只能固定一列，且必须是最后一列; 接口传入其他值不会开启固定功能。\r\n     */\r\n    @Input('tiColumnFixed') type: 'right' | 'left';\r\n    private tagName: 'TH' | 'TD';\r\n    private tdLeft: number;\r\n    private element: any;\r\n    private columnFixedLeftLast: boolean = false;\r\n    private floatingFixedColumn: boolean = false;\r\n    private firstAfterViewChecked: boolean = true;\r\n    private containerScrollXChangeSubscription: Subscription;\r\n    private thResizeSubscription: Subscription;\r\n    private updateFixedThLeftSubscription: Subscription;\r\n    private updateFixedTdLeftSubscription: Subscription;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public notSupportBrowser: boolean;\r\n    constructor(private renderer: Renderer2, elementRef: ElementRef, private tiRenderer: TiRenderer,\r\n                private tableCom: TiTableComponent, private zone: NgZone) {\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // IE 不支持粘性定位position: sticky，使用其他定位方式有闪动，目前无法解决； EDGE 固定列边框不显示， 表头固定时拖动横向滚动条表头横向平移不及时\r\n        this.notSupportBrowser = TiBrowser.isIE() || TiBrowser.isEdge();\r\n        if (this.notSupportBrowser || !this.type) {\r\n            return;\r\n        }\r\n\r\n        if (!this.tableCom.fixedColumnInfo.container) {\r\n            const container: any = this.tiRenderer.findChildrenByClassName(this.tableCom.hostEle, 'ti3-table-container')[0];\r\n            if (!container) {\r\n                return;\r\n            }\r\n            this.tableCom.fixedColumnInfo.container = container;\r\n        }\r\n\r\n        this.tableCom.fixedColumnInfo.hasFixedColumn = true;\r\n\r\n        this.tagName = this.element.tagName;\r\n\r\n        if (this.type === 'right' && this.tagName === 'TH') {\r\n            // 表头固定需要此参数\r\n            this.tableCom.fixedColumnInfo.thFixedRight = this.element;\r\n        }\r\n\r\n        this.addBehavior();\r\n    }\r\n\r\n\r\n    ngAfterViewChecked(): void {\r\n        if (this.notSupportBrowser || !this.type || !this.firstAfterViewChecked) {\r\n            return;\r\n        }\r\n\r\n        this.firstAfterViewChecked = false;\r\n        this.init();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.containerScrollXChangeSubscription) {\r\n            this.containerScrollXChangeSubscription.unsubscribe()\r\n        }\r\n        if (this.thResizeSubscription) {\r\n            this.thResizeSubscription.unsubscribe()\r\n        }\r\n        if (this.updateFixedThLeftSubscription) {\r\n            this.updateFixedThLeftSubscription.unsubscribe()\r\n        }\r\n        if (this.updateFixedTdLeftSubscription) {\r\n            this.updateFixedTdLeftSubscription.unsubscribe()\r\n        }\r\n    }\r\n\r\n    private init() : void {\r\n        if (this.type === 'left') {\r\n            if (this.tagName === 'TH') {\r\n                this.processTh();\r\n            } else {\r\n                this.processTd();\r\n            }\r\n        }\r\n\r\n\r\n        if (this.tagName === 'TH') {\r\n            this.zone.runOutsideAngular(() => {\r\n                // 表头初始时容器的滚动状态还未初始完成\r\n                setTimeout(() => {\r\n                    const scrollLeft: number = this.tableCom.fixedColumnInfo.container.scrollLeft;\r\n                    const isRightColumnFloat: boolean = scrollLeft + this.tableCom.fixedColumnInfo.container.clientWidth < this.tableCom.fixedColumnInfo.container.scrollWidth;\r\n                    this.tableCom.containerScrollXChangeSubject.next({\r\n                        scrollLeft,\r\n                        isRightColumnFloat\r\n                    });\r\n                }, 0);\r\n            });\r\n        } else {\r\n            const scrollLeft: number = this.tableCom.fixedColumnInfo.container.scrollLeft;\r\n            const isRightColumnFloat: boolean = scrollLeft + this.tableCom.fixedColumnInfo.container.clientWidth < this.tableCom.fixedColumnInfo.container.scrollWidth;\r\n            this.tableCom.containerScrollXChangeSubject.next({\r\n                scrollLeft,\r\n                isRightColumnFloat\r\n            });\r\n        }\r\n    }\r\n\r\n    private addBehavior(): void {\r\n        // 处理左右固定的最后一列是否有阴影(看起来有浮动效果)\r\n        this.containerScrollXChangeSubscription = this.tableCom.containerScrollXChangeSubject.subscribe((scrollInfo: any) => {\r\n\r\n            if (this.type === 'right' && scrollInfo.isRightColumnFloat !== this.floatingFixedColumn) {\r\n                this.processLastFixedColumn(this.element, scrollInfo.isRightColumnFloat);\r\n            }\r\n            if (this.type === 'left' && this.columnFixedLeftLast && (scrollInfo.scrollLeft > 0) !== this.floatingFixedColumn) {\r\n                this.processLastFixedColumn(this.element, scrollInfo.scrollLeft > 0);\r\n            }\r\n        });\r\n\r\n        // 处理左侧固定的列的left值(左侧可多列固定)\r\n        if (this.type === 'left' && this.tagName === 'TH') {\r\n            this.thResizeSubscription = this.tableCom.thResizeSubject.subscribe((thResizeInfo: any) => {\r\n                const th: any = thResizeInfo.th;\r\n                if (th !== this.element) {\r\n                    return;\r\n                }\r\n\r\n                const nextSibling: any = th.nextElementSibling;\r\n                if (nextSibling && this.tiRenderer.hasClass(nextSibling, 'ti3-table-column-fixed-left')) {\r\n                    const siblings: any = th.parentElement.children;\r\n                    const index: number = Array.from(siblings)\r\n                        .indexOf(th);\r\n                    const changeColumnsIndex: Array<number> = [];\r\n                    for (let i: number = index + 1; i < siblings.length; i++) {\r\n                        if (!siblings[i] || !this.tiRenderer.hasClass(siblings[i], 'ti3-table-column-fixed-left')) {\r\n                            break;\r\n                        }\r\n                        changeColumnsIndex.push(i);\r\n                        this.tableCom.fixedColumnInfo.fixedColumnLeftValues[i] += thResizeInfo.leftEdge;\r\n                        this.renderer.setStyle(siblings[i], 'left', `${this.tableCom.fixedColumnInfo.fixedColumnLeftValues[i]}px`);\r\n                    }\r\n                    const bodyTable: any = this.tableCom.isFixedHead ? thResizeInfo.resizableOpts.secondTable : thResizeInfo.resizableOpts.table;\r\n                    const trs: Array<any> = Array.from(bodyTable.children[1].children)\r\n                        .filter((tr: any) => {\r\n                            return this.needFixedColumnTr(tr);\r\n                        });\r\n                    trs.forEach((tr: any) => {\r\n                        changeColumnsIndex.forEach((columnIndex: number) => {\r\n                            this.renderer.setStyle(tr.children[columnIndex], 'left', `${this.tableCom.fixedColumnInfo.fixedColumnLeftValues[columnIndex]}px`);\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n\r\n            this.updateFixedThLeftSubscription = this.tableCom.updateFixedThLeftSubject.subscribe(() => {\r\n                this.processTh();\r\n            });\r\n        }\r\n\r\n        if (this.type === 'left' && this.tagName === 'TD') {\r\n            this.updateFixedTdLeftSubscription = this.tableCom.updateFixedTdLeftSubject.subscribe(() => {\r\n                this.processTd();\r\n            });\r\n        }\r\n    }\r\n\r\n    private processTd(): void {\r\n        const siblings: any = this.element.parentElement.children;\r\n        const index: number = Array.from(siblings)\r\n            .indexOf(this.element);\r\n        // 进行判空处理，因为有可能是td元素先出现。\r\n        // TODO: 考虑下processTd和processTd是否可以使用相同的处理方式。\r\n        if (this.tableCom.fixedColumnInfo.fixedColumnLeftValues && this.tableCom.fixedColumnInfo.fixedColumnLeftValues.length &&\r\n            this.tableCom.fixedColumnInfo.fixedColumnLeftValues[index] !== this.tdLeft) {\r\n            this.tdLeft = this.tableCom.fixedColumnInfo.fixedColumnLeftValues[index];\r\n            this.renderer.setStyle(this.element, 'left', `${this.tdLeft}px`);\r\n        }\r\n\r\n        if (index === this.tableCom.fixedColumnInfo.columnFixedLeftLastIndex) {\r\n            this.columnFixedLeftLast = true;\r\n        }\r\n    }\r\n\r\n    private processTh(): void {\r\n        const siblings: any = this.element.parentElement.children;\r\n        let left: number = 0;\r\n        this.tableCom.fixedColumnInfo.fixedColumnLeftValues = [];\r\n\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i: number = 0; i < siblings.length; i++) {\r\n            const current: any = siblings[i];\r\n            if (this.tableCom.fixedColumnInfo.fixedColumnLeftValues[i] !== left) {\r\n                this.tableCom.fixedColumnInfo.fixedColumnLeftValues[i] = left;\r\n                this.renderer.setStyle(current, 'left', `${left}px`);\r\n            }\r\n            // offsetWidth 包括边框\r\n            left += current.offsetWidth;\r\n            const nextSibling: any = siblings[i + 1];\r\n            if (nextSibling && !this.tiRenderer.hasClass(nextSibling, 'ti3-table-column-fixed-left')) {\r\n                this.columnFixedLeftLast = true;\r\n                this.tableCom.fixedColumnInfo.columnFixedLeftLastIndex = i;\r\n                break;\r\n            } else {\r\n                this.columnFixedLeftLast = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private processLastFixedColumn(ele: any, add: boolean): void {\r\n        if (add) {\r\n            this.floatingFixedColumn = true;\r\n            this.renderer.addClass(ele, 'ti3-table-floating-fixed-column');\r\n        } else {\r\n            this.floatingFixedColumn = false;\r\n            this.renderer.removeClass(ele, 'ti3-table-floating-fixed-column');\r\n        }\r\n    }\r\n\r\n    private needFixedColumnTr(tr: any): boolean {\r\n        if (!tr) {\r\n            return false;\r\n        }\r\n        const classes: Array<string> = ['ti3-details-tr', 'ti3-table-nodata', 'ti3-table-loadfail',\r\n            'ti3-table-nodata-guide', 'ti3-table-nodata-simple'];\r\n        for (const className of classes) {\r\n            if (this.tiRenderer.hasClass(tr, className)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import {\r\n    AfterViewInit,\r\n    Directive,\r\n    ElementRef,\r\n    Renderer2\r\n} from '@angular/core';\r\n/**\r\n * 10.1.2版本新增\r\n * 根据规范：“单/复选框”关联表格使用时，为了提升选中效率，点击热区为“单/复选框”按钮所在单元格，点击即可选中。\r\n */\r\n@Directive({\r\n    selector: 'td[checkbox-column], th[checkbox-column], td[radio-column]'\r\n})\r\nexport class TiColClickDirective implements AfterViewInit {\r\n\r\n    constructor(private renderer: Renderer2, private elementRef: ElementRef) {\r\n\r\n    }\r\n    ngAfterViewInit(): void {\r\n        this.renderer.listen(this.elementRef.nativeElement, 'click', (event: MouseEvent): void => {\r\n            const inputEle: any = this.elementRef.nativeElement.querySelector('input');\r\n            const checkboxLabelEle: any = this.elementRef.nativeElement.querySelector('.ti3-checkbox');\r\n            const radioLabelEle: any = this.elementRef.nativeElement.querySelector('.ti3-radio');\r\n            // 点击单/复选空白区域时，触发input点击事件\r\n            // 表格和单/复选联用时，checkboxLabelEle和radioLabelEle不会同时出现，所以需要分别进行判断\r\n            // inputEle和checkboxLabelEle/radioLabelEle是兄弟元素\r\n            // event.target !== inputEle阻止在firefox下因为inputEle.click()产生的冒泡循环\r\n            if (event.target !== inputEle &&\r\n                ((checkboxLabelEle && !(event.target === checkboxLabelEle  || checkboxLabelEle.contains(event.target))) ||\r\n                (radioLabelEle && !(event.target === radioLabelEle || radioLabelEle.contains(event.target))))) {\r\n                inputEle.click();\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TiListModule } from '../list/TiListModule';\r\nimport { TiSearchboxModule } from '../searchbox/TiSearchboxModule';\r\nimport { TiDropModule } from '../drop/TiDropModule';\r\nimport { TiOverflowModule } from '../../directives/overflow/TiOverflowModule';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\nimport { TiTableFixedHeadServiceModule } from './TiTableFixedHeadServiceModule';\r\nimport { TiTableComponent } from './TiTableComponent';\r\nimport { TiHeadFilterComponent } from './TiHeadFilterComponent';\r\nimport { TiHeadFilterDropComponent } from './TiHeadFilterDropComponent';\r\nimport { TiHeadSortComponent } from './TiHeadSortComponent';\r\nimport { TiDetailsIconComponent } from './TiDetailsIconComponent';\r\nimport { TiDetailsTrDirective } from './TiDetailsTrDirective';\r\nimport { TiColspanDirective } from './TiColspanDirective';\r\nimport { TiColsToggleComponent } from './TiColsToggleComponent';\r\nimport { TiColsToggleDropComponent } from './TiColsToggleDropComponent';\r\nimport { TiColsResizableDirective } from './TiColsResizableDirective';\r\nimport { TiCellTextComponent } from './TiCellTextComponent';\r\nimport { TiCellIconsComponent } from './TiCellIconsComponent';\r\nimport { TiColumnsPipe } from './TiColumnsPipe';\r\nimport { TiColumnFixedDirective } from './TiColumnFixedDirective';\r\nimport { TiColClickDirective } from './TiColClickDirective';\r\nimport { TiLocaleModule } from '../../locale/TiLocaleModule';\r\nimport { TiRendererModule } from '../../services/renderer/TiRendererModule';\r\nimport { TiTipModule } from '../../directives/tip/TiTipModule';\r\nimport { TiButtonModule } from '../button/TiButtonModule';\r\nimport { TiOutlineModule } from '../../directives/outline/TiOutlineModule';\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TiButtonModule,\r\n    TiIconModule,\r\n    TiListModule,\r\n    TiSearchboxModule,\r\n    TiDropModule,\r\n    TiOverflowModule,\r\n    TiTableFixedHeadServiceModule,\r\n    TiLocaleModule,\r\n    TiRendererModule,\r\n    TiTipModule,\r\n    TiOutlineModule\r\n  ],\r\n  exports: [\r\n    TiTableComponent,\r\n    TiHeadFilterComponent,\r\n    TiHeadSortComponent,\r\n    TiDetailsIconComponent,\r\n    TiDetailsTrDirective,\r\n    TiColspanDirective,\r\n    TiColsToggleComponent,\r\n    TiColsResizableDirective,\r\n    TiCellTextComponent,\r\n    TiCellIconsComponent,\r\n    TiColumnFixedDirective,\r\n    TiColClickDirective ],\r\n  declarations: [\r\n    TiTableComponent,\r\n    TiHeadFilterComponent,\r\n    TiHeadFilterDropComponent,\r\n    TiHeadSortComponent,\r\n    TiDetailsIconComponent,\r\n    TiDetailsTrDirective,\r\n    TiColspanDirective,\r\n    TiColsToggleComponent,\r\n    TiColsToggleDropComponent,\r\n    TiColsResizableDirective,\r\n    TiCellTextComponent,\r\n    TiCellIconsComponent,\r\n    TiColumnsPipe,\r\n    TiColumnFixedDirective,\r\n    TiColClickDirective]\r\n})\r\nexport class TiTableModule {\r\n}\r\nexport { TiTableComponent, TiTableSrcState, TiTableDataState, TiTableRowData, TiTableSrcData, TiTableColumns, TiTableStorageConfig, TiPaginationStorageConfig } from './TiTableComponent';\r\nexport { TiHeadFilterComponent } from './TiHeadFilterComponent';\r\nexport { TiHeadSortComponent } from './TiHeadSortComponent';\r\nexport { TiDetailsIconComponent } from './TiDetailsIconComponent';\r\nexport { TiDetailsTrDirective } from './TiDetailsTrDirective';\r\nexport { TiColspanDirective } from './TiColspanDirective';\r\nexport { TiColsToggleComponent } from './TiColsToggleComponent';\r\nexport { TiColsResizableDirective } from './TiColsResizableDirective';\r\nexport { TiCellTextComponent } from './TiCellTextComponent';\r\nexport { TiCellIconsComponent } from './TiCellIconsComponent';\r\nexport { TiColumnFixedDirective } from './TiColumnFixedDirective';\r\nexport { TiColClickDirective } from './TiColClickDirective';\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChange,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiLocale, TiLocaleFormat, TiLocaleWords } from '../../locale/TiLocaleModule'; // 获取词条\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiTableComponent } from '../table/TiTableModule';\r\nimport { TiSelectComponent } from '../select/TiSelectModule';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * 实现每页显示条数的相关配置的数据类型\r\n */\r\nexport interface TiPageSizeConfig {\r\n  /**\r\n   * 组件每页显示条数选项列表：下拉列表\r\n   */\r\n  options?: Array<number>;\r\n  /**\r\n   * 当前每页显示条数配置，注意: 该值应该属于options数组中的一个元素\r\n   */\r\n  size?: number;\r\n  /**\r\n   * 设置每页显示条数选项元素(页面上是一个select组件)的宽度\r\n   */\r\n  width?: string;\r\n  /**\r\n   * 设置是否在页面上隐藏每页显示条数选项元素。\r\n   */\r\n  hide?: boolean;\r\n}\r\n\r\n/**\r\n * 当分页更新时触发事件通知出去的参数\r\n *\r\n * 更新场景包括：1.当前页码改变，2.每页显示条数改变，3.总条数改变。\r\n */\r\nexport interface TiPaginationEvent {\r\n  currentPage: number;\r\n  size: number;\r\n  totalNumber: number;\r\n}\r\n\r\n/**\r\n * @ignore\r\n * 页码的数据类型\r\n */\r\nexport interface TiPageItem {\r\n  id: string;\r\n  label: any;\r\n}\r\n\r\n/**\r\n * Pagination分页组件\r\n *\r\n * 分页组件一般情况下与表格组件配合使用，实现对表格数据的分页显示。\r\n *\r\n * <example-url>../tiny3demo/#/pagination/pagination-all</example-url>\r\n */\r\n@Component({\r\n  selector: 'ti-pagination',\r\n  templateUrl: './pagination.html',\r\n  styleUrls: ['./pagination.less', '../text/text.less'], // 引用text的less文件\r\n  host: {\r\n    '[class.ti3-page-container]': 'true',\r\n    '[class.ti3-pag-container-disable]': 'this.disabled',\r\n    '[attr.unselectable]': '\"on\"'\r\n  }\r\n})\r\n\r\nexport class TiPaginationComponent extends TiFormComponent {\r\n    private static readonly MIN_PAGE: number = 1;\r\n    /**\r\n     * 设置组件的类型：三种类型default(默认)、simple、mini\r\n     */\r\n    @Input() type: 'default' | 'simple' | 'mini' = 'default';\r\n    /**\r\n     * 设置当前数据总条数\r\n     */\r\n    @Input() totalNumber: number;\r\n    /**\r\n     * 组件内部改变总条数时会触发该事件，向外通知当前总条数。\r\n     */\r\n    @Output() readonly totalNumberChange: EventEmitter<number> = new EventEmitter<number>();\r\n    /**\r\n     * 设置当前页码\r\n     */\r\n    @Input() currentPage: number = 1;\r\n    /**\r\n     * 组件内部改变当前页码时会触发该事件，向外通知当前页码数。\r\n     */\r\n    @Output() readonly currentPageChange: EventEmitter<number> = new EventEmitter<number>();\r\n    /**\r\n     * 实现每页显示条数的相关配置，包括如下属性\r\n     *\r\n     * options:组件每页显示条数选项列表，默认配置：[10, 20, 50]\r\n     *\r\n     * size:每页显示条数配置，注意: 该值应该属于options数组中的一个元素，默认：10\r\n     *\r\n     * width:设置每页显示条数选项元素(页面上是一个select组件)的宽度，默认：'50px'\r\n     *\r\n     * hide:设置是否在页面上隐藏每页显示条数选项元素，默认：false\r\n     */\r\n    @Input() pageSize: TiPageSizeConfig;\r\n    /**\r\n     * 设置是否总条数的显示与隐藏\r\n     */\r\n    @Input() showTotalNumber: boolean = true;\r\n    /**\r\n     * 设置是否显示页码跳转按钮（默认不显示)\r\n     */\r\n    @Input() showGotoLink: boolean = false;\r\n    /**\r\n     * 组件是否开启自动隐藏功能。开启后，当总条数totalNumber小于每页显示条数选项列表中的最小值时，隐藏分页\r\n     */\r\n    @Input() autoHide: boolean = false;\r\n    /**\r\n     * 组件是否禁用状态\r\n     */\r\n    @Input() disabled: boolean = false;\r\n    /**\r\n     * 设置最后一页的显示与隐藏（一般数据量比较大的场景隐藏最后一页）：默认显示\r\n     */\r\n    @Input() showLastPage: boolean = true;\r\n    /**\r\n     * 当操作选择框改变每页显示条数时会触发该事件，向外通知当前页码、每页显示条数和总条数。\r\n     */\r\n    @Output() readonly pageNumChange: EventEmitter<TiPaginationEvent> = new EventEmitter<TiPaginationEvent>();\r\n    /**\r\n     * 当操作选择框改变每页显示条数或操作页码改变当前页码时会触发该事件，向外通知当前页码、每页显示条数和总条数。\r\n     */\r\n    @Output() readonly pageUpdate: EventEmitter<TiPaginationEvent> = new EventEmitter<TiPaginationEvent>();\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('mini', { static: true }) mini: TemplateRef<any> = undefined;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('input') inputRef: ElementRef;\r\n    /**\r\n     * @ignore\r\n     * 非mini类型：select下拉组件\r\n     */\r\n    public itemsPerPage: any;\r\n    /**\r\n     * @ignore\r\n     * mini类型：select下拉组件\r\n     */\r\n    public itemsMini: any;\r\n    /**\r\n     * @ignore\r\n     * 用户输入即将跳转的页码\r\n     */\r\n    public gotoPage: { page?: any } = {};\r\n    /**\r\n     * @ignore\r\n     * 页码列表\r\n     */\r\n    public pages: Array<{ key: any, active: boolean }>;\r\n    private hidePage: boolean = false;\r\n    private totalPageNum: number;\r\n    private oldCurrentPage: number;\r\n    private oldTotalNumber: number;\r\n    private oldSelected: number;\r\n    private oldSize: number;\r\n    private subscription: Subscription;\r\n    private updateFocusableElems: boolean;\r\n    private defaultPageSize: TiPageSizeConfig = {\r\n      options: [10, 20, 50], // 下拉选项列表\r\n      size: 10, // 默认每页显示10条\r\n      width: '60px', // select宽度\r\n      hide: false // 设置是否在页面上隐藏每页显示条数选项：下拉列表\r\n    };\r\n    constructor(protected render: Renderer2,\r\n                protected hostRef: ElementRef,\r\n                @Optional() private table: TiTableComponent,\r\n                @Optional() private select: TiSelectComponent) {\r\n      super(hostRef, render);\r\n    }\r\n\r\n    /**\r\n     * @description 创建每一个页码对应的数据\r\n     * @params key 页码显示，为数字或者是\"···\"\r\n     * @params isActive 是否为当前激活页\r\n     */\r\n    private static makePage(key: any, isActive: boolean): { key: any, active: boolean } {\r\n      return {\r\n        key,\r\n        active: isActive\r\n      };\r\n    }\r\n\r\n    ngOnInit(): void {\r\n      super.ngOnInit();\r\n      // 组件对外各个接口的初始化处理\r\n      this.initData();\r\n      this.renderPage();\r\n\r\n      if (this.isWithTable()) {\r\n            this.subscription = this.table.paginationSubject.subscribe((value: { totalNumber?: number, currentPage?: number }) => {\r\n                if (!Util.isUndefined(value.totalNumber) && value.totalNumber !== this.totalNumber) {\r\n                    this.totalNumber = value.totalNumber;\r\n                    this.verifyCurrentPage(this.itemsPerPage.selected, true);\r\n                    this.totalNumberChange.emit(this.totalNumber);\r\n                }\r\n\r\n                if (!Util.isUndefined(value.currentPage) && value.currentPage !== this.currentPage) {\r\n                    this.currentPage = value.currentPage;\r\n                    this.currentPageChange.emit(this.currentPage);\r\n                }\r\n            });\r\n            // 表格记忆\r\n            this.updateFromStorage();\r\n        }\r\n\r\n        // select下拉面板（dropsearch）中使用分页\r\n        if (this.select) {\r\n            this.select.pagination = this;\r\n            this.select.dropsearchCom.pagination = this;\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n      const currentPageObj: SimpleChange = changes['currentPage'];\r\n      const totalNumberObj: SimpleChange = changes['totalNumber'];\r\n      if ((currentPageObj && !currentPageObj.firstChange) || (totalNumberObj && !totalNumberObj.firstChange)) {\r\n        this.verifyCurrentPage(this.itemsPerPage.selected, true);\r\n      }\r\n    }\r\n\r\n    ngDoCheck(): void {\r\n      // 监听开发者设置的pageSize.size的改变\r\n      if (!Util.isUndefined(this.pageSize) && this.pageSize.size !== this.oldSize) {\r\n        const index: number = this.itemsPerPage.options.indexOf(this.pageSize.size);\r\n        if (index !== -1) {\r\n          this.itemsPerPage.selected = this.itemsPerPage.options[index];\r\n          this.verifyCurrentPage(this.itemsPerPage.selected, true);\r\n          this.oldSize = this.pageSize.size;\r\n        }\r\n      }\r\n\r\n      if (this.oldTotalNumber !== this.totalNumber || this.itemsPerPage.selected !== this.oldSelected ||\r\n        this.oldCurrentPage !== this.currentPage) {\r\n        this.renderPage();\r\n        this.oldTotalNumber = this.totalNumber;\r\n        this.oldSelected = this.itemsPerPage.selected;\r\n        this.oldCurrentPage = this.currentPage;\r\n        this.updateFocusableElems = true; // select使用过这个变量后，会重置为false\r\n      }\r\n    }\r\n    ngAfterViewChecked(): void {\r\n      // select中使用的分页为default类型且不带左边select，所以此处限定type === 'default'\r\n      if (this.type === 'default' && this.updateFocusableElems) {\r\n        // 修复SSR报错：ERROR TypeError: this.nativeElement.querySelectorAll(...) is not a function or its return value is not iterable\r\n        // this.setFocusableElems([...(this.nativeElement as HTMLElement).querySelectorAll('a')]);\r\n        this.setFocusableElems(Array.prototype.slice.call(this.nativeElement.querySelectorAll('a')));\r\n      }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n      if (this.subscription) {\r\n        this.subscription.unsubscribe();\r\n      }\r\n    }\r\n\r\n    // 数据初始化\r\n    private initData(): void {\r\n      // 总条数数字国际化处理，拼接成 ---> 总条数: 条数\r\n      this.setTotalNumberFormat();\r\n\r\n      // 初始化获取itemsPerPage：select组件所需的属性\r\n      this.itemsPerPage = this.getFormatedSize();\r\n\r\n      this.verifyCurrentPage(this.itemsPerPage.selected, true);\r\n\r\n      this.oldCurrentPage = this.currentPage;\r\n      this.oldTotalNumber = this.totalNumber;\r\n      this.oldSize = this.itemsPerPage.selected;\r\n      this.oldSelected = this.itemsPerPage.selected;\r\n    }\r\n\r\n    // 是否有表格当前页记忆\r\n    private isStorageCurrentPage(): boolean {\r\n      // tslint:disable-next-line: max-line-length\r\n      return this.table.storageId && (this.table.storageConfig.pagination === true || (this.table.storageConfig.pagination && this.table.storageConfig.pagination['currentPage'] === true));\r\n    }\r\n\r\n    // 是否有表格每页个数记忆\r\n    private isStorageItemsPerPage(): boolean {\r\n      // tslint:disable-next-line: max-line-length\r\n      return this.table.storageId && (this.table.storageConfig.pagination === true || (this.table.storageConfig.pagination && this.table.storageConfig.pagination['itemsPerPage'] === true));\r\n    }\r\n    // 处理表格记忆\r\n    private updateFromStorage(): void {\r\n        // 修复SSR报错：ERROR TypeError: Cannot read property 'currentPage' of undefined\r\n        // 当前页\r\n        if (this.isStorageCurrentPage()) {\r\n            const currentPage: number = this.table.sessionStorageState && this.table.sessionStorageState.currentPage;\r\n            if (currentPage > 0) {\r\n                Promise.resolve(currentPage).then(() => {\r\n                    this.currentPage = currentPage;\r\n                    this.currentPageChange.emit(currentPage);\r\n                });\r\n            }\r\n        }\r\n        // 修复SSR错误：ERROR TypeError: Cannot read property 'itemsPerPage' of undefined\r\n        // 每页条数\r\n        if (this.isStorageItemsPerPage()) {\r\n          const itemsPerPage: number = this.table.localStorageState && this.table.localStorageState.itemsPerPage;\r\n          if (itemsPerPage > 0) {\r\n              Promise.resolve(itemsPerPage).then(() => {\r\n                  this.pageSize.size = itemsPerPage;\r\n                  const pagination: TiPaginationEvent = {\r\n                      currentPage: this.currentPage,\r\n                      size: itemsPerPage,\r\n                      totalNumber: this.totalNumber\r\n                  };\r\n                  this.pageNumChange.emit(pagination);\r\n              });\r\n          }\r\n\r\n    }\r\n  }\r\n\r\n    /**\r\n     * 根据接口配置来渲染页面\r\n     */\r\n    private renderPage(): void {\r\n      if (this.type === 'mini') {\r\n        this.configMini();\r\n      } else {\r\n        // goto页码与当前页码保持一致\r\n        this.gotoPage = {\r\n          page: this.currentPage\r\n        };\r\n\r\n        // 页码列表\r\n        this.pages = this.getPages();\r\n      }\r\n\r\n      // 用户开启自动隐藏功能且无需显示分页(若总条数 =< 最小的每页显示条数)时，则不需要显示分页时，隐藏分页\r\n      // 初始化totalNumber undefined\r\n      this.hidePage = this.autoHide &&\r\n                        (Util.isUndefined(this.totalNumber) || Math.min.apply(null, this.itemsPerPage.options) >= this.totalNumber);\r\n      if (this.hidePage) {\r\n        this.render.setStyle(this.hostRef.nativeElement, 'display', 'none');\r\n      } else {\r\n        this.render.setStyle(this.hostRef.nativeElement, 'display', 'inline-block');\r\n      }\r\n\r\n      // 若分页与ti-table配合使用，则当分页更新时，触发ti-table的updatePagination\r\n      // 进而触发表格更新回调\r\n      if (this.isWithTable()) {\r\n        this.table.updatePagination(this.currentPage, this.itemsPerPage.selected);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 对总页数进行数字国际化处理\r\n     */\r\n    public setTotalNumberFormat(): string {\r\n      // 数字国际化格式：整数位保留最小位数.小数位保留最小位数-小数位最大保留位置\r\n      const formatTotalNumber: string = Util.isUndefined(this.totalNumber) ? '0' : TiLocaleFormat.formatNumber(this.totalNumber, '1.0-0');\r\n\r\n      return (TiLocale.getLocaleWords() as TiLocaleWords).tiPagination['totalLabel'] + formatTotalNumber;\r\n    }\r\n\r\n    private getFormatedSize(): any {\r\n      const sizeConfig: TiPageSizeConfig = { ...this.defaultPageSize, ...this.pageSize };\r\n      let index: number = sizeConfig.options.indexOf(sizeConfig.size);\r\n      if (index === -1) {\r\n        index = 0;\r\n        this.syncPageSize(sizeConfig.options[index]);\r\n      }\r\n\r\n      return {\r\n        selected: sizeConfig.options[index], // select选中项\r\n        options: sizeConfig.options, // 每页显示条数选项\r\n        hide: sizeConfig.hide, // 是否显示\r\n        style: {\r\n          width: sizeConfig.width // 宽度设置\r\n        }\r\n      };\r\n    }\r\n\r\n    /**\r\n     * 同步变化开发者的pageSize数据\r\n     */\r\n    private syncPageSize(pageSizeNum: number): void {\r\n      if (this.pageSize instanceof Object) {\r\n        this.pageSize.size = pageSizeNum;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 当前页码是否为最小页码\r\n     */\r\n    public noPrevious(): boolean {\r\n      return this.currentPage === TiPaginationComponent.MIN_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 当前页码是否为最大页码\r\n     */\r\n    public noNext(): boolean {\r\n      return this.currentPage === this.totalPageNum;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 当前页码是否为'···' 不可被聚焦\r\n     */\r\n    public isEllipse(page: any): boolean {\r\n      return page.key === '···';\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 操作pageSize选择框,每页显示条数改变时触发\r\n     */\r\n    public onSizeChange(pageSizeNum: number): void {\r\n      this.syncPageSize(pageSizeNum);\r\n      this.verifyCurrentPage(pageSizeNum, false);\r\n      const pagination: TiPaginationEvent = {\r\n        currentPage: this.currentPage,\r\n        size: pageSizeNum,\r\n        totalNumber: this.totalNumber\r\n      };\r\n      this.pageNumChange.emit(pagination);\r\n      this.pageUpdate.emit(pagination);\r\n    }\r\n\r\n    // 通过操作选择某一页\r\n    private selectPage(page: any, evt?: Event): void {\r\n      // tiny2中此处阻止a标签浏览器默认事件\r\n      if (!Util.isUndefined(evt)) {\r\n        evt.preventDefault();\r\n      }\r\n\r\n      if (this.disabled) {\r\n        return;\r\n      }\r\n\r\n      const selectedPage: number = parseInt(page, 10);\r\n      if (selectedPage !== this.currentPage) {\r\n        this.currentPage = selectedPage;\r\n        this.currentPageChange.emit(this.currentPage);\r\n        this.pageUpdate.emit({\r\n          currentPage: this.currentPage,\r\n          size: this.itemsPerPage.selected,\r\n          totalNumber: this.totalNumber\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     * 计算总页数\r\n     */\r\n    private calculateTotalPages(pageSizeNum: number): number {\r\n      const totalPages: number = Math.ceil(this.totalNumber / pageSizeNum);\r\n\r\n      return Math.max(totalPages || 0, 1); // 当totalPages是undefined时，取0\r\n    }\r\n\r\n    /**\r\n     * 组装mini类型时模板需要的数据\r\n     */\r\n    private configMini(): void {\r\n      const options: Array<TiPageItem> = [];\r\n      for (let i: number = 1; i <= this.totalPageNum; i++) {\r\n        options.push({\r\n          id: `${i}`,\r\n          label: `${i}/${this.totalPageNum}`\r\n        });\r\n      }\r\n      this.itemsMini = {\r\n        options,\r\n        selected: options[this.currentPage - 1],\r\n        change: (option: TiPageItem): void => { // 选项改变时，修改选中页\r\n          this.selectPage(option.id);\r\n        }\r\n      };\r\n    }\r\n\r\n    /**\r\n     * @description 根据每页显示条数及数据总条数获取页码列表\r\n     */\r\n    private getPages(): Array<{key: any, active: boolean}> {\r\n      const startAndEndPage: Array<number> = this.getInterval(); // 获得显示的起始和结束页\r\n      const startPagNum: number = startAndEndPage[0];\r\n      const endPagNum: number = startAndEndPage[1];\r\n      const pages: Array<{key: any, active: boolean}> = [];\r\n      const restPageNum: number = this.totalPageNum - this.currentPage; // 剩余页数\r\n\r\n      // 只有1页的情况\r\n      if (this.totalPageNum === 1) {\r\n          pages.push(TiPaginationComponent.makePage(1, true));\r\n\r\n          return pages;\r\n      }\r\n\r\n      // 当总页数大于8，并且中间连续按钮的起始位置没有和第1页相连时，创建第1页按钮和省略号\r\n      if (startPagNum > 2 && this.totalPageNum > 8) {\r\n          pages.push(TiPaginationComponent.makePage(1, this.currentPage === 1));\r\n          pages.push(TiPaginationComponent.makePage('···', false));\r\n      }\r\n\r\n      // 创建中间页按钮\r\n      for (let i: number = startPagNum; i <= endPagNum; i++) {\r\n          pages.push(TiPaginationComponent.makePage(i, this.currentPage === i));\r\n      }\r\n\r\n      // 当总页数大于8，并且中间连续按钮的结束位置没有和最后一页按钮相连时，创建省略号\r\n      // 当总页数大于8，并且最后一页隐藏且不是后四页时，创建省略号\r\n      if (this.totalPageNum > 8 && (this.showLastPage && endPagNum < (this.totalPageNum - 1) ||\r\n                                    !this.showLastPage && restPageNum > 3)) {\r\n          pages.push(TiPaginationComponent.makePage('···', false));\r\n      }\r\n\r\n      // 最后一页隐藏：如果中间连续按钮的结束位置为总页数的前一页且当前页是后四页时，创建最后一页\r\n      // 最后一页不隐藏：如果中间连续按钮的结束位置，不是最后一页按钮时，创建最后一页按钮\r\n      if ((!this.showLastPage && endPagNum === this.totalPageNum - 1 && restPageNum <= 3) ||\r\n           (this.showLastPage && endPagNum < this.totalPageNum)) {\r\n        pages.push(TiPaginationComponent.makePage(this.totalPageNum, this.currentPage === this.totalPageNum));\r\n      }\r\n\r\n      return pages;\r\n    }\r\n\r\n     /**\r\n      * @description 根据当前页码和要显示的数目，计算分页链接的起始页\r\n      */\r\n    private getInterval(): Array<number> {\r\n      let start: number;\r\n      let end: number;\r\n      // 1.根据Agile规范：页数小于等于8，起、始按钮值分别设为1和最大页数：1 - 总数\r\n      if (this.totalPageNum <= 8) {\r\n          start = 1;\r\n          end = this.totalPageNum;\r\n\r\n          return [start, end];\r\n      }\r\n\r\n      // 2.总页数大于8，当前项为前三页：1 - 5 / 1 - 6\r\n      if (this.currentPage <= 3) {\r\n          start = 1;\r\n          end = 5;\r\n          if (!this.showLastPage) {\r\n            end = 6;\r\n          }\r\n\r\n          return [start, end];\r\n      }\r\n\r\n      // 3.总页数大于8，当前项是后4页：总数-4 - 总数\r\n      if (this.currentPage > this.totalPageNum - 3) {\r\n          start = this.totalPageNum - 4;\r\n          end = this.totalPageNum;\r\n\r\n          return [start, end];\r\n      }\r\n\r\n      // 4.总页数大于8，当前项不在前三页，后三页：显示中间4个按钮\r\n      start = this.currentPage - 1;\r\n      end = this.currentPage + 2;\r\n\r\n      // 一般数据量比较大的场景隐藏最后一页时，显示中间5个按钮\r\n      if(!this.showLastPage) {\r\n        end = this.currentPage + 3;\r\n      }\r\n\r\n      return [start, end];\r\n    }\r\n\r\n    /**\r\n     * 设置合法的新页码\r\n     */\r\n    private verifyCurrentPage(pageSizeNum: number, triggerPageUpdate: boolean): void {\r\n      this.totalPageNum = this.calculateTotalPages(pageSizeNum);\r\n      if (this.currentPage > this.totalPageNum || this.currentPage < TiPaginationComponent.MIN_PAGE) {\r\n        this.currentPage = this.currentPage > this.totalPageNum ? this.totalPageNum : TiPaginationComponent.MIN_PAGE;\r\n        if (triggerPageUpdate) {\r\n          this.pageUpdate.emit({\r\n            currentPage: this.currentPage,\r\n            size: pageSizeNum,\r\n            totalNumber: this.totalNumber\r\n          });\r\n          Promise.resolve(undefined)\r\n            .then(() => {\r\n              this.currentPageChange.emit(this.currentPage);\r\n          });\r\n        } else {\r\n          this.currentPageChange.emit(this.currentPage);\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 输入跳转页码enter快捷键处理\r\n     */\r\n    public enterPageHandler(e: KeyboardEvent): void {\r\n      this.gotoPageHandler(e);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 根据要跳转的页码，同步修改当前页码\r\n     */\r\n    public gotoPageHandler(event: KeyboardEvent): void {\r\n      // 当输入值为不合法时处理\r\n      if (this.gotoPage.page < TiPaginationComponent.MIN_PAGE || this.gotoPage.page > this.totalPageNum) {\r\n        this.gotoPage.page = this.currentPage;\r\n\r\n        return;\r\n      }\r\n\r\n      if (this.gotoPage.page !== this.currentPage) {\r\n        this.currentPage = this.gotoPage.page;\r\n        this.currentPageChange.emit(this.currentPage);\r\n        this.pageUpdate.emit({\r\n          currentPage: this.currentPage,\r\n          size: this.itemsPerPage.selected,\r\n          totalNumber: this.totalNumber\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 上一页按钮的点击事件\r\n     */\r\n    public onPrevClick(event: Event): any {\r\n      return !this.noPrevious() && this.selectPage(this.currentPage - 1, event);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 页码点击事件\r\n     */\r\n    public onPageClick(page: any, event: Event): any {\r\n      return !this.isEllipse(page) && this.selectPage(page.key, event);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 下一页按钮的点击事件\r\n     */\r\n    public onNextClick(event: Event): any {\r\n      return !this.noNext() && this.selectPage(this.currentPage + 1, event);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * input输入框modelchange事件\r\n     */\r\n    public ngModelChange(value: any): void {\r\n      if (value === '') {\r\n        this.gotoPage.page = '';\r\n\r\n        return;\r\n      }\r\n\r\n      const newPage: number = parseInt(value, 10);\r\n      if (isNaN(newPage)) {\r\n        this.render.setProperty(this.inputRef.nativeElement, 'value', this.gotoPage.page);\r\n\r\n        return;\r\n      }\r\n\r\n      this.gotoPage.page = newPage;\r\n      this.render.setProperty(this.inputRef.nativeElement, 'value', this.gotoPage.page);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public trackByFn(index: number, item: any): number {\r\n      return item.key;\r\n    }\r\n\r\n    private isWithTable(): boolean {\r\n      return this.table && this.render.parentNode(this.nativeElement).tagName === 'TI-TABLE';\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiPaginationComponent } from './TiPaginationComponent';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TiSelectModule } from '../select/TiSelectModule';\r\nimport { TiTextModule } from '../text/TiTextModule';\r\nimport { TiLocaleModule } from '../../locale/TiLocaleModule';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\nimport { TiOutlineModule } from '../../directives/outline/TiOutlineModule';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TiIconModule,\r\n    TiSelectModule,\r\n    TiTextModule,\r\n    TiLocaleModule,\r\n    TiOutlineModule\r\n  ],\r\n  exports: [TiPaginationComponent],\r\n  declarations: [TiPaginationComponent]\r\n})\r\n\r\nexport class TiPaginationModule {\r\n}\r\n\r\nexport * from './TiPaginationComponent';\r\nexport { TiPaginationComponent, TiPageSizeConfig, TiPaginationEvent } from './TiPaginationComponent';\r\n","import { Component, Input, SimpleChanges } from '@angular/core';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\n/**\r\n * 进度条组件\r\n *\r\n * <example-url>../tiny3demo/#/progressbar/progressbar-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-progressbar',\r\n    templateUrl: './progressbar.html',\r\n    styleUrls: ['./progressbar.less'],\r\n    host: {\r\n        '[class.ti3-progress]': 'true'\r\n    }\r\n})\r\n\r\nexport class TiProgressbarComponent extends TiBaseComponent {\r\n    /**\r\n     *  设置当前值，当前值/最大值即为进度值\r\n     */\r\n    @Input() value: number = 0;\r\n    /**\r\n     *  设置最大值，当前值/最大值即为进度值\r\n     */\r\n    @Input() max: number = 100;\r\n    /**\r\n     *  设置进度条在不同当前值下对应的样式，包括动画效果\r\n     */\r\n    @Input() progressClass: string = '';\r\n    /**\r\n     *  设置进度条是否开启动画效果\r\n     */\r\n    @Input() animation: boolean = true;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public percent: number; // 当前进度值\r\n    // 设置合法的数值\r\n    private static verifyNum(newVal: any, defaultValue: any): number {\r\n        return isNaN(parseFloat(newVal)) ? defaultValue : newVal;\r\n    }\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.max = TiProgressbarComponent.verifyNum(this.max, this.max);\r\n        this.value = TiProgressbarComponent.verifyNum(this.value, this.value);\r\n        this.calcPercentage();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        super.ngOnChanges(changes);\r\n        // 当前值更新，重新计算进度\r\n        this.setChanges(changes, 'value');\r\n        // 当最大值更新，重新计算进度\r\n        this.setChanges(changes, 'max');\r\n    }\r\n\r\n    /**\r\n     * @description 处理用户输入的改变\r\n     * @param: changes 改变的对象\r\n     * @param: changeKey 那个属性改变\r\n     */\r\n    private setChanges(changes: SimpleChanges, changeKey: string): void {\r\n        if (changes[changeKey] && !changes[changeKey].isFirstChange()) {\r\n            const oldVal: any = changes[changeKey].previousValue;\r\n            const newVal: any = changes[changeKey].currentValue;\r\n            const _newValue: number = TiProgressbarComponent.verifyNum(newVal, oldVal);\r\n            this[changeKey] = _newValue;\r\n            this.calcPercentage();\r\n        }\r\n    }\r\n\r\n    // 计算当前进度百分比\r\n    private calcPercentage(): void {\r\n        // 如果开发者设置数据不合理，则进度置0\r\n        if (this.max === 0) {\r\n            this.percent = 0;\r\n\r\n            return;\r\n        }\r\n        this.percent = Number((this.value * 100 / this.max).toFixed(2));\r\n        if (this.percent > 100) {\r\n            this.percent = 100;\r\n        }\r\n        if (this.percent < 0) {\r\n            this.percent = 0;\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiProgressbarComponent } from './TiProgressbarComponent';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [TiProgressbarComponent],\r\n    declarations: [TiProgressbarComponent]\r\n})\r\n\r\nexport class TiProgressbarModule {\r\n}\r\nexport { TiProgressbarComponent } from './TiProgressbarComponent';\r\n","import { AfterViewInit, Component, ElementRef, Input, OnChanges, SimpleChanges, ViewChild } from '@angular/core';\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n    selector: 'ti-progresspie',\r\n    template: '<canvas #canvas></canvas>'\r\n})\r\n\r\nexport class TiProgresspieComponent implements OnChanges, AfterViewInit {\r\n    private defaultConfig: any = {\r\n        value: 0,\r\n        maxValue: 100,\r\n        color: '#3dcca6',\r\n        lineWidth: 2\r\n    };\r\n    @Input() value: number = this.defaultConfig.value;\r\n    @Input() maxValue: number = this.defaultConfig.maxValue;\r\n    private percent: number; // 计算后的百分比\r\n    @ViewChild('canvas', { static: true }) private canvasEle: ElementRef; // canvas元素对应的ElementRef\r\n    private canvasElement: any; // canvas元素对应的nativeElement\r\n    nativeElement: Element; // 元素本身\r\n    constructor(private hostEle: ElementRef) {\r\n        this.nativeElement = this.hostEle.nativeElement;\r\n    }\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // value和maxValue的动态修改均需要重绘进度呈现\r\n        if ((changes.value && !changes.value.isFirstChange()) ||\r\n            (changes.maxValue && !changes.maxValue.isFirstChange())) {\r\n            this.draw();\r\n        }\r\n    }\r\n    ngAfterViewInit(): void { // 初始化走一次圆饼的绘制，在此处处理是因为canvas对象此处是通过ref方式获取canvas的最早时机\r\n        this.canvasElement = this.canvasEle.nativeElement;\r\n        // 修复SSR错误：ERROR ReferenceError: getComputedStyle is not defined\r\n        if(typeof getComputedStyle === 'undefined'){\r\n            return;\r\n        }\r\n        this.canvasElement.width = parseFloat(getComputedStyle(this.nativeElement).width);\r\n        this.canvasElement.height = parseFloat(getComputedStyle(this.nativeElement).height);\r\n        this.draw();\r\n    }\r\n    private draw(): void {\r\n        this.calcPercent();\r\n        this.drawProgressPie();\r\n    }\r\n    // 计算百分比，外部需要保证maxVlue和value均为数字类型\r\n    private calcPercent(): void {\r\n        // 计算percent值\r\n        if (this.maxValue === 0) {\r\n            this.percent = 0;\r\n\r\n            return;\r\n        }\r\n\r\n        let percent: number = this.value / this.maxValue;\r\n        if (isNaN(percent)) {\r\n            this.percent = 0;\r\n\r\n            return;\r\n        }\r\n\r\n        if (percent > 1) {\r\n            percent = 1;\r\n        }\r\n\r\n        if (percent < 0) {\r\n            percent = 0;\r\n        }\r\n        this.percent = percent;\r\n    }\r\n\r\n    private drawProgressPie(): void {\r\n        const canvas: any = this.canvasElement;\r\n        const ctx: any = canvas.getContext('2d');\r\n\r\n        // 清除先前画布内容\r\n        const width: number = canvas.width;\r\n        const height: number = canvas.height;\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // 圆半径及起始点计算\r\n        const d: number = Math.min(width, height);\r\n        const cx: number = width / 2;\r\n        const cy: number = height / 2;\r\n        const lineWidth: number = this.defaultConfig.lineWidth;\r\n        const r: number = d / 2 - lineWidth;\r\n        const startPoint: number = -Math.PI / 2;\r\n        // 笔触样式设置\r\n        const color: string = this.defaultConfig.color;\r\n        ctx.fillStyle = color;\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = lineWidth;\r\n        // 画外圆\r\n        ctx.beginPath();\r\n        ctx.arc(cx, cy, r, startPoint, startPoint + Math.PI * 2);\r\n        ctx.stroke();\r\n\r\n        // 画扇形\r\n        const endPoint: number = startPoint + Math.PI * this.percent * 2;\r\n        ctx.beginPath();\r\n        ctx.moveTo(cx, cy); // 移动至圆心\r\n        ctx.arc(cx, cy, r, startPoint, endPoint); // 从外边上的点画曲线\r\n        ctx.lineTo(cx, cy); // 从圆心画直线到计算好的圆外上的点\r\n        ctx.fill();\r\n        if (this.percent === 0) { // 为0的情况下，绘制圆心值边缘竖线\r\n            ctx.stroke();\r\n        }\r\n        ctx.closePath();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { TiProgresspieComponent } from './TiProgresspieComponent';\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n    exports: [TiProgresspieComponent],\r\n    declarations: [TiProgresspieComponent]\r\n})\r\n\r\nexport class TiProgresspieModule {\r\n}\r\nexport { TiProgresspieComponent } from './TiProgresspieComponent';\r\n","import { Component, ViewEncapsulation } from '@angular/core';\r\nimport { TiRadioBaseComponent } from '../base/TiBaseModule';\r\n\r\n/**\r\n * radio单选框组件\r\n *\r\n * radio组件完全基于原生input实现，但是需要在input中添加TinyUI提供的tiRadio属性\r\n *\r\n * <example-url>../tiny3demo/#/radio/radio-all</example-url>\r\n */\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: '[tiRadio]', // 指定组件名称\r\n    templateUrl: './radio.html', // 指定组件模板\r\n    styleUrls: ['./radio.less'], // 样式路径\r\n    encapsulation: ViewEncapsulation.None // 设置组件的试图包装选项：三个值Emulated(默认值)，Native，None\r\n})\r\nexport class TiRadioComponent extends TiRadioBaseComponent {\r\n    /**\r\n     *  @ignore\r\n     */\r\n    protected canChange(): boolean {\r\n        return !this.nativeElement.checked;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiRadioComponent } from './TiRadioComponent';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TiOutlineModule } from '../../directives/outline/TiOutlineModule';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TiOutlineModule\r\n  ],\r\n  exports: [TiRadioComponent],\r\n  declarations: [TiRadioComponent]\r\n})\r\nexport class TiRadioModule {\r\n}\r\nexport { TiRadioComponent } from './TiRadioComponent';\r\n","import { Directive, ElementRef, Renderer2 } from '@angular/core';\r\nimport { Util } from '../../utils/Util';\r\n/**\r\n * tiScrollָ�����ڴ���document�ϵ�tiScroll�¼���\r\n *\r\n * 10.0.2����\r\n */\r\n@Directive({\r\n    selector: '[tiScroll]'\r\n})\r\n\r\nexport class TiScrollDirective {\r\n    private hostEle: Element;\r\n    constructor(private hostEleRef: ElementRef, private renderer2: Renderer2) {\r\n        this.hostEle = this.hostEleRef.nativeElement;\r\n        this.renderer2.listen(this.hostEle, 'scroll', () => {\r\n            Util.trigger(document, 'tiScroll');\r\n        });\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { TiScrollDirective } from './TiScrollDirective';\r\n\r\n@NgModule({\r\n    imports: [],\r\n    exports: [TiScrollDirective],\r\n    declarations: [TiScrollDirective]\r\n})\r\n\r\nexport class TiScrollModule {\r\n}\r\n\r\nexport { TiScrollDirective } from './TiScrollDirective';\r\n","import {\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ContentChild,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    IterableChanges,\r\n    IterableDiffer,\r\n    IterableDiffers,\r\n    Output,\r\n    Renderer2,\r\n    SecurityContext,\r\n    SimpleChanges,\r\n    TemplateRef,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiRenderer } from '../../services/renderer/TiRenderer';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport interface TiDragConfig {\r\n    helper: any;\r\n    position: {\r\n        left: number,\r\n        top: number\r\n    };\r\n}\r\n\r\n/**\r\n * Slider滑块组件\r\n *\r\n * 滑块组件，通过操作组件选择指示范围\r\n *\r\n * <example-url>../tiny3demo/#/slider/slider-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-slider',\r\n    templateUrl: './slider.html',\r\n    styleUrls: ['./slider.less'],\r\n    host: {\r\n        '[class.ti3-slider-container]': 'true',\r\n        '[class.ti3-slider-disable]': 'disabled',\r\n        '(mousedown)': 'hostMousedownEvent($event)'\r\n    },\r\n    providers: [TiFormComponent.getValueAccessor(TiSliderComponent)]\r\n})\r\n\r\nexport class TiSliderComponent extends TiFormComponent {\r\n    /**\r\n     * 最小范围值\r\n     */\r\n    @Input() min: number = 0;\r\n    /**\r\n     * 最大范围值\r\n     */\r\n    @Input() max: number = 10;\r\n\r\n    /**\r\n     * 滑动步长，滑块每次跳变的步长（若要实现只在刻度上跳变的效果，step需严格和刻度间距一致）\r\n     */\r\n    @Input() step: number = 1;\r\n    /**\r\n     * 设置刻度\r\n     * 1.不同类型的使用：\r\n     *\r\n     * 1.1 Array情况下：数组中各元素依次对应各刻度显示值；\r\n     *\r\n     * 1.2 Function情况下：返回值为刻度显示值，根据返回值设置各step对应的刻度显示值，\r\n     * 函数的参数依次为：value(step对应的值),max(最大值),min(最小值)。\r\n     *\r\n     * 2.不同形式的刻度显示值对应各自的显示方式：\r\n     *\r\n     * 2.1 空字符串 --- 只打点不显示label；\r\n     *\r\n     * 2.2 undefined/null ---不打点不显示label；\r\n     *\r\n     * 2.3 其它情况 --- 打点且显示值为配置值。\r\n     */\r\n    @Input() scales: Array<any> | Function;\r\n    /**\r\n     * 设置滑块的tip显示方式：取值\"always\"，\"auto\"（默认值）\r\n     *\r\n     * always：tip一直显示\r\n     *\r\n     * auto：鼠标移到滑块上出tip\r\n     */\r\n    @Input() tipMode: 'auto' | 'always' = 'auto';\r\n    /**\r\n     * tip提示内容格式函数：返回值是string类型，为tip中显示的文本。\r\n     *\r\n     * 返回值在 v10.1.3 及之前的版本存在XSS攻击(html类型)风险, v10.1.4 版本做了安全处理，已不存在XSS攻击风险。\r\n     */\r\n    @Input() tipFormatterFn: (value: any) => string;\r\n    /**\r\n     * 跟scales接口搭配使用，依次设置scales中两个相邻刻度每之间长度占总长的比例，\r\n     * 数组所有项总和为1，数组长度比scales长度小1。\r\n     */\r\n    @Input() ratios: Array<number>;\r\n    /**\r\n     * 滑块停止后值发生改变时触发的事件\r\n     *\r\n     * 3.1.0新增\r\n     */\r\n    @Output() readonly changeStop: EventEmitter<any> = new EventEmitter<any>();\r\n    /**\r\n     * @ignore\r\n     * 获取到用户自定义的刻度\r\n     */\r\n    @ContentChild(TemplateRef, { static: true }) public labelTemplate: TemplateRef<any>;\r\n    /**\r\n     * @ignore\r\n     * 存放用户传入的刻度值\r\n     */\r\n    public ticks: Array<any>;\r\n    /**\r\n     * @ignore\r\n     * 对于双滑块，左滑块是否处于变化状态\r\n     */\r\n    public isMinPointerActive: boolean;\r\n    /**\r\n     * @ignore\r\n     * 拖动配置参数\r\n     */\r\n    public dragOptions: any;\r\n    private ticksArr: Array<any>; // 存放合法的刻度值\r\n    private isDouble: boolean = false; // 判断是否是双滑块，默认是单滑块 false\r\n    private isTipAutoShow: boolean = true; // 判断tip提示是否是自动显示（鼠标操作才显示）,默认true\r\n    private decimalDigit: number; // ratios中最大的小数位数\r\n    private scalesDiffer: IterableDiffer<any>; // scales 变化检查\r\n    private dragStartModel: any;\r\n    private pointerMaxEleWidth: number; // 滑块的宽度\r\n\r\n    // 获取模板上DOM变量\r\n    @ViewChild('trackEle', { static: true }) private trackRef: ElementRef;\r\n    @ViewChild('selection', { static: true }) private selectionRef: ElementRef;\r\n    @ViewChild('pointerMin', { static: true }) private pointerMinRef: ElementRef;\r\n    @ViewChild('pointerMax', { static: true }) private pointerMaxRef: ElementRef;\r\n    @ViewChild('tipMin', { static: true }) private tipMinRef: ElementRef;\r\n    @ViewChild('tipMax', { static: true }) private tipMaxRef: ElementRef;\r\n    // 定义DOM变量\r\n    private trackELe: any;\r\n    private selectionEle: any;\r\n    private pointerMinEle: any;\r\n    private pointerMaxEle: any;\r\n    private tipMinEle: any;\r\n    private tipMaxEle: any;\r\n    private isVisibleInit: boolean; // 标识初始化时组件是否可见\r\n\r\n    /**\r\n     * @description: 将value值处理成数组\r\n     * @param: value 需要切割的数组\r\n     */\r\n    private static splitValueToArray(value: string): { valueMin: number, valueMax: number } {\r\n        const arr: Array<string> = (`${value}`).split(';'); // value为number时强转为字符串\r\n\r\n        return {\r\n            valueMin: parseFloat(arr[0]),\r\n            valueMax: arr[1] && parseFloat(arr[1])\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description: value值是否超限制\r\n     * @param: value: 判断的value值\r\n     * @param: minValue: 最大值\r\n     * @param: maxValue: 最小值\r\n     */\r\n    private static isLimitExceed(value: number, minValue: number, maxValue: number): boolean {\r\n        return value < minValue || value > maxValue;\r\n    }\r\n\r\n    /**\r\n     * @description: 当this.scales为函数情况下，转换为ticks数组\r\n     * @param: scaleFormat 被转换的函数\r\n     * @param: minValue 刻度限制的最大值\r\n     * @param: maxValue 刻度限制的最小值\r\n     * @param: step 刻度步长\r\n     */\r\n    private static translateScales(scaleFormat: Function, minValue: number, maxValue: number, step: number): Array<any> {\r\n        const valueLen: number = (maxValue - minValue) / step;\r\n        const tickArray: Array<any> = [];\r\n        for (let i: number = 0; i <= valueLen; i++) {\r\n            const stepNValue: number = step * i + minValue;\r\n            const formatRet: any = scaleFormat(stepNValue, minValue, maxValue);\r\n            if (Util.isUndefined(formatRet) || Util.isNull(formatRet)) {\r\n                // 为undefined或null情况下，不打点不显示label\r\n                /* tslint:disable:no-null-keyword */\r\n                tickArray.push(null);\r\n            } else {\r\n                // 包含为\"\"（打点不显示label）和非\"\"情况（打点且显示label）\r\n                tickArray.push(formatRet);\r\n            }\r\n        }\r\n\r\n        return tickArray;\r\n    }\r\n\r\n    /**\r\n     * @description: 在范围内限制value数值\r\n     * @param: value 校验的value值\r\n     * @param: min 最小值\r\n     * @param: max 最大值\r\n     * @return: 有效value值\r\n     */\r\n    private static limitValue(value: number, min: number, max: number): number {\r\n        // fossid整改，采用一种不撞车写法，可读性差一点。\r\n        // 小于min取min，大于max取max，其他不变。\r\n        const res: number = value < min ? min :\r\n            value > max ? max : value;\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * @description: 将样式数值转化为calc形式的css样式（设置为百分比形式，确保缩放的支持）\r\n     * @param: percent calc百分比\r\n     * @param: subValue calc减去值\r\n     */\r\n    private static parseToCalcStyle(percent: number, subValue?: number): string {\r\n        if (Number.isNaN(subValue) || Util.isUndefined(subValue)) {\r\n            return `calc(${percent * 100}%)`;\r\n        }\r\n\r\n        return `calc(${percent * 100}% - ${subValue}px)`; // calc中运算符合2边一定要空格\r\n    }\r\n\r\n    constructor(\r\n        private tiRenderer: TiRenderer,\r\n        private iterableDiffers: IterableDiffers,\r\n        protected hostRef: ElementRef,\r\n        protected renderer2: Renderer2,\r\n        private changeDetectorRef: ChangeDetectorRef,\r\n        private domSanitizer: DomSanitizer\r\n    ) {\r\n        super(hostRef, renderer2);\r\n    }\r\n\r\n    @HostListener('window:resize') onResize(): void {\r\n        this.updateValuePosition(this.model);\r\n    }\r\n\r\n    // 组件声明周期钩子--start\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.initDom();\r\n        this.initVars();\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public initDom(): void {\r\n        this.trackELe = this.trackRef.nativeElement;\r\n        this.selectionEle = this.selectionRef.nativeElement;\r\n        this.pointerMinEle = this.pointerMinRef.nativeElement;\r\n        this.pointerMaxEle = this.pointerMaxRef.nativeElement;\r\n        this.tipMinEle = this.tipMinRef.nativeElement;\r\n        this.tipMaxEle = this.tipMaxRef.nativeElement;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public initVars(): void {\r\n        this.step = Number.isNaN(parseFloat(`${this.step}`)) ? 1 : parseFloat(`${this.step}`);\r\n        this.setMinMax();\r\n        // ratios中最大的小数位数\r\n        this.decimalDigit = this.getDecimalDigit();\r\n\r\n        // 处理用戶未设置scales或者scales為function情況\r\n        if (!this.scales || !Array.isArray(this.scales)) {\r\n            this.setScales();\r\n        }\r\n\r\n        this.setTipConfig();\r\n        // 给tip添加事件（tipMode是 'auto'的场景）\r\n        this.addTipEvent();\r\n\r\n        this.dragOptions = {\r\n            axis: 'x',\r\n            start: this.dragStartHandle,\r\n            drag: this.dragHandle,\r\n            stop: this.dragStopHandle\r\n        };\r\n    }\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes['scales'] && !changes['scales'].firstChange && !Array.isArray(this.scales)) {\r\n            this.setScales();\r\n            this.updateValuePosition(this.model);\r\n        }\r\n\r\n        // 监听最大值最小值变化\r\n        if ((changes['min'] && !changes['min'].firstChange) || (changes['max'] && !changes['max'].firstChange)) {\r\n            this.setMinMax();\r\n        }\r\n    }\r\n    ngAfterViewInit(): void {\r\n        this.pointerMaxEleWidth = this.pointerMaxEle.offsetWidth;\r\n        this.isVisibleInit = this.pointerMaxEleWidth !== 0;\r\n        this.changeDetectorRef.detectChanges();\r\n    }\r\n\r\n    ngAfterViewChecked(): void {\r\n        // 监听滑块的宽度：处理组件从隐藏到显示定位问题\r\n        if (!this.isVisibleInit) {\r\n            const pointerMaxWidth: number = this.pointerMaxEle.offsetWidth;\r\n            if (pointerMaxWidth !== 0) {\r\n                this.isVisibleInit = true;\r\n                this.pointerMaxEleWidth = pointerMaxWidth;\r\n                this.updateValuePosition(this.model);\r\n                this.changeDetectorRef.detectChanges();\r\n            }\r\n        }\r\n    }\r\n    ngDoCheck(): void {\r\n        if (!Array.isArray(this.scales)) {\r\n            return;\r\n        }\r\n        if (!this.scalesDiffer) {\r\n            this.scalesDiffer = this.iterableDiffers.find(this.scales)\r\n                                .create();\r\n        }\r\n\r\n        const scalesDiffer: IterableChanges<any> = this.scalesDiffer.diff(this.scales);\r\n        if (scalesDiffer) {\r\n            this.setScales();\r\n            // 初始化的updateValuePosition在writeValue中执行（writeValue迟于docheck执行）\r\n            if (!Util.isUndefined(this.model)) {\r\n                this.updateValuePosition(this.model);\r\n            }\r\n        }\r\n    }\r\n    // 组件声明周期钩子--end\r\n\r\n    // 实现ControlValueAccessor接口\r\n    /**\r\n     * @ignore\r\n     */\r\n    writeValue(value: any): void {\r\n        // TODO: 接口设计重新调整\r\n        // ngModel => value: string | number; // 滑块对应的value值 exp： 单滑块: 15 OR '15' 双滑块 '15;34';\r\n        super.writeValue(value);\r\n        if (!Util.isNull(value) && !Util.isUndefined(value)) {\r\n            // 1.判断是否是双滑块\r\n            this.isDouble = !Util.isUndefined(TiSliderComponent.splitValueToArray(value).valueMax); // 根据value形式确定单滑块/双滑块\r\n            if (Util.isUndefined(this.onModelChange)) {\r\n                // 在reactive-form中使用，初始化赋值调用writeValue时，\r\n                // 此时registerOnChange还未被调用，onChangeFn还未被赋值，\r\n                // 所以要使用promise(异步)等onChangeFn被赋值后再调用\r\n                Promise.resolve(undefined)\r\n                .then(() => {\r\n                    this.writeValueHandle(value);\r\n                });\r\n            } else {\r\n                this.writeValueHandle(value);\r\n            }\r\n        }\r\n    }\r\n    private writeValueHandle(value: any): void {\r\n        if (this.isDouble) {\r\n            this.show(this.pointerMinEle);\r\n        } else {\r\n            this.hide(this.pointerMinEle);\r\n        }\r\n        // 赋值操作 && 更新位置\r\n        this.updateValuePosition(value);\r\n    }\r\n    // 实现ControlValueAccessor接口--end\r\n\r\n    // 组件交互方法集合--start\r\n    /**\r\n     * @ignore\r\n     * Tiny3中不存在下面的问题，用click和mousedown事件都可以（统一使用mousedown事件）\r\n     * 使用mousedown替代click，用于防止拖拽过程中触发click事件导致的滑块滑动\r\n     * 问题场景：min滑块拖动与max滑块重合后，鼠标继续向右移动，此时鼠标抬起，触发click事件，导致max发生移动\r\n     */\r\n    public hostMousedownEvent = (event: MouseEvent): void => {\r\n        // 灰化状态或点击pointer时不做处理\r\n        if (this.disabled || this.tiRenderer.hasClass(event.target, 'ti3-slider-pointer')\r\n            || this.tiRenderer.hasClass(event.target, 'ti3-slider-tip')) {\r\n            return;\r\n        }\r\n        this.stepSliderFromClick(event);\r\n    }\r\n\r\n    /**\r\n     * @description: 添加tip的事件监听\r\n     */\r\n    private addTipEvent(): void {\r\n        if (this.isTipAutoShow) {\r\n            this.renderer2.listen(this.pointerMaxEle, 'mouseover', this.tipMouseoverHandle);\r\n            this.renderer2.listen(this.pointerMinEle, 'mouseover', this.tipMouseoverHandle);\r\n            this.renderer2.listen(this.pointerMaxEle, 'mouseleave', this.tipMouseleaveHandle);\r\n            this.renderer2.listen(this.pointerMinEle, 'mouseleave', this.tipMouseleaveHandle);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 滑块元素的mouseover事件处理函数\r\n     */\r\n    private tipMouseoverHandle = (event: any): void => {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        this.show(event.target.querySelector('.ti3-slider-tip'));\r\n    }\r\n\r\n    /**\r\n     * @description: 滑块元素的mouseleave事件处理函数\r\n     */\r\n    private tipMouseleaveHandle = (event: any): void => {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        this.hide(event.target.querySelector('.ti3-slider-tip'));\r\n    }\r\n\r\n    /**\r\n     * @description: 宿主元素的mousedown事件处理函数\r\n     */\r\n    private stepSliderFromClick = (event: MouseEvent): void => {\r\n        const firstTickX: number = this.trackELe.getBoundingClientRect().left + this.pointerMaxEleWidth / 2;\r\n        const oldModel: any = this.model;\r\n        let pointerX: number = event.clientX - firstTickX;\r\n        pointerX = TiSliderComponent.limitValue(pointerX, 0, this.getBarWidth());\r\n        let value: number = this.positionToValue(pointerX); // 获取value绝对比例值，用于确定滑块移动位置\r\n        // 确定滑动哪个滑块\r\n        let pointer: any = this.pointerMaxEle;\r\n        if (this.isDouble) {\r\n            const valueMin: number = TiSliderComponent.splitValueToArray(this.model).valueMin;\r\n            const valueMax: number = TiSliderComponent.splitValueToArray(this.model).valueMax;\r\n            // 以value中间值为界，在最小值及中间值之间=》左滑块移动；否则=》右滑块移动\r\n            const midValue: number = (valueMax + valueMin) / 2;\r\n            if ((value >= this.min) && (value < midValue)) {\r\n                pointer = this.pointerMinEle;\r\n                this.isMinPointerActive = true;\r\n            } else {\r\n                this.isMinPointerActive = false;\r\n            }\r\n        }\r\n        value = this.getStepValue(value);\r\n        this.setValue(value); // 向外部通知value值\r\n        this.valueToPosition(value, pointer); // 跳至value对应的坐标位置（与step对应）\r\n        if (this.model !== oldModel) {\r\n            this.changeStop.emit(this.model);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description 拖拽开始执行的事件\r\n     * @param: ui 拖拽助手 {helper：表示被拖拽的助手（helper）, position: 助手（helper）的当前 CSS 位置}\r\n     */\r\n    private dragStartHandle = (ui: TiDragConfig): void => {\r\n        this.dragStartModel = this.model;\r\n        if (this.isDouble) {\r\n            this.isMinPointerActive = !this.tiRenderer.hasClass(ui.helper, 'ti3-slider-pointer-max');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description 根据拖拽位置更新value值并改变位置呈现\r\n     * @param: ui 拖拽助手 {helper：表示被拖拽的助手（helper）, position: 助手（helper）的当前 CSS 位置}\r\n     */\r\n    private dragHandle = (ui: TiDragConfig): void => {\r\n        // 设置value值\r\n        const value: number = this.dragCommonHandle(ui);\r\n        this.setValue(value); // 向外部通知value值\r\n        // 设置tip提示\r\n        if (this.isTipAutoShow) { // 拖拽过程中显示tip提示\r\n            this.show(ui.helper.querySelector('.ti3-slider-tip'));\r\n        }\r\n        this.setTip(ui.helper.querySelector('.ti3-slider-tip'), value); // 设置tip提示值及位置\r\n    }\r\n\r\n    /**\r\n     * @description: 鼠标弹起之后：根据拖拽位置跳至step对应的值并设置slider\r\n     * @param: ui 拖拽助手 {helper：表示被拖拽的助手（helper）, position: 助手（helper）的当前 CSS 位置}\r\n     */\r\n    private dragStopHandle = (ui: TiDragConfig): void => {\r\n        // 设置value值\r\n        const value: number = this.dragCommonHandle(ui);\r\n\r\n        if (this.isTipAutoShow) { // 拖拽停止隐藏tip提示\r\n            this.hide(ui.helper.querySelector('.ti3-slider-tip'));\r\n        }\r\n        this.valueToPosition(value, ui.helper); // 跳至value对应的坐标位置\r\n        if (this.model !== this.dragStartModel) {\r\n            this.changeStop.emit(this.model);\r\n        }\r\n    }\r\n\r\n    // 组件交互方法集合--end\r\n\r\n    // 内部公共方法集合--start\r\n    /**\r\n     * @description: 拖拽公共处理\r\n     * @param: ui 拖拽助手 {helper：表示被拖拽的助手（helper）, position: 助手（helper）的当前 CSS 位置}\r\n     */\r\n    private dragCommonHandle(ui: TiDragConfig): number {\r\n        const pointerX: number = this.limitDragPosition(ui); // 限制指针在合理的位置范围内\r\n        const value: number = this.positionToStepValue(pointerX); // 获取当前位置对应的value值\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @description: 限制滑块移动位置并设置对应的选择区域宽度\r\n     * @param: pointerX 鼠标点击位置（x方向）\r\n     */\r\n    private limitDragPosition(ui: TiDragConfig): number {\r\n        let pointerX: number = ui.position.left; // 当前滑块中心距离tick第一个坐标位置\r\n        const barWidth: number = this.getBarWidth();\r\n        let pointerWidthHalf: number = this.pointerMaxEleWidth / 2;\r\n        let pointerMinLeft: number;\r\n        let pointerMaxLeft: number;\r\n        if (this.isDouble) {\r\n            if (!this.isMinPointerActive) { // max对应滑块情况的处理\r\n                pointerMinLeft = parseFloat(getComputedStyle(this.pointerMinEle).left);\r\n                pointerX = TiSliderComponent.limitValue(pointerX, pointerMinLeft, barWidth); // 限制滑块在最小和右边界之间\r\n                pointerMaxLeft = pointerX;\r\n            } else {\r\n                pointerMaxLeft = parseFloat(getComputedStyle(this.pointerMaxEle).left);\r\n                pointerX = TiSliderComponent.limitValue(pointerX, 0, pointerMaxLeft); // 限制滑块在左边界和最大之间\r\n                pointerMinLeft = pointerX;\r\n            }\r\n            const styles: {width: string; left: string} = {\r\n                width: `${pointerMaxLeft - pointerMinLeft}px`,\r\n                left: `${pointerMinLeft + pointerWidthHalf}px`\r\n            };\r\n            this.tiRenderer.setStyles(this.selectionEle, styles);\r\n        } else {\r\n            pointerX = TiSliderComponent.limitValue(pointerX, 0, barWidth);\r\n            this.renderer2.setStyle(this.selectionEle, 'width', `${pointerX + pointerWidthHalf}px`);\r\n        }\r\n\r\n        ui.position.left = pointerX; // 限制滑块的位置显示\r\n\r\n        return pointerX;\r\n    }\r\n\r\n    /**\r\n     * @description: 根据滑块位置获取value值(和step对应) (拖拽公共函数中用)\r\n     * @param: pointerX 鼠标点击位置（x方向）\r\n     */\r\n    private positionToStepValue(pointerX: number): number {\r\n        const value: number = this.positionToValue(pointerX); // 获取指针对应的value绝对比例值(和step无关)\r\n\r\n        return this.getStepValue(value); // 转化value为与step对应的值;\r\n    }\r\n\r\n    /**\r\n     * @description: 获取位置对应的value值\r\n     * @param: pointerX 鼠标点击位置（x方向）\r\n     */\r\n    private positionToValue(pointerX: number): number {\r\n        const barWidth: number = this.getBarWidth();\r\n        const percent: number = pointerX / barWidth;\r\n        if (!Util.isUndefined(this.ratios)) {\r\n            return this.unequalPositionToValue(pointerX, barWidth, percent);\r\n        }\r\n\r\n        return this.min + percent * (this.max - this.min);\r\n    }\r\n\r\n    /**\r\n     * @description: 设置组件的model值，用于向外通知\r\n     * @param: value 当前指针的值\r\n     */\r\n    private setValue(value: number): void {\r\n        if (this.isDouble) {\r\n            const valueMin: number = TiSliderComponent.splitValueToArray(this.model).valueMin;\r\n            const valueMax: number = TiSliderComponent.splitValueToArray(this.model).valueMax;\r\n            if (!this.isMinPointerActive && value !== valueMax) {\r\n                this.model = `${valueMin};${value}`;\r\n            } else if (this.isMinPointerActive && value !== valueMin) {\r\n                this.model = `${value};${valueMax}`;\r\n            }\r\n        } else {\r\n            if (value !== this.model) {\r\n                this.model = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 获取对应的step值(根据step修正value值)\r\n     * @param: value 当前点击的绝对值\r\n     */\r\n    private getStepValue(value: number): number {\r\n        const min: number = this.min;\r\n        const step: number = this.step;\r\n        let stepValue: number;\r\n        const stepN: number = Math.round((value - min) / step); // value值变化几个步长\r\n        if (step.toString()\r\n                .indexOf('.') !== -1) {\r\n            const n: number = step.toString()\r\n                          .split('.').length;\r\n            stepValue = parseFloat((min + stepN * step).toFixed(n));\r\n        } else {\r\n            stepValue = min + stepN * step;\r\n        }\r\n\r\n        return TiSliderComponent.limitValue(stepValue, min, this.max);\r\n    }\r\n\r\n    /**\r\n     * @description: 在不等分条件下获取位置对应的value值\r\n     * @param: pointerX 鼠标点击位置（x方向）\r\n     * @param: barWidth 指针宽度\r\n     * @param: percent pointerX占滑动轴百分比\r\n     */\r\n    private unequalPositionToValue(pointerX: number, barWidth: number, percent: number): number {\r\n        let limitWidth: number = 0; // 每一段的宽度\r\n        let selectLength: number = 0; // 已被选中区域段的宽度\r\n        let ratiosWidth: number = 0; // 已被选中区域段长度和占总长的比例\r\n        const c: number = this.decimalDigit;\r\n        const ticksLen: number = this.ticksArr.length;\r\n        for (let i: number = 0; i < ticksLen - 1; i++) {\r\n            limitWidth = barWidth * this.ratios[i];\r\n            if (i === 0) {\r\n                selectLength = 0;\r\n                ratiosWidth = 0;\r\n            } else {\r\n                ratiosWidth = Number((ratiosWidth + this.ratios[i - 1]).toFixed(c));\r\n                selectLength = barWidth * ratiosWidth;\r\n            }\r\n            const pointerWidth: number = pointerX - selectLength;\r\n            if (percent <= Number((ratiosWidth + this.ratios[i]).toFixed(c))\r\n                && percent >= ratiosWidth) {\r\n                return this.ticksArr[i] + (pointerWidth / limitWidth) * (this.ticksArr[i + 1] - this.ticksArr[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 当前组件写入新值 || min || max || scales发生变化 时更新value对应的位置\r\n     * @param: newValue 需要处理的value的值\r\n     */\r\n    private updateValuePosition(newValue: string): void {\r\n        let valueTmp: string;\r\n        if (this.isDouble) {\r\n            valueTmp = this.restrictDoubleValue(newValue);\r\n            const valueMax: number = TiSliderComponent.splitValueToArray(valueTmp).valueMax;\r\n            const valueMin: number = TiSliderComponent.splitValueToArray(valueTmp).valueMin;\r\n            // 当设置value均为最大值情况下，设置最小滑块层级，确保滑块可被拖动\r\n            // 最小值的情况左右滑块zIndex相等，但是右滑块DOM在左滑块之后，因此根据zIndex规则，右滑块可以覆盖左滑块\r\n            if ((valueMin === valueMax) && (valueMin === this.max)) {\r\n                this.isMinPointerActive = true;\r\n            }\r\n            // 设置滑块的位置\r\n            this.valueToPosition(valueMin, this.pointerMinEle);\r\n            this.valueToPosition(valueMax, this.pointerMaxEle);\r\n        } else {\r\n            valueTmp = this.restrictSingleValue(newValue);\r\n            this.valueToPosition(valueTmp, this.pointerMaxEle);\r\n        }\r\n\r\n        if (newValue !== valueTmp) {\r\n            this.model = valueTmp;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 限定双滑块value的值\r\n     * @param: value 需要处理的value的值\r\n     */\r\n    private restrictDoubleValue(value: string): string {\r\n        const valueMin: number = TiSliderComponent.splitValueToArray(value).valueMin; // 双滑块的小值\r\n        const valueMax: number = TiSliderComponent.splitValueToArray(value).valueMax; // 双滑块的大值\r\n        // 非法情况：非数字，超过限制，value大小顺序不正确情况\r\n        const isInvalidValueMin: boolean = isNaN(valueMin) ||\r\n            TiSliderComponent.isLimitExceed(valueMin, this.min, this.max) || valueMin > valueMax;\r\n        // 非法情况：非数字，超过限制，value大小顺序不正确情况\r\n        const isInvalidValueMax: boolean = isNaN(valueMax) ||\r\n            TiSliderComponent.isLimitExceed(valueMax, this.min, this.max) || valueMin > valueMax;\r\n\r\n        return `${isInvalidValueMin ? this.min : valueMin};${isInvalidValueMax ? this.max : valueMax}`;\r\n    }\r\n\r\n    /**\r\n     * @description: 限定单滑块value的值\r\n     * @param: value 需要处理的value的值\r\n     */\r\n    private restrictSingleValue(value: any): any {\r\n        if (isNaN(parseFloat(value)) || value < this.min) {\r\n            // value不是数字或者小于最小值point定位到最小值\r\n            return this.min;\r\n        }\r\n        if (value > this.max) {\r\n            // value大于最大值point定位到最大值\r\n            return this.max;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @description: 处理tip\r\n     */\r\n    private setTipConfig(): void {\r\n        const defaultTipShow: 'auto' | 'always' = 'auto';\r\n        const defaultTipFormatter: (value: any) => string = (value: any): any => {\r\n            return value;\r\n        };\r\n\r\n        this.tipMode = Util.isUndefined(this.tipMode) ? defaultTipShow : this.tipMode;\r\n        this.tipFormatterFn = Util.isUndefined(this.tipFormatterFn) ? defaultTipFormatter : this.tipFormatterFn;\r\n        this.isTipAutoShow = (this.tipMode !== 'always');\r\n        if (this.isTipAutoShow) {\r\n            this.hide(this.tipMaxEle);\r\n            this.hide(this.tipMinEle);\r\n        } else {\r\n            this.show(this.tipMaxEle);\r\n            this.show(this.tipMinEle);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 处理限制\r\n     */\r\n    private setMinMax(): void {\r\n        const defaultMin: number = 0;\r\n        const defaultMax: number = 10;\r\n        const min: number = parseFloat(`${this.min}`);\r\n        const max: number = parseFloat(`${this.max}`);\r\n        this.min = (isNaN(min) || min >= max) ? defaultMin : min;\r\n        this.max = (isNaN(max) || min >= max) ? defaultMax : max;\r\n    }\r\n\r\n    /**\r\n     * @description: 处理刻度\r\n     */\r\n    private setScales(): void {\r\n        const step: number = this.step;\r\n        const min: number = this.min;\r\n        const max: number = this.max;\r\n        let ticks: Array<any> = [];\r\n        if (typeof this.scales === 'function') {\r\n            this.ticks = TiSliderComponent.translateScales(this.scales, min, max, step);\r\n        } else if (Array.isArray(this.scales)) {\r\n            // 为Array情况下，直接使用数值\r\n            this.ticks = this.scales.concat();\r\n        } else {\r\n            // 未传scale(包含非法)的情况下，只显示最小和最大值\r\n            const ticksLen: number = (max - min) / step;\r\n            ticks.push(min);\r\n            for (let i: number = 0; i < ticksLen - 1; i++) {\r\n                // 除最小最大值外，其余只打点不显示label\r\n                ticks.push('');\r\n            }\r\n            ticks.push(max);\r\n            this.ticks = ticks;\r\n        }\r\n        if (!Util.isUndefined(this.ratios)) {\r\n            let ratiosSum: number = 0; // 将ratios中每一项与之前的求和\r\n            const sumArray: Array<number> = []; //  由ratiosSum组成的数组\r\n            const ratiosLen: number = this.ratios.length;\r\n            for (let i: number = 0; i < ratiosLen; i++) {\r\n                ratiosSum = Number((ratiosSum + Number(this.ratios[i])).toFixed(this.decimalDigit));\r\n                sumArray.push(ratiosSum);\r\n            }\r\n            ticks = this.getTicks(sumArray, this.decimalDigit);\r\n            this.ticks = ticks;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: 非均匀情况下确定打点的位置\r\n     * @param: arr 由ratiosSum组成的数组\r\n     * @param: num ratios中最大的小数位数\r\n     */\r\n    private getTicks(arr: Array<number>, num: number): Array<any> {\r\n        const minScale: number = Number(Math.pow(0.1, num)\r\n                                    .toFixed(num)); //  判断是否打点的基数\r\n        let k: number = 1;\r\n        let p: number = 0;\r\n        const ticks: Array<number> = [this.ticks[0]];\r\n        const length: number = parseInt(`${1 / minScale}`, 10);\r\n        for (let i: number = 0; i < length; i++) {\r\n            p = Number((p + minScale).toFixed(num));\r\n            if (arr.indexOf(p) === -1) {\r\n                // 判断每次相加基数后是否在数组中，不在不打点不显示label\r\n                // tslint:disable-next-line:no-null-keyword\r\n                ticks.push(null);\r\n            } else {\r\n                // 否则打点显示label\r\n                ticks.push(this.ticks[k]);\r\n                k++;\r\n            }\r\n        }\r\n\r\n        return ticks;\r\n    }\r\n\r\n    /**\r\n     * @description: 显示隐藏的元素\r\n     * @param: ele: 要显示的DOM对象\r\n     */\r\n    private show(ele: any): void {\r\n         // 注：此处未使用ng-show方式控制滑块显示是因为有延迟，造成后续方法获取pointer宽度为0，显示错乱\r\n        this.renderer2.setStyle(ele, 'display', 'block');\r\n    }\r\n\r\n    /**\r\n     * @description: 隐藏显示的元素\r\n     * @param: ele: 要隐藏的DOM对象\r\n     */\r\n    private hide(ele: any): void {\r\n         // 注：此处未使用ng-show方式控制滑块显示是因为有延迟，造成后续方法获取pointer宽度为0，显示错乱\r\n        this.renderer2.setStyle(ele, 'display', 'none');\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @description: 获取ticks的最大显示宽度，一行显示不下情况下，换行显示\r\n     * @param: index 刻度下标\r\n     */\r\n    public calcTickMaxWidth(index: number): string {\r\n        const ticksLen: number = this.ticks.length;\r\n        const spacePercent: number = 1 / (ticksLen - 1); // 两个刻度点间隔宽度百分百（小数）\r\n        if (index === 0 || index === (ticksLen - 1)) {\r\n            // 第一个和最后一个刻度\r\n            return TiSliderComponent.parseToCalcStyle(spacePercent, this.pointerMaxEleWidth / 2);\r\n        }\r\n\r\n        return TiSliderComponent.parseToCalcStyle(spacePercent);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @description: 获取 ticks 的left位置\r\n     * @param: index 刻度下标\r\n     */\r\n    public calcTickLeftPosition(index: number): string {\r\n        return `${index / (this.ticks.length - 1) * 100}%`;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @description: 确定滑动轴打点是否为选中点，根据函数返回值设置选中样式 (是否是selection区域的点)\r\n     * @param: index 刻度下标\r\n     */\r\n    public isSelectTick(index: number): boolean {\r\n        const ticksLen: number = this.ticks.length;\r\n        // 双滑块情况下,位于最大最小值之间为选中状态\r\n        if (this.isDouble) {\r\n            const value: Array<string> = this.model.split(';');\r\n            const isLargeThanValMin: boolean = index / ticksLen >= (parseFloat(value[0]) - this.min) / (this.max - this.min);\r\n            const isSmallThanValMax: boolean = index / ticksLen <= (parseFloat(value[1]) - this.min) / (this.max - this.min);\r\n\r\n            return isLargeThanValMin && isSmallThanValMax;\r\n        }\r\n\r\n        // 单滑块情况下,小于选中值为选中状态\r\n        return index / ticksLen <= (parseFloat(this.model) - this.min);\r\n    }\r\n\r\n    /**\r\n     * @description:  获取滑动轴的宽度(涉及到屏幕缩放，所以需要实时获取)\r\n     */\r\n    private getBarWidth(): number {\r\n        return this.trackELe.getBoundingClientRect().width - this.pointerMaxEleWidth;\r\n    }\r\n\r\n    /**\r\n     * @description: 获取ratios中最大的小数位数\r\n     */\r\n    private getDecimalDigit(): number {\r\n        const decimalArr: Array<number> = [];\r\n        if (Array.isArray(this.ratios)) {\r\n            this.ratios.forEach((item: number) => {\r\n                const decimal: string = item.toString()\r\n                .split('.')[1];\r\n                if (decimal) {\r\n                    decimalArr.push(decimal.length);\r\n                }\r\n            });\r\n        }\r\n\r\n        return Math.max.apply(null, decimalArr);\r\n    }\r\n\r\n    /**\r\n     * @description: 获取当前value所在的区域以及当前value对应的长度占总长的百分比(小数)\r\n     * @param: value 指针对应的value值\r\n     * @param: paragraph 当前打点的段数\r\n     */\r\n    private getValuePercent(value: number, paragraph: number): number {\r\n        let ratiosSum: number = 0; // 当前打点的段数下ratios的总和\r\n        for (let i: number = 0; i < paragraph; i++) {\r\n            ratiosSum = Number((ratiosSum + this.ratios[i]).toFixed(this.decimalDigit));\r\n        }\r\n\r\n        return ratiosSum + (value - this.ticksArr[paragraph]) / (this.ticksArr[paragraph + 1]\r\n            - this.ticksArr[paragraph]) * this.ratios[paragraph];\r\n    }\r\n\r\n    /**\r\n     * @description: 设置pointerDOM位置\r\n     * @param: value 指针对应的value值\r\n     * @param: pointer 被设置的DOM对象\r\n     */\r\n    private setPointerPos(value: number, pointer: any): void {\r\n        let valuePercent: number;\r\n        if (!Util.isUndefined(this.ratios)) {\r\n            if (Util.isUndefined(this.ticks)) {\r\n                return;\r\n            }\r\n            this.ticksArr = [];\r\n            this.ticks.forEach((tick: string) => {\r\n                if (!Util.isNull(tick)) {\r\n                    this.ticksArr.push(tick);\r\n                }\r\n            });\r\n            const ticksArrLen: number = this.ticksArr.length;\r\n            for (let i: number = 0; i < ticksArrLen - 1; i++) {\r\n                if (value >= this.ticksArr[i] && value <= this.ticksArr[i + 1]) {\r\n                    valuePercent = this.getValuePercent(value, i);\r\n                }\r\n            }\r\n        } else {\r\n            valuePercent = (value - this.min) / (this.max - this.min);\r\n        }\r\n        // 计算value对应的百分比位置,并以tick中心点居中显示\r\n        const pointerLeft: string = TiSliderComponent.parseToCalcStyle(valuePercent);\r\n        this.renderer2.setStyle(pointer, 'left', pointerLeft);\r\n    }\r\n\r\n    /**\r\n     * @description: 改变某一指针value值对应的指示位置\r\n     * @param: value 指针对应的value值\r\n     * @param: pointer 被设置的DOM对象\r\n     */\r\n    private valueToPosition(value: any, pointer: any): void {\r\n        this.setPointerPos(value, pointer); // 设置pointer位置\r\n        let styles: object; // 滑动轴有效区域背景 样式对象\r\n        // 修复SSR报错：ERROR { Error: Uncaught (in promise): TypeError: this.pointerMaxEle.getBoundingClientRect is not a function\r\n        if(typeof this.pointerMaxEle.getBoundingClientRect !=='function'){\r\n            return;\r\n        }\r\n        // 设置滑动轴有效区域背景\r\n        const pointerMaxLeft: number = this.pointerMaxEle.getBoundingClientRect().left;\r\n        const pointerMinLeft: number = this.pointerMinEle.getBoundingClientRect().left;\r\n        const barWidth: number = this.getBarWidth();\r\n        const barLeft: number =this.trackELe.getBoundingClientRect().left;\r\n        const pointerWidthHalf: number = this.pointerMaxEleWidth / 2;\r\n        if (this.isDouble) {\r\n            styles = {\r\n                width: `${(pointerMaxLeft - pointerMinLeft) * 100 / barWidth}%`,\r\n                left:  `${((pointerMinLeft - barLeft + pointerWidthHalf) * 100 / barWidth)}%`\r\n            };\r\n        } else {\r\n            styles = {\r\n                width: `${((pointerMaxLeft - barLeft + pointerWidthHalf) * 100 / barWidth)}%`,\r\n                left: 0\r\n            };\r\n        }\r\n        this.tiRenderer.setStyles(this.selectionEle, styles);\r\n        this.setTip(pointer.querySelector('.ti3-slider-tip'), value);\r\n    }\r\n\r\n    /**\r\n     * @description:设置Tip提示内容及位置\r\n     * @param: curTipEle 要设置tip的元素\r\n     * @param: value 设置tip内容对应的value值\r\n     */\r\n    private setTip(curTipEle: any, value: number): void {\r\n        // 设置tip内容\r\n        const tipContent: string = this.tipFormatterFn(value);\r\n        curTipEle.innerHTML = this.domSanitizer.sanitize(SecurityContext.HTML, tipContent);\r\n\r\n        // 设置当前tip位置\r\n        const tipDisplay: string = getComputedStyle(curTipEle).display;\r\n        this.show(curTipEle); // 先把tip显示出来 才能获取宽度\r\n        const tipContentWidth: number = curTipEle.getBoundingClientRect().width;\r\n        const styles: { left: string, display: string } = {\r\n            left: `${-(tipContentWidth - this.pointerMaxEleWidth) / 2 - 1}px`, // 定位受border的影响，需要减去border的宽度 1px\r\n            display: tipDisplay // 设置回原来的display\r\n        };\r\n        this.tiRenderer.setStyles(curTipEle, styles);\r\n        // tip重合情况处理  (双滑块并且tip是一直显示出来那种场景)\r\n        if (this.isDouble && !this.isTipAutoShow) {\r\n            /**\r\n             * @description: 渲染当前的tip样式 （移除一个class并且添加一个class）\r\n             * @param: tipEle 当前tipDOM\r\n             * @param: removeClass 要移除的class名字\r\n             * @param: addClass 要添加的class名字\r\n             */\r\n            const renderTipStyle: (tipEle: any, removeClass: string, addClass: string) => void =\r\n                (tipEle: any, removeClass: string, addClass: string): void => {\r\n                this.renderer2.removeClass(tipEle, removeClass);\r\n                this.renderer2.addClass(tipEle, addClass);\r\n            };\r\n            // 重置tip样式，防止之前样式设置造成的影响  ti3-slider-tip-top\r\n            renderTipStyle(this.tipMaxEle, 'ti3-slider-tip-bottom', 'ti3-slider-tip-top');\r\n            renderTipStyle(this.tipMinEle, 'ti3-slider-tip-bottom', 'ti3-slider-tip-top');\r\n            this.show(this.tipMaxEle);\r\n            this.show(this.tipMinEle);\r\n\r\n            // 最大最小值重合情况下，只显示当前tip\r\n            const selectionWidth: number = this.selectionEle.getBoundingClientRect().width;\r\n            if (selectionWidth === 0) {\r\n                if (this.tiRenderer.hasClass(curTipEle, 'ti3-slider-tip-max')) {\r\n                    // 当前tip是最大值的 隐藏最小值tip\r\n                    this.hide(this.tipMinEle);\r\n                } else {\r\n                    // 当前tip是最小值的 隐藏最大值tip\r\n                    this.hide(this.tipMaxEle);\r\n                }\r\n\r\n                return;\r\n            }\r\n            // tip重合情况下，当前tip向下显示\r\n            const tipMaxWidth: number = this.tipMaxEle.getBoundingClientRect().width;\r\n            const tipMinWidth: number = this.tipMinEle.getBoundingClientRect().width;\r\n            if ((tipMaxWidth + tipMinWidth) / 2 >= selectionWidth) {\r\n                renderTipStyle(curTipEle, 'ti3-slider-tip-top', 'ti3-slider-tip-bottom');\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiDraggableModule } from '../../directives/drag/TiDraggableModule';\r\nimport { TiSliderComponent } from './TiSliderComponent';\r\nimport { TiRendererModule } from '../../services/renderer/TiRendererModule';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        TiDraggableModule,\r\n        TiIconModule,\r\n        TiRendererModule\r\n    ],\r\n    exports: [TiSliderComponent],\r\n    declarations: [TiSliderComponent]\r\n})\r\n\r\nexport class TiSliderModule {\r\n}\r\nexport { TiSliderComponent } from './TiSliderComponent';\r\n","import { DefaultValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Directive, ElementRef, forwardRef, Input, Renderer2, Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\nimport { TiLocaleFormat } from '../../locale/TiLocaleModule';\r\nimport { Util } from '../../utils/Util';\r\n/**\r\n * TiNumber 数字输入框指令\r\n *\r\n * 该指令主要作用于输入框上，限制只能输入数字。用户可以通过设置 数字保留精度、是否国际化 来设置数字显示格式\r\n *\r\n * 输入框处于焦点状态时，输入框中数字标准化显示。失去焦点时，根据用户配置是否支持国际化进行格式化显示\r\n *\r\n * 目前JS可以解析的范围是[-2^53, 2^53]，即16位数字。当超过16位整数时，此时数字范围已经超过JS解析方位，不能精确表示。\r\n *\r\n * <example-url>../tiny3demo/#/inputnumber/inputnumber-all</example-url>\r\n */\r\n@Directive ({\r\n    // 指令元数据\r\n    selector: '[tiNumber]',\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            // tslint:disable-next-line:no-forward-ref\r\n            useExisting: forwardRef(() => TiInputNumberDirective),\r\n            multi: true\r\n        }\r\n    ],\r\n    host: {\r\n        '(input)': 'handleInput($event.target.value)',\r\n        '(focus)': 'focusFn();',\r\n        '(blur)': 'blurFn()'\r\n    }\r\n})\r\n// The default ControlValueAccessor for writing a value and listening to changes on input elements.\r\n// The accessor is used by the FormControlDirective, FormControlName, and NgModel directives.\r\nexport class TiInputNumberDirective extends DefaultValueAccessor {\r\n    /**\r\n     * 设置数据是否支持国际化显示，默认支持国际化\r\n     */\r\n    @Input() localeable: boolean = true;\r\n    /**\r\n     * 设置数字精度。使用n+'小数保留位数'形式表示，例如：'n4',代表保留4位小数。\r\n     *\r\n     * 不设置时，自10.0.1版本起小数点后默认最少保留0位，最多保留3位；10.0.0及之前版本默认保留3位。\r\n     */\r\n    @Input() format: string;\r\n    private numberFormat: string = '1.0-3';\r\n    private oldInputValue: string = ''; // 没有千位分隔符的input中的值\r\n    private onChangeFn: (_: any) => void;\r\n    private element: HTMLInputElement;\r\n    private oldModel: number;\r\n    constructor(private renderer: Renderer2, private elementRef: ElementRef, @Inject(DOCUMENT) private document) {\r\n        super(renderer, elementRef, true);\r\n        this.element = this.elementRef.nativeElement;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (!TiLocaleFormat.isInvalidFormat(this.format)) {\r\n            const precision: number = parseInt(this.format.slice(1), 10);\r\n            // tslint:disable-next-line:prefer-template\r\n            this.numberFormat = '1.' + precision + '-' + precision;\r\n        }\r\n    }\r\n\r\n    // 检测当前值是否合法 如果合法 返回true；否则返回false.\r\n    private isValidInput(value: string): boolean {\r\n        const decimalSep: string = this.localeable ? TiLocaleFormat.getNumberSymbol('Decimal') : '.'; // 当前局点小数点的形式\r\n        let regex: any; // regex是正则表达式，不明其类型，所以\r\n        if (decimalSep === ',') {\r\n            regex = /^\\-{0,1}\\d{0,},{0,1}\\d{0,}$/;\r\n        } else if (decimalSep === '.') {\r\n            regex = /^\\-{0,1}\\d{0,}\\.{0,1}\\d{0,}$/;\r\n        }\r\n\r\n        return regex.test(value);\r\n    }\r\n    /**\r\n     * 功能描述：当该值合法，直接返回. 如果不合法，则返回之前保存的有效值。\r\n     * @memberOf TiInputNumberDirective\r\n     */\r\n    private getCorrectValue(value: string): string {\r\n        if (!this.isValidInput(value)) {\r\n            return this.oldInputValue;\r\n        }\r\n\r\n        return value;\r\n    }\r\n    // 根据精度和是否支持国际化，格式化数字\r\n    private  formatValue(value: number): string {\r\n        if (Number.isNaN(value)) {\r\n            return;\r\n        }\r\n        // https://angular.cn/api/common/DecimalPipe\r\n        // digitsInfo: {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\r\n        // minIntegerDigits: 小数点前最小位数 默认为1\r\n        // minFractionDigits: 小数点后最小位数 默认0\r\n        // maxFractionDigits: 小数点后最大位数 默认3\r\n        // tslint:disable-next-line:prefer-template\r\n        const localeValue: string = TiLocaleFormat.formatNumber(value, this.numberFormat);\r\n        if (this.localeable) {\r\n            return this.document.activeElement === this.element ? TiLocaleFormat.deleteGroupSep(localeValue) : localeValue;\r\n        } else { // 不支持国际化时，也可利用TiLocaleFormat.formatNumber精度处理能力\r\n            return TiLocaleFormat.parseNumber(localeValue).toString();\r\n        }\r\n    }\r\n    // 将国际化数字转换为标准化数字\r\n    private parseValue(value: string): number {\r\n        return this.localeable ? TiLocaleFormat.parseNumber(value) : parseFloat(value);\r\n    }\r\n    // 将国际化数字的千位分隔符去掉(输入框聚焦状态需要)\r\n    private deleteGroupSepValue(formatValue: string): string {\r\n        return this.localeable ? TiLocaleFormat.deleteGroupSep(formatValue) : formatValue;\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 实现继承来自父类的方法\r\n     * Sets the \"value\" property on the input element.\r\n     * model->view\r\n     */\r\n     writeValue(value: any): void {\r\n        // writeValue()方法会执行两遍。第一遍为null, 第二遍为用户配置的数据。\r\n        if (value === null) {\r\n            return;\r\n        }\r\n\r\n        // 由于10.0.0及之前版本中开发者只能给ngModel传入空字符串时才能清空值，但是该组件ngModel应该是传入number类型，所以要清空时应该设置undefined。\r\n        // 10.0.1版本开始进行纠正，为了兼容旧版本，设置空字符串时也能清空。\r\n        if (value === undefined || value === '') {\r\n            super.writeValue('');\r\n            this.oldInputValue = '';\r\n            this.oldModel = undefined;\r\n            return;\r\n        }\r\n\r\n        let normalValue: number;\r\n        if (Number.isNaN(parseFloat(value))) {\r\n            if (this.oldModel === undefined) {\r\n                super.writeValue('');\r\n                this.oldInputValue = '';\r\n            } else {\r\n                const formatValue: string = this.formatValue(this.oldModel);\r\n                super.writeValue(formatValue);\r\n                this.oldInputValue = this.deleteGroupSepValue(formatValue);\r\n            }\r\n            normalValue = this.oldModel;\r\n        } else {\r\n            const formatValue: string = this.formatValue(value);\r\n            super.writeValue(formatValue);\r\n            this.oldInputValue = this.deleteGroupSepValue(formatValue);\r\n            normalValue = this.parseValue(formatValue);\r\n        }\r\n\r\n        if (normalValue !== value) {\r\n            if (Util.isUndefined(this.onChangeFn)) {\r\n                // 在reactive-form中使用，初始化赋值调用writeValue时，\r\n                // 此时registerOnChange还未被调用，onChangeFn还未被赋值，\r\n                // 所以要使用setTimeout等onChangeFn被赋值后再调用\r\n                setTimeout(() => {\r\n                    this.changeModel(normalValue);\r\n                }, 0);\r\n            } else {\r\n                this.changeModel(normalValue);\r\n            }\r\n        } else {\r\n            this.oldModel = normalValue;\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * Registers a function called when the control value changes\r\n     * @param fn The callback function\r\n     * 注册当控件接收到change事件之后，调用的函数fn\r\n     * viewValue和model value值的同步\r\n     */\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this.onChangeFn = fn;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * view -> model\r\n     * 非法字符不能输入。如果是合法则更新，如果是非法，则设置为oldInputValue...\r\n     */\r\n    public handleInput(value: string): void {\r\n        // IE9 cut delete backspace下支持这三种方式引起的改变。\r\n        // text组件针对这三种方式做了兼容性处理，并且触发input事件\r\n        // 所以 inputnumber无需再做兼容性处理\r\n        this.parser(value);\r\n    }\r\n\r\n    private parser(value: string): void {\r\n        const validationValue: string = this.getCorrectValue(value);\r\n        if (!this.isValidInput(value)) {\r\n            let cursorPos: number = this.element.selectionStart;\r\n            const diff: number = value.length - validationValue.length;\r\n            cursorPos = cursorPos - diff;\r\n            this.renderer.setProperty(this.element, 'value', this.oldInputValue); // Sets the \"value\" property on the input element.\r\n            this.element.setSelectionRange(cursorPos, cursorPos);\r\n        } else {\r\n            this.oldInputValue = validationValue;\r\n            const parseValue: number = this.parseValue(validationValue);\r\n            this.changeModel(Number.isNaN(parseValue) ? undefined :parseValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 得到焦点数据标准化处理\r\n     * @memberOf TiInputNumberDirective\r\n     * renderer.setProperty: Implement this callback to set the value of a property of an element in the DOM.\r\n     */\r\n    public focusFn(): void {\r\n        if (this.element.value === '') {\r\n            return;\r\n        }\r\n        // 为了得到各个浏览器下正确的光标位置，所以添加延时处理\r\n        if (this.localeable) {\r\n            setTimeout(() => {\r\n                const start: number = this.element.selectionStart;\r\n                const end: number = this.element.selectionEnd;\r\n                if (end - start === this.element.value.length) {\r\n                    this.renderer.setProperty(this.element, 'value', TiLocaleFormat.deleteGroupSep(this.element.value));\r\n                    this.element.setSelectionRange(0, this.element.value.length);\r\n                } else {\r\n                    const groupSep: string = TiLocaleFormat.getNumberSymbol('Group');\r\n                    const old: string = this.element.value;\r\n                    const sub: string = old.substr(0, start);\r\n                    const groupSepNum: number = sub.split(groupSep).length - 1;\r\n\r\n                    this.renderer.setProperty(this.element, 'value', TiLocaleFormat.deleteGroupSep(this.element.value));\r\n                    this.element.setSelectionRange(start - groupSepNum, start - groupSepNum);\r\n                }\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 失去焦点数字国际化处理\r\n     * @memberOf TiInputNumberDirective\r\n     */\r\n    public blurFn(): void {\r\n        const value: number = this.parseValue(this.element.value);\r\n        if (Number.isNaN(value)) {\r\n            this.renderer.setProperty(this.element, 'value', '');\r\n            this.oldInputValue = '';\r\n            return;\r\n        }\r\n        const formatValue: string = this.formatValue(value);\r\n        this.renderer.setProperty(this.element, 'value', formatValue);\r\n        this.oldInputValue = this.deleteGroupSepValue(formatValue);\r\n        const normalValue: number = this.parseValue(formatValue);\r\n        if (value !== normalValue) {\r\n            this.changeModel(normalValue);\r\n        }\r\n    }\r\n\r\n    private changeModel(model: number): void {\r\n        if (model !== this.oldModel) {\r\n            this.onChangeFn(model);\r\n            this.oldModel = model;\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiInputNumberDirective } from './TiInputNumberDirective';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [TiInputNumberDirective],\r\n  declarations: [TiInputNumberDirective]\r\n})\r\nexport class TiInputNumberModule {\r\n}\r\nexport { TiInputNumberDirective } from './TiInputNumberDirective';\r\n","import { Component, ElementRef, EventEmitter,\r\n     Input, Output, Renderer2, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { TiLocaleFormat } from '../../locale/TiLocaleModule';\r\nimport { TiKeymap, Util } from '../../utils/Util';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\n/**\r\n * 数字微调组件\r\n *\r\n * <example-url>../tiny3demo/#/spinner/spinner-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-spinner',\r\n    templateUrl: './spinner.html',\r\n    styleUrls: ['./spinner.less'],\r\n    providers: [TiFormComponent.getValueAccessor(TiSpinnerComponent)]\r\n})\r\nexport class TiSpinnerComponent extends TiFormComponent {\r\n    /**\r\n     * @ignore\r\n     */\r\n    public method: any = {\r\n        METHOD_ADD : 'add',\r\n        METHOD_SUB : 'sub'\r\n    };\r\n    /**\r\n     * 数字小数位数格式，使用n+'小数保留位数'形式表示，例如：'n4'或'N4',代表保留4位小数。\r\n     *\r\n     * 自10.0.1版本起不设置时，小数点后默认最少保留0位，最多保留3位；10.0.0及之前版本默认保留3位。\r\n     */\r\n    @Input() format: string;\r\n    /**\r\n     * 最大值，JS中能表示的整数范围是53位的，如果超过了这个范围的整数，进行一些运算时会出现错误，因此最大值为2^53\r\n     */\r\n    @Input() max: number = Math.pow(2, 53);\r\n    /**\r\n     * 最小值，JS中能表示的整数范围是53位的，如果超过了这个范围的整数，进行一些运算时会出现错误，因此最小值为-2^53\r\n     */\r\n    @Input() min: number = -Math.pow(2, 53);\r\n    /**\r\n     * 微调器的步长\r\n     */\r\n    @Input() step: number = 1;\r\n    /**\r\n     * 占位提示信息\r\n     */\r\n    @Input() placeholder: string = '';\r\n    /**\r\n     * @ignore\r\n     *\r\n     * 从10.0.1版本开始该接口不再开放。如果不想要组件根据最大最小值进行强制转换，那么不要设置最大最小值即可。\r\n     *\r\n     * 失去焦点是否支持根据最大最小值进行强制转换（默认值为true, 支持强转; 当用户配置为false时，不支持强制转换）\r\n     */\r\n    @Input() correctable: boolean = true;\r\n    /**\r\n     * 是否开启国际化。默认值为true,开启国际化功能; 当用户配置为false时，不支持国际化)\r\n     */\r\n    @Input() localeable: boolean = true;\r\n    /**\r\n     * 输入文本的最大长度， 默认值为20.\r\n     */\r\n    @Input() maxlength: number = 20;\r\n    /**\r\n     * @ignore\r\n     * 当数据发生改变时，触发change事件\r\n     */\r\n    // tslint:disable-next-line:no-output-named-after-standard-event\r\n    @Output() readonly stepChange: EventEmitter<string> = new EventEmitter<string>();\r\n    @ViewChild('input', { static: true }) private inputEle: ElementRef;\r\n\r\n    private numberFormat: string = '1.0-3'; // 整数位保留最小位数.小数位保留最小位数-小数位最大保留位置\r\n    /**\r\n     * @ignore\r\n     */\r\n    public inputValue: number;\r\n    constructor(protected hostRef: ElementRef, protected renderer2: Renderer2) {\r\n        super(hostRef, renderer2);\r\n    }\r\n    // 组件声明周期钩子--start ↓\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.setFocusableElems([this.inputEle.nativeElement]);\r\n        this.init();\r\n    }\r\n\r\n    private init(): void {\r\n        if (!TiLocaleFormat.isInvalidFormat(this.format)) {\r\n            const precision: number = parseInt(this.format.slice(1), 10);\r\n            // tslint:disable-next-line:prefer-template\r\n            this.numberFormat = '1.' + precision + '-' + precision;\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        super.ngOnChanges(changes);\r\n        this.setChanges(changes, 'max');\r\n        this.setChanges(changes, 'min');\r\n    }\r\n    // 输入属性发生改变\r\n    private setChanges(changes: SimpleChanges, key: string): void {\r\n        if (changes[key] && !changes[key].isFirstChange()) {\r\n            this[key] = parseFloat(changes[key].currentValue);\r\n            if (Number.isNaN(this[key]) || this.min > this.max) {\r\n                this[key] = parseFloat(changes[key].previousValue);\r\n            }\r\n            if (this.correctable && this.model !== undefined) {\r\n                const model: number = this.getModelByMinMax(this.inputValue);\r\n                if (model !== this.model) {\r\n                    // error: Expression has changed after it was checked.\r\n                    setTimeout(() => {\r\n                        this.inputValue = model;\r\n                        this.model = model;\r\n                    }, 0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 组件声明周期钩子--end\r\n    // 实现ControlValueAccessor接口\r\n    /**\r\n     * @ignore\r\n     * model --> view\r\n     */\r\n    writeValue(value: any): void {\r\n        if (value === null) {\r\n            return;\r\n        }\r\n\r\n        super.writeValue(value);\r\n\r\n        if (!Util.isUndefined(value)) {\r\n            if (Number.isNaN(parseFloat(value))) {\r\n                this.model = this.inputValue;\r\n                return;\r\n            }\r\n\r\n            if (this.correctable) {\r\n                const val: any = this.getModelByMinMax(value);\r\n                this.model = val;\r\n                this.inputValue = val;\r\n                return;\r\n            }\r\n        }\r\n        this.inputValue = value;\r\n    }\r\n    // 实现ControlValueAccessor接口--end\r\n    /**\r\n     * @ignore\r\n     */\r\n    public blurFn(): void {\r\n        let correctValue: number = this.inputValue;\r\n        if (this.correctable && this.inputValue !== undefined) {\r\n            correctValue = this.getModelByMinMax(this.inputValue);\r\n        }\r\n        const parseFormatValue: number = correctValue === undefined ? correctValue : parseFloat(this.formatValue(correctValue));\r\n        if (parseFormatValue !== this.model) {\r\n            this.model = parseFormatValue;\r\n        }\r\n        this.inputValue = this.model;\r\n        this.onModelTouched(); // 校验 初次聚焦 后续聚焦失焦\r\n    }\r\n    /**\r\n     * @ignore\r\n     * description: Event emitter for producting the `ngModelChange` event after the view model updates.\r\n     * ngModelChange 是ngModel指令的@Output.\r\n     * 它在viewToModelUpdate函数中触发\r\n     *\r\n     */\r\n    public inputChange(value: number): void {\r\n        if (value !== undefined && (value < this.min || value > this.max)) {\r\n            return;\r\n        }\r\n        const parseFormatValue: number = value === undefined ? value : parseFloat(this.formatValue(value));\r\n        if (parseFormatValue !== this.model) {\r\n            this.model = parseFormatValue;\r\n        }\r\n    }\r\n    /**\r\n     * 键盘上下键操作\r\n     * @ignore\r\n     */\r\n    public keydownFn(event: any): void {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        if (event.keyCode === TiKeymap.KEY_ARROW_UP) {\r\n            this.stepNumber(this.method.METHOD_ADD);\r\n        } else if (event.keyCode === TiKeymap.KEY_ARROW_DOWN) {\r\n            this.stepNumber(this.method.METHOD_SUB);\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public stepNumberMousedown(e: any, method: string): void {\r\n        if (e.button === TiKeymap.MOUSE_MIDDLE_BUTTON || e.button === TiKeymap.MOUSE_RIGHT_BUTTON || this.disabled) {\r\n            return;\r\n        }\r\n        // 如果是鼠标按下向下btn，输入框需要做获得光标的处理\r\n        this.inputEle.nativeElement.focus();\r\n        e.preventDefault(); // 目的是防止input失去焦点\r\n        this.stepNumber(method);\r\n    }\r\n\r\n    private stepNumber(method: string): void {\r\n        if ((this.inputValue >= this.max && method === this.method.METHOD_ADD) ||\r\n            (this.inputValue <= this.min && method === this.method.METHOD_SUB)) {\r\n            return;\r\n        }\r\n        this.stepChange.emit(method);\r\n        // 当输入框中的值为空时，点击+,-，显示最小值。\r\n        if (this.inputValue === undefined) {\r\n            this.model = this.min;\r\n            this.inputValue = this.model;\r\n\r\n            return;\r\n        }\r\n        if (method === this.method.METHOD_ADD) {\r\n            if (this.inputValue > this.max - this.step) {\r\n                this.model = this.max;\r\n                this.inputValue = this.model;\r\n\r\n                return;\r\n            }\r\n            if (this.inputValue < this.min) {\r\n                this.model = this.min;\r\n                this.inputValue = this.model;\r\n\r\n                return;\r\n            }\r\n        } else if (method === this.method.METHOD_SUB) {\r\n            if (this.inputValue < this.min + this.step) {\r\n                this.model = this.min;\r\n                this.inputValue = this.model;\r\n\r\n                return;\r\n            }\r\n            if (this.inputValue > this.max) {\r\n                this.model = this.max;\r\n                this.inputValue = this.model;\r\n\r\n                return;\r\n            }\r\n        }\r\n        this.model = this.accOperate(this.inputValue, this.step, method);\r\n        this.inputValue = this.model;\r\n    }\r\n    // 组件交互方法集合--end\r\n\r\n     // 根据最大最小值得到model值\r\n     private getModelByMinMax(curValue: number): number  {\r\n        if (curValue < this.min) {\r\n            return this.min;\r\n        }\r\n\r\n        if (curValue > this.max) {\r\n            return this.max;\r\n        }\r\n\r\n        return curValue;\r\n    }\r\n\r\n    private formatValue(value: number): string {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n        // https://angular.cn/api/common/DecimalPipe\r\n        // digitsInfo: {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\r\n        // minIntegerDigits: 小数点前最小位数 默认为1\r\n        // minFractionDigits: 小数点后最小位数 默认0\r\n        // maxFractionDigits: 小数点后最大位数 默认3\r\n        // tslint:disable-next-line:prefer-template\r\n        const localeValue: string = TiLocaleFormat.formatNumber(value, this.numberFormat);\r\n\r\n        return TiLocaleFormat.parseNumber(localeValue).toString();\r\n    }\r\n\r\n    // 根据步长、+/-进行数值计算\r\n    private accOperate(value: number, step: number, method: string): number {\r\n        let r1: number;\r\n        let r2: number;\r\n        let c: number;\r\n        let m: number;\r\n        let _value: number;\r\n        let _step: number;\r\n        // 计算 val 小数点后数字的位数\r\n        const getLength: (value: string | number) => number = (val: string): number => {\r\n            return (String(val)).split('.')[1] ? (String(val)).split('.')[1].length : 0;\r\n        };\r\n        // 去除 val 中的 ‘.’\r\n        const replacePeriod: (value: string | number) => number = (val: string): number => {\r\n            return Number((String(val)).replace('.', ''));\r\n        };\r\n        r1 = getLength(value);\r\n        r2 = getLength(step);\r\n        c = Math.abs(r1 - r2);\r\n        m = Math.pow(10, Math.max(r1, r2));\r\n\r\n        if (c > 0) {\r\n            const cm: number = Math.pow(10, c);\r\n            if (r1 > r2) {\r\n                _value = replacePeriod(value);\r\n                _step = replacePeriod(step) * cm;\r\n            } else {\r\n                _value = replacePeriod(value) * cm;\r\n                _step = replacePeriod(step);\r\n            }\r\n        } else {\r\n            _value = replacePeriod(value);\r\n            _step = replacePeriod(step);\r\n        }\r\n\r\n        if (method === this.method.METHOD_ADD) {\r\n            return (_value + _step) / m;\r\n        }\r\n\r\n        if (method === this.method.METHOD_SUB) {\r\n            return (_value - _step) / m;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n    // 内部公共方法集合--end\r\n}\r\n","import { TiInputNumberModule } from '../../directives/inputnumber/TiInputNumberModule';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiSpinnerComponent } from './TiSpinnerComponent';\r\nimport { TiTextModule } from '../text/TiTextModule';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        TiIconModule,\r\n        TiTextModule,\r\n        TiInputNumberModule\r\n    ],\r\n    exports: [TiSpinnerComponent],\r\n    declarations: [TiSpinnerComponent]\r\n})\r\n\r\nexport class TiSpinnerModule {\r\n}\r\nexport { TiSpinnerComponent } from './TiSpinnerComponent';\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    IterableDiffers,\r\n    NgZone,\r\n    Output,\r\n    QueryList,\r\n    Renderer2,\r\n    ViewChild,\r\n    ViewChildren\r\n} from '@angular/core';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\n\r\n/**\r\n * steps步骤组件\r\n *\r\n * 点击可跳转和不可跳转两种方式（默认点击不跳转）\r\n *\r\n * <example-url>../tiny3demo/#/steps/steps-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-steps',\r\n    templateUrl: './steps.html',\r\n    styleUrls: ['./steps.less']\r\n})\r\n\r\nexport class TiStepsComponent extends TiBaseComponent {\r\n    /**\r\n     * 设置步骤组件的每一步内容。\r\n     * 数组的每个元素都是一个对象，对应每个步骤的一项。这个对象有2个可选属性：\r\n     *\r\n     * 1.steps[i].label（类型：String; 设置每个步骤对应的文本）。（非必选）\r\n     *\r\n     * 2.steps[i].disabled（类型：Boolean; 控制步骤是否灰化, 当clickable为true时才生效）。（非必选）\r\n     *\r\n     * 3.可扩展其他属性\r\n     */\r\n    @Input() steps: Array<any>;\r\n    /**\r\n     * 是否支持点击跳转功能，默认不支持\r\n     */\r\n    @Input() clickable: boolean = false;\r\n    /**\r\n     * 每个步骤的文本最大宽度\r\n     */\r\n    @Input() maxWidth: string;\r\n    /**\r\n     * 用户可指定要显示的属性值，默认显示label属性\r\n     */\r\n    @Input() labelKey: string = 'label';\r\n    /**\r\n     * 指定当前步骤\r\n     */\r\n    @Input() activeStep: any;\r\n    /**\r\n     * 宽度是否自动撑满父容器。\r\n     *\r\n     * 不设置时默认各步骤间线宽60px，步骤确定后整体宽度固定；设置为true时，整体宽度会自适应撑满父容器，适用于在弹窗中使用的场景。\r\n     */\r\n    @Input() adaptive: boolean = false;\r\n    /**\r\n     * 当前步骤改变时的事件\r\n     */\r\n    @Output() readonly activeStepChange: EventEmitter<any> = new EventEmitter<any>();\r\n    /**\r\n     * 点击后用户可根据条件判断是否跳转:见测试用例\r\n     */\r\n    @Output() readonly beforeStep: EventEmitter<any> = new EventEmitter<any>();\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('stepRef') stepsRef: ElementRef;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChildren('line') lineRef: QueryList<ElementRef>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChildren('explain') explainRef: QueryList<ElementRef>;\r\n    private labelChange: boolean; // 标志文本长度是否变化，从而重新计算线长\r\n    private stepsDiffer: any;\r\n    private isInitLabelChange: boolean = true;\r\n    private explainTotalWidth: number = 0;\r\n    private windowResizeListener: () => void;\r\n    constructor(protected elementRef: ElementRef,\r\n                protected renderer2: Renderer2,\r\n                private iterableDiffers: IterableDiffers,\r\n                private zone: NgZone) {\r\n                super(elementRef, renderer2);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        if (!this.adaptive) {\r\n            return;\r\n        }\r\n        // this.trackByLabelFn监听对象：可以深度监听\r\n        this.stepsDiffer = this.iterableDiffers.find(this.steps)\r\n                                               .create(this.trackByLabelFn);\r\n        // 修复错误：ERROR ReferenceError: window is not defined\r\n        if (typeof window === 'undefined') {\r\n            return;\r\n        }\r\n        this.zone.runOutsideAngular(() => {\r\n            this.windowResizeListener = this.renderer2.listen(window, 'resize', this.setLineWidth);\r\n        });\r\n    }\r\n\r\n    ngDoCheck(): void {\r\n        if (this.adaptive) {\r\n            // 处理增删步骤\r\n            const stepsDiffer: any = this.stepsDiffer.diff(this.steps);\r\n            if (stepsDiffer) {\r\n                this.labelChange = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterViewChecked(): void {\r\n        // 需要判断当label变化时才计算线长\r\n        if (this.adaptive && this.labelChange) {\r\n            this.labelChange = false;\r\n            this.setLineWidth();\r\n            // 初始时在前几次的 ngAfterViewChecked 中计算文本宽度，生产环境清缓存场景下计算有点不准确(时机有点早)，但在初始时的后几次ngAfterViewChecked中计算的文本宽度是准确的。\r\n            // TODO: 是否有更合适的时机计算(已验证使用MutationObserver也解决不了，在ngAfterViewChecked中加setTimeout(0)也解决不了)\r\n            if (this.isInitLabelChange) {\r\n                setTimeout(() => {\r\n                    const explainTotalWidth: number = this.getExplainTotalWidth();\r\n                    if (explainTotalWidth !== this.explainTotalWidth) {\r\n                        this.setLineWidth(explainTotalWidth);\r\n                    }\r\n                }, 50); // 50ms是经验值\r\n                this.isInitLabelChange = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.windowResizeListener) {\r\n            this.windowResizeListener();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 每步的点击事件处理\r\n     */\r\n    public onClick(step: any): void {\r\n        // 不支持点击跳转和当前项灰化时，不处理\r\n        if (!this.clickable || step.disabled || this.activeStep === step) {\r\n            return;\r\n        }\r\n\r\n        // 未定义beforeStep事件，直接跳转，定义beforeStep事件将当前点击项索引传出\r\n        if (this.beforeStep.observers.length === 0) {\r\n            this.activeStep = step;\r\n            this.activeStepChange.emit(this.activeStep);\r\n        } else {\r\n            this.beforeStep.emit(step);\r\n        }\r\n    }\r\n\r\n    // 设置每个步骤之间的横线的宽度\r\n    public setLineWidth = (width?: number): void => {\r\n        this.explainTotalWidth = Util.isUndefined(width) ? this.getExplainTotalWidth() : width;\r\n        this.lineRef.forEach((stepLine: ElementRef) => {\r\n            this.renderer2.setStyle(stepLine.nativeElement, 'width',\r\n                `calc((100% - ${this.explainTotalWidth}px) / ${this.steps.length - 1})`);\r\n        });\r\n    }\r\n\r\n    private getExplainTotalWidth(): number {\r\n        let explainTotalWidth: number = 0;\r\n        if (!Util.isUndefined(this.explainRef)) {\r\n            this.explainRef.forEach((step: ElementRef) => {\r\n                // 计算每步选择框和文字的总长度\r\n                explainTotalWidth += step.nativeElement.offsetWidth;\r\n            });\r\n        }\r\n\r\n        return explainTotalWidth;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * Diff监听steps中label值的改变\r\n     */\r\n    public trackByLabelFn(index: number, item: any): string {\r\n        return item.label;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * ngFor 使用\r\n     */\r\n    public trackByIndexFn(index: number): number {\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 判断当前项的状态\r\n     */\r\n    public getStepState(index: number): string {\r\n        const activedIndex: number = this.steps.indexOf(this.activeStep);\r\n        if (index < activedIndex) {\r\n            return 'complete';\r\n        } else if (index === activedIndex) {\r\n            return 'active';\r\n        } else {\r\n            return 'uncomplete';\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiStepsComponent } from './TiStepsComponent';\r\nimport { TiOverflowModule } from '../../directives/overflow/TiOverflowModule';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\nimport { TiOutlineModule } from '../../directives/outline/TiOutlineModule';\r\n\r\n@NgModule({\r\n  imports: [\r\n    TiOverflowModule,\r\n    TiIconModule,\r\n    CommonModule,\r\n    TiOutlineModule\r\n  ],\r\n  exports: [TiStepsComponent],\r\n  declarations: [TiStepsComponent]\r\n})\r\n\r\nexport class TiStepsModule {\r\n}\r\nexport { TiStepsComponent } from './TiStepsComponent';\r\n","import { Component, ElementRef, EventEmitter, Output, ViewChild } from '@angular/core';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\n/**\r\n * Switch开关组件\r\n *\r\n * 用于实现页面中的开关操作。\r\n *\r\n * <example-url>../tiny3demo/#/switch/switch-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-switch',\r\n    templateUrl: './switch.html',\r\n    styleUrls: ['./switch.less'],\r\n    host: {\r\n        '[class.ti3-switch-container]': 'true'\r\n    },\r\n    providers: [ TiFormComponent.getValueAccessor(TiSwitchComponent) ],\r\n})\r\nexport class TiSwitchComponent extends TiFormComponent {\r\n    /**\r\n     * 组件开关状态即将切换之前发出事件:。组件状态不改变，后续全权交给组件调用者处理。\r\n     */\r\n    @Output() readonly beforeChange: EventEmitter<TiSwitchComponent> = new EventEmitter<TiSwitchComponent>();\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('a', { static: true }) aRef: ElementRef;\r\n\r\n    private initialized: boolean = false;\r\n    private hasAnimation: boolean = false;\r\n\r\n    ngOnInit(): void {\r\n        // 基类中做了设置宿主id的操作\r\n        super.ngOnInit();\r\n        this.setFocusableElems([this.aRef.nativeElement]);\r\n    }\r\n\r\n    ngOnModelChange(value: boolean): void {\r\n        super.ngOnModelChange(value);\r\n        if (value === null) { // 以 ngModel 的形式传入值时, writeValue首次传入null\r\n            return;\r\n        }\r\n\r\n        if (this.initialized && !this.hasAnimation) { // 保证初始时没有动画\r\n            this.renderer.addClass(this.aRef.nativeElement, 'ti3-switch-animation');\r\n            this.hasAnimation = true;\r\n        }\r\n        this.initialized = true;\r\n    }\r\n\r\n    /**\r\n     * 切换开关状态\r\n     */\r\n    private toggle(): void {\r\n\r\n        if (this.beforeChange.observers.length === 0) {// 用户未定义beforeChange\r\n            this.model = !this.model;\r\n        } else {\r\n            this.beforeChange.emit(this);\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 点击事件\r\n     */\r\n    public onClick(): void {\r\n        if (!this.disabled) {\r\n            this.toggle();\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiSwitchComponent } from './TiSwitchComponent';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [ TiSwitchComponent ],\r\n    declarations: [ TiSwitchComponent ]\r\n})\r\n\r\nexport class TiSwitchModule {\r\n}\r\nexport { TiSwitchComponent } from './TiSwitchComponent';\r\n","import {\r\n    AfterViewChecked,\r\n    AfterViewInit,\r\n    Component,\r\n    ElementRef,\r\n    Input,\r\n    NgZone,\r\n    OnInit,\r\n    OnDestroy,\r\n    Renderer2,\r\n    ViewChild,\r\n    Inject\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\nimport { TiTabComponent } from './TiTabComponent';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\nimport { TiRenderer } from '../../services/renderer/TiRenderer';\r\nimport { TiDroplistComponent } from '../droplist/TiDroplistModule';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiPositionType } from '../../utils/Position';\r\n/**\r\n * TiTabs组件属于布局组件，通过该组件产品可以实现不同视图的切换功能。\r\n *\r\n * 其内部包含2个组件 TiTab 和 TiTabHeader\r\n *\r\n * <example-url>../tiny3demo/#/tab/tab-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-tabs',\r\n    templateUrl: './tabs.html',\r\n    styleUrls: ['./tabs.less'],\r\n    host: {\r\n        '[class.ti3-tabs-container]': 'true' // 给host添加类ti-tabs-container替代之前的组件模板内部的最外层div\r\n    }\r\n})\r\nexport class TiTabsComponent extends TiBaseComponent implements AfterViewInit, AfterViewChecked, OnInit, OnDestroy {\r\n    /**\r\n     * 1.\"justified\"(默认): 下拉框的宽度与输入框的宽度保持一致；\r\n     *\r\n     * 2.\"auto\": 下拉框的宽度根据下拉项的内容自动撑开；\r\n     *\r\n     * 3.表示宽度的字符串: 设置固定的下拉框宽度(不小于输入框的宽度)。例如：\"200px\"。\r\n     *\r\n     * 10.0.1新增\r\n     */\r\n    @Input() panelWidth: string = '100px';\r\n    /**\r\n     * 面板对齐方式\r\n     *\r\n     * 10.0.1新增\r\n     *\r\n     */\r\n    @Input() panelAlign: 'left' | 'right' = 'right';\r\n    /**\r\n     * 面板最大高度\r\n     *\r\n     * 10.0.1新增\r\n     *\r\n     */\r\n    @Input() panelMaxHeight: string;\r\n    /**\r\n     * 指定下拉项超长文本提示方向\r\n     *\r\n     * 10.0.1新增\r\n     *\r\n     */\r\n    @Input() tipPosition: TiPositionType = 'left';\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('slider', { static: true }) slider: ElementRef;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('tabContentContainer', { static: true }) tabContentContainer: ElementRef;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('more', { static: true }) moreRef: ElementRef;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('moreIcon', { static: true }) moreIconRef: ElementRef;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('tabsList', { static: true }) tabsListRef: ElementRef;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('tabsHeader', { static: true }) tabsHeaderRef: ElementRef;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('tabsContainer', { static: true }) tabsContainerRef: ElementRef;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('droplist', { static: true }) dropListComp: TiDroplistComponent;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public labelKey: string = 'header';\r\n    /**\r\n     * @ignore\r\n     * 下拉项\r\n     */\r\n    public options: Array<any> = [];\r\n    /**\r\n     * @ignore\r\n     */\r\n    public onlistenClick: () => void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public windowResizeListener: () => void;\r\n    /**\r\n     * @ignore\r\n     * TiTabs中包裹的所有的 TiTabComponent 集合\r\n     */\r\n    public tabs: Array<TiTabComponent> = [];\r\n    /**\r\n     * @ignore\r\n     */\r\n    public selectedTab: TiTabComponent; // 当前选中的tab\r\n    private isNotVisibleInit: boolean = false; // 标志初始时是否可见\r\n    /**\r\n     * @ignore\r\n     * TiTabComponent.ts中使用\r\n     */\r\n    public destroyed: boolean = false;\r\n    /**\r\n     * @ignore\r\n     * 是否显示滑动条slider（一级页签显示，二级/暗色页签不显示）\r\n     * TiTabHeaderComponent.ts中使用\r\n     */\r\n    public hasSlider: boolean = false;\r\n    /**\r\n     * @ignore\r\n     * TiTabHeaderComponent.ts中使用\r\n     */\r\n    public headerWidthChange: boolean = false;\r\n    private resolvedPromise: Promise<any> = Promise.resolve(null);\r\n    /**\r\n     * @ignore\r\n     * 下拉选项变更时触发\r\n     */\r\n    public onDroplistChange($event: any): void {\r\n        this.tabs.forEach((item: any) => {\r\n            if (item.id === this.selectedTab.id) {\r\n                this.setActiveValue(item, true);\r\n                this.activeTab(item, true);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 点击下拉按钮打开下拉面板\r\n     */\r\n    public showMorePanel(event: MouseEvent): void {\r\n        this.dropListComp.show();\r\n        event.stopPropagation();\r\n    }\r\n    constructor(private elementRef: ElementRef, private renderer2: Renderer2,\r\n        public tiRenderer: TiRenderer, private zone: NgZone, @Inject(DOCUMENT) private document) {\r\n        super(elementRef, renderer2);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        // 初始化是否显示滑动条slider（一级页签显示，二级/暗色页签不显示）\r\n        this.hasSlider = !this.nativeElement.hasAttribute('level2') && !this.nativeElement.hasAttribute('dark');\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        super.ngAfterContentInit();\r\n        if (this.hasSlider) {\r\n            // 如果祖先元素中display为none，获取到的组件的宽度为0,元素不可见\r\n            this.isNotVisibleInit = this.nativeElement.clientWidth === 0;\r\n        }\r\n        this.zone.runOutsideAngular(() => {\r\n            // 点击documnet优惠信息窗口关闭\r\n            this.onlistenClick = this.renderer2.listen(this.document, 'click', () => this.dropListComp.hide());\r\n            if (typeof window === 'undefined') {\r\n                return;\r\n            }\r\n            this.windowResizeListener = this.renderer2.listen(window, 'resize',\r\n                () => {\r\n                    this.setMoreStyle();\r\n                    this.setTabStyle(true);\r\n                });\r\n        });\r\n    }\r\n\r\n    ngAfterViewChecked(): void {\r\n        super.ngAfterViewChecked();\r\n        // 初始祖先元素中display为none，之后第一次由none变成可见时，需要重置silder\r\n        if (this.isNotVisibleInit && this.nativeElement.clientWidth !== 0) {\r\n            this.setTabStyle(false);\r\n            this.isNotVisibleInit = false;\r\n\r\n            return;\r\n        }\r\n        // 此处执行晚于TiTabHeaderComponent的ngAfterViewChecked\r\n        if (this.headerWidthChange) {\r\n            this.setTabStyle(false);\r\n            this.headerWidthChange = false;\r\n            this.setMoreStyle();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroyed = true;\r\n        if (this.windowResizeListener) {\r\n            this.windowResizeListener();\r\n        }\r\n        if (this.onlistenClick) {\r\n            this.onlistenClick();\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    public setMoreStyle(): void {\r\n        if (this.isOverflow()) {\r\n            this.renderer2.setStyle(this.moreRef.nativeElement, 'display', 'block');\r\n        } else {\r\n            this.renderer2.setStyle(this.moreRef.nativeElement, 'display', 'none');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * TiTabComponent.ts 中调用\r\n     */\r\n    public addTab(tab: TiTabComponent): void {\r\n        if (tab.active) {\r\n            this.tabs.forEach((item: TiTabComponent) => {\r\n                if (item.active) {\r\n                    this.setActiveValue(item, false);\r\n                }\r\n            });\r\n        }\r\n        this.tabs.push(tab);\r\n        const tabElements: Array<any> = Array.from(this.tabContentContainer.nativeElement.children);\r\n        this.tabs.sort((a: TiTabComponent, b: TiTabComponent): number => {\r\n            return tabElements.indexOf(a.nativeElement) - tabElements.indexOf(b.nativeElement);\r\n        });\r\n        if (!tab.active && this.selectedTab\r\n            && tabElements.indexOf(tab.nativeElement) < tabElements.indexOf(this.selectedTab.nativeElement)) {\r\n            setTimeout(() => {\r\n                this.setTabStyle(true);\r\n            }, 0);\r\n        }\r\n        this.options = this.tabs;\r\n        setTimeout(() => {\r\n            this.setMoreStyle();\r\n        }, 0);\r\n    }\r\n    /**\r\n     * @ignore\r\n     * TiTabComponent.ts 中调用\r\n     */\r\n    public removeTab(tab: TiTabComponent): void {\r\n        const index: number = this.tabs.indexOf(tab);\r\n        const length: number = this.tabs.length;\r\n        this.tabs.splice(index, 1);\r\n\r\n        setTimeout(() => {\r\n            this.setMoreStyle();\r\n        }, 0);\r\n\r\n        // 删除当前激活状态的tab\r\n        if (tab.active && length > 1) {\r\n            const newActiveIndex: number = this.getNewActiveIndex(index, length);\r\n            if (newActiveIndex !== -1) {\r\n                this.setActiveValue(this.tabs[newActiveIndex], true);\r\n                this.activeTab(this.tabs[newActiveIndex], true);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // 删除的是非激活状态的tab,那么就在删除后的tabs数组中查找剩下的哪一个tab是激活状态，再设置激活状态；\r\n        if (!tab.active) {\r\n            setTimeout(() => {\r\n                this.setTabStyle(true);\r\n            }, 0);\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * TiTabComponent.ts 中调用\r\n     */\r\n    public activeTab(selectedTab: TiTabComponent, enableAnimate: boolean): void {\r\n        this.deActiveOthers(selectedTab);\r\n\r\n        selectedTab.loaded = true;\r\n\r\n        this.selectedTab = selectedTab;\r\n\r\n        // 只有不是灰化状态时，才触发切换动效\r\n        if (!selectedTab.disabled) {\r\n            // 添加定时器，处理ngFor未渲染完毕，获取到得silder的位置不准确\r\n            setTimeout(() => {\r\n                // 初始化激活时没有动效\r\n                this.setTabStyle(enableAnimate);\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    private deActiveOthers(selectTab: TiTabComponent): void {\r\n        this.tabs.forEach((tab: TiTabComponent) => {\r\n            if (tab.active && tab !== selectTab) {\r\n                this.setActiveValue(tab, false);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public click(tab: TiTabComponent): void {\r\n        if (!tab.disabled && !tab.active) {\r\n            this.setActiveValue(tab, true);\r\n            this.activeTab(tab, true);\r\n        }\r\n    }\r\n\r\n    // 删除当前激活状态的tab后，需要激活下一个active tab\r\n    private getNewActiveIndex(index: number, length: number): number {\r\n        // 如果删除的当前激活状态的tab是最后一个，\r\n        // 那么下一个激活的tab就是从右到左第一个不是禁用的tab\r\n        if (index === length - 1) {\r\n            for (let i: number = index - 1; i >= 0; i--) {\r\n                if (!this.tabs[i].disabled) {\r\n                    return i;\r\n                }\r\n            }\r\n            // 如果删除的当前激活状态的tab不是最后一个，\r\n            // 那么下一个激活的tab就是从左到右第一个不是禁用的tab\r\n        } else {\r\n            for (let i: number = index; i < this.tabs.length; i++) {\r\n                if (!this.tabs[i].disabled) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    // 设置页签样式\r\n    private setTabStyle(enableAnimate: boolean): void {\r\n        const targetTab: any = this.selectedTab && this.selectedTab.headNode.parentNode.parentNode;\r\n        // 容错处理：没有获取到DOM时直接return；\r\n        if (Util.isUndefined(targetTab) || !targetTab.classList.contains('ti3-tab-li')) {\r\n            return;\r\n        }\r\n        // 获取该页签的偏移量\r\n        const tagetLeft: number = targetTab.offsetLeft;\r\n        // 需要显示滑动条时设置滑动条的样式及动效\r\n        if (this.hasSlider) {\r\n            // 修复SSR错误：ERROR TypeError: targetTab.getBoundingClientRect is not a function\r\n            const targetWidth: number = typeof(targetTab.getBoundingClientRect) === 'function' ? parseFloat(targetTab.getBoundingClientRect().width\r\n                .toFixed(2)) : 0;\r\n            const transitionSet: string = enableAnimate ? 'left 0.1s ease-in-out' : 'none';\r\n            this.tiRenderer.setStyles(this.slider.nativeElement, {\r\n                transition: transitionSet,\r\n                width: `${targetWidth}px`,\r\n                left: `${tagetLeft}px`\r\n            });\r\n        }\r\n        this.setTabScroll(targetTab, tagetLeft);\r\n    }\r\n    // 设置页签超长滑动动效\r\n    private setTabScroll(target: any, distance: number): void {\r\n        const moreWidth: number = this.moreRef && this.moreRef.nativeElement.offsetWidth;\r\n        const tabsHeaderWidth: number = this.tabsHeaderRef && this.tabsHeaderRef.nativeElement.offsetWidth;\r\n        const listWidth: number = this.tabsListRef && this.tabsListRef.nativeElement.offsetWidth;\r\n        // 修复SSR错误：ERROR TypeError: this.tabsContainerRef.nativeElement.getBoundingClientRect is not a function\r\n        if(typeof this.tabsContainerRef.nativeElement.getBoundingClientRect !== 'function'){\r\n            return;\r\n        }\r\n        const tabsContainerClientRect: any = this.tabsContainerRef && this.tabsContainerRef.nativeElement.getBoundingClientRect();\r\n        const targetClientRect: any = target.getBoundingClientRect();\r\n        // 1、条件1和2：激活项能在当前屏范围内完全显示时\r\n        // 2、尾部页签紧贴右侧时（页签动态删减，导致尾部页签没有紧贴右侧 #15412）\r\n        // 同时满足，tabs无需滑动\r\n        if (targetClientRect.x >= tabsContainerClientRect.x\r\n            && targetClientRect.x <= tabsContainerClientRect.x + tabsContainerClientRect.width - moreWidth - targetClientRect.width\r\n            && tabsHeaderWidth <= listWidth + moreWidth) {\r\n            return;\r\n        }\r\n\r\n        let marginLeftDistance: number = distance;\r\n        const maxDistance: number = this.tabsListRef.nativeElement.scrollWidth - tabsContainerClientRect.width + moreWidth;\r\n        if (maxDistance > 0) {\r\n            if (distance >= maxDistance) {\r\n                marginLeftDistance = maxDistance;\r\n            }\r\n        } else {\r\n            marginLeftDistance = 0;\r\n        }\r\n        this.renderer2.setStyle(this.tabsHeaderRef.nativeElement, 'transition', 'margin-left 0.1s ease-in-out');\r\n        this.renderer2.setStyle(this.tabsHeaderRef.nativeElement, 'margin-left', - marginLeftDistance + 'px');\r\n    }\r\n\r\n    private setActiveValue(tab: TiTabComponent, value: boolean): void {\r\n        // 双向数据绑定时，初始传入的值不合法立即修改并传出时会报错。\r\n        // 此处参考ngModel源码setValue的处理，使用promise延后执行时序\r\n        this.resolvedPromise.then(() => {\r\n            tab.active = value;\r\n            tab.activeChange.emit(value);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public trackByFn(index: number, item: any): Node {\r\n        return item.headNode;\r\n    }\r\n    // 空间不足时，出现下拉面板\r\n    private isOverflow(): boolean {\r\n        const headerWidth: number = this.tabsContainerRef.nativeElement.offsetWidth;\r\n        const listWidth: number = this.tabsListRef.nativeElement.scrollWidth;\r\n        const moreWidth: number = this.moreRef.nativeElement.offsetWidth;\r\n\r\n        return headerWidth - moreWidth < listWidth;\r\n    }\r\n\r\n}\r\n","import {\r\n    Component,\r\n    ContentChild,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostBinding,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    Renderer2,\r\n    SimpleChange,\r\n    SimpleChanges,\r\n    TemplateRef } from '@angular/core';\r\nimport { TiTabsComponent } from './TiTabsComponent';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\n/**\r\n * TiTabComponent 是单个页签组件，包含了页签标题头指令TiTabHeader 和 该页签对应的内容部分\r\n *\r\n */\r\n@Component({\r\n    selector: 'ti-tab',\r\n    templateUrl: './tab.html',\r\n    styleUrls: ['./tab.less'],\r\n    host: {\r\n        '[class.ti3-tab-pane]': 'true'\r\n    }\r\n})\r\n\r\nexport class TiTabComponent extends TiBaseComponent implements OnInit, OnDestroy, OnChanges {\r\n    /**\r\n     * 设置当前页签标题头显示的文本\r\n     */\r\n    @Input() header: string;\r\n    /**\r\n     * 设置当前页签是否禁用置灰\r\n     */\r\n    @Input() disabled: boolean;\r\n    /**\r\n     * 设置当前页签是否处于激活状态。\r\n     *\r\n     * 此接口是双向绑定的，设置时中括号“[]”和圆括号“()”要同时使用\r\n     */\r\n    @Input() @HostBinding('class.ti3-tab-active') active: boolean;\r\n    /**\r\n     * 当前页签的激活状态发生改变时向外进行事件通知,传递的参数为 boolean 类型，表示当前页签是否是激活状态\r\n     */\r\n    @Output() readonly activeChange: EventEmitter<any> = new EventEmitter();\r\n    /**\r\n     * @ignore\r\n     * 获取到用户自定义的模板\r\n     */\r\n    @ContentChild('tiTabContent', /* TODO: add static flag */ { static: true }) public contentTemplate: TemplateRef<any>;\r\n    /**\r\n     * @ignore\r\n     * 当前页签标题头显示的node节点\r\n     */\r\n    public headNode: any;\r\n    /**\r\n     * @ignore\r\n     * 记录此页签的内容区是否已经加载过\r\n     */\r\n    public loaded: boolean = false;\r\n\r\n    constructor(private elementRef: ElementRef, private renderer2: Renderer2,\r\n                public tabset: TiTabsComponent) {\r\n            super(elementRef, renderer2);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.createHeadNode();\r\n        this.tabset.addTab(this);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        super.ngOnChanges(changes);\r\n        const activeObj: SimpleChange = changes['active'];\r\n        if (activeObj && activeObj.currentValue && this.tabset.selectedTab !== this && !this.disabled) {\r\n            this.tabset.activeTab(this, !activeObj.firstChange);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        super.ngOnDestroy();\r\n        // 父容器TiTabs的OnDestroy执行晚于TiTab的OnDestroy，所以此处需要setTimeout来延时\r\n        setTimeout(() => {\r\n            if (this.tabset.destroyed) {\r\n                return;\r\n            }\r\n            this.tabset.removeTab(this);\r\n            // 如果没有tab，那么下划线隐藏\r\n            if (this.tabset.tabs.length === 0) {\r\n                this.tabset.tiRenderer.setStyles(this.tabset.slider.nativeElement, {\r\n                    width: 0,\r\n                    left: 0\r\n                });\r\n            }\r\n        }, 0);\r\n    }\r\n\r\n    private createHeadNode(): void {\r\n        if (Util.isString(this.header)) {\r\n            this.headNode = this.renderer2.createText(this.header);\r\n        }\r\n    }\r\n}\r\n","import {\r\n    AfterContentInit,\r\n    AfterViewChecked,\r\n    Component,\r\n    ElementRef } from '@angular/core';\r\nimport { TiTabComponent } from './TiTabComponent';\r\nimport { Util } from '../../utils/Util';\r\n/**\r\n * TiTabHeaderComponent 是单个页签的标题头组件，其包裹的元素会作为当前页签的标题头\r\n *\r\n */\r\n@Component({\r\n    selector: 'ti-tab-header',\r\n    templateUrl: './tab-head.html',\r\n    host: {\r\n        '[class.ti3-tab-head-no-outline]': 'true'\r\n    }\r\n})\r\n\r\nexport class TiTabHeaderComponent implements AfterContentInit, AfterViewChecked {\r\n    private oldHeaderWidth: number;\r\n    constructor(private tab: TiTabComponent, private elementRef: ElementRef) {}\r\n\r\n    ngAfterContentInit(): void {\r\n        // 由于此处的AfterContentInit会比TiTabComponent组件的OnInit\r\n        // 执行得晚，所以ti-tab-header中的内容会覆盖header接口传入的字符串值\r\n        this.tab.headNode = this.elementRef.nativeElement;\r\n        if (!this.tab.header) {\r\n            // 处理自定义dom没有header接口时对应下拉面板展示\r\n            this.tab.header =  this.elementRef.nativeElement.innerText;\r\n        }\r\n    }\r\n\r\n    ngAfterViewChecked(): void {\r\n        if (!this.tab.tabset.hasSlider) {\r\n            return;\r\n        }\r\n        if (Util.isUndefined(this.oldHeaderWidth)) {\r\n            this.oldHeaderWidth = this.elementRef.nativeElement.offsetWidth;\r\n\r\n            return;\r\n        }\r\n        const headerWidth: number = this.elementRef.nativeElement.offsetWidth;\r\n        if (headerWidth !== this.oldHeaderWidth) {\r\n            this.tab.tabset.headerWidthChange = true;\r\n            this.oldHeaderWidth = headerWidth;\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TiTabsComponent } from './TiTabsComponent';\r\nimport { TiTabComponent } from './TiTabComponent';\r\nimport { TiTabHeaderComponent } from './TiTabHeaderComponent';\r\nimport { TiIncludeModule } from '../../directives/include/TiIncludeModule';\r\nimport { TiRendererModule } from '../../services/renderer/TiRendererModule';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\nimport { TiDroplistModule } from '../droplist/TiDroplistModule';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TiDroplistModule,\r\n    TiIconModule,\r\n    TiIncludeModule,\r\n    TiRendererModule\r\n  ],\r\n  exports: [TiTabsComponent, TiTabComponent, TiTabHeaderComponent],\r\n  declarations: [TiTabsComponent, TiTabComponent, TiTabHeaderComponent]\r\n})\r\nexport class TiTabModule {\r\n}\r\nexport { TiTabComponent } from './TiTabComponent';\r\nexport { TiTabsComponent } from './TiTabsComponent';\r\nexport { TiTabHeaderComponent } from './TiTabHeaderComponent';","import {\r\n      Component,\r\n      ContentChild,\r\n      ElementRef,\r\n      Input,\r\n      TemplateRef,\r\n      ViewChild\r\n} from '@angular/core';\r\nimport { TiDominatorComponent } from '../dominator/TiDominatorModule';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiDropsearchComponent } from '../dropsearch/TiDropsearchModule';\r\nimport { TiKeymap } from '../../utils/Util';\r\n/**\r\n * TagsInput标签输入组件\r\n *\r\n * TagsInput组件主要实现了一个可以输入标签、可以联想选择标签的功能组件。\r\n *\r\n * <example-url>../tiny3demo/#/tagsinput/tagsinput-all</example-url>\r\n */\r\n@Component({\r\n      selector: 'ti-tags-input',\r\n      templateUrl: './tagsinput.html',\r\n      styleUrls: ['./tagsinput.less'],\r\n      providers: [TiFormComponent.getValueAccessor(TiTagsInputComponent)]\r\n})\r\n\r\nexport class TiTagsInputComponent extends TiFormComponent {\r\n      /**\r\n       * 设置联想词条列表的数据\r\n       */\r\n      @Input() suggestions: Array<any> = [];\r\n      /**\r\n       * 设置输入框提示,在设置提示内容，并且无选中项时显示\r\n       */\r\n      @Input() placeholder: string = '';\r\n      /**\r\n       * 设置下拉面板的宽度,默认与dominator对齐 'justified' | 'auto'| string\r\n       */\r\n      @Input() panelWidth: string = 'justified';\r\n      /**\r\n       * 支持指定属性作为显示文本\r\n       */\r\n      @Input() labelKey: string = 'label';\r\n\r\n      /**\r\n       * @ignore\r\n       * 内部的input标签\r\n       */\r\n      @ViewChild('input', { static: true }) public inputRef: ElementRef;\r\n      /**\r\n       * @ignore\r\n       * 用户写的item模板\r\n       */\r\n      @ContentChild(TemplateRef, /* TODO: add static flag */ { static: true }) itemTemplate: TemplateRef<any>;\r\n      /**\r\n       * @ignore\r\n       * 内部标签donimator组件\r\n       */\r\n      @ViewChild(TiDominatorComponent, { static: true }) dominatorCom: TiDominatorComponent;\r\n      /**\r\n       * @ignore\r\n       * 内部标签selectDrop组件\r\n       */\r\n      @ViewChild(TiDropsearchComponent, { static: true }) selectDrop: TiDropsearchComponent;\r\n      /**\r\n       * @ignore\r\n       * input输入框的值\r\n       */\r\n      public inputValue: string = ''; // 输入框内容\r\n\r\n      ngAfterViewInit(): void {\r\n            super.ngAfterViewInit();\r\n            // 推荐在onInit()时调用setFocusableElems(), 但是ngFor/ngIf中的元素在ngAfterViewInit()才能获取到\r\n            this.setFocusableElems([this.dominatorCom.nativeElement, this.inputRef.nativeElement]);\r\n      }\r\n\r\n      /**\r\n       * @ignore\r\n       * 处理select事件\r\n       */\r\n      onSelect(event: any): void {\r\n            this.model.push(event);\r\n            this.model = this.model.concat();\r\n            this.selectDrop.searchResult = this.getSuggestions(this.suggestions, this.model);\r\n\r\n            // 清空输入框\r\n            this.inputValue = '';\r\n            // 选中项由一行变为两行时，需要重定位\r\n            setTimeout(() => {\r\n                  this.selectDrop.rePosition();\r\n            }, 0);\r\n      }\r\n\r\n      /**\r\n       * @ignore\r\n       * 处理点击Dominator事件\r\n       */\r\n      onClickDominator(): void {\r\n            if (this.disabled) {\r\n                  return;\r\n            }\r\n\r\n            this.inputRef.nativeElement.focus();\r\n      }\r\n\r\n      /**\r\n       * @ignore\r\n       * 点击选中项的叉号:从选中项中移除当前选中项\r\n       */\r\n      onDelete(event: { item: any; model: any }): void {\r\n            this.inputRef.nativeElement.focus();\r\n            // 选中项由两行变为一行时，需要重定位\r\n            setTimeout(() => {\r\n                  this.selectDrop.rePosition();\r\n              }, 0);\r\n            this.selectDrop.searchResult = this.getSuggestions(this.suggestions, event.model);\r\n      }\r\n\r\n      /**\r\n       * @ignore\r\n       * 输入框失焦时，面板隐藏，根据文本框内容处理是否添加到选中项\r\n       */\r\n      onInputBlur(): void {\r\n            this.selectDrop.hide();\r\n            const value: string = this.inputValue;\r\n\r\n            // 清空输入框\r\n            this.inputValue = '';\r\n\r\n            // 输入框为空时或者当前输入框内容对应的标签已经在选中列表中了\r\n            if (value.trim() === '' || this.findFirstIndex(this.model, 'label', value) !== -1) {\r\n                  return;\r\n            }\r\n            // 将输入框内容添加到选中标签中\r\n            this.addTagToSelected(value);\r\n      }\r\n\r\n      /**\r\n       * @ignore\r\n       * 处理input框聚焦事件\r\n       */\r\n      onInputFocus(event: FocusEvent): void {\r\n            this.selectDrop.searchResult = this.getSuggestions(this.suggestions, this.model);\r\n            // 视图绘制早于变量更新，变量更新后下拉定位不正确， 需要延时处理\r\n            setTimeout(() => {\r\n                  this.showSelectDrop();\r\n            }, 0);\r\n      }\r\n\r\n      /**\r\n       * @ignore\r\n       * 处理input输入框keyup快捷键功能\r\n       */\r\n      onInputKeyup(event: KeyboardEvent): void {\r\n            if (event.keyCode === TiKeymap.KEY_ENTER || event.keyCode === TiKeymap.KEY_NUMPAD_ENTER) {\r\n                  this.responseEnter(event);\r\n            }\r\n      }\r\n\r\n      /**\r\n       * @ignore\r\n       * 处理input输入框keydown快捷键功能\r\n       * 回删键只能在keydown中处理：因为回删时，在keydown时输入框为当前值，keyup时为删除后的值\r\n       * 比如输入一个字符，回删，获取的应该是回删前的一个字符，而不是没有删除后的\r\n       */\r\n      onInputKeydown(event: KeyboardEvent): void {\r\n            if (event.keyCode === TiKeymap.KEY_BACKSPACE) {\r\n                  this.responseBackspace(event);\r\n            }\r\n      }\r\n\r\n      /**\r\n       * @ignore\r\n       * 输入框内容变化时的处理\r\n       * @param inputValue\r\n       */\r\n      onInputChange(inputValue: string): void {\r\n            // 过滤出匹配项\r\n            this.selectDrop.searchWordChange(inputValue);\r\n            // 从匹配项中移除已选中项\r\n            this.selectDrop.searchResult = this.getSuggestions(this.selectDrop.searchResult, this.model);\r\n            // 当没有匹配项时面板隐藏\r\n            if (this.selectDrop.searchResult.length === 0) {\r\n                  this.selectDrop.hide();\r\n            }\r\n      }\r\n\r\n      /**\r\n       * 处理input输入框enter键功能\r\n       * @param event\r\n       */\r\n      private responseEnter(event: KeyboardEvent): void {\r\n            this.selectDrop.hide();\r\n            // 获取输入框的值\r\n            const value: string = this.inputValue;\r\n            // 清空input框的内容\r\n            this.inputValue = '';\r\n\r\n            // 输入框为空时或者当前输入框内容对应的标签已经在选中列表中了\r\n            if (value.trim() === '' || this.findFirstIndex(this.model, 'label', value) !== -1) {\r\n                  this.showSelectDrop();\r\n\r\n                  return;\r\n            }\r\n\r\n            // 将输入框内容添加到选中标签中\r\n            this.addTagToSelected(value);\r\n            // 将选中项与下拉选项对比，从下拉选项中提出选中项\r\n            this.selectDrop.searchResult = this.getSuggestions(this.suggestions, this.model);\r\n            this.showSelectDrop();\r\n      }\r\n\r\n      /**\r\n       * 处理input输入框回删键功能\r\n       * @param event\r\n       */\r\n      private responseBackspace(event: KeyboardEvent): void {\r\n            this.selectDrop.hide();\r\n            // 面板关闭时\r\n            if (!this.selectDrop.isShow) {\r\n                  this.showSelectDrop();\r\n                  // 选中项由两行变为一行时，需要重定位\r\n                  setTimeout(() => {\r\n                        this.selectDrop.rePosition();\r\n                  }, 0);\r\n            }\r\n            const value: string = this.inputRef.nativeElement.value;\r\n            // 输入框值不为空字符串时\r\n            if (value !== '') {\r\n                  return;\r\n            }\r\n\r\n            // 获取当前选中项的长度\r\n            const modelLength: number = this.model.length;\r\n\r\n            // 当前已经没有选中项时，不做处理\r\n            if (modelLength === 0) {\r\n                  return;\r\n            }\r\n\r\n            const lastSelected: any = this.model[modelLength - 1];\r\n            const index: number = this.suggestions.indexOf(lastSelected);\r\n            // 从选中项中删除\r\n            this.model.pop();\r\n            this.model = this.model.concat();\r\n\r\n            // 将要从选中项删除的最后一项是下拉选项中的一项时，将其添加到现有的下拉选项中;\r\n            // 如果是用户自己创建的，则不放入下拉项中\r\n            if (index !== -1) {\r\n                  this.selectDrop.searchResult = this.getSuggestions(this.suggestions, this.model);\r\n            }\r\n      }\r\n\r\n      /**\r\n       * 根据数组中属性找是否有匹配项\r\n       * @param arr 需要匹配的数组\r\n       * @param key 需要查找的属性\r\n       * @param value 属性值\r\n       * @returns\r\n       */\r\n      private findFirstIndex(arr: any, key: string, value: string): number {\r\n            if (!(arr instanceof Array)) {\r\n                  return -1;\r\n            }\r\n\r\n            for (let i: number = 0; i < arr.length; i++) {\r\n                  if (arr[i][key] === value) {\r\n                        return i;\r\n                  }\r\n            }\r\n\r\n            return -1;\r\n      }\r\n\r\n      /**\r\n       * 将输入框内容添加到选中标签中\r\n       * @param inputValue 输入框的内容\r\n       */\r\n      private addTagToSelected(inputValue: string): void {\r\n            const index: number = this.findFirstIndex(this.suggestions, 'label', inputValue);\r\n            const newTag: any = index === -1 ? { id: inputValue, label: inputValue } : this.suggestions[index];\r\n            this.model.push(newTag);\r\n            this.model = this.model.concat();\r\n      }\r\n\r\n      /**\r\n       * 从suggestions中删除选中项\r\n       */\r\n      private getSuggestions(suggestions: any, selected: any): Array<any> {\r\n            const newSuggestions: any = !(suggestions instanceof Array) ? [] : suggestions.concat(); // 使用数组的concat方法，实现深拷贝\r\n\r\n            let index: number;\r\n            for (const select of selected) {\r\n                  index = newSuggestions.indexOf(select);\r\n\r\n                  if (index !== -1) { // 选中项如果在下拉列表中存在，则删除\r\n                        newSuggestions.splice(index, 1);\r\n                  }\r\n            }\r\n\r\n            return newSuggestions;\r\n      }\r\n\r\n      /**\r\n       * @ignore\r\n       * 展开面板时设置下拉选中项和hoverOption\r\n       */\r\n      public showSelectDrop(): void {\r\n            // 设置selectDrop的选中项\r\n            this.selectDrop.listCom.model = undefined;\r\n\r\n            // 显示下拉面板\r\n            if (this.selectDrop.searchResult.length > 0) {\r\n                  this.selectDrop.show();\r\n            }\r\n\r\n            // 不设置待选中项\r\n            this.selectDrop.listCom.hoverOption = undefined;\r\n      }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TiTagsInputComponent } from './TiTagsInputComponent';\r\nimport { TiDropsearchModule } from '../dropsearch/TiDropsearchModule';\r\nimport { TiTextModule } from '../text/TiTextModule';\r\nimport { TiDominatorModule } from '../dominator/TiDominatorModule';\r\n/**\r\n *\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TiDominatorModule,\r\n    TiDropsearchModule,\r\n    TiTextModule\r\n  ],\r\n  exports: [TiTagsInputComponent],\r\n  declarations: [TiTagsInputComponent]\r\n})\r\nexport class TiTagsInputModule {\r\n}\r\nexport { TiTagsInputComponent } from './TiTagsInputComponent';\r\n","import {\r\n    AfterViewChecked,\r\n    AfterViewInit,\r\n    Component,\r\n    DoCheck,\r\n    ElementRef,\r\n    Input,\r\n    NgZone,\r\n    OnDestroy,\r\n    OnInit,\r\n    Optional,\r\n    Renderer2,\r\n    ViewChild,\r\n    ViewEncapsulation,\r\n    Inject\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { TiBrowser, Util } from '../../utils/Util';\r\nimport { TiAutofocusComponent } from '../base/TiBaseModule';\r\nimport { NgControl } from '@angular/forms';\r\n\r\n/**\r\n * Textarea文本框组件\r\n *\r\n * 文本框组件基于原生textarea标签进行扩展，原生textarea加tiTextarea属性指令即为textarea组件。\r\n *\r\n * <example-url>../tiny3demo/#/textarea/textarea-all</example-url>\r\n */\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: '[tiTextarea]', // 指定组件名称\r\n    templateUrl: './textarea.html', // 指定组件模板\r\n    styleUrls: ['./textarea.less'], // 样式路径\r\n    host: {\r\n        '(focus)': 'onFocus()'\r\n    },\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\n\r\nexport class TiTextareaComponent extends TiAutofocusComponent implements OnInit, AfterViewChecked, AfterViewInit, DoCheck, OnDestroy {\r\n    /**\r\n     * 用来调整文本框大小，该属性提供了四个属性值:\r\n     *\r\n     * none(不可调整组件大小):\r\n     *\r\n     * vertical(仅可调整垂直方向的大小，即调整组件的高度)\r\n     *\r\n     * horizontal(仅可调节水平方向的大小，即调整组件的宽度)\r\n     *\r\n     * both(水平和垂直方向均可调节，宽高都可调节)\r\n     */\r\n    @Input() resize: 'none' | 'vertical' | 'horizontal' | 'both' = 'both';\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('resize') private resizeIconRef: ElementRef;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('maxlength') private eleCharacterRef: ElementRef;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('charactersCount') private charactersCountRef: ElementRef;\r\n    /**\r\n     * @ignore\r\n     * 是否设置maxlength属性\r\n     */\r\n    public hasMaxlength: boolean;\r\n    /**\r\n     * @ignore\r\n     * 用户设置的最大值\r\n     */\r\n    public maxLength: number;\r\n    /**\r\n     * @ignore\r\n     * 当前输入内容的长度\r\n     */\r\n    public countLength: number;\r\n    // 用作拖动文本框大小\r\n    private options: any = {\r\n        $target: undefined,\r\n        storeWidth: 0,\r\n        storeHeight: 0,\r\n        mouseXPosition: 0,\r\n        mouseYPosition: 0\r\n    };\r\n    // 默认最大最小宽高\r\n    private defaultStyle: any = {\r\n        minWidth: 60,\r\n        minHeight: 64,\r\n        maxWidth: 1280,\r\n        maxHeight: 9999\r\n    };\r\n    private element: HTMLTextAreaElement; // 宿主元素\r\n    private attrs: NamedNodeMap; // 宿主元素的属性\r\n    private container: HTMLDivElement; // 创建div标签\r\n    private textAreaMinWidth: number; // 最小宽度\r\n    private textAreaMinHeight: number; // 最小高度\r\n    private textAreaMaxWidth: number; // 最大宽度\r\n    private textAreaMaxHeight: number; // 最大高度\r\n    private isVisibleInit: boolean; // 标志初始时是否可见\r\n    private isFirstFocus: boolean = true; // 是否为第一次聚焦\r\n    private documentMouseMoveListener: () => void;\r\n    private documentMouseUpListener: () => void;\r\n\r\n    constructor(elementRef: ElementRef,\r\n                renderer: Renderer2,\r\n                private zone: NgZone,\r\n                @Optional() private formControl: NgControl,\r\n                @Inject(DOCUMENT) private document) {\r\n        super(elementRef, renderer);\r\n        this.element = elementRef.nativeElement; // 获取宿主元素\r\n        this.attrs = this.element.attributes; // 可以根据属性名获取各个属性\r\n        this.container = this.renderer.createElement('div'); // 创建div标签\r\n        this.renderer.addClass(this.container, 'ti3-textarea-container');\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        // 初始化maxlength属性\r\n        this.hasMaxlength = Util.isUndefined(this.attrs['maxlength']) ? false : true;\r\n        // 原生不设置maxlength属性时该值为-1;\r\n        this.maxLength = this.hasMaxlength ? this.element.maxLength : -1;\r\n        // 文本框的值发生变化时触发\r\n        // 使用ngModel初始赋值时，触发valueChanges。\r\n        // 使用formControl初始赋值时，不会触发valueChanges。\r\n        if (this.formControl) {\r\n            this.formControl.valueChanges.subscribe((value: any) => {\r\n                this.setCountLength();\r\n            });\r\n        }\r\n\r\n        // 使用formControl初始赋值时，初始化不会触发valueChanges，所以此处额外执行一次。\r\n        // 使用ngModel初始赋值时，此处通过this.element.value拿到的值为空字符串，无法正确显示当前输入内容的长度\r\n        this.setCountLength();\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        // 如果祖先元素中display为none，获取到的组件的宽度为0,元素不可见\r\n        this.isVisibleInit = this.element.offsetWidth !== 0;\r\n        if (this.isVisibleInit) {\r\n            // 设置container的样式\r\n            this.setContainerSize();\r\n            // 初始化创建dom\r\n            this.initFn();\r\n        }\r\n\r\n        // 将宿主元素的样式类移到container上\r\n        this.setContainerClass();\r\n\r\n        // maxLength接口添加样式\r\n        this.setMaxLengthFn();\r\n\r\n        // 处理resize功能\r\n        this.resizeFn();\r\n        // 上面执行完初始化dom后，调用父类的ngAfterViewInit去设置autofocus\r\n        super.ngAfterViewInit();\r\n    }\r\n\r\n    ngAfterViewChecked(): void {\r\n        // 初始祖先元素中display为none，之后第一次由none变成可见时，需要重置silder\r\n        if (!this.isVisibleInit && this.element.offsetWidth !== 0) {\r\n            this.setContainerSize();\r\n            // 初始化创建dom\r\n            this.initFn();\r\n            this.isVisibleInit = true;\r\n        }\r\n\r\n        // 处理灰化功能\r\n        if (this.element.disabled) {\r\n            this.renderer.addClass(this.container, 'ti3-textarea-container-disable');\r\n        } else {\r\n            this.renderer.removeClass(this.container, 'ti3-textarea-container-disable');\r\n        }\r\n        // 修复SSR报错：ERROR ReferenceError: getComputedStyle is not defined\r\n        if(typeof getComputedStyle === 'undefined'){\r\n            return;\r\n        }\r\n        // 处理通过设置display的方式隐藏组件：内部生成的dom也需要隐藏\r\n        if (getComputedStyle(this.element).display === 'none') {\r\n            this.renderer.setStyle(this.container, 'display', 'none');\r\n        } else {\r\n            this.renderer.setStyle(this.container, 'display', 'block');\r\n        }\r\n    }\r\n    // maxlength通过接口传值需触发重新判断，因为init函数中执行较早且只执行一次。\r\n    ngDoCheck(): void {\r\n        this.hasMaxlength = Util.isUndefined(this.attrs['maxlength']) ? false : true;\r\n        this.maxLength = this.hasMaxlength ? this.element.maxLength : -1;\r\n    }\r\n\r\n    // 销毁组件时需要将内部生成dom也移除\r\n    ngOnDestroy(): void {\r\n        this.renderer.removeChild(this.renderer.parentNode(this.container), this.container);\r\n        if (this.documentMouseMoveListener) {\r\n            this.documentMouseMoveListener();\r\n        }\r\n        if (this.documentMouseUpListener) {\r\n            this.documentMouseUpListener();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public onFocus(): void {\r\n        // IE和火狐浏览器在首次autofoucus聚焦时会将光标移到文字起始位置，用户体验不好\r\n        // 需要手动设置光标位置到行尾\r\n        if (this.isFirstFocus && this.element.autofocus &&\r\n            (TiBrowser.isFirefox() || TiBrowser.isIE())) {\r\n            this.element.setSelectionRange(this.element.value.length,\r\n                this.element.value.length);\r\n        }\r\n        this.isFirstFocus = false;\r\n    }\r\n\r\n    private setContainerSize(): void {\r\n        // 修正SSR错误：ERROR ReferenceError: getComputedStyle is not defined\r\n        if (typeof getComputedStyle === 'undefined') {\r\n            return;\r\n        }\r\n        const containerHeight: string = getComputedStyle(this.element).height;\r\n        const containerWidth: string = getComputedStyle(this.element).width;\r\n         // 若服务在textarea上面设置margin外边距,会导致textarea所占的页面空间大于外框的宽高,所以要将textarea上设置的margin转移到外边框\r\n        const containerMargin: string = this.element.style.margin;\r\n\r\n        // 取掉宿主元素的margin属性:\r\n        this.element.style.margin = '';\r\n\r\n        // 设置this.container的width、height、margin\r\n        this.renderer.setStyle(this.container, 'height', containerHeight);\r\n        this.renderer.setStyle(this.container, 'width', containerWidth);\r\n        this.renderer.setStyle(this.container, 'margin', containerMargin);\r\n    }\r\n\r\n    private setContainerClass(): void {\r\n      // 获取未经过angular解析后的属性需要在onint中处理：若服务在textarea添加class，则把其加到父容器上\r\n      const cNames: string = this.element.className;\r\n      if (cNames) {\r\n        const cNameArr: Array<string> = this.element.className.split(' '); // 存在多个class\r\n        for (const cName of cNameArr) {\r\n            // 跟校验有关的样式是以\"ng-\"开头，如果转移到外部容器上会影响校验样式\r\n            if (!/^ng-/.test(cName)) {\r\n                this.renderer.removeClass(this.element, cName);\r\n                this.renderer.addClass(this.container, cName);\r\n            }\r\n        }\r\n      }\r\n    }\r\n\r\n    // 初始化创建dom\r\n    private initFn(): void {\r\n        const pNode: any = this.renderer.parentNode(this.element); // 找到宿主元素父元素\r\n        const nextNode: any = this.renderer.nextSibling(this.element); // 找到宿主元素的兄弟元素\r\n\r\n        // 将宿主元素包裹在this.container里边：\r\n        this.renderer.removeChild(pNode, this.element); // 从父元素中移除宿主元素\r\n        this.renderer.appendChild(this.container, this.element); // 将宿主元素放入创建的div标签中\r\n        this.renderer.insertBefore(pNode, this.container, nextNode);\r\n\r\n        if (this.resize !== 'none') {\r\n            this.moveNode(this.resizeIconRef.nativeElement);\r\n        }\r\n\r\n        if (this.hasMaxlength) {\r\n            this.moveNode(this.eleCharacterRef.nativeElement);\r\n        }\r\n\r\n    }\r\n\r\n    private moveNode(node: Element): void {\r\n        this.renderer.removeChild(this.element, node);\r\n        this.renderer.appendChild(this.container, node);\r\n    }\r\n\r\n    // maxLength接口\r\n    private setMaxLengthFn(): void {\r\n            // 添加字数限制与当前输入字数显示功能\r\n            if (this.attrs['maxlength'] && !isNaN(this.maxLength)) {\r\n                // 有maxlength限制时给外框div加上标志类 ti3-textarea-container-counter\r\n                this.renderer.addClass(this.container, 'ti3-textarea-container-counter');\r\n            } else {\r\n                this.renderer.removeClass(this.container, 'ti3-textarea-container-counter');\r\n            }\r\n    }\r\n\r\n    // resize接口\r\n    private resizeFn(): void {\r\n        if (this.resize === 'none') {\r\n            return;\r\n        }\r\n\r\n        this.textAreaMinWidth = this.getSizeNumber('minWidth');\r\n        this.textAreaMinHeight = this.getSizeNumber('minHeight');\r\n        this.textAreaMaxWidth = this.getSizeNumber('maxWidth');\r\n        this.textAreaMaxHeight = this.getSizeNumber('maxHeight');\r\n\r\n        // 清除textarea上的样式\r\n        this.renderer.setStyle(this.element, 'minWidth', '');\r\n        this.renderer.setStyle(this.element, 'minHeight', '');\r\n        this.renderer.setStyle(this.element, 'maxWidth', '');\r\n        this.renderer.setStyle(this.element, 'maxHeight', '');\r\n\r\n        this.zone.runOutsideAngular(() => { // 避免不停触发变化检测\r\n            // resizeIconRef模板的mousedown事件\r\n            this.renderer.listen(this.resizeIconRef.nativeElement, 'mousedown', ($event: MouseEvent) => {\r\n                this.renderer.addClass(this.element, 'ti3-textarea-resize-border'); // 拖拽时边框颜色为聚焦时\r\n                this.options.$target = $event.target;\r\n                this.options.mouseXPosition = $event.pageX;\r\n                this.options.mouseYPosition = $event.pageY;\r\n                // 在拖动前获取当前文本框最新的高度、宽度\r\n                this.updateTextAreaSize();\r\n                // 给页面设置不可选样式，避免拖动时页面出现被选中的蓝色区域\r\n                this.toggleTextSelection(true);\r\n            });\r\n\r\n            // resizeIconRef模板的mouseup事件\r\n            this.renderer.listen(this.resizeIconRef.nativeElement, 'mouseup', ($event: MouseEvent) => {\r\n                this.renderer.removeClass(this.element, 'ti3-textarea-resize-border');\r\n            });\r\n\r\n            this.documentMouseMoveListener = this.renderer.listen(this.document, 'mousemove', this.mouseMoveHandlerFn);\r\n            this.documentMouseUpListener = this.renderer.listen(this.document, 'mouseup', this.mouseUpHandlerFn);\r\n        });\r\n    }\r\n\r\n    private setCountLength(): void {\r\n        if (this.hasMaxlength) {\r\n            this.countLength = this.element.value.length;\r\n            // safari浏览器回车键是按两个字计算\r\n            if (TiBrowser.isSafari()) {\r\n                this.countLength = this.countLength + this.element.value.split('\\n').length - 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    // 拖动函数\r\n    private mouseMove(event: MouseEvent): void {\r\n       // 阻止调整文本框大小时文本框聚焦\r\n       event.preventDefault();\r\n       const width: number = this.options.storeWidth;\r\n       const height: number = this.options.storeHeight;\r\n       const horizonWidth: number = event.pageX - this.options.mouseXPosition;\r\n       const verticalHeight: number = event.pageY - this.options.mouseYPosition;\r\n\r\n       if (this.resize !== 'vertical' && (width + horizonWidth) >= this.textAreaMinWidth\r\n           && (width + horizonWidth) < this.textAreaMaxWidth) {\r\n           // 更新textarea宽度\r\n           this.options.storeWidth += horizonWidth;\r\n           // 调整width\r\n           this.renderer.setStyle(this.container, 'width', `${this.options.storeWidth}px`);\r\n       }\r\n\r\n       if (this.resize !== 'horizontal' && (height + verticalHeight) >= this.textAreaMinHeight\r\n           && (height + verticalHeight) < this.textAreaMaxHeight) {\r\n           // 更新textarea高度\r\n           this.options.storeHeight += verticalHeight;\r\n           this.renderer.setStyle(this.container, 'height', `${this.options.storeHeight}px`);\r\n       }\r\n\r\n       // 更新光标位置\r\n       this.options.mouseXPosition = event.pageX;\r\n       this.options.mouseYPosition = event.pageY;\r\n    }\r\n\r\n    private stopResize(): void {\r\n        this.options.mouseXPosition = 0;\r\n        this.options.mouseYPosition = 0;\r\n        this.updateTextAreaSize();\r\n        this.options.$target = null;\r\n    }\r\n\r\n    // 获取min-width、min-height等的样式值\r\n    private  getSizeNumber(value: string): number {\r\n        const val: string = this.element.style[value]; // 可实现获取样式\r\n\r\n        if (val !== 'none' && val !== '') {\r\n            return parseFloat(val.replace(/px/, ''));\r\n        }\r\n\r\n        return  this.defaultStyle[value];\r\n    }\r\n\r\n    // 在拖动前获取当前文本框最新的高度、宽度\r\n    private updateTextAreaSize(): void {\r\n        this.options.storeWidth = this.container.clientWidth;\r\n        this.options.storeHeight = this.container.clientHeight;\r\n    }\r\n\r\n    // 给页面设置不可选样式，避免拖动时页面出现被选中的蓝色区域\r\n    private toggleTextSelection(toggle: boolean): void {\r\n        const body: any = this.document.getElementsByTagName('body');\r\n        if (toggle) {\r\n            this.renderer.addClass(body[0], 'ti3-unselectable');\r\n            this.renderer.setAttribute(body[0], 'unselectable', 'on');\r\n        } else {\r\n            this.renderer.removeClass(body[0], 'ti3-unselectable');\r\n            this.renderer.removeAttribute(body[0], 'unselectable');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 绑定在document上的mouseMove事件\r\n     */\r\n    public mouseMoveHandlerFn = ($event: MouseEvent): void => {\r\n        if (this.element.disabled) {\r\n            return;\r\n        }\r\n\r\n        // 拖动的动作应该是先mousedown，然后mousemove，因此先判断是否已经触发了mousedown\r\n        if (this.options.mouseXPosition === 0 && this.options.mouseYPosition === 0 || !this.options.$target) {\r\n            return;\r\n        }\r\n        this.mouseMove($event);\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 绑定在document上的mouseUp事件\r\n     */\r\n    public mouseUpHandlerFn = (): void => {\r\n        if (this.element.disabled) {\r\n            return;\r\n        }\r\n\r\n        // 解决问题：当拖动鼠标时，鼠标不在小三角上时，鼠标放开不会移除样式\r\n        // 为确保鼠标弹起时, textarea的边框样式恢复默认:\r\n        if (this.isResizing()) {\r\n            this.renderer.removeClass(this.element, 'ti3-textarea-resize-border');\r\n        }\r\n        try {\r\n            this.stopResize();\r\n            this.toggleTextSelection(false);\r\n        } catch (e) {}\r\n    }\r\n\r\n    private isResizing(): boolean {\r\n        return this.element.className.indexOf('ti3-textarea-resize-border') > -1;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { TiLocaleFormat } from '../../locale/TiLocaleFormat';\r\n\r\n/**\r\n * @ignore\r\n * TiFormatNumPipe 对textarea字数统计的数字进行国际化处理\r\n *\r\n */\r\n@Pipe({ name: 'tiFormatNum' })\r\nexport class TiFormatNumPipe implements PipeTransform {\r\n    private numberFormat: string = '1.0-0'; // 整数位保留最小位数.小数位保留最小位数-小数位最大保留位置\r\n    transform(value: number): string {\r\n        return TiLocaleFormat.formatNumber(value, this.numberFormat);\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiTextareaComponent } from './TiTextareaComponent';\r\nimport { TiFormatNumPipe } from './TiFormatNumPipe';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  exports: [TiTextareaComponent],\r\n  declarations: [TiTextareaComponent, TiFormatNumPipe]\r\n})\r\nexport class TiTextareaModule {\r\n\r\n}\r\nexport { TiTextareaComponent } from './TiTextareaComponent';\r\n","import { Util } from '../../utils/Util';\r\nimport { TiTreeNode, TiTreeDragNode } from './TiTreeComponent';\r\n/**\r\n *\r\n * 用于封装给树组件 [TiTreeComponent]{@link ../components/TiTreeComponent.html}\r\n * 提供公共方法，包括增、删、改、查、选中、取消选中、遍历、筛选、获取选中项等操作\r\n */\r\nexport class TiTreeUtil {\r\n    private static selectedData: Array<TiTreeNode> = [];\r\n    private static pnode: Array<TiTreeNode> = [];\r\n    /**\r\n     * 根据某node节点查找其父节点\r\n     * @param  data 所有节点数据\r\n     * @param node 已知node节点\r\n     */\r\n    public static getParentNode(data: Array<TiTreeNode>, node: TiTreeNode): TiTreeNode {\r\n        if (!Array.isArray(data)) {\r\n            return;\r\n        }\r\n\r\n        for (const item of data) {\r\n            if (!TiTreeUtil.isLeaf(item)) {\r\n                if (item.children.indexOf(node) !== -1) {\r\n                    return item;\r\n                } else {\r\n                    const result: TiTreeNode = TiTreeUtil.getParentNode(item.children, node);\r\n                    if (result) {\r\n                        return result;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 遍历整个树\r\n     * @param data 所有节点数据\r\n     * @param traverseFn 对各个节点执行的操作\r\n     */\r\n    public static traverse(data: Array<TiTreeNode>, traverseFn: Function): void {\r\n        if (!Util.isFunction(traverseFn) || !Array.isArray(data)) {\r\n            return;\r\n        }\r\n\r\n        for (const item of data) {\r\n            traverseFn(item);\r\n            if (!TiTreeUtil.isLeaf(item)) {\r\n                TiTreeUtil.traverse(item.children, traverseFn);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 多选树，更新各节点的选中状态。\r\n     * 适用场景：手动添加或删除若干节点，当前节点的兄弟节点和父节点的选中状态不一致。\r\n     * 10.0.1 新增\r\n     * @param data  所有节点数据\r\n     */\r\n    public static updateChecked(data: Array<TiTreeNode>): void {\r\n        TiTreeUtil.check(data);\r\n    }\r\n\r\n    /**\r\n     * 检查但前数据的多选状态\r\n     * @param data 当前节点集合\r\n     * @param allData 全部数据集合\r\n     */\r\n    private static check(data: Array<TiTreeNode>, allData?: Array<TiTreeNode>): void {\r\n        let resultData: Array<TiTreeNode>;\r\n        // 如果不传allData，data 是所有数据，此函数递归调用，data之后不是全部数据\r\n        resultData = !allData ? data : allData;\r\n        for (const item of data) {\r\n            if (!TiTreeUtil.isLeaf(item)) {\r\n                if (TiTreeUtil.isLeafsParentNode(item)) {\r\n                    // 根据子叶子节点计算当前节点的复选状态\r\n                    const computedChecked: boolean | string = TiTreeUtil.computeChecked(item);\r\n                    if (computedChecked !== item.checked) {\r\n                        item.checked = computedChecked;\r\n                        if (computedChecked === true) {\r\n                            TiTreeUtil.selectParents(item, resultData, true);\r\n                        } else {\r\n                            TiTreeUtil.deSelectParents(item, resultData);\r\n                        }\r\n                    }\r\n                } else {\r\n                    TiTreeUtil.check(item.children, resultData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 当前节点是否是叶子节点的父节点，\r\n     * 因为更新节点的选中状态时，根据叶子节点的选中状态计算出父节点的选中状态，再更新父节点的选中状态。\r\n     * @param node 当前节点\r\n     */\r\n    private static isLeafsParentNode(node: TiTreeNode): boolean {\r\n        if (!Array.isArray(node.children)) {\r\n            return false;\r\n        } else {\r\n            for (const child of node.children) {\r\n                if (Array.isArray(child.children)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据子节点的多选状态，计算出当前节点的多选状态\r\n     * @param node 当前节点\r\n     */\r\n    private static computeChecked(node: TiTreeNode): boolean | string {\r\n        const childrens: Array<TiTreeNode> = node.children;\r\n        let selectedNum: number = 0;\r\n        let unSelectedNum: number = 0;\r\n        for (const child of childrens) {\r\n            if (child.checked === true) {\r\n                selectedNum++;\r\n            } else if (!child.checked) { // false和undefined 两种\r\n                unSelectedNum++;\r\n            }\r\n        }\r\n        if (selectedNum === childrens.length) {\r\n            return true;\r\n        } else if (unSelectedNum === childrens.length) {\r\n            return false;\r\n        } else {\r\n            return 'indeterminate';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 添加节点\r\n     * @param data 所有节点数据\r\n     * @param node  需要添加的节点：一个或多个节点\r\n     * @param index  添加的位置: -1表示从尾部追加\r\n     * @param pNode 指定要添加的节点的父节点，如果没有指定的话默认添加到根节点\r\n     */\r\n    public static addNode(data: Array<TiTreeNode>, node: Array<TiTreeNode>, index: any, pNode?: TiTreeNode): void {\r\n        const k: number = parseInt(index, 10);\r\n        if (isNaN(k) || !Array.isArray(data)) {\r\n            return;\r\n        }\r\n\r\n        const nodes: Array<TiTreeNode> = Array.isArray(node) ? node : [node];\r\n        // 当没有指定父节点时，默认将节点添加到根节点\r\n        if (!pNode) {\r\n            const resuleIndex: any = index === -1 ? data.length : index;\r\n            for (let i: number = 0; i < nodes.length; i++) {\r\n                data.splice(resuleIndex + i, 0, nodes[i]);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // 如果父节点是叶子节点时，给叶子节点添加children数组\r\n        if (TiTreeUtil.isLeaf(pNode)) {\r\n            pNode.children = [];\r\n        }\r\n\r\n        // 根据Index值，将node插入指定位置\r\n        if (index === -1) {\r\n            pNode.children = pNode.children.concat(nodes); // 返回值为新数组\r\n        } else {\r\n            for (let j: number = 0; j < nodes.length; j++) {\r\n                pNode.children.splice(index + j, 0, nodes[j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 删除一个节点\r\n     * @param  data 所有节点数据\r\n     * @param  node  节点\r\n     */\r\n    public static removeNode(data: Array<TiTreeNode>, node: TiTreeNode): void {\r\n        if (!Array.isArray(data)) {\r\n            return;\r\n        }\r\n\r\n        // 找到不匹配搜索内容的叶子节点并删除。为了避免要删除的元素在数组中的索引改变，从后向前循环\r\n        for (let i: number = data.length - 1; i >= 0; i--) {\r\n            if (data[i] === node) {\r\n                TiTreeUtil.deleteArr(data, i);\r\n\r\n                return;\r\n            }\r\n\r\n            if (!TiTreeUtil.isLeaf(data[i])) {\r\n                TiTreeUtil.removeNode(data[i].children, node);\r\n            }\r\n        }\r\n    }\r\n    // 3.0.3 selectNode/unSelectNode第三个参数：是否单选, 改为是否多选。已确认无人使用。\r\n    // TODO：这两个函数的重复代码，可以合并\r\n    /**\r\n     * 选中某个节点\r\n     * @param  data 所有节点数据\r\n     * @param  node  节点\r\n     * @param  multiple 是否多选模式\r\n     */\r\n    public static selectNode(data: Array<TiTreeNode>, node: TiTreeNode, multiple: boolean): void {\r\n        if (!Array.isArray(data)) {\r\n            return;\r\n        }\r\n        if (!multiple) { // 单选模式\r\n            TiTreeUtil.traverse(data, (travNode: TiTreeNode): void => {\r\n                travNode.checked = false; // 清空所有的选中项\r\n            });\r\n            node.checked = true; // 将当前项置为选中\r\n        } else { // 多选\r\n            TiTreeUtil.selectAllChildren(node); // 先置当前节点选中，如果当前节点是非叶子节点 递归让其子节点全部选中\r\n            TiTreeUtil.selectParents(node, data, true); // 设置父节点选中情况\r\n        }\r\n    }\r\n    // TODO:Tiny4 deselect改为unselect\r\n    /**\r\n     * 取消选中某个节点\r\n     * @param data 所有节点数据\r\n     * @param node  节点\r\n     * @param multiple 是否多选模式\r\n     */\r\n    public static deSelectNode(data: Array<TiTreeNode>, node: TiTreeNode, multiple: boolean): void {\r\n        if (!Array.isArray(data)) {\r\n            return;\r\n        }\r\n        if (!multiple) {\r\n            TiTreeUtil.traverse(data, (travNode: TiTreeNode): void => {\r\n                travNode.checked = false; // 清空所有的选中项\r\n            });\r\n        } else {\r\n            TiTreeUtil.deSelectAllChildren(node);\r\n            TiTreeUtil.deSelectParents(node, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 展开id所有父节点\r\n     * @param  data 所有节点数据\r\n     * @param  node  节点\r\n     */\r\n    public static expandNode(data: Array<TiTreeNode>, node: TiTreeNode): boolean {\r\n        if (!Array.isArray(data)) {\r\n            return;\r\n        }\r\n\r\n        let num: number = 0;\r\n        let result: boolean = false;\r\n        for (const item of data) {\r\n            if (item === node) {\r\n                num++;\r\n            } else if (!TiTreeUtil.isLeaf(item)) {\r\n                result = TiTreeUtil.expandNode(item.children, node);\r\n                if (result) {\r\n                    item.expanded = true;\r\n                    num++;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (num > 0);\r\n    }\r\n\r\n    /**\r\n     * 根据用户传入的方法筛选节点的数据\r\n     * @param data 所有节点数据\r\n     * @param  matchFn 用户传入匹配节点的方法\r\n     * @returns 是否找到\r\n     */\r\n    public static search(data: Array<TiTreeNode>, matchFn: (node: TiTreeNode) => boolean): boolean {\r\n        if (!Util.isFunction(matchFn) || !Array.isArray(data)) {\r\n            return false;\r\n        }\r\n\r\n        let findNum: number = 0;\r\n        let isFind: boolean = false;\r\n        // 找到不匹配搜索内容的叶子节点并删除。为了避免要删除的元素在数组中的索引改变，从后向前循环\r\n        for (let i: number = data.length - 1; i >= 0; i--) {\r\n            if (!matchFn(data[i]) && !TiTreeUtil.isLeaf(data[i])) { // 未匹配到且为父节点\r\n                isFind = TiTreeUtil.search(data[i].children, matchFn);\r\n                if (isFind) {\r\n                    findNum++;\r\n                } else {\r\n                    TiTreeUtil.deleteArr(data, i);\r\n                }\r\n            } else if (matchFn(data[i])) { // 匹配到\r\n                findNum++;\r\n            } else { // 未匹配到且为叶子节点\r\n                TiTreeUtil.deleteArr(data, i);\r\n            }\r\n        }\r\n\r\n        return (findNum > 0);\r\n    }\r\n\r\n    /**\r\n     * 获取选中项\r\n     * @param data 所有节点数据\r\n     * @param  onlySelectLeaf 选中项中是否只包含叶子节点\r\n     * @param  multiple 是否多选模式\r\n     */\r\n    public static getSelectedData(data: Array<TiTreeNode>, onlySelectLeaf: boolean, multiple: boolean): Array<TiTreeNode> {\r\n        // 每次遍历之前需要清空当前选中项列表\r\n        TiTreeUtil.selectedData = [];\r\n        TiTreeUtil.querySelectedNode(data, onlySelectLeaf, multiple);\r\n\r\n        return TiTreeUtil.selectedData;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @description 根据整棵树的节点数据，查询所有选中项，并更新selectedData\r\n     * @param data 全部节点数据\r\n     * @param onlySelectLeaf 全部节点数据\r\n     */\r\n    public static querySelectedNode(data: Array<TiTreeNode>, onlySelectLeaf: boolean, multiple: boolean): void {\r\n        let tempNode: any;\r\n        for (let i: number = 0; i < data.length; i++) {\r\n            tempNode = data[i];\r\n\r\n            if (TiTreeUtil.checkedParentNode(tempNode)) { // 父节点半选或选中\r\n                TiTreeUtil.pnode.push(tempNode);\r\n                TiTreeUtil.querySelectedNode(tempNode.children, onlySelectLeaf, multiple);\r\n\r\n                // 单选情况下仅查找到第一个选中的叶子节点即可\r\n                if (!multiple) {\r\n                    break;\r\n                }\r\n            } else if (TiTreeUtil.checkedLeafNode(tempNode)) { // 叶子节点选中\r\n                TiTreeUtil.selectedData.push(tempNode);\r\n\r\n                if (!onlySelectLeaf) {\r\n                    tempNode.parent = TiTreeUtil.pnode.concat();\r\n                    // 单选情况下仅查找到第一个选中的叶子节点即可\r\n                    if (!multiple) {\r\n                        TiTreeUtil.pnode.splice(0, TiTreeUtil.pnode.length);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // 遍历到最后一项时将父节点从pnode中移除\r\n            if (i === data.length - 1) {\r\n                TiTreeUtil.pnode.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @description 判断节点node是否是一个处于选中或半选状态的父节点\r\n     * @param node 节点数据\r\n     */\r\n    public static checkedParentNode(node: TiTreeNode): boolean {\r\n        return (node.checked === true || node.checked === 'indeterminate') && !TiTreeUtil.isLeaf(node);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @description 判断节点node是否是一个处于选中状态的叶子节点\r\n     * @param node 节点数据\r\n     */\r\n    public static checkedLeafNode(node: TiTreeNode): boolean {\r\n        return (node.checked === true) && (TiTreeUtil.isLeaf(node));\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 判断是否为叶子节点\r\n     */\r\n    public static isLeaf(item: TiTreeNode): boolean {\r\n        return !(Util.isArray(item.children));\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 从数组arr中删除下标为index的节点\r\n     */\r\n    public static deleteArr(arr: Array<TiTreeNode>, index: number): void {\r\n        arr.splice(index, 1);\r\n    }\r\n    // TODO: checked传入false时，与deSelectParents有什么区别？可以合并么？\r\n    /**\r\n     * @ignore\r\n     * 当子节点选中时，设置祖先元素的选中状态\r\n     * @param item 子节点的数据\r\n     * @param allData 全部节点数据\r\n     * @param checked 取值为：true/false/'indeterminate'\r\n     */\r\n    public static selectParents(item: TiTreeNode, allData: Array<TiTreeNode>, checked: boolean | string): void {\r\n        const pNode: TiTreeNode = TiTreeUtil.getParentNode(allData, item);\r\n        if (Util.isUndefined(pNode)) {\r\n            return;\r\n        }\r\n\r\n        // 当子元素为半选时，祖先元素一律设置为半选状态\r\n        if (checked === 'indeterminate') {\r\n            pNode.checked = 'indeterminate';\r\n            TiTreeUtil.selectParents(pNode, allData, 'indeterminate');\r\n\r\n            return;\r\n        }\r\n\r\n        const childrens: Array<TiTreeNode> = pNode.children;\r\n        let selectedNum: number = 0;\r\n        for (const child of childrens) {\r\n            if (child.checked === true) {\r\n                selectedNum++;\r\n            }\r\n        }\r\n\r\n        if (selectedNum === childrens.length) {\r\n            pNode.checked = true;\r\n            TiTreeUtil.selectParents(pNode, allData, true);\r\n        } else {\r\n            pNode.checked = 'indeterminate';\r\n            TiTreeUtil.selectParents(pNode, allData, 'indeterminate');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 根据父节点选择子节点\r\n     */\r\n    public static selectAllChildren(item: TiTreeNode): void {\r\n        // 如果子节点是禁用状态不做处理；\r\n        if (item.disabled !== true) {\r\n            item.checked = true;\r\n        }\r\n\r\n        if (!TiTreeUtil.isLeaf(item)) {\r\n            item.children.forEach((child: TiTreeNode) => {\r\n                TiTreeUtil.selectAllChildren(child);\r\n            });\r\n        }\r\n    }\r\n\r\n    // TODO:Tiny4 deselect改为unselect\r\n    /**\r\n     * @ignore\r\n     * 多选状态下，父节点取消选中，置子节点都为取消选中状态\r\n     * @param item 子节点的数据\r\n     */\r\n    public static deSelectAllChildren(item: TiTreeNode): void {\r\n        if (item.disabled !== true) {\r\n            item.checked = false;\r\n        }\r\n        if (Util.isArray(item.children) && item.children.length > 0) {\r\n            item.children.forEach((child: TiTreeNode) => {\r\n                TiTreeUtil.deSelectAllChildren(child);\r\n            });\r\n        }\r\n    }\r\n\r\n    // TODO:Tiny4 deselect改为unselect\r\n    /**\r\n     * @ignore\r\n     * 当前节点取消选中时，设置祖先元素的选中状态\r\n     * @param item 当前节点的数据\r\n     * @param allData 全部的节点数据\r\n     */\r\n    public static deSelectParents(item: TiTreeNode, allData: Array<TiTreeNode>): void {\r\n        const pNode: TiTreeNode = TiTreeUtil.getParentNode(allData, item);\r\n        if (Util.isUndefined(pNode)) {\r\n            return;\r\n        }\r\n\r\n        const childrens: Array<TiTreeNode> = pNode.children;\r\n        let selectedNum: number = 0;\r\n        for (const child of childrens) {\r\n            if (child.checked === true || child.checked === 'indeterminate') {\r\n                selectedNum++;\r\n            }\r\n        }\r\n\r\n        if (selectedNum === 0) {\r\n            pNode.checked = false;\r\n            TiTreeUtil.deSelectParents(pNode, allData);\r\n        } else {\r\n            pNode.checked = 'indeterminate';\r\n            TiTreeUtil.selectParents(pNode, allData, 'indeterminate');\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * drop event\r\n     * @param event 拖拽数据\r\n     * @param data 所用节点数据\r\n     * @param multiple 多选\r\n     */\r\n    public static dropApply(event: TiTreeDragNode, data: Array<TiTreeNode>, multiple?: boolean) {\r\n        if (!Array.isArray(data)) {\r\n            return;\r\n        }\r\n        const dragNode: TiTreeNode = event.dragNode; // 拖拽节点\r\n        const dragParentNode: TiTreeNode = TiTreeUtil.getParentNode(data, dragNode); // 拖拽节点的父节点\r\n        const dropNode: TiTreeNode = event.targetNode; // 拖放节点\r\n        const dropParentNode: TiTreeNode = TiTreeUtil.getParentNode(data, dropNode); // 拖放节点的父节点\r\n        const dropPosition: number = event.dropPosition; // 拖拽位置\r\n        TiTreeUtil.removeNode(data, dragNode);\r\n        // 拖拽父节点无子节点时，删除children属性，此处是为解决当children为空时，展开收起图标还会存在的问题\r\n        if (dragParentNode?.children.length < 1) {\r\n            delete dragParentNode.children;\r\n        }\r\n        if (dropPosition === 0) {\r\n            TiTreeUtil.addNode(data, [dragNode], -1, dropNode);\r\n        } else {\r\n            let index: number;\r\n            if (!dropParentNode) { // 拖放节点为顶级级节点时\r\n                index = data.indexOf(dropNode);\r\n                if (dropPosition === -1) {\r\n                    data.splice(index, 0, dragNode);\r\n                } else {\r\n                    data.splice(index + 1, 0, dragNode);\r\n                }\r\n            } else {\r\n                index = dropParentNode.children.indexOf(dropNode);\r\n                if (dropPosition === -1) {\r\n                    TiTreeUtil.addNode(data, [dragNode], index , dropParentNode);\r\n                } else {\r\n                    TiTreeUtil.addNode(data, [dragNode], index + 1 , dropParentNode);\r\n                }\r\n            }\r\n        }\r\n        // 多选\r\n        if (multiple) {\r\n             TiTreeUtil.updateChecked(data);\r\n        }\r\n    }\r\n}\r\n","import { Component, ContentChild, ElementRef, EventEmitter, Input, IterableChanges, IterableDiffer,\r\n    IterableDiffers, Output, Renderer2, TemplateRef, ViewChildren, QueryList, ChangeDetectorRef} from '@angular/core';\r\nimport { Util, TiKeymap } from '../../utils/Util';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\nimport { TiTreeUtil } from './TiTreeUtil';\r\nimport { TiLocale  } from '../../locale/TiLocaleModule';\r\nimport { TiRenderer } from '../../services/renderer/TiRenderer';\r\n// TODO: 采用TiCheckgroup重构后，不需要那么多TreeUtil方法，不需要选中节点/取消选中节点方法。\r\n/**\r\n * 树组件中每个节点的配置\r\n */\r\nexport interface TiTreeNode {\r\n    /**\r\n     * 节点展示内容\r\n     */\r\n    label?: string;\r\n    /**\r\n     * 控制节点是否展开\r\n     */\r\n    expanded?: boolean;\r\n    /**\r\n     * 节点选中状态（多选场景）：选中，未选中，半选 true | false | 'indeterminate'\r\n     */\r\n    checked?: boolean | string;\r\n    /**\r\n     * 节点展开时的字体图标：节点图标的样式类名称\r\n     *\r\n     * 10.1.2版本之后可通过自定义模板添加图标及样式\r\n     */\r\n    expandIcon?: string;\r\n    /**\r\n     * 节点收起时的字体图标：节点图标的样式类名称\r\n     *\r\n     * 10.1.2版本之后可通过自定义模板添加图标及样式\r\n     */\r\n    collapseIcon?: string;\r\n    /**\r\n     * 控制多选的节点checkbox是否灰化\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * 子节点字段，一旦设置children: []，则认为该节点非叶子节点\r\n     */\r\n    children?: Array<TiTreeNode>;\r\n    /**\r\n     * 10.1.2 新增\r\n     * 异步加载状态，loading正在加载，error加载失败，success加载成功\r\n     */\r\n    loadStatus?: 'loading' | 'error' | 'success';\r\n    /**\r\n     * 10.1.4 新增\r\n     * 支持悬浮编辑功能\r\n     */\r\n    editable?: boolean;\r\n    /**\r\n     * 10.1.4 新增\r\n     * 支持悬浮增加功能\r\n     */\r\n    addable?: boolean;\r\n    /**\r\n     * 10.1.4 新增\r\n     * 支持悬浮删除功能\r\n     */\r\n    deleteable?: boolean;\r\n    /**\r\n     * 允许有多余的属性字段\r\n     */\r\n    [propName: string]: any;\r\n}\r\n/**\r\n * 10.1.4 新增\r\n * drag info\r\n */\r\nexport interface TiTreeDragNode {\r\n    /**\r\n     * 事件对象\r\n     */\r\n    event?: DragEvent,\r\n    /**\r\n     * 目标节点\r\n     */\r\n    targetNode?: TiTreeNode,\r\n    /**\r\n     * 被拖拽的节点\r\n     */\r\n    dragNode?: TiTreeNode,\r\n    /**\r\n     * 放置位置，-1代表当前节点前，0代表当前节点里面，1代表当前节点后\r\n     */\r\n    dropPosition?: number\r\n }\r\n/**\r\n * Tree树组件\r\n *\r\n * 分类：支持单选、多选两种类型\r\n *\r\n * 公共方法：树组件提供 [TiTreeUtil]{@link ../classes/TiTreeUtil.html} 公共方法，包括增、删、改、查、选中、取消选中、遍历、筛选、获取选中项等操作\r\n *\r\n * <example-url>../tiny3demo/#/tree/tree-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-tree',\r\n    templateUrl: './tree.html',\r\n    styleUrls: ['./tree.less'],\r\n})\r\nexport class TiTreeComponent extends TiBaseComponent {\r\n    /**\r\n     * Tree组件使用的数据\r\n     */\r\n    @Input() data: Array<TiTreeNode>;\r\n    /**\r\n     * 设置多选树时，父节点是否可被点击选中，默认父节点子节点都显示复选框，都可被选中，设置false时，只有子节点前边显示复选框。\r\n     */\r\n    @Input() parentCheckable: boolean = true;\r\n    /**\r\n     * 设置是否为多选。\r\n     */\r\n    @Input() multiple: boolean = false;\r\n    /**\r\n     * 当为多选时该接口才生效。\r\n     *\r\n     * 默认为 false, 当设置为 true 时：\r\n     *\r\n     * 1.点击文本，复选框状态不会改变，只会触发select事件；\r\n     *\r\n     * 2.点击复选框只会触发change事件；\r\n     *\r\n     * 3.复选框disabled时，点击文本会触发select事件。\r\n     *\r\n     * Tiny3.1.1-alpha新增。\r\n     */\r\n    @Input() changedByCheckbox: boolean = false;\r\n    /**\r\n     * 10.1.2 新增\r\n     * 搜索传入的值,对匹配的文本高亮显示\r\n     */\r\n    @Input() highlightWords: string;\r\n    /**\r\n     * 10.1.4 新增\r\n     * 支持拖放\r\n     */\r\n    @Input() nodeDraggable: boolean = false;\r\n    /**\r\n     * 树节点展开前的事件回调，一般用于异步数据获取\r\n     */\r\n    @Output() readonly beforeExpand: EventEmitter<TiTreeComponent> = new EventEmitter<TiTreeComponent>();\r\n    /**\r\n     * 当用户点击某一节点时触发的事件\r\n     */\r\n    // tslint:disable-next-line:no-output-named-after-standard-event\r\n    @Output() readonly select: EventEmitter<TiTreeNode> = new EventEmitter<TiTreeNode>();\r\n    /**\r\n     * 当前选中项发生变化时，触发change事件\r\n     */\r\n    // tslint:disable-next-line:no-output-named-after-standard-event\r\n    @Output() readonly change: EventEmitter<TiTreeNode> = new EventEmitter<TiTreeNode>();\r\n    /**\r\n     * 10.1.4 新增\r\n     * drop event\r\n     */\r\n    @Output() readonly nodeDrop: EventEmitter<TiTreeDragNode> = new EventEmitter<TiTreeDragNode>();\r\n    /**\r\n     * 10.1.4 新增\r\n     * 悬浮增加节点按钮回调\r\n     */\r\n    @Output() readonly nodeAdded: EventEmitter<TiTreeNode> = new EventEmitter<TiTreeNode>();\r\n    /**\r\n     * 10.1.4 新增\r\n     * 悬浮编辑节点按钮回调\r\n     */\r\n    @Output() readonly nodeEdited: EventEmitter<TiTreeNode> = new EventEmitter<TiTreeNode>();\r\n    /**\r\n     * 10.1.4 新增\r\n     * 悬浮删除节点按钮回调\r\n     */\r\n    @Output() readonly nodeDeleted: EventEmitter<TiTreeNode> = new EventEmitter<TiTreeNode>();\r\n    /**\r\n     * 用于异步场景：当前点击需要展开的父节点\r\n     */\r\n    private beforeExpandNode: TiTreeNode;\r\n    /**\r\n     * 监听data改变\r\n     */\r\n    private dataDiffer: IterableDiffer<any>;\r\n    /**\r\n     * @ignore\r\n     * 获取到用户自定义的模板\r\n     */\r\n    @ContentChild(TemplateRef, /* TODO: add static flag */ { static: true }) itemTemplate: TemplateRef<any>;\r\n    /**\r\n     * @ignore\r\n     * 获取文本区域dom集合\r\n     */\r\n    @ViewChildren('nodeList') elems: QueryList<ElementRef>;\r\n    /**\r\n     * @ignore\r\n     * 模板中使用，高亮的选中项\r\n     */\r\n    public actived: TiTreeNode;\r\n    /**\r\n     * @ignore\r\n     * 词条\r\n     */\r\n    public treeLan = TiLocale.getLocaleWords().tiTree;\r\n    /**\r\n     * 被拖拽节点\r\n     */\r\n    private dragNode: TiTreeNode;\r\n    /**\r\n     * 拖拽position\r\n     */\r\n    private dropPosition: number;\r\n    /**\r\n     * 拖放经过的节点\r\n     */\r\n    private overNode: TiTreeNode;\r\n    constructor(protected elementRef: ElementRef,\r\n                protected renderer2: Renderer2,\r\n                protected iterableDiffers: IterableDiffers,\r\n                private tiRenderer: TiRenderer,\r\n                private cdRef: ChangeDetectorRef) {\r\n                super(elementRef, renderer2);\r\n    }\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.dataDiffer = this.iterableDiffers.find(this.data)\r\n                .create();\r\n        // 内部使用的数据，用于记录用户的操作改变\r\n        // TODO: 仅在初始化时挡非法数据，是不够的。建议去除。但因为要兼容已发出的版本，所以不去除。\r\n        this.data = !Util.isArray(this.data) ? [] : this.data;\r\n        // 初始化默认选中项高亮\r\n        this.actived = this.initActived(this.data);\r\n    }\r\n    ngDoCheck(): void {\r\n        super.ngDoCheck();\r\n        const dataChanges: IterableChanges<TiTreeNode> = this.dataDiffer.diff(this.data);\r\n        if (dataChanges) {\r\n            // 重新初始化默认选中项高亮\r\n            this.actived = this.initActived(this.data);\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * @description 判断是否显示复选框\r\n     * @param node 节点数据\r\n     */\r\n    public showCheckboxFn(node: TiTreeNode): boolean {\r\n        if (this.multiple !== true) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parentCheckable === true) {\r\n            return true;\r\n        }\r\n\r\n        return TiTreeUtil.isLeaf(node);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @description 点击父节点图标执行的逻辑\r\n     * @param  node 当前节点数据\r\n     */\r\n    public onClickPnodeIcon(node: TiTreeNode, event: MouseEvent): void {\r\n        if (node.disabled) {\r\n            return;\r\n        }\r\n        // 阻止事件冒泡：点击父节点图标无高亮样式\r\n        event.stopPropagation();\r\n        this.beforeExpandNode = node;\r\n        // 1.当前节点是展开状态\r\n        if (node.expanded) {\r\n            node.expanded = false;\r\n        } else if (this.beforeExpand.observers.length === 0) {  // 2.如果未定义beforeExpand事件(非异步)，点击时让节点展开\r\n            node.expanded = true;\r\n        } else { // 3.异步获取数据：将组件实例通知出去\r\n            this.beforeExpand.emit(this);\r\n        }\r\n    }\r\n\r\n    // 获取异步点击的节点\r\n    public getBeforeExpandNode(): TiTreeNode {\r\n        return this.beforeExpandNode;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @description 根据item的isExpanded属性获取item图标\r\n     * @param node 当前节点数据\r\n     */\r\n    public getItemIcon(node: TiTreeNode): string {\r\n        if (TiTreeUtil.isLeaf(node)) {\r\n            return `${node.expandIcon} ti3-tree-node-icon`;\r\n        }\r\n\r\n        return `${(node.expanded) ? node.expandIcon : node.collapseIcon} ti3-tree-node-icon`;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @description 点击复选框触发select、change事件\r\n     * 需要注意：click事件中拿到的是操作前的选中状态，而change事件中拿到的是操作后的选中状态\r\n     * @param node 当前节点数据\r\n     */\r\n    public onInputChange(node: TiTreeNode, event: Event): void {\r\n        if (node.disabled === true) {\r\n            return;\r\n        }\r\n        // 点击当前项高亮\r\n        this.actived = node;\r\n        this.setSeletedState(node, this.data, node.checked);\r\n        if (!this.changedByCheckbox) {\r\n            this.select.emit(node);\r\n        }\r\n        this.change.emit(node);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 点击文本区域\r\n     * @param node 当前节点数据\r\n     * @param event 鼠标事件\r\n     * @returns void\r\n     */\r\n    public onItemWrapperClick(node: TiTreeNode): void {\r\n        if (node.disabled === true || node.editing) {\r\n            return;\r\n        }\r\n        // 悬浮功能: 点击生成节点时，显示操作按钮\r\n        if (!node.editing) {\r\n            node.isHover = true;\r\n        }\r\n        // 点击当前项高亮\r\n        this.actived = node;\r\n        // 1.处理多选情况\r\n        if (this.multiple === true) {\r\n            if (this.changedByCheckbox) {\r\n                this.select.emit(node);\r\n\r\n                return;\r\n            }\r\n\r\n            // 1.1 处理父节点不支持多选\r\n            if (!this.showCheckboxFn(node)) {\r\n                return;\r\n            }\r\n\r\n            // 1.2 处理父节点支持多选\r\n            node.checked = !node.checked;\r\n            // 处理当前节点选中状态变化后，对父子节点的影响\r\n            this.setSeletedState(node, this.data, node.checked);\r\n            this.select.emit(node);\r\n            this.change.emit(node);\r\n\r\n            return;\r\n        }\r\n\r\n        // 2.处理单选场景\r\n        // 2.1(单选且已选中)或者(单选且非叶子节点)的情况下，点击只会触发select事件,因为当前选中项不会发生变化\r\n        if (node.checked === true || !TiTreeUtil.isLeaf(node)) {\r\n            // 触发select事件\r\n            this.select.emit(node);\r\n\r\n            return;\r\n        }\r\n\r\n        // 2.2单选叶子节点未选中\r\n        this.deSelectAllNode(this.data);\r\n        node.checked = true;\r\n        TiTreeUtil.selectParents(node, this.data, 'indeterminate'); // 设置祖先节点的选中状态\r\n\r\n        // 触发select和change事件\r\n        this.select.emit(node);\r\n\r\n        this.change.emit(node);\r\n    }\r\n\r\n\r\n    // 处理当前节点选中状态变化后，对父子节点的影响\r\n    private setSeletedState = (node: TiTreeNode, allData: Array<TiTreeNode>, checked: boolean | string): void => {\r\n        if (checked === true) {\r\n            TiTreeUtil.selectAllChildren(node);\r\n            TiTreeUtil.selectParents(node, allData, true);\r\n        } else {\r\n            TiTreeUtil.deSelectAllChildren(node);\r\n            TiTreeUtil.deSelectParents(node, allData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 单选时，取消所有节点的选中状态\r\n     * @param  allData 所有节点数据\r\n     */\r\n    private deSelectAllNode = (allData: Array<TiTreeNode>): void => {\r\n        allData.forEach((node: TiTreeNode) => {\r\n            TiTreeUtil.deSelectAllChildren(node);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public trackByFn(index: number, node: any): any {\r\n        return index;\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 判断是否为叶子节点\r\n     */\r\n    public isLeaf(node: TiTreeNode): boolean {\r\n        return !(Util.isArray(node.children));\r\n    }\r\n\r\n    // 初始化选中项高亮\r\n    private initActived = (data: Array<TiTreeNode>): any => {\r\n        let result: TiTreeNode;\r\n        for (const node of data) {\r\n            if (node.checked === true) {\r\n                return node;\r\n            }\r\n\r\n            if (!TiTreeUtil.isLeaf(node)) {\r\n                result = this.initActived(node.children);\r\n            }\r\n\r\n            if (!Util.isUndefined(result)) {\r\n                return result;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n    /**\r\n     * @ignore\r\n     * @param node 节点数据\r\n     */\r\n    public onBlur(node: TiTreeNode) {\r\n        if (node.focused) {\r\n            node.focused = false; // 失焦后节点删除获焦标志类\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * @param node 节点数据\r\n     */\r\n    public onFocus(node: TiTreeNode) {\r\n        if (!node.focused && !node.disabled) {\r\n            node.focused = true; // 设置获焦标志类\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     * @param event 键盘事件\r\n     * @param node 当前节点数据\r\n     */\r\n    public onKeydown(event: KeyboardEvent, node: TiTreeNode): void {\r\n        /**\r\n         * 快捷键交互定义\r\n         * 1,tab键切换焦点至树组件的文本区域，复选框无需提供焦点，文本样式为文本悬浮态\r\n         * 2,树组件内部焦点切换支持上下左右键：\r\n         *    -上下键：按上下键可以在并列的节点移动，如无并列节点无法移动。\r\n         *    -左右键：展开收起节点及跨层级移动焦点。当焦点再子节点时，按左键可收起改节点，焦点移动至父节点；\r\n         *     当焦点在父节点上时，按右键可将焦点移动到启子节点上,如节点未展开则同时展开该子节点\r\n         * 3,Enter键或Space键：当焦点在节点名称上时，按下键则选中或取消该节点，选中后节点变为选中态\r\n         */\r\n        // 阻止默认和冒泡\r\n        if(\r\n            [TiKeymap.KEY_ENTER, TiKeymap.KEY_NUMPAD_ENTER, TiKeymap.KEY_SPACE, TiKeymap.KEY_ARROW_UP, TiKeymap.KEY_ARROW_DOWN,\r\n            TiKeymap.KEY_ARROW_LEFT, TiKeymap.KEY_ARROW_RIGHT].indexOf(event.keyCode) > -1\r\n        ) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        switch (event.keyCode) {\r\n            case TiKeymap.KEY_ENTER: // ENTER键\r\n            case TiKeymap.KEY_NUMPAD_ENTER: // ENTER键(苹果数字小键盘)\r\n            case TiKeymap.KEY_SPACE:\r\n                this.onItemWrapperClick(node);\r\n                break;\r\n            case TiKeymap.KEY_ARROW_UP: // 向上箭头，同级\r\n                this.setKeyDownUp(node, 'up');\r\n                break;\r\n            case TiKeymap.KEY_ARROW_DOWN: // 向下箭头，同级\r\n\r\n                this.setKeyDownUp(node, 'down');\r\n                break;\r\n            case TiKeymap.KEY_ARROW_LEFT: // 向左箭头，跨节点层级\r\n                this.setKeyleft(node);\r\n                break;\r\n            case TiKeymap.KEY_ARROW_RIGHT: // 向右箭头，跨节点层级\r\n                this.setKeyright(node);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    // 上下键\r\n    private setKeyDownUp(node: TiTreeNode, type: string) {\r\n        let parArr: Array<TiTreeNode>;\r\n        const pareNode: TiTreeNode = TiTreeUtil.getParentNode(this.data, node); // 获取父节点\r\n        if (pareNode) {\r\n            parArr = pareNode.children;\r\n        } else {\r\n            parArr = this.data;\r\n        }\r\n        const curIndex: number = parArr.findIndex((item: TiTreeNode) => item === node); // 获取当前节点在其父节点集合的index\r\n        this.setFocusNode(node, parArr, curIndex, type);\r\n    }\r\n    // 左键\r\n    private setKeyleft(node: TiTreeNode) {\r\n        // 当正在编辑时，关闭其父节点时，节点恢复文本状态\r\n        if (node.editing && node.label !== '') {\r\n            delete node.editing;\r\n        }\r\n        const pareNode: TiTreeNode = TiTreeUtil.getParentNode(this.data, node);\r\n        if (!pareNode) { // 当前节点时一级节点时 return\r\n            return;\r\n        }\r\n        pareNode.expanded = false;\r\n        if (pareNode.disabled) {\r\n            this.setKeyleft(pareNode);\r\n            return;\r\n        }\r\n        pareNode.focused = true;\r\n        this.setFocusElem(node);\r\n    }\r\n    // 右键\r\n    private setKeyright(node: TiTreeNode) {\r\n        if (TiTreeUtil.isLeaf(node)) {\r\n            return;\r\n        }\r\n        const childNodeArr: Array<TiTreeNode> = node.children;\r\n        const childnoDisabledArr:  Array<TiTreeNode> = childNodeArr.filter((childNode: TiTreeNode) => !childNode.disabled); // 获取子节点未禁用的节点集合\r\n        if (childnoDisabledArr.length < 1) {\r\n            return;\r\n        }\r\n        const childFirstNode: TiTreeNode = childnoDisabledArr[0]; // 未禁用的节点集合的first获取焦点\r\n        childFirstNode.focused = true;\r\n        if (!node.expanded) {\r\n            node.expanded = true;\r\n        }\r\n        this.setFocusElem(node);\r\n    }\r\n    // 上下键焦点处理\r\n    private setFocusNode(node: TiTreeNode, parList: Array<TiTreeNode>, curIndex: number, type: string) {\r\n        let targetNode: TiTreeNode;\r\n        let targetIndex: number;\r\n        let _curIndex = curIndex;\r\n        if (type === 'up') { // 同级获取上一个节点\r\n            targetIndex = _curIndex - 1;\r\n            if (targetIndex < 0) {\r\n                targetIndex = parList.length - 1;\r\n            }\r\n            targetNode = parList[targetIndex];\r\n        } else { // 同级获取下一个节点\r\n            targetIndex = _curIndex + 1;\r\n            if (targetIndex > (parList.length - 1)) {\r\n                targetIndex = 0;\r\n            }\r\n            targetNode = parList[targetIndex];\r\n        }\r\n        // 上下移动时，first或last节点禁用时,return\r\n        if ((targetNode === parList[0] || targetNode === parList[parList.length - 1]) && targetNode.disabled) {\r\n            return;\r\n        }\r\n        // 当中间节点有禁用时，移动到禁用的节点上一个或下一个节点\r\n        if (targetNode.disabled) {\r\n            _curIndex = targetIndex;\r\n            this.setFocusNode(node, parList, _curIndex, type);\r\n            return;\r\n        }\r\n        targetNode.focused = true;\r\n        this.setFocusElem(node);\r\n    }\r\n\r\n    // 目标元素获取焦点\r\n    private setFocusElem(node: TiTreeNode){\r\n        if (node.focused) {\r\n            node.focused = false;\r\n        }\r\n        // 当按键操作会改变文本元素是否添加class`ti3-tree-text-focus`, 加延时是为了class变更后，获取正确的含有class的文本区域元素\r\n        // 类ti3-tree-text-focus作为获焦元素的标志\r\n        setTimeout(()=> {\r\n            // 找到含有类ti3-tree-text-focus的文本元素\r\n            const focusNode = this.elems.toArray().find((elem) => this.tiRenderer.hasClass(elem.nativeElement, 'ti3-tree-text-focus'));\r\n            if (focusNode) {\r\n                focusNode.nativeElement.focus();\r\n            }\r\n        }, 0)\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param startEvent 鼠标事件\r\n     * @param node 当前节点数据\r\n     * @description 拖拽开始时在被拖拽元素上触发此事件\r\n     */\r\n    public onDragstart(event: DragEvent, node: TiTreeNode) {\r\n        event.stopPropagation();\r\n        this.dragNode = node; // 保存被拖拽的节点\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param enterEvent 鼠标事件\r\n     * @param node 当前节点数据\r\n     * @description 拖拽鼠标进入元素时在该元素上触发\r\n     */\r\n    public onDragenter(event: DragEvent, node: TiTreeNode) {\r\n\r\n        event.preventDefault();\r\n        this.overNode = null;\r\n\r\n        // 拖拽节点和目标节点是同一节点,retuen\r\n        if (node === this.dragNode) {\r\n            return;\r\n        }\r\n\r\n        // 保存移动到的节点\r\n        this.overNode = node;\r\n\r\n        // 拖拽的节点拖拽到其子节点时，关闭其节点\r\n        if (this.dragNode === TiTreeUtil.getParentNode(this.data, node)) {\r\n            this.dragNode.expanded = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param overEvent 鼠标事件\r\n     * @param node 当前节点数据\r\n     * @description 拖拽时鼠标在目标元素上移动时触发\r\n     */\r\n    public onDragover(event: DragEvent, node: TiTreeNode) {\r\n        event.preventDefault();\r\n        event.dataTransfer.effectAllowed = \"move\";\r\n        if (node === this.overNode) {\r\n            this.clearDragClass(event); // 清除节点之前的样式\r\n            this.dropPosition = this.calcDropPosition(event); // 获取移动到节点的位置\r\n            // 拖拽经过节点,放置内部位置时，且该节点未展开时，展开其节点\r\n            if (this.dropPosition === 0 && !node.expanded) {\r\n                node.expanded = true;\r\n            }\r\n            // 设置拖动过程中的状态样式\r\n            this.renderer2.addClass(event.currentTarget, this.setDragOverClass(node));\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param leaveEvent 鼠标事件\r\n     * @param node 当前节点数据\r\n     * @description 拖拽时鼠标在离开目标元素时触发\r\n     */\r\n    public onDragleave(event: DragEvent, node: TiTreeNode) {\r\n        event.preventDefault();\r\n        this.clearDragClass(event);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param dropEvent 鼠标事件\r\n     * @param node 当前节点数据\r\n     * @description 鼠标在拖放目标上释放时,在拖放目标上触发\r\n     */\r\n    public onDrop(event: DragEvent, node: TiTreeNode) {\r\n        event.preventDefault();\r\n        this.dragNode.focused = false;\r\n        this.clearDragClass(event);\r\n        // 异步加载节点时禁止放置到节点内部\r\n        if (this.dropPosition === 0 && node.loadStatus === 'loading') {\r\n            return;\r\n        }\r\n        // 拖拽节点和目标节点是同一节点,retuen\r\n        if (node === this.dragNode) {\r\n            return;\r\n        }\r\n        const params: TiTreeDragNode = {\r\n            event: event,\r\n            targetNode: node,\r\n            dragNode: this.dragNode,\r\n            dropPosition: this.dropPosition\r\n        }\r\n        TiTreeUtil.dropApply(params, this.data, this.multiple);\r\n        this.nodeDrop.emit(params);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param endEvent 鼠标事件\r\n     * @param node 当前节点数据\r\n     * @description 鼠标在拖放目标上释放时,在拖拽元素上触发\r\n     */\r\n    public onDragend(event: DragEvent, node: TiTreeNode) {\r\n        event.preventDefault();\r\n        this.dragNode = null;\r\n        this.overNode = null;\r\n    }\r\n\r\n    // 计算拖拽节点的放置方式0（作为目标节点的子节点），-1（放置在目标节点的前面）,1（放置在目标节点的后面）\r\n    private calcDropPosition(event: DragEvent): number {\r\n        const clientY: number  = event.clientY;\r\n        const { top, height } = (event.target as HTMLElement).getBoundingClientRect();\r\n        const gapHeight: number = height / 3;\r\n        if (clientY > top + height - gapHeight) {\r\n            return 1;\r\n        }\r\n        if (clientY < top + gapHeight) {\r\n            return -1\r\n        }\r\n        return 0;\r\n\r\n    }\r\n\r\n    // 清除拖拽样式\r\n    private clearDragClass(event: DragEvent): void {\r\n        // 拖拽过程中的三种状态\r\n        const dragClasses: Array<string> = ['ti3-tree-drag-over-inner', 'ti3-tree-drag-over-top', 'ti3-tree-drag-over-bottom'];\r\n        dragClasses.forEach((item: string) => {\r\n            this.renderer2.removeClass(event.currentTarget, item);\r\n        })\r\n    }\r\n\r\n    // 根据拖动的位置获取相应的样式\r\n    private setDragOverClass(node: TiTreeNode): string {\r\n        if (node !== this.overNode) {\r\n            return\r\n        }\r\n        if (this.dropPosition === 0) {\r\n          return \"ti3-tree-drag-over-inner\";\r\n        } else if (this.dropPosition === -1) {\r\n          return \"ti3-tree-drag-over-top\";\r\n        } else if (this.dropPosition === 1) {\r\n          return \"ti3-tree-drag-over-bottom\";\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param node 节点\r\n     * @param type hover标志\r\n     */\r\n    public onMousenode(node: TiTreeNode, type: string): void {\r\n        // 鼠标进入节点且不是编辑状态时，显示操作按钮\r\n        if (type === 'enter' && !node.editing) {\r\n            node.isHover = true;\r\n        } else {\r\n            delete node.isHover;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param node 节点\r\n     */\r\n   public onBlurEdit(node: TiTreeNode): void {\r\n       if (node.label !== '') {\r\n           delete node.editing;\r\n       }\r\n   }\r\n\r\n   /**\r\n     * @ignore\r\n     * @param deleteEvent 删除事件\r\n     * @param node 节点\r\n     */\r\n    public deleteNode(event: Event, node: TiTreeNode): void {\r\n        // 阻止事件冒泡 防止触发选中\r\n        event.stopPropagation();\r\n        const parentNode: TiTreeNode = TiTreeUtil.getParentNode(this.data, node);\r\n        TiTreeUtil.removeNode(this.data, node);\r\n        // 节点的父节点无子节点时， 删除children属性，解决依旧会显示展开图标问题\r\n        if (parentNode && parentNode.children.length < 1) {\r\n            delete parentNode.children;\r\n        }\r\n        // 更新多选状态\r\n        if (this.multiple) {\r\n            TiTreeUtil.updateChecked(this.data);\r\n        }\r\n        this.nodeDeleted.emit(node);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param editEvent 编辑事件\r\n     * @param node 节点\r\n     */\r\n    public editNode(event: Event, node: TiTreeNode): void {\r\n        // 阻止事件冒泡 防止触发选中\r\n        event.stopPropagation();\r\n        node.editing = true;\r\n        delete node.isHover;\r\n        this.nodeEdited.emit(node);\r\n        // autofocus视图变化时 会报错 视图变化时 强制变检一次，消除报错(Expression has changed after it was checked)\r\n        this.cdRef.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param addEvent 增加事件\r\n     * @param node 节点\r\n     */\r\n    public addNode(event: Event, node: TiTreeNode): void {\r\n        // 阻止事件冒泡 防止触发选中\r\n        event.stopPropagation();\r\n        const newNode: TiTreeNode = {\r\n            label: this.treeLan.newNode,\r\n            editing: true,\r\n        }\r\n        node.expanded = true;\r\n        this.nodeAdded.emit(newNode);\r\n        TiTreeUtil.addNode(this.data, [newNode], 0, node);\r\n        // 更新多选状态\r\n        if (this.multiple) {\r\n            TiTreeUtil.updateChecked(this.data);\r\n        }\r\n        // autofocus视图变化时 会报错 强制变检一次，消除报错(Expression has changed after it was checked)\r\n        this.cdRef.detectChanges();\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core'\r\n/**\r\n * @ignore\r\n * TiHighlightPipe 替换搜索的值并高亮显示\r\n */\r\n@Pipe({\r\n    name: 'tiHighlight',\r\n    pure: true\r\n})\r\n\r\nexport class TiHighlightPipe implements PipeTransform {\r\n    transform(value: string, keyword: string){\r\n        if (!keyword) {\r\n            return value;\r\n        }\r\n        const Reg = new RegExp(keyword, 'ig');\r\n        const result = value.replace(Reg, word => {\r\n            return `<span class=\"ti3-font-highlight\">${word}</span>`;\r\n        });\r\n        return result;\r\n    }\r\n}","import { Directive, ElementRef } from '@angular/core';\r\n\r\n/**\r\n * @ignore\r\n * 指令功能: 悬浮操作按钮场景，提供input框内容选中功能\r\n */\r\n@Directive({\r\n    selector: '[tiAutoSelect]'\r\n})\r\n\r\nexport class TiAutoSelectDirective {\r\n    constructor(private elementRef: ElementRef) {}\r\n    ngOnInit(): void {\r\n        setTimeout(() => {\r\n          this.elementRef.nativeElement.select();\r\n        }, 0);\r\n      }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiTreeComponent } from './TiTreeComponent';\r\nimport { TiCheckboxModule } from '../checkbox/TiCheckboxModule';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\nimport { TiLoadingModule } from '../loading/TiLoadingModule'\r\nimport { TiHighlightPipe } from './TiHighlightPipe';\r\nimport { TiRendererModule } from '../../services/renderer/TiRendererModule';\r\nimport { TiTextModule } from '../text/TiTextModule';\r\nimport { TiValidationModule } from '../../directives/validation/TiValidationModule';\r\nimport { TiAutoSelectDirective } from './TiAutoSelectDirective'\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiCheckboxModule,\r\n    TiIconModule,\r\n    FormsModule,\r\n    TiLoadingModule,\r\n    TiRendererModule,\r\n    TiTextModule,\r\n    TiValidationModule\r\n  ],\r\n  exports: [TiTreeComponent],\r\n  declarations: [TiTreeComponent, TiHighlightPipe, TiAutoSelectDirective]\r\n})\r\nexport class TiTreeModule {\r\n\r\n}\r\n\r\nexport * from './TiTreeComponent';\r\nexport { TiTreeComponent, TiTreeNode, TiTreeDragNode } from './TiTreeComponent';\r\nexport { TiTreeUtil } from './TiTreeUtil';\r\n","import { Component, ElementRef, Input, SimpleChanges, ViewChild } from '@angular/core';\r\n\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiTreeNode, TiTreeUtil } from '../tree/TiTreeModule';\r\nimport { TiDominatorComponent } from '../dominator/TiDominatorModule';\r\nimport { TiDropComponent } from '../drop/TiDropModule';\r\nimport { TiSearchboxNotsearchComponent } from '../searchbox/TiSearchboxModule';\r\nimport { TiLocale } from '../../locale/TiLocaleModule';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiSelectComponent } from '../select/TiSelectModule';\r\nimport { TiDropsearchComponent } from '../dropsearch/TiDropsearchModule';\r\n/**\r\n * Treeselect树选择下拉组件\r\n *\r\n * 支持单选/多选，全选，搜索，懒加载。\r\n *\r\n * 单选主要功能为从Tree组件数据中选择某一条数据，单选与Tree功能相同，只是视觉呈现不同。\r\n *\r\n * 多选主要功能是从Tree组件数据中任意选择多条数据，多选与Tree功能相同，只是视觉呈现不同。\r\n *\r\n * 该组件继承自TiSelectComponent，其中\r\n *\r\n * 输入属性：clearable、labelKey、searchKeys、tipPosition、panelMaxHeight和valueKey暂不支持；\r\n *\r\n * 输出属性：clear不支持（单选和多选都采用标签方式展示，所以不支持单选情况下的clear事件）\r\n *\r\n * <example-url>../tiny3demo/#/treeselect/treeselect-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-treeselect',\r\n    templateUrl: 'treeselect.html',\r\n    styleUrls: ['./treeselect.less'],\r\n    providers: [TiFormComponent.getValueAccessor(TiTreeselectComponent)],\r\n    host: {\r\n        '(blur)': 'onBlur()'\r\n    }\r\n})\r\n\r\nexport class TiTreeselectComponent extends TiSelectComponent {\r\n\r\n    // 搜索框的高度\r\n    private static readonly SEARCHBOX_HEIGHT: number = 30;\r\n\r\n    /**\r\n     * 下拉面板的高度，默认展示8条\r\n     */\r\n    @Input() dropMaxHeight: number = (30 + 1) * 8;\r\n\r\n    /**\r\n     * @ignore 搜索结果\r\n     */\r\n    public oldOptions: Array<any>;\r\n\r\n    /**\r\n     * @ignore 内部标签\r\n     */\r\n    @ViewChild(TiDropComponent, { static: true }) dropCom: TiDropComponent;\r\n    /**\r\n     * @ignore 内部标签\r\n     */\r\n    @ViewChild(TiDominatorComponent, { static: true }) dominatorCom: TiDominatorComponent;\r\n    /**\r\n     * @ignore 内部标签\r\n     */\r\n    @ViewChild('searchboxCom') searchboxCom: TiSearchboxNotsearchComponent;\r\n    /**\r\n     * @ignore 内部标签\r\n     */\r\n    @ViewChild('datatemplate') dataTemplate: ElementRef;\r\n\r\n    /**\r\n     * @ignore 全选框的半选中状态\r\n     */\r\n    public indeterminate: boolean = false;\r\n\r\n    /**\r\n     * @ignore 全选中\r\n     */\r\n    public isAllSelected: boolean = false;\r\n\r\n    /**\r\n     * @ignore 搜索提示文本\r\n     */\r\n    public searchPlaceholder: string = TiLocale.getLocaleWords().tiSelect.search;\r\n\r\n    /**\r\n     * @ignore 搜索内容\r\n     */\r\n    public searchText: string = '';\r\n\r\n    /**\r\n     * @ignore 是否处于搜索状态\r\n     */\r\n    private isInSearch: boolean = false;\r\n\r\n    // 主干深拷贝，叶子浅拷贝\r\n    // 因为搜索结果里，叶子节点的勾选效果，需要保留在原始数据。\r\n    private static leafShallowClone(arr: any): Array<TiTreeNode> {\r\n        if (typeof (arr) !== 'object' || arr === null || (arr.label !== undefined && arr.children === undefined)) {\r\n            return arr;\r\n        }\r\n\r\n        const clone: any = Array.isArray(arr) ? arr.slice() : { ...arr };\r\n        const keys: Array<string> = Object.keys(clone);\r\n        for (const key of keys) {\r\n            clone[key] = TiTreeselectComponent.leafShallowClone(clone[key]);\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    // tslint:disable-next-line: use-life-cycle-interface\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        // 强制装换，方便调用super.xxx\r\n        this.dropsearchCom = this.dropCom as unknown as TiDropsearchComponent;\r\n\r\n        // 记录传入的数据，浅拷贝\r\n        this.oldOptions = this.options;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // 解决延迟或者动态设置options，树组件未渲染的问题\r\n        if(changes['options'] && !changes['options'].firstChange) {\r\n            // 重新记录传入的数据\r\n            this.oldOptions = changes['options'].currentValue;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line: use-life-cycle-interface\r\n    ngAfterViewChecked(): void {\r\n        if (this.searchable !== this.oldSearchable) {\r\n            this.oldSearchable = this.searchable;\r\n            if (this.searchable) {\r\n                this.setFocusableElems(this.dominatorCom.getFocusableElems()\r\n                    .concat(this.searchboxCom.getFocusableElems())\r\n                    .concat(this.dropCom.nativeElement));\r\n            } else {\r\n                this.setFocusableElems(this.dominatorCom.getFocusableElems()\r\n                    .concat(this.dropCom.nativeElement));\r\n            }\r\n        }\r\n        // 调用父类逻辑afterViewChecked才去设置autofocs\r\n        super.ngAfterViewChecked();\r\n    }\r\n\r\n    /**\r\n     * @ignore drop高度被压缩时，重新设置下拉面板的高度\r\n     */\r\n    private restyleDropMaxHeight(): void {\r\n        let dropCurMaxHeight: number = parseInt(this.dropCom.nativeElement.style.maxHeight, 10);\r\n\r\n        let dropMaxHeightAdapted: number = this.dropMaxHeight;\r\n        if (!isNaN(dropCurMaxHeight)) {\r\n            // 减去搜索框高度和间距的和\r\n            if (this.searchable) {\r\n                dropCurMaxHeight -= TiTreeselectComponent.SEARCHBOX_HEIGHT;\r\n            }\r\n            if (dropCurMaxHeight < this.dropMaxHeight) {\r\n                dropMaxHeightAdapted = dropCurMaxHeight;\r\n            }\r\n        }\r\n\r\n        this.renderer.setStyle(this.dataTemplate.nativeElement, 'max-height', dropMaxHeightAdapted + 'px');\r\n    }\r\n\r\n    ngOnModelChange(): void {\r\n        if (this.multiple) {\r\n            // 多选时，重新设置下拉面板定位\r\n            this.setPosition();\r\n            if (this.selectAll) {\r\n                // 允许全选时，设置全选框状态\r\n                this.setAllSelectCheckboxState();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore 设置下拉面板定位\r\n     */\r\n    setPosition(optionsChange?: boolean): void {\r\n        setTimeout(() => {\r\n            if (optionsChange) {\r\n                this.dropCom.resetPosition();\r\n            } else {\r\n                this.dropCom.setPosition();\r\n            }\r\n            this.restyleDropMaxHeight();\r\n        }, 0);\r\n    }\r\n\r\n    /**\r\n     * @ignore 关闭下拉面板并转移焦点\r\n     */\r\n    public close(): void {\r\n        this.dropCom.hide();\r\n        // 焦点转移至dominator\r\n        if (this.searchable) {\r\n            this.dominatorCom.focus();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore 仅仅关闭下拉面板\r\n     */\r\n    private closeWithoutFocus(): void {\r\n        this.dropCom.hide();\r\n    }\r\n\r\n    /**\r\n     * @ignore 打开下拉面板\r\n     */\r\n    public open(): void {\r\n        // 初始化最大高度\r\n        this.renderer.setStyle(this.dataTemplate.nativeElement, 'max-height', this.dropMaxHeight + 'px');\r\n        this.dropCom.show();\r\n        this.restyleDropMaxHeight();\r\n        // 焦点转移至搜索框\r\n        if (this.searchable) {\r\n            this.searchboxCom.focus();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 尝试打开下拉面板\r\n     */\r\n    public wantOpen(): void {\r\n        super.wantOpen();\r\n    }\r\n\r\n    /**\r\n     * @ignore 点击ti-dominator触发的事件\r\n     * 点击下拉面板，展开或者关闭面板\r\n     */\r\n    public onClickDominator(): void {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        if (!this.dropCom.isShow) {\r\n            // 清空搜索内容\r\n            this.searchText = '';\r\n            this.searchTextChange(this.searchText);\r\n            this.wantOpen();\r\n        } else {\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore 删除ti-dominator选中项时触发的事件\r\n     * 需要取消树节点的选中\r\n     */\r\n    public onDeleteDominatorTag(item: any): void {\r\n        const deletedItem: TiTreeNode = item.item;\r\n        // 1.取消选中当前节点、设置子节点及祖先节点的选中情况。从model中删除时，item.item.checked还是为true，要设置为false\r\n        this.setSelectState(deletedItem, !deletedItem.checked);\r\n\r\n        // 2.设置为非全选\r\n        this.isAllSelected = false;\r\n        // 3.设置全选框状态\r\n        if (this.multiple && this.selectAll) {\r\n            item.model.length === 0 ? this.indeterminate = false : this.indeterminate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore ti-searchbox-notsearch搜索框内容变化时触发的事件\r\n     */\r\n    public searchTextChange(searchText: string): void {\r\n        if (Util.isEmptyString(searchText)) {\r\n            this.options = this.oldOptions;\r\n            this.isInSearch = false;\r\n        } else {\r\n            // this.oldOptions 叶子浅拷贝\r\n            const searchResult: Array<TiTreeNode> = TiTreeselectComponent.leafShallowClone(this.oldOptions);\r\n            TiTreeUtil.search(searchResult, (cnode: TiTreeNode): boolean => {\r\n                return (cnode.label.indexOf(this.searchText) >= 0);\r\n            });\r\n            // 展开整个树\r\n            TiTreeUtil.traverse(searchResult, (node: TiTreeNode): void => {\r\n                node.expanded = true;\r\n            });\r\n            this.options = searchResult;\r\n            this.isInSearch = true;\r\n        }\r\n        if (this.multiple && this.selectAll) {\r\n            this.setAllSelectCheckboxState();\r\n        }\r\n\r\n        // 重新设置面板定位\r\n        this.setPosition(true);\r\n    }\r\n\r\n    /**\r\n     * @ignore 从model中获取option所在的索引\r\n     */\r\n    private getItemIndexFromModel(option: TiTreeNode): number {\r\n        let index: number = -1;\r\n        index = this.model.findIndex((item: any) => {\r\n            // 判断item和option的引用是否相同即可\r\n            return (item  === option);\r\n        });\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * @ignore 获取需要放到model中的节点，根据规范，如果子节点全部选中了，需要在model中放入父节点或者祖先节点。找到第一个checked为true的节点即可\r\n     * node: 树组件select事件中的参数\r\n     */\r\n    private getRealSelectedNode(node: TiTreeNode): TiTreeNode {\r\n        // tslint:disable-next-line: no-null-keyword\r\n        let selectedNode: TiTreeNode = null;\r\n        const parentNode: TiTreeNode = TiTreeUtil.getParentNode(this.oldOptions, node);\r\n        (parentNode && parentNode.checked === true) ? selectedNode =  this.getRealSelectedNode(parentNode) : selectedNode =  node;\r\n\r\n        return selectedNode;\r\n    }\r\n\r\n    /**\r\n     * @ignore 获取需要从model移除的节点，根据规范，如果某个子节点取消选中了，那么可能是它的父节点或祖先节点或所有子节点从model中被移除\r\n     * node：树组件select事件的参数\r\n     */\r\n    private getRealUnselectedNode(node: TiTreeNode): TiTreeNode {\r\n        // tslint:disable-next-line: no-null-keyword\r\n        let unselectedNode: TiTreeNode = null;\r\n        let parentNode: TiTreeNode = TiTreeUtil.getParentNode(this.oldOptions, node);\r\n\r\n        if (this.getItemIndexFromModel(node) !== -1) {\r\n            // 需要从model中移除的节点是node本身\r\n            unselectedNode = node;\r\n        } else {\r\n            // 需要从model中移除的节点是node父节点或祖先节点\r\n            // 当节点处于半选状态时,点击节点的复选框,节点状态为选中,否则为非选中,所以要先判断parentNode是否存在\r\n            while (parentNode && this.getItemIndexFromModel(parentNode) === -1) {\r\n                parentNode = TiTreeUtil.getParentNode(this.oldOptions, parentNode);\r\n            }\r\n            // parentNode可能为undefined\r\n            unselectedNode = parentNode;\r\n        }\r\n\r\n        return unselectedNode;\r\n    }\r\n\r\n    /**\r\n     * @ignore 取消选中时，获取被选中的子节点，根据规范，父节点或祖先节点被选中之后，如果取消了某个子节点的选中，那么需要把它的所有选中的子节点加入model中\r\n     * unselectedNode：需要从model中移除的节点\r\n     */\r\n    // tslint:disable-next-line: prefer-function-over-method\r\n    private getSelectedChildren(unselectedNode: TiTreeNode): Array<TiTreeNode> {\r\n        let selectedChildren: Array<TiTreeNode> = [];\r\n        if (unselectedNode.children) {\r\n            unselectedNode.children.forEach((child: TiTreeNode) => {\r\n                if (child.checked === true) {\r\n                    selectedChildren.push(child);\r\n                } else {\r\n                    selectedChildren = selectedChildren.concat(this.getSelectedChildren(child));\r\n                }\r\n            });\r\n        }\r\n\r\n        return selectedChildren;\r\n    }\r\n\r\n    /**\r\n     * @ignore 根据checked的值，设置option节点及其子节点和祖先节点的选中状态\r\n     * option: 选中的节点；checked：option.checked属性，true/false\r\n     */\r\n    private setSelectState(option: TiTreeNode, checked: boolean): void {\r\n        // 对oldOptions进行操作，将搜索时的结果映射回来\r\n        TiTreeUtil.traverse(this.oldOptions, (node: TiTreeNode) => {\r\n            if (node === option) {\r\n                node.checked = checked;\r\n                if (checked === true) {\r\n                    TiTreeUtil.selectAllChildren(node);\r\n                    TiTreeUtil.selectParents(node, this.oldOptions, true);\r\n                } else {\r\n                    TiTreeUtil.deSelectAllChildren(node);\r\n                    TiTreeUtil.deSelectParents(node, this.oldOptions);\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * @ignore 选中某个节点后，更新this.model\r\n     * option: 选中的节点\r\n     */\r\n    private setModelWhenSelected(option: TiTreeNode): void {\r\n        // 1.获取option最后一个被选中的祖先节点\r\n        const selectedNode: TiTreeNode = this.getRealSelectedNode(option);\r\n        // 2.从model中删除selectNode的所有子节点，一直到叶子节点\r\n        TiTreeUtil.traverse([selectedNode], (node: TiTreeNode) => {\r\n            let deleteIndex: number = this.getItemIndexFromModel(node);\r\n            while (deleteIndex !== -1) {\r\n                this.model.splice(deleteIndex, 1);\r\n                deleteIndex = this.getItemIndexFromModel(node);\r\n            }\r\n        });\r\n        // 3.将selectedNode加入到this.model中\r\n        if (this.getItemIndexFromModel(selectedNode) === -1) {\r\n            this.model.push(selectedNode);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore 取消选中某个节点后，更新this.model\r\n     * option: 被取消选中的节点\r\n     */\r\n    private setModelWhenUnselected(option: TiTreeNode): void {\r\n        // 1.获取需要从model中删除的节点\r\n        const unselectedNode: TiTreeNode = this.getRealUnselectedNode(option);\r\n\r\n        // 2.更新model\r\n        if (unselectedNode) {\r\n            // 2.1unselectedNode为option或option的祖先节点\r\n            const deleteIndex: number = this.getItemIndexFromModel(unselectedNode);\r\n            this.model.splice(deleteIndex, 1);\r\n            // 将option所有选中的子节点存放到this.model中\r\n            if (unselectedNode !== option) {\r\n                const selectedChildren: Array<TiTreeNode> = this.getSelectedChildren(unselectedNode);\r\n                this.model = this.model.concat(selectedChildren);\r\n            }\r\n        } else {\r\n            // 2.2unselectedNode为undefined，这种情况下，只需从model中删除option所有选中的子节点\r\n            TiTreeUtil.traverse([option], (node: TiTreeNode) => {\r\n                const deleteIndex: number = this.getItemIndexFromModel(node);\r\n                if (deleteIndex !== -1) {\r\n                    this.model.splice(deleteIndex, 1);\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @ignore 处于搜索状态下，更新model\r\n     */\r\n    private setModelWhenSearch(data: Array<TiTreeNode>, checked: boolean): void {\r\n        // 或者所有处于checked状态的叶子节点\r\n        let selectedLeafNodes: Array<TiTreeNode> = [];\r\n        selectedLeafNodes = this.getLeafNodes(data, checked);\r\n        // 根据每个叶子节点更新model\r\n        for (const leafNode of selectedLeafNodes) {\r\n            // 设置oldOptions各节点状态\r\n            this.setSelectState(leafNode, checked);\r\n            checked ? this.setModelWhenSelected(leafNode) : this.setModelWhenUnselected(leafNode);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore 获取data里面选中或者未选中的全部叶子节点\r\n     * data：搜索范围，checked：true/false\r\n     */\r\n    // tslint:disable-next-line: prefer-function-over-method\r\n    private getLeafNodes(data: Array<TiTreeNode>, checked: boolean): Array<TiTreeNode> {\r\n        const leafNodes: Array<TiTreeNode> = [];\r\n        TiTreeUtil.traverse(data, (node: TiTreeNode) => {\r\n            if (TiTreeUtil.isLeaf(node) && node.checked === checked) {\r\n                leafNodes.push(node);\r\n            }\r\n        });\r\n\r\n        return leafNodes;\r\n    }\r\n\r\n    /**\r\n     * @ignore 设置全选checkbox的状态\r\n     */\r\n    private setAllSelectCheckboxState(): void {\r\n\r\n        // 1.假设节点都被选中或都没被选中\r\n        let isAllSelected: boolean = true;\r\n        let isAllUnSelected: boolean = true;\r\n\r\n        // 2.判断是否所有节点都被选中或都没被选中，disabled状态下的节点不用统计\r\n        TiTreeUtil.traverse(this.options, (node: TiTreeNode) => {\r\n            // 2.1 有节点没被选中\r\n            if (!node.disabled && node.checked !== true) {\r\n                isAllSelected = false;\r\n            }\r\n            // 2.2 有节点被选中或半选中\r\n            if (!node.disabled && (node.checked === true || node.checked === 'indeterminate')) {\r\n                isAllUnSelected = false;\r\n            }\r\n        });\r\n\r\n        // 3.设置checkbox状态\r\n        this.isAllSelected = isAllSelected;\r\n        this.indeterminate = !isAllSelected && !isAllUnSelected;\r\n    }\r\n\r\n    /**\r\n     * @ignore ti-tree的select事件\r\n     */\r\n    public onTreeSelect(option: any): void {\r\n\r\n        // 节点被禁用，不做操作，直接返回\r\n        if (option.disabled === true) {\r\n            return;\r\n        }\r\n\r\n        // 1.触发select事件\r\n        this.select.emit(option);\r\n        if (!this.multiple) {\r\n            // 2.1单选，直接替换model\r\n            TiTreeUtil.traverse(this.oldOptions, (node: TiTreeNode) => {\r\n                if (node === option) {\r\n                    node.checked = true;\r\n                    this.model = [option];\r\n                } else {\r\n                    node.checked = false;\r\n                }\r\n            });\r\n            // 关闭下拉面板\r\n            this.close();\r\n        } else {\r\n            // 2.2多选\r\n            if (!this.isInSearch) {\r\n                // 2.2.1非搜索状态\r\n                // 设置oldOptions各节点状态\r\n                this.setSelectState(option, option.checked);\r\n                if (option.checked === true) {\r\n                    this.setModelWhenSelected(option);\r\n                } else {\r\n                    this.setModelWhenUnselected(option);\r\n                }\r\n            } else {\r\n                // 2.2.2搜索状态\r\n                this.setModelWhenSearch([option], option.checked);\r\n            }\r\n\r\n            // 2.3手动触发ngModelChange事件，splice和push无法触发\r\n            this.model = this.model.concat();\r\n            // 2.4设置全选状态\r\n            if (this.selectAll) {\r\n                this.setAllSelectCheckboxState();\r\n            }\r\n        }\r\n\r\n        // 3.重新设置ti-dominator高度\r\n        this.setPosition();\r\n\r\n    }\r\n\r\n    /**\r\n     * @ignore 全选复选框的按钮事件\r\n     */\r\n    public onSelectAllChange(isAllSelected: any): void {\r\n        // 1.将当前tree节点全部选中 或 不选中\r\n        TiTreeUtil.traverse(this.options, (node: TiTreeNode) => {\r\n            if (!node.disabled) {\r\n                node.checked = isAllSelected;\r\n            }\r\n        });\r\n\r\n        // 2.设置model\r\n        if (!this.isInSearch) {\r\n            // 2.1 未处于搜索状态下，使用concat进行单层深拷贝\r\n            (!this.isAllSelected) ? this.model = this.options.concat() : this.model = [];\r\n        } else {\r\n            // 2.2  处于搜索状态下\r\n            this.setModelWhenSearch(this.options, isAllSelected);\r\n            // 手动触发ngModelChange事件\r\n            this.model = this.model.concat();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore 全选复选框的点击事件\r\n     */\r\n    public onClickSelectAll(event: any): void {\r\n        // 点击时，this.isAllSelected为false，所以要取反\r\n        this.onSelectAllChange(!this.isAllSelected);\r\n        event.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 失焦情况下，仅关闭面板，不做聚焦等处理\r\n     */\r\n    public onBlur(): void {\r\n        this.closeWithoutFocus();\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 鼠标点击到空白，原本会失焦，此处通过阻止默认事件的方式进行了处理\r\n     */\r\n    public onMouseDownDropOuter(event: any): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * #datatemplate内部滚动条会引起外部滚动条事件触发，引起弹框内的树下拉组件无法使用鼠标拖动滚动条，因此此处阻止事件冒泡\r\n     */\r\n    public onMouseWheel(event: any): void {\r\n        event.stopPropagation();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TiTreeselectComponent } from './TiTreeselectComponent';\r\nimport { TiDominatorModule } from '../dominator/TiDominatorModule';\r\nimport { TiDropsearchModule } from '../dropsearch/TiDropsearchModule';\r\nimport { TiDropModule } from '../drop/TiDropModule';\r\nimport { TiTreeModule } from '../tree/TiTreeModule';\r\nimport { TiSearchboxModule } from '../searchbox/TiSearchboxModule';\r\nimport { TiCheckboxModule } from '../checkbox/TiCheckboxModule';\r\n\r\n@NgModule({\r\n  imports: [\r\n    TiDominatorModule, TiDropsearchModule, TiDropModule, TiTreeModule, TiSearchboxModule, TiCheckboxModule,\r\n    FormsModule,\r\n    CommonModule\r\n  ],\r\n  exports: [TiTreeselectComponent],\r\n  declarations: [TiTreeselectComponent]\r\n})\r\n\r\nexport class TiTreeselectModule {}\r\n\r\nexport { TiTreeselectComponent } from './TiTreeselectComponent';\r\n","import { TiFileItem } from './TiFileInterface';\r\nimport { Util } from '../../utils/Util';\r\n\r\n// 上传文件服务，提供上传过程中的通用方法\r\n/**\r\n * @ignore\r\n */\r\nexport class TiUploadUtil {\r\n    // 已支持SSR\r\n    public static readonly isHTML5: boolean = (typeof window !== 'undefined') && ((window as any).File && (window as any).FormData);\r\n    /**\r\n     * 上传多个文件\r\n     * 上传一个或多个文件item对象\r\n     * 无\r\n     */\r\n    public static uploadItems(items: Array<TiFileItem>): void {\r\n        // 异常处理 1.入参不合法,2.正在上传的文件不允许重复上传\r\n        for (let i: number = items.length - 1; i >= 0; i--) {\r\n            if (!TiUploadUtil.isValidFileItem(items[i]) || items[i].isUploading) {\r\n                items.splice(i, 1);\r\n            }\r\n        }\r\n        TiUploadUtil.onBeforeSend(items); // 文件上传前处理\r\n        for (let j: number = items.length - 1; j >= 0; j--) {\r\n            if (items[j].isCancel) { // 已取消上传的文件不再上传(此处主要是对beforeSend中取消上传的文件进行处理)\r\n                items.splice(j, 1);\r\n            }\r\n        }\r\n        if (items.length > 0) {\r\n            TiUploadUtil.isHTML5 ? TiUploadUtil.uploadXhr(items) : TiUploadUtil.uploadForm(items);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 取消队列中多个正在上传中的文件(只在上传时可取消)\r\n     * 文件item对象数组\r\n     * 无\r\n     */\r\n    public static cancelItems(items: Array<TiFileItem>): void {\r\n        for (let i: number = items.length - 1; i >= 0; i--) {\r\n            if (!TiUploadUtil.isValidFileItem(items[i])) { // 异常处理:入参不合法情况下，不做处理\r\n                items.splice(i, 1);\r\n            } else {\r\n                items[i].isCancel = true;\r\n            }\r\n        }\r\n        if (items[0].isUploading) { // 正在上传过程中，取消上传，上传事件中，会处理响应赋值及事件触发\r\n            TiUploadUtil.isHTML5 ? items[0]._xhr.abort() : items[0]._form.abort();\r\n        } else { // 未在上传过程中情况下，依然触发cancel和complete事件\r\n            const response: string = undefined;\r\n            const status: number = 0;\r\n            TiUploadUtil.onCancel(items, response, status);\r\n            TiUploadUtil.onComplete(items, response, status);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 删除队列中单个或多个上传文件\r\n     * 文件item对象数组\r\n     */\r\n    public static removeItems(items: Array<TiFileItem>): void {\r\n        const itemsArr: Array<TiFileItem> = {...items};\r\n        for (let i: number = items.length - 1; i >= 0; i--) {\r\n            if (!TiUploadUtil.isValidFileItem(items[i])) {\r\n                items.splice(i, 1);\r\n            }\r\n        }\r\n        // 阻止文件上传进程\r\n        if (items[0].isUploading) {\r\n            TiUploadUtil.cancelItems(items);\r\n        }\r\n        // 删除队列中的文件对象及文件对象相关引用\r\n        for (let j: number = items.length - 1; j >= 0; j--) {\r\n            items[j].uploader.queue.splice(TiUploadUtil.getItemIndex(items[j]), 1);\r\n            itemsArr[j].destroy();\r\n        }\r\n        // 触发外部定义的删除事件\r\n        TiUploadUtil.onRemove(itemsArr);\r\n    }\r\n\r\n    /**\r\n     * 触发onBeforeRemoveItems事件\r\n     * 文件item对象数组\r\n     */\r\n    public static onBeforeRemove(items: Array<TiFileItem>): void {\r\n        TiUploadUtil.handleEvent('BeforeRemove', items);\r\n    }\r\n\r\n    /**\r\n     * 获取文件对象 index值，获取该值用于后续判断item有效性\r\n     * 上传文件item对象\r\n     */\r\n    private static getItemIndex(item: TiFileItem): number {\r\n        if (item && item.uploader) {\r\n            return item.uploader.queue.findIndex((itemInQueue: TiFileItem) => {\r\n                return itemInQueue.index === item.index;\r\n            });\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * 判断文件是否为有效文件\r\n     * 上传文件item对象\r\n     */\r\n    private static isValidFileItem(item: TiFileItem): boolean {\r\n        return (TiUploadUtil.getItemIndex(item) !== -1);\r\n    }\r\n    // 生成上传数据\r\n    private static generateUploadData(items: Array<TiFileItem>): any {\r\n        // 上传数据组装\r\n        const uploadDataObj: any = new FormData();\r\n        if (items[0].formDataFirst) { // formData先于文件信息情况下，先添加formData\r\n            addFormData();\r\n            addFile();\r\n        } else { // formData后于文件信息情况下，后添加formData\r\n            addFile();\r\n            addFormData();\r\n        }\r\n        function addFile(): void {\r\n            items.forEach((item: TiFileItem) => {\r\n                uploadDataObj.append(item.alias, item._file, item.file.name); // 添加上传文件\r\n            });\r\n        }\r\n        function addFormData(): any {\r\n            // 添加单个文件的formData对象,加入到上传对象中\r\n            for (const key in items[0].formData) {\r\n                if (items[0].formData.hasOwnProperty(key)) {\r\n                    uploadDataObj.append(key, items[0].formData[key]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return uploadDataObj;\r\n    }\r\n    private static setXhr(xhr: any, items: Array<TiFileItem>): void {\r\n        // 文件上传信息配置（使用XHR，支持跨域请求）\r\n        xhr.upload.onprogress = (event: any): void => { // 文件进度获取事件\r\n            const lengthComputable: boolean = event.lengthComputable;\r\n            const loaded: number = event.loaded;\r\n            const total: number = event.total;\r\n            const progress: number = Math.round(lengthComputable ? loaded * 100 / total : 0); // 读取当前进度信息\r\n            TiUploadUtil.onProgress(items, progress);\r\n        };\r\n\r\n        xhr.onload = (): void => { // 上传完成事件\r\n            const response: string = xhr.response;\r\n            const status: number = xhr.status;\r\n            if (TiUploadUtil.isSuccessCode(status)) {\r\n                TiUploadUtil.onSuccess(items, response, status);\r\n            } else {\r\n                TiUploadUtil.onError(items, response, status);\r\n            }\r\n            TiUploadUtil.onComplete(items, response, status);\r\n        };\r\n\r\n        xhr.onerror = (): void => { // 上传失败事件\r\n            const response: string = xhr.response;\r\n            const status: number = xhr.status;\r\n            TiUploadUtil.onError(items, response, status);\r\n            TiUploadUtil.onComplete(items, response, status);\r\n        };\r\n\r\n        xhr.onabort = (): void => { // 取消回调\r\n            const response: string = xhr.response;\r\n            const status: number = xhr.status;\r\n            TiUploadUtil.onCancel(items, response, status);\r\n            TiUploadUtil.onComplete(items, response, status);\r\n        };\r\n\r\n        // 设置单个item的_xhr,该对象用于操作单个item的上传取消等处理\r\n        items.forEach((item: TiFileItem) => {\r\n            item._xhr = xhr;\r\n        });\r\n    }\r\n    private static setheaders(xhr: any, items: Array<TiFileItem>): void {\r\n        // 设置请求头\r\n        for (const key in items[0].headers) {\r\n            if (items[0].headers.hasOwnProperty(key)) {\r\n                xhr.setRequestHeader(key, items[0].headers[key]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * xhr方式上传文件\r\n     * 上传一个或多个文件item对象，上传单个文件的情况下\r\n     */\r\n    private static uploadXhr(items: Array<TiFileItem>): void {\r\n        const uploadDataObj: any = TiUploadUtil.generateUploadData(items); // 组装上传对象\r\n        // 生成并设置xhr\r\n        const xhr: any = new XMLHttpRequest();\r\n        TiUploadUtil.setXhr(xhr, items);\r\n\r\n        // 开始上传\r\n        xhr.open(items[0].method, items[0].url, true);\r\n        TiUploadUtil.setheaders(xhr, items);\r\n        xhr.send(uploadDataObj);\r\n\r\n        // 设置对象的上传状态\r\n        items.forEach((item: TiFileItem) => {\r\n            item.isUploading = true;\r\n        });\r\n    }\r\n    private static uploadForm(items: Array<TiFileItem>): void {\r\n        const form: any = document.createElement('form');\r\n        form.style.display = 'none';\r\n        for (const item of items) {\r\n            // 清除原有form表单\r\n            if (item._form) {\r\n                item._form.parentNode.replaceChild(items[0]._input, items[0]._form); // 清除先前对应的form表单对象，确保上传文件表单元素外层不被form包裹\r\n            }\r\n            item._form = form; // 保存当前form\r\n        }\r\n        items[0]._input.parentNode.insertBefore(form, items[0]._input); // form插入inputSubmit之前，使其在页面显示\r\n\r\n        if (items[0].formDataFirst) { // formData先于文件信息情况下，先添加formData\r\n            addFormData();\r\n            addFile();\r\n        } else { // formData后于文件信息情况下，后添加formData\r\n            addFile();\r\n            addFormData();\r\n        }\r\n\r\n        // 文件信息组装\r\n        function addFile(): void {\r\n            for (const item of items) {\r\n                const inputSubmit: Element = item._input;\r\n                inputSubmit.setAttribute('name', item.alias);\r\n                form.appendChild(inputSubmit); // 在form中添加上传文件元素\r\n            }\r\n        }\r\n\r\n        // formData信息组装\r\n        function addFormData(): void {// 添加formData元素\r\n            for (const key in items[0].formData) {\r\n                if (items[0].formData.hasOwnProperty(key)) {\r\n                    const formDataDomItem: any = document.createElement('input');\r\n                    formDataDomItem.setAttribute('type', 'hidden');\r\n                    formDataDomItem.setAttribute('name', key);\r\n                    formDataDomItem.value = items[0].formData[key];\r\n                    form.appendChild(formDataDomItem);\r\n                }\r\n            }\r\n        }\r\n\r\n        // 生成iframe元素，并将form表单和iframe元素结合\r\n        const iframe: any = document.createElement('iframe');\r\n        const name: string = Util.getUniqueId('tiFileIframe'); // 确保iframe唯一性，保证各文件上传最终能独立返回到相应的iframe\r\n        iframe.setAttribute('name', name);\r\n        form.setAttribute('action', items[0].url);\r\n        form.setAttribute('method', items[0].method);\r\n        form.setAttribute('target', name);\r\n        form.setAttribute('enctype', 'multipart/form-data');\r\n        form.appendChild(iframe);\r\n\r\n        // 表单提交\r\n        form.submit();\r\n        // 设置对象的上传状态\r\n        items.forEach((item: TiFileItem) => {\r\n            item.isUploading = true;\r\n        });\r\n\r\n        // 设置假进度\r\n        let newProgress: number = 0;\r\n        const progressInterval: any = setInterval(() => {\r\n            if (newProgress !== 98) {\r\n                newProgress += 2;\r\n                this.onProgress(items, newProgress);\r\n            }\r\n        }, 10);\r\n\r\n        // 表单完成事件\r\n        const loadEvent: () => void =\r\n            (): void => {\r\n            let response: string = '';\r\n            let status: number = 200;\r\n\r\n            clearInterval(progressInterval);\r\n            this.onProgress(items, 100);\r\n            try {\r\n                response = iframe.contentDocument.body.innerHTML; // 后台正常返回情况获取返回结果\r\n                this.onSuccess(items, response, status);\r\n            } catch (e) {\r\n                response = e;\r\n                status = 520; // 为方便使用者处理，失败情况下，统一返回520状态码 未知错误\r\n                this.onError(items, response, status);\r\n            }\r\n\r\n            this.onComplete(items, response, status);\r\n        };\r\n        iframe.addEventListener('load', loadEvent);\r\n\r\n        // 表单取消方法定义\r\n        form.abort = (): void => {\r\n            clearInterval(progressInterval);\r\n            iframe.removeEventListener('load', loadEvent); // 去除load事件\r\n            // 表单元素还原\r\n            for (const node of form.childNodes) {\r\n                if ((node as any).tagName !== 'IFRAME') {\r\n                    if (form.parentNode.lastChild === form) {\r\n                        form.parentNode.appendChild(node);\r\n                    } else {\r\n                        form.parentNode.insertBefore(node, form.nextSibling);\r\n                    }\r\n                }\r\n            }\r\n            form.remove();\r\n            items.forEach((item: TiFileItem) => {\r\n                /* tslint:disable:no-null-keyword */\r\n                item._form = null;\r\n            });\r\n\r\n            const status: number = 0;\r\n            const response: string = undefined;\r\n            this.onCancel(items, response, status);\r\n            this.onComplete(items, response, status);\r\n        };\r\n    }\r\n\r\n    private static isSuccessCode(status: number): boolean {\r\n        // 和ajax请求一致，304 代表客户端已经执行了GET，但文件未变化\r\n        return status >= 200 && status < 300 || status === 304;\r\n    }\r\n\r\n    /**\r\n     * 上传前处理\r\n     * 上传一个或多个文件item对象\r\n     */\r\n    private static onBeforeSend(items: Array<TiFileItem>): void {\r\n        // 设置当前上传文件的状态信息\r\n        for (const item of items) {\r\n            item.isReady = true;\r\n            item.isUploading = false;\r\n            item.isUploaded = false;\r\n            item.isSuccess = false;\r\n            item.isError = false;\r\n            item.isCancel = false;\r\n            item.progress = 0;\r\n        }\r\n        TiUploadUtil.handleEvent('BeforeSend', items);\r\n    }\r\n\r\n    private static handleEvent(type: string, items: Array<TiFileItem>, params: Array<any> = []): void {\r\n        const onEventTypeItems: any = items[0].uploader.config && items[0].uploader.config[`on${type}Items`];\r\n        if (onEventTypeItems && (typeof onEventTypeItems === 'function')) {\r\n            // eslint-disable-next-line no-useless-call\r\n            onEventTypeItems.apply(null, [items, ...params]);\r\n        }\r\n    }\r\n\r\n    private static onProgress(items: Array<TiFileItem>, progress: number): void {\r\n        TiUploadUtil.handleEvent('Progress', items, [progress]);\r\n        for (const item of items) {\r\n            item.progress = progress; // 设置单个文件的进度信息\r\n        }\r\n    }\r\n\r\n    private static onSuccess(items: Array<TiFileItem>, response: string, status: number): void {\r\n        // 设置当前上传文件的状态信息\r\n        for (const item of items) {\r\n            item.isReady = false;\r\n            item.isUploading = false;\r\n            item.isUploaded = true;\r\n            item.isSuccess = true;\r\n            item.isError = false;\r\n            item.isCancel = false;\r\n            item.progress = 100;\r\n        }\r\n        TiUploadUtil.handleEvent('Success', items, [response, status]);\r\n    }\r\n\r\n    private static onError(items: Array<TiFileItem>, response: string, status: number): void {\r\n        // 设置当前上传文件的状态信息\r\n        for (const item of items) {\r\n            // 设置当前上传文件的状态信息\r\n            item.isReady = false;\r\n            item.isUploading = false;\r\n            item.isUploaded = true;\r\n            item.isSuccess = false;\r\n            item.isError = true;\r\n            item.isCancel = false;\r\n            item.progress = 0;\r\n        }\r\n        TiUploadUtil.handleEvent('Error', items, [response, status]);\r\n    }\r\n\r\n    private static onComplete(items: Array<TiFileItem>, response: string, status: number): void {\r\n        // 置位状态\r\n        items.forEach((item: TiFileItem) => {\r\n            item.isUploading = false;\r\n        });\r\n        // 上传下一个文件，对于同一序列的上传文件来说，其isReady状态均已被标识，因此此处可以通过该方法进行筛选\r\n        const readyItemsArr: Array<TiFileItem> = items[0].uploader.getReadyItems();\r\n        if (readyItemsArr && (readyItemsArr.length !== 0)) {\r\n            this.uploadItems([readyItemsArr[0]]);\r\n        } else {\r\n            // 本次上传序列中，所有文件上传完成后回调，因为文件上传是串行上传：\r\n            // 在一个文件上传完成后才执行下一个文件的上传操作，所以此处可以确保同一序列最终的上传完成\r\n            TiUploadUtil.handleEvent('CompleteAll', items, [response, status]);\r\n        }\r\n        TiUploadUtil.handleEvent('Complete', items, [response, status]);\r\n    }\r\n\r\n    private static onCancel(items: Array<TiFileItem>, response: string, status: number): void {\r\n        for (const item of items) {\r\n            item.isReady = false;\r\n            item.isUploading = false;\r\n            item.isUploaded = false;\r\n            item.isSuccess = false;\r\n            item.isError = false;\r\n            item.isCancel = true;\r\n            item.progress = 0;\r\n        }\r\n        TiUploadUtil.handleEvent('Cancel', items, [response, status]);\r\n    }\r\n\r\n    private static onRemove(items: Array<TiFileItem>): void {\r\n        TiUploadUtil.handleEvent('Remove', items);\r\n    }\r\n}\r\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\r\nimport { TiFileItem, TiUploadRef } from '../../services/upload/TiFileInterface';\r\nimport { TiUploadUtil } from '../../services/upload/TiUploadUtil';\r\n\r\n/**\r\n * 该指令适用于自定义上传场景，指令定义在input type='file'元素上，传入的是文件上传实例\r\n * 文件上传实例的生成，请参考[TiUploadService.create]{@link ../injectables/TiUploadService.html#create}\r\n *\r\n * 除自定义使用方式外，Tiny还提供了两种已进行设计的上传组件供业务使用，具体见[TiUploadComponent]{@link ../components/TiUploadComponent.html}\r\n *\r\n * <example-url>../tiny3demo/#/upload/upload-all</example-url>\r\n */\r\n@Directive({\r\n  selector: '[tiFileSelect]'\r\n})\r\nexport class TiFileSelectDirective {\r\n    /**\r\n     * 文件上传实例\r\n     */\r\n    @Input() tiFileSelect: TiUploadRef;\r\n    private nativeElement: any;\r\n    private fileChangeEvent: any;\r\n    constructor(private hostElementRef: ElementRef, private renderer: Renderer2) {\r\n        this.nativeElement = this.hostElementRef.nativeElement;\r\n        this.fileChangeEvent = this.renderer.listen(this.nativeElement, 'change', () => {\r\n            if (!this.tiFileSelect) { // 配置的上传文件实例不存在情况下，不做后续处理\r\n                return;\r\n            }\r\n            this.onFileChange(this.nativeElement); // 点选文件后的处理\r\n        });\r\n    }\r\n    /**\r\n     * @ignore\r\n     * 选择文件后，根据浏览器差异进行处理\r\n     */\r\n    onFileChange(fileSel: any): void {\r\n        const uploadInst: any = this.tiFileSelect;\r\n        const files: any = TiUploadUtil.isHTML5 ? fileSel.files : fileSel; // 获取文件信息\r\n        const addedItems: Array<TiFileItem> = uploadInst._addToQueue(files); // 文件选择队列\r\n        if (TiUploadUtil.isHTML5) { // H5情况下，重置表单元素值，确保可重复选择文件\r\n            this.nativeElement.value = '';\r\n        } else { // 非H5情况下，确保文件下次可继续选择,分两种情况：1.已选文件有效情况下，,重新替换表单元素，确保文件点选元素不会随表单上传消失；\r\n            // 2.文件未加入到队列（文件校验失败情况）情况下，重置点选表单，确保文件可重复选择（校验失败可能是文件队列长度不符，所以为确保用户体验，执行该操作）\r\n            const isRemoveInput: boolean = (addedItems.length === 0); // 根据文件是否有效情况确定是否移除input\r\n            this.replaceFileInput(fileSel, isRemoveInput);\r\n        }\r\n\r\n        // 自动上传情况下，进行文件上传\r\n        if (uploadInst.config.autoUpload !== false && (addedItems.length !== 0)) {\r\n            uploadInst.uploadItems(addedItems);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 替换单个文件选择按钮，确保后续文件选择可继续点选\r\n     * 当前文件选择框\r\n     * 文件选择实例对象\r\n     */\r\n    replaceFileInput(fileSel: any, isRemoveInput: boolean): void {\r\n        // 清除当前文件输入框选择事件\r\n        this.fileChangeEvent();\r\n\r\n        // 新增input,并处理当前input\r\n        const fileSelNew: any = fileSel.cloneNode(); // 文件元素克隆时,不会复用原有已选文件信息\r\n        if (isRemoveInput) { // 文件选择无效情况下移除input，确保下次可正常选择\r\n            fileSel.parentNode.appendChild(fileSelNew);\r\n            fileSel.remove();\r\n        } else {\r\n            fileSel.style.display = 'none'; // 隐藏已选文件，确保点选框页面呈现的唯一性\r\n            fileSel.parentNode.insertBefore(fileSelNew, fileSel.nextSibling); // 点选文件已放入文件队列中,替换新的文件选择按钮，确保下次点选生效\r\n        }\r\n\r\n        // 增加当前input事件\r\n        this.fileChangeEvent = this.renderer.listen(fileSelNew, 'change', () => {\r\n            this.onFileChange(fileSelNew);\r\n        });\r\n    }\r\n}\r\n","import { TiUploadUtil } from './TiUploadUtil';\r\nimport { TiFileInfo, TiFileItem, TiUploadConfig, TiUploadRef } from './TiFileInterface';\r\nimport { Util } from '../../utils/Util';\r\n\r\n// 单个文件对象服务封装，包括文件基本信息统一、文件状态信息、文件基本方法封装\r\n/**\r\n * @ignore\r\n */\r\nexport class TiFileItemUtil {\r\n    /**\r\n     * 创建文件对象，该返回值用作后续文件的上传和文件操作，可作为文件回调参数传递\r\n     * fileObject 文件信息对象\r\n     * fileOrInpt 原始文件对象 H5下为file对象，非H5下为fileInput\r\n     * config 文件上传配置信息\r\n     * uploader 上传文件对应的文件实例\r\n     * return 文件对象\r\n     */\r\n    public static createFileItem(tifileObject: TiFileInfo, fileOrInput: Element | File,\r\n                                 config: TiUploadConfig, uploader: TiUploadRef): TiFileItem {\r\n        /* tslint:disable:no-invalid-this */\r\n        /* tslint:disable:no-null-keyword */\r\n        function upload(): void {\r\n            TiUploadUtil.uploadItems([this]);\r\n        }\r\n        function cancel(): void {\r\n            TiUploadUtil.cancelItems([this]);\r\n        }\r\n\r\n        function remove(isRemove?: boolean): void {\r\n            if (isRemove) {\r\n                // 触发外部定义的删除前的事件\r\n                TiUploadUtil.onBeforeRemove([this]);\r\n\r\n                return;\r\n            }\r\n\r\n            TiUploadUtil.removeItems([this]);\r\n        }\r\n\r\n        function destroy(): void {\r\n            if (this._input) { // 删除页面残留dom\r\n                this._input.remove();\r\n            }\r\n            if (this._form) {\r\n                this._form.remove();\r\n            }\r\n            this._input = null; // 清除引用\r\n            this._form = null;\r\n        }\r\n\r\n        // 上传文件对象赋值\r\n        let _file: any = null;\r\n        let _input: any = null;\r\n        if (!(fileOrInput instanceof Element)) {\r\n            _file = fileOrInput;\r\n        } else {\r\n            _input = fileOrInput;\r\n        }\r\n\r\n        return {\r\n            url: config.url || '/', // 后台地址\r\n            file: tifileObject,\r\n            alias: config.alias || 'tiFile', // 文件name\r\n            _file,\r\n            _input,\r\n            formData: config.formData || {},\r\n            formDataFirst: config.formDataFirst || false,\r\n            headers: config.headers || {},\r\n            method: config.method || 'post',\r\n            batchSend: config.batchSend || false,\r\n            uploader, // 上传实例对象\r\n\r\n            upload,\r\n            cancel,\r\n            remove,\r\n            destroy,\r\n\r\n            isReady: false,\r\n            isUploading: false,\r\n            isUploaded: false,\r\n            isCancel: false,\r\n            isSuccess: false,\r\n            isError: false,\r\n            progress: 0,\r\n\r\n            isHover: false,\r\n            isOverflow: false,\r\n            _xhr: {},\r\n            index: 0,\r\n            _form: undefined\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 创建文件对象，统一H5和非H5情况下的文件信息\r\n     * file {FileList|FileInput} 原始文件对象 H5为file对象形式，非H5为fileinput对象\r\n     * return 类文件对象\r\n     */\r\n    public static createFileObject(fileThis: any): TiFileInfo {\r\n        if (TiUploadUtil.isHTML5) {\r\n            const fileName: string = fileThis.name;\r\n\r\n            return {\r\n                lastModifiedDate: fileThis.lastModifiedDate,\r\n                size: fileThis.size, // 读取的文件真实大小值,单位为B\r\n                sizeWithUnit: TiFileItemUtil.formatSize(fileThis.size), // 做单位转换后的文件大小，方便界面详情显示显示\r\n                name: fileThis.name,\r\n                type: fileName.slice(fileName.lastIndexOf('.') + 1)\r\n                        .toLowerCase(), // 确保浏览器形式的一致性\r\n                _file: fileThis, // 文件对象，只在H5方式下有效\r\n                _input: null // 文件input对象，只在IE9 form表单提交方式下有效\r\n            };\r\n        }\r\n        const path: string = fileThis.value;\r\n        // 非H5情况下,浏览器不打开ActiveX,获取不到文件大小,该种情况下文件大小为null\r\n        const fileSize: number = Util.isUndefined(fileThis.size) ? null : fileThis.size;\r\n\r\n        return {\r\n            lastModifiedDate: null, // 非H5情况下,获取不到该值\r\n            size: fileSize,\r\n            sizeWithUnit: isNaN(fileSize) ? '' : this.formatSize(fileSize / 1024), // 做单位转换后的文件大小，方便界面详情显示显示\r\n            name: path.slice(path.lastIndexOf('/') + path.lastIndexOf('\\\\') + 2),\r\n            type: path.slice(path.lastIndexOf('.') + 1)\r\n                    .toLowerCase(),\r\n            _file: null, // 文件对象，只在H5方式下有效\r\n            _input: fileThis // 文件input对象，只在IE9 form表单提交方式下有效\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 将文件大小显示标准化：根据文件大小做不同单位的显示，文件大小保留两位小数\r\n     * 文件大小\r\n     * 带单位文件大小\r\n     */\r\n    private static formatSize(size: number): string {\r\n        let sizeWithUnit: string;\r\n        const kbSize: number = size / 1024;\r\n        /* tslint:disable:prefer-conditional-expression */\r\n        if (kbSize < 1) {\r\n            sizeWithUnit = size.toFixed(2) + 'B';\r\n        } else if (kbSize < 1024) {\r\n            sizeWithUnit = kbSize.toFixed(2) + 'KB';\r\n        } else if (kbSize < 1024 * 1024) {\r\n            sizeWithUnit = (kbSize / 1024).toFixed(2) + 'MB';\r\n        } else {\r\n            sizeWithUnit = (kbSize / 1024 / 1024).toFixed(2) + 'GB';\r\n        }\r\n\r\n        return sizeWithUnit;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n/**\r\n * @ignore\r\n * 此TiUploadServiceModule不对用户暴露，用户仅需import TiUploadModule，则间接引入了TiUploadServiceModule\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class TiUploadServiceModule {\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiFileItemUtil } from './TiFileItemUtil';\r\nimport { TiUploadUtil } from './TiUploadUtil';\r\nimport { TiUploadServiceModule } from './TiUploadServiceModule';\r\nimport { TiFileInfo, TiFileItem, TiFilter, TiUploadConfig, TiUploadRef } from './TiFileInterface';\r\n\r\n// 文件上传服务封装，一个实例对应一个上传文件队列\r\n// @dynamic\r\n/**\r\n * 文件上传服务，通过该服务生成上传文件实例对象，一个实例对应一个上传文件队列\r\n *\r\n * 该服务适用于自定义文件上传实例方式，使用该服务时需要引入模块TiUploadServiceModule，与[tiFileSelect]{@link ../directives/TiFileSelectDirective.html}配合使用\r\n *\r\n * 除自定义使用方式外，Tiny还提供了两种已设计的上传样式供业务使用，具体见[TiUploadComponent]{@link ../components/TiUploadComponent.html}\r\n *\r\n * <example-url>../tiny3demo/#/upload/upload-all</example-url>\r\n */\r\n@Injectable({\r\n    providedIn: TiUploadServiceModule\r\n})\r\nexport class TiUploadService {\r\n    // 文件校验规则定义\r\n    private static readonly filterRules: any = {\r\n        maxSize: (fileObj: TiFileInfo, params: Array<any>): boolean => {\r\n            const size: number = fileObj.size;\r\n            if (!Util.isNumber(size)) { // 文件大小获取不到情况下，忽略该条校验规则\r\n                return true;\r\n            }\r\n\r\n            return !(size > params[0]);\r\n        },\r\n        minSize: (fileObj: TiFileInfo, params: Array<any>): boolean => {\r\n            const size: number = fileObj.size;\r\n            if (!Util.isNumber(size)) { // 文件大小获取不到情况下，忽略该条校验规则\r\n                return true;\r\n            }\r\n\r\n            return !(size < params[0]);\r\n        },\r\n        type: (fileObj: TiFileInfo, params: Array<any>): boolean => {\r\n            // param参数需使用文件扩展名分开，为了确保各浏览器的一致性，文件类型使用扩展名判断，如果产品需要在选择时限制，请在input上设置accept属性\r\n            let isValidType: boolean = false;\r\n            params[0].split(',')\r\n                .forEach((type: string) => {\r\n                if (fileObj.name.match(new RegExp(`.(${type.replace(/\\./g, '\\\\.')})$`, 'i')) !== null) {\r\n                    isValidType = true;\r\n                }\r\n            });\r\n\r\n            return isValidType;\r\n        },\r\n        maxCount: (fileObj: TiFileInfo, params: Array<any>, fileQueue: Array<TiFileItem>): boolean  => {\r\n            return !(fileQueue.length >= params[0]);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 对单选进行过滤条件重置，单选去除maxCount条件，函数返回过滤后的生效规则\r\n     */\r\n    private static initFilter(rules: Array<TiFilter>, isSingleFile: boolean): Array<TiFilter> {\r\n        if (isSingleFile) { // 单文件情况下去除maxCount设置\r\n            return rules.filter((rule: TiFilter) => {\r\n                return rule.name !== 'maxCount';\r\n            });\r\n        }\r\n\r\n        // 多文件情况下 filter不做处理\r\n        return rules || [];\r\n    }\r\n    /**\r\n     * 根据用户配置的maxCount过滤条件，判断文件是否为单文件上传\r\n     * 用户配置的过滤条件\r\n     * 是否为单文件上传\r\n     */\r\n    private static isSingleFileFn(filters: Array<TiFilter>): boolean {\r\n        if (!filters || !filters.length) { // 不设置filter情况下，为多文件上传\r\n            return false;\r\n        }\r\n        const maxCountIndex: number = filters.findIndex((item: TiFilter): boolean => {\r\n            return item.name === 'maxCount';\r\n        });\r\n        // 存在maxCount规则，并且其参数不为1的情况下，为多文件上传\r\n        if (maxCountIndex === -1 || (filters[maxCountIndex].params && filters[maxCountIndex].params[0] !== 1)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 批量上传文件\r\n     *   {Array} 上传文件items数组\r\n     * 返回 无\r\n     */\r\n    private static uploadItems(items: Array<TiFileItem>): void {\r\n        if (!items.length) {\r\n            return;\r\n        }\r\n        // 设置上传文件标志位,文件逐个上传情况下,会根据该标志位决定下个上传文件\r\n        items.forEach((item: TiFileItem) => {\r\n            item.isReady = true;\r\n        });\r\n\r\n        // 开始上传文件\r\n        if (items[0].batchSend) {\r\n            TiUploadUtil.uploadItems(items);\r\n        } else { // 上传单个文件，在upload方法中会依据isReady的设置进行其他文件的串行上传\r\n            TiUploadUtil.uploadItems([items[0]]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 批量取消上传文件\r\n     * 返回 无\r\n     */\r\n    private static cancelItems(items: Array<TiFileItem>): void {\r\n        if (!items.length) {\r\n            return;\r\n        }\r\n        if (items[0].batchSend) { // 一个链接上传情况下，一次取消多个items，仅触发一次事件\r\n            TiUploadUtil.cancelItems(items);\r\n        } else { // 逐个链接上传情况下，一次仅取消一个items，触发多次事件\r\n            items.forEach((item: TiFileItem) => {\r\n                item.cancel();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 批量删除文件,只涉及上传队列的文件删除，具体的后台删除还需要产品向后台发送文件删除请求实现\r\n     *   {Array} 上传文件items数组\r\n     * 返回 无\r\n     */\r\n    private static removeItems(items: Array<TiFileItem>): void {\r\n        if (!items.length) {\r\n            return;\r\n        }\r\n        if (items[0].batchSend) { // 一个链接上传情况下，一次删除多个items，仅触发一次事件\r\n            TiUploadUtil.removeItems(items);\r\n        } else { // 逐个链接上传情况下，一次仅删除一个items，触发多次事件\r\n            items.forEach((item: TiFileItem) => {\r\n                item.remove();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 单个文件的有效性校验\r\n     * 返回 {Array} 由不符合的规则name组成的数组\r\n     */\r\n    private static getInvalidRules(tifileObject: TiFileInfo, filtersRules: Array<TiFilter>, fileQueue: Array<TiFileItem>): Array<string> {\r\n        // 无效判断\r\n        const filterLen: number = filtersRules.length;\r\n        if (filterLen === 0) {\r\n            return [];\r\n        }\r\n\r\n        // 逐条规则校验，并返回结果数组\r\n        const invalidRetArr: Array<string> = []; // 校验返回结果数组，该数组中返回的是不符合的校验规则name\r\n        for (let i: number = 0; i < filterLen; i++) {\r\n            const filterConfig: TiFilter = filtersRules[i]; // 单条校验规则配置\r\n\r\n            // 根据配置寻找规则函数（规则分为默认规则 和 自定义规则）\r\n            const filterName: string = filterConfig.name; // 配置规则名称\r\n            let ruleFn: (fileObj: TiFileInfo, params: Array<any>, fileQueue: Array<TiFileItem>) => boolean; // 规则函数\r\n            if (typeof filterConfig.fn === 'function') {\r\n                ruleFn = filterConfig.fn;\r\n            } else if (TiUploadService.filterRules[filterName]) { // 未定义fn的情况下，从默认规则中找\r\n                ruleFn = TiUploadService.filterRules[filterName];\r\n            }\r\n\r\n            // 调用规则函数，判断文件有效性\r\n            if ((typeof ruleFn === 'function') &&\r\n                !ruleFn(tifileObject, filterConfig.params, fileQueue)) {\r\n                invalidRetArr.push(filterName);\r\n            }\r\n        }\r\n\r\n        return invalidRetArr;\r\n    }\r\n    /**\r\n     * 获取未上传文件队列\r\n     */\r\n    private static getNotUploadedItems(fileQueue: Array<TiFileItem>): Array<TiFileItem> {\r\n        return fileQueue.filter((item: TiFileItem): boolean => {\r\n            return !item.isUploaded;\r\n        });\r\n    }\r\n    /**\r\n     * 获取待上传文件，该方法用于文件批量上传时获取上传文件队列\r\n     * 返回 {Array} 返回待上传文件，且文件队列返回值是根据文件点选次序排列\r\n     */\r\n    private static getReadyItems(fileQueue: Array<TiFileItem>): Array<TiFileItem> {\r\n        return fileQueue.filter((item: TiFileItem): boolean => {\r\n            return item.isReady && !item.isUploading;\r\n        })\r\n        .sort((item1: TiFileItem, item2: TiFileItem): number  => {\r\n            return item1.index - item2.index;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获取上传失败文件，该方法用于文件批量上传时获取上传失败文件队列\r\n     * 返回 {Array} 返回上传失败文件，且文件队列返回值是根据文件点选次序排列\r\n     */\r\n    private static getErrorItems(fileQueue: Array<TiFileItem>): Array<TiFileItem> {\r\n        return fileQueue.filter((item: TiFileItem): boolean => {\r\n            return item.isError;\r\n        })\r\n        .sort((item1: TiFileItem, item2: TiFileItem): number => {\r\n            return item1.index - item2.index;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 重新上传列表中所有先前上传错误文件\r\n     * 返回 无\r\n     */\r\n    private static reloadAllError(fileQueue: Array<TiFileItem>): void {\r\n        TiUploadService.uploadItems(TiUploadService.getErrorItems(fileQueue));\r\n    }\r\n\r\n    /**\r\n     * 重新上传列表中所有文件\r\n     * 返回 无\r\n     */\r\n    private static reloadAll(fileQueue: Array<TiFileItem>): void {\r\n        TiUploadService.uploadItems(fileQueue);\r\n    }\r\n\r\n    /**\r\n     * 上传列表中所有未上传过的文件\r\n     * 返回 无\r\n     */\r\n    private static uploadAll(fileQueue: Array<TiFileItem>): void {\r\n        const items: Array<TiFileItem> = this.getNotUploadedItems(fileQueue)\r\n            .filter((item: TiFileItem): boolean => {\r\n            return !item.isUploading;\r\n        });\r\n        TiUploadService.uploadItems(items);\r\n    }\r\n\r\n    /**\r\n     * 判断是否有未上传的\r\n     * 返回 boolean\r\n     */\r\n    private static isUploadedAll(fileQueue: Array<TiFileItem>): boolean {\r\n        const items: Array<TiFileItem>  = this.getNotUploadedItems(fileQueue)\r\n            .filter((item: TiFileItem): boolean => {\r\n            return !item.isUploading;\r\n        });\r\n\r\n        return items.length === 0;\r\n    }\r\n\r\n    /**\r\n     * 删除所有队列中的文件\r\n     */\r\n    private static removeAll(fileQueue: Array<TiFileItem>): void {\r\n        while (fileQueue.length !== 0) {\r\n            fileQueue[0].remove();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 取消所有队列中的文件(未上传和待上传文件)\r\n     */\r\n    private static cancelAll(fileQueue: Array<TiFileItem>): void {\r\n        const items: Array<TiFileItem>  = this.getNotUploadedItems(fileQueue);\r\n        TiUploadService.cancelItems(items);\r\n    }\r\n\r\n    /**\r\n     * 创建文件上传实例\r\n     */\r\n    create(config: TiUploadConfig): TiUploadRef {\r\n        const isSingleFile: boolean = TiUploadService.isSingleFileFn(config.filters); // 文件是否为单文件设置\r\n        const filters: Array<TiFilter> = TiUploadService.initFilter(config.filters, isSingleFile); // 文件校验过滤规则\r\n\r\n        let uploader: TiUploadRef;\r\n        const fileQueue: Array<TiFileItem> = []; // 文件队列列表，一个实例对应一个文件列表\r\n        let fileIndex: number = 0; // 文件次序定义，用作文件索引\r\n        /**\r\n         * 将选择的文件进行有效验证后加入到队列中,外部调用该方法时,认为该队列中的文件和当前uploader的配置项一致\r\n         *   files {FileList|FileInput} 文件对象\r\n         * 返回 {Array} 已添加文件数组\r\n         */\r\n        const addToQueue: (files: FileList | Element) => Array<TiFileItem> =\r\n            (files: FileList | Element): Array<TiFileItem> => {\r\n            // 循环列表添加文件\r\n            const addedItems: Array<TiFileItem> = []; // 用于记录本次选择文件列表\r\n            if (files && !Util.isUndefined((files as FileList).length)) { // H5方式\r\n                for (let i: number = 0; i < (files as FileList).length; i++) {\r\n                    addItem(files[i], addedItems);\r\n                }\r\n            } else {\r\n                addItem(files, addedItems);\r\n            }\r\n\r\n            return addedItems;\r\n        };\r\n        const addItem: (fileOrInput: any, addedItems: Array<any>) => void =\r\n            (fileOrInput: any, addedItems: Array<any>): void => {\r\n            // 文件对象，该对象包含文件的基本信息，统一了浏览器的差异性，会在文件过滤失败回调中作为参数传递给外部\r\n            const tifileObject: TiFileInfo = TiFileItemUtil.createFileObject(fileOrInput);\r\n\r\n            // 校验单个文件的有效性，并根据校验结果进行文件操作\r\n            const invalidArr: Array<string> = TiUploadService.getInvalidRules(tifileObject, filters, fileQueue); // 校验结果数组，数组中定义校验错误规则的name\r\n            let isValid: boolean = !invalidArr.length; // 校验结果返回数组为空时有效\r\n\r\n            // 单文件情况下，需要覆盖原有有效文件\r\n            if (isSingleFile) {\r\n                if (fileQueue[0]) {\r\n                    fileQueue[0].remove(); // 删除先前队列中的文件\r\n                }\r\n                if (invalidArr.length === 0) {\r\n                    isValid = true; // 置位校验结果值\r\n                }\r\n            }\r\n            if (isValid) { // 校验成功情况下，将文件加入到上传队列中，并触发\r\n                // 上传文件对象,该对象中包含文件及状态信息等,在回调中传递\r\n                const fileItem: TiFileItem = TiFileItemUtil.createFileItem(tifileObject, fileOrInput,\r\n                    config, uploader);\r\n                addedItems.push(fileItem);\r\n                fileQueue.push(fileItem);\r\n                fileItem.index = ++fileIndex; // 文件序列数增加，确保整个文件队列中该值唯一\r\n                if (typeof config.onAddItemSuccess === 'function') {\r\n                    config.onAddItemSuccess(fileItem);\r\n                }\r\n            } else if (typeof config.onAddItemFailed === 'function') {\r\n                config.onAddItemFailed(tifileObject, invalidArr);\r\n            }\r\n        };\r\n        uploader = {\r\n            queue: fileQueue, // 上传文件队列,可读属性\r\n            isSingleFile, // 文件是否有单文件选择限制\r\n            config, // 是否自动上传文件\r\n            _addToQueue: addToQueue, // 文件添加方法\r\n            getNotUploadedItems(): Array<TiFileItem> {\r\n                return TiUploadService.getNotUploadedItems(fileQueue);\r\n            }, // 未上传完成文件获取\r\n            getReadyItems(): Array<TiFileItem> {\r\n                return TiUploadService.getReadyItems(fileQueue);\r\n            }, // 已提交上传，但还未上传文件获取\r\n            uploadAll(): void {\r\n                TiUploadService.uploadAll(fileQueue);\r\n            }, // 上传队列中所有还未执行过上传的文件\r\n            isUploadedAll(): boolean {\r\n                return TiUploadService.isUploadedAll(fileQueue);\r\n            }, // 上传队列中是否有未上传过的\r\n            removeAll(): void {\r\n                TiUploadService.removeAll(fileQueue);\r\n            }, // 删除队列中所有文件\r\n            cancelAll(): void {\r\n                TiUploadService.cancelAll(fileQueue);\r\n            }, // 取消队列中所有上传文件\r\n            reloadAll(): void {\r\n                TiUploadService.reloadAll(fileQueue);\r\n            }, // 重新上传队列中所有文件\r\n            reloadAllError(): void {\r\n                TiUploadService.reloadAllError(fileQueue);\r\n            }, // 重新上传队列中所有上传错误文件\r\n            uploadItems: TiUploadService.uploadItems, // 上传队列中某几项文件\r\n            removeItems: TiUploadService.removeItems, // 删除队列中某几项文件\r\n            cancelItems: TiUploadService.cancelItems // 取消队列中某几项文件\r\n        };\r\n\r\n        return uploader;\r\n    }\r\n}\r\n","import { Component, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2 } from '@angular/core';\r\nimport { TiFileInfo, TiFileItem, TiFilter, TiUploadConfig, TiUploadRef } from '../../services/upload/TiFileInterface';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\nimport { TiLocale, TiLocaleWords } from '../../locale/TiLocaleModule';\r\nimport { TiBrowser, Util } from '../../utils/Util';\r\n\r\n/**\r\n * 10.0.2版本抽取\r\n *\r\n * upload基类，继承于TiBaseComponent组件\r\n */\r\n@Component({\r\n    selector: 'ti-uploadbase',\r\n    template: ''\r\n})\r\nexport class TiUploadbaseComponent extends TiBaseComponent implements OnInit {\r\n\r\n    /**\r\n     * 文件上传地址配置\r\n     */\r\n    @Input() url: string;\r\n    /**\r\n     * 上传方式，可选值为：get/post(其他方式IE9不支持，因此暂不开放)\r\n     */\r\n    @Input() method: 'get'|'post' = 'post';\r\n    /**\r\n     * 文件有效性判断条件数组\r\n     */\r\n    @Input() filters: Array<TiFilter>;\r\n    /**\r\n     * 向后台发送请求时对应的文件对象name属性，该name属性是后台读取文件的入口值\r\n     */\r\n    @Input() alias: string = 'tiFile';\r\n    /**\r\n     * 上传文件附带信息，数据类型为对象形式\r\n     */\r\n    @Input() formData: object;\r\n    /**\r\n     * 上传对象信息中，formData是否先于file对象，适用于后台传输时，formData数据先于file对象的场景\r\n     */\r\n    @Input() formDataFirst: boolean = false;\r\n    /**\r\n     * 文件选中后是否自动上传\r\n     */\r\n    @Input() autoUpload: boolean = true;\r\n    /**\r\n     * 文件上传是否 是否一次请求传输多个文件，默认情况下一次请求上传一个文件\r\n     */\r\n    @Input() batchSend: boolean = false;\r\n    /**\r\n     * 上传文件请求头配置，自定义为对象形式\r\n     */\r\n    @Input() headers: object;\r\n    /**\r\n     * 文件类型过滤配置，适用于IE10+浏览器，能做到文件弹窗中不出现非法类型的文件，主要适用于两种场景：\r\n     *\r\n     * 1.过滤规则中带类型过滤，但是想要去掉文件选择框中文件过滤的场景（设置accept为空字符串即可）：此种场景应用于浏览器设置accept后导致文件窗打开很慢的情况\r\n     *\r\n     * 2.不需要定义文件类型过滤条件，但是通过accept能精确的确保文件类型的场景\r\n     */\r\n    @Input() accept: string;\r\n\r\n    /**\r\n     * 是否禁用\r\n     */\r\n    @Input() disabled: boolean = false;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    title: string = TiBrowser.isChrome() ? ' ' : ''; // 禁用文件上传默认tip提示,Chrome下设置title为\"\"时会显示默认提示，所以Chrome下需要设置为\" \";而IE下设置为\" \"会显示文本为空的tip\r\n\r\n    /**\r\n     * 文件添加失败回调，可使用该回调定义上传错误提示\r\n     *\r\n     * 参数为对象形式，结构如下：\r\n     *\r\n     * {\r\n     *\r\n     * file: [TiFileInfo]{@link ../interfaces/TiFileInfo.html}, // 上传文件信息\r\n     *\r\n     * validResults: Array&lt;string&gt;  // 校验不合法的规则name数组\r\n     *\r\n     * }\r\n     */\r\n    @Output() readonly addItemFailed: EventEmitter<{file: TiFileInfo, validResults: Array<string>}> =\r\n        new EventEmitter<{file: TiFileInfo, validResults: Array<string>}>();\r\n    /**\r\n     * 文件添加成功回调\r\n     *\r\n     * 参数：文件对象\r\n     */\r\n    @Output() readonly addItemSuccess: EventEmitter<TiFileItem> = new EventEmitter<TiFileItem>();\r\n    // 以下回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理\r\n    /**\r\n     * 上传文件前回调，可在该回调中动态设置formData\r\n     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理\r\n     *\r\n     * 参数为数组形式，代表上传的文件对象\r\n     */\r\n    @Output() readonly beforeSendItems: EventEmitter<Array<TiFileItem>> = new EventEmitter<Array<TiFileItem>>();\r\n    /**\r\n     * 上传文件进度改变回调\r\n     *\r\n     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理\r\n     *\r\n     * 参数为对象形式，结构如下：\r\n     *\r\n     * {\r\n     *\r\n     * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组\r\n     *\r\n     * progress: number  // 进度信息\r\n     *\r\n     * }\r\n     */\r\n    @Output() readonly progressItems: EventEmitter<{fileItems: Array<TiFileItem>, progress: number}> =\r\n        new EventEmitter<{fileItems: Array<TiFileItem>, progress: number}>();\r\n    /**\r\n     * 文件上传完成回调，成功/失败都会触发\r\n     *\r\n     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理\r\n     *\r\n     * 参数为对象形式，结构如下：\r\n     *\r\n     * {\r\n     *\r\n     * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组\r\n     *\r\n     * response: string  // 文件上传响应信息\r\n     *\r\n     * status: number 文件上传响应状态码\r\n     *\r\n     * }\r\n     */\r\n    @Output() readonly completeItems: EventEmitter<{fileItems: Array<TiFileItem>, response: string, status: number}> =\r\n        new EventEmitter<{fileItems: Array<TiFileItem>, response: string, status: number}>();\r\n    /**\r\n     * 文件上传成功回调\r\n     *\r\n     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理\r\n     *\r\n     * 参数为对象形式，结构如下：\r\n     *\r\n     * {\r\n     *\r\n     * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组\r\n     *\r\n     * response: string  // 文件上传响应信息\r\n     *\r\n     * status: number 文件上传响应状态码\r\n     *\r\n     * }\r\n     */\r\n    @Output() readonly successItems: EventEmitter<{fileItems: Array<TiFileItem>, response: string, status: number}> =\r\n        new EventEmitter<{fileItems: Array<TiFileItem>, response: string, status: number}>();\r\n    /**\r\n     * 文件上传失败回调\r\n     *\r\n     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理\r\n     *\r\n     * 参数为对象形式，结构如下：\r\n     *\r\n     * {\r\n     *\r\n     * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组\r\n     *\r\n     * response: string  // 文件上传响应信息\r\n     *\r\n     * status: number 文件上传响应状态码\r\n     *\r\n     * }\r\n     */\r\n    @Output() readonly errorItems: EventEmitter<{fileItems: Array<TiFileItem>, response: string, status: number}> =\r\n        new EventEmitter<{fileItems: Array<TiFileItem>, response: string, status: number}>();\r\n    /**\r\n     * 文件上传取消回调\r\n     *\r\n     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理\r\n     *\r\n     * 参数为对象形式，结构如下：\r\n     *\r\n     * {\r\n     *\r\n     * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组\r\n     *\r\n     * response: string  // 文件上传响应信息\r\n     *\r\n     * status: number 文件上传响应状态码\r\n     *\r\n     * }\r\n     */\r\n    @Output() readonly cancelItems: EventEmitter<{fileItems: Array<TiFileItem>, response: string, status: number}> =\r\n        new EventEmitter<{fileItems: Array<TiFileItem>, response: string, status: number}>();\r\n    /**\r\n     * 上传删除回调\r\n     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理\r\n     *\r\n     * 参数为数组形式，代表在操作的文件对象\r\n     */\r\n    @Output() readonly removeItems: EventEmitter<Array<TiFileItem>> = new EventEmitter<Array<TiFileItem>>();\r\n    /**\r\n     * 所有文件上传完成回调\r\n     *\r\n     * 参数为数组形式，代表在操作的文件对象\r\n     */\r\n    @Output() readonly completeAllItems: EventEmitter<Array<TiFileItem>> = new EventEmitter<Array<TiFileItem>>();\r\n    /**\r\n     * 上传文件删除前的回调\r\n     *\r\n     * 参数为数组形式，代表在操作的文件对象\r\n     */\r\n    @Output() readonly beforeRemoveItems: EventEmitter<Array<TiFileItem>> = new EventEmitter<Array<TiFileItem>>();\r\n\r\n    /**\r\n     * 上传实例的配置信息\r\n     */\r\n    public uploadConfig: TiUploadConfig;\r\n\r\n    /**\r\n     * @ignore 生成的上传文件实例\r\n     */\r\n    public uploadInst: TiUploadRef;\r\n\r\n    /**\r\n     * @ignore 词条\r\n     */\r\n    // tslint:disable-next-line:typedef\r\n    public uploadLan = (TiLocale.getLocaleWords() as TiLocaleWords).tiUpload;\r\n\r\n    constructor(protected hostRef: ElementRef, protected renderer: Renderer2) {\r\n        super(hostRef, renderer);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.uploadConfig = {\r\n            url: this.url, // 文件上传地址配置\r\n            method: this.method, // 上传方式，可选值为：get、post(其他方式IE9不支持)\r\n            filters: this.filters, // 文件有效性判断条件数组\r\n            alias: this.alias, // 向后台发送请求时对应的文件对象name属性，该name属性是后台读取文件的入口值，默认值为 'tiFile'\r\n            formData: this.formData, // 上传文件附带信息\r\n            autoUpload: this.autoUpload, // 是否自动上传，默认为true\r\n            batchSend: this.batchSend || false, // 是否一次性上传多个文件\r\n            formDataFirst: this.formDataFirst || false, // formData是否先于file对象\r\n            headers: this.headers, // 上传文件请求头配置\r\n            onAddItemFailed: (file: TiFileInfo, validResults: Array<string>): void => {\r\n                this.addItemFailed.emit({file, validResults});\r\n            },\r\n            onAddItemSuccess: (fileItem: TiFileItem): void => {\r\n                this.addItemSuccess.emit(fileItem);\r\n            },\r\n            onBeforeSendItems: (fileItems: Array<TiFileItem>): void => {\r\n                this.beforeSendItems.emit(fileItems);\r\n            },\r\n            onProgressItems: (fileItems: Array<TiFileItem>, progress: number): void => {\r\n                this.progressItems.emit({fileItems, progress});\r\n            },\r\n            onCompleteItems: (fileItems: Array<TiFileItem>, response: string, status: number): void => {\r\n                this.completeItems.emit({fileItems, response, status});\r\n            },\r\n            onSuccessItems: (fileItems: Array<TiFileItem>, response: string, status: number): void => {\r\n                this.successItems.emit({fileItems, response, status});\r\n            },\r\n            onErrorItems: (fileItems: Array<TiFileItem>, response: string, status: number): void => {\r\n                this.errorItems.emit({fileItems, response, status});\r\n            },\r\n            onCancelItems: (fileItems: Array<TiFileItem>, response: string, status: number): void  => {\r\n                this.cancelItems.emit({fileItems, response, status});\r\n            },\r\n            onRemoveItems: (fileItems: Array<TiFileItem>): void => {\r\n                this.removeItems.emit(fileItems);\r\n            },\r\n            onBeforeRemoveItems: (fileItems: Array<TiFileItem>): void => {\r\n                this.beforeRemoveItems.emit(fileItems);\r\n            },\r\n            onCompleteAllItems: (fileItems: Array<TiFileItem>): void => {\r\n                this.completeAllItems.emit(fileItems);\r\n            }\r\n        };\r\n        // 根据配置的文件类型过滤属性设置H5下的文件过滤属性,如果accept未定义,则按照type过滤条件进行设置；\r\n        // 如果accept已定义，则按照accept定义设置：此种场景应用于浏览器设置accept后导致文件窗打开很慢的情况\r\n        if (Util.isUndefined(this.accept) && this.filters && this.filters.length) {\r\n            this.filters.forEach((filter: TiFilter) => {\r\n                if (filter.name === 'type') {\r\n                    this.accept = filter.params[0];\r\n                }\r\n\r\n                return;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 手动上传，可以通过组件调用\r\n     */\r\n    public upload(): void {\r\n        this.uploadInst.uploadAll();\r\n    }\r\n\r\n}\r\n","import { Component, ElementRef, Input, Renderer2, ViewChild } from '@angular/core';\r\nimport { TiFileItem } from '../../services/upload/TiFileInterface';\r\nimport { TiUploadService } from '../../services/upload/TiUploadService';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiOverflowService } from '../../services/overflow/TiOverflowService';\r\nimport { TiUploadbaseComponent } from './TiUploadbaseComponent';\r\n\r\n/**\r\n * 该组件用于实现已设计好的交互完整的文件上传组件，包含两种样式：\r\n *\r\n * 1.带输入框的样式(type为inputField)\r\n *\r\n * 2.按钮样式(type为button)\r\n *\r\n * 如果以上两种样式不满足业务场景，可使用自定义方式实现，具体实现请参考[tiFileSelect]{@link ../directives/TiFileSelectDirective.html}\r\n *\r\n * <example-url>../tiny3demo/#/upload/upload-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-upload:not([type]), ti-upload[type=\"inputField\"], ti-upload[type=\"button\"]',\r\n    templateUrl: './upload.html',\r\n    styleUrls: ['./upload.less']\r\n})\r\n\r\nexport class TiUploadComponent extends TiUploadbaseComponent {\r\n    constructor(private uploaderService: TiUploadService, hostEle: ElementRef, renderer: Renderer2,\r\n                private tiOverflow: TiOverflowService) {\r\n        super(hostEle, renderer);\r\n    }\r\n    /**\r\n     * 上传样式类型\r\n     */\r\n    @Input() type: 'inputField'|'button' = 'inputField';\r\n    /**\r\n     * 按钮的配置\r\n     *\r\n     * type为button形式时,为文件选择按钮文字；\r\n     *\r\n     * type为inputField时,为上传按钮文字\r\n     */\r\n    @Input() buttonText: string; // 按钮的配置,type为button形式时,为文件选择按钮文字；type为inputField时,为上传按钮文字\r\n\r\n    // inputField形式文件上传的相关配置\r\n    /**\r\n     * 选择输入框宽度设置，只适用于inputField类型，数据类型同css width属性设置\r\n     */\r\n    @Input() inputFieldWidth: string;\r\n    /**\r\n     * 是否显示提交按钮，只适用于inputField类型\r\n     *\r\n     * 默认值与autoUpload值相关，当autoUpload为true时，不显示；反之则显示\r\n     */\r\n    @Input() showSubmitButton: boolean;\r\n    /**\r\n     * 输入提示，只适用于inputField类型\r\n     */\r\n    @Input() placeholder: string;\r\n    /**\r\n     * 是否自动聚焦，只适用于inputField类型\r\n     */\r\n    @Input() autofocus: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    @ViewChild('fileInput') fileInput: any;\r\n    /**\r\n     * @ignore 多文件上传的状态提示信息\r\n     */\r\n    stateInfo: string;\r\n    /**\r\n     * @ignore 是否定义beforeRemoveItems事件\r\n     */\r\n    isRemove: boolean;\r\n    /**\r\n     * @ignore 点击上传按钮触发事件\r\n     */\r\n    onSelectClick(): void {\r\n        this.fileInput.nativeElement.click();\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    // tslint:disable-next-line: use-life-cycle-interface\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        // 创建uploader实例\r\n        const autoUpload: boolean = Util.isUndefined(this.autoUpload) ? true : this.autoUpload;\r\n        this.uploadConfig.autoUpload = autoUpload;\r\n        this.uploadInst = this.uploaderService.create(this.uploadConfig);\r\n        this.placeholder = this.setPlaceholder();\r\n        // 设置submit按钮的显示状态\r\n        this.showSubmitButton = Util.isUndefined(this.showSubmitButton) ?\r\n            !autoUpload : this.showSubmitButton;\r\n        // 是否定义beforeRemoveItems事件\r\n        this.isRemove = this.beforeRemoveItems.observers.length !== 0;\r\n    }\r\n    // tslint:disable-next-line:use-life-cycle-interface\r\n    ngAfterViewInit(): void {\r\n        super.ngAfterViewInit();\r\n        // 处理autofocus\r\n        if (this.autofocus === true) {\r\n            this.focus();\r\n        }\r\n    }\r\n    // 提供focus/blur方法，供外部调用\r\n    /**\r\n     * 聚焦方法，只适用于inputField类型\r\n     */\r\n    focus(): void {\r\n        this.fileInput.nativeElement.nextElementSibling.focus();\r\n    }\r\n    /**\r\n     * 失焦方法，只适用于inputField类型\r\n     */\r\n    blur(): void {\r\n        this.fileInput.nativeElement.nextElementSibling.blur();\r\n    }\r\n    // 通过item元素的移入移出事件控制元素的hover状态，该hover状态会决定item中部分按钮的显示状态\r\n    /**\r\n     * @ignore\r\n     */\r\n    onItemMouseenter(item: TiFileItem, event: any): void {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        item.isHover = true;\r\n        // 文件名超长溢出时，显示名称\r\n        const fileNameEle: Element = event.target.querySelector('.ti3-aui-file-name');\r\n        item.isOverflow = this.tiOverflow.isOverflow(fileNameEle);\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    onItemMouseleave(item: TiFileItem): void {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        item.isHover = false;\r\n    }\r\n    // 获取上传文件状态，同时根据状态设置状态详细信息\r\n    /**\r\n     * @ignore\r\n     */\r\n    getUploadState(): string {\r\n        let uploadingLen: number = 0;\r\n        let uploadErrLen: number = 0;\r\n        let uploadSuccLen: number = 0;\r\n        this.uploadInst.queue.forEach((item: TiFileItem) => {\r\n            if (item.isUploading) {\r\n                uploadingLen++;\r\n            } else if (item.isError) {\r\n                uploadErrLen++;\r\n            } else if (item.isSuccess) {\r\n                uploadSuccLen++;\r\n            }\r\n        });\r\n        const fileQueueLen: number = this.uploadInst.queue.length;\r\n        if (uploadSuccLen === fileQueueLen) {\r\n            this.stateInfo = this.uploadLan.successInfo;\r\n\r\n            return 'success';\r\n        }\r\n        if (uploadErrLen !== 0) {\r\n            this.stateInfo = Util.formatEntry(this.uploadLan.errorMultiInfo, [uploadErrLen]);\r\n\r\n            return 'error';\r\n        }\r\n        if (uploadingLen !== 0) {\r\n            this.stateInfo = Util.formatEntry(this.uploadLan.uploadingMutiInfo, [`${uploadingLen}/${fileQueueLen}`]);\r\n\r\n            return 'uploading';\r\n        }\r\n        this.stateInfo = Util.formatEntry(this.uploadLan.addSuccessMutiInfo, [fileQueueLen]);\r\n\r\n        return 'addSuccess';\r\n    }\r\n    /**\r\n     * 初始设置输入框内提示文本\r\n     * 四种场景：自动单文件上传，自动多文件上传，手动单文件上传，手动多文件上传\r\n     */\r\n    private setPlaceholder(): string {\r\n        if (this.placeholder) {\r\n            return this.placeholder;\r\n        }\r\n\r\n        if (this.autoUpload) {\r\n            if (this.uploadInst.isSingleFile) {\r\n                return this.uploadLan.autoUploadFilePlaceholder;\r\n            }\r\n\r\n            return this.uploadLan.autoUploadFilesPlaceholder;\r\n        }\r\n\r\n        if (this.uploadInst.isSingleFile) {\r\n            return this.uploadLan.notAutoUploadFilePlaceholder;\r\n        }\r\n\r\n        return this.uploadLan.notAutoUploadFilesPlaceholder;\r\n    }\r\n}\r\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\r\n/**\r\n * @ignore\r\n */\r\n@Directive({\r\n    selector: '[tiDisabled]'\r\n})\r\n\r\nexport class TiDisabledDirective {\r\n    constructor(private hostEle: ElementRef, private renderer: Renderer2) {\r\n    }\r\n    @Input()\r\n    set tiDisabled(value: boolean) {\r\n        if (value) {\r\n            this.renderer.setAttribute(this.hostEle.nativeElement, 'disabled', 'disabled');\r\n        } else {\r\n            this.renderer.removeAttribute(this.hostEle.nativeElement, 'disabled');\r\n        }\r\n    }\r\n}\r\n","import { ComponentRef, Injectable, TemplateRef } from '@angular/core';\r\nimport { TiPopUpRef, TiPopupService } from '../popup/TiPopupService';\r\nimport { TiBackdropComponent } from './TiBackdropComponent';\r\nimport { TiBackdropNoAnimationComponent } from './TiBackdropNoAnimationComponent';\r\nimport { TiModalComponent } from './TiModalComponent';\r\nimport { TiModalNoAnimationComponent } from './TiModalNoAnimationComponent';\r\nimport { TiBrowser, Util } from '../../utils/Util';\r\nimport { TiModalModule } from './TiModalModule';\r\nimport { TiModalConfig, TiModalRef } from './TiModalInterface';\r\n\r\n\r\n/**\r\n * 弹框组件提供服务方式供业务使用，使用该服务时需要引入模块TiModalModule，开发者通过调用TiModalService.open方法生成弹出框\r\n *\r\n * <p><span style=\"color: red\">使用此组件时需要开发者在项目模块(建议在根模块)\r\n * 中引入BrowserAnimationsModule。</span>这是因为此组件中使用了Angular动画，需要引入BrowserAnimationsModule，\r\n * 但是 BrowserAnimationsModule 不能在懒加载模块被重复引入，所以需要开发者来引入BrowserAnimationsModule，保证其引入一次。</p>\r\n *\r\n * <example-url>../tiny3demo/#/modal/modal-all</example-url>\r\n */\r\n@Injectable({\r\n    providedIn: TiModalModule\r\n})\r\nexport class TiModalService {\r\n    /**\r\n     * 页面中存在的所有弹框实例，用于处理业务中无法明确当前有多少有效弹窗场景\r\n     */\r\n    public openedModals: Array<TiModalRef> = []; // 所有当前处于打开状态弹框缓存数组\r\n    /* tslint:disable:no-null-keyword */\r\n    private backdropComponentRef: ComponentRef<TiBackdropComponent> = null; // 单个页面中多个弹框出现时,只允许存在一个遮罩层,因此使用该标志位用来缓存遮罩实例\r\n    private defaultConfig: TiModalConfig = {\r\n        backdrop: true,\r\n        draggable: true,\r\n        animation: true,\r\n        closeOnEsc: true,\r\n        closeIcon: true\r\n    };\r\n    constructor(private popService: TiPopupService<any>) {\r\n    }\r\n\r\n    /**\r\n     * 生成弹框方法\r\n     *\r\n     * @param content 弹框内容，支持TemplateRef及组件形式，内容由ti-modal-header、ti-modal-body及ti-modal-footer组件构成弹框内容整体。\r\n     *                不支持字符串形式，如果误传入字符串形式，不仅会有报错，还会存在XSS攻击风险，不过XSS攻击风险已在10.1.4版本已处理。\r\n     * @param [config] 弹框配置信息\r\n     * @returns 弹框实例信息，使用该实例信息可调用弹框的close等方法；弹框内容为component类型时，也可通过该实例信息的content属性获取弹框内容数据\r\n     */\r\n    public open(content: TemplateRef<any> | any, config?: TiModalConfig): TiModalRef {\r\n        let modalInstance: TiModalRef; // 弹框最终返回的实例对象\r\n        let modalComponentRef: ComponentRef<TiModalComponent>; // 弹框组件实例,使用该实例获取弹框DOM元素及做属性赋值操作\r\n        const modalConfig: TiModalConfig = {...this.defaultConfig, ...config}; // 弹框配置合并\r\n        let modal: { modalComponentRef: ComponentRef<TiModalComponent>, hide(): void}; // generateModal方法返回值\r\n\r\n        // 通过id唯一标识防止重复打开相同弹框,id重复情况下返回先前实例\r\n        if (modalConfig && !Util.isUndefined(modalConfig.id)) {\r\n            const index: number = this.openedModals.findIndex((item: TiModalRef) => {\r\n                return item._id === modalConfig.id;\r\n            });\r\n            if (index !== -1) {\r\n                return this.openedModals[index];\r\n            }\r\n        }\r\n        // 根据beforeClose返回处理弹窗的销毁：业务在beforeClose中调用弹框销毁\r\n        const destroy: (reason: boolean) => void =\r\n            (reason: boolean): void => {\r\n            if (typeof modalConfig.beforeClose === 'function') {\r\n                modalConfig.beforeClose(modalInstance, reason);\r\n            } else {\r\n                destroyModal(reason);\r\n            }\r\n        };\r\n        // 销毁弹框：通过调用组件的动画状态方式实现动画处理\r\n        const destroyModal: (reason?: boolean) => void =\r\n            (reason?: boolean): void => {\r\n            if (reason) {\r\n                if (typeof modalConfig.close === 'function') {\r\n                    modalConfig.close(modalInstance);\r\n                }\r\n            } else {\r\n                if (typeof modalConfig.dismiss === 'function') {\r\n                    modalConfig.dismiss(modalInstance);\r\n                }\r\n            }\r\n            modalComponentRef.instance.showState = 'hide';\r\n        };\r\n        // 销毁弹框实体：弹框动画执行完成后调用该方法\r\n        const removeModalEle: () => void =\r\n            (): void => {\r\n            // 销毁弹框实体DOM\r\n            modal.hide();\r\n            // 移除缓存实例\r\n            const index: number = this.openedModals.indexOf(modalInstance);\r\n            this.openedModals.splice(index, 1);\r\n            modalInstance = null;\r\n\r\n            // 销毁backdrop\r\n            destroyBackdrop();\r\n        };\r\n        const destroyBackdrop: () => void =\r\n        (): void => {\r\n            // backdrop定义为false时，不进行处理\r\n            // backdropComponentRef 已经销毁\r\n            if (!modalConfig.backdrop || !this.backdropComponentRef) {\r\n                return;\r\n            }\r\n            // 修改backdrop zIndex，确保有多个弹窗情况下，最外层弹窗不被遮挡\r\n            this.backdropComponentRef.instance.index = this.openedModals.length - 1 ;\r\n            // 当前还有其它弹框情况下,不用销毁弹框\r\n            if (this.openedModals.length !== 0) {\r\n                return;\r\n            }\r\n            this.backdropComponentRef.instance.showState = 'hide';\r\n        };\r\n        // 将当前要打开的modal放到openedModals列表中\r\n        modalInstance = {\r\n            _id: modalConfig && modalConfig.id,\r\n            close(): void {\r\n                destroy(true);\r\n            },\r\n            dismiss(): void {\r\n                destroy(false);\r\n            },\r\n            destroy(reason: boolean): void {\r\n                destroyModal(reason);\r\n            },\r\n            _remove: removeModalEle,\r\n            content: null\r\n        };\r\n        modal = this.generateModal(content, modalConfig, modalInstance);\r\n        // 生成弹框window,并返回对应的组件实例\r\n        modalComponentRef = modal.modalComponentRef;\r\n        // 生成模态背景backdrop\r\n        this.backdropComponentRef = this.generateBackdrop(modalConfig);\r\n\r\n        return modalInstance;\r\n    }\r\n    private generateModal(content: any, config: TiModalConfig, modalInstance: TiModalRef): {\r\n        modalComponentRef: ComponentRef<TiModalComponent>, hide(): void} {\r\n        const {context, ...modalConfig}: TiModalConfig = config;\r\n        // tiModalComponent生成需要使用到的上下文\r\n        const modalContext: any = {\r\n            modalInstance,\r\n            index: this.openedModals.length,\r\n            ...modalConfig\r\n        };\r\n        // 内容部分需要使用到的上下文\r\n        const contentContext: any = {\r\n            close: modalInstance.close,\r\n            dismiss: modalInstance.dismiss,\r\n            ...context\r\n        };\r\n        let modalComponent: any;\r\n        modalComponent = (TiBrowser.isIE() && (TiBrowser.version() === 9))\r\n                        ? this.popService.create(TiModalNoAnimationComponent)\r\n                        : this.popService.create(TiModalComponent);\r\n        const modalComponentRef: any = modalComponent.show({\r\n            content,\r\n            context: modalContext,\r\n            contentContext,\r\n            container: 'body'\r\n        });\r\n        // 控制元素动画呈现，元素呈现后修改动画状态才会有动画效果，因此在此处处理\r\n        modalComponentRef.instance.showState = 'show';\r\n        modalInstance.content = modalComponentRef.tiContentRef.componentRef;\r\n        this.openedModals.push(modalInstance);\r\n\r\n        return { modalComponentRef, hide: modalComponent.hide };\r\n    }\r\n    private generateBackdrop(config: TiModalConfig): ComponentRef<TiBackdropComponent> {\r\n        // 配置中不需要backdrop,不生成\r\n        if (!config.backdrop) {\r\n            return this.backdropComponentRef;\r\n        }\r\n\r\n        if (this.backdropComponentRef) {\r\n            // backdrop已存在的情况下,修改其zIndex,并确保不生成backdrop\r\n            if (this.backdropComponentRef.instance.showState === 'show') {\r\n                this.backdropComponentRef.instance.index = this.openedModals.length - 1;\r\n\r\n                return this.backdropComponentRef;\r\n            // 如果backdrop正在销毁(动画执行期间)时再新生成一个backdrop，这时应该将旧的backdrop立即销毁\r\n            } else {\r\n                this.backdropComponentRef.destroy();\r\n            }\r\n        }\r\n        const backdropComponent: TiPopUpRef = (TiBrowser.isIE() && (TiBrowser.version() === 9))\r\n                            ? this.popService.create(TiBackdropNoAnimationComponent)\r\n                            : this.popService.create(TiBackdropComponent);\r\n        const backdropRef: ComponentRef<TiBackdropComponent> = backdropComponent.show({\r\n            context: {\r\n                animation: config.animation,\r\n                destroy: (): void => {\r\n                    backdropComponent.hide();\r\n                    this.backdropComponentRef = null;\r\n                }\r\n            },\r\n            container: 'body'\r\n        });\r\n        // 控制元素动画呈现，元素呈现后修改动画状态才会有动画效果，因此在此处处理\r\n        backdropRef.instance.showState = 'show';\r\n\r\n        return backdropRef;\r\n    }\r\n}\r\n","import { Component, ContentChild, ElementRef, EventEmitter, Input, NgZone, Output, Renderer2, ViewChild } from '@angular/core';\r\nimport { TiFileInfo, TiFileItem, TiFilter } from '../../services/upload/TiFileInterface';\r\nimport { TiUploadService } from '../../services/upload/TiUploadService';\r\nimport { TiModalService } from '../../services/modal/TiModalService';\r\nimport { TiFilePreviewInfo, TiImagepreviewComponent } from '../imagepreview/TiImagepreviewComponent';\r\nimport { TiUploadbaseComponent } from './TiUploadbaseComponent';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n/**\r\n * 10.0.2版本新增\r\n *\r\n * 该组件基于TiUploadService和已设计好的交互规范，实现上传图片功能（但不限于上传图片），包含两种样式：\r\n *\r\n * 1.带上传结果展示的样式(type为block)\r\n *\r\n * 2.不展示上传结果的样式(type为drag)\r\n *\r\n * 负责人：谭莉\r\n * <example-url>../tiny3demo/#/uploadimage/uploadimage-all</example-url>\r\n */\r\n@Component({\r\n    selector: 'ti-upload[type=\"block\"], ti-upload[type=\"drag\"]',\r\n    templateUrl: './uploadimage.html',\r\n    styleUrls: ['./uploadimage.less']\r\n})\r\n\r\nexport class TiUploadimageComponent extends TiUploadbaseComponent {\r\n\r\n    /**\r\n     * 能够上传文件的最大数量，默认不限制\r\n     */\r\n    @Input() maxCount: number = undefined;\r\n\r\n    /**\r\n     * 设置上传成功后可以删除，默认可删除\r\n     */\r\n    @Input() deletable: boolean = true;\r\n\r\n    /**\r\n     * 上传按钮的样式，默认为block\r\n     */\r\n    @Input() type: 'block' | 'drag' = 'block';\r\n\r\n    /**\r\n     * @ignore\r\n     * 上传结果展示，目前只有一种，picture-card；\r\n     * 当type设置为drag时无效\r\n     */\r\n    listType: string = 'picture-card';\r\n\r\n    /**\r\n     * 文件上传达上限的回调\r\n     * 参数是当前的文件预览信息列表\r\n     */\r\n    @Output() readonly uploadLimit: EventEmitter<Array<TiFilePreviewInfo>> =  new EventEmitter<Array<TiFilePreviewInfo>>();\r\n\r\n    /**\r\n     * @ignore 内部变量\r\n     */\r\n    @ViewChild('uploadBtn', {static: false}) uploadBtn: ElementRef;\r\n    /**\r\n     * @ignore\r\n     * 上传组件对应的input元素\r\n     */\r\n    @ViewChild('uploadInput', {static: false}) uploadInputEle: ElementRef;\r\n    /**\r\n     * 用户自定义上传的样式\r\n     */\r\n    @ContentChild('uploadContainer', {static: true}) uploadContainerTemplate: ElementRef;\r\n\r\n    /**\r\n     * 上传按钮的宽度，用于自定义样式，默认为100px，在type为drag下设置才生效\r\n     */\r\n    @Input() uploadBtnWidth: string = '100px';\r\n\r\n    /**\r\n     * 上传按钮的高度，用于自定义样式，默认为100px，在type为drag下设置才生效\r\n     */\r\n    @Input() uploadBtnHeight: string = '100px';\r\n\r\n    /**\r\n     * @ignore 需要展示的文件列表\r\n     */\r\n    fileList: Array<TiFilePreviewInfo> =  [];\r\n\r\n    constructor(private uploaderService: TiUploadService, hostEle: ElementRef, renderer: Renderer2,\r\n                private tiModal: TiModalService, public sanitizer: DomSanitizer, private zone: NgZone) {\r\n        super(hostEle, renderer);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    // tslint:disable-next-line: use-life-cycle-interface\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        // 设置上传实例配置\r\n        this.setUploadConfig();\r\n        // 创建uploader实例\r\n        this.uploadInst = this.uploaderService.create(this.uploadConfig);\r\n        if (this.type === 'drag') {\r\n            this.listType = '';\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line: use-life-cycle-interface\r\n    ngAfterViewChecked(): void {\r\n        super.ngAfterViewChecked();\r\n        // 拖拽添加/上传时，设置上传按钮的高度和宽度\r\n        if (this.uploadBtn && this.type === 'drag') {\r\n            this.renderer.setStyle(this.uploadBtn.nativeElement, 'width', this.uploadBtnWidth);\r\n            this.renderer.setStyle(this.uploadBtn.nativeElement, 'height', this.uploadBtnHeight);\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line: use-life-cycle-interface\r\n    ngAfterContentChecked(): void {\r\n        super.ngAfterContentChecked();\r\n    }\r\n\r\n    /**\r\n     * 重新设置上传实例配置\r\n     */\r\n    private setUploadConfig(): void {\r\n        this.setFilters();\r\n        this.uploadConfig.onAddItemFailed = (file: TiFileInfo, validResults: Array<string>): void => {\r\n            // 文件上传达上限，触发回调\r\n            if (validResults.includes('maxCount')) {\r\n                this.uploadLimit.emit(this.fileList);\r\n            }\r\n            this.addItemFailed.emit({file, validResults});\r\n        };\r\n        this.uploadConfig.onAddItemSuccess = (fileItem: TiFileItem): void => {\r\n            this.addPreviewList(fileItem);\r\n            this.addItemSuccess.emit(fileItem);\r\n        };\r\n        this.uploadConfig.onSuccessItems = (fileItems: Array<TiFileItem>, response: string, status: number): void => {\r\n            this.setPreviewInfo(fileItems[0]);\r\n            this.successItems.emit({fileItems, response, status});\r\n        };\r\n        this.uploadConfig.onRemoveItems = (fileItems: Array<TiFileItem>): void => {\r\n            this.removePreviewList(fileItems[0]);\r\n            this.removeItems.emit(fileItems);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 设置过滤条件\r\n     */\r\n    private setFilters(): void {\r\n        let uploadFilters: Array<TiFilter> = this.filters || [];\r\n        if ((typeof this.maxCount === 'number') && this.maxCount > 0) {\r\n            uploadFilters = uploadFilters.concat({\r\n                name: 'maxCount',\r\n                params: [this.maxCount]\r\n            });\r\n        }\r\n        this.uploadConfig.filters = uploadFilters;\r\n    }\r\n\r\n    /**\r\n     * 添加文件成功后，增加一个预览对象\r\n     */\r\n    private addPreviewList(fileItem: TiFileItem): void {\r\n        const imgInfoItem: TiFilePreviewInfo = {\r\n            imgFileItem: fileItem,\r\n            name: fileItem._file.name,\r\n            previewUrl: '',\r\n            isImage: false\r\n          };\r\n        this.fileList.push(imgInfoItem);\r\n    }\r\n\r\n    /**\r\n     * 删除时，将文件信息从预览列表中移除\r\n     */\r\n    private removePreviewList(fileItem: TiFileItem): void {\r\n        // 获取需要删除的数据的索引\r\n        const deleteIndex: number = this.fileList.findIndex((item: TiFilePreviewInfo): boolean => {\r\n            return (fileItem._file === item.imgFileItem._file);\r\n        });\r\n        this.fileList.splice(deleteIndex, 1);\r\n    }\r\n\r\n    /**\r\n     * 上传成功后，更新预览地址\r\n     */\r\n    private setPreviewInfo(fileItem: TiFileItem): void {\r\n        // 生成预览url\r\n        const url: string = window.URL.createObjectURL(fileItem._file);\r\n        const isImagePromise: Promise<boolean> = this.isImage(fileItem._file.name, url);\r\n        isImagePromise.then((result: boolean) => {\r\n            this.fileList.forEach((item: TiFilePreviewInfo): void => {\r\n                if (item.imgFileItem._file === fileItem._file) {\r\n                    item.previewUrl = url;\r\n                    item.isImage = result;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @ignore 在弹框中预览上传的图片\r\n     * 参数i: 表示被点击图片的索引\r\n     */\r\n    public preview(i: number): void {\r\n        const previewList: Array<TiFilePreviewInfo> = [];\r\n        let firstIndex: number = i;\r\n        this.fileList.forEach((item: TiFilePreviewInfo, index: number): void => {\r\n            if (item.imgFileItem.isSuccess && item.isImage) {\r\n                // 上传成功并且是图片\r\n                previewList.push(item);\r\n            } else {\r\n                // 非图片或上传失败，并且在被点击的文件之前，第一个预览的索引需要-1\r\n                if (i >= index) {\r\n                    firstIndex -= 1;\r\n                }\r\n            }\r\n        });\r\n        this.tiModal.open(TiImagepreviewComponent, {\r\n            id: 'imagePreviewModal',\r\n            modalClass: 'ti3-image-preview-modal',\r\n            context: {\r\n                index: firstIndex, // 当前文件索引\r\n                fileList: previewList // 预览列表\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 判断是否是图片类型\r\n     * 参数fileName: 文件名称\r\n     * 参数previewUrl: 预览地址\r\n     */\r\n    // tslint:disable-next-line: prefer-function-over-method\r\n    private isImage(fileName: string, previewUrl: string): Promise<boolean> {\r\n        const tempArray: Array<string> = fileName.split('.');\r\n        const extension: string = tempArray[tempArray.length - 1].toLocaleLowerCase();\r\n        const supportTypes: Array<string> = ['jpg', 'png', 'jpeg', 'svg', 'gif', 'bmp'];\r\n\r\n        return new Promise(resolve => {\r\n            if (!supportTypes.includes(extension)) {\r\n                resolve(false);\r\n\r\n                return;\r\n            }\r\n            this.zone.runOutsideAngular(() => {\r\n                // 测试图片能否加载成功，能加载成功，则认为可预览；否则，认为不可预览\r\n                const img: any = document.createElement('img');\r\n                img.src = previewUrl;\r\n                img.onerror = (event: any): void => {\r\n                    resolve(false);\r\n                };\r\n                img.onload = (event: any): void => {\r\n                    resolve(true);\r\n                };\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @ignore 禁用上传时，阻止默认事件、停止冒泡\r\n     */\r\n    selectFile(event: any): void {\r\n        if (this.disabled) {\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n\r\n            return;\r\n        }\r\n        // 焦点转移\r\n        this.uploadBtn.nativeElement.focus();\r\n    }\r\n\r\n    public onKeydown(): void {\r\n        this.uploadInputEle.nativeElement.focus();\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiFileSelectDirective } from './TiFileSelectDirective';\r\nimport { TiUploadComponent } from './TiUploadComponent';\r\nimport { TiDisabledDirective } from './TiDisabledDirective';\r\nimport { TiTipModule } from '../../directives/tip/TiTipModule';\r\nimport { TiProgresspieModule } from '../progresspie/TiProgresspieModule';\r\nimport { TiUploadServiceModule } from '../../services/upload/TiUploadServiceModule';\r\nimport { TiIconModule } from '../icon/TiIconModule';\r\nimport { TiOverflowModule } from '../../directives/overflow/TiOverflowModule';\r\nimport { TiValidationModule } from '../../directives/validation/TiValidationModule';\r\nimport { TiProgressbarModule } from '../progressbar/TiProgressbarModule';\r\nimport { TiUploadbaseComponent } from './TiUploadbaseComponent';\r\nimport { TiUploadimageComponent } from './TiUploadimageComponent';\r\nimport { TiModalModule } from '../../services/modal/TiModalModule';\r\nimport { TiImagepreviewModule } from '../imagepreview/TiImagepreviewModule';\r\nimport { TiButtonModule } from '../button/TiButtonModule';\r\nimport { TiOutlineModule } from '../../directives/outline/TiOutlineModule';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiIconModule,\r\n    TiTipModule,\r\n    TiProgresspieModule,\r\n    TiUploadServiceModule,\r\n    TiOverflowModule,\r\n    TiValidationModule,\r\n    TiProgressbarModule,\r\n    TiModalModule,\r\n    TiImagepreviewModule,\r\n    TiButtonModule,\r\n    TiOutlineModule\r\n  ],\r\n  exports: [TiFileSelectDirective, TiUploadComponent, TiDisabledDirective, TiUploadbaseComponent, TiUploadimageComponent],\r\n  declarations: [TiFileSelectDirective, TiUploadComponent, TiDisabledDirective, TiUploadbaseComponent, TiUploadimageComponent]\r\n})\r\nexport class TiUploadModule {\r\n}\r\nexport { TiUploadComponent } from './TiUploadComponent';\r\nexport { TiFileSelectDirective } from './TiFileSelectDirective';\r\nexport { TiDisabledDirective } from './TiDisabledDirective';\r\nexport { TiUploadbaseComponent } from './TiUploadbaseComponent';\r\nexport { TiUploadimageComponent } from './TiUploadimageComponent';\r\n","import { Component, Input, OnInit, TemplateRef } from '@angular/core';\r\nimport { TiBaseComponent } from '../../components/base/TiBaseModule';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n    selector: 'ti-intromodal',\r\n    templateUrl: './intromodal.html',\r\n    styleUrls: ['./intro.less'],\r\n    host: {\r\n        '[class.ti3-intromodal-wrapper]': 'true'\r\n    }\r\n})\r\n\r\nexport class TiIntromodalComponent extends TiBaseComponent implements OnInit {\r\n    @Input() title: string;\r\n    @Input() content: string | TemplateRef<any>;\r\n    @Input() image: string;\r\n    @Input() totalNumber: number;\r\n    @Input() currentNumber: number;\r\n    @Input() finishButtonText: string;\r\n    @Input() close: (flag?: boolean) => void;\r\n    @Input() wantStep: (num: number) => void;\r\n\r\n    public totalArray: Array<number>; // 通过totalNumber生成的数组\r\n    public isStringContent: boolean; // content是否为string\r\n    public templateContent: TemplateRef<any>; // 用户传入的templateRef类型content\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.totalArray = new Array(this.totalNumber + 1);\r\n        this.isStringContent = typeof this.content === 'string';\r\n        this.templateContent =  this.content instanceof TemplateRef ? this.content : undefined;\r\n    }\r\n\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { TiIntromodalComponent } from './TiIntromodalComponent';\r\n\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n    selector: 'ti-intromodal',\r\n    templateUrl: './introtip.html',\r\n    styleUrls: ['./intro.less'],\r\n    host: {\r\n        '[class.ti3-intromodal-wrapper]': 'true'\r\n    }\r\n})\r\n\r\nexport class TiIntrotipComponent extends TiIntromodalComponent { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TiButtonModule } from '../../components/button/TiButtonModule';\r\nimport { TiIconModule } from '../../components/icon/TiIconModule';\r\nimport { TiModalModule } from '../modal/TiModalModule';\r\nimport { TiTipServiceModule } from '../tip/TiTipServiceModule';\r\nimport { TiLocaleModule } from '../../locale/TiLocaleModule';\r\nimport { TiOutlineModule } from '../../directives/outline/TiOutlineModule';\r\n\r\nimport { TiIntromodalComponent } from './TiIntromodalComponent';\r\nimport { TiIntrotipComponent } from './TiIntrotipComponent';\r\n/**\r\n * @ignore\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiButtonModule,\r\n    TiIconModule,\r\n    TiLocaleModule,\r\n    TiModalModule,\r\n    TiTipServiceModule,\r\n    TiOutlineModule\r\n  ],\r\n  declarations: [TiIntrotipComponent, TiIntromodalComponent],\r\n  entryComponents: [TiIntrotipComponent, TiIntromodalComponent]\r\n})\r\nexport class TiIntroServiceModule { }\r\nexport { TiIntroConfig, TiIntroRef, TiIntroStep, TiIntroShape } from './TiIntroInterface';\r\n","import { Injectable, Renderer2, RendererFactory2, Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\nimport { TiIntroServiceModule } from './TiIntroModule';\r\nimport { TiModalRef } from '../modal/TiModalModule';\r\nimport { TiModalService } from '../modal/TiModalService';\r\nimport { TiTipService } from '../tip/TiTipService';\r\nimport { TiTipRef } from '../tip/TiTipInterface';\r\nimport { TiLog, TiKeymap, Util } from '../../utils/Util';\r\nimport { Position } from '../../utils/Position';\r\n\r\nimport { TiIntromodalComponent } from './TiIntromodalComponent';\r\nimport { TiIntrotipComponent } from './TiIntrotipComponent';\r\nimport { TiIntroConfig, TiIntroRef, TiIntroShape, TiIntroStep } from './TiIntroInterface';\r\n\r\n/**\r\n * 新手引导组件，适用于服务中内容（入口）新增和变动等指引提醒\r\n *\r\n * <p><span style=\"color: red\">使用此组件时需要开发者在项目模块(建议在根模块)中引入BrowserAnimationsModule。</span>\r\n * 这是因为此组件中使用了 TiModalService，TiModalService需要BrowserAnimationsModule\r\n * （具体原因可以查看 [TiModalService]{@link ../injectables/TiModalService.html}），\r\n * 但是 BrowserAnimationsModule 不能在懒加载模块被重复引入，所以需要开发者来引入BrowserAnimationsModule，保证其引入一次。</p>\r\n *\r\n * <example-url>../tiny3demo/#/intro/intro-all</example-url>\r\n */\r\n@Injectable({\r\n    providedIn: TiIntroServiceModule\r\n})\r\n\r\nexport class TiIntroService {\r\n    private render: Renderer2;\r\n    private unListenWindowResize: () => void;\r\n    private unListenWindowHashchange: () => void;\r\n    private closeMultiTipEleClickListener: () => void;\r\n    private unListenDocumentKeydown: () => void;\r\n    // 可聚焦元素\r\n    private focusableElementsString: string = `a[href], area[href], input:not([disabled]):not([tabindex=\\'-1\\']),\r\n    button:not([disabled]):not([tabindex=\\'-1\\']),select:not([disabled]):not([tabindex=\\'-1\\']),\r\n    textarea:not([disabled]):not([tabindex=\\'-1\\']),\r\n    iframe, object, embed, *[tabindex]:not([tabindex=\\'-1\\']), *[contenteditable=true]`;\r\n    constructor(\r\n        private tipService: TiTipService,\r\n        private modalService: TiModalService,\r\n        rendererFactory: RendererFactory2,\r\n        @Inject(DOCUMENT) private document) {\r\n        /* tslint:disable:no-null-keyword */\r\n        this.render = rendererFactory.createRenderer(null, null);\r\n    }\r\n\r\n    /**\r\n     * intro的公共配置，不是默认配置，不能修改\r\n     */\r\n    private commonConfig: any = {\r\n        trigger: 'manual',\r\n        theme: 'white',\r\n        maxWidth: '400px'\r\n    };\r\n\r\n    private destroyBackdrop(): void {\r\n        const canvas: any = this.document.body.querySelector('#ti3-intro-backdrop');\r\n\r\n        if (canvas) {\r\n            // canvas.remove() IE报错；canvas.removeNode() Chrome报错；可以使用removeChild方法\r\n            canvas.parentNode.removeChild(canvas);\r\n        }\r\n    }\r\n\r\n    private static clearCircle(x: number, y: number, radius: number, stepClear: number, ctx: any): void {\r\n        const calcWidth: number = radius - stepClear;\r\n        const calcHeight: number = Math.sqrt(radius * radius - calcWidth * calcWidth);\r\n\r\n        const posX: number = x - calcWidth;\r\n        const posY: number = y - calcHeight;\r\n\r\n        const widthX: number = calcWidth * 2;\r\n        const heightY: number = calcHeight * 2;\r\n\r\n        if (stepClear < radius) {\r\n            ctx.clearRect(posX, posY, widthX, heightY);\r\n            const newStepClear: number = stepClear + 1;\r\n            TiIntroService.clearCircle(x, y, radius, newStepClear, ctx);\r\n        }\r\n    }\r\n\r\n    private static scrollToViewport(element: any): void {\r\n        // 修复SSR错误：ERROR TypeError: element.getBoundingClientRect is not a function\r\n        if (typeof element.getBoundingClientRect !== 'function') {\r\n            return;\r\n        }\r\n        const layout: any = element.getBoundingClientRect();\r\n\r\n        const scrollTop: number = document.body.scrollTop || document.documentElement.scrollTop;\r\n        // 修复SSR报错：ERROR ReferenceError: window is not defined\r\n        if (typeof window === 'undefined') {\r\n            return;\r\n        }\r\n        if (layout.top < 0) {\r\n            // 上边界溢出屏幕\r\n            window.scrollTo(0, layout.top + scrollTop - 20);\r\n        } else if (layout.bottom > document.documentElement.clientHeight) {\r\n            // 下边界溢出屏幕\r\n            window.scrollTo(0, scrollTop + layout.bottom + 20 - document.documentElement.clientHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建intro实例\r\n     */\r\n    public create(config: TiIntroConfig): TiIntroRef {\r\n        let introRef: TiIntroRef; // create方法创建并返回的intro实例\r\n        const steps: Array<TiIntroStep> = config.steps;\r\n        let introModalRef: TiModalRef; // modal实例，用于隐藏弹窗\r\n        let introTipRef: TiTipRef; // 是生成的tip，有show & hide\r\n        let introMultiTipRefs: Array<TiTipRef> = []; // 多个tip场景下生成的tip实例数组\r\n        let curStep: number = 0; // 在整个create方法中，标识当前步数\r\n        const lastStep: number = steps[steps.length - 1 ].step; // 最后一TiIntroStep的step属性值，即总步数\r\n        // 关闭多个tip的操作元素\r\n        const closeMultiTipEle: Element = steps.filter((item: TiIntroStep) => item.isAction).length > 0 ?\r\n            steps.filter((item: TiIntroStep) => item.isAction)[0].element : undefined;\r\n        // 先隐藏closeMultiTipEle，并注册事件\r\n        if (closeMultiTipEle) {\r\n            this.render.setStyle(closeMultiTipEle, 'display', 'none');\r\n        }\r\n        this.unListenDocumentKeydown = this.render.listen(document, 'keydown', (event: KeyboardEvent): void => {\r\n            switch (event.which) {\r\n                case TiKeymap.KEY_TAB: // tab键用于处理在提示框内循环获取焦点\r\n                    this.clickTab(event);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        /**\r\n         * @param flag boolean true:完成intro引导；false：未完成intro引导，但是退出\r\n         */\r\n        const close: (flag: boolean) => void = (flag: boolean): void => {\r\n            if (introMultiTipRefs.length > 0) {\r\n                introMultiTipRefs.forEach((item: TiTipRef) => {\r\n                    this.hidePreStep(item);\r\n                });\r\n                introMultiTipRefs = [];\r\n                this.render.setStyle(closeMultiTipEle, 'display', 'none');\r\n            } else {\r\n                this.hidePreStep(introTipRef);\r\n            }\r\n\r\n            this.destroyBackdrop();\r\n\r\n            if (flag && typeof config.onFinish === 'function') {\r\n                config.onFinish();\r\n            } else if (!flag && typeof config.onExit === 'function') {\r\n                config.onExit();\r\n            }\r\n            if (this.unListenWindowResize) {\r\n                this.unListenWindowResize();\r\n                this.unListenWindowResize = undefined;\r\n            }\r\n            if (this.unListenWindowHashchange) {\r\n                this.unListenWindowHashchange();\r\n                this.unListenWindowHashchange = undefined;\r\n            }\r\n            if (this.closeMultiTipEleClickListener) {\r\n                this.closeMultiTipEleClickListener();\r\n            }\r\n            if (this.unListenDocumentKeydown) {\r\n                this.unListenDocumentKeydown();\r\n                this.unListenDocumentKeydown = undefined;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * 无效步数条件：\r\n         * 1.不是有效数字\r\n         * 2.等于currentNumber，等于0除外\r\n         * 3.小于0 或 大于 totalNumber\r\n         * 使用curStep 和 lastStep，没有提为private方法\r\n         */\r\n        const isInvalidStepNum: (number: number) => boolean = (num: number): boolean => {\r\n            return isNaN(num) || (curStep === num && num !== 0) || num < 0 || num > lastStep;\r\n        };\r\n        /**\r\n         * 即将进入某一步的引导\r\n         *\r\n         * 需要在进入前做一些合法性判断，清除上一步信息等\r\n         */\r\n        const wantStep: (number: number) => void = (num: number): void => {\r\n            if (isInvalidStepNum(num)) {\r\n                TiLog.error('stepNumber is not valid');\r\n\r\n                return;\r\n            }\r\n            this.hidePreStep(introTipRef);\r\n            curStep = num;\r\n            if (typeof config.beforeStep === 'function') {\r\n                config.beforeStep(introRef, num);\r\n            } else {\r\n                // tslint:disable-next-line: no-use-before-declare\r\n                goStep(num);\r\n            }\r\n            // 延时为了保证遮罩dom已经绘制完毕。\r\n            setTimeout((): void => {\r\n                // 在引导的时候，把焦点调整为遮罩层。为后续把焦点圈在提示框内做准备。\r\n                const backdropEle: HTMLElement = document.querySelector('#ti3-intro-backdrop');\r\n                if (backdropEle) {\r\n                    backdropEle.focus();\r\n                }\r\n            }, 100);\r\n        };\r\n\r\n        // 开始某一步的引导\r\n        const goStep: (number: number) => void = (num: number): void => {\r\n            const currentSteps: Array<TiIntroStep> =  steps.filter((item: TiIntroStep) => item.step === num);\r\n            // curIntroStep curIntroStep\r\n            let currentStep: TiIntroStep;\r\n            if (currentSteps.length === 1) {\r\n                currentStep = currentSteps[0];\r\n            }\r\n            // 先关闭之前的canvas\r\n            this.destroyBackdrop();\r\n            /**\r\n             * 具体的引导步骤分为3种\r\n             * 1.总览页： 一个正常弹窗，用modal实现 intromodal\r\n             * 2.分布页：带按钮的tip，用tipService实现\r\n             * 3.提示： 没有按钮的普通tip，用tipService实现\r\n             */\r\n            // 第一种情况，弹窗\r\n            if (currentStep && !currentStep.element) {\r\n                introModalRef = this.modalService.open(TiIntromodalComponent, {\r\n                    id: 'ti3-intro-modal',\r\n                    context: {\r\n                        title: currentStep.title,\r\n                        content: currentStep.content,\r\n                        totalNumber: lastStep,\r\n                        currentNumber: curStep,\r\n                        finishButtonText: config.finishButtonText,\r\n                        id: config.id + '_' + num,\r\n                        close: (): void => {\r\n                            introModalRef.close();\r\n                        },\r\n                        wantStep\r\n                    },\r\n                    draggable: false\r\n                });\r\n\r\n                return;\r\n            }\r\n            // 如果有弹窗的话，关闭弹窗\r\n            if (introModalRef) {\r\n                introModalRef._remove();\r\n                introModalRef = undefined;\r\n            }\r\n            // 重新绘制canvas\r\n            this.drawBackdrop();\r\n\r\n            // 第二种情况，带按钮的tip\r\n            if (currentStep && currentStep.title) {\r\n\r\n                TiIntroService.scrollToViewport(currentStep.element);\r\n                introTipRef = this.tipService.create(currentStep.element, {\r\n                    ...this.commonConfig,\r\n                    position: currentStep.position,\r\n                    registerVisibilityChangeEvent: false\r\n                });\r\n                introTipRef.show(TiIntrotipComponent, {\r\n                    title: currentStep.title,\r\n                    content: currentStep.content,\r\n                    totalNumber: lastStep,\r\n                    currentNumber: curStep,\r\n                    finishButtonText: config.finishButtonText,\r\n                    id: config.id + '_' + num,\r\n                    close,\r\n                    wantStep\r\n                });\r\n\r\n                this.highlight(currentStep.element, currentStep.shape);\r\n            }\r\n\r\n            // 第三种情况，普通tip，并且是多个，有一个是关闭按钮。和第二种情况是if else 的关系，重新列为一个if分支是为了让三种情况称为并列的if\r\n            if (currentSteps && currentSteps.length > 1) {\r\n                currentSteps.forEach((item: TiIntroStep): void => {\r\n                    if (item.isAction) {\r\n                        this.render.setStyle(item.element, 'display', 'block');\r\n                        this.closeMultiTipEleClickListener = this.render.listen(item.element, 'click', () => {\r\n                            close(true);\r\n                        });\r\n                    } else {\r\n                        TiIntroService.scrollToViewport(item.element);\r\n                        const introtipRef: TiTipRef = this.tipService.create(item.element, {\r\n                            ...this.commonConfig,\r\n                            position: item.position,\r\n                            registerVisibilityChangeEvent: false\r\n                        });\r\n                        introtipRef.show(item.content);\r\n                        introMultiTipRefs.push(introtipRef);\r\n\r\n                        this.highlight(item.element, item.shape);\r\n                    }\r\n                });\r\n            }\r\n            // 修复SSR报错：ERROR ReferenceError: window is not defined\r\n            if (!this.unListenWindowResize && typeof window !== 'undefined') {\r\n                this.unListenWindowResize = this.render.listen(window, 'resize', () => {\r\n                    this.hidePreStep(introTipRef);\r\n                    this.destroyBackdrop();\r\n                    goStep(curStep);\r\n                });\r\n            }\r\n            if (!this.unListenWindowHashchange && typeof window !== 'undefined') {\r\n                this.unListenWindowHashchange = this.render.listen(window, 'hashchange', () => {\r\n                    close(false);\r\n                });\r\n            }\r\n        };\r\n\r\n        // 对外暴露的intro实例\r\n        introRef = {\r\n            start(): void {\r\n                wantStep(0);\r\n            },\r\n            end(): void {\r\n                close(true);\r\n            },\r\n            step: (number: number): void => {\r\n                wantStep(number);\r\n            },\r\n            proceed(): void {\r\n                goStep(curStep);\r\n            }\r\n\r\n        };\r\n\r\n        return introRef;\r\n    }\r\n\r\n    public clickTab(event: KeyboardEvent): void {\r\n        const introModal: HTMLElement = document.querySelector('.ti3-intromodal-wrapper');\r\n        const focusableElements: NodeList = introModal?.querySelectorAll(this.focusableElementsString);\r\n\r\n        Util.focusInDialogOnTabchange(event, focusableElements);\r\n    }\r\n\r\n    private hidePreStep(introTipRef: TiTipRef): void {\r\n        if (introTipRef) {\r\n            introTipRef.hide();\r\n        }\r\n    }\r\n\r\n    private drawBackdrop(): void {\r\n        // 修复SSR报错：\r\n\r\n        /* ERROR Error: NotYetImplemented\r\n        at HTMLCanvasElement.Wo4J.exports.nyi (D:\\ngworkspace\\tiny3-0119-2\\ngversion\\ng11-ssr\\dist\\tiny3demo\\server\\main.js:140019:9)\r\n        at TiIntroService.drawBackdrop (D:\\ngworkspace\\tiny3-0119-2\\ngversion\\ng11-ssr\\dist\\tiny3demo\\server\\main.js:12914:28) */\r\n        if (typeof document === 'undefined') {\r\n            return;\r\n        }\r\n        const canvas: any = this.render.createElement('canvas');\r\n        this.render.setStyle(canvas, 'z-index', 5000); // 最大的可取值为5000，5001会遮盖tip\r\n        this.render.setStyle(canvas, 'position', 'absolute');\r\n        this.render.setStyle(canvas, 'top', 0);\r\n        this.render.setStyle(canvas, 'left', 0);\r\n        this.render.setStyle(canvas, 'outline', 'none');\r\n        this.render.setAttribute(canvas, 'tabindex', '0'); // 非表单元素想要使用focus()函数聚焦，需要设置tabindex属性。\r\n        canvas.id = 'ti3-intro-backdrop';\r\n        const ctx: any = canvas.getContext('2d');\r\n        // _drawBackDrop(canvas, ctx) {\r\n        // 获取整个页面宽高，用于计算canvas宽高\r\n        // 获取整个页面的宽高,包括滚动条部分及body margin等\r\n        let browserWidth: number = this.document.documentElement.scrollWidth;\r\n        let browserHeight: number = this.document.documentElement.scrollHeight;\r\n        // 获取整个页面可视区域宽高，页面不出滚动条情况下，该值原则上应该是与上述browser宽高相等的\r\n        // 但是由于浏览器的计算差异，可能存在不相等的情况\r\n        const clientWidth: number = this.document.documentElement.clientWidth;\r\n        const clientHeight: number = this.document.documentElement.clientHeight;\r\n\r\n        // 由于在IE下该宽高计算不精确，可能会导致页面本身无滚动条的情况下，\r\n        // 当使用该值设置canvas宽度后，出现滚动条，因此需要对宽高进行特殊处理\r\n        // 根据多次试验经验，发现当实际页面实际宽度为小数时，clientWidth取值为去掉小数点后的值，\r\n        // scrollWidth则会自动+1，导致使用scrollWidth设置会出现滚动条，\r\n        // 因此，通过两者之差小于1的方式判断该情况下，取小值设置canvas宽度即可解决该问题\r\n        if (browserWidth - clientWidth <= 1) {\r\n            browserWidth = clientWidth;\r\n        }\r\n        // 纵向情况下处理同上\r\n        if (browserHeight - clientHeight <= 1) {\r\n            browserHeight = clientHeight;\r\n        }\r\n\r\n        canvas.width = browserWidth;\r\n        canvas.height = browserHeight;\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\r\n        ctx.fillRect(0, 0, browserWidth, browserHeight);\r\n\r\n        this.render.appendChild(this.document.body, canvas);\r\n    }\r\n    private highlight(element: any, shape: TiIntroShape): void {\r\n        const layout: any = Position.getHostEleLayout(element, element);\r\n        const canvas: any = this.document.body.querySelector('#ti3-intro-backdrop');\r\n        // 修复SSR报错：ERROR TypeError: Cannot read property 'getContext' of undefined\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n        const ctx: any = canvas.getContext('2d');\r\n        const highlightLayout: any = {...layout};\r\n        if (layout.isFixed) {\r\n            // 如果被高亮的元素是fixed定位，以元素相对于视口的位置为高亮区域的定位\r\n            this.render.setStyle(canvas, 'position', 'fixed');\r\n            highlightLayout.top = element.getBoundingClientRect().top;\r\n            highlightLayout.left = element.getBoundingClientRect().left;\r\n        }\r\n        if (shape === 'circle') {\r\n            const radius: number = (highlightLayout.width < highlightLayout.height ? highlightLayout.width : highlightLayout.height) / 2;\r\n            const x: number = highlightLayout.left + highlightLayout.width / 2;\r\n            const y: number = highlightLayout.top + highlightLayout.height / 2;\r\n            TiIntroService.clearCircle(x, y, radius, 1, ctx);\r\n        } else {\r\n            ctx.clearRect(highlightLayout.left, highlightLayout.top, highlightLayout.width, highlightLayout.height);\r\n        }\r\n    }\r\n\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { TiLocale, TiLocaleWords } from '../../locale/TiLocaleModule';\r\nimport { Util } from '../../utils/Util';\r\nimport { TiMessageButtonConfig } from './TiMessageInterface';\r\n\r\n/**\r\n * messge类型设置\r\n */\r\nexport type TiMessageType = 'prompt' | 'warn' | 'error' | 'confirm';\r\n/**\r\n * @ignore\r\n * message模板组件定义\r\n */\r\n@Component({\r\n    selector: 'ti-message',\r\n    templateUrl: './TiMessageComponent.html',\r\n    styleUrls: ['./message.less']\r\n})\r\nexport class TiMessageComponent implements OnInit {\r\n    // 常量配置\r\n    private CONST_CONFIG: any = {\r\n        validType: ['confirm', 'error', 'warn', 'prompt'],\r\n        defaultType: 'confirm'\r\n    };\r\n    @Input() id: string;\r\n    @Input() title: string;\r\n    @Input() type: TiMessageType;\r\n    @Input() content: any;\r\n    @Input() context: any;\r\n    @Input() okButton: TiMessageButtonConfig;\r\n    @Input() cancelButton: TiMessageButtonConfig;\r\n    @Input() close: () => void;\r\n    @Input() dismiss: () => void;\r\n    public contentConfig: any; // 内容区域属性配置\r\n    private readonly localeWords: TiLocaleWords = TiLocale.getLocaleWords();\r\n\r\n    /**\r\n     * 设置按钮属性（除primary和autofocus外）\r\n     * @param options 外部配置属性\r\n     * @param defaults 按钮text和click属性\r\n     * @returns 合并后的属性\r\n     */\r\n    private static setBtn(options: TiMessageButtonConfig, defaults: {\r\n        text?: string,\r\n        click(): void;\r\n    }): TiMessageButtonConfig {\r\n        const defaultOpts: TiMessageButtonConfig = {\r\n            show: true,\r\n            disabled: false,\r\n            ...defaults\r\n        };\r\n        if (typeof options === 'object') {\r\n            return {...defaultOpts, ...options};\r\n        }\r\n\r\n        return defaultOpts;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.setType();\r\n        this.setTitle();\r\n        this.setBtns();\r\n        this.setContent();\r\n    }\r\n    private setType(): void {\r\n        const validType: Array<TiMessageType>  = this.CONST_CONFIG.validType;\r\n        const defaultType: TiMessageType = this.CONST_CONFIG.defaultType;\r\n        if (validType.indexOf(this.type) === -1) {\r\n            this.type = defaultType;\r\n        }\r\n    }\r\n    private setTitle(): void {\r\n        if (typeof this.title === 'string') {\r\n            return;\r\n        }\r\n        // 不同类型的message有默认title\r\n        this.title = this.localeWords.tiMessage[this.type];\r\n    }\r\n    /**\r\n     * 设置按钮属性：\r\n     * 对按钮的设置支持Object类型\r\n     * 为Object类型时，覆盖和扩展默认设置\r\n     */\r\n    private setBtns(): void {\r\n        this.okButton = TiMessageComponent.setBtn(this.okButton, {\r\n            text: this.localeWords.tiMessage.ok,\r\n            click: (): void => {\r\n                this.close();\r\n            }\r\n        });\r\n        this.cancelButton = TiMessageComponent.setBtn(this.cancelButton, {\r\n            text: this.localeWords.tiMessage.cancel,\r\n            click: (): void => {\r\n                this.dismiss();\r\n            }\r\n        });\r\n\r\n        this.setBtnUniqueState('autofocus');\r\n        this.setBtnUniqueState('primary');\r\n    }\r\n    /**\r\n     * 设置按钮属性，确保默认状态只在一个按钮生效\r\n     * @param prop 按钮属性\r\n     */\r\n    private setBtnUniqueState(prop: string): void {\r\n        if (Util.isUndefined(this.okButton[prop]) && Util.isUndefined(this.cancelButton[prop])) {\r\n            this.okButton[prop] = true;\r\n        }\r\n    }\r\n    private setContent(): void {\r\n        this.contentConfig = {\r\n            content: this.content,\r\n            context: this.context\r\n        };\r\n    }\r\n    public setId(suffix: string): string {\r\n        if (Util.isUndefined(this.id)) {\r\n            return '';\r\n        }\r\n\r\n        return `${this.id}${suffix}`;\r\n    }\r\n}\r\n","import { Component } from '@angular/core';\r\n/**\r\n * @ignore\r\n */\r\n@Component({\r\n    selector: 'ti-content-wrapper',\r\n    template: '<ng-content></ng-content>'\r\n})\r\nexport class TiContentWrapperComponent {\r\n}\r\n","import { Directive,  ElementRef, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\r\nimport { TiPopupService } from '../popup/TiPopupService';\r\nimport { TiContentWrapperComponent } from './TiContentWrapperComponent';\r\n/**\r\n * @ignore\r\n * 生成并且compile内容为宿主元素的子元素\r\n */\r\n@Directive({\r\n    selector: '[tiTransclude]'\r\n})\r\nexport class TiTranscludeDirective implements OnInit, OnDestroy {\r\n    @Input() tiTransclude: {\r\n        content: string | TemplateRef<any>,\r\n        context?: any\r\n    };\r\n    private wrapperRef: any;\r\n    constructor(private eleRef: ElementRef,\r\n                private popService: TiPopupService<any>) {\r\n    }\r\n    ngOnInit(): void {\r\n        this.wrapperRef = this.popService.create(TiContentWrapperComponent);\r\n        this.wrapperRef.show({\r\n            content: this.tiTransclude.content,\r\n            contentContext: this.tiTransclude.context,\r\n            container: this.eleRef\r\n        });\r\n    }\r\n    ngOnDestroy(): void {\r\n        this.wrapperRef.hide();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiMessageComponent } from './TiMessageComponent';\r\nimport { TiContentWrapperComponent } from './TiContentWrapperComponent';\r\nimport { TiTranscludeDirective } from './TiTranscludeDirective';\r\nimport { TiModalModule } from '../modal/TiModalModule';\r\nimport { TiButtonModule } from '../../components/button/TiButtonModule';\r\nimport { TiIconModule } from '../../components/icon/TiIconModule';\r\n\r\n@NgModule({\r\nimports: [CommonModule, TiModalModule, TiButtonModule, TiIconModule],\r\n    declarations: [TiMessageComponent, TiTranscludeDirective, TiContentWrapperComponent],\r\n    entryComponents: [TiMessageComponent, TiContentWrapperComponent]\r\n})\r\nexport class TiMessageModule {\r\n}\r\nexport { TiMessageButtonConfig, TiMessageConfig } from './TiMessageInterface';\r\nexport { TiMessageType } from './TiMessageComponent';\r\n","/**\r\n * 该类对外暴露，以服务的方式提供方法生成message组件\r\n * open({\r\n *  id:message id,string类型,用于生成唯一的按钮可测试id，并且防止弹框多次打开（同modal组件）\r\n *  type:message类型，支持'prompt' | 'warn' | 'error' | 'confirm'，默认为confirm\r\n *  title:头部title,string类型，可支持string形式的DOM片段\r\n *  content:内容区域DOM,支持类型为：TemplateRef<any> | Function | string\r\n *  context:内容区域上下文，类型为Object\r\n *  okButton:{\r\n *    text：string，按钮文本显示\r\n *    click: Function，点击回调\r\n *    primary: boolean,默认为true,程序中保证了两个按钮中只有一个可为true\r\n *    autofocus: boolean,默认为true,程序中保证了两个按钮中只有一个可为true\r\n *    show: boolean，标识按钮是否显示,默认为true\r\n * }\r\n *  cancleBtn:{\r\n *    text：string，按钮文本显示\r\n *    click: Function，点击回调\r\n *    primary: boolean,默认为false,程序中保证了两个按钮中只有一个可为true\r\n *    autofocus: boolean,默认为false,程序中保证了两个按钮中只有一个可为true\r\n *    show: boolean，标识按钮是否显示,默认为true\r\n * }\r\n * })\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { TiModalRef } from '../modal/TiModalModule';\r\nimport { TiModalService } from '../modal/TiModalService';\r\nimport { TiMessageComponent } from './TiMessageComponent';\r\nimport { TiMessageModule } from './TiMessageModule';\r\nimport { TiMessageConfig } from './TiMessageInterface';\r\n\r\n/**\r\n * 消息框组件，使用服务方式生成，使用该服务时需要引入模块TiMessageModule，通过调用TiMessageService.open(config)方法生成弹出框\r\n *\r\n * <p><span style=\"color: red\">使用此组件时需要开发者在项目模块(建议在根模块)\r\n * 中引入BrowserAnimationsModule。</span>这是因为此组件中使用了Angular动画，需要引入BrowserAnimationsModule，\r\n * 但是 BrowserAnimationsModule 不能在懒加载模块被重复引入，所以需要开发者来引入BrowserAnimationsModule，保证其引入一次。</p>\r\n *\r\n * <example-url>../tiny3demo/#/message/message-all</example-url>\r\n */\r\n@Injectable({\r\n    providedIn: TiMessageModule\r\n})\r\nexport class TiMessageService {\r\n    constructor(private tiModal: TiModalService) {\r\n    }\r\n    /**\r\n     * 生成消息弹框方法\r\n     * [config] 弹框配置信息\r\n     * 返回 弹框实例信息，使用该实例信息可调用弹框的close等方法；内容为component类型时，也可通过content属性获取内容结果数据\r\n     */\r\n    public open(config?: TiMessageConfig): TiModalRef {\r\n        const {type, title, content, context, okButton, cancelButton,  ...modalConfig}: TiMessageConfig = config;\r\n\r\n        return this.tiModal.open(TiMessageComponent, {\r\n            context: {\r\n                id: config.id,\r\n                type,\r\n                title,\r\n                content,\r\n                context,\r\n                okButton,\r\n                cancelButton\r\n            },\r\n            modalClass: 'ti3-msg-default-width',\r\n            ...modalConfig\r\n        });\r\n    }\r\n}\r\n","import { Component, ElementRef, HostListener, Input, OnDestroy, OnInit, Renderer2 } from '@angular/core';\r\nimport { TiRenderer } from '../../services/renderer/TiRenderer';\r\n\r\n/**\r\n * @ignore\r\n *\r\n * 10.0.3版本增加，暂时不对外开放\r\n *\r\n * 该指令可以实现图片放大镜功能，添加tiZoom后会创建放大区域选择器元素（div）和放大结果呈现元素（div）\r\n *\r\n * 通过设置放大结果的background-image、background-size和background-position来达到放大效果\r\n *\r\n * 10.1.0版本从指令调整为组件形式\r\n *\r\n * <example-url>../tiny3demo/#/zoom/zoom-all</example-url>\r\n */\r\n@Component({\r\n    // 非img元素，tiZoom指令无效\r\n    selector: 'img[tiZoom]',\r\n    template: '',\r\n    styleUrls: ['./zoom.less']\r\n})\r\nexport class TiZoomComponent implements OnInit, OnDestroy {\r\n\r\n    // 放大结果的边框宽度\r\n    private static readonly ZOOM_VIEWER_BORDER_WIDTH: number = 1;\r\n\r\n    // 选择遮罩的宽高，默认150px\r\n    @Input() zoomSelectorLength: number = 150;\r\n\r\n    // 放大展示的宽高，默认300px\r\n    @Input() zoomViewerLength: number = 300;\r\n\r\n    // 比例\r\n    private ratio: number;\r\n\r\n    // 宿主元素\r\n    private hostEle: any;\r\n\r\n    // 宿主元素的父元素\r\n    private parentEle: any;\r\n\r\n    // 宿主元素的图片路径\r\n    private imgSrc: string = '';\r\n\r\n    // 放大区域选择器\r\n    private zoomSelectorEle: any;\r\n\r\n    // 放大结果展示区域\r\n    private zoomViewerEle: any;\r\n\r\n    // 选择遮罩监听事件\r\n    private selectorMouseMoveHandler: () => void;\r\n    private selectorMouseLeaveHandler: () => void;\r\n\r\n    constructor(hostRef: ElementRef, private renderer: Renderer2, private tiRenderer: TiRenderer) {\r\n        this.hostEle = hostRef.nativeElement;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // 设置父元素\r\n        this.setParentEle();\r\n        // 设置放大比例\r\n        this.ratio = this.zoomViewerLength / this.zoomSelectorLength;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 图片加载成功事件处理\r\n     */\r\n    @HostListener('load', ['$event']) public onHostLoad(event: any): void {\r\n        this.imgSrc = event.target.src;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 鼠标进入宿主元素，创建放大效果相关元素\r\n     */\r\n    @HostListener('mouseenter', ['$event']) public onHostMouseEnter(event: any): void {\r\n        this.createZoomSelector();\r\n        this.createZoomViewer();\r\n        this.reStyleResults(event);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 鼠标离开宿主元素，移除放大效果相关元素\r\n     */\r\n    @HostListener('mouseleave', ['$event']) public onHostMouseLeave(event: any): void {\r\n        // 当鼠标离开宿主元素并且不是进入选择遮罩时，移除选择遮罩和放大结果\r\n        if (event.relatedTarget !== this.zoomSelectorEle) {\r\n            this.removeZoomEle();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置父元素\r\n     */\r\n    private setParentEle(): void {\r\n        const parentEle: any = this.hostEle.parentElement;\r\n        if (parentEle !== null && parentEle.clientWidth !== 0 && parentEle.clientHeight !== 0) {\r\n            if (this.hostEle.offsetParent !== parentEle) {\r\n                // 父元素必须能够定位\r\n                this.renderer.setStyle(parentEle, 'position', 'relative');\r\n            }\r\n            this.parentEle = parentEle;\r\n        } else {\r\n            this.parentEle = document.body;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建选择遮罩，初始化样式，增加事件监听\r\n     */\r\n    private createZoomSelector(): void {\r\n        this.zoomSelectorEle = this.renderer.createElement('div');\r\n\r\n        // 添加样式，tinyplus3的productpreview需要根据分辨率修改元素尺寸\r\n        this.renderer.addClass(this.zoomSelectorEle, 'ti3-img-zoom-selector');\r\n        this.tiRenderer.setStyles(this.zoomSelectorEle, {\r\n            width: this.zoomSelectorLength + 'px',\r\n            height: this.zoomSelectorLength + 'px'\r\n        });\r\n\r\n        // 鼠标在选择遮罩上移动时的事件\r\n        this.selectorMouseMoveHandler = this.renderer.listen(this.zoomSelectorEle, 'mousemove', (event: any): void => {\r\n            this.reStyleResults(event);\r\n        });\r\n        // 鼠标离开选择遮罩的事件，销毁遮罩元素和放大结果呈现元素\r\n        this.selectorMouseLeaveHandler = this.renderer.listen(this.zoomSelectorEle, 'mouseleave', (event: MouseEvent) => {\r\n            this.renderer.removeChild(this.parentEle, this.zoomSelectorEle);\r\n            this.renderer.removeChild(document.body, this.zoomViewerEle);\r\n            this.zoomSelectorEle = undefined;\r\n            this.zoomViewerEle = undefined;\r\n        });\r\n\r\n        this.renderer.appendChild(this.parentEle, this.zoomSelectorEle);\r\n    }\r\n\r\n    /**\r\n     * 创建放大结果呈现元素，初始化样式\r\n     */\r\n    private createZoomViewer(): void {\r\n        this.zoomViewerEle = this.renderer.createElement('div');\r\n        const hostEleRect: DOMRect = this.hostEle.getBoundingClientRect();\r\n        const parentEleRect: DOMRect = this.parentEle.getBoundingClientRect();\r\n\r\n        // 放大结果元素相对于父元素进行定位\r\n        // left = 父元素宽度 - 边框宽度 + 滚动距离\r\n        let left: number = this.parentEle.offsetWidth - TiZoomComponent.ZOOM_VIEWER_BORDER_WIDTH + parentEleRect.left + window.pageXOffset;\r\n        // top = 父元素到视口距离 + 滚动距离\r\n        let top: number = parentEleRect.top + window.pageYOffset;\r\n        // 当父元素为body时，调整为相对于宿主元素定位\r\n        if (this.parentEle === document.body) {\r\n            left = this.hostEle.offsetWidth - TiZoomComponent.ZOOM_VIEWER_BORDER_WIDTH + hostEleRect.left + window.pageXOffset;\r\n            top = hostEleRect.top + window.pageYOffset;\r\n        }\r\n\r\n        // 添加样式，tinyplus3的productpreview需要根据分辨率修改元素尺寸\r\n        this.renderer.addClass(this.zoomViewerEle, 'ti3-img-zoom-viewer');\r\n        this.tiRenderer.setStyles(this.zoomViewerEle, {\r\n            left: left + 'px',\r\n            top: top + 'px',\r\n            width: `${this.zoomViewerLength}px`,\r\n            height: `${this.zoomViewerLength}px`,\r\n            background: `url(${this.imgSrc})`,\r\n            'background-size': `${this.hostEle.width * this.ratio}px ${this.hostEle.height * this.ratio}px`\r\n        });\r\n\r\n        this.renderer.appendChild(document.body, this.zoomViewerEle);\r\n    }\r\n\r\n    // 计算鼠标相对宿主元素的位置\r\n    private getCursorPos(mouseEvent: MouseEvent): any {\r\n        const hostEleRect: DOMRect = this.hostEle.getBoundingClientRect();\r\n        // 考虑滚动情况\r\n        const left: number = mouseEvent.pageX - hostEleRect.left - window.pageXOffset;\r\n        const top: number = mouseEvent.pageY - hostEleRect.top - window.pageYOffset;\r\n\r\n        return { x: left, y: top };\r\n    }\r\n\r\n    /**\r\n     * 计算选择遮罩偏移和放大区域\r\n     */\r\n    private reStyleResults(mouseEvent: MouseEvent): void {\r\n        // 1. 获取计算鼠标相对于宿主元素左上角的位置\r\n        const cursorPos: any = this.getCursorPos(mouseEvent);\r\n        // 获取遮罩宽度\r\n        const zoomSelectorWidth: number = this.zoomSelectorEle.offsetWidth;\r\n\r\n        // 2. 计算放大结果的位置\r\n        let viewerPosX: number = cursorPos.x - (zoomSelectorWidth / 2);\r\n        let viewerPosY: number = cursorPos.y - (zoomSelectorWidth / 2);\r\n\r\n        // 3. 调整\r\n        // 3.1 选择遮罩移出宿主元素的右侧\r\n        if (viewerPosX > this.hostEle.offsetWidth - zoomSelectorWidth) {\r\n            viewerPosX = this.hostEle.offsetWidth - zoomSelectorWidth;\r\n        }\r\n        // 3.2 选择遮罩移出宿主元素的左侧\r\n        if (viewerPosX < 0) {\r\n            viewerPosX = 0;\r\n        }\r\n        // 3.3 选择遮罩移出宿主元素的下方\r\n        if (viewerPosY > this.hostEle.offsetHeight - zoomSelectorWidth) {\r\n            viewerPosY = this.hostEle.offsetHeight - zoomSelectorWidth;\r\n        }\r\n        // 3.4 选择遮罩移出宿主元素的上方\r\n        if (viewerPosY < 0) {\r\n            viewerPosY = 0;\r\n        }\r\n\r\n        // 4. 设置选择区域偏移，选择区域偏移=放大结果位置 + 宿主元素的偏移\r\n        this.tiRenderer.setStyles(this.zoomSelectorEle, {\r\n            left: `${viewerPosX + this.hostEle.offsetLeft}px`,\r\n            top: `${viewerPosY + this.hostEle.offsetTop}px`\r\n        });\r\n\r\n        // 5. 设置放大结果\r\n        this.renderer.setStyle(this.zoomViewerEle, 'background-position',\r\n            `-${viewerPosX * this.ratio}px -${viewerPosY * this.ratio}px`);\r\n\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.removeZoomEle();\r\n    }\r\n\r\n    /**\r\n     * 移除选择遮罩和放大结果元素、解绑相关事件\r\n     */\r\n    private removeZoomEle(): void {\r\n        if (this.zoomSelectorEle !== undefined) {\r\n            this.renderer.removeChild(this.parentEle, this.zoomSelectorEle);\r\n            this.zoomSelectorEle = undefined;\r\n        }\r\n        if (this.zoomViewerEle !== undefined) {\r\n            this.renderer.removeChild(document.body, this.zoomViewerEle);\r\n            this.zoomViewerEle = undefined;\r\n        }\r\n        if (this.selectorMouseMoveHandler) {\r\n            this.selectorMouseMoveHandler();\r\n        }\r\n        if (this.selectorMouseLeaveHandler) {\r\n            this.selectorMouseLeaveHandler();\r\n        }\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TiZoomComponent } from './TiZoomComponent';\r\nimport { TiRendererModule } from '../../services/renderer/TiRendererModule';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TiRendererModule\r\n  ],\r\n  exports: [TiZoomComponent],\r\n  declarations: [TiZoomComponent]\r\n})\r\nexport class TiZoomModule {\r\n}\r\nexport { TiZoomComponent } from './TiZoomComponent';\r\n","// 按照类名字母排序\r\nexport { TiAccordionModule, TiAccordionComponent, TiAccordionItemComponent, TiAccordionHeadComponent } from './components/accordion/TiAccordionModule';\r\nexport { TiActionmenuComponent, TiActionmenuModule, TiActionmenuItem } from './components/actionmenu/TiActionmenuModule';\r\nexport { TiAlertModule, TiAlertComponent } from './components/alert/TiAlertModule';\r\nexport { TiAutocompleteModule, TiAutocompleteComponent } from './components/autocomplete/TiAutocompleteModule';\r\nexport { TiBaseComponent, TiBaseModule, TiFormComponent, TiWholeComponent } from './components/base/TiBaseModule';\r\nexport { TiButtonModule, TiButtonComponent } from './components/button/TiButtonModule';\r\nexport { TiButtongroupModule, TiButtongroupComponent, TiButtonItem} from './components/buttongroup/TiButtongroupModule';\r\nexport { TiCheckboxModule, TiCheckboxComponent } from './components/checkbox/TiCheckboxModule';\r\nexport { TiCheckgroupModule, TiCheckgroupComponent, TiCheckitemComponent } from './components/checkgroup/TiCheckgroupModule';\r\nexport { TiDateBaseModule, TiDateBaseComponent, TimeOptions, TiPicker, TiDatetimeFormat, TiDateValue, TiDateCustomizeOptions } from './components/datebase/TiDateBaseModule';\r\nexport { TiDateDominatorModule, TiDateDominatorComponent } from './components/datedominator/TiDateDominatorModule';\r\nexport { TiDateEditModule, TiDateEditComponent } from './components/dateedit/TiDateEditModule';\r\nexport { TiDateModule, TiDateComponent } from './components/date/TiDateModule';\r\nexport { TiDatePanelModule, TiDatePanelComponent, TiDatePanel, TiPickerHeadText, TiDateValueAndState, TiYearRange } from './components/datepanel/TiDatePanelModule';\r\nexport { TiDateRangeModule, TiDateRangeComponent } from './components/daterange/TiDateRangeModule';\r\nexport { TiDatetimeModule, TiDatetimeComponent } from './components/datetime/TiDatetimeModule';\r\nexport { TiDatetimeRangeModule, TiDatetimeRangeComponent } from './components/datetimerange/TiDatetimeRangeModule';\r\nexport { TiDominatorModule, TiDominatorComponent } from './components/dominator/TiDominatorModule'; // 内部使用，放在public-api仅为了测试方便\r\nexport { TiDropModule, TiDropComponent } from './components/drop/TiDropModule'; // 内部使用，放在public-api仅为了测试方便。服务侧有使用\r\nexport { TiDroplistModule, TiDroplistComponent } from './components/droplist/TiDroplistModule'; // 内部使用，放在public-api仅为了测试方便\r\nexport { TiDropsearchModule, TiDropsearchComponent } from './components/dropsearch/TiDropsearchModule'; // 内部使用，但服务侧也有使用\r\n\r\nexport { TiFormfieldModule, TiFormfieldComponent, TiItemComponent, TiItemLabelComponent, TiButtonItemComponent } from './components/formfield/TiFormfieldModule';\r\nexport { TiIconModule, TiIconComponent, TiIconClassComponent } from './components/icon/TiIconModule';\r\nexport { TiImagepreviewModule, TiImagepreviewComponent, TiFilePreviewInfo } from './components/imagepreview/TiImagepreviewModule';\r\nexport { TiIpModule, TiIpComponent } from './components/ip/TiIpModule';\r\nexport { TiIpsectionModule, TiIpsectionComponent, TiIpsectionConfig } from './components/ipsection/TiIpsectionModule';\r\nexport { TiLeftmenuModule, TiLeftmenuComponent, TiLeftmenuItem,\r\n    TiLeftmenuHeadComponent, TiLeftmenuLevel1Component, TiLeftmenuItemComponent, TiLeftmenuLevel2Component, TiLeftmenuGroupComponent, TiLeftmenuGroupItemComponent, TiLeftmenuFootComponent } from './components/leftmenu/TiLeftmenuModule';\r\nexport { TiListModule, TiListComponent } from './components/list/TiListModule'; // 内部使用，放在public-api仅为了测试方便。服务侧有使用\r\nexport { TiMenuModule, TiMenuItem, TiMenuComponent, TiMenuListComponent} from './components/menu/TiMenuModule';\r\nexport { TiPaginationModule, TiPaginationComponent, TiPageSizeConfig, TiPaginationEvent } from './components/pagination/TiPaginationModule';\r\nexport { TiPopconfirmModule, TiPopconfirmDirective, TiPopconfirmConfig } from './directives/popconfirm/TiPopconfirmModule';\r\nexport { TiProgressbarModule, TiProgressbarComponent } from './components/progressbar/TiProgressbarModule';\r\nexport { TiProgresspieModule, TiProgresspieComponent } from './components/progresspie/TiProgresspieModule';\r\nexport { TiRadioModule, TiRadioComponent } from './components/radio/TiRadioModule';\r\nexport { TiSearchboxModule, TiSearchboxComponent, TiSearchboxNotsearchComponent } from './components/searchbox/TiSearchboxModule';\r\nexport { TiScrollModule, TiScrollDirective } from './directives/scroll/TiScrollModule';\r\nexport { TiSelectModule, TiSelectComponent } from './components/select/TiSelectModule';\r\nexport { TiSliderModule, TiSliderComponent } from './components/slider/TiSliderModule';\r\nexport { TiSpinnerModule, TiSpinnerComponent } from './components/spinner/TiSpinnerModule';\r\nexport { TiStepsModule, TiStepsComponent } from './components/steps/TiStepsModule';\r\nexport { TiSwitchModule, TiSwitchComponent } from './components/switch/TiSwitchModule';\r\nexport { TiTabModule, TiTabsComponent, TiTabComponent, TiTabHeaderComponent } from './components/tab/TiTabModule';\r\nexport {\r\n    TiTableModule, TiTableComponent, TiTableSrcState, TiTableDataState, TiTableRowData, TiTableSrcData, TiTableColumns,\r\n    TiTableStorageConfig, TiPaginationStorageConfig,\r\n    TiHeadFilterComponent,\r\n    TiHeadSortComponent,\r\n    TiDetailsIconComponent,\r\n    TiDetailsTrDirective,\r\n    TiColspanDirective,\r\n    TiColsToggleComponent,\r\n    TiColsResizableDirective,\r\n    TiCellTextComponent,\r\n    TiCellIconsComponent,\r\n    TiColumnFixedDirective,\r\n    TiColClickDirective\r\n} from './components/table/TiTableModule';\r\nexport { TiTagModule, TiTagComponent } from './components/tag/TiTagModule';\r\nexport { TiTagsInputModule, TiTagsInputComponent } from './components/tagsinput/TiTagsInputModule';\r\nexport { TiTextModule, TiTextComponent } from './components/text/TiTextModule';\r\nexport { TiTextareaModule, TiTextareaComponent } from './components/textarea/TiTextareaModule';\r\nexport { TiTimeModule, TiTimeComponent } from './components/time/TiTimeModule';\r\nexport { TiTreeModule, TiTreeUtil, TiTreeNode, TiTreeComponent, TiTreeDragNode } from './components/tree/TiTreeModule';\r\nexport { TiTreeselectModule , TiTreeselectComponent } from './components/treeselect/TiTreeselectModule';\r\nexport { TiUploadModule, TiUploadComponent, TiFileSelectDirective, TiDisabledDirective,\r\n    TiUploadbaseComponent, TiUploadimageComponent } from './components/upload/TiUploadModule';\r\nexport { TiCollapseModule, TiCollapseDirective } from './directives/collapse/TiCollapseModule';\r\nexport { TiDraggableModule, TiDraggableDirective } from './directives/drag/TiDraggableModule'; // 内部使用，放在public-api仅为了测试方便\r\nexport { TiInputNumberModule, TiInputNumberDirective } from './directives/inputnumber/TiInputNumberModule';\r\nexport { TiMaskModule, TiMaskDirective} from './directives/maskinput/TiMaskModule';\r\nexport { TiOverflowModule, TiOverflowDirective, TiOverflowMaxlineDirective } from './directives/overflow/TiOverflowModule';\r\nexport { TiTipModule, TiTipDirective } from './directives/tip/TiTipModule';\r\nexport { TiValidationModule, TiValidationDirective, TiPasswordValidatorConfig, TiValidationConfig, TiValidationType, TiValidators,\r\n    BaseValidator, TiErrorMsgComponent, TiPendingStateComponent,\r\n    MaxLengthValidatorDirective, RangeSizeValidatorDirective, RangeValueValidatorDirective, MinLengthValidatorDirective,\r\n    EmailValidatorDirective, NotScriptValidatorDirective, ContainsValidatorDirective, NotContainsValidatorDirective,\r\n    DateValidatorDirective, DigitsValidatorDirective, EqualValidatorDirective, Ipv4ValidatorDirective, Ipv6ValidatorDirective,\r\n    MaxValueValidatorDirective, IntegerValidatorDirective,\r\n    MinValueValidatorDirective, NotEqualValidatorDirective, NumberValidatorDirective, PasswordValidatorDirective,\r\n    PortValidatorDirective, RegExpValidatorDirective, UrlValidatorDirective, RequiredValidatorDirective } from './directives/validation/TiValidationModule';\r\nexport { TiLocale, TiLocaleFormat, TiLocaleModule, TiTranslatePipe, zh_CN, en_US, de_DE, es_ES, es_US, fr_FR, pt_BR } from './locale/TiLocaleModule';\r\nexport { TiLoadingModule, TiLoadingComponent } from './components/loading/TiLoadingModule';\r\nexport { TiDragServiceModule } from './services/drag/TiDragServiceModule';\r\nexport { TiDragService, TiDraggableConfig } from './services/drag/TiDragService';\r\nexport { TiIntroServiceModule, TiIntroConfig, TiIntroRef, TiIntroStep, TiIntroShape}\r\nfrom './services/intro/TiIntroModule';\r\nexport { TiIntroService } from './services/intro/TiIntroService';\r\nexport { TiModalModule, TiModalHeaderComponent, TiModalFooterComponent, TiModalBodyComponent }\r\n     from './services/modal/TiModalModule';\r\nexport { TiModalService } from './services/modal/TiModalService';\r\nexport { TiModalConfig, TiModalRef } from './services/modal/TiModalInterface';\r\nexport { TiModalComponent } from './services/modal/TiModalComponent';\r\nexport { TiModalNoAnimationComponent } from './services/modal/TiModalNoAnimationComponent';\r\nexport { TiBackdropNoAnimationComponent } from './services/modal/TiBackdropNoAnimationComponent';\r\nexport { TiMessageModule} from './services/message/TiMessageModule';\r\nexport { TiMessageService } from './services/message/TiMessageService';\r\nexport { TiMessageButtonConfig, TiMessageConfig } from './services/message/TiMessageInterface';\r\nexport { TiMessageType } from './services/message/TiMessageComponent';\r\nexport { TiOverflowServiceModule } from './services/overflow/TiOverflowServiceModule';\r\nexport { TiOverflowService } from './services/overflow/TiOverflowService';\r\nexport { TiPopupModule } from './services/popup/TiPopupModule';\r\nexport { TiPopupService, TiContentType, TiPopUpRef } from './services/popup/TiPopupService';\r\nexport { TiRendererModule} from './services/renderer/TiRendererModule';\r\nexport { TiRenderer} from './services/renderer/TiRenderer';\r\nexport { TiTipServiceModule } from './services/tip/TiTipServiceModule';\r\nexport { TiTipService } from './services/tip/TiTipService';\r\nexport { TiTipConfig, TiTipRef, TiTipShowInfo } from './services/tip/TiTipInterface';\r\nexport {  TiUploadServiceModule } from './services/upload/TiUploadServiceModule';\r\nexport { TiUploadService } from './services/upload/TiUploadService';\r\nexport { TiFileInfo, TiFileItem, TiFilter, TiUploadConfig, TiUploadRef } from './services/upload/TiFileInterface';\r\nexport { TiUploadUtil } from './services/upload/TiUploadUtil';\r\nexport { TiLog, TiKeymap, TiBrowser, Util, TiTheme } from './utils/Util';\r\nexport { TiOutlineModule, TiOutlineDirective } from './directives/outline/TiOutlineModule';\r\nexport { Position as TiPosition, TiPositionType, TiPositionResult } from './utils/Position';\r\nexport { TiIncludeModule, TiIncludeDirective } from './directives/include/TiIncludeModule';\r\nexport { TiZoomModule, TiZoomComponent } from './components/zoom/TiZoomModule';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {TiAutofocusComponent as ɵb} from './components/base/TiAutofocusComponent';\nexport {TiRadioBaseComponent as ɵa} from './components/base/TiRadioBaseComponent';\nexport {TiColsToggleDropComponent as ɵq} from './components/table/TiColsToggleDropComponent';\nexport {TiColumnsPipe as ɵr} from './components/table/TiColumnsPipe';\nexport {TiHeadFilterDropComponent as ɵp} from './components/table/TiHeadFilterDropComponent';\nexport {TiTableFixedHeadService as ɵn} from './components/table/TiTableFixedHeadService';\nexport {TiTableFixedHeadServiceModule as ɵo} from './components/table/TiTableFixedHeadServiceModule';\nexport {TiFormatNumPipe as ɵs} from './components/textarea/TiFormatNumPipe';\nexport {TiAutoSelectDirective as ɵu} from './components/tree/TiAutoSelectDirective';\nexport {TiHighlightPipe as ɵt} from './components/tree/TiHighlightPipe';\nexport {TiPopconfirmComponent as ɵc} from './directives/popconfirm/TiPopconfirmComponent';\nexport {TiPwdMsgComponent as ɵm} from './directives/validation/TiPwdMsgComponent';\nexport {CheckStyleModule as ɵj} from './directives/validation/checkHandle/CheckStyleModule';\nexport {CheckStyleService as ɵi} from './directives/validation/checkHandle/CheckStyleService';\nexport {CommonService as ɵl} from './directives/validation/checkHandle/CommonService';\nexport {CommonServiceModule as ɵk} from './directives/validation/checkHandle/CommonServiceModule';\nexport {TiIntromodalComponent as ɵw} from './services/intro/TiIntromodalComponent';\nexport {TiIntrotipComponent as ɵv} from './services/intro/TiIntrotipComponent';\nexport {TiContentWrapperComponent as ɵy} from './services/message/TiContentWrapperComponent';\nexport {TiMessageComponent as ɵd} from './services/message/TiMessageComponent';\nexport {TiTranscludeDirective as ɵx} from './services/message/TiTranscludeDirective';\nexport {TiBackdropComponent as ɵh} from './services/modal/TiBackdropComponent';\nexport {TiTipContainerComponent as ɵg} from './services/tip/TiTipContainerComponent';\nexport {ObservableMap as ɵe} from './utils/ObservableMap';\nexport {ObservableSet as ɵf} from './utils/ObservableSet';"],"names":["animateStyle"],"mappings":"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"}