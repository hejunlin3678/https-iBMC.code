/**
 * @ignore
 * 工具类
 */
export class Util {
    /**
     * 获得一个唯一标示
     * @param prefix 前缀
     * @returns 唯一标示字符串
     */
    static getUniqueId(prefix) {
        Util.idCounter++;
        const id = `${prefix}_${Util.idCounter}`;
        return id;
    }
    // TODO: 是否可以去除？
    /**
     * 是否未定义
     * @param value 值
     * @returns 是否
     */
    static isUndefined(value) {
        return value === undefined;
    }
    // TODO: 是否可以去除？
    /**
     * 是否空
     * @param value 值
     * @returns 是否
     */
    static isNull(value) {
        return value === null;
    }
    // TODO: 是否可以去除？
    /**
     * 是否String
     * @param value 值
     * @returns 是否
     */
    static isString(value) {
        return typeof value === 'string';
    }
    // TODO: 是否可以去除？
    /**
     * 是否Number
     * @param value 值
     * @returns 是否
     */
    static isNumber(value) {
        return typeof value === 'number' && !isNaN(value);
    }
    /**
     * 是否空字符串
     * @param value 值
     * @returns 是否
     */
    static isEmptyString(value) {
        return value === undefined || value === null || value === '';
    }
    // TODO: 是否可以去除
    /**
     * 是否Array
     * @param value 值
     * @returns 是否
     */
    static isArray(value) {
        return Array.isArray(value);
    }
    // TODO: 是否可以去除
    /**
     * 是否函数
     * @param value 值
     * @returns 是否
     */
    static isFunction(value) {
        return typeof value === 'function';
    }
    /**
     * 使用固定参数值格式化填充字串
     * @param source 源字串,其中使用{N}代表需要匹配的参数次序,N从0开始
     * @param params Array 参数数组
     */
    static formatEntry(source, params) {
        let formatSource = source;
        if (!this.isArray(params) || formatSource === '') {
            return formatSource;
        }
        params.forEach((param, i) => {
            formatSource = formatSource.replace(new RegExp(`\\{${i}\\}`, 'g'), () => {
                return param;
            });
        });
        return formatSource;
    }
    /**
     * 发出一个HTML事件
     * @param: ele 触发事件的DOM
     * @param: eventName 事件名称
     * @param: [canBubble] 是否冒泡，可选参数默认不冒泡 false
     */
    static trigger(ele, eventName, canBubble) {
        // 修复SSR错误：ERROR ReferenceError: document is not defined
        if (typeof document === 'undefined') {
            return;
        }
        const event = document.createEvent('HTMLEvents');
        event.initEvent(eventName, canBubble || false, true);
        // event.initEvent(eventType,canBubble,cancelable)
        ele.dispatchEvent(event);
    }
    /**
     * 判断是否为dom元素
     */
    static isElement(ele) {
        if (ele && ele.nodeType) {
            return ele.nodeType === 1;
        }
        else {
            return false;
        }
    }
    /**
     * 判断是否支持CSS Var
     */
    static supportsCssVars() {
        return typeof (window) !== 'undefined' && window.CSS && window.CSS.supports && window.CSS.supports('(--a: 0)');
    }
    /**
     * 通过tab键在弹窗内切换的时候，焦点需要一直在弹窗内部循环。
     */
    static focusInDialogOnTabchange(event, focusableElements) {
        if (!focusableElements || focusableElements.length === 0) {
            return;
        }
        const firstFocusableEle = focusableElements[0];
        const lastFocusableEle = focusableElements[focusableElements.length - 1];
        const target = event.target; // 获得触发事件的元素
        // 按下tab+shift键时，如果当前已获取焦点元素是弹出框中的第一个可获取焦点元素，则聚焦最后一个元素
        if (event.shiftKey) {
            if (target === firstFocusableEle) {
                lastFocusableEle.focus();
                event.preventDefault(); // 阻止默认事件，确保此处手动focus生效
            }
        }
        else if (target === lastFocusableEle) { // 按下tab键时，如当前已获取焦点元素是最后一个可获取焦点元素，则聚焦第一个元素
            firstFocusableEle.focus();
            event.preventDefault(); // 阻止默认事件，确保此处手动focus生效
        }
    }
}
// Generate a unique integer id (unique within the entire client session).
// Useful for temporary DOM ids.
Util.idCounter = 0;
export { TiBrowser } from './TiBrowser';
export { TiKeymap } from './TiKeymap';
export { TiLog } from './TiLog';
export { TiDateUtil } from './TiDateUtil';
export { TiTheme } from './TiTheme';
export { ObservableMap } from './ObservableMap';
export { ObservableSet } from './ObservableSet';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL0BjbG91ZC90aW55My91dGlscy9VdGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNILE1BQU0sT0FBTyxJQUFJO0lBSWI7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBYztRQUNwQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDakIsTUFBTSxFQUFFLEdBQVcsR0FBRyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRWpELE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUNELGdCQUFnQjtJQUNoQjs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFVO1FBQ2hDLE9BQU8sS0FBSyxLQUFLLFNBQVMsQ0FBQztJQUMvQixDQUFDO0lBQ0QsZ0JBQWdCO0lBQ2hCOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQVU7UUFDM0IsT0FBTyxLQUFLLEtBQUssSUFBSSxDQUFDO0lBQzFCLENBQUM7SUFDRCxnQkFBZ0I7SUFDaEI7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBVTtRQUM3QixPQUFPLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQztJQUNyQyxDQUFDO0lBQ0QsZ0JBQWdCO0lBQ2hCOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQVU7UUFDN0IsT0FBTyxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQWE7UUFDckMsT0FBTyxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLEVBQUUsQ0FBQztJQUNqRSxDQUFDO0lBQ0QsZUFBZTtJQUNmOzs7O09B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LDBDQUEwQztZQUNoRixpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUMxQixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyx1QkFBdUI7U0FDbEQ7SUFDTCxDQUFDOztBQXRKRCwwRUFBMEU7QUFDMUUsZ0NBQWdDO0FBQ2pCLGNBQVMsR0FBVyxDQUFDLENBQUM7QUFzSnpDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDeEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNwQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBpZ25vcmVcclxuICog5bel5YW357G7XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVXRpbCB7XHJcbiAgICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBpbnRlZ2VyIGlkICh1bmlxdWUgd2l0aGluIHRoZSBlbnRpcmUgY2xpZW50IHNlc3Npb24pLlxyXG4gICAgLy8gVXNlZnVsIGZvciB0ZW1wb3JhcnkgRE9NIGlkcy5cclxuICAgIHByaXZhdGUgc3RhdGljIGlkQ291bnRlcjogbnVtYmVyID0gMDtcclxuICAgIC8qKlxyXG4gICAgICog6I635b6X5LiA5Liq5ZSv5LiA5qCH56S6XHJcbiAgICAgKiBAcGFyYW0gcHJlZml4IOWJjee8gFxyXG4gICAgICogQHJldHVybnMg5ZSv5LiA5qCH56S65a2X56ym5LiyXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0VW5pcXVlSWQocHJlZml4OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIFV0aWwuaWRDb3VudGVyKys7XHJcbiAgICAgICAgY29uc3QgaWQ6IHN0cmluZyA9IGAke3ByZWZpeH1fJHtVdGlsLmlkQ291bnRlcn1gO1xyXG5cclxuICAgICAgICByZXR1cm4gaWQ7XHJcbiAgICB9XHJcbiAgICAvLyBUT0RPOiDmmK/lkKblj6/ku6XljrvpmaTvvJ9cclxuICAgIC8qKlxyXG4gICAgICog5piv5ZCm5pyq5a6a5LmJXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUg5YC8XHJcbiAgICAgKiBAcmV0dXJucyDmmK/lkKZcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBpc1VuZGVmaW5lZCh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICAvLyBUT0RPOiDmmK/lkKblj6/ku6XljrvpmaTvvJ9cclxuICAgIC8qKlxyXG4gICAgICog5piv5ZCm56m6XHJcbiAgICAgKiBAcGFyYW0gdmFsdWUg5YC8XHJcbiAgICAgKiBAcmV0dXJucyDmmK/lkKZcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBpc051bGwodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcclxuICAgIH1cclxuICAgIC8vIFRPRE86IOaYr+WQpuWPr+S7peWOu+mZpO+8n1xyXG4gICAgLyoqXHJcbiAgICAgKiDmmK/lkKZTdHJpbmdcclxuICAgICAqIEBwYXJhbSB2YWx1ZSDlgLxcclxuICAgICAqIEByZXR1cm5zIOaYr+WQplxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzU3RyaW5nKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcclxuICAgIH1cclxuICAgIC8vIFRPRE86IOaYr+WQpuWPr+S7peWOu+mZpO+8n1xyXG4gICAgLyoqXHJcbiAgICAgKiDmmK/lkKZOdW1iZXJcclxuICAgICAqIEBwYXJhbSB2YWx1ZSDlgLxcclxuICAgICAqIEByZXR1cm5zIOaYr+WQplxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzTnVtYmVyKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5piv5ZCm56m65a2X56ym5LiyXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUg5YC8XHJcbiAgICAgKiBAcmV0dXJucyDmmK/lkKZcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBpc0VtcHR5U3RyaW5nKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gJyc7XHJcbiAgICB9XHJcbiAgICAvLyBUT0RPOiDmmK/lkKblj6/ku6XljrvpmaRcclxuICAgIC8qKlxyXG4gICAgICog5piv5ZCmQXJyYXlcclxuICAgICAqIEBwYXJhbSB2YWx1ZSDlgLxcclxuICAgICAqIEByZXR1cm5zIOaYr+WQplxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzQXJyYXkodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKTtcclxuICAgIH1cclxuICAgIC8vIFRPRE86IOaYr+WQpuWPr+S7peWOu+mZpFxyXG4gICAgLyoqXHJcbiAgICAgKiDmmK/lkKblh73mlbBcclxuICAgICAqIEBwYXJhbSB2YWx1ZSDlgLxcclxuICAgICAqIEByZXR1cm5zIOaYr+WQplxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzRnVuY3Rpb24odmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkvb/nlKjlm7rlrprlj4LmlbDlgLzmoLzlvI/ljJbloavlhYXlrZfkuLJcclxuICAgICAqIEBwYXJhbSBzb3VyY2Ug5rqQ5a2X5LiyLOWFtuS4reS9v+eUqHtOfeS7o+ihqOmcgOimgeWMuemFjeeahOWPguaVsOasoeW6jyxO5LuOMOW8gOWni1xyXG4gICAgICogQHBhcmFtIHBhcmFtcyBBcnJheSDlj4LmlbDmlbDnu4RcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBmb3JtYXRFbnRyeShzb3VyY2U6IHN0cmluZywgcGFyYW1zOiBBcnJheTxhbnk+KTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgZm9ybWF0U291cmNlOiBzdHJpbmcgPSBzb3VyY2U7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQXJyYXkocGFyYW1zKSB8fCBmb3JtYXRTb3VyY2UgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRTb3VyY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBhcmFtcy5mb3JFYWNoKChwYXJhbTogYW55LCBpOiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgZm9ybWF0U291cmNlID0gZm9ybWF0U291cmNlLnJlcGxhY2UobmV3IFJlZ0V4cChgXFxcXHske2l9XFxcXH1gLCAnZycpLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZm9ybWF0U291cmNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y+R5Ye65LiA5LiqSFRNTOS6i+S7tlxyXG4gICAgICogQHBhcmFtOiBlbGUg6Kem5Y+R5LqL5Lu255qERE9NXHJcbiAgICAgKiBAcGFyYW06IGV2ZW50TmFtZSDkuovku7blkI3np7BcclxuICAgICAqIEBwYXJhbTogW2NhbkJ1YmJsZV0g5piv5ZCm5YaS5rOh77yM5Y+v6YCJ5Y+C5pWw6buY6K6k5LiN5YaS5rOhIGZhbHNlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgdHJpZ2dlcihlbGU6IGFueSwgZXZlbnROYW1lOiBzdHJpbmcsIGNhbkJ1YmJsZT86IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICAvLyDkv67lpI1TU1LplJnor6/vvJpFUlJPUiBSZWZlcmVuY2VFcnJvcjogZG9jdW1lbnQgaXMgbm90IGRlZmluZWRcclxuICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGV2ZW50OiBFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XHJcbiAgICAgICAgZXZlbnQuaW5pdEV2ZW50KGV2ZW50TmFtZSwgY2FuQnViYmxlIHx8IGZhbHNlLCB0cnVlKTtcclxuICAgICAgICAvLyBldmVudC5pbml0RXZlbnQoZXZlbnRUeXBlLGNhbkJ1YmJsZSxjYW5jZWxhYmxlKVxyXG4gICAgICAgIGVsZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5Yik5pat5piv5ZCm5Li6ZG9t5YWD57SgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNFbGVtZW50KGVsZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKGVsZSAmJiBlbGUubm9kZVR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVsZS5ub2RlVHlwZSA9PT0gMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDliKTmlq3mmK/lkKbmlK/mjIFDU1MgVmFyXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgc3VwcG9ydHNDc3NWYXJzKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2Yod2luZG93KSAhPT0gJ3VuZGVmaW5lZCcgJiYgKHdpbmRvdyBhcyBhbnkpLkNTUyAmJiAod2luZG93IGFzIGFueSkuQ1NTLnN1cHBvcnRzICYmICh3aW5kb3cgYXMgYW55KS5DU1Muc3VwcG9ydHMoJygtLWE6IDApJyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOmAmui/h3RhYumUruWcqOW8ueeql+WGheWIh+aNoueahOaXtuWAme+8jOeEpueCuemcgOimgeS4gOebtOWcqOW8ueeql+WGhemDqOW+queOr+OAglxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGZvY3VzSW5EaWFsb2dPblRhYmNoYW5nZShldmVudDogS2V5Ym9hcmRFdmVudCwgZm9jdXNhYmxlRWxlbWVudHM6IE5vZGVMaXN0KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFmb2N1c2FibGVFbGVtZW50cyB8fCBmb2N1c2FibGVFbGVtZW50cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmaXJzdEZvY3VzYWJsZUVsZTogYW55ID0gZm9jdXNhYmxlRWxlbWVudHNbMF07XHJcbiAgICAgICAgY29uc3QgbGFzdEZvY3VzYWJsZUVsZTogYW55ID0gZm9jdXNhYmxlRWxlbWVudHNbZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0OiBFdmVudFRhcmdldCA9IGV2ZW50LnRhcmdldDsgLy8g6I635b6X6Kem5Y+R5LqL5Lu255qE5YWD57SgXHJcblxyXG4gICAgICAgIC8vIOaMieS4i3RhYitzaGlmdOmUruaXtu+8jOWmguaenOW9k+WJjeW3suiOt+WPlueEpueCueWFg+e0oOaYr+W8ueWHuuahhuS4reeahOesrOS4gOS4quWPr+iOt+WPlueEpueCueWFg+e0oO+8jOWImeiBmueEpuacgOWQjuS4gOS4quWFg+e0oFxyXG4gICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSBmaXJzdEZvY3VzYWJsZUVsZSkge1xyXG4gICAgICAgICAgICAgICAgbGFzdEZvY3VzYWJsZUVsZS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8g6Zi75q2i6buY6K6k5LqL5Lu277yM56Gu5L+d5q2k5aSE5omL5YqoZm9jdXPnlJ/mlYhcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ID09PSBsYXN0Rm9jdXNhYmxlRWxlKSB7IC8vIOaMieS4i3RhYumUruaXtu+8jOWmguW9k+WJjeW3suiOt+WPlueEpueCueWFg+e0oOaYr+acgOWQjuS4gOS4quWPr+iOt+WPlueEpueCueWFg+e0oO+8jOWImeiBmueEpuesrOS4gOS4quWFg+e0oFxyXG4gICAgICAgICAgICBmaXJzdEZvY3VzYWJsZUVsZS5mb2N1cygpO1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyDpmLvmraLpu5jorqTkuovku7bvvIznoa7kv53mraTlpITmiYvliqhmb2N1c+eUn+aViFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnQgeyBUaUJyb3dzZXIgfSBmcm9tICcuL1RpQnJvd3Nlcic7XHJcbmV4cG9ydCB7IFRpS2V5bWFwIH0gZnJvbSAnLi9UaUtleW1hcCc7XHJcbmV4cG9ydCB7IFRpTG9nIH0gZnJvbSAnLi9UaUxvZyc7XHJcbmV4cG9ydCB7IFRpRGF0ZVV0aWwgfSBmcm9tICcuL1RpRGF0ZVV0aWwnO1xyXG5leHBvcnQgeyBUaVRoZW1lIH0gZnJvbSAnLi9UaVRoZW1lJztcclxuZXhwb3J0IHsgT2JzZXJ2YWJsZU1hcCB9IGZyb20gJy4vT2JzZXJ2YWJsZU1hcCc7XHJcbmV4cG9ydCB7IE9ic2VydmFibGVTZXQgfSBmcm9tICcuL09ic2VydmFibGVTZXQnO1xyXG4iXX0=