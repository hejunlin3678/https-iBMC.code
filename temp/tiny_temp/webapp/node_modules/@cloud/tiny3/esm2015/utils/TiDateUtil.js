/**
 * @ignore
 */
export class TiDateUtil {
    /**
     * 日期类组件的默认最小值
     */
    static minDate() {
        return new Date(1970, 0, 1, 0, 0, 0);
    }
    /**
     * 日期类组件的默认最大值
     */
    static maxDate() {
        return new Date(2099, 11, 31, 23, 59, 59);
    }
    /**
     * 判断是不是合法的时间对象
     */
    static isDate(date) {
        // tslint:disable-next-line:triple-equals
        if (Object.prototype.toString.call(date) === '[object Date]' && String(date) !== 'Invalid Date') {
            return true;
        }
        return false;
    }
    /**
     * @description 最大值时分秒置为23:59:59。
     * 原因：date或者dateRange组件中，如果用户动态设置的value为最大年月日并带有时分秒，而设置的maxValue时分秒比较小时，
     * 校验该value是否小于或等于最大值时，会出错。
     * @param maxValue 最大值
     */
    static changeMaxTime(maxValue) {
        if (!TiDateUtil.isDate(maxValue)) {
            return TiDateUtil.maxDate();
        }
        return new Date(maxValue.getFullYear(), maxValue.getMonth(), maxValue.getDate(), 23, 59, 59);
    }
    /**
     * @description 最小值时分秒置为0:0:0。
     * 原因：date或者dateRange组件中，如果用户设置的minValue带有时分秒，这时动态更新value为最小值年月日并时分秒为很小时，会出错。
     * @param minValue 最小值
     * @returns Date
     */
    static changeMinTime(minValue) {
        if (!TiDateUtil.isDate(minValue)) {
            return TiDateUtil.minDate();
        }
        return new Date(minValue.getFullYear(), minValue.getMonth(), minValue.getDate(), 0, 0, 0);
    }
    /**
     * @description 判断两个日期是不是相等：只包括年月日
     * @param newValue 新值
     * @param oldValue 旧值
     */
    static isDateEqual(newValue, oldValue) {
        if (newValue === oldValue) {
            return true;
        }
        // 当两个value都是Date类型时，要判断两个值的年月日是否相等，直接用‘===’判断不准确
        if (TiDateUtil.isDate(newValue) && TiDateUtil.isDate(oldValue)) {
            // 转换成年月日，然后重新生成一个Date，再将其转换成毫秒数进行判断
            const newDate = new Date(newValue.getFullYear(), newValue.getMonth(), newValue.getDate());
            const oldDate = new Date(oldValue.getFullYear(), oldValue.getMonth(), oldValue.getDate());
            if (newDate.getTime() === oldDate.getTime()) {
                return true;
            }
        }
        return false;
    }
    /**
     * @description 判断两个时间日期是不是相等；
     * @param newValue 新值
     * @param oldValue 旧值
     */
    static isDatetimeEqual(newValue, oldValue) {
        if (newValue === oldValue) {
            return true;
        }
        if (TiDateUtil.isDate(newValue) && TiDateUtil.isDate(oldValue)) {
            if (newValue.getTime() === oldValue.getTime()) {
                return true;
            }
        }
        return false;
    }
    /**
     * @description 判断是不是合法的NowDateTime值
     * 存在nowDateTime值，并且是时间对象，且大于最小值小于最大值
     */
    static isValidNowDateTime(nowDateTime, min, max) {
        return nowDateTime && TiDateUtil.isDate(nowDateTime) &&
            (nowDateTime.getTime() >= min.getTime()) &&
            (nowDateTime.getTime() <= max.getTime());
    }
    /**
     * @description 判断value1是否大于value2
     */
    static isBigger(value1, value2) {
        return value1.getTime() > value2.getTime();
    }
    /**
     * @description 判断value1是否大于value2
     */
    static isBiggerOrEqual(value1, value2) {
        return value1.getTime() >= value2.getTime();
    }
    /**
     * @description 判断value1是否小于value2
     */
    static isSmaller(value1, value2) {
        return value1.getTime() < value2.getTime();
    }
    /**
     * @description 将Date类型的日期转换成年月日字符串
     * @param date 要进行转换的日期值
     */
    static getDateStr(date) {
        return `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`;
    }
    /**
     * @description 将Date类型的日期转换成时分秒字符串
     * @param date 要进行转换的日期值
     */
    static getTimeStr(date) {
        const hour = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();
        const minute = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();
        const second = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds();
        return `${hour}:${minute}:${second}`;
    }
    /**
     * @description 判断是不是一个合法的最大值
     * @param min 最小值
     * @param max 最大值
     */
    static isValidMaxValue(min, max) {
        return TiDateUtil.isDate(max) && (max.getTime() >= min.getTime());
    }
    /**
     * @description 判断是不是一个合法的最小值
     * @param min 最小值
     * @param max 最大值
     */
    static isValidMinValue(min, max) {
        return TiDateUtil.isDate(min) && (max.getTime() >= min.getTime());
    }
    /**
     * @description 是否在最大值最小值区间
     * @param min 最小值
     * @param max 最大值
     */
    static isBetweenMaxAndmin(value, min, max) {
        return (value.getTime() >= min.getTime()) && (value.getTime() <= max.getTime());
    }
    /**
     * @description  12小时制添加AMPM
     */
    static addAmPm(timeFormat) {
        if (timeFormat.match(/h/) && !timeFormat.match(/a/)) { // 已设置ampm格式情况下，不做处理
            return timeFormat + ' a'; // Angular 的datePipe 设置时间时，"a"代表AMPM
        }
        return timeFormat;
    }
    /**
     * @description: 若时间字符串没有一个冒号时处理成合法的事件字符串（加冒号）
     * @param value 时间字符串
     */
    static addColon(value) {
        if (value.match(/:/)) {
            return value;
        }
        const ampm = value.match(/am|AM|pm|PM/) || '';
        return `${parseInt(value, 10)}: ${ampm}`;
    }
}
//# sourceMappingURL=data:application/json;base64,