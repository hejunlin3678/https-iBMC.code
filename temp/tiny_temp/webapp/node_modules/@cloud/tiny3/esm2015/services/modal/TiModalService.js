import { __rest } from "tslib";
import { Injectable } from '@angular/core';
import { TiPopupService } from '../popup/TiPopupService';
import { TiBackdropComponent } from './TiBackdropComponent';
import { TiBackdropNoAnimationComponent } from './TiBackdropNoAnimationComponent';
import { TiModalComponent } from './TiModalComponent';
import { TiModalNoAnimationComponent } from './TiModalNoAnimationComponent';
import { TiBrowser, Util } from '../../utils/Util';
import { TiModalModule } from './TiModalModule';
import * as i0 from "@angular/core";
import * as i1 from "../popup/TiPopupService";
import * as i2 from "./TiModalModule";
/**
 * 弹框组件提供服务方式供业务使用，使用该服务时需要引入模块TiModalModule，开发者通过调用TiModalService.open方法生成弹出框
 *
 * <p><span style="color: red">使用此组件时需要开发者在项目模块(建议在根模块)
 * 中引入BrowserAnimationsModule。</span>这是因为此组件中使用了Angular动画，需要引入BrowserAnimationsModule，
 * 但是 BrowserAnimationsModule 不能在懒加载模块被重复引入，所以需要开发者来引入BrowserAnimationsModule，保证其引入一次。</p>
 *
 * <example-url>../tiny3demo/#/modal/modal-all</example-url>
 */
export class TiModalService {
    constructor(popService) {
        this.popService = popService;
        /**
         * 页面中存在的所有弹框实例，用于处理业务中无法明确当前有多少有效弹窗场景
         */
        this.openedModals = []; // 所有当前处于打开状态弹框缓存数组
        /* tslint:disable:no-null-keyword */
        this.backdropComponentRef = null; // 单个页面中多个弹框出现时,只允许存在一个遮罩层,因此使用该标志位用来缓存遮罩实例
        this.defaultConfig = {
            backdrop: true,
            draggable: true,
            animation: true,
            closeOnEsc: true,
            closeIcon: true
        };
    }
    /**
     * 生成弹框方法
     *
     * @param content 弹框内容，支持TemplateRef及组件形式，内容由ti-modal-header、ti-modal-body及ti-modal-footer组件构成弹框内容整体。
     *                不支持字符串形式，如果误传入字符串形式，不仅会有报错，还会存在XSS攻击风险，不过XSS攻击风险已在10.1.4版本已处理。
     * @param [config] 弹框配置信息
     * @returns 弹框实例信息，使用该实例信息可调用弹框的close等方法；弹框内容为component类型时，也可通过该实例信息的content属性获取弹框内容数据
     */
    open(content, config) {
        let modalInstance; // 弹框最终返回的实例对象
        let modalComponentRef; // 弹框组件实例,使用该实例获取弹框DOM元素及做属性赋值操作
        const modalConfig = Object.assign(Object.assign({}, this.defaultConfig), config); // 弹框配置合并
        let modal; // generateModal方法返回值
        // 通过id唯一标识防止重复打开相同弹框,id重复情况下返回先前实例
        if (modalConfig && !Util.isUndefined(modalConfig.id)) {
            const index = this.openedModals.findIndex((item) => {
                return item._id === modalConfig.id;
            });
            if (index !== -1) {
                return this.openedModals[index];
            }
        }
        // 根据beforeClose返回处理弹窗的销毁：业务在beforeClose中调用弹框销毁
        const destroy = (reason) => {
            if (typeof modalConfig.beforeClose === 'function') {
                modalConfig.beforeClose(modalInstance, reason);
            }
            else {
                destroyModal(reason);
            }
        };
        // 销毁弹框：通过调用组件的动画状态方式实现动画处理
        const destroyModal = (reason) => {
            if (reason) {
                if (typeof modalConfig.close === 'function') {
                    modalConfig.close(modalInstance);
                }
            }
            else {
                if (typeof modalConfig.dismiss === 'function') {
                    modalConfig.dismiss(modalInstance);
                }
            }
            modalComponentRef.instance.showState = 'hide';
        };
        // 销毁弹框实体：弹框动画执行完成后调用该方法
        const removeModalEle = () => {
            // 销毁弹框实体DOM
            modal.hide();
            // 移除缓存实例
            const index = this.openedModals.indexOf(modalInstance);
            this.openedModals.splice(index, 1);
            modalInstance = null;
            // 销毁backdrop
            destroyBackdrop();
        };
        const destroyBackdrop = () => {
            // backdrop定义为false时，不进行处理
            // backdropComponentRef 已经销毁
            if (!modalConfig.backdrop || !this.backdropComponentRef) {
                return;
            }
            // 修改backdrop zIndex，确保有多个弹窗情况下，最外层弹窗不被遮挡
            this.backdropComponentRef.instance.index = this.openedModals.length - 1;
            // 当前还有其它弹框情况下,不用销毁弹框
            if (this.openedModals.length !== 0) {
                return;
            }
            this.backdropComponentRef.instance.showState = 'hide';
        };
        // 将当前要打开的modal放到openedModals列表中
        modalInstance = {
            _id: modalConfig && modalConfig.id,
            close() {
                destroy(true);
            },
            dismiss() {
                destroy(false);
            },
            destroy(reason) {
                destroyModal(reason);
            },
            _remove: removeModalEle,
            content: null
        };
        modal = this.generateModal(content, modalConfig, modalInstance);
        // 生成弹框window,并返回对应的组件实例
        modalComponentRef = modal.modalComponentRef;
        // 生成模态背景backdrop
        this.backdropComponentRef = this.generateBackdrop(modalConfig);
        return modalInstance;
    }
    generateModal(content, config, modalInstance) {
        const { context } = config, modalConfig = __rest(config, ["context"]);
        // tiModalComponent生成需要使用到的上下文
        const modalContext = Object.assign({ modalInstance, index: this.openedModals.length }, modalConfig);
        // 内容部分需要使用到的上下文
        const contentContext = Object.assign({ close: modalInstance.close, dismiss: modalInstance.dismiss }, context);
        let modalComponent;
        modalComponent = (TiBrowser.isIE() && (TiBrowser.version() === 9))
            ? this.popService.create(TiModalNoAnimationComponent)
            : this.popService.create(TiModalComponent);
        const modalComponentRef = modalComponent.show({
            content,
            context: modalContext,
            contentContext,
            container: 'body'
        });
        // 控制元素动画呈现，元素呈现后修改动画状态才会有动画效果，因此在此处处理
        modalComponentRef.instance.showState = 'show';
        modalInstance.content = modalComponentRef.tiContentRef.componentRef;
        this.openedModals.push(modalInstance);
        return { modalComponentRef, hide: modalComponent.hide };
    }
    generateBackdrop(config) {
        // 配置中不需要backdrop,不生成
        if (!config.backdrop) {
            return this.backdropComponentRef;
        }
        if (this.backdropComponentRef) {
            // backdrop已存在的情况下,修改其zIndex,并确保不生成backdrop
            if (this.backdropComponentRef.instance.showState === 'show') {
                this.backdropComponentRef.instance.index = this.openedModals.length - 1;
                return this.backdropComponentRef;
                // 如果backdrop正在销毁(动画执行期间)时再新生成一个backdrop，这时应该将旧的backdrop立即销毁
            }
            else {
                this.backdropComponentRef.destroy();
            }
        }
        const backdropComponent = (TiBrowser.isIE() && (TiBrowser.version() === 9))
            ? this.popService.create(TiBackdropNoAnimationComponent)
            : this.popService.create(TiBackdropComponent);
        const backdropRef = backdropComponent.show({
            context: {
                animation: config.animation,
                destroy: () => {
                    backdropComponent.hide();
                    this.backdropComponentRef = null;
                }
            },
            container: 'body'
        });
        // 控制元素动画呈现，元素呈现后修改动画状态才会有动画效果，因此在此处处理
        backdropRef.instance.showState = 'show';
        return backdropRef;
    }
}
TiModalService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TiModalService_Factory() { return new TiModalService(i0.ɵɵinject(i1.TiPopupService)); }, token: TiModalService, providedIn: i2.TiModalModule });
TiModalService.decorators = [
    { type: Injectable, args: [{
                providedIn: TiModalModule
            },] }
];
TiModalService.ctorParameters = () => [
    { type: TiPopupService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGlNb2RhbFNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9AY2xvdWQvdGlueTMvc2VydmljZXMvbW9kYWwvVGlNb2RhbFNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBZ0IsVUFBVSxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBYyxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNsRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM1RSxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7OztBQUloRDs7Ozs7Ozs7R0FRRztBQUlILE1BQU0sT0FBTyxjQUFjO0lBY3ZCLFlBQW9CLFVBQStCO1FBQS9CLGVBQVUsR0FBVixVQUFVLENBQXFCO1FBYm5EOztXQUVHO1FBQ0ksaUJBQVksR0FBc0IsRUFBRSxDQUFDLENBQUMsbUJBQW1CO1FBQ2hFLG9DQUFvQztRQUM1Qix5QkFBb0IsR0FBc0MsSUFBSSxDQUFDLENBQUMsMkNBQTJDO1FBQzNHLGtCQUFhLEdBQWtCO1lBQ25DLFFBQVEsRUFBRSxJQUFJO1lBQ2QsU0FBUyxFQUFFLElBQUk7WUFDZixTQUFTLEVBQUUsSUFBSTtZQUNmLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLFNBQVMsRUFBRSxJQUFJO1NBQ2xCLENBQUM7SUFFRixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLElBQUksQ0FBQyxPQUErQixFQUFFLE1BQXNCO1FB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Q0o7UUFDRCxNQUFNLGlCQUFpQixHQUFlLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ25FLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQztZQUN4RCxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNsRSxNQUFNLFdBQVcsR0FBc0MsaUJBQWlCLENBQUMsSUFBSSxDQUFDO1lBQzFFLE9BQU8sRUFBRTtnQkFDTCxTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVM7Z0JBQzNCLE9BQU8sRUFBRSxHQUFTLEVBQUU7b0JBQ2hCLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDO29CQUN6QixJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDO2dCQUNyQyxDQUFDO2FBQ0o7WUFDRCxTQUFTLEVBQUUsTUFBTTtTQUNwQixDQUFDLENBQUM7UUFDSCxzQ0FBc0M7UUFDdEMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDO1FBRXhDLE9BQU8sV0FBVyxDQUFDO0lBQ3ZCLENBQUM7Ozs7WUF2TEosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxhQUFhO2FBQzVCOzs7WUFyQm9CLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRSZWYsIEluamVjdGFibGUsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRpUG9wVXBSZWYsIFRpUG9wdXBTZXJ2aWNlIH0gZnJvbSAnLi4vcG9wdXAvVGlQb3B1cFNlcnZpY2UnO1xyXG5pbXBvcnQgeyBUaUJhY2tkcm9wQ29tcG9uZW50IH0gZnJvbSAnLi9UaUJhY2tkcm9wQ29tcG9uZW50JztcclxuaW1wb3J0IHsgVGlCYWNrZHJvcE5vQW5pbWF0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9UaUJhY2tkcm9wTm9BbmltYXRpb25Db21wb25lbnQnO1xyXG5pbXBvcnQgeyBUaU1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi9UaU1vZGFsQ29tcG9uZW50JztcclxuaW1wb3J0IHsgVGlNb2RhbE5vQW5pbWF0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9UaU1vZGFsTm9BbmltYXRpb25Db21wb25lbnQnO1xyXG5pbXBvcnQgeyBUaUJyb3dzZXIsIFV0aWwgfSBmcm9tICcuLi8uLi91dGlscy9VdGlsJztcclxuaW1wb3J0IHsgVGlNb2RhbE1vZHVsZSB9IGZyb20gJy4vVGlNb2RhbE1vZHVsZSc7XHJcbmltcG9ydCB7IFRpTW9kYWxDb25maWcsIFRpTW9kYWxSZWYgfSBmcm9tICcuL1RpTW9kYWxJbnRlcmZhY2UnO1xyXG5cclxuXHJcbi8qKlxyXG4gKiDlvLnmoYbnu4Tku7bmj5DkvpvmnI3liqHmlrnlvI/kvpvkuJrliqHkvb/nlKjvvIzkvb/nlKjor6XmnI3liqHml7bpnIDopoHlvJXlhaXmqKHlnZdUaU1vZGFsTW9kdWxl77yM5byA5Y+R6ICF6YCa6L+H6LCD55SoVGlNb2RhbFNlcnZpY2Uub3BlbuaWueazleeUn+aIkOW8ueWHuuahhlxyXG4gKlxyXG4gKiA8cD48c3BhbiBzdHlsZT1cImNvbG9yOiByZWRcIj7kvb/nlKjmraTnu4Tku7bml7bpnIDopoHlvIDlj5HogIXlnKjpobnnm67mqKHlnZco5bu66K6u5Zyo5qC55qih5Z2XKVxyXG4gKiDkuK3lvJXlhaVCcm93c2VyQW5pbWF0aW9uc01vZHVsZeOAgjwvc3Bhbj7ov5nmmK/lm6DkuLrmraTnu4Tku7bkuK3kvb/nlKjkuoZBbmd1bGFy5Yqo55S777yM6ZyA6KaB5byV5YWlQnJvd3NlckFuaW1hdGlvbnNNb2R1bGXvvIxcclxuICog5L2G5pivIEJyb3dzZXJBbmltYXRpb25zTW9kdWxlIOS4jeiDveWcqOaHkuWKoOi9veaooeWdl+iiq+mHjeWkjeW8leWFpe+8jOaJgOS7pemcgOimgeW8gOWPkeiAheadpeW8leWFpUJyb3dzZXJBbmltYXRpb25zTW9kdWxl77yM5L+d6K+B5YW25byV5YWl5LiA5qyh44CCPC9wPlxyXG4gKlxyXG4gKiA8ZXhhbXBsZS11cmw+Li4vdGlueTNkZW1vLyMvbW9kYWwvbW9kYWwtYWxsPC9leGFtcGxlLXVybD5cclxuICovXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46IFRpTW9kYWxNb2R1bGVcclxufSlcclxuZXhwb3J0IGNsYXNzIFRpTW9kYWxTZXJ2aWNlIHtcclxuICAgIC8qKlxyXG4gICAgICog6aG16Z2i5Lit5a2Y5Zyo55qE5omA5pyJ5by55qGG5a6e5L6L77yM55So5LqO5aSE55CG5Lia5Yqh5Lit5peg5rOV5piO56Gu5b2T5YmN5pyJ5aSa5bCR5pyJ5pWI5by556qX5Zy65pmvXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvcGVuZWRNb2RhbHM6IEFycmF5PFRpTW9kYWxSZWY+ID0gW107IC8vIOaJgOacieW9k+WJjeWkhOS6juaJk+W8gOeKtuaAgeW8ueahhue8k+WtmOaVsOe7hFxyXG4gICAgLyogdHNsaW50OmRpc2FibGU6bm8tbnVsbC1rZXl3b3JkICovXHJcbiAgICBwcml2YXRlIGJhY2tkcm9wQ29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8VGlCYWNrZHJvcENvbXBvbmVudD4gPSBudWxsOyAvLyDljZXkuKrpobXpnaLkuK3lpJrkuKrlvLnmoYblh7rnjrDml7Ys5Y+q5YWB6K645a2Y5Zyo5LiA5Liq6YGu572p5bGCLOWboOatpOS9v+eUqOivpeagh+W/l+S9jeeUqOadpee8k+WtmOmBrue9qeWunuS+i1xyXG4gICAgcHJpdmF0ZSBkZWZhdWx0Q29uZmlnOiBUaU1vZGFsQ29uZmlnID0ge1xyXG4gICAgICAgIGJhY2tkcm9wOiB0cnVlLFxyXG4gICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcclxuICAgICAgICBhbmltYXRpb246IHRydWUsXHJcbiAgICAgICAgY2xvc2VPbkVzYzogdHJ1ZSxcclxuICAgICAgICBjbG9zZUljb246IHRydWVcclxuICAgIH07XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBvcFNlcnZpY2U6IFRpUG9wdXBTZXJ2aWNlPGFueT4pIHtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOeUn+aIkOW8ueahhuaWueazlVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBjb250ZW50IOW8ueahhuWGheWuue+8jOaUr+aMgVRlbXBsYXRlUmVm5Y+K57uE5Lu25b2i5byP77yM5YaF5a6555SxdGktbW9kYWwtaGVhZGVy44CBdGktbW9kYWwtYm9keeWPinRpLW1vZGFsLWZvb3Rlcue7hOS7tuaehOaIkOW8ueahhuWGheWuueaVtOS9k+OAglxyXG4gICAgICogICAgICAgICAgICAgICAg5LiN5pSv5oyB5a2X56ym5Liy5b2i5byP77yM5aaC5p6c6K+v5Lyg5YWl5a2X56ym5Liy5b2i5byP77yM5LiN5LuF5Lya5pyJ5oql6ZSZ77yM6L+Y5Lya5a2Y5ZyoWFNT5pS75Ye76aOO6Zmp77yM5LiN6L+HWFNT5pS75Ye76aOO6Zmp5bey5ZyoMTAuMS4054mI5pys5bey5aSE55CG44CCXHJcbiAgICAgKiBAcGFyYW0gW2NvbmZpZ10g5by55qGG6YWN572u5L+h5oGvXHJcbiAgICAgKiBAcmV0dXJucyDlvLnmoYblrp7kvovkv6Hmga/vvIzkvb/nlKjor6Xlrp7kvovkv6Hmga/lj6/osIPnlKjlvLnmoYbnmoRjbG9zZeetieaWueazle+8m+W8ueahhuWGheWuueS4umNvbXBvbmVudOexu+Wei+aXtu+8jOS5n+WPr+mAmui/h+ivpeWunuS+i+S/oeaBr+eahGNvbnRlbnTlsZ7mgKfojrflj5blvLnmoYblhoXlrrnmlbDmja5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG9wZW4oY29udGVudDogVGVtcGxhdGVSZWY8YW55PiB8IGFueSwgY29uZmlnPzogVGlNb2RhbENvbmZpZyk6IFRpTW9kYWxSZWYge1xyXG4gICAgICAgIGxldCBtb2RhbEluc3RhbmNlOiBUaU1vZGFsUmVmOyAvLyDlvLnmoYbmnIDnu4jov5Tlm57nmoTlrp7kvovlr7nosaFcclxuICAgICAgICBsZXQgbW9kYWxDb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxUaU1vZGFsQ29tcG9uZW50PjsgLy8g5by55qGG57uE5Lu25a6e5L6LLOS9v+eUqOivpeWunuS+i+iOt+WPluW8ueahhkRPTeWFg+e0oOWPiuWBmuWxnuaAp+i1i+WAvOaTjeS9nFxyXG4gICAgICAgIGNvbnN0IG1vZGFsQ29uZmlnOiBUaU1vZGFsQ29uZmlnID0gey4uLnRoaXMuZGVmYXVsdENvbmZpZywgLi4uY29uZmlnfTsgLy8g5by55qGG6YWN572u5ZCI5bm2XHJcbiAgICAgICAgbGV0IG1vZGFsOiB7IG1vZGFsQ29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8VGlNb2RhbENvbXBvbmVudD4sIGhpZGUoKTogdm9pZH07IC8vIGdlbmVyYXRlTW9kYWzmlrnms5Xov5Tlm57lgLxcclxuXHJcbiAgICAgICAgLy8g6YCa6L+HaWTllK/kuIDmoIfor4bpmLLmraLph43lpI3miZPlvIDnm7jlkIzlvLnmoYYsaWTph43lpI3mg4XlhrXkuIvov5Tlm57lhYjliY3lrp7kvotcclxuICAgICAgICBpZiAobW9kYWxDb25maWcgJiYgIVV0aWwuaXNVbmRlZmluZWQobW9kYWxDb25maWcuaWQpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLm9wZW5lZE1vZGFscy5maW5kSW5kZXgoKGl0ZW06IFRpTW9kYWxSZWYpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLl9pZCA9PT0gbW9kYWxDb25maWcuaWQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcGVuZWRNb2RhbHNbaW5kZXhdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOagueaNrmJlZm9yZUNsb3Nl6L+U5Zue5aSE55CG5by556qX55qE6ZSA5q+B77ya5Lia5Yqh5ZyoYmVmb3JlQ2xvc2XkuK3osIPnlKjlvLnmoYbplIDmr4FcclxuICAgICAgICBjb25zdCBkZXN0cm95OiAocmVhc29uOiBib29sZWFuKSA9PiB2b2lkID1cclxuICAgICAgICAgICAgKHJlYXNvbjogYm9vbGVhbik6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1vZGFsQ29uZmlnLmJlZm9yZUNsb3NlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBtb2RhbENvbmZpZy5iZWZvcmVDbG9zZShtb2RhbEluc3RhbmNlLCByZWFzb24pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGVzdHJveU1vZGFsKHJlYXNvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIOmUgOavgeW8ueahhu+8mumAmui/h+iwg+eUqOe7hOS7tueahOWKqOeUu+eKtuaAgeaWueW8j+WunueOsOWKqOeUu+WkhOeQhlxyXG4gICAgICAgIGNvbnN0IGRlc3Ryb3lNb2RhbDogKHJlYXNvbj86IGJvb2xlYW4pID0+IHZvaWQgPVxyXG4gICAgICAgICAgICAocmVhc29uPzogYm9vbGVhbik6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVhc29uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1vZGFsQ29uZmlnLmNsb3NlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxDb25maWcuY2xvc2UobW9kYWxJbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1vZGFsQ29uZmlnLmRpc21pc3MgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbENvbmZpZy5kaXNtaXNzKG1vZGFsSW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1vZGFsQ29tcG9uZW50UmVmLmluc3RhbmNlLnNob3dTdGF0ZSA9ICdoaWRlJztcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIOmUgOavgeW8ueahhuWunuS9k++8muW8ueahhuWKqOeUu+aJp+ihjOWujOaIkOWQjuiwg+eUqOivpeaWueazlVxyXG4gICAgICAgIGNvbnN0IHJlbW92ZU1vZGFsRWxlOiAoKSA9PiB2b2lkID1cclxuICAgICAgICAgICAgKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICAvLyDplIDmr4HlvLnmoYblrp7kvZNET01cclxuICAgICAgICAgICAgbW9kYWwuaGlkZSgpO1xyXG4gICAgICAgICAgICAvLyDnp7vpmaTnvJPlrZjlrp7kvotcclxuICAgICAgICAgICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHRoaXMub3BlbmVkTW9kYWxzLmluZGV4T2YobW9kYWxJbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIHRoaXMub3BlbmVkTW9kYWxzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgLy8g6ZSA5q+BYmFja2Ryb3BcclxuICAgICAgICAgICAgZGVzdHJveUJhY2tkcm9wKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBkZXN0cm95QmFja2Ryb3A6ICgpID0+IHZvaWQgPVxyXG4gICAgICAgICgpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgLy8gYmFja2Ryb3DlrprkuYnkuLpmYWxzZeaXtu+8jOS4jei/m+ihjOWkhOeQhlxyXG4gICAgICAgICAgICAvLyBiYWNrZHJvcENvbXBvbmVudFJlZiDlt7Lnu4/plIDmr4FcclxuICAgICAgICAgICAgaWYgKCFtb2RhbENvbmZpZy5iYWNrZHJvcCB8fCAhdGhpcy5iYWNrZHJvcENvbXBvbmVudFJlZikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIOS/ruaUuWJhY2tkcm9wIHpJbmRleO+8jOehruS/neacieWkmuS4quW8ueeql+aDheWGteS4i++8jOacgOWkluWxguW8ueeql+S4jeiiq+mBruaMoVxyXG4gICAgICAgICAgICB0aGlzLmJhY2tkcm9wQ29tcG9uZW50UmVmLmluc3RhbmNlLmluZGV4ID0gdGhpcy5vcGVuZWRNb2RhbHMubGVuZ3RoIC0gMSA7XHJcbiAgICAgICAgICAgIC8vIOW9k+WJjei/mOacieWFtuWug+W8ueahhuaDheWGteS4iyzkuI3nlKjplIDmr4HlvLnmoYZcclxuICAgICAgICAgICAgaWYgKHRoaXMub3BlbmVkTW9kYWxzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYmFja2Ryb3BDb21wb25lbnRSZWYuaW5zdGFuY2Uuc2hvd1N0YXRlID0gJ2hpZGUnO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8g5bCG5b2T5YmN6KaB5omT5byA55qEbW9kYWzmlL7liLBvcGVuZWRNb2RhbHPliJfooajkuK1cclxuICAgICAgICBtb2RhbEluc3RhbmNlID0ge1xyXG4gICAgICAgICAgICBfaWQ6IG1vZGFsQ29uZmlnICYmIG1vZGFsQ29uZmlnLmlkLFxyXG4gICAgICAgICAgICBjbG9zZSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgICAgIGRlc3Ryb3kodHJ1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRpc21pc3MoKTogdm9pZCB7XHJcbiAgICAgICAgICAgICAgICBkZXN0cm95KGZhbHNlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVzdHJveShyZWFzb246IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICAgICAgICAgIGRlc3Ryb3lNb2RhbChyZWFzb24pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfcmVtb3ZlOiByZW1vdmVNb2RhbEVsZSxcclxuICAgICAgICAgICAgY29udGVudDogbnVsbFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbW9kYWwgPSB0aGlzLmdlbmVyYXRlTW9kYWwoY29udGVudCwgbW9kYWxDb25maWcsIG1vZGFsSW5zdGFuY2UpO1xyXG4gICAgICAgIC8vIOeUn+aIkOW8ueahhndpbmRvdyzlubbov5Tlm57lr7nlupTnmoTnu4Tku7blrp7kvotcclxuICAgICAgICBtb2RhbENvbXBvbmVudFJlZiA9IG1vZGFsLm1vZGFsQ29tcG9uZW50UmVmO1xyXG4gICAgICAgIC8vIOeUn+aIkOaooeaAgeiDjOaZr2JhY2tkcm9wXHJcbiAgICAgICAgdGhpcy5iYWNrZHJvcENvbXBvbmVudFJlZiA9IHRoaXMuZ2VuZXJhdGVCYWNrZHJvcChtb2RhbENvbmZpZyk7XHJcblxyXG4gICAgICAgIHJldHVybiBtb2RhbEluc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZU1vZGFsKGNvbnRlbnQ6IGFueSwgY29uZmlnOiBUaU1vZGFsQ29uZmlnLCBtb2RhbEluc3RhbmNlOiBUaU1vZGFsUmVmKToge1xyXG4gICAgICAgIG1vZGFsQ29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8VGlNb2RhbENvbXBvbmVudD4sIGhpZGUoKTogdm9pZH0ge1xyXG4gICAgICAgIGNvbnN0IHtjb250ZXh0LCAuLi5tb2RhbENvbmZpZ306IFRpTW9kYWxDb25maWcgPSBjb25maWc7XHJcbiAgICAgICAgLy8gdGlNb2RhbENvbXBvbmVudOeUn+aIkOmcgOimgeS9v+eUqOWIsOeahOS4iuS4i+aWh1xyXG4gICAgICAgIGNvbnN0IG1vZGFsQ29udGV4dDogYW55ID0ge1xyXG4gICAgICAgICAgICBtb2RhbEluc3RhbmNlLFxyXG4gICAgICAgICAgICBpbmRleDogdGhpcy5vcGVuZWRNb2RhbHMubGVuZ3RoLFxyXG4gICAgICAgICAgICAuLi5tb2RhbENvbmZpZ1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8g5YaF5a656YOo5YiG6ZyA6KaB5L2/55So5Yiw55qE5LiK5LiL5paHXHJcbiAgICAgICAgY29uc3QgY29udGVudENvbnRleHQ6IGFueSA9IHtcclxuICAgICAgICAgICAgY2xvc2U6IG1vZGFsSW5zdGFuY2UuY2xvc2UsXHJcbiAgICAgICAgICAgIGRpc21pc3M6IG1vZGFsSW5zdGFuY2UuZGlzbWlzcyxcclxuICAgICAgICAgICAgLi4uY29udGV4dFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGV0IG1vZGFsQ29tcG9uZW50OiBhbnk7XHJcbiAgICAgICAgbW9kYWxDb21wb25lbnQgPSAoVGlCcm93c2VyLmlzSUUoKSAmJiAoVGlCcm93c2VyLnZlcnNpb24oKSA9PT0gOSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5wb3BTZXJ2aWNlLmNyZWF0ZShUaU1vZGFsTm9BbmltYXRpb25Db21wb25lbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5wb3BTZXJ2aWNlLmNyZWF0ZShUaU1vZGFsQ29tcG9uZW50KTtcclxuICAgICAgICBjb25zdCBtb2RhbENvbXBvbmVudFJlZjogYW55ID0gbW9kYWxDb21wb25lbnQuc2hvdyh7XHJcbiAgICAgICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgICAgIGNvbnRleHQ6IG1vZGFsQ29udGV4dCxcclxuICAgICAgICAgICAgY29udGVudENvbnRleHQsXHJcbiAgICAgICAgICAgIGNvbnRhaW5lcjogJ2JvZHknXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8g5o6n5Yi25YWD57Sg5Yqo55S75ZGI546w77yM5YWD57Sg5ZGI546w5ZCO5L+u5pS55Yqo55S754q25oCB5omN5Lya5pyJ5Yqo55S75pWI5p6c77yM5Zug5q2k5Zyo5q2k5aSE5aSE55CGXHJcbiAgICAgICAgbW9kYWxDb21wb25lbnRSZWYuaW5zdGFuY2Uuc2hvd1N0YXRlID0gJ3Nob3cnO1xyXG4gICAgICAgIG1vZGFsSW5zdGFuY2UuY29udGVudCA9IG1vZGFsQ29tcG9uZW50UmVmLnRpQ29udGVudFJlZi5jb21wb25lbnRSZWY7XHJcbiAgICAgICAgdGhpcy5vcGVuZWRNb2RhbHMucHVzaChtb2RhbEluc3RhbmNlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHsgbW9kYWxDb21wb25lbnRSZWYsIGhpZGU6IG1vZGFsQ29tcG9uZW50LmhpZGUgfTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgZ2VuZXJhdGVCYWNrZHJvcChjb25maWc6IFRpTW9kYWxDb25maWcpOiBDb21wb25lbnRSZWY8VGlCYWNrZHJvcENvbXBvbmVudD4ge1xyXG4gICAgICAgIC8vIOmFjee9ruS4reS4jemcgOimgWJhY2tkcm9wLOS4jeeUn+aIkFxyXG4gICAgICAgIGlmICghY29uZmlnLmJhY2tkcm9wKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJhY2tkcm9wQ29tcG9uZW50UmVmO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuYmFja2Ryb3BDb21wb25lbnRSZWYpIHtcclxuICAgICAgICAgICAgLy8gYmFja2Ryb3Dlt7LlrZjlnKjnmoTmg4XlhrXkuIss5L+u5pS55YW2ekluZGV4LOW5tuehruS/neS4jeeUn+aIkGJhY2tkcm9wXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJhY2tkcm9wQ29tcG9uZW50UmVmLmluc3RhbmNlLnNob3dTdGF0ZSA9PT0gJ3Nob3cnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhY2tkcm9wQ29tcG9uZW50UmVmLmluc3RhbmNlLmluZGV4ID0gdGhpcy5vcGVuZWRNb2RhbHMubGVuZ3RoIC0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5iYWNrZHJvcENvbXBvbmVudFJlZjtcclxuICAgICAgICAgICAgLy8g5aaC5p6cYmFja2Ryb3DmraPlnKjplIDmr4Eo5Yqo55S75omn6KGM5pyf6Ze0KeaXtuWGjeaWsOeUn+aIkOS4gOS4qmJhY2tkcm9w77yM6L+Z5pe25bqU6K+l5bCG5pen55qEYmFja2Ryb3Dnq4vljbPplIDmr4FcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFja2Ryb3BDb21wb25lbnRSZWYuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJhY2tkcm9wQ29tcG9uZW50OiBUaVBvcFVwUmVmID0gKFRpQnJvd3Nlci5pc0lFKCkgJiYgKFRpQnJvd3Nlci52ZXJzaW9uKCkgPT09IDkpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnBvcFNlcnZpY2UuY3JlYXRlKFRpQmFja2Ryb3BOb0FuaW1hdGlvbkNvbXBvbmVudClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5wb3BTZXJ2aWNlLmNyZWF0ZShUaUJhY2tkcm9wQ29tcG9uZW50KTtcclxuICAgICAgICBjb25zdCBiYWNrZHJvcFJlZjogQ29tcG9uZW50UmVmPFRpQmFja2Ryb3BDb21wb25lbnQ+ID0gYmFja2Ryb3BDb21wb25lbnQuc2hvdyh7XHJcbiAgICAgICAgICAgIGNvbnRleHQ6IHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogY29uZmlnLmFuaW1hdGlvbixcclxuICAgICAgICAgICAgICAgIGRlc3Ryb3k6ICgpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcENvbXBvbmVudC5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYWNrZHJvcENvbXBvbmVudFJlZiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbnRhaW5lcjogJ2JvZHknXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8g5o6n5Yi25YWD57Sg5Yqo55S75ZGI546w77yM5YWD57Sg5ZGI546w5ZCO5L+u5pS55Yqo55S754q25oCB5omN5Lya5pyJ5Yqo55S75pWI5p6c77yM5Zug5q2k5Zyo5q2k5aSE5aSE55CGXHJcbiAgICAgICAgYmFja2Ryb3BSZWYuaW5zdGFuY2Uuc2hvd1N0YXRlID0gJ3Nob3cnO1xyXG5cclxuICAgICAgICByZXR1cm4gYmFja2Ryb3BSZWY7XHJcbiAgICB9XHJcbn1cclxuIl19