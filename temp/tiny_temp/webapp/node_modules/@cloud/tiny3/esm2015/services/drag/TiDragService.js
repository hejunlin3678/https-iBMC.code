import { Injectable, RendererFactory2 } from '@angular/core';
import { TiRenderer } from '../renderer/TiRenderer';
import { Util } from '../../utils/Util';
import { TiDragServiceModule } from './TiDragServiceModule';
import * as i0 from "@angular/core";
import * as i1 from "../renderer/TiRenderer";
import * as i2 from "./TiDragServiceModule";
/**
 * 拖拽服务，适用于可拖拽元素不在html模板中显示声明的情况，除服务方式外，还提供了指令生成方式[TiDraggableDirective]{@link ../directives/TiDraggableDirective.html}，
 * 使用该服务时需要引入模块TiDragServiceModule
 *
 * <example-url>../tiny3demo/#/drag/drag-all</example-url>
 */
export class TiDragService {
    constructor(rendererFactory, tiRenderer) {
        this.tiRenderer = tiRenderer;
        /* tslint:disable:no-null-keyword */
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    /**
     * 创建拖拽对象
     *
     * 函数返回值为
     * {
     * destroy: () => void
     * }
     */
    create(options) {
        const helper = options.helper; // 可拖拽元素，原生HTML类型
        const handle = options.handle || helper; // 拖拽生效元素,未定义情况下，默认为helper元素
        // 标志位，用于记录是否是拖拽引起的事件触发,在mousedown和mouseup中分别进行了置位
        let mouseStart = false;
        // 记录初始位置信息
        let originalPagePos;
        let originalPos;
        // 设置给helper元素的位置信息，用于位置设置及事件中参数传递
        let position;
        // 非定位元素情况下设置left/top无效，因此需先将其设置为relative定位
        // 修复SSR错误：ERROR ReferenceError: getComputedStyle is not defined
        const pos = typeof getComputedStyle !== 'undefined' ? getComputedStyle(helper).position : '';
        if (!/(fixed|absolute|relative)/.test(pos)) {
            this.renderer.setStyle(helper, 'position', 'relative');
        }
        // 拖拽时需要用到的mouse事件句柄记录
        let mouseMoveEvt;
        let mouseUpEvt;
        this.renderer.listen(handle, 'mousedown', (event) => {
            if (options.disabled) { // 灰化情况下不做处理
                return;
            }
            event.preventDefault(); // 阻止拖拽过程中文本的选中处理等操作
            mouseStart = true;
            // 初始拖拽时鼠标距离页面边距位置（包含滚动条在内）
            originalPagePos = {
                pageX: event.pageX,
                pageY: event.pageY
            };
            // 拖拽元素初始位置,由于获取到的位置为'xxpx',因此此处需要转化为数字
            originalPos = position = {
                left: parseInt(getComputedStyle(helper).left, 10) || 0,
                top: parseInt(getComputedStyle(helper).top, 10) || 0
            };
            // 触发初始拖拽事件
            triggerEvt('start');
            mouseMoveEvt = this.renderer.listen(document, 'mousemove', (evt) => {
                onMouseMove(evt);
            });
            mouseUpEvt = this.renderer.listen(document, 'mouseup', (evt) => {
                onMouseUp(evt);
            });
        });
        const onMouseMove = (evt) => {
            // 防止非拖拽触发的mousemove事件
            if (!mouseStart) {
                return;
            }
            evt.preventDefault(); // 阻止拖拽过程中的选中处理等操作
            const topPos = (options.axis === 'x')
                ? originalPos.top
                : (evt.pageY - originalPagePos.pageY + originalPos.top - document.body.scrollTop);
            const leftPos = (options.axis === 'y')
                ? originalPos.left
                : (evt.pageX - originalPagePos.pageX + originalPos.left - document.body.scrollLeft);
            position = {
                left: leftPos,
                top: topPos
            };
            // 触发拖拽时间，该事件中处理拖拽过程中的位置纠正
            triggerEvt('drag');
            this.tiRenderer.setStyles(helper, {
                left: `${position.left}px`,
                top: `${position.top}px`
            });
        };
        const onMouseUp = (evt) => {
            mouseStart = false;
            evt.preventDefault();
            triggerEvt('stop');
            // 拖拽停止后，解绑document上的相关事件
            mouseMoveEvt();
            mouseUpEvt();
        };
        const triggerEvt = (evtType) => {
            if (options[evtType]) {
                const ret = options[evtType]({ position, helper });
                if (typeof ret === 'object') {
                    position = Object.assign(Object.assign({}, ret), position);
                }
            }
        };
        return {
            destroy: () => {
                if (!Util.isUndefined(mouseMoveEvt)) {
                    mouseMoveEvt();
                }
                if (!Util.isUndefined(mouseUpEvt)) {
                    mouseUpEvt();
                }
            }
        };
    }
}
TiDragService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TiDragService_Factory() { return new TiDragService(i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(i1.TiRenderer)); }, token: TiDragService, providedIn: i2.TiDragServiceModule });
TiDragService.decorators = [
    { type: Injectable, args: [{
                providedIn: TiDragServiceModule
            },] }
];
TiDragService.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: TiRenderer }
];
//# sourceMappingURL=data:application/json;base64,