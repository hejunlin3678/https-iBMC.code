import { Injectable, RendererFactory2 } from '@angular/core';
import { TiRenderer } from '../renderer/TiRenderer';
import { TiLog, Util } from '../../utils/Util';
import { TiTipService } from '../tip/TiTipService';
import { TiOverflowServiceModule } from './TiOverflowServiceModule';
import * as i0 from "@angular/core";
import * as i1 from "../renderer/TiRenderer";
import * as i2 from "../tip/TiTipService";
import * as i3 from "./TiOverflowServiceModule";
/**
 * @ignore
 * 文本过长出...并tip提示配置项，使用该服务时需要引入模块TiOverflowServiceModule，该组件提供了两种使用方式:
 *
 * 1.服务方式（见如下说明）
 *
 * 2.指令方式：[TiOverflowDirective]{@link ../directives/TiOverflowDirective.html}
 *
 * <example-url>../tiny3demo/#/overflow/overflow-all</example-url>
 */
export class TiOverflowService {
    constructor(rendererFactory, tiRenderer, tipService) {
        this.tiRenderer = tiRenderer;
        this.tipService = tipService;
        /* tslint:disable:no-null-keyword */
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    /**
     * 生成tip提示方法
     * @param hostElement 文本过长的宿主对象
     * @param config overflow配置项
     * 返回 {destroy(): void} 销毁文本过长的tip提示，使用服务方式时，需要在宿主元素销毁时，通过调用该方法销毁文本过长的tip提示
     */
    create(hostElement, config) {
        this.tiRenderer.setStyles(hostElement, {
            whiteSpace: 'nowrap',
            textOverflow: 'ellipsis',
            overflow: 'hidden'
        });
        // 非法情况处理
        if (!Util.isElement(hostElement)) {
            TiLog.warn('overflow: hostEle type is not element');
            // 防止外部使用报错，此处做返回值处理
            return {
                destroy() { }
            };
        }
        // 如果该元素为inline元素时，宽度不生效会导致元素出...样式不生效，因此此处做处理
        // 修复SSR报错：ERROR ReferenceError: getComputedStyle is not defined
        if (typeof getComputedStyle !== 'undefined' && getComputedStyle(hostElement).display === 'inline') {
            this.renderer.setStyle(hostElement, 'display', 'inline-block');
        }
        const tipInstance = this.generateTip(hostElement, config || {});
        return {
            destroy() {
                if (tipInstance) {
                    tipInstance.hide();
                }
            }
        };
    }
    /**
     * @ignore
     */
    isOverflow(element) {
        // 复制DOM，并计算元素宽度
        // 此处使用clone方式而不使用scrollWidth方式,是因为目前发现scrollWidth在IE下获取到的值有问题，不可作为文本溢出的判断条件
        const eleStyles = getComputedStyle(element);
        const cloneEle = element.cloneNode(true);
        this.tiRenderer.setStyles(cloneEle, {
            // 涉及内容字体的相关样式处理
            fontSize: eleStyles.fontSize,
            fontWeight: eleStyles.fontWeight,
            fontFamily: eleStyles.fontFamily,
            padding: eleStyles.padding,
            paddingLeft: eleStyles.paddingLeft,
            paddingRight: eleStyles.paddingRight,
            border: eleStyles.border,
            boxSizing: eleStyles.boxSizing,
            height: eleStyles.height,
            // 涉及宽度布局的相关样式处理
            maxWidth: 'none',
            width: 'auto',
            overflow: 'visible',
            display: 'inline-block',
            visibility: 'hidden',
            whiteSpace: 'nowrap',
            position: 'absolute',
            left: '-9999px',
            top: '-9999px'
        });
        this.renderer.appendChild(document.body, cloneEle);
        // 使用getBoundingClientRect而不使用getComputedStyle,是因为getComputedStyle在
        // 各浏览器获取到的宽度不一致（IE下取到的是内容宽度，而在Chrome和FF下取到的是整个元素宽度）。
        // IE下计算精度高(小数点后15位)，多数中文和数字或英文混排的文本计算出来的 maxWidth 和 textWidth
        // 由于精度高而导致有微小差距，从而影响了 isOverflow 的判断结果，从实际测试得来结论：保留两位小数能够保证判断结果更准确些。
        const maxWidth = parseFloat(element.getBoundingClientRect().width
            .toFixed(2));
        const textWidth = parseFloat(cloneEle.getBoundingClientRect().width
            .toFixed(2));
        // 此处没有使用angular的Renderer2是因为Renderer2.removeChild必须有变化检测才能在dom上生效，
        // 此处考虑到性能不触发变化检测，所以选择使用原生的removeChild方法。
        document.body.removeChild(cloneEle);
        return textWidth > maxWidth;
    }
    generateTip(element, options) {
        // 文本超长时，显示tip提示：
        // tip显示位置元素设置：默认为element
        const config = options || {};
        let hostEleConfig = config.tipElement;
        if (typeof hostEleConfig === 'function') {
            hostEleConfig = hostEleConfig(element);
        }
        const tipHostEle = hostEleConfig || element;
        return this.tipService.create(tipHostEle, {
            hostEleX: config.tipHostEleX,
            position: config.tipPosition,
            maxWidth: config.tipMaxWidth,
            trigger: 'mouse',
            showFn: () => {
                // tipContent 为空 或者 未溢出情况下，不显示tip
                // tipPosition设置为none是去除Select默认超长tip，改由template内容自定义tip
                if (config.tipPosition === 'none' || config.tipContent === '' || !this.isOverflow(element)) {
                    return;
                }
                // tip内容设置：默认为元素中的文本内容
                let tipContent = config.tipContent;
                if (Util.isUndefined(tipContent)) { // content可能为""，因此此处判断undefined而不使用||
                    tipContent = element.textContent;
                }
                return { content: tipContent };
            }
        });
    }
}
TiOverflowService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TiOverflowService_Factory() { return new TiOverflowService(i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(i1.TiRenderer), i0.ɵɵinject(i2.TiTipService)); }, token: TiOverflowService, providedIn: i3.TiOverflowServiceModule });
TiOverflowService.decorators = [
    { type: Injectable, args: [{
                providedIn: TiOverflowServiceModule
            },] }
];
TiOverflowService.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: TiRenderer },
    { type: TiTipService }
];
//# sourceMappingURL=data:application/json;base64,