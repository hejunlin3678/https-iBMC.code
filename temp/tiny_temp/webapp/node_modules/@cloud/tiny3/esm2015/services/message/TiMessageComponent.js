import { Component, Input } from '@angular/core';
import { TiLocale } from '../../locale/TiLocaleModule';
import { Util } from '../../utils/Util';
/**
 * @ignore
 * message模板组件定义
 */
export class TiMessageComponent {
    constructor() {
        // 常量配置
        this.CONST_CONFIG = {
            validType: ['confirm', 'error', 'warn', 'prompt'],
            defaultType: 'confirm'
        };
        this.localeWords = TiLocale.getLocaleWords();
    }
    /**
     * 设置按钮属性（除primary和autofocus外）
     * @param options 外部配置属性
     * @param defaults 按钮text和click属性
     * @returns 合并后的属性
     */
    static setBtn(options, defaults) {
        const defaultOpts = Object.assign({ show: true, disabled: false }, defaults);
        if (typeof options === 'object') {
            return Object.assign(Object.assign({}, defaultOpts), options);
        }
        return defaultOpts;
    }
    ngOnInit() {
        this.setType();
        this.setTitle();
        this.setBtns();
        this.setContent();
    }
    setType() {
        const validType = this.CONST_CONFIG.validType;
        const defaultType = this.CONST_CONFIG.defaultType;
        if (validType.indexOf(this.type) === -1) {
            this.type = defaultType;
        }
    }
    setTitle() {
        if (typeof this.title === 'string') {
            return;
        }
        // 不同类型的message有默认title
        this.title = this.localeWords.tiMessage[this.type];
    }
    /**
     * 设置按钮属性：
     * 对按钮的设置支持Object类型
     * 为Object类型时，覆盖和扩展默认设置
     */
    setBtns() {
        this.okButton = TiMessageComponent.setBtn(this.okButton, {
            text: this.localeWords.tiMessage.ok,
            click: () => {
                this.close();
            }
        });
        this.cancelButton = TiMessageComponent.setBtn(this.cancelButton, {
            text: this.localeWords.tiMessage.cancel,
            click: () => {
                this.dismiss();
            }
        });
        this.setBtnUniqueState('autofocus');
        this.setBtnUniqueState('primary');
    }
    /**
     * 设置按钮属性，确保默认状态只在一个按钮生效
     * @param prop 按钮属性
     */
    setBtnUniqueState(prop) {
        if (Util.isUndefined(this.okButton[prop]) && Util.isUndefined(this.cancelButton[prop])) {
            this.okButton[prop] = true;
        }
    }
    setContent() {
        this.contentConfig = {
            content: this.content,
            context: this.context
        };
    }
    setId(suffix) {
        if (Util.isUndefined(this.id)) {
            return '';
        }
        return `${this.id}${suffix}`;
    }
}
TiMessageComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-message',
                template: "<ti-modal-header class=\"ti3-msg-header\">\r\n    <div class=\"ti3-msg-icon ti3-icon\"\r\n         [ngClass]=\"{ 'ti3-icon-check-circle': type === 'confirm',\r\n                    'ti3-icon-exclamation-circle ti3-msg-icon-error': type === 'error',\r\n                    'ti3-icon-warn ti3-msg-icon-warn': type ===  'warn',\r\n                    'ti3-icon-info-circle': type === 'prompt'}\">\r\n    </div>\r\n    <span *ngIf='title' class=\"ti3-msg-content-title\" [innerHtml]='title' [id]=\"setId('_title')\"></span>\r\n</ti-modal-header>\r\n<ti-modal-body>\r\n    <div class=\"ti3-msg-content-wrapper\" [tiTransclude]='contentConfig' [id]=\"setId('_body')\"></div>\r\n</ti-modal-body>\r\n<ti-modal-footer>\r\n    <button type=\"button\" tiButton\r\n            [color]=\"okButton.primary ? 'danger' : ''\"\r\n            [autofocus]=\"okButton.autofocus\"\r\n            *ngIf=\"okButton.show\"\r\n            [disabled]=\"okButton.disabled\"\r\n            (click)=\"okButton.click()\"\r\n            [id]='setId(\"_ok_btn\")'>{{okButton.text}}</button><!--\r\n    \u9700\u8981\u5C4F\u853D\u6362\u884C\u5BF9\u6309\u94AE\u95F4\u8DDD\u7684\u5F71\u54CD--><button type=\"button\" tiButton\r\n            [color]=\"cancelButton.primary ? 'danger' : ''\"\r\n            *ngIf=\"cancelButton.show\"\r\n            [autofocus]=\"cancelButton.autofocus\"\r\n            [disabled]=\"cancelButton.disabled\"\r\n            (click)=\"cancelButton.click()\"\r\n            [id]='setId(\"_cancel_btn\")'>{{cancelButton.text}}</button>\r\n</ti-modal-footer>",
                styles: ["::ng-deep :root{--ti-message-icon-margin-right:var(--ti-common-space-2x);--ti-message-icon-size:24px}ti-modal-header.ti3-msg-header{padding-bottom:var(--ti-common-space-3x)}.ti3-msg-icon{float:left;font-size:var(--ti-message-icon-size);line-height:normal;margin-right:var(--ti-message-icon-margin-right)}.ti3-msg-icon.ti3-icon-check-circle{color:var(--ti-message-prompt-icon-color)}.ti3-msg-icon.ti3-msg-icon-warn{color:var(--ti-message-warn-icon-color)}.ti3-msg-icon.ti3-icon-info-circle{color:var(--ti-message-confirm-icon-color)}.ti3-msg-icon.ti3-msg-icon-error{color:var(--ti-message-error-icon-color)}.ti3-msg-body{overflow:auto;padding:0 var(--ti-common-space-8x);position:relative}.ti3-msg-content-wrapper{color:var(--ti-common-color-text-secondary);font-size:var(--ti-common-font-size-base);line-height:var(--ti-common-line-height-number);overflow:inherit;word-wrap:break-word}.ti3-msg-content-title{color:var(--ti-common-color-text-primary);display:inline-block;font-size:var(--ti-message-content-title-font-size);font-weight:700;line-height:26px;width:calc(100% - var(--ti-message-icon-size) - var(--ti-message-icon-margin-right))}"]
            },] }
];
TiMessageComponent.propDecorators = {
    id: [{ type: Input }],
    title: [{ type: Input }],
    type: [{ type: Input }],
    content: [{ type: Input }],
    context: [{ type: Input }],
    okButton: [{ type: Input }],
    cancelButton: [{ type: Input }],
    close: [{ type: Input }],
    dismiss: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,