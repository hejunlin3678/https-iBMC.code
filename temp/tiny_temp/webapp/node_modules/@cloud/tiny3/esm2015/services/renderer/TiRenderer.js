import { Injectable, RendererFactory2 } from '@angular/core';
import { TiRendererModule } from './TiRendererModule';
import * as i0 from "@angular/core";
import * as i1 from "./TiRendererModule";
/**
 * @ignore
 */
export class TiRenderer {
    constructor(rendererFactory) {
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    /**
     * @description: 将节点插入某节点元素之后
     * @param: sourceEle 被插入节点
     * @param: targetEle 节点插入位置
     */
    insertAfter(sourceEle, targetEle) {
        const parent = targetEle.parentNode;
        // 如果最后的节点是目标元素,则直接添加
        if (parent.lastChild === targetEle) {
            this.renderer.appendChild(parent, sourceEle);
        }
        else { // 如果不是,则插在目标元素的下一个兄弟节点之前
            this.renderer.insertBefore(parent, sourceEle, targetEle.nextSibling);
        }
    }
    /**
     * @description: 判读一个元素上是否存在某个样式类名
     * @param: ele 被判断的元素
     * @param: className 样式类名
     */
    hasClass(element, className) {
        const classList = element.classList;
        return classList.contains(className);
    }
    /**
     * @description: 给指定元素设置属性
     * @param: element 被设置的元素
     * @param: attr Object 属性对象
     */
    setAttributes(element, attr) {
        for (const key in attr) {
            if (attr.hasOwnProperty(key)) {
                this.renderer.setAttribute(element, key, String(attr[key]));
            }
        }
    }
    /**
     * @description: 为元素添加多个样式
     * @param: ele 元素对象
     * @param: styles  Object 样式对象，如：{width: 100, height: 200}
     */
    setStyles(ele, styles) {
        for (const key in styles) {
            if (styles.hasOwnProperty(key)) {
                this.renderer.setStyle(ele, key, styles[key]);
            }
        }
    }
    /**
     * @description: 将节点插入某父容器，作为第一个元素
     * @param: parentEle 父节点元素
     * @param: sourceEle 需要插入的节点元素
     */
    prepend(parentEle, sourceEle) {
        if (!parentEle) {
            return;
        }
        this.renderer.insertBefore(parentEle, sourceEle, parentEle.firstElementChild);
    }
    /**
     * @description: 查找一个元素下有某个样式类的子元素
     * @param: element 被查找的元素
     * @param: className 子元素的样式类名
     */
    findChildrenByClassName(element, className) {
        let resultChildren = [];
        resultChildren = Array.from(element.children).filter((child) => {
            return this.hasClass(child, className);
        });
        return resultChildren;
    }
    /**
     * @description: 查找一个元素下有某个样式类的子元素
     * @param: element 被查找的元素
     * @param: className 子元素的样式类名
     */
    findChildrenByTagName(element, tagName) {
        let resultChildren = [];
        resultChildren = Array.from(element.children).filter((child) => {
            return child.tagName === tagName;
        });
        return resultChildren;
    }
}
TiRenderer.ɵprov = i0.ɵɵdefineInjectable({ factory: function TiRenderer_Factory() { return new TiRenderer(i0.ɵɵinject(i0.RendererFactory2)); }, token: TiRenderer, providedIn: i1.TiRendererModule });
TiRenderer.decorators = [
    { type: Injectable, args: [{
                providedIn: TiRendererModule
            },] }
];
TiRenderer.ctorParameters = () => [
    { type: RendererFactory2 }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGlSZW5kZXJlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL0BjbG91ZC90aW55My9zZXJ2aWNlcy9yZW5kZXJlci9UaVJlbmRlcmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBWSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7OztBQUV0RDs7R0FFRztBQUlILE1BQU0sT0FBTyxVQUFVO0lBRW5CLFlBQVksZUFBaUM7UUFDekMsSUFBSSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNJLFdBQVcsQ0FBQyxTQUFTLEVBQUUsU0FBUztRQUNuQyxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDO1FBQ3BDLHFCQUFxQjtRQUNyQixJQUFJLE1BQU0sQ0FBQyxTQUFTLEtBQUssU0FBUyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztTQUNoRDthQUFNLEVBQUMseUJBQXlCO1lBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3hFO0lBQ0wsQ0FBQztJQUNEOzs7O09BSUc7SUFDSSxRQUFRLENBQUMsT0FBTyxFQUFFLFNBQVM7UUFDaEMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUNwQyxPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUNEOzs7O09BSUc7SUFDSSxhQUFhLENBQUMsT0FBTyxFQUFFLElBQVk7UUFDdEMsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7WUFDcEIsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQy9EO1NBQ0o7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLFNBQVMsQ0FBQyxHQUFHLEVBQUUsTUFBTTtRQUN4QixLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRTtZQUN0QixJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDakQ7U0FDSjtJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksT0FBTyxDQUFDLFNBQVMsRUFBRSxTQUFTO1FBQy9CLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDWixPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksdUJBQXVCLENBQUMsT0FBTyxFQUFFLFNBQVM7UUFDN0MsSUFBSSxjQUFjLEdBQUcsRUFBRSxDQUFDO1FBQ3hCLGNBQWMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUNoRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxjQUFjLENBQUM7SUFDMUIsQ0FBQztJQUNEOzs7O09BSUc7SUFDSSxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsT0FBZTtRQUNqRCxJQUFJLGNBQWMsR0FBRyxFQUFFLENBQUM7UUFDeEIsY0FBYyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQ2hFLE9BQU8sS0FBSyxDQUFDLE9BQU8sS0FBSyxPQUFPLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLGNBQWMsQ0FBQztJQUMxQixDQUFDOzs7O1lBOUZKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsZ0JBQWdCO2FBQzdCOzs7WUFSNEIsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSZW5kZXJlcjIsIEluamVjdGFibGUsIFJlbmRlcmVyRmFjdG9yeTJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUaVJlbmRlcmVyTW9kdWxlIH0gZnJvbSAnLi9UaVJlbmRlcmVyTW9kdWxlJztcclxuXHJcbi8qKlxyXG4gKiBAaWdub3JlXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiBUaVJlbmRlcmVyTW9kdWxlXHJcbiAgfSlcclxuZXhwb3J0IGNsYXNzIFRpUmVuZGVyZXIge1xyXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyO1xyXG4gICAgY29uc3RydWN0b3IocmVuZGVyZXJGYWN0b3J5OiBSZW5kZXJlckZhY3RvcnkyKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyRmFjdG9yeS5jcmVhdGVSZW5kZXJlcihudWxsLCBudWxsKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uOiDlsIboioLngrnmj5LlhaXmn5DoioLngrnlhYPntKDkuYvlkI5cclxuICAgICAqIEBwYXJhbTogc291cmNlRWxlIOiiq+aPkuWFpeiKgueCuVxyXG4gICAgICogQHBhcmFtOiB0YXJnZXRFbGUg6IqC54K55o+S5YWl5L2N572uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbnNlcnRBZnRlcihzb3VyY2VFbGUsIHRhcmdldEVsZSkge1xyXG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHRhcmdldEVsZS5wYXJlbnROb2RlO1xyXG4gICAgICAgIC8vIOWmguaenOacgOWQjueahOiKgueCueaYr+ebruagh+WFg+e0oCzliJnnm7TmjqXmt7vliqBcclxuICAgICAgICBpZiAocGFyZW50Lmxhc3RDaGlsZCA9PT0gdGFyZ2V0RWxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQocGFyZW50LCBzb3VyY2VFbGUpO1xyXG4gICAgICAgIH0gZWxzZSB7Ly8g5aaC5p6c5LiN5pivLOWImeaPkuWcqOebruagh+WFg+e0oOeahOS4i+S4gOS4quWFhOW8n+iKgueCueS5i+WJjVxyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmluc2VydEJlZm9yZShwYXJlbnQsIHNvdXJjZUVsZSwgdGFyZ2V0RWxlLm5leHRTaWJsaW5nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbjog5Yik6K+75LiA5Liq5YWD57Sg5LiK5piv5ZCm5a2Y5Zyo5p+Q5Liq5qC35byP57G75ZCNXHJcbiAgICAgKiBAcGFyYW06IGVsZSDooqvliKTmlq3nmoTlhYPntKBcclxuICAgICAqIEBwYXJhbTogY2xhc3NOYW1lIOagt+W8j+exu+WQjVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTogYm9vbGVhbiB7XHJcbiAgICAgIGNvbnN0IGNsYXNzTGlzdCA9IGVsZW1lbnQuY2xhc3NMaXN0O1xyXG4gICAgICByZXR1cm4gY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbjog57uZ5oyH5a6a5YWD57Sg6K6+572u5bGe5oCnXHJcbiAgICAgKiBAcGFyYW06IGVsZW1lbnQg6KKr6K6+572u55qE5YWD57SgXHJcbiAgICAgKiBAcGFyYW06IGF0dHIgT2JqZWN0IOWxnuaAp+WvueixoVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyOiBPYmplY3QpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyKSB7XHJcbiAgICAgICAgICAgIGlmIChhdHRyLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsZW1lbnQsIGtleSwgU3RyaW5nKGF0dHJba2V5XSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uOiDkuLrlhYPntKDmt7vliqDlpJrkuKrmoLflvI9cclxuICAgICAqIEBwYXJhbTogZWxlIOWFg+e0oOWvueixoVxyXG4gICAgICogQHBhcmFtOiBzdHlsZXMgIE9iamVjdCDmoLflvI/lr7nosaHvvIzlpoLvvJp7d2lkdGg6IDEwMCwgaGVpZ2h0OiAyMDB9XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXRTdHlsZXMoZWxlLCBzdHlsZXMpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzdHlsZXMpIHtcclxuICAgICAgICAgICAgaWYgKHN0eWxlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKGVsZSwga2V5LCBzdHlsZXNba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb246IOWwhuiKgueCueaPkuWFpeafkOeItuWuueWZqO+8jOS9nOS4uuesrOS4gOS4quWFg+e0oFxyXG4gICAgICogQHBhcmFtOiBwYXJlbnRFbGUg54i26IqC54K55YWD57SgXHJcbiAgICAgKiBAcGFyYW06IHNvdXJjZUVsZSDpnIDopoHmj5LlhaXnmoToioLngrnlhYPntKBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHByZXBlbmQocGFyZW50RWxlLCBzb3VyY2VFbGUpIHtcclxuICAgICAgICBpZiAoIXBhcmVudEVsZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuaW5zZXJ0QmVmb3JlKHBhcmVudEVsZSwgc291cmNlRWxlLCBwYXJlbnRFbGUuZmlyc3RFbGVtZW50Q2hpbGQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uOiDmn6Xmib7kuIDkuKrlhYPntKDkuIvmnInmn5DkuKrmoLflvI/nsbvnmoTlrZDlhYPntKBcclxuICAgICAqIEBwYXJhbTogZWxlbWVudCDooqvmn6Xmib7nmoTlhYPntKBcclxuICAgICAqIEBwYXJhbTogY2xhc3NOYW1lIOWtkOWFg+e0oOeahOagt+W8j+exu+WQjVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZmluZENoaWxkcmVuQnlDbGFzc05hbWUoZWxlbWVudCwgY2xhc3NOYW1lKTogQXJyYXk8YW55PiB7XHJcbiAgICAgICAgbGV0IHJlc3VsdENoaWxkcmVuID0gW107XHJcbiAgICAgICAgcmVzdWx0Q2hpbGRyZW4gPSBBcnJheS5mcm9tKGVsZW1lbnQuY2hpbGRyZW4pLmZpbHRlcigoY2hpbGQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYXNDbGFzcyhjaGlsZCwgY2xhc3NOYW1lKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdENoaWxkcmVuO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb246IOafpeaJvuS4gOS4quWFg+e0oOS4i+acieafkOS4quagt+W8j+exu+eahOWtkOWFg+e0oFxyXG4gICAgICogQHBhcmFtOiBlbGVtZW50IOiiq+afpeaJvueahOWFg+e0oFxyXG4gICAgICogQHBhcmFtOiBjbGFzc05hbWUg5a2Q5YWD57Sg55qE5qC35byP57G75ZCNXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBmaW5kQ2hpbGRyZW5CeVRhZ05hbWUoZWxlbWVudCwgdGFnTmFtZTogc3RyaW5nKTogQXJyYXk8YW55PiB7XHJcbiAgICAgICAgbGV0IHJlc3VsdENoaWxkcmVuID0gW107XHJcbiAgICAgICAgcmVzdWx0Q2hpbGRyZW4gPSBBcnJheS5mcm9tKGVsZW1lbnQuY2hpbGRyZW4pLmZpbHRlcigoY2hpbGQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gY2hpbGQudGFnTmFtZSA9PT0gdGFnTmFtZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdENoaWxkcmVuO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==