import { TiUploadUtil } from './TiUploadUtil';
import { Util } from '../../utils/Util';
// 单个文件对象服务封装，包括文件基本信息统一、文件状态信息、文件基本方法封装
/**
 * @ignore
 */
export class TiFileItemUtil {
    /**
     * 创建文件对象，该返回值用作后续文件的上传和文件操作，可作为文件回调参数传递
     * fileObject 文件信息对象
     * fileOrInpt 原始文件对象 H5下为file对象，非H5下为fileInput
     * config 文件上传配置信息
     * uploader 上传文件对应的文件实例
     * return 文件对象
     */
    static createFileItem(tifileObject, fileOrInput, config, uploader) {
        /* tslint:disable:no-invalid-this */
        /* tslint:disable:no-null-keyword */
        function upload() {
            TiUploadUtil.uploadItems([this]);
        }
        function cancel() {
            TiUploadUtil.cancelItems([this]);
        }
        function remove(isRemove) {
            if (isRemove) {
                // 触发外部定义的删除前的事件
                TiUploadUtil.onBeforeRemove([this]);
                return;
            }
            TiUploadUtil.removeItems([this]);
        }
        function destroy() {
            if (this._input) { // 删除页面残留dom
                this._input.remove();
            }
            if (this._form) {
                this._form.remove();
            }
            this._input = null; // 清除引用
            this._form = null;
        }
        // 上传文件对象赋值
        let _file = null;
        let _input = null;
        if (!(fileOrInput instanceof Element)) {
            _file = fileOrInput;
        }
        else {
            _input = fileOrInput;
        }
        return {
            url: config.url || '/',
            file: tifileObject,
            alias: config.alias || 'tiFile',
            _file,
            _input,
            formData: config.formData || {},
            formDataFirst: config.formDataFirst || false,
            headers: config.headers || {},
            method: config.method || 'post',
            batchSend: config.batchSend || false,
            uploader,
            upload,
            cancel,
            remove,
            destroy,
            isReady: false,
            isUploading: false,
            isUploaded: false,
            isCancel: false,
            isSuccess: false,
            isError: false,
            progress: 0,
            isHover: false,
            isOverflow: false,
            _xhr: {},
            index: 0,
            _form: undefined
        };
    }
    /**
     * 创建文件对象，统一H5和非H5情况下的文件信息
     * file {FileList|FileInput} 原始文件对象 H5为file对象形式，非H5为fileinput对象
     * return 类文件对象
     */
    static createFileObject(fileThis) {
        if (TiUploadUtil.isHTML5) {
            const fileName = fileThis.name;
            return {
                lastModifiedDate: fileThis.lastModifiedDate,
                size: fileThis.size,
                sizeWithUnit: TiFileItemUtil.formatSize(fileThis.size),
                name: fileThis.name,
                type: fileName.slice(fileName.lastIndexOf('.') + 1)
                    .toLowerCase(),
                _file: fileThis,
                _input: null // 文件input对象，只在IE9 form表单提交方式下有效
            };
        }
        const path = fileThis.value;
        // 非H5情况下,浏览器不打开ActiveX,获取不到文件大小,该种情况下文件大小为null
        const fileSize = Util.isUndefined(fileThis.size) ? null : fileThis.size;
        return {
            lastModifiedDate: null,
            size: fileSize,
            sizeWithUnit: isNaN(fileSize) ? '' : this.formatSize(fileSize / 1024),
            name: path.slice(path.lastIndexOf('/') + path.lastIndexOf('\\') + 2),
            type: path.slice(path.lastIndexOf('.') + 1)
                .toLowerCase(),
            _file: null,
            _input: fileThis // 文件input对象，只在IE9 form表单提交方式下有效
        };
    }
    /**
     * 将文件大小显示标准化：根据文件大小做不同单位的显示，文件大小保留两位小数
     * 文件大小
     * 带单位文件大小
     */
    static formatSize(size) {
        let sizeWithUnit;
        const kbSize = size / 1024;
        /* tslint:disable:prefer-conditional-expression */
        if (kbSize < 1) {
            sizeWithUnit = size.toFixed(2) + 'B';
        }
        else if (kbSize < 1024) {
            sizeWithUnit = kbSize.toFixed(2) + 'KB';
        }
        else if (kbSize < 1024 * 1024) {
            sizeWithUnit = (kbSize / 1024).toFixed(2) + 'MB';
        }
        else {
            sizeWithUnit = (kbSize / 1024 / 1024).toFixed(2) + 'GB';
        }
        return sizeWithUnit;
    }
}
//# sourceMappingURL=data:application/json;base64,