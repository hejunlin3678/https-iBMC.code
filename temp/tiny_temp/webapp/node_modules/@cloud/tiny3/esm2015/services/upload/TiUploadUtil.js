import { Util } from '../../utils/Util';
// 上传文件服务，提供上传过程中的通用方法
/**
 * @ignore
 */
export class TiUploadUtil {
    /**
     * 上传多个文件
     * 上传一个或多个文件item对象
     * 无
     */
    static uploadItems(items) {
        // 异常处理 1.入参不合法,2.正在上传的文件不允许重复上传
        for (let i = items.length - 1; i >= 0; i--) {
            if (!TiUploadUtil.isValidFileItem(items[i]) || items[i].isUploading) {
                items.splice(i, 1);
            }
        }
        TiUploadUtil.onBeforeSend(items); // 文件上传前处理
        for (let j = items.length - 1; j >= 0; j--) {
            if (items[j].isCancel) { // 已取消上传的文件不再上传(此处主要是对beforeSend中取消上传的文件进行处理)
                items.splice(j, 1);
            }
        }
        if (items.length > 0) {
            TiUploadUtil.isHTML5 ? TiUploadUtil.uploadXhr(items) : TiUploadUtil.uploadForm(items);
        }
    }
    /**
     * 取消队列中多个正在上传中的文件(只在上传时可取消)
     * 文件item对象数组
     * 无
     */
    static cancelItems(items) {
        for (let i = items.length - 1; i >= 0; i--) {
            if (!TiUploadUtil.isValidFileItem(items[i])) { // 异常处理:入参不合法情况下，不做处理
                items.splice(i, 1);
            }
            else {
                items[i].isCancel = true;
            }
        }
        if (items[0].isUploading) { // 正在上传过程中，取消上传，上传事件中，会处理响应赋值及事件触发
            TiUploadUtil.isHTML5 ? items[0]._xhr.abort() : items[0]._form.abort();
        }
        else { // 未在上传过程中情况下，依然触发cancel和complete事件
            const response = undefined;
            const status = 0;
            TiUploadUtil.onCancel(items, response, status);
            TiUploadUtil.onComplete(items, response, status);
        }
    }
    /**
     * 删除队列中单个或多个上传文件
     * 文件item对象数组
     */
    static removeItems(items) {
        const itemsArr = Object.assign({}, items);
        for (let i = items.length - 1; i >= 0; i--) {
            if (!TiUploadUtil.isValidFileItem(items[i])) {
                items.splice(i, 1);
            }
        }
        // 阻止文件上传进程
        if (items[0].isUploading) {
            TiUploadUtil.cancelItems(items);
        }
        // 删除队列中的文件对象及文件对象相关引用
        for (let j = items.length - 1; j >= 0; j--) {
            items[j].uploader.queue.splice(TiUploadUtil.getItemIndex(items[j]), 1);
            itemsArr[j].destroy();
        }
        // 触发外部定义的删除事件
        TiUploadUtil.onRemove(itemsArr);
    }
    /**
     * 触发onBeforeRemoveItems事件
     * 文件item对象数组
     */
    static onBeforeRemove(items) {
        TiUploadUtil.handleEvent('BeforeRemove', items);
    }
    /**
     * 获取文件对象 index值，获取该值用于后续判断item有效性
     * 上传文件item对象
     */
    static getItemIndex(item) {
        if (item && item.uploader) {
            return item.uploader.queue.findIndex((itemInQueue) => {
                return itemInQueue.index === item.index;
            });
        }
        return -1;
    }
    /**
     * 判断文件是否为有效文件
     * 上传文件item对象
     */
    static isValidFileItem(item) {
        return (TiUploadUtil.getItemIndex(item) !== -1);
    }
    // 生成上传数据
    static generateUploadData(items) {
        // 上传数据组装
        const uploadDataObj = new FormData();
        if (items[0].formDataFirst) { // formData先于文件信息情况下，先添加formData
            addFormData();
            addFile();
        }
        else { // formData后于文件信息情况下，后添加formData
            addFile();
            addFormData();
        }
        function addFile() {
            items.forEach((item) => {
                uploadDataObj.append(item.alias, item._file, item.file.name); // 添加上传文件
            });
        }
        function addFormData() {
            // 添加单个文件的formData对象,加入到上传对象中
            for (const key in items[0].formData) {
                if (items[0].formData.hasOwnProperty(key)) {
                    uploadDataObj.append(key, items[0].formData[key]);
                }
            }
        }
        return uploadDataObj;
    }
    static setXhr(xhr, items) {
        // 文件上传信息配置（使用XHR，支持跨域请求）
        xhr.upload.onprogress = (event) => {
            const lengthComputable = event.lengthComputable;
            const loaded = event.loaded;
            const total = event.total;
            const progress = Math.round(lengthComputable ? loaded * 100 / total : 0); // 读取当前进度信息
            TiUploadUtil.onProgress(items, progress);
        };
        xhr.onload = () => {
            const response = xhr.response;
            const status = xhr.status;
            if (TiUploadUtil.isSuccessCode(status)) {
                TiUploadUtil.onSuccess(items, response, status);
            }
            else {
                TiUploadUtil.onError(items, response, status);
            }
            TiUploadUtil.onComplete(items, response, status);
        };
        xhr.onerror = () => {
            const response = xhr.response;
            const status = xhr.status;
            TiUploadUtil.onError(items, response, status);
            TiUploadUtil.onComplete(items, response, status);
        };
        xhr.onabort = () => {
            const response = xhr.response;
            const status = xhr.status;
            TiUploadUtil.onCancel(items, response, status);
            TiUploadUtil.onComplete(items, response, status);
        };
        // 设置单个item的_xhr,该对象用于操作单个item的上传取消等处理
        items.forEach((item) => {
            item._xhr = xhr;
        });
    }
    static setheaders(xhr, items) {
        // 设置请求头
        for (const key in items[0].headers) {
            if (items[0].headers.hasOwnProperty(key)) {
                xhr.setRequestHeader(key, items[0].headers[key]);
            }
        }
    }
    /**
     * xhr方式上传文件
     * 上传一个或多个文件item对象，上传单个文件的情况下
     */
    static uploadXhr(items) {
        const uploadDataObj = TiUploadUtil.generateUploadData(items); // 组装上传对象
        // 生成并设置xhr
        const xhr = new XMLHttpRequest();
        TiUploadUtil.setXhr(xhr, items);
        // 开始上传
        xhr.open(items[0].method, items[0].url, true);
        TiUploadUtil.setheaders(xhr, items);
        xhr.send(uploadDataObj);
        // 设置对象的上传状态
        items.forEach((item) => {
            item.isUploading = true;
        });
    }
    static uploadForm(items) {
        const form = document.createElement('form');
        form.style.display = 'none';
        for (const item of items) {
            // 清除原有form表单
            if (item._form) {
                item._form.parentNode.replaceChild(items[0]._input, items[0]._form); // 清除先前对应的form表单对象，确保上传文件表单元素外层不被form包裹
            }
            item._form = form; // 保存当前form
        }
        items[0]._input.parentNode.insertBefore(form, items[0]._input); // form插入inputSubmit之前，使其在页面显示
        if (items[0].formDataFirst) { // formData先于文件信息情况下，先添加formData
            addFormData();
            addFile();
        }
        else { // formData后于文件信息情况下，后添加formData
            addFile();
            addFormData();
        }
        // 文件信息组装
        function addFile() {
            for (const item of items) {
                const inputSubmit = item._input;
                inputSubmit.setAttribute('name', item.alias);
                form.appendChild(inputSubmit); // 在form中添加上传文件元素
            }
        }
        // formData信息组装
        function addFormData() {
            for (const key in items[0].formData) {
                if (items[0].formData.hasOwnProperty(key)) {
                    const formDataDomItem = document.createElement('input');
                    formDataDomItem.setAttribute('type', 'hidden');
                    formDataDomItem.setAttribute('name', key);
                    formDataDomItem.value = items[0].formData[key];
                    form.appendChild(formDataDomItem);
                }
            }
        }
        // 生成iframe元素，并将form表单和iframe元素结合
        const iframe = document.createElement('iframe');
        const name = Util.getUniqueId('tiFileIframe'); // 确保iframe唯一性，保证各文件上传最终能独立返回到相应的iframe
        iframe.setAttribute('name', name);
        form.setAttribute('action', items[0].url);
        form.setAttribute('method', items[0].method);
        form.setAttribute('target', name);
        form.setAttribute('enctype', 'multipart/form-data');
        form.appendChild(iframe);
        // 表单提交
        form.submit();
        // 设置对象的上传状态
        items.forEach((item) => {
            item.isUploading = true;
        });
        // 设置假进度
        let newProgress = 0;
        const progressInterval = setInterval(() => {
            if (newProgress !== 98) {
                newProgress += 2;
                this.onProgress(items, newProgress);
            }
        }, 10);
        // 表单完成事件
        const loadEvent = () => {
            let response = '';
            let status = 200;
            clearInterval(progressInterval);
            this.onProgress(items, 100);
            try {
                response = iframe.contentDocument.body.innerHTML; // 后台正常返回情况获取返回结果
                this.onSuccess(items, response, status);
            }
            catch (e) {
                response = e;
                status = 520; // 为方便使用者处理，失败情况下，统一返回520状态码 未知错误
                this.onError(items, response, status);
            }
            this.onComplete(items, response, status);
        };
        iframe.addEventListener('load', loadEvent);
        // 表单取消方法定义
        form.abort = () => {
            clearInterval(progressInterval);
            iframe.removeEventListener('load', loadEvent); // 去除load事件
            // 表单元素还原
            for (const node of form.childNodes) {
                if (node.tagName !== 'IFRAME') {
                    if (form.parentNode.lastChild === form) {
                        form.parentNode.appendChild(node);
                    }
                    else {
                        form.parentNode.insertBefore(node, form.nextSibling);
                    }
                }
            }
            form.remove();
            items.forEach((item) => {
                /* tslint:disable:no-null-keyword */
                item._form = null;
            });
            const status = 0;
            const response = undefined;
            this.onCancel(items, response, status);
            this.onComplete(items, response, status);
        };
    }
    static isSuccessCode(status) {
        // 和ajax请求一致，304 代表客户端已经执行了GET，但文件未变化
        return status >= 200 && status < 300 || status === 304;
    }
    /**
     * 上传前处理
     * 上传一个或多个文件item对象
     */
    static onBeforeSend(items) {
        // 设置当前上传文件的状态信息
        for (const item of items) {
            item.isReady = true;
            item.isUploading = false;
            item.isUploaded = false;
            item.isSuccess = false;
            item.isError = false;
            item.isCancel = false;
            item.progress = 0;
        }
        TiUploadUtil.handleEvent('BeforeSend', items);
    }
    static handleEvent(type, items, params = []) {
        const onEventTypeItems = items[0].uploader.config && items[0].uploader.config[`on${type}Items`];
        if (onEventTypeItems && (typeof onEventTypeItems === 'function')) {
            // eslint-disable-next-line no-useless-call
            onEventTypeItems.apply(null, [items, ...params]);
        }
    }
    static onProgress(items, progress) {
        TiUploadUtil.handleEvent('Progress', items, [progress]);
        for (const item of items) {
            item.progress = progress; // 设置单个文件的进度信息
        }
    }
    static onSuccess(items, response, status) {
        // 设置当前上传文件的状态信息
        for (const item of items) {
            item.isReady = false;
            item.isUploading = false;
            item.isUploaded = true;
            item.isSuccess = true;
            item.isError = false;
            item.isCancel = false;
            item.progress = 100;
        }
        TiUploadUtil.handleEvent('Success', items, [response, status]);
    }
    static onError(items, response, status) {
        // 设置当前上传文件的状态信息
        for (const item of items) {
            // 设置当前上传文件的状态信息
            item.isReady = false;
            item.isUploading = false;
            item.isUploaded = true;
            item.isSuccess = false;
            item.isError = true;
            item.isCancel = false;
            item.progress = 0;
        }
        TiUploadUtil.handleEvent('Error', items, [response, status]);
    }
    static onComplete(items, response, status) {
        // 置位状态
        items.forEach((item) => {
            item.isUploading = false;
        });
        // 上传下一个文件，对于同一序列的上传文件来说，其isReady状态均已被标识，因此此处可以通过该方法进行筛选
        const readyItemsArr = items[0].uploader.getReadyItems();
        if (readyItemsArr && (readyItemsArr.length !== 0)) {
            this.uploadItems([readyItemsArr[0]]);
        }
        else {
            // 本次上传序列中，所有文件上传完成后回调，因为文件上传是串行上传：
            // 在一个文件上传完成后才执行下一个文件的上传操作，所以此处可以确保同一序列最终的上传完成
            TiUploadUtil.handleEvent('CompleteAll', items, [response, status]);
        }
        TiUploadUtil.handleEvent('Complete', items, [response, status]);
    }
    static onCancel(items, response, status) {
        for (const item of items) {
            item.isReady = false;
            item.isUploading = false;
            item.isUploaded = false;
            item.isSuccess = false;
            item.isError = false;
            item.isCancel = true;
            item.progress = 0;
        }
        TiUploadUtil.handleEvent('Cancel', items, [response, status]);
    }
    static onRemove(items) {
        TiUploadUtil.handleEvent('Remove', items);
    }
}
// 已支持SSR
TiUploadUtil.isHTML5 = (typeof window !== 'undefined') && (window.File && window.FormData);
//# sourceMappingURL=data:application/json;base64,