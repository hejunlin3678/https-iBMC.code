import { Injectable } from '@angular/core';
import { Util } from '../../utils/Util';
import { TiFileItemUtil } from './TiFileItemUtil';
import { TiUploadUtil } from './TiUploadUtil';
import { TiUploadServiceModule } from './TiUploadServiceModule';
import * as i0 from "@angular/core";
import * as i1 from "./TiUploadServiceModule";
// 文件上传服务封装，一个实例对应一个上传文件队列
// @dynamic
/**
 * 文件上传服务，通过该服务生成上传文件实例对象，一个实例对应一个上传文件队列
 *
 * 该服务适用于自定义文件上传实例方式，使用该服务时需要引入模块TiUploadServiceModule，与[tiFileSelect]{@link ../directives/TiFileSelectDirective.html}配合使用
 *
 * 除自定义使用方式外，Tiny还提供了两种已设计的上传样式供业务使用，具体见[TiUploadComponent]{@link ../components/TiUploadComponent.html}
 *
 * <example-url>../tiny3demo/#/upload/upload-all</example-url>
 */
export class TiUploadService {
    /**
     * 对单选进行过滤条件重置，单选去除maxCount条件，函数返回过滤后的生效规则
     */
    static initFilter(rules, isSingleFile) {
        if (isSingleFile) { // 单文件情况下去除maxCount设置
            return rules.filter((rule) => {
                return rule.name !== 'maxCount';
            });
        }
        // 多文件情况下 filter不做处理
        return rules || [];
    }
    /**
     * 根据用户配置的maxCount过滤条件，判断文件是否为单文件上传
     * 用户配置的过滤条件
     * 是否为单文件上传
     */
    static isSingleFileFn(filters) {
        if (!filters || !filters.length) { // 不设置filter情况下，为多文件上传
            return false;
        }
        const maxCountIndex = filters.findIndex((item) => {
            return item.name === 'maxCount';
        });
        // 存在maxCount规则，并且其参数不为1的情况下，为多文件上传
        if (maxCountIndex === -1 || (filters[maxCountIndex].params && filters[maxCountIndex].params[0] !== 1)) {
            return false;
        }
        return true;
    }
    /**
     * 批量上传文件
     *   {Array} 上传文件items数组
     * 返回 无
     */
    static uploadItems(items) {
        if (!items.length) {
            return;
        }
        // 设置上传文件标志位,文件逐个上传情况下,会根据该标志位决定下个上传文件
        items.forEach((item) => {
            item.isReady = true;
        });
        // 开始上传文件
        if (items[0].batchSend) {
            TiUploadUtil.uploadItems(items);
        }
        else { // 上传单个文件，在upload方法中会依据isReady的设置进行其他文件的串行上传
            TiUploadUtil.uploadItems([items[0]]);
        }
    }
    /**
     * 批量取消上传文件
     * 返回 无
     */
    static cancelItems(items) {
        if (!items.length) {
            return;
        }
        if (items[0].batchSend) { // 一个链接上传情况下，一次取消多个items，仅触发一次事件
            TiUploadUtil.cancelItems(items);
        }
        else { // 逐个链接上传情况下，一次仅取消一个items，触发多次事件
            items.forEach((item) => {
                item.cancel();
            });
        }
    }
    /**
     * 批量删除文件,只涉及上传队列的文件删除，具体的后台删除还需要产品向后台发送文件删除请求实现
     *   {Array} 上传文件items数组
     * 返回 无
     */
    static removeItems(items) {
        if (!items.length) {
            return;
        }
        if (items[0].batchSend) { // 一个链接上传情况下，一次删除多个items，仅触发一次事件
            TiUploadUtil.removeItems(items);
        }
        else { // 逐个链接上传情况下，一次仅删除一个items，触发多次事件
            items.forEach((item) => {
                item.remove();
            });
        }
    }
    /**
     * 单个文件的有效性校验
     * 返回 {Array} 由不符合的规则name组成的数组
     */
    static getInvalidRules(tifileObject, filtersRules, fileQueue) {
        // 无效判断
        const filterLen = filtersRules.length;
        if (filterLen === 0) {
            return [];
        }
        // 逐条规则校验，并返回结果数组
        const invalidRetArr = []; // 校验返回结果数组，该数组中返回的是不符合的校验规则name
        for (let i = 0; i < filterLen; i++) {
            const filterConfig = filtersRules[i]; // 单条校验规则配置
            // 根据配置寻找规则函数（规则分为默认规则 和 自定义规则）
            const filterName = filterConfig.name; // 配置规则名称
            let ruleFn; // 规则函数
            if (typeof filterConfig.fn === 'function') {
                ruleFn = filterConfig.fn;
            }
            else if (TiUploadService.filterRules[filterName]) { // 未定义fn的情况下，从默认规则中找
                ruleFn = TiUploadService.filterRules[filterName];
            }
            // 调用规则函数，判断文件有效性
            if ((typeof ruleFn === 'function') &&
                !ruleFn(tifileObject, filterConfig.params, fileQueue)) {
                invalidRetArr.push(filterName);
            }
        }
        return invalidRetArr;
    }
    /**
     * 获取未上传文件队列
     */
    static getNotUploadedItems(fileQueue) {
        return fileQueue.filter((item) => {
            return !item.isUploaded;
        });
    }
    /**
     * 获取待上传文件，该方法用于文件批量上传时获取上传文件队列
     * 返回 {Array} 返回待上传文件，且文件队列返回值是根据文件点选次序排列
     */
    static getReadyItems(fileQueue) {
        return fileQueue.filter((item) => {
            return item.isReady && !item.isUploading;
        })
            .sort((item1, item2) => {
            return item1.index - item2.index;
        });
    }
    /**
     * 获取上传失败文件，该方法用于文件批量上传时获取上传失败文件队列
     * 返回 {Array} 返回上传失败文件，且文件队列返回值是根据文件点选次序排列
     */
    static getErrorItems(fileQueue) {
        return fileQueue.filter((item) => {
            return item.isError;
        })
            .sort((item1, item2) => {
            return item1.index - item2.index;
        });
    }
    /**
     * 重新上传列表中所有先前上传错误文件
     * 返回 无
     */
    static reloadAllError(fileQueue) {
        TiUploadService.uploadItems(TiUploadService.getErrorItems(fileQueue));
    }
    /**
     * 重新上传列表中所有文件
     * 返回 无
     */
    static reloadAll(fileQueue) {
        TiUploadService.uploadItems(fileQueue);
    }
    /**
     * 上传列表中所有未上传过的文件
     * 返回 无
     */
    static uploadAll(fileQueue) {
        const items = this.getNotUploadedItems(fileQueue)
            .filter((item) => {
            return !item.isUploading;
        });
        TiUploadService.uploadItems(items);
    }
    /**
     * 判断是否有未上传的
     * 返回 boolean
     */
    static isUploadedAll(fileQueue) {
        const items = this.getNotUploadedItems(fileQueue)
            .filter((item) => {
            return !item.isUploading;
        });
        return items.length === 0;
    }
    /**
     * 删除所有队列中的文件
     */
    static removeAll(fileQueue) {
        while (fileQueue.length !== 0) {
            fileQueue[0].remove();
        }
    }
    /**
     * 取消所有队列中的文件(未上传和待上传文件)
     */
    static cancelAll(fileQueue) {
        const items = this.getNotUploadedItems(fileQueue);
        TiUploadService.cancelItems(items);
    }
    /**
     * 创建文件上传实例
     */
    create(config) {
        const isSingleFile = TiUploadService.isSingleFileFn(config.filters); // 文件是否为单文件设置
        const filters = TiUploadService.initFilter(config.filters, isSingleFile); // 文件校验过滤规则
        let uploader;
        const fileQueue = []; // 文件队列列表，一个实例对应一个文件列表
        let fileIndex = 0; // 文件次序定义，用作文件索引
        /**
         * 将选择的文件进行有效验证后加入到队列中,外部调用该方法时,认为该队列中的文件和当前uploader的配置项一致
         *   files {FileList|FileInput} 文件对象
         * 返回 {Array} 已添加文件数组
         */
        const addToQueue = (files) => {
            // 循环列表添加文件
            const addedItems = []; // 用于记录本次选择文件列表
            if (files && !Util.isUndefined(files.length)) { // H5方式
                for (let i = 0; i < files.length; i++) {
                    addItem(files[i], addedItems);
                }
            }
            else {
                addItem(files, addedItems);
            }
            return addedItems;
        };
        const addItem = (fileOrInput, addedItems) => {
            // 文件对象，该对象包含文件的基本信息，统一了浏览器的差异性，会在文件过滤失败回调中作为参数传递给外部
            const tifileObject = TiFileItemUtil.createFileObject(fileOrInput);
            // 校验单个文件的有效性，并根据校验结果进行文件操作
            const invalidArr = TiUploadService.getInvalidRules(tifileObject, filters, fileQueue); // 校验结果数组，数组中定义校验错误规则的name
            let isValid = !invalidArr.length; // 校验结果返回数组为空时有效
            // 单文件情况下，需要覆盖原有有效文件
            if (isSingleFile) {
                if (fileQueue[0]) {
                    fileQueue[0].remove(); // 删除先前队列中的文件
                }
                if (invalidArr.length === 0) {
                    isValid = true; // 置位校验结果值
                }
            }
            if (isValid) { // 校验成功情况下，将文件加入到上传队列中，并触发
                // 上传文件对象,该对象中包含文件及状态信息等,在回调中传递
                const fileItem = TiFileItemUtil.createFileItem(tifileObject, fileOrInput, config, uploader);
                addedItems.push(fileItem);
                fileQueue.push(fileItem);
                fileItem.index = ++fileIndex; // 文件序列数增加，确保整个文件队列中该值唯一
                if (typeof config.onAddItemSuccess === 'function') {
                    config.onAddItemSuccess(fileItem);
                }
            }
            else if (typeof config.onAddItemFailed === 'function') {
                config.onAddItemFailed(tifileObject, invalidArr);
            }
        };
        uploader = {
            queue: fileQueue,
            isSingleFile,
            config,
            _addToQueue: addToQueue,
            getNotUploadedItems() {
                return TiUploadService.getNotUploadedItems(fileQueue);
            },
            getReadyItems() {
                return TiUploadService.getReadyItems(fileQueue);
            },
            uploadAll() {
                TiUploadService.uploadAll(fileQueue);
            },
            isUploadedAll() {
                return TiUploadService.isUploadedAll(fileQueue);
            },
            removeAll() {
                TiUploadService.removeAll(fileQueue);
            },
            cancelAll() {
                TiUploadService.cancelAll(fileQueue);
            },
            reloadAll() {
                TiUploadService.reloadAll(fileQueue);
            },
            reloadAllError() {
                TiUploadService.reloadAllError(fileQueue);
            },
            uploadItems: TiUploadService.uploadItems,
            removeItems: TiUploadService.removeItems,
            cancelItems: TiUploadService.cancelItems // 取消队列中某几项文件
        };
        return uploader;
    }
}
// 文件校验规则定义
TiUploadService.filterRules = {
    maxSize: (fileObj, params) => {
        const size = fileObj.size;
        if (!Util.isNumber(size)) { // 文件大小获取不到情况下，忽略该条校验规则
            return true;
        }
        return !(size > params[0]);
    },
    minSize: (fileObj, params) => {
        const size = fileObj.size;
        if (!Util.isNumber(size)) { // 文件大小获取不到情况下，忽略该条校验规则
            return true;
        }
        return !(size < params[0]);
    },
    type: (fileObj, params) => {
        // param参数需使用文件扩展名分开，为了确保各浏览器的一致性，文件类型使用扩展名判断，如果产品需要在选择时限制，请在input上设置accept属性
        let isValidType = false;
        params[0].split(',')
            .forEach((type) => {
            if (fileObj.name.match(new RegExp(`.(${type.replace(/\./g, '\\.')})$`, 'i')) !== null) {
                isValidType = true;
            }
        });
        return isValidType;
    },
    maxCount: (fileObj, params, fileQueue) => {
        return !(fileQueue.length >= params[0]);
    }
};
TiUploadService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TiUploadService_Factory() { return new TiUploadService(); }, token: TiUploadService, providedIn: i1.TiUploadServiceModule });
TiUploadService.decorators = [
    { type: Injectable, args: [{
                providedIn: TiUploadServiceModule
            },] }
];
//# sourceMappingURL=data:application/json;base64,