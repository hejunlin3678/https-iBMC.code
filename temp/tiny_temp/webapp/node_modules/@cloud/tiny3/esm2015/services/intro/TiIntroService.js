import { Injectable, RendererFactory2, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { TiIntroServiceModule } from './TiIntroModule';
import { TiModalService } from '../modal/TiModalService';
import { TiTipService } from '../tip/TiTipService';
import { TiLog, TiKeymap, Util } from '../../utils/Util';
import { Position } from '../../utils/Position';
import { TiIntromodalComponent } from './TiIntromodalComponent';
import { TiIntrotipComponent } from './TiIntrotipComponent';
import * as i0 from "@angular/core";
import * as i1 from "../tip/TiTipService";
import * as i2 from "../modal/TiModalService";
import * as i3 from "@angular/common";
import * as i4 from "./TiIntroModule";
/**
 * 新手引导组件，适用于服务中内容（入口）新增和变动等指引提醒
 *
 * <p><span style="color: red">使用此组件时需要开发者在项目模块(建议在根模块)中引入BrowserAnimationsModule。</span>
 * 这是因为此组件中使用了 TiModalService，TiModalService需要BrowserAnimationsModule
 * （具体原因可以查看 [TiModalService]{@link ../injectables/TiModalService.html}），
 * 但是 BrowserAnimationsModule 不能在懒加载模块被重复引入，所以需要开发者来引入BrowserAnimationsModule，保证其引入一次。</p>
 *
 * <example-url>../tiny3demo/#/intro/intro-all</example-url>
 */
export class TiIntroService {
    constructor(tipService, modalService, rendererFactory, document) {
        this.tipService = tipService;
        this.modalService = modalService;
        this.document = document;
        // 可聚焦元素
        this.focusableElementsString = `a[href], area[href], input:not([disabled]):not([tabindex=\'-1\']),
    button:not([disabled]):not([tabindex=\'-1\']),select:not([disabled]):not([tabindex=\'-1\']),
    textarea:not([disabled]):not([tabindex=\'-1\']),
    iframe, object, embed, *[tabindex]:not([tabindex=\'-1\']), *[contenteditable=true]`;
        /**
         * intro的公共配置，不是默认配置，不能修改
         */
        this.commonConfig = {
            trigger: 'manual',
            theme: 'white',
            maxWidth: '400px'
        };
        /* tslint:disable:no-null-keyword */
        this.render = rendererFactory.createRenderer(null, null);
    }
    destroyBackdrop() {
        const canvas = this.document.body.querySelector('#ti3-intro-backdrop');
        if (canvas) {
            // canvas.remove() IE报错；canvas.removeNode() Chrome报错；可以使用removeChild方法
            canvas.parentNode.removeChild(canvas);
        }
    }
    static clearCircle(x, y, radius, stepClear, ctx) {
        const calcWidth = radius - stepClear;
        const calcHeight = Math.sqrt(radius * radius - calcWidth * calcWidth);
        const posX = x - calcWidth;
        const posY = y - calcHeight;
        const widthX = calcWidth * 2;
        const heightY = calcHeight * 2;
        if (stepClear < radius) {
            ctx.clearRect(posX, posY, widthX, heightY);
            const newStepClear = stepClear + 1;
            TiIntroService.clearCircle(x, y, radius, newStepClear, ctx);
        }
    }
    static scrollToViewport(element) {
        // 修复SSR错误：ERROR TypeError: element.getBoundingClientRect is not a function
        if (typeof element.getBoundingClientRect !== 'function') {
            return;
        }
        const layout = element.getBoundingClientRect();
        const scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
        // 修复SSR报错：ERROR ReferenceError: window is not defined
        if (typeof window === 'undefined') {
            return;
        }
        if (layout.top < 0) {
            // 上边界溢出屏幕
            window.scrollTo(0, layout.top + scrollTop - 20);
        }
        else if (layout.bottom > document.documentElement.clientHeight) {
            // 下边界溢出屏幕
            window.scrollTo(0, scrollTop + layout.bottom + 20 - document.documentElement.clientHeight);
        }
    }
    /**
     * 创建intro实例
     */
    create(config) {
        let introRef; // create方法创建并返回的intro实例
        const steps = config.steps;
        let introModalRef; // modal实例，用于隐藏弹窗
        let introTipRef; // 是生成的tip，有show & hide
        let introMultiTipRefs = []; // 多个tip场景下生成的tip实例数组
        let curStep = 0; // 在整个create方法中，标识当前步数
        const lastStep = steps[steps.length - 1].step; // 最后一TiIntroStep的step属性值，即总步数
        // 关闭多个tip的操作元素
        const closeMultiTipEle = steps.filter((item) => item.isAction).length > 0 ?
            steps.filter((item) => item.isAction)[0].element : undefined;
        // 先隐藏closeMultiTipEle，并注册事件
        if (closeMultiTipEle) {
            this.render.setStyle(closeMultiTipEle, 'display', 'none');
        }
        this.unListenDocumentKeydown = this.render.listen(document, 'keydown', (event) => {
            switch (event.which) {
                case TiKeymap.KEY_TAB: // tab键用于处理在提示框内循环获取焦点
                    this.clickTab(event);
                    break;
                default:
                    break;
            }
        });
        /**
         * @param flag boolean true:完成intro引导；false：未完成intro引导，但是退出
         */
        const close = (flag) => {
            if (introMultiTipRefs.length > 0) {
                introMultiTipRefs.forEach((item) => {
                    this.hidePreStep(item);
                });
                introMultiTipRefs = [];
                this.render.setStyle(closeMultiTipEle, 'display', 'none');
            }
            else {
                this.hidePreStep(introTipRef);
            }
            this.destroyBackdrop();
            if (flag && typeof config.onFinish === 'function') {
                config.onFinish();
            }
            else if (!flag && typeof config.onExit === 'function') {
                config.onExit();
            }
            if (this.unListenWindowResize) {
                this.unListenWindowResize();
                this.unListenWindowResize = undefined;
            }
            if (this.unListenWindowHashchange) {
                this.unListenWindowHashchange();
                this.unListenWindowHashchange = undefined;
            }
            if (this.closeMultiTipEleClickListener) {
                this.closeMultiTipEleClickListener();
            }
            if (this.unListenDocumentKeydown) {
                this.unListenDocumentKeydown();
                this.unListenDocumentKeydown = undefined;
            }
        };
        /**
         * 无效步数条件：
         * 1.不是有效数字
         * 2.等于currentNumber，等于0除外
         * 3.小于0 或 大于 totalNumber
         * 使用curStep 和 lastStep，没有提为private方法
         */
        const isInvalidStepNum = (num) => {
            return isNaN(num) || (curStep === num && num !== 0) || num < 0 || num > lastStep;
        };
        /**
         * 即将进入某一步的引导
         *
         * 需要在进入前做一些合法性判断，清除上一步信息等
         */
        const wantStep = (num) => {
            if (isInvalidStepNum(num)) {
                TiLog.error('stepNumber is not valid');
                return;
            }
            this.hidePreStep(introTipRef);
            curStep = num;
            if (typeof config.beforeStep === 'function') {
                config.beforeStep(introRef, num);
            }
            else {
                // tslint:disable-next-line: no-use-before-declare
                goStep(num);
            }
            // 延时为了保证遮罩dom已经绘制完毕。
            setTimeout(() => {
                // 在引导的时候，把焦点调整为遮罩层。为后续把焦点圈在提示框内做准备。
                const backdropEle = document.querySelector('#ti3-intro-backdrop');
                if (backdropEle) {
                    backdropEle.focus();
                }
            }, 100);
        };
        // 开始某一步的引导
        const goStep = (num) => {
            const currentSteps = steps.filter((item) => item.step === num);
            // curIntroStep curIntroStep
            let currentStep;
            if (currentSteps.length === 1) {
                currentStep = currentSteps[0];
            }
            // 先关闭之前的canvas
            this.destroyBackdrop();
            /**
             * 具体的引导步骤分为3种
             * 1.总览页： 一个正常弹窗，用modal实现 intromodal
             * 2.分布页：带按钮的tip，用tipService实现
             * 3.提示： 没有按钮的普通tip，用tipService实现
             */
            // 第一种情况，弹窗
            if (currentStep && !currentStep.element) {
                introModalRef = this.modalService.open(TiIntromodalComponent, {
                    id: 'ti3-intro-modal',
                    context: {
                        title: currentStep.title,
                        content: currentStep.content,
                        totalNumber: lastStep,
                        currentNumber: curStep,
                        finishButtonText: config.finishButtonText,
                        id: config.id + '_' + num,
                        close: () => {
                            introModalRef.close();
                        },
                        wantStep
                    },
                    draggable: false
                });
                return;
            }
            // 如果有弹窗的话，关闭弹窗
            if (introModalRef) {
                introModalRef._remove();
                introModalRef = undefined;
            }
            // 重新绘制canvas
            this.drawBackdrop();
            // 第二种情况，带按钮的tip
            if (currentStep && currentStep.title) {
                TiIntroService.scrollToViewport(currentStep.element);
                introTipRef = this.tipService.create(currentStep.element, Object.assign(Object.assign({}, this.commonConfig), { position: currentStep.position, registerVisibilityChangeEvent: false }));
                introTipRef.show(TiIntrotipComponent, {
                    title: currentStep.title,
                    content: currentStep.content,
                    totalNumber: lastStep,
                    currentNumber: curStep,
                    finishButtonText: config.finishButtonText,
                    id: config.id + '_' + num,
                    close,
                    wantStep
                });
                this.highlight(currentStep.element, currentStep.shape);
            }
            // 第三种情况，普通tip，并且是多个，有一个是关闭按钮。和第二种情况是if else 的关系，重新列为一个if分支是为了让三种情况称为并列的if
            if (currentSteps && currentSteps.length > 1) {
                currentSteps.forEach((item) => {
                    if (item.isAction) {
                        this.render.setStyle(item.element, 'display', 'block');
                        this.closeMultiTipEleClickListener = this.render.listen(item.element, 'click', () => {
                            close(true);
                        });
                    }
                    else {
                        TiIntroService.scrollToViewport(item.element);
                        const introtipRef = this.tipService.create(item.element, Object.assign(Object.assign({}, this.commonConfig), { position: item.position, registerVisibilityChangeEvent: false }));
                        introtipRef.show(item.content);
                        introMultiTipRefs.push(introtipRef);
                        this.highlight(item.element, item.shape);
                    }
                });
            }
            // 修复SSR报错：ERROR ReferenceError: window is not defined
            if (!this.unListenWindowResize && typeof window !== 'undefined') {
                this.unListenWindowResize = this.render.listen(window, 'resize', () => {
                    this.hidePreStep(introTipRef);
                    this.destroyBackdrop();
                    goStep(curStep);
                });
            }
            if (!this.unListenWindowHashchange && typeof window !== 'undefined') {
                this.unListenWindowHashchange = this.render.listen(window, 'hashchange', () => {
                    close(false);
                });
            }
        };
        // 对外暴露的intro实例
        introRef = {
            start() {
                wantStep(0);
            },
            end() {
                close(true);
            },
            step: (number) => {
                wantStep(number);
            },
            proceed() {
                goStep(curStep);
            }
        };
        return introRef;
    }
    clickTab(event) {
        const introModal = document.querySelector('.ti3-intromodal-wrapper');
        const focusableElements = introModal === null || introModal === void 0 ? void 0 : introModal.querySelectorAll(this.focusableElementsString);
        Util.focusInDialogOnTabchange(event, focusableElements);
    }
    hidePreStep(introTipRef) {
        if (introTipRef) {
            introTipRef.hide();
        }
    }
    drawBackdrop() {
        // 修复SSR报错：
        /* ERROR Error: NotYetImplemented
        at HTMLCanvasElement.Wo4J.exports.nyi (D:\ngworkspace\tiny3-0119-2\ngversion\ng11-ssr\dist\tiny3demo\server\main.js:140019:9)
        at TiIntroService.drawBackdrop (D:\ngworkspace\tiny3-0119-2\ngversion\ng11-ssr\dist\tiny3demo\server\main.js:12914:28) */
        if (typeof document === 'undefined') {
            return;
        }
        const canvas = this.render.createElement('canvas');
        this.render.setStyle(canvas, 'z-index', 5000); // 最大的可取值为5000，5001会遮盖tip
        this.render.setStyle(canvas, 'position', 'absolute');
        this.render.setStyle(canvas, 'top', 0);
        this.render.setStyle(canvas, 'left', 0);
        this.render.setStyle(canvas, 'outline', 'none');
        this.render.setAttribute(canvas, 'tabindex', '0'); // 非表单元素想要使用focus()函数聚焦，需要设置tabindex属性。
        canvas.id = 'ti3-intro-backdrop';
        const ctx = canvas.getContext('2d');
        // _drawBackDrop(canvas, ctx) {
        // 获取整个页面宽高，用于计算canvas宽高
        // 获取整个页面的宽高,包括滚动条部分及body margin等
        let browserWidth = this.document.documentElement.scrollWidth;
        let browserHeight = this.document.documentElement.scrollHeight;
        // 获取整个页面可视区域宽高，页面不出滚动条情况下，该值原则上应该是与上述browser宽高相等的
        // 但是由于浏览器的计算差异，可能存在不相等的情况
        const clientWidth = this.document.documentElement.clientWidth;
        const clientHeight = this.document.documentElement.clientHeight;
        // 由于在IE下该宽高计算不精确，可能会导致页面本身无滚动条的情况下，
        // 当使用该值设置canvas宽度后，出现滚动条，因此需要对宽高进行特殊处理
        // 根据多次试验经验，发现当实际页面实际宽度为小数时，clientWidth取值为去掉小数点后的值，
        // scrollWidth则会自动+1，导致使用scrollWidth设置会出现滚动条，
        // 因此，通过两者之差小于1的方式判断该情况下，取小值设置canvas宽度即可解决该问题
        if (browserWidth - clientWidth <= 1) {
            browserWidth = clientWidth;
        }
        // 纵向情况下处理同上
        if (browserHeight - clientHeight <= 1) {
            browserHeight = clientHeight;
        }
        canvas.width = browserWidth;
        canvas.height = browserHeight;
        ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';
        ctx.fillRect(0, 0, browserWidth, browserHeight);
        this.render.appendChild(this.document.body, canvas);
    }
    highlight(element, shape) {
        const layout = Position.getHostEleLayout(element, element);
        const canvas = this.document.body.querySelector('#ti3-intro-backdrop');
        // 修复SSR报错：ERROR TypeError: Cannot read property 'getContext' of undefined
        if (!canvas) {
            return;
        }
        const ctx = canvas.getContext('2d');
        const highlightLayout = Object.assign({}, layout);
        if (layout.isFixed) {
            // 如果被高亮的元素是fixed定位，以元素相对于视口的位置为高亮区域的定位
            this.render.setStyle(canvas, 'position', 'fixed');
            highlightLayout.top = element.getBoundingClientRect().top;
            highlightLayout.left = element.getBoundingClientRect().left;
        }
        if (shape === 'circle') {
            const radius = (highlightLayout.width < highlightLayout.height ? highlightLayout.width : highlightLayout.height) / 2;
            const x = highlightLayout.left + highlightLayout.width / 2;
            const y = highlightLayout.top + highlightLayout.height / 2;
            TiIntroService.clearCircle(x, y, radius, 1, ctx);
        }
        else {
            ctx.clearRect(highlightLayout.left, highlightLayout.top, highlightLayout.width, highlightLayout.height);
        }
    }
}
TiIntroService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TiIntroService_Factory() { return new TiIntroService(i0.ɵɵinject(i1.TiTipService), i0.ɵɵinject(i2.TiModalService), i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(i3.DOCUMENT)); }, token: TiIntroService, providedIn: i4.TiIntroServiceModule });
TiIntroService.decorators = [
    { type: Injectable, args: [{
                providedIn: TiIntroServiceModule
            },] }
];
TiIntroService.ctorParameters = () => [
    { type: TiTipService },
    { type: TiModalService },
    { type: RendererFactory2 },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
//# sourceMappingURL=data:application/json;base64,