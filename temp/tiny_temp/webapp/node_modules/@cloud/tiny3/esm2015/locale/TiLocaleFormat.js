/**
 * @ignore
 *
 * 只供内部使用，外部使用tinyplus3提供的国际化方法
 *
 * 该类提供一个方法集，用于数字、时间日期的国际化处理
 * 其中 tiny提供的数字、时间日期和货币的国际化处理方法，用于屏蔽angular方法需要传入format/localeId的复杂处理
 *
 * <h3>示例</h3>
 * <iframe src="../tiny3demo/#/locale/locale-format" frameborder='0' width="100%" onload="this.height = document.documentElement.clientHeight"></iframe>
 */
import { formatDate, getLocaleId } from '@angular/common';
import { TiLocale } from './TiLocale';
export class TiLocaleFormat {
    /**
     * 获取语种关键字，默认为'en'
     * @return 语种关键字
     */
    static getLocaleKey() {
        let locale = TiLocale.getLocaleWords().tiLocaleKey;
        try { // local信息未注册情况下，getLocaleId该方法会报错，因此使用try catch的方式
            getLocaleId(TiLocale.getLocaleWords().tiLocaleKey);
        }
        catch (error) {
            locale = TiLocaleFormat.DEFAULT_LOCALE;
        }
        return locale;
    }
    /**
     * @description 对国际化数字进行处理(包含小数点)
     * @param: number 国际化数字
     * @param: isIntegerValid 只针对integer的情况
     * @return 返回数字信息
     */
    static parseNumWithDecimal(number, isIntegerValid) {
        const groupSep = TiLocaleFormat.getNumberSymbol('Group');
        const decimalSep = TiLocaleFormat.getNumberSymbol('Decimal');
        /* tslint:disable:prefer-template */
        const numberReg = new RegExp('^(?:-?\\d*|-?\\d(?:\\' + groupSep + '?\\d*)+)?(?:\\' + decimalSep + '\\d*)?$');
        // const numberFormat = number.toString();
        const numberFormat = number;
        if (!numberReg.test(numberFormat)) {
            return NaN;
        }
        const groupReg = new RegExp('\\' + groupSep, 'g');
        const decimalReg = new RegExp('\\' + decimalSep, 'g');
        const numberFormatString = numberFormat.replace(groupReg, '')
            .replace(decimalReg, '.');
        const numberFloat = parseFloat(numberFormatString);
        /*
        * *只针对integer的情况
        * 截取转换前的小数位字符串numFormatSlice
        * 转换前的小数位字符串长度numFormatCount
        * 转换后的小数位为0,就添加小数位个数的0，返回值是string类型
        * */
        if (isIntegerValid && (numberFormatString.indexOf('.') !== -1)) {
            return numberFormatString;
        }
        return numberFloat;
    }
    /**
     * 获取数字规则信息
     * key 规则关键字
     */
    static getNumberSymbol(key) {
        const standardNumber = 10000.0;
        const localeNumber = TiLocaleFormat.formatNumber(standardNumber, '1.1-1');
        return key === 'Group' ? localeNumber.charAt(2) : localeNumber.charAt(6);
    }
    /**
     * @description 对数字进行国际化处理
     * @param: number 数字
     * @param: numberFormat 数字格式化形式
     * @return 返回格式化后的信息
     */
    static formatNumber(number, format) {
        let options;
        if (format) {
            options = {
                minimumIntegerDigits: format.substring(0, format.indexOf('.')),
                minimumFractionDigits: format.substring(format.indexOf('.') + 1, format.indexOf('-')),
                maximumFractionDigits: format.substring(format.indexOf('-') + 1)
            };
        }
        // TODO: new Intl.NumberFormat es西语下整数部分有四位时，本地化数字没有千位分隔
        const res = new Intl.NumberFormat(TiLocale.getLocaleWords().tiLocaleKey, options)
            .format(number);
        return res;
    }
    /**
     * @description 对国际化数字进行标准化处理
     * @param: number 国际化数字
     * @return 返回数字信息
     */
    static parseNumber(number) {
        return parseFloat(TiLocaleFormat.parseNumWithDecimal(number));
    }
    /**
     * @description 对时间进行国际化处理
     * @param: time 时间
     * @param: format 时间格式
     * @return 返回格式化后的信息
     */
    static formatTime(time, format, timezone) {
        return formatDate(time, format || TiLocaleFormat.TIME_FORMAT, TiLocaleFormat.getLocaleKey(), timezone);
    }
    /**
     * @description 对日期进行国际化处理
     * @param date 日期
     * @param format 日期格式
     * @return 返回格式化后的信息
     */
    static formatDate(date, format, timezone) {
        return formatDate(date, format || TiLocaleFormat.DATE_FORMAT, TiLocaleFormat.getLocaleKey(), timezone);
    }
    /**
     * @description 对时间日期进行国际化处理
     * @param: 时间日期
     * @param: 时间日期格式
     * @return 返回格式化后的信息
     */
    static formatDateTime(dateTime, format, timezone) {
        return formatDate(dateTime, format || TiLocaleFormat.DATETIME_FORMAT, TiLocaleFormat.getLocaleKey(), timezone);
    }
    /**
     * 功能描述：去除千位分隔符，得到标准化数字
     * value: 带有千位分隔符的数据
     */
    static deleteGroupSep(value) {
        let res;
        res = String(value);
        const groupSep = TiLocaleFormat.getNumberSymbol('Group');
        const groupSepReg = new RegExp('\\' + groupSep, 'g');
        return res.replace(groupSepReg, '');
    }
    /**
     * 检测format接口配置是否合法。目前spinner和inputnumber组件会用到
     */
    static isInvalidFormat(format) {
        if (typeof (format) !== 'string'
            || format.charAt(0)
                .toUpperCase() !== 'N'
            || Number.isNaN(parseInt(format.slice(1), 10))) {
            return true;
        }
        return false;
    }
}
TiLocaleFormat.TIME_FORMAT = 'mediumTime'; // 'h:mm:ss a' (e.g. 9:03:01 AM)
TiLocaleFormat.DATE_FORMAT = 'mediumDate'; // 'MMM d, y' (e.g. Jun 15, 2015).
TiLocaleFormat.DATETIME_FORMAT = 'medium'; // 'MMM d, y, h:mm:ss a' (e.g. Jun 15, 2015, 9:03:01 AM)
TiLocaleFormat.DEFAULT_LOCALE = 'en';
//# sourceMappingURL=data:application/json;base64,