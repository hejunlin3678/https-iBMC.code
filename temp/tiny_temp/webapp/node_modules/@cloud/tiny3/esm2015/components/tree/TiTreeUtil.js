import { Util } from '../../utils/Util';
/**
 *
 * 用于封装给树组件 [TiTreeComponent]{@link ../components/TiTreeComponent.html}
 * 提供公共方法，包括增、删、改、查、选中、取消选中、遍历、筛选、获取选中项等操作
 */
export class TiTreeUtil {
    /**
     * 根据某node节点查找其父节点
     * @param  data 所有节点数据
     * @param node 已知node节点
     */
    static getParentNode(data, node) {
        if (!Array.isArray(data)) {
            return;
        }
        for (const item of data) {
            if (!TiTreeUtil.isLeaf(item)) {
                if (item.children.indexOf(node) !== -1) {
                    return item;
                }
                else {
                    const result = TiTreeUtil.getParentNode(item.children, node);
                    if (result) {
                        return result;
                    }
                }
            }
        }
    }
    /**
     * 遍历整个树
     * @param data 所有节点数据
     * @param traverseFn 对各个节点执行的操作
     */
    static traverse(data, traverseFn) {
        if (!Util.isFunction(traverseFn) || !Array.isArray(data)) {
            return;
        }
        for (const item of data) {
            traverseFn(item);
            if (!TiTreeUtil.isLeaf(item)) {
                TiTreeUtil.traverse(item.children, traverseFn);
            }
        }
    }
    /**
     * 多选树，更新各节点的选中状态。
     * 适用场景：手动添加或删除若干节点，当前节点的兄弟节点和父节点的选中状态不一致。
     * 10.0.1 新增
     * @param data  所有节点数据
     */
    static updateChecked(data) {
        TiTreeUtil.check(data);
    }
    /**
     * 检查但前数据的多选状态
     * @param data 当前节点集合
     * @param allData 全部数据集合
     */
    static check(data, allData) {
        let resultData;
        // 如果不传allData，data 是所有数据，此函数递归调用，data之后不是全部数据
        resultData = !allData ? data : allData;
        for (const item of data) {
            if (!TiTreeUtil.isLeaf(item)) {
                if (TiTreeUtil.isLeafsParentNode(item)) {
                    // 根据子叶子节点计算当前节点的复选状态
                    const computedChecked = TiTreeUtil.computeChecked(item);
                    if (computedChecked !== item.checked) {
                        item.checked = computedChecked;
                        if (computedChecked === true) {
                            TiTreeUtil.selectParents(item, resultData, true);
                        }
                        else {
                            TiTreeUtil.deSelectParents(item, resultData);
                        }
                    }
                }
                else {
                    TiTreeUtil.check(item.children, resultData);
                }
            }
        }
    }
    /**
     * 当前节点是否是叶子节点的父节点，
     * 因为更新节点的选中状态时，根据叶子节点的选中状态计算出父节点的选中状态，再更新父节点的选中状态。
     * @param node 当前节点
     */
    static isLeafsParentNode(node) {
        if (!Array.isArray(node.children)) {
            return false;
        }
        else {
            for (const child of node.children) {
                if (Array.isArray(child.children)) {
                    return false;
                }
            }
            return true;
        }
    }
    /**
     * 根据子节点的多选状态，计算出当前节点的多选状态
     * @param node 当前节点
     */
    static computeChecked(node) {
        const childrens = node.children;
        let selectedNum = 0;
        let unSelectedNum = 0;
        for (const child of childrens) {
            if (child.checked === true) {
                selectedNum++;
            }
            else if (!child.checked) { // false和undefined 两种
                unSelectedNum++;
            }
        }
        if (selectedNum === childrens.length) {
            return true;
        }
        else if (unSelectedNum === childrens.length) {
            return false;
        }
        else {
            return 'indeterminate';
        }
    }
    /**
     * 添加节点
     * @param data 所有节点数据
     * @param node  需要添加的节点：一个或多个节点
     * @param index  添加的位置: -1表示从尾部追加
     * @param pNode 指定要添加的节点的父节点，如果没有指定的话默认添加到根节点
     */
    static addNode(data, node, index, pNode) {
        const k = parseInt(index, 10);
        if (isNaN(k) || !Array.isArray(data)) {
            return;
        }
        const nodes = Array.isArray(node) ? node : [node];
        // 当没有指定父节点时，默认将节点添加到根节点
        if (!pNode) {
            const resuleIndex = index === -1 ? data.length : index;
            for (let i = 0; i < nodes.length; i++) {
                data.splice(resuleIndex + i, 0, nodes[i]);
            }
            return;
        }
        // 如果父节点是叶子节点时，给叶子节点添加children数组
        if (TiTreeUtil.isLeaf(pNode)) {
            pNode.children = [];
        }
        // 根据Index值，将node插入指定位置
        if (index === -1) {
            pNode.children = pNode.children.concat(nodes); // 返回值为新数组
        }
        else {
            for (let j = 0; j < nodes.length; j++) {
                pNode.children.splice(index + j, 0, nodes[j]);
            }
        }
    }
    /**
     * 删除一个节点
     * @param  data 所有节点数据
     * @param  node  节点
     */
    static removeNode(data, node) {
        if (!Array.isArray(data)) {
            return;
        }
        // 找到不匹配搜索内容的叶子节点并删除。为了避免要删除的元素在数组中的索引改变，从后向前循环
        for (let i = data.length - 1; i >= 0; i--) {
            if (data[i] === node) {
                TiTreeUtil.deleteArr(data, i);
                return;
            }
            if (!TiTreeUtil.isLeaf(data[i])) {
                TiTreeUtil.removeNode(data[i].children, node);
            }
        }
    }
    // 3.0.3 selectNode/unSelectNode第三个参数：是否单选, 改为是否多选。已确认无人使用。
    // TODO：这两个函数的重复代码，可以合并
    /**
     * 选中某个节点
     * @param  data 所有节点数据
     * @param  node  节点
     * @param  multiple 是否多选模式
     */
    static selectNode(data, node, multiple) {
        if (!Array.isArray(data)) {
            return;
        }
        if (!multiple) { // 单选模式
            TiTreeUtil.traverse(data, (travNode) => {
                travNode.checked = false; // 清空所有的选中项
            });
            node.checked = true; // 将当前项置为选中
        }
        else { // 多选
            TiTreeUtil.selectAllChildren(node); // 先置当前节点选中，如果当前节点是非叶子节点 递归让其子节点全部选中
            TiTreeUtil.selectParents(node, data, true); // 设置父节点选中情况
        }
    }
    // TODO:Tiny4 deselect改为unselect
    /**
     * 取消选中某个节点
     * @param data 所有节点数据
     * @param node  节点
     * @param multiple 是否多选模式
     */
    static deSelectNode(data, node, multiple) {
        if (!Array.isArray(data)) {
            return;
        }
        if (!multiple) {
            TiTreeUtil.traverse(data, (travNode) => {
                travNode.checked = false; // 清空所有的选中项
            });
        }
        else {
            TiTreeUtil.deSelectAllChildren(node);
            TiTreeUtil.deSelectParents(node, data);
        }
    }
    /**
     * 展开id所有父节点
     * @param  data 所有节点数据
     * @param  node  节点
     */
    static expandNode(data, node) {
        if (!Array.isArray(data)) {
            return;
        }
        let num = 0;
        let result = false;
        for (const item of data) {
            if (item === node) {
                num++;
            }
            else if (!TiTreeUtil.isLeaf(item)) {
                result = TiTreeUtil.expandNode(item.children, node);
                if (result) {
                    item.expanded = true;
                    num++;
                }
            }
        }
        return (num > 0);
    }
    /**
     * 根据用户传入的方法筛选节点的数据
     * @param data 所有节点数据
     * @param  matchFn 用户传入匹配节点的方法
     * @returns 是否找到
     */
    static search(data, matchFn) {
        if (!Util.isFunction(matchFn) || !Array.isArray(data)) {
            return false;
        }
        let findNum = 0;
        let isFind = false;
        // 找到不匹配搜索内容的叶子节点并删除。为了避免要删除的元素在数组中的索引改变，从后向前循环
        for (let i = data.length - 1; i >= 0; i--) {
            if (!matchFn(data[i]) && !TiTreeUtil.isLeaf(data[i])) { // 未匹配到且为父节点
                isFind = TiTreeUtil.search(data[i].children, matchFn);
                if (isFind) {
                    findNum++;
                }
                else {
                    TiTreeUtil.deleteArr(data, i);
                }
            }
            else if (matchFn(data[i])) { // 匹配到
                findNum++;
            }
            else { // 未匹配到且为叶子节点
                TiTreeUtil.deleteArr(data, i);
            }
        }
        return (findNum > 0);
    }
    /**
     * 获取选中项
     * @param data 所有节点数据
     * @param  onlySelectLeaf 选中项中是否只包含叶子节点
     * @param  multiple 是否多选模式
     */
    static getSelectedData(data, onlySelectLeaf, multiple) {
        // 每次遍历之前需要清空当前选中项列表
        TiTreeUtil.selectedData = [];
        TiTreeUtil.querySelectedNode(data, onlySelectLeaf, multiple);
        return TiTreeUtil.selectedData;
    }
    /**
     * @ignore
     * @description 根据整棵树的节点数据，查询所有选中项，并更新selectedData
     * @param data 全部节点数据
     * @param onlySelectLeaf 全部节点数据
     */
    static querySelectedNode(data, onlySelectLeaf, multiple) {
        let tempNode;
        for (let i = 0; i < data.length; i++) {
            tempNode = data[i];
            if (TiTreeUtil.checkedParentNode(tempNode)) { // 父节点半选或选中
                TiTreeUtil.pnode.push(tempNode);
                TiTreeUtil.querySelectedNode(tempNode.children, onlySelectLeaf, multiple);
                // 单选情况下仅查找到第一个选中的叶子节点即可
                if (!multiple) {
                    break;
                }
            }
            else if (TiTreeUtil.checkedLeafNode(tempNode)) { // 叶子节点选中
                TiTreeUtil.selectedData.push(tempNode);
                if (!onlySelectLeaf) {
                    tempNode.parent = TiTreeUtil.pnode.concat();
                    // 单选情况下仅查找到第一个选中的叶子节点即可
                    if (!multiple) {
                        TiTreeUtil.pnode.splice(0, TiTreeUtil.pnode.length);
                        break;
                    }
                }
            }
            // 遍历到最后一项时将父节点从pnode中移除
            if (i === data.length - 1) {
                TiTreeUtil.pnode.pop();
            }
        }
    }
    /**
     * @ignore
     * @description 判断节点node是否是一个处于选中或半选状态的父节点
     * @param node 节点数据
     */
    static checkedParentNode(node) {
        return (node.checked === true || node.checked === 'indeterminate') && !TiTreeUtil.isLeaf(node);
    }
    /**
     * @ignore
     * @description 判断节点node是否是一个处于选中状态的叶子节点
     * @param node 节点数据
     */
    static checkedLeafNode(node) {
        return (node.checked === true) && (TiTreeUtil.isLeaf(node));
    }
    /**
     * @ignore
     * 判断是否为叶子节点
     */
    static isLeaf(item) {
        return !(Util.isArray(item.children));
    }
    /**
     * @ignore
     * 从数组arr中删除下标为index的节点
     */
    static deleteArr(arr, index) {
        arr.splice(index, 1);
    }
    // TODO: checked传入false时，与deSelectParents有什么区别？可以合并么？
    /**
     * @ignore
     * 当子节点选中时，设置祖先元素的选中状态
     * @param item 子节点的数据
     * @param allData 全部节点数据
     * @param checked 取值为：true/false/'indeterminate'
     */
    static selectParents(item, allData, checked) {
        const pNode = TiTreeUtil.getParentNode(allData, item);
        if (Util.isUndefined(pNode)) {
            return;
        }
        // 当子元素为半选时，祖先元素一律设置为半选状态
        if (checked === 'indeterminate') {
            pNode.checked = 'indeterminate';
            TiTreeUtil.selectParents(pNode, allData, 'indeterminate');
            return;
        }
        const childrens = pNode.children;
        let selectedNum = 0;
        for (const child of childrens) {
            if (child.checked === true) {
                selectedNum++;
            }
        }
        if (selectedNum === childrens.length) {
            pNode.checked = true;
            TiTreeUtil.selectParents(pNode, allData, true);
        }
        else {
            pNode.checked = 'indeterminate';
            TiTreeUtil.selectParents(pNode, allData, 'indeterminate');
        }
    }
    /**
     * @ignore
     * 根据父节点选择子节点
     */
    static selectAllChildren(item) {
        // 如果子节点是禁用状态不做处理；
        if (item.disabled !== true) {
            item.checked = true;
        }
        if (!TiTreeUtil.isLeaf(item)) {
            item.children.forEach((child) => {
                TiTreeUtil.selectAllChildren(child);
            });
        }
    }
    // TODO:Tiny4 deselect改为unselect
    /**
     * @ignore
     * 多选状态下，父节点取消选中，置子节点都为取消选中状态
     * @param item 子节点的数据
     */
    static deSelectAllChildren(item) {
        if (item.disabled !== true) {
            item.checked = false;
        }
        if (Util.isArray(item.children) && item.children.length > 0) {
            item.children.forEach((child) => {
                TiTreeUtil.deSelectAllChildren(child);
            });
        }
    }
    // TODO:Tiny4 deselect改为unselect
    /**
     * @ignore
     * 当前节点取消选中时，设置祖先元素的选中状态
     * @param item 当前节点的数据
     * @param allData 全部的节点数据
     */
    static deSelectParents(item, allData) {
        const pNode = TiTreeUtil.getParentNode(allData, item);
        if (Util.isUndefined(pNode)) {
            return;
        }
        const childrens = pNode.children;
        let selectedNum = 0;
        for (const child of childrens) {
            if (child.checked === true || child.checked === 'indeterminate') {
                selectedNum++;
            }
        }
        if (selectedNum === 0) {
            pNode.checked = false;
            TiTreeUtil.deSelectParents(pNode, allData);
        }
        else {
            pNode.checked = 'indeterminate';
            TiTreeUtil.selectParents(pNode, allData, 'indeterminate');
        }
    }
    /**
     * @ignore
     * drop event
     * @param event 拖拽数据
     * @param data 所用节点数据
     * @param multiple 多选
     */
    static dropApply(event, data, multiple) {
        if (!Array.isArray(data)) {
            return;
        }
        const dragNode = event.dragNode; // 拖拽节点
        const dragParentNode = TiTreeUtil.getParentNode(data, dragNode); // 拖拽节点的父节点
        const dropNode = event.targetNode; // 拖放节点
        const dropParentNode = TiTreeUtil.getParentNode(data, dropNode); // 拖放节点的父节点
        const dropPosition = event.dropPosition; // 拖拽位置
        TiTreeUtil.removeNode(data, dragNode);
        // 拖拽父节点无子节点时，删除children属性，此处是为解决当children为空时，展开收起图标还会存在的问题
        if ((dragParentNode === null || dragParentNode === void 0 ? void 0 : dragParentNode.children.length) < 1) {
            delete dragParentNode.children;
        }
        if (dropPosition === 0) {
            TiTreeUtil.addNode(data, [dragNode], -1, dropNode);
        }
        else {
            let index;
            if (!dropParentNode) { // 拖放节点为顶级级节点时
                index = data.indexOf(dropNode);
                if (dropPosition === -1) {
                    data.splice(index, 0, dragNode);
                }
                else {
                    data.splice(index + 1, 0, dragNode);
                }
            }
            else {
                index = dropParentNode.children.indexOf(dropNode);
                if (dropPosition === -1) {
                    TiTreeUtil.addNode(data, [dragNode], index, dropParentNode);
                }
                else {
                    TiTreeUtil.addNode(data, [dragNode], index + 1, dropParentNode);
                }
            }
        }
        // 多选
        if (multiple) {
            TiTreeUtil.updateChecked(data);
        }
    }
}
TiTreeUtil.selectedData = [];
TiTreeUtil.pnode = [];
//# sourceMappingURL=data:application/json;base64,