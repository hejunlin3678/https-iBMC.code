import { Component, ElementRef, EventEmitter, Input, Output, Renderer2, ViewChild } from '@angular/core';
import { TiLocaleFormat } from '../../locale/TiLocaleModule';
import { TiKeymap, Util } from '../../utils/Util';
import { TiFormComponent } from '../base/TiBaseModule';
/**
 * 数字微调组件
 *
 * <example-url>../tiny3demo/#/spinner/spinner-all</example-url>
 */
export class TiSpinnerComponent extends TiFormComponent {
    constructor(hostRef, renderer2) {
        super(hostRef, renderer2);
        this.hostRef = hostRef;
        this.renderer2 = renderer2;
        /**
         * @ignore
         */
        this.method = {
            METHOD_ADD: 'add',
            METHOD_SUB: 'sub'
        };
        /**
         * 最大值，JS中能表示的整数范围是53位的，如果超过了这个范围的整数，进行一些运算时会出现错误，因此最大值为2^53
         */
        this.max = Math.pow(2, 53);
        /**
         * 最小值，JS中能表示的整数范围是53位的，如果超过了这个范围的整数，进行一些运算时会出现错误，因此最小值为-2^53
         */
        this.min = -Math.pow(2, 53);
        /**
         * 微调器的步长
         */
        this.step = 1;
        /**
         * 占位提示信息
         */
        this.placeholder = '';
        /**
         * @ignore
         *
         * 从10.0.1版本开始该接口不再开放。如果不想要组件根据最大最小值进行强制转换，那么不要设置最大最小值即可。
         *
         * 失去焦点是否支持根据最大最小值进行强制转换（默认值为true, 支持强转; 当用户配置为false时，不支持强制转换）
         */
        this.correctable = true;
        /**
         * 是否开启国际化。默认值为true,开启国际化功能; 当用户配置为false时，不支持国际化)
         */
        this.localeable = true;
        /**
         * 输入文本的最大长度， 默认值为20.
         */
        this.maxlength = 20;
        /**
         * @ignore
         * 当数据发生改变时，触发change事件
         */
        // tslint:disable-next-line:no-output-named-after-standard-event
        this.stepChange = new EventEmitter();
        this.numberFormat = '1.0-3'; // 整数位保留最小位数.小数位保留最小位数-小数位最大保留位置
    }
    // 组件声明周期钩子--start ↓
    ngOnInit() {
        super.ngOnInit();
        this.setFocusableElems([this.inputEle.nativeElement]);
        this.init();
    }
    init() {
        if (!TiLocaleFormat.isInvalidFormat(this.format)) {
            const precision = parseInt(this.format.slice(1), 10);
            // tslint:disable-next-line:prefer-template
            this.numberFormat = '1.' + precision + '-' + precision;
        }
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        this.setChanges(changes, 'max');
        this.setChanges(changes, 'min');
    }
    // 输入属性发生改变
    setChanges(changes, key) {
        if (changes[key] && !changes[key].isFirstChange()) {
            this[key] = parseFloat(changes[key].currentValue);
            if (Number.isNaN(this[key]) || this.min > this.max) {
                this[key] = parseFloat(changes[key].previousValue);
            }
            if (this.correctable && this.model !== undefined) {
                const model = this.getModelByMinMax(this.inputValue);
                if (model !== this.model) {
                    // error: Expression has changed after it was checked.
                    setTimeout(() => {
                        this.inputValue = model;
                        this.model = model;
                    }, 0);
                }
            }
        }
    }
    // 组件声明周期钩子--end
    // 实现ControlValueAccessor接口
    /**
     * @ignore
     * model --> view
     */
    writeValue(value) {
        if (value === null) {
            return;
        }
        super.writeValue(value);
        if (!Util.isUndefined(value)) {
            if (Number.isNaN(parseFloat(value))) {
                this.model = this.inputValue;
                return;
            }
            if (this.correctable) {
                const val = this.getModelByMinMax(value);
                this.model = val;
                this.inputValue = val;
                return;
            }
        }
        this.inputValue = value;
    }
    // 实现ControlValueAccessor接口--end
    /**
     * @ignore
     */
    blurFn() {
        let correctValue = this.inputValue;
        if (this.correctable && this.inputValue !== undefined) {
            correctValue = this.getModelByMinMax(this.inputValue);
        }
        const parseFormatValue = correctValue === undefined ? correctValue : parseFloat(this.formatValue(correctValue));
        if (parseFormatValue !== this.model) {
            this.model = parseFormatValue;
        }
        this.inputValue = this.model;
        this.onModelTouched(); // 校验 初次聚焦 后续聚焦失焦
    }
    /**
     * @ignore
     * description: Event emitter for producting the `ngModelChange` event after the view model updates.
     * ngModelChange 是ngModel指令的@Output.
     * 它在viewToModelUpdate函数中触发
     *
     */
    inputChange(value) {
        if (value !== undefined && (value < this.min || value > this.max)) {
            return;
        }
        const parseFormatValue = value === undefined ? value : parseFloat(this.formatValue(value));
        if (parseFormatValue !== this.model) {
            this.model = parseFormatValue;
        }
    }
    /**
     * 键盘上下键操作
     * @ignore
     */
    keydownFn(event) {
        if (this.disabled) {
            return;
        }
        if (event.keyCode === TiKeymap.KEY_ARROW_UP) {
            this.stepNumber(this.method.METHOD_ADD);
        }
        else if (event.keyCode === TiKeymap.KEY_ARROW_DOWN) {
            this.stepNumber(this.method.METHOD_SUB);
        }
    }
    /**
     * @ignore
     */
    stepNumberMousedown(e, method) {
        if (e.button === TiKeymap.MOUSE_MIDDLE_BUTTON || e.button === TiKeymap.MOUSE_RIGHT_BUTTON || this.disabled) {
            return;
        }
        // 如果是鼠标按下向下btn，输入框需要做获得光标的处理
        this.inputEle.nativeElement.focus();
        e.preventDefault(); // 目的是防止input失去焦点
        this.stepNumber(method);
    }
    stepNumber(method) {
        if ((this.inputValue >= this.max && method === this.method.METHOD_ADD) ||
            (this.inputValue <= this.min && method === this.method.METHOD_SUB)) {
            return;
        }
        this.stepChange.emit(method);
        // 当输入框中的值为空时，点击+,-，显示最小值。
        if (this.inputValue === undefined) {
            this.model = this.min;
            this.inputValue = this.model;
            return;
        }
        if (method === this.method.METHOD_ADD) {
            if (this.inputValue > this.max - this.step) {
                this.model = this.max;
                this.inputValue = this.model;
                return;
            }
            if (this.inputValue < this.min) {
                this.model = this.min;
                this.inputValue = this.model;
                return;
            }
        }
        else if (method === this.method.METHOD_SUB) {
            if (this.inputValue < this.min + this.step) {
                this.model = this.min;
                this.inputValue = this.model;
                return;
            }
            if (this.inputValue > this.max) {
                this.model = this.max;
                this.inputValue = this.model;
                return;
            }
        }
        this.model = this.accOperate(this.inputValue, this.step, method);
        this.inputValue = this.model;
    }
    // 组件交互方法集合--end
    // 根据最大最小值得到model值
    getModelByMinMax(curValue) {
        if (curValue < this.min) {
            return this.min;
        }
        if (curValue > this.max) {
            return this.max;
        }
        return curValue;
    }
    formatValue(value) {
        if (value === undefined) {
            return;
        }
        // https://angular.cn/api/common/DecimalPipe
        // digitsInfo: {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}
        // minIntegerDigits: 小数点前最小位数 默认为1
        // minFractionDigits: 小数点后最小位数 默认0
        // maxFractionDigits: 小数点后最大位数 默认3
        // tslint:disable-next-line:prefer-template
        const localeValue = TiLocaleFormat.formatNumber(value, this.numberFormat);
        return TiLocaleFormat.parseNumber(localeValue).toString();
    }
    // 根据步长、+/-进行数值计算
    accOperate(value, step, method) {
        let r1;
        let r2;
        let c;
        let m;
        let _value;
        let _step;
        // 计算 val 小数点后数字的位数
        const getLength = (val) => {
            return (String(val)).split('.')[1] ? (String(val)).split('.')[1].length : 0;
        };
        // 去除 val 中的 ‘.’
        const replacePeriod = (val) => {
            return Number((String(val)).replace('.', ''));
        };
        r1 = getLength(value);
        r2 = getLength(step);
        c = Math.abs(r1 - r2);
        m = Math.pow(10, Math.max(r1, r2));
        if (c > 0) {
            const cm = Math.pow(10, c);
            if (r1 > r2) {
                _value = replacePeriod(value);
                _step = replacePeriod(step) * cm;
            }
            else {
                _value = replacePeriod(value) * cm;
                _step = replacePeriod(step);
            }
        }
        else {
            _value = replacePeriod(value);
            _step = replacePeriod(step);
        }
        if (method === this.method.METHOD_ADD) {
            return (_value + _step) / m;
        }
        if (method === this.method.METHOD_SUB) {
            return (_value - _step) / m;
        }
        return undefined;
    }
}
TiSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-spinner',
                template: "<div [id]=\"appendId('sub')\" class=\"ti3-icon ti3-spinner-downicon ti3-icon-reduce\" \r\n(mousedown)=\"stepNumberMousedown($event, method.METHOD_SUB)\"\r\n[ngClass]=\"{'ti3-spinner-icon-disabled': inputValue <= min}\"></div>\r\n<div #inputBox class=\"ti3-spinner-input-box\">\r\n    <input #input [placeholder]=\"placeholder\" [id]=\"appendId('input')\" type=\"text\" [disabled]=\"disabled\"\r\n       (blur)=\"blurFn()\"\r\n       [(ngModel)]=\"inputValue\" (ngModelChange)=\"inputChange($event)\" (keydown) = \"keydownFn($event)\"\r\n       [format]=\"format\" [localeable] = \"localeable\"\r\n       class=\"ti3-spinner-input\" [maxlength]=\"maxlength\" noborder tiText tiNumber/> \r\n</div>\r\n<div [id]=\"appendId('add')\" class=\"ti3-icon ti3-spinner-upicon ti3-icon-add\" \r\n(mousedown)=\"stepNumberMousedown($event, method.METHOD_ADD)\"\r\n[ngClass]=\"{'ti3-spinner-icon-disabled': inputValue >= max}\"></div>\r\n",
                providers: [TiFormComponent.getValueAccessor(TiSpinnerComponent)],
                styles: ["::ng-deep :root{--ti-spinner-inner-height:calc(var(--ti-input-height) - 2px)}:host{-ms-box-sizing:border-box;background-color:var(--ti-input-bg-color);border:1px solid var(--ti-input-border-color);border-radius:var(--ti-input-border-radius);box-sizing:border-box;display:inline-block;height:var(--ti-input-height)!important;line-height:normal;position:relative;transition:border-color .15s;vertical-align:middle;white-space:normal;width:120px}:host:active{border-color:var(--ti-input-border-color-focus);cursor:pointer}:host:hover{border-color:var(--ti-input-border-color-hover);transition:border-color .2s}:host[tiFocused]{border-color:var(--ti-input-border-color-focus)}:host.ng-invalid.ng-dirty:not([tiBlurCheck]) .ti3-spinner-downicon,:host.ng-invalid.ng-dirty:not([tiBlurCheck]) .ti3-spinner-input,:host.ng-invalid.ng-dirty:not([tiBlurCheck]) .ti3-spinner-upicon,:host.ng-invalid.ng-dirty[tiBlurCheck]:not([tiFocused]) .ti3-spinner-downicon,:host.ng-invalid.ng-dirty[tiBlurCheck]:not([tiFocused]) .ti3-spinner-input,:host.ng-invalid.ng-dirty[tiBlurCheck]:not([tiFocused]) .ti3-spinner-upicon,:host.ng-invalid.ng-touched:not([tiBlurCheck]) .ti3-spinner-downicon,:host.ng-invalid.ng-touched:not([tiBlurCheck]) .ti3-spinner-input,:host.ng-invalid.ng-touched:not([tiBlurCheck]) .ti3-spinner-upicon,:host.ng-invalid.ng-touched[tiBlurCheck]:not([tiFocused]) .ti3-spinner-downicon,:host.ng-invalid.ng-touched[tiBlurCheck]:not([tiFocused]) .ti3-spinner-input,:host.ng-invalid.ng-touched[tiBlurCheck]:not([tiFocused]) .ti3-spinner-upicon{background-color:var(--ti-input-bg-color-error)}.ti3-spinner-input-box{-ms-box-sizing:border-box;background-color:var(--ti-input-bg-color);box-sizing:border-box;color:var(--ti-input-text-color);ime-mode:disabled;left:var(--ti-spinner-inner-height);position:absolute;text-align:center;top:0;width:calc(100% - var(--ti-spinner-inner-height)*2)}.ti3-spinner-input-box .ti3-spinner-input{height:var(--ti-spinner-inner-height);line-height:var(--ti-spinner-inner-height);text-align:center;width:100%}.ti3-spinner-downicon,.ti3-spinner-upicon{-ms-box-sizing:border-box;box-sizing:border-box;color:var(--ti-common-color-icon-normal);line-height:var(--ti-spinner-inner-height);position:absolute;text-align:center;top:0;width:var(--ti-spinner-inner-height)}.ti3-spinner-downicon:not(.ti3-spinner-icon-disabled):hover,.ti3-spinner-upicon:not(.ti3-spinner-icon-disabled):hover{background-color:var(--ti-input-bg-color);color:var(--ti-common-color-icon-hover);cursor:pointer}.ti3-spinner-downicon.ti3-spinner-icon-disabled,.ti3-spinner-upicon.ti3-spinner-icon-disabled{background-color:var(--ti-input-bg-color-disabled);color:var(--ti-common-color-icon-disabled);cursor:not-allowed}.ti3-spinner-upicon{border-left:1px solid var(--ti-input-border-color);right:0}.ti3-spinner-downicon{border-right:1px solid var(--ti-input-border-color);left:0}:host[disabled]{background-color:var(--ti-input-bg-color-disabled);cursor:not-allowed}:host[disabled],:host[disabled]:hover{border-color:var(--ti-input-border-color-disabled)!important}:host[disabled] .ti3-spinner-input{background-color:var(--ti-input-bg-color-disabled);color:var(--ti-input-text-color-disabled);cursor:not-allowed}:host[disabled] .ti3-spinner-downicon,:host[disabled] .ti3-spinner-upicon{border-color:var(--ti-input-border-color-disabled)}:host[disabled] .ti3-spinner-downicon:not(.ti3-spinner-icon-disabled),:host[disabled] .ti3-spinner-upicon:not(.ti3-spinner-icon-disabled){background-color:var(--ti-input-bg-color-disabled);color:var(--ti-common-color-icon-disabled);cursor:not-allowed}"]
            },] }
];
TiSpinnerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
TiSpinnerComponent.propDecorators = {
    format: [{ type: Input }],
    max: [{ type: Input }],
    min: [{ type: Input }],
    step: [{ type: Input }],
    placeholder: [{ type: Input }],
    correctable: [{ type: Input }],
    localeable: [{ type: Input }],
    maxlength: [{ type: Input }],
    stepChange: [{ type: Output }],
    inputEle: [{ type: ViewChild, args: ['input', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,