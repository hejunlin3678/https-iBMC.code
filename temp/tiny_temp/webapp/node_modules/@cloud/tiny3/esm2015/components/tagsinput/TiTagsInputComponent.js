import { Component, ContentChild, ElementRef, Input, TemplateRef, ViewChild } from '@angular/core';
import { TiDominatorComponent } from '../dominator/TiDominatorModule';
import { TiFormComponent } from '../base/TiBaseModule';
import { TiDropsearchComponent } from '../dropsearch/TiDropsearchModule';
import { TiKeymap } from '../../utils/Util';
/**
 * TagsInput标签输入组件
 *
 * TagsInput组件主要实现了一个可以输入标签、可以联想选择标签的功能组件。
 *
 * <example-url>../tiny3demo/#/tagsinput/tagsinput-all</example-url>
 */
export class TiTagsInputComponent extends TiFormComponent {
    constructor() {
        super(...arguments);
        /**
         * 设置联想词条列表的数据
         */
        this.suggestions = [];
        /**
         * 设置输入框提示,在设置提示内容，并且无选中项时显示
         */
        this.placeholder = '';
        /**
         * 设置下拉面板的宽度,默认与dominator对齐 'justified' | 'auto'| string
         */
        this.panelWidth = 'justified';
        /**
         * 支持指定属性作为显示文本
         */
        this.labelKey = 'label';
        /**
         * @ignore
         * input输入框的值
         */
        this.inputValue = ''; // 输入框内容
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        // 推荐在onInit()时调用setFocusableElems(), 但是ngFor/ngIf中的元素在ngAfterViewInit()才能获取到
        this.setFocusableElems([this.dominatorCom.nativeElement, this.inputRef.nativeElement]);
    }
    /**
     * @ignore
     * 处理select事件
     */
    onSelect(event) {
        this.model.push(event);
        this.model = this.model.concat();
        this.selectDrop.searchResult = this.getSuggestions(this.suggestions, this.model);
        // 清空输入框
        this.inputValue = '';
        // 选中项由一行变为两行时，需要重定位
        setTimeout(() => {
            this.selectDrop.rePosition();
        }, 0);
    }
    /**
     * @ignore
     * 处理点击Dominator事件
     */
    onClickDominator() {
        if (this.disabled) {
            return;
        }
        this.inputRef.nativeElement.focus();
    }
    /**
     * @ignore
     * 点击选中项的叉号:从选中项中移除当前选中项
     */
    onDelete(event) {
        this.inputRef.nativeElement.focus();
        // 选中项由两行变为一行时，需要重定位
        setTimeout(() => {
            this.selectDrop.rePosition();
        }, 0);
        this.selectDrop.searchResult = this.getSuggestions(this.suggestions, event.model);
    }
    /**
     * @ignore
     * 输入框失焦时，面板隐藏，根据文本框内容处理是否添加到选中项
     */
    onInputBlur() {
        this.selectDrop.hide();
        const value = this.inputValue;
        // 清空输入框
        this.inputValue = '';
        // 输入框为空时或者当前输入框内容对应的标签已经在选中列表中了
        if (value.trim() === '' || this.findFirstIndex(this.model, 'label', value) !== -1) {
            return;
        }
        // 将输入框内容添加到选中标签中
        this.addTagToSelected(value);
    }
    /**
     * @ignore
     * 处理input框聚焦事件
     */
    onInputFocus(event) {
        this.selectDrop.searchResult = this.getSuggestions(this.suggestions, this.model);
        // 视图绘制早于变量更新，变量更新后下拉定位不正确， 需要延时处理
        setTimeout(() => {
            this.showSelectDrop();
        }, 0);
    }
    /**
     * @ignore
     * 处理input输入框keyup快捷键功能
     */
    onInputKeyup(event) {
        if (event.keyCode === TiKeymap.KEY_ENTER || event.keyCode === TiKeymap.KEY_NUMPAD_ENTER) {
            this.responseEnter(event);
        }
    }
    /**
     * @ignore
     * 处理input输入框keydown快捷键功能
     * 回删键只能在keydown中处理：因为回删时，在keydown时输入框为当前值，keyup时为删除后的值
     * 比如输入一个字符，回删，获取的应该是回删前的一个字符，而不是没有删除后的
     */
    onInputKeydown(event) {
        if (event.keyCode === TiKeymap.KEY_BACKSPACE) {
            this.responseBackspace(event);
        }
    }
    /**
     * @ignore
     * 输入框内容变化时的处理
     * @param inputValue
     */
    onInputChange(inputValue) {
        // 过滤出匹配项
        this.selectDrop.searchWordChange(inputValue);
        // 从匹配项中移除已选中项
        this.selectDrop.searchResult = this.getSuggestions(this.selectDrop.searchResult, this.model);
        // 当没有匹配项时面板隐藏
        if (this.selectDrop.searchResult.length === 0) {
            this.selectDrop.hide();
        }
    }
    /**
     * 处理input输入框enter键功能
     * @param event
     */
    responseEnter(event) {
        this.selectDrop.hide();
        // 获取输入框的值
        const value = this.inputValue;
        // 清空input框的内容
        this.inputValue = '';
        // 输入框为空时或者当前输入框内容对应的标签已经在选中列表中了
        if (value.trim() === '' || this.findFirstIndex(this.model, 'label', value) !== -1) {
            this.showSelectDrop();
            return;
        }
        // 将输入框内容添加到选中标签中
        this.addTagToSelected(value);
        // 将选中项与下拉选项对比，从下拉选项中提出选中项
        this.selectDrop.searchResult = this.getSuggestions(this.suggestions, this.model);
        this.showSelectDrop();
    }
    /**
     * 处理input输入框回删键功能
     * @param event
     */
    responseBackspace(event) {
        this.selectDrop.hide();
        // 面板关闭时
        if (!this.selectDrop.isShow) {
            this.showSelectDrop();
            // 选中项由两行变为一行时，需要重定位
            setTimeout(() => {
                this.selectDrop.rePosition();
            }, 0);
        }
        const value = this.inputRef.nativeElement.value;
        // 输入框值不为空字符串时
        if (value !== '') {
            return;
        }
        // 获取当前选中项的长度
        const modelLength = this.model.length;
        // 当前已经没有选中项时，不做处理
        if (modelLength === 0) {
            return;
        }
        const lastSelected = this.model[modelLength - 1];
        const index = this.suggestions.indexOf(lastSelected);
        // 从选中项中删除
        this.model.pop();
        this.model = this.model.concat();
        // 将要从选中项删除的最后一项是下拉选项中的一项时，将其添加到现有的下拉选项中;
        // 如果是用户自己创建的，则不放入下拉项中
        if (index !== -1) {
            this.selectDrop.searchResult = this.getSuggestions(this.suggestions, this.model);
        }
    }
    /**
     * 根据数组中属性找是否有匹配项
     * @param arr 需要匹配的数组
     * @param key 需要查找的属性
     * @param value 属性值
     * @returns
     */
    findFirstIndex(arr, key, value) {
        if (!(arr instanceof Array)) {
            return -1;
        }
        for (let i = 0; i < arr.length; i++) {
            if (arr[i][key] === value) {
                return i;
            }
        }
        return -1;
    }
    /**
     * 将输入框内容添加到选中标签中
     * @param inputValue 输入框的内容
     */
    addTagToSelected(inputValue) {
        const index = this.findFirstIndex(this.suggestions, 'label', inputValue);
        const newTag = index === -1 ? { id: inputValue, label: inputValue } : this.suggestions[index];
        this.model.push(newTag);
        this.model = this.model.concat();
    }
    /**
     * 从suggestions中删除选中项
     */
    getSuggestions(suggestions, selected) {
        const newSuggestions = !(suggestions instanceof Array) ? [] : suggestions.concat(); // 使用数组的concat方法，实现深拷贝
        let index;
        for (const select of selected) {
            index = newSuggestions.indexOf(select);
            if (index !== -1) { // 选中项如果在下拉列表中存在，则删除
                newSuggestions.splice(index, 1);
            }
        }
        return newSuggestions;
    }
    /**
     * @ignore
     * 展开面板时设置下拉选中项和hoverOption
     */
    showSelectDrop() {
        // 设置selectDrop的选中项
        this.selectDrop.listCom.model = undefined;
        // 显示下拉面板
        if (this.selectDrop.searchResult.length > 0) {
            this.selectDrop.show();
        }
        // 不设置待选中项
        this.selectDrop.listCom.hoverOption = undefined;
    }
}
TiTagsInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-tags-input',
                template: "<ti-dominator\r\n                type=\"tagsinput\"\r\n                multiple=\"true\"\r\n                class=\"ti3-dominator-tagsinput\"\r\n                [id]=\"appendId('dominator')\"\r\n                [(ngModel)]=\"model\"\r\n                [disabled]= \"disabled\"\r\n                (delete)=\"onDelete($event)\"\r\n                (focus)=\"onClickDominator()\"\r\n                (click)=\"onClickDominator()\">\r\n                <ng-template let-item>\r\n                        <ng-container *ngTemplateOutlet=\"commonTemplate; context: {$implicit: item}\">\r\n                        </ng-container>\r\n                </ng-template>\r\n                <input  #input\r\n                        tiText\r\n                        noborder\r\n                        type=\"text\"\r\n                        autocorrect=\"off\"\r\n                        autocapitalize=\"off\"\r\n                        spellcheck=\"false\"\r\n                        [disabled]= \"disabled\"\r\n                        [placeholder]=\"model && model.length === 0 ? placeholder : ''\"\r\n                        [(ngModel)]=\"inputValue\"\r\n                        (ngModelChange)=\"onInputChange($event)\"\r\n                        [ngStyle]=\"{width: (model && model.length === 0) || (inputValue.length > 0) ? '100%' : '21px'}\"\r\n                        (focus)=\"onInputFocus($event)\"\r\n                        (blur)=\"onInputBlur()\"\r\n                        (keyup)=\"onInputKeyup($event)\"\r\n                        (keydown)=\"onInputKeydown($event)\">\r\n</ti-dominator>\r\n<ti-dropsearch\r\n                type=\"suggestion\"\r\n                [id]=\"appendId('droplist')\"\r\n                [labelKey]=\"labelKey\"\r\n                [panelWidth]=\"panelWidth\"\r\n                [options]=\"suggestions\"\r\n                [dominatorElem]=\"dominatorCom.nativeElement\"\r\n                [isShowAfterSelect]=\"true\"\r\n                (select)=\"onSelect($event)\">\r\n                <ng-template let-item let-i=index>\r\n                        <ng-container *ngTemplateOutlet=\"commonTemplate; context: {$implicit: item, index: i}\"></ng-container>\r\n                 </ng-template>\r\n</ti-dropsearch>\r\n\r\n<ng-template #commonTemplate let-item let-i=index>\r\n        <ng-container *ngIf=\"itemTemplate else labelTemplate\">\r\n                <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item, index: i}\">\r\n                </ng-container>\r\n        </ng-container>\r\n        <ng-template #labelTemplate><span [title]=\"item[labelKey]\">{{item[labelKey]}}</span></ng-template>\r\n</ng-template>\r\n",
                providers: [TiFormComponent.getValueAccessor(TiTagsInputComponent)],
                styles: [".ti3-compnent-container-border,:host{-ms-box-sizing:border-box;border:1px solid;border-radius:var(--ti-input-border-radius);box-sizing:border-box;display:inline-block}.ti3-compnent-container-border:not([disabled]),:host:not([disabled]){background-color:var(--ti-input-bg-color);border-color:var(--ti-input-border-color)}.ti3-compnent-container-border:not([disabled]):hover,:host:not([disabled]):hover{border-color:var(--ti-input-border-color-hover)}.ti3-compnent-container-border:not([disabled])[tiFocused],:host:not([disabled])[tiFocused]{border-color:var(--ti-input-border-color-focus)}.ti3-compnent-container-border[disabled],:host[disabled]{background-color:var(--ti-input-bg-color-disabled);border-color:var(--ti-input-border-color-disabled);cursor:not-allowed!important}.ti3-dominator-tagsinput input[tiText]{-ms-box-sizing:border-box;background-color:transparent;box-sizing:border-box;color:var(--ti-common-color-text-primary);float:left;height:calc(var(--ti-input-height) - 4px);max-width:160px;padding:0 var(--ti-input-padding-horizontal)}"]
            },] }
];
TiTagsInputComponent.propDecorators = {
    suggestions: [{ type: Input }],
    placeholder: [{ type: Input }],
    panelWidth: [{ type: Input }],
    labelKey: [{ type: Input }],
    inputRef: [{ type: ViewChild, args: ['input', { static: true },] }],
    itemTemplate: [{ type: ContentChild, args: [TemplateRef, /* TODO: add static flag */ { static: true },] }],
    dominatorCom: [{ type: ViewChild, args: [TiDominatorComponent, { static: true },] }],
    selectDrop: [{ type: ViewChild, args: [TiDropsearchComponent, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,