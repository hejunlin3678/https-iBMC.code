import { Component, ElementRef, EventEmitter, Output, ViewChild } from '@angular/core';
import { TiFormComponent } from '../base/TiBaseModule';
/**
 * Switch开关组件
 *
 * 用于实现页面中的开关操作。
 *
 * <example-url>../tiny3demo/#/switch/switch-all</example-url>
 */
export class TiSwitchComponent extends TiFormComponent {
    constructor() {
        super(...arguments);
        /**
         * 组件开关状态即将切换之前发出事件:。组件状态不改变，后续全权交给组件调用者处理。
         */
        this.beforeChange = new EventEmitter();
        this.initialized = false;
        this.hasAnimation = false;
    }
    ngOnInit() {
        // 基类中做了设置宿主id的操作
        super.ngOnInit();
        this.setFocusableElems([this.aRef.nativeElement]);
    }
    ngOnModelChange(value) {
        super.ngOnModelChange(value);
        if (value === null) { // 以 ngModel 的形式传入值时, writeValue首次传入null
            return;
        }
        if (this.initialized && !this.hasAnimation) { // 保证初始时没有动画
            this.renderer.addClass(this.aRef.nativeElement, 'ti3-switch-animation');
            this.hasAnimation = true;
        }
        this.initialized = true;
    }
    /**
     * 切换开关状态
     */
    toggle() {
        if (this.beforeChange.observers.length === 0) { // 用户未定义beforeChange
            this.model = !this.model;
        }
        else {
            this.beforeChange.emit(this);
        }
    }
    /**
     * @ignore
     * 点击事件
     */
    onClick() {
        if (!this.disabled) {
            this.toggle();
        }
    }
}
TiSwitchComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-switch',
                template: "<a #a\r\n    role=\"radio\"\r\n    class=\"ti3-switch\"\r\n    unselectable=\"on\"\r\n    href=\"javascript:void(0)\"\r\n    oncontextmenu=\"return false\"\r\n    (click)=\"onClick()\"\r\n    [ngClass]=\"{\r\n    'ti3-switch-off': !model, \r\n    'ti3-switch-on': model}\"\r\n    [id]=\"appendId('awrapper')\">\r\n    <div class=\"ti3-switch-track\"></div>\r\n    <span class=\"ti3-switch-pointer\"></span>\r\n</a>",
                host: {
                    '[class.ti3-switch-container]': 'true'
                },
                providers: [TiFormComponent.getValueAccessor(TiSwitchComponent)],
                styles: ["::ng-deep :root{--ti-switch-height:20px;--ti-switch-pointer-off-left:2px;--ti-switch-pointer-on-left:20px;--ti-switch-pointer-top:2px;--ti-switch-pointer-width:16px;--ti-switch-width:38px}.ti3-switch,:host.ti3-switch-container{display:inline-block;height:var(--ti-switch-height)}.ti3-switch{-ms-user-select:none;-webkit-user-select:none;cursor:pointer;position:relative;user-select:none;width:var(--ti-switch-width)}.ti3-switch .ti3-switch-track{border-radius:var(--ti-switch-height);height:100%;width:100%;z-index:0}.ti3-switch .ti3-switch-pointer,.ti3-switch .ti3-switch-track{-ms-box-sizing:border-box;box-sizing:border-box;position:absolute}.ti3-switch .ti3-switch-pointer{background:var(--ti-common-color-bg-white-normal);border-radius:50%;display:inline-block;height:var(--ti-switch-pointer-width);top:var(--ti-switch-pointer-top);width:var(--ti-switch-pointer-width);z-index:8}.ti3-switch.ti3-switch-off .ti3-switch-track{background:var(--ti-switch-track-off-bg-color)}.ti3-switch.ti3-switch-off .ti3-switch-pointer{left:var(--ti-switch-pointer-off-left)}.ti3-switch.ti3-switch-on .ti3-switch-track{background:var(--ti-switch-track-on-bg-color)}.ti3-switch.ti3-switch-on .ti3-switch-pointer{left:var(--ti-switch-pointer-on-left)}.ti3-switch[disabled]{cursor:not-allowed}.ti3-switch[disabled] .ti3-switch-pointer{background:var(--ti-common-color-bg-disabled)}.ti3-switch[disabled].ti3-switch-on .ti3-switch-track{background-color:var(--ti-common-color-bg-light-emphasize)}.ti3-switch[disabled].ti3-switch-off .ti3-switch-track{background-color:var(--ti-switch-track-bg-color-disabled)}.ti3-switch.ti3-switch-animation .ti3-switch-pointer,.ti3-switch.ti3-switch-animation .ti3-switch-track{transition:all .25s linear}"]
            },] }
];
TiSwitchComponent.propDecorators = {
    beforeChange: [{ type: Output }],
    aRef: [{ type: ViewChild, args: ['a', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGlTd2l0Y2hDb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9AY2xvdWQvdGlueTMvY29tcG9uZW50cy9zd2l0Y2gvVGlTd2l0Y2hDb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3ZEOzs7Ozs7R0FNRztBQVVILE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxlQUFlO0lBVHREOztRQVVJOztXQUVHO1FBQ2dCLGlCQUFZLEdBQW9DLElBQUksWUFBWSxFQUFxQixDQUFDO1FBTWpHLGdCQUFXLEdBQVksS0FBSyxDQUFDO1FBQzdCLGlCQUFZLEdBQVksS0FBSyxDQUFDO0lBeUMxQyxDQUFDO0lBdkNHLFFBQVE7UUFDSixpQkFBaUI7UUFDakIsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsZUFBZSxDQUFDLEtBQWM7UUFDMUIsS0FBSyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QixJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUUsRUFBRSx3Q0FBd0M7WUFDMUQsT0FBTztTQUNWO1FBRUQsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFFLFlBQVk7WUFDdEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztZQUN4RSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztTQUM1QjtRQUNELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQzVCLENBQUM7SUFFRDs7T0FFRztJQUNLLE1BQU07UUFFVixJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsRUFBQyxvQkFBb0I7WUFDL0QsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDNUI7YUFBTTtZQUNILElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2hDO0lBQ0wsQ0FBQztJQUNEOzs7T0FHRztJQUNJLE9BQU87UUFDVixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNoQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDakI7SUFDTCxDQUFDOzs7WUE1REosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxXQUFXO2dCQUNyQiwwYUFBNEI7Z0JBRTVCLElBQUksRUFBRTtvQkFDRiw4QkFBOEIsRUFBRSxNQUFNO2lCQUN6QztnQkFDRCxTQUFTLEVBQUUsQ0FBRSxlQUFlLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBRTs7YUFDckU7OzsyQkFLSSxNQUFNO21CQUlOLFNBQVMsU0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRpRm9ybUNvbXBvbmVudCB9IGZyb20gJy4uL2Jhc2UvVGlCYXNlTW9kdWxlJztcclxuLyoqXHJcbiAqIFN3aXRjaOW8gOWFs+e7hOS7tlxyXG4gKlxyXG4gKiDnlKjkuo7lrp7njrDpobXpnaLkuK3nmoTlvIDlhbPmk43kvZzjgIJcclxuICpcclxuICogPGV4YW1wbGUtdXJsPi4uL3RpbnkzZGVtby8jL3N3aXRjaC9zd2l0Y2gtYWxsPC9leGFtcGxlLXVybD5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd0aS1zd2l0Y2gnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL3N3aXRjaC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL3N3aXRjaC5sZXNzJ10sXHJcbiAgICBob3N0OiB7XHJcbiAgICAgICAgJ1tjbGFzcy50aTMtc3dpdGNoLWNvbnRhaW5lcl0nOiAndHJ1ZSdcclxuICAgIH0sXHJcbiAgICBwcm92aWRlcnM6IFsgVGlGb3JtQ29tcG9uZW50LmdldFZhbHVlQWNjZXNzb3IoVGlTd2l0Y2hDb21wb25lbnQpIF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUaVN3aXRjaENvbXBvbmVudCBleHRlbmRzIFRpRm9ybUNvbXBvbmVudCB7XHJcbiAgICAvKipcclxuICAgICAqIOe7hOS7tuW8gOWFs+eKtuaAgeWNs+WwhuWIh+aNouS5i+WJjeWPkeWHuuS6i+S7tjrjgILnu4Tku7bnirbmgIHkuI3mlLnlj5jvvIzlkI7nu63lhajmnYPkuqTnu5nnu4Tku7bosIPnlKjogIXlpITnkIbjgIJcclxuICAgICAqL1xyXG4gICAgQE91dHB1dCgpIHJlYWRvbmx5IGJlZm9yZUNoYW5nZTogRXZlbnRFbWl0dGVyPFRpU3dpdGNoQ29tcG9uZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8VGlTd2l0Y2hDb21wb25lbnQ+KCk7XHJcbiAgICAvKipcclxuICAgICAqIEBpZ25vcmVcclxuICAgICAqL1xyXG4gICAgQFZpZXdDaGlsZCgnYScsIHsgc3RhdGljOiB0cnVlIH0pIGFSZWY6IEVsZW1lbnRSZWY7XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBoYXNBbmltYXRpb246IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICAvLyDln7rnsbvkuK3lgZrkuoborr7nva7lrr/kuLtpZOeahOaTjeS9nFxyXG4gICAgICAgIHN1cGVyLm5nT25Jbml0KCk7XHJcbiAgICAgICAgdGhpcy5zZXRGb2N1c2FibGVFbGVtcyhbdGhpcy5hUmVmLm5hdGl2ZUVsZW1lbnRdKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uTW9kZWxDaGFuZ2UodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5uZ09uTW9kZWxDaGFuZ2UodmFsdWUpO1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgeyAvLyDku6UgbmdNb2RlbCDnmoTlvaLlvI/kvKDlhaXlgLzml7YsIHdyaXRlVmFsdWXpppbmrKHkvKDlhaVudWxsXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmluaXRpYWxpemVkICYmICF0aGlzLmhhc0FuaW1hdGlvbikgeyAvLyDkv53or4HliJ3lp4vml7bmsqHmnInliqjnlLtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmFSZWYubmF0aXZlRWxlbWVudCwgJ3RpMy1zd2l0Y2gtYW5pbWF0aW9uJyk7XHJcbiAgICAgICAgICAgIHRoaXMuaGFzQW5pbWF0aW9uID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliIfmjaLlvIDlhbPnirbmgIFcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSB0b2dnbGUoKTogdm9pZCB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmJlZm9yZUNoYW5nZS5vYnNlcnZlcnMubGVuZ3RoID09PSAwKSB7Ly8g55So5oi35pyq5a6a5LmJYmVmb3JlQ2hhbmdlXHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwgPSAhdGhpcy5tb2RlbDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmJlZm9yZUNoYW5nZS5lbWl0KHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZVxyXG4gICAgICog54K55Ye75LqL5Lu2XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvbkNsaWNrKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=