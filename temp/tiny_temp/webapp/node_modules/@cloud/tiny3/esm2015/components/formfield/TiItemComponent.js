import { ChangeDetectorRef, Component, ElementRef, Input } from '@angular/core';
import { TiFormfieldComponent } from './TiFormfieldComponent';
import { Util } from '../../utils/Util';
/**
 * 本组件嵌在 tiFormfield 中使用，包裹着单个表单条目的所有内容
 */
export class TiItemComponent {
    constructor(formfield, elementRef, changeDetector) {
        this.formfield = formfield;
        this.elementRef = elementRef;
        this.changeDetector = changeDetector;
        /**
         * 设置当前表单条目是否是必填，如果是必填，则前面会显示 *
         */
        this.required = false;
        /**
         * 设置当前表单条目是否显示
         *
         * tiItem 不支持 ngIf 和 hidden，由该接口来控制单个表单条目的显示与否
         */
        this.show = true;
        /**
         * 行合并，设置当前表单条目可横跨的行数
         */
        this.rowspan = 1;
        /**
         * 列合并，设置当前表单条目可横跨的列数
         */
        this.colspan = 1;
        /**
         * @ignore
         */
        this.hasLabel = false;
        /**
         * @ignore
         */
        this.gapWidth = '0px';
    }
    // 有两处改变label
    // 1. label接口传入的值
    // 2. 在ti-item-label组件中修改label的值
    /**
     * 设置当前表单条目的label文本，支持简单字符串文本，如果开发者希望基于html定制文本，
     * 建议使用[TiItemLabelComponent]{@link ./TiItemLabelComponent.html}组件
     *
     * 类型：string | Node
     */
    set label(labelParm) {
        this.setItemLabel(labelParm);
    }
    ngOnInit() {
        this.formfield.itemTotal++;
        this.decorateItem();
        if (this.show) {
            this.formfield.addCntItem(this);
        }
    }
    ngOnChanges(changes) {
        const showObj = changes['show'];
        if (showObj && !showObj.firstChange) {
            if (showObj.currentValue) {
                this.formfield.addCntItem(this);
            }
            else {
                this.formfield.removeCntItem(this);
            }
        }
    }
    ngOnDestroy() {
        // 在外部将ti-iem销毁时，应将此item从items数组中去掉
        this.formfield.removeCntItem(this);
        this.changeDetector.detach();
    }
    decorateItem() {
        this.itemIndex = Util.isNumber(this.index) ? this.index : this.formfield.itemTotal - 1;
        this.element = this.elementRef.nativeElement;
        this.verticalAlignObj = Util.isUndefined(this.verticalAlign) ?
            {} : { 'vertical-align': this.verticalAlign };
        // item-label的自定义的样式（垂直对齐方式、宽度）
        this.labelStyle = {
            'vertical-align': this.verticalAlign,
            width: this.formfield.labelWidth
        };
        // item-content的自定义的样式（垂直对齐方式）
        this.contentStyle = {
            'vertical-align': this.verticalAlign
        };
        // 为纯文本描述类表单时，可设置 item 的行高
        if (this.formfield.type === this.formfield.textType) {
            this.labelStyle['line-height'] = this.formfield.textLineHeight;
            this.contentStyle['line-height'] = this.formfield.textLineHeight;
        }
        // item 自定义行列合并样式
        if (this.formfield.useGrid) {
            this.itemStyle = { 'grid-area': `span ${this.rowspan} / span ${this.colspan}` };
        }
    }
    setItemLabel(label) {
        if (label) {
            this.hasLabel = true;
            this.itemLabel = label;
        }
        else {
            this.hasLabel = false;
        }
        this.changeDetector.detectChanges();
    }
}
TiItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-item',
                template: "<ng-content></ng-content>"
            },] }
];
TiItemComponent.ctorParameters = () => [
    { type: TiFormfieldComponent },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
TiItemComponent.propDecorators = {
    required: [{ type: Input }],
    verticalAlign: [{ type: Input }],
    show: [{ type: Input }],
    rowspan: [{ type: Input }],
    colspan: [{ type: Input }],
    index: [{ type: Input }],
    label: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,