import { Component, ElementRef, HostListener, Input, IterableDiffers, Renderer2 } from '@angular/core';
import { TiCheckboxComponent } from '../checkbox/TiCheckboxModule';
import { ObservableMap, ObservableSet, Util } from '../../utils/Util';
/**
 * Checkitem多选选项组件，尽管这是一个组件，使用时像属性指令。
 *
 */
export class TiCheckitemComponent extends TiCheckboxComponent {
    constructor(hostRef, renderer, iterableDiffers) {
        // 是因为group item两个子类都用到differs，所以放在父类这里。
        super(hostRef, renderer);
        this.hostRef = hostRef;
        this.renderer = renderer;
        this.iterableDiffers = iterableDiffers;
        this.globeCheckedMapObserverItemFn = (item, value, isAdd, from) => {
            if (from !== this && item === this.item && isAdd) {
                // 从全局同步过来的，可能是半选
                const lastChecked = this.nativeElement.checked;
                const lastIndeterminate = (this.nativeElement.indeterminate === true) ? true : false; // 将undefined也转为false。
                this.nativeElement.checked = (value === true);
                this.nativeElement.indeterminate = (value === null);
                if (this.nativeElement.checked !== lastChecked || this.nativeElement.indeterminate !== lastIndeterminate) {
                    Util.trigger(this.nativeElement, 'change'); // 必须主动触发change事件，否则ngModel不更新。
                }
            }
        };
    }
    /**
     * @ignore
     * 监听change事件，会多触发一次DoCheck。 //TODO: 不让这条HostListener('change', ['$event'])在文档显示
     * @param checked
     * @returns
     */
    onHostChange(checked) {
        // item checked同步到globeCheckedSet
        if (!this.item) {
            return;
        }
        this.nativeElement.checked ?
            TiCheckitemComponent.globeCheckedMap.set(this.item, true, this) :
            this.nativeElement.indeterminate ?
                TiCheckitemComponent.globeCheckedMap.set(this.item, null, this) :
                TiCheckitemComponent.globeCheckedMap.set(this.item, false, this);
        // item checked同步到beCheckedSet
        if (this.beCheckedSet) {
            const value = this.getValue(this.item);
            this.nativeElement.checked ? this.beCheckedSet.add(value) : this.beCheckedSet.delete(value);
        }
    }
    ngOnInit() {
        super.ngOnInit();
        this.initBeCheckedSet();
        if (!this.item) { // 用户忘了设定，或者继承的子类无需设定
            return;
        }
        this.initGlobeCheckedSetItem();
        this.setCheckedItem();
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        // 外部直接给item重新赋值了。
        if (changes['item'] && !changes['item'].isFirstChange()) {
            // 删除已使用的静态资源。当然，这里有可能误删除。因为此item还在别处使用。   全选按钮那里，有纠正机制。
            this.deleteGlobeRef(changes['item'].previousValue);
            // 添加新的资源
            this.setCheckedItem();
            // 重新设置disabled
            this.setDisabledStateGlobe();
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        // 删除已使用的静态资源
        this.deleteGlobeRef(this.item);
        // 解除监听
        TiCheckitemComponent.globeCheckedMap.removeObserver(this.globeCheckedMapObserverItemFn);
    }
    // 删除已使用的静态资源
    deleteGlobeRef(item) {
        TiCheckitemComponent.globeCheckedMap.delete(this.item);
        TiCheckitemComponent.globeDisabledSet.delete(this.item);
    }
    ngDoCheck() {
        super.ngDoCheck();
        if (!this.beCheckedSet) {
            return;
        }
        const beCheckedsChanges = this.beCheckedsDiffer.diff(this.beCheckeds);
        if (beCheckedsChanges) { // beCheckeds同步到beCheckedSet
            beCheckedsChanges.forEachAddedItem(record => {
                this.beCheckedSet.add(record.item);
            });
            beCheckedsChanges.forEachRemovedItem(record => {
                this.beCheckedSet.delete(record.item);
            });
        }
    }
    initBeCheckedSet() {
        if (!this.beCheckeds) {
            return;
        }
        this.beCheckedsDiffer = this.iterableDiffers.find(this.beCheckeds).create(null);
        this.beCheckedSet = new ObservableSet(this.beCheckeds); // TODO:写共用的Array/Set转Set
        this.beCheckedSet.addObserver((item, isAdd) => {
            // beCheckedSet的变化同步到beCheckeds
            if (this.beCheckeds instanceof Set) {
                isAdd ? this.beCheckeds.add(item) : this.beCheckeds.delete(item);
            }
            else if (this.beCheckeds instanceof Array) { // TODO:写公用的Array remove函数
                const index = this.beCheckeds.indexOf(item);
                if (isAdd && index === -1) {
                    this.beCheckeds.push(item);
                }
                else if (!isAdd && index !== -1) {
                    this.beCheckeds.splice(index, 1);
                }
            }
            // checkedSet通知到item checked
            this.setCheckedItem();
        });
    }
    /**
     * globeCheckedSet同步到item checked
     */
    initGlobeCheckedSetItem() {
        // 初始化时，不往globeCheckedSet放值，是因为group优先级更高。
        TiCheckitemComponent.globeCheckedMap.addObserver(this.globeCheckedMapObserverItemFn);
    }
    setCheckedItem() {
        if (!this.item) {
            return;
        }
        const lastChecked = this.nativeElement.checked;
        const value = this.getValue(this.item);
        // 如果beCheckeds存在，优先级更高，以beCheckeds为准。
        this.nativeElement.checked = this.beCheckedSet ? this.beCheckedSet.has(value) : TiCheckitemComponent.globeCheckedMap.get(this.item);
        // 这里应该不用考虑半选吧？
        if (this.nativeElement.checked !== lastChecked) {
            Util.trigger(this.nativeElement, 'change'); // 必须主动触发change事件，否则ngModel不更新。
        }
    }
    /**
     * @ignore
     */
    setDisabledState(isDisabled) {
        super.setDisabledState(isDisabled);
        this.setDisabledStateGlobe();
    }
    setDisabledStateGlobe() {
        this.nativeElement.disabled ? TiCheckitemComponent.globeDisabledSet.add(this.item)
            : TiCheckitemComponent.globeDisabledSet.delete(this.item);
    }
    /**
     * 输入：某个数据项
     * 输出：当有valueKey,返回值基于valueKey；当没有valueKey时，返回输入值
     */
    getValue(item) {
        return this.valueKey ? item[this.valueKey] : item;
    }
}
/**
 * @ignore
 * 全局item数据(多个group的item都在这里)
 */
TiCheckitemComponent.globeCheckedMap = new ObservableMap();
/**
 * @ignore
 * 全局灰化禁用数据(多个group的item都在这里)
 */
TiCheckitemComponent.globeDisabledSet = new ObservableSet();
TiCheckitemComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: '[tiCheckitem]',
                template: "<!--Tiny3\u4F18\u5316\uFF1A\u51CF\u5C11label\u5D4C\u5957\uFF0C\u53BB\u9664\u5185\u5C42label-->\r\n<label #labelRef class='ti3-checkbox' [for]='id'  [id]=\"appendId('checkbox')\">\r\n    <!-- \u517C\u5BB9IE11\u6DFB\u52A0spacebar\u4E8B\u4EF6 -->\r\n    <span #proxyRef class='ti3-checkbox-skin ti3-icon ti3-icon-checkmark' tiOutline\r\n        (keydown.spacebar)=\"onSpaceKeydown($event)\"  (keyup.spacebar)=\"onSpaceKeyup($event)\"\r\n        (keydown.space)=\"onSpaceKeydown($event)\"  (keyup.space)=\"onSpaceKeyup($event)\"></span>\r\n    <span class='ti3-checkbox-label' [id]=\"appendId('label')\">{{label}}</span>\r\n</label>",
                // tslint:disable-next-line:use-host-property-decorator
                host: {
                    'tiCheckbox': '' // 给宿主元素添加tiCheckbox属性，实现定制样式
                },
                styles: [":hostinput[type=checkbox][tiCheckbox]{display:none!important}:hostinput[type=checkbox][tiCheckbox]+.ti3-checkbox{-ms-box-sizing:border-box;-ms-user-select:none;-webkit-user-select:none;box-sizing:border-box;cursor:pointer;display:inline-block;font-weight:400;line-height:1em;margin-bottom:0;user-select:none;vertical-align:middle}:hostinput[type=checkbox][tiCheckbox]+.ti3-checkbox .ti3-checkbox-skin{-ms-box-sizing:border-box;background-color:var(--ti-checkbox-bg-color);border:1px solid var(--ti-checkbox-border-color);border-collapse:separate;border-radius:2px;box-sizing:border-box;color:transparent;display:inline-block;height:var(--ti-checkbox-size);line-height:var(--ti-checkbox-mark-size);margin-bottom:0;margin-right:var(--ti-checkbox-label-right-space);position:relative;text-align:center;transition:background-color .15s,border-color .15s;vertical-align:middle;width:var(--ti-checkbox-size)}:hostinput[type=checkbox][tiCheckbox]+.ti3-checkbox .ti3-checkbox-label{-ms-user-select:none;-webkit-user-select:none;color:var(--ti-checkbox-label-color);display:inline;margin-bottom:0;user-select:none;vertical-align:middle}:hostinput[type=checkbox][tiCheckbox]:not([disabled]):checked+.ti3-checkbox .ti3-checkbox-skin{background-color:var(--ti-checkbox-bg-color-checked);border-color:var(--ti-checkbox-border-color-checked);color:var(--ti-checkbox-label-color-checked)}:hostinput[type=checkbox][tiCheckbox]:not([disabled]):checked+.ti3-checkbox .ti3-checkbox-skin:focus,:hostinput[type=checkbox][tiCheckbox]:not([disabled]):checked+.ti3-checkbox .ti3-checkbox-skin:hover{background-color:var(--ti-checkbox-bg-color-checked-hover);border-color:var(--ti-checkbox-bg-color-checked-hover)}:hostinput[type=checkbox][tiCheckbox]:not([disabled]):checked+.ti3-checkbox .ti3-checkbox-skin:active{background-color:var(--ti-checkbox-bg-color-checked-active);border-color:var(--ti-checkbox-bg-color-checked-active)}:hostinput[type=checkbox][tiCheckbox]:not([disabled]):not(:checked)+.ti3-checkbox .ti3-checkbox-skin:focus,:hostinput[type=checkbox][tiCheckbox]:not([disabled]):not(:checked)+.ti3-checkbox .ti3-checkbox-skin:hover{border-color:var(--ti-checkbox-border-color-hover)}:hostinput[type=checkbox][tiCheckbox]:not([disabled]):not(:checked)+.ti3-checkbox .ti3-checkbox-skin:active{background-color:var(--ti-checkbox-bg-color-unchecked-active);border-color:var(--ti-checkbox-border-color-unchecked-active)}:hostinput[type=checkbox][tiCheckbox]:not([disabled]):indeterminate+.ti3-checkbox .ti3-checkbox-skin{background-color:var(--ti-checkbox-partial-color-checked);border-color:var(--ti-checkbox-partial-color-checked)}:hostinput[type=checkbox][tiCheckbox]:not([disabled]):indeterminate+.ti3-checkbox .ti3-checkbox-skin:before{background-color:var(--ti-checkbox-label-color-checked)}:hostinput[type=checkbox][tiCheckbox]:not([disabled]):indeterminate+.ti3-checkbox .ti3-checkbox-skin:hover{background-color:var(--ti-checkbox-partial-color-checked-hover);border-color:var(--ti-checkbox-partial-color-checked-hover)}:hostinput[type=checkbox][tiCheckbox][disabled]+.ti3-checkbox{cursor:not-allowed}:hostinput[type=checkbox][tiCheckbox][disabled]+.ti3-checkbox .ti3-checkbox-skin{background-color:var(--ti-checkbox-label-color-checked);outline:none}:hostinput[type=checkbox][tiCheckbox][disabled]+.ti3-checkbox .ti3-checkbox-label{color:var(--ti-checkbox-label-color-disabled)}:hostinput[type=checkbox][tiCheckbox][disabled]:checked+.ti3-checkbox .ti3-checkbox-skin{background-color:var(--ti-checkbox-bg-color-disable);border-color:var(--ti-checkbox-border-color-checked-disabled);color:var(--ti-checkbox-mark-color-disabled)}:hostinput[type=checkbox][tiCheckbox][disabled]:not(:checked)+.ti3-checkbox .ti3-checkbox-skin{background-color:var(--ti-checkbox-bg-color-disable);border-color:var(--ti-checkbox-border-color-unchecked-disabled);color:transparent}:hostinput[type=checkbox][tiCheckbox][disabled]:indeterminate+.ti3-checkbox .ti3-checkbox-skin:before{background-color:var(--ti-checkbox-partial-color-checked-disabled)}:hostinput[type=checkbox][tiCheckbox]:checked+.ti3-checkbox .ti3-checkbox-skin:before{-ms-box-sizing:border-box;border-style:solid;border-width:0 2px 2px 0;box-sizing:border-box;content:\" \";display:table;height:9px;left:21%;position:absolute;top:50%;transform:rotate(45deg) translate(-55%,-55%) scale(1);width:7px}:hostinput[type=checkbox][tiCheckbox]:indeterminate+.ti3-checkbox .ti3-checkbox-skin:before{border-radius:1px;content:\"\";height:var(--ti-checkbox-partial-center-size);left:4px;position:absolute;top:4px;width:var(--ti-checkbox-partial-center-size)}@keyframes rect-selectedAnimate{0%{transform:scale(0);transform-origin:center}to{color:var(--ti-checkbox-label-color-checked);transform:scale(1);transform-origin:center}}@keyframes tick-selectedAnimate{0%{transform:rotate(45deg) translate(-55%,-55%) scale(0);transform-origin:center}to{color:var(--ti-checkbox-label-color-checked);transform:rotate(45deg) translate(-55%,-55%) scale(1);transform-origin:center}}input[type=checkbox][tiCheckbox]:not(:disabled):checked+.ti3-checkbox .ti3-icon-checkmark:before{animation:tick-selectedAnimate .2s var(--ti-timing-function-default) forwards}input[type=checkbox][tiCheckbox]:not(:disabled):indeterminate+.ti3-checkbox .ti3-icon-checkmark:before{animation:rect-selectedAnimate .2s var(--ti-timing-function-default) forwards}input[type=checkbox][tiCheckbox]:not(:disabled):checked+.ti3-checkbox .ti3-checkbox-skin:hover{transition:border-color .2s var(--ti-timing-function-default),background-color .2s var(--ti-timing-function-default)}"]
            },] }
];
TiCheckitemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: IterableDiffers }
];
TiCheckitemComponent.propDecorators = {
    item: [{ type: Input }],
    valueKey: [{ type: Input }],
    beCheckeds: [{ type: Input }],
    onHostChange: [{ type: HostListener, args: ['change', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,