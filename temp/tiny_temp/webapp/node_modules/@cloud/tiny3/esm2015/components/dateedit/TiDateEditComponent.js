import { Component, ElementRef, HostBinding, Input, Renderer2, ViewChild } from '@angular/core';
import { TiBrowser, TiDateUtil, TiKeymap, Util } from '../../utils/Util';
import { TiLocale, TiLocaleFormat } from '../../locale/TiLocaleModule';
import { TiFormComponent } from '../base/TiBaseModule';
/**
 * @ignore
 */
export class TiDateEditComponent extends TiFormComponent {
    constructor(hostRef, render) {
        super(hostRef, render);
        this.hostRef = hostRef;
        this.render = render;
        /**
         * @ignore
         */
        this.display = 'inline-block';
        this.inputValue = '';
        this.MAX = TiDateUtil.maxDate();
        this.MIN = TiDateUtil.minDate();
    }
    writeValue(value) {
        super.writeValue(value);
        // model为null时，输入框不显示内容
        if (value === null) {
            return;
        }
        // 传入的model值是非日期时，设置为当前日期
        if (!TiDateUtil.isDate(value)) {
            this.model = new Date();
        }
        else if (TiDateUtil.isBigger(value, this.max)) { // 如果大于最大值，设置为最大值
            this.model = this.max;
        }
        else if (TiDateUtil.isSmaller(value, this.min)) { // 小于最小值，设置为最小值
            this.model = this.min;
        }
    }
    // model值变化时的回调: dateedit中inputValue变化时未能及时渲染到页面上
    ngOnModelChange() {
        setTimeout(() => {
            this.formatValue();
        }, 0);
    }
    ngOnInit() {
        super.ngOnInit();
        // 设置聚焦元素为input
        this.setFocusableElems([this.inputRef.nativeElement]);
        // format接口校验:对时间日期进行国际化处理
        this.validateFormat();
        // 最大最小值校验
        this.validateMinAndMax();
        if (!Util.isUndefined(this.format)) {
            this.setPlacehoderText();
        }
        this.oldMinvalue = this.min;
        this.oldMaxvalue = this.max;
    }
    ngOnChanges(changes) {
        // format支持动态变更
        if (changes['format'] && !changes['format'].firstChange) {
            // 新的format是非法时，format值保持之前值不变
            if (!Util.isString(changes['format'].currentValue) && !Util.isString(changes['format'].currentValue.date)) {
                this.format = changes['format'].previousValue;
                return;
            }
            if (!Util.isString(changes['format'].currentValue)) {
                this.format = changes['format'].currentValue.date;
            }
            this.setPlacehoderText();
            this.formatValue();
        }
    }
    /**
     * 不同场景下设置日期输入框placehoder文本
     */
    setPlacehoderText() {
        // 以下是为了处理英文状态下，dateEdit输入时有问题，将其placeholder调整为国际化以后的值
        const englishFormatArr = this.format.match(/M/g);
        // tslint:disable-next-line:newline-per-chained-call
        const formatPureArr = this.format.split(/[-\/\.\_,\s]/).filter(this.filterEmptyFn);
        // 确定其为英文显示月份
        if (Util.isArray(englishFormatArr) && englishFormatArr.length === 3) {
            formatPureArr.length === 3 ? this.placehoderText = 'MM/dd/yyyy' : this.placehoderText = 'MM/yyyy';
        }
        else {
            this.placehoderText = this.format;
        }
    }
    onFocus() {
        // 在输入框聚焦时获取当前合法的model值：
        this.oldModel = this.model;
    }
    onBlur() {
        if (this.oldInputvalue !== this.inputValue) {
            this.handleInputValue();
        }
    }
    onKeydown(event) {
        if (event.keyCode === TiKeymap.KEY_ENTER || event.keyCode === TiKeymap.KEY_NUMPAD_ENTER) {
            this.handleInputValue();
        }
    }
    /**
     * @ignore
     */
    handleInputValue() {
        // blur时拿到输入框的值
        this.inputValue = this.inputRef.nativeElement.value;
        // 校验输入框中值：得到合法的model值
        if (this.inputValue !== '') {
            this.getValidModel();
        }
        else {
            this.model = null; // 当用户输入为空或者为null的情况,model赋值为null
        }
        // 根据model值格式化
        this.formatValue();
        this.oldInputvalue = this.inputValue;
    }
    isValidValue(value) {
        // value值为null时会将输入框清空，是一个合法的value值
        if (value === null) {
            return true;
        }
        // value值为一个Date类型值并且在最大最小值范围内时，是一个合法值
        if (TiDateUtil.isDate(value) &&
            !TiDateUtil.isBigger(value, this.max) && !TiDateUtil.isSmaller(value, this.min)) {
            return true;
        }
        return false;
    }
    /**
     * @ignore
     */
    filterEmptyFn(value) {
        return value !== '';
    }
    // 日期格式校验
    validateFormat() {
        if (Util.isString(this.format) && this.format !== '') {
            return;
        }
        // TODO:如果配置时间日期国际化
        this.format = TiLocale.getLocaleWords().tiLocaleDate['date'];
    }
    // 最大值最小值校验
    validateMinAndMax() {
        // 最大值合法性校验:(时分秒：23:59:59)
        const maxTimeChanged = TiDateUtil.changeMaxTime(this.max);
        this.max = TiDateUtil.isDate(this.max) ? maxTimeChanged : this.MAX;
        // 最小值合法性校验:(时分秒：0:0:0)
        const minTimeChanged = TiDateUtil.changeMinTime(this.min);
        this.min = TiDateUtil.isDate(this.min) ? minTimeChanged : this.MIN;
        // 最大最小值矛盾时，设置为默认值
        if (this.max.getTime() < this.min.getTime()) {
            this.max = this.MAX;
            this.min = this.MIN;
        }
    }
    // 根据model值和format接口，格式化显示时间日期
    formatValue() {
        this.inputValue = (this.model !== null) ? TiLocaleFormat.formatDate(this.model, this.placehoderText) : '';
        this.oldInputvalue = this.inputValue;
    }
    // 校验输入框中的值
    getValidModel() {
        // 支持分隔符:中划线，下划线，点，斜杠
        const reg = new RegExp('[年\\月\\日\\-\\/\\.\\_]');
        const dateArr = this.inputValue.split(reg);
        const formatArr = this.placehoderText.split(reg);
        let dateValue;
        const arr = []; // 保存format格式下年月日的顺序下标；年月日，日月年，月日年，年月。。。
        for (let i = 0; i < formatArr.length; i++) {
            if (formatArr[i].indexOf('y') !== -1) {
                arr[0] = i;
            }
            else if (formatArr[i].indexOf('M') !== -1) {
                arr[1] = i;
            }
            else if (formatArr[i].indexOf('d') !== -1) {
                arr[2] = i;
            }
        }
        // 处理年月情况
        if (arr.length === 2) {
            dateArr[arr[2]] = '1';
        }
        // 浏览器兼容性处理：对于非法日期表现不一致：eg:new Date('2018/13/12'),谷歌和火狐处理为非法日期对象，而IE浏览器会处理为2019/1/12；
        // 获取当前月总天数
        const totalDays = new Date(parseInt(dateArr[arr[0]], 10), parseInt(dateArr[arr[1]], 10), 0).getDate();
        // 将时间日期转换成字符串，原因：2018-3-34 不合法日期，用new Date(2018, 2, 34)生成日期对象，会处理成 ==>2018/4/3
        // 将其转换成字符串形式：new Date('2018/2/34')生成日期对象，处理成 ==>Invalid Date对象
        dateValue = TiBrowser.isIE() && (parseInt(dateArr[arr[1]], 10) > 12 || parseInt(dateArr[arr[2]], 10) > totalDays)
            || (String(new Date(parseInt(dateArr[arr[0]], 10), parseInt(dateArr[arr[1]], 10), parseInt(dateArr[arr[2]], 10))) === 'Invalid Date')
            || dateArr.length > 3 ?
            'Invalid Date' : new Date(`${dateArr[arr[0]]}/${dateArr[arr[1]]}/${dateArr[arr[2]]}`);
        // 1.输入值为不合法日期：2018-3-34;
        // 2.输入值不在最小值最大值范围内;
        // 3.当前输入框中的值，和上次输入框中的值相同时;
        // tslint:disable-next-line:triple-equals
        this.model = String(dateValue) === 'Invalid Date' || !this.isValidValue(dateValue) || this.isDisabledDays(dateValue)
            ? this.oldModel : new Date(TiDateUtil.getDateStr(dateValue));
    }
    /**
     * @ignore
     * 是否为禁用日期
     */
    isDisabledDays(value) {
        let isDisabled = false;
        if (Util.isArray(this.disabledDays) && this.disabledDays.length > 0) {
            this.disabledDays.forEach((item) => {
                if (item.getTime() === value.getTime()) {
                    isDisabled = true;
                }
            });
        }
        return isDisabled;
    }
}
TiDateEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-date-edit',
                template: "<input #input\r\n    [placeholder]=\"placehoderText\"\r\n    style=\"width: 100%\"\r\n    type=\"text\"\r\n    maxlength=\"20\"\r\n    [(ngModel)]=\"inputValue\"\r\n    (blur)=\"onBlur()\"\r\n    (focus)=\"onFocus()\"\r\n    [disabled]='disabled'\r\n    (keydown)='onKeydown($event)'\r\n    [id]=\"appendId('input')\"\r\n    tiText>",
                providers: [TiFormComponent.getValueAccessor(TiDateEditComponent)],
                styles: ["::ng-deep :root{--ti-text-clear-width:26px;--ti-text-password-width:36px}:host[tiText]{-ms-box-sizing:border-box;background-color:var(--ti-input-bg-color);border:1px solid var(--ti-input-border-color);border-radius:var(--ti-input-border-radius);box-sizing:border-box;color:var(--ti-input-text-color);flood-color:var(--ti-input-clear-color);font-size:var(--ti-input-font-size);height:var(--ti-input-height);lighting-color:var(--ti-input-clear-color-hover);line-height:normal;outline:none;padding:0 var(--ti-input-padding-horizontal);stop-color:var(--ti-input-clear-color-disabled);vertical-align:middle}:host[tiText].ti3-text-input-show-icon{background-repeat:no-repeat;background-size:16px}:host[tiText].ti3-text-input-show-clear{background-position:center right 5px;padding-right:var(--ti-text-clear-width)!important}:host[tiText].ti3-text-input-show-password{background-position:center right 10px;padding-right:var(--ti-text-password-width)!important}:host[tiText].ti3-text-input-noborder{border:0;box-shadow:none;outline:0}:host[tiText]:not([disabled]):not([noborder]).ti3-text-input-show-icon.ti3-text-clear-active:hover{cursor:pointer}:host[tiText]:not([disabled]):not([noborder]):hover{border:1px solid var(--ti-input-border-color-hover)}:host[tiText]:not([disabled]):not([noborder]):focus{border:1px solid var(--ti-input-border-color-focus)}:host[tiText][disabled]:disabled{background-color:var(--ti-input-bg-color-disabled);border:1px solid var(--ti-input-border-color-disabled);color:var(--ti-input-text-color-disabled);cursor:not-allowed!important}:host[tiText][disabled]:disabled.ti3-text-input-noborder{border:0}.ti3-password-hack-input{height:0;left:-9999px;position:absolute;top:-9999px;width:0}:host[tiText]{transition:border-color .15s}:host[tiText].ti3-text-input-show-icon:focus{transition:transform .15s cubic-bezier(.4,0,.2,1),font-size .15s cubic-bezier(.4,0,.2,1)}:host[tiText]:hover:not(:focus){transition:border-color .2s}"]
            },] }
];
TiDateEditComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
TiDateEditComponent.propDecorators = {
    format: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    disabled: [{ type: Input }],
    disabledDays: [{ type: Input }],
    inputRef: [{ type: ViewChild, args: ['input', { static: true },] }],
    display: [{ type: HostBinding, args: ['style.display',] }]
};
//# sourceMappingURL=data:application/json;base64,