import { Component, ElementRef } from '@angular/core';
import { TiTabComponent } from './TiTabComponent';
import { Util } from '../../utils/Util';
/**
 * TiTabHeaderComponent 是单个页签的标题头组件，其包裹的元素会作为当前页签的标题头
 *
 */
export class TiTabHeaderComponent {
    constructor(tab, elementRef) {
        this.tab = tab;
        this.elementRef = elementRef;
    }
    ngAfterContentInit() {
        // 由于此处的AfterContentInit会比TiTabComponent组件的OnInit
        // 执行得晚，所以ti-tab-header中的内容会覆盖header接口传入的字符串值
        this.tab.headNode = this.elementRef.nativeElement;
        if (!this.tab.header) {
            // 处理自定义dom没有header接口时对应下拉面板展示
            this.tab.header = this.elementRef.nativeElement.innerText;
        }
    }
    ngAfterViewChecked() {
        if (!this.tab.tabset.hasSlider) {
            return;
        }
        if (Util.isUndefined(this.oldHeaderWidth)) {
            this.oldHeaderWidth = this.elementRef.nativeElement.offsetWidth;
            return;
        }
        const headerWidth = this.elementRef.nativeElement.offsetWidth;
        if (headerWidth !== this.oldHeaderWidth) {
            this.tab.tabset.headerWidthChange = true;
            this.oldHeaderWidth = headerWidth;
        }
    }
}
TiTabHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-tab-header',
                template: "<ng-content></ng-content>",
                host: {
                    '[class.ti3-tab-head-no-outline]': 'true'
                }
            },] }
];
TiTabHeaderComponent.ctorParameters = () => [
    { type: TiTabComponent },
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGlUYWJIZWFkZXJDb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9AY2xvdWQvdGlueTMvY29tcG9uZW50cy90YWIvVGlUYWJIZWFkZXJDb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUdILFNBQVMsRUFDVCxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN4Qzs7O0dBR0c7QUFTSCxNQUFNLE9BQU8sb0JBQW9CO0lBRTdCLFlBQW9CLEdBQW1CLEVBQVUsVUFBc0I7UUFBbkQsUUFBRyxHQUFILEdBQUcsQ0FBZ0I7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFZO0lBQUcsQ0FBQztJQUUzRSxrQkFBa0I7UUFDZCxpREFBaUQ7UUFDakQsNkNBQTZDO1FBQzdDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBQ2xELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRTtZQUNsQiw4QkFBOEI7WUFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO1NBQzlEO0lBQ0wsQ0FBQztJQUVELGtCQUFrQjtRQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFDNUIsT0FBTztTQUNWO1FBQ0QsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUN2QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztZQUVoRSxPQUFPO1NBQ1Y7UUFDRCxNQUFNLFdBQVcsR0FBVyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7UUFDdEUsSUFBSSxXQUFXLEtBQUssSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7WUFDekMsSUFBSSxDQUFDLGNBQWMsR0FBRyxXQUFXLENBQUM7U0FDckM7SUFDTCxDQUFDOzs7WUFwQ0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxlQUFlO2dCQUN6QixxQ0FBOEI7Z0JBQzlCLElBQUksRUFBRTtvQkFDRixpQ0FBaUMsRUFBRSxNQUFNO2lCQUM1QzthQUNKOzs7WUFaUSxjQUFjO1lBRG5CLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQWZ0ZXJDb250ZW50SW5pdCxcclxuICAgIEFmdGVyVmlld0NoZWNrZWQsXHJcbiAgICBDb21wb25lbnQsXHJcbiAgICBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRpVGFiQ29tcG9uZW50IH0gZnJvbSAnLi9UaVRhYkNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFV0aWwgfSBmcm9tICcuLi8uLi91dGlscy9VdGlsJztcclxuLyoqXHJcbiAqIFRpVGFiSGVhZGVyQ29tcG9uZW50IOaYr+WNleS4qumhteetvueahOagh+mimOWktOe7hOS7tu+8jOWFtuWMheijueeahOWFg+e0oOS8muS9nOS4uuW9k+WJjemhteetvueahOagh+mimOWktFxyXG4gKlxyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3RpLXRhYi1oZWFkZXInLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL3RhYi1oZWFkLmh0bWwnLFxyXG4gICAgaG9zdDoge1xyXG4gICAgICAgICdbY2xhc3MudGkzLXRhYi1oZWFkLW5vLW91dGxpbmVdJzogJ3RydWUnXHJcbiAgICB9XHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgVGlUYWJIZWFkZXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdDaGVja2VkIHtcclxuICAgIHByaXZhdGUgb2xkSGVhZGVyV2lkdGg6IG51bWJlcjtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdGFiOiBUaVRhYkNvbXBvbmVudCwgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxyXG5cclxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcclxuICAgICAgICAvLyDnlLHkuo7mraTlpITnmoRBZnRlckNvbnRlbnRJbml05Lya5q+UVGlUYWJDb21wb25lbnTnu4Tku7bnmoRPbkluaXRcclxuICAgICAgICAvLyDmiafooYzlvpfmmZrvvIzmiYDku6V0aS10YWItaGVhZGVy5Lit55qE5YaF5a655Lya6KaG55uWaGVhZGVy5o6l5Y+j5Lyg5YWl55qE5a2X56ym5Liy5YC8XHJcbiAgICAgICAgdGhpcy50YWIuaGVhZE5vZGUgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcclxuICAgICAgICBpZiAoIXRoaXMudGFiLmhlYWRlcikge1xyXG4gICAgICAgICAgICAvLyDlpITnkIboh6rlrprkuYlkb23msqHmnIloZWFkZXLmjqXlj6Pml7blr7nlupTkuIvmi4npnaLmnb/lsZXnpLpcclxuICAgICAgICAgICAgdGhpcy50YWIuaGVhZGVyID0gIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmlubmVyVGV4dDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy50YWIudGFic2V0Lmhhc1NsaWRlcikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChVdGlsLmlzVW5kZWZpbmVkKHRoaXMub2xkSGVhZGVyV2lkdGgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2xkSGVhZGVyV2lkdGggPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaGVhZGVyV2lkdGg6IG51bWJlciA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xyXG4gICAgICAgIGlmIChoZWFkZXJXaWR0aCAhPT0gdGhpcy5vbGRIZWFkZXJXaWR0aCkge1xyXG4gICAgICAgICAgICB0aGlzLnRhYi50YWJzZXQuaGVhZGVyV2lkdGhDaGFuZ2UgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLm9sZEhlYWRlcldpZHRoID0gaGVhZGVyV2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==