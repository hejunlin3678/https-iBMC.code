import { Component } from '@angular/core';
import { TiLocale, TiLocaleFormat } from '../../locale/TiLocaleModule';
import { TiDateUtil, TiKeymap, Util } from '../../utils/Util';
import { TiFormComponent } from '../base/TiBaseModule';
import { TiDateBaseComponent } from '../datebase/TiDateBaseModule';
/**
 * Datetime日期时间组件
 *
 * Datetime组件提供了一种方便的显示和设置日期时间的方式。
 *
 * <example-url>../tiny3demo/#/datetime/datetime-all</example-url>
 */
export class TiDatetimeComponent extends TiDateBaseComponent {
    constructor() {
        super(...arguments);
        /**
         * @ignore
         * 配置time组件的接口
         */
        this.beginTime = {};
        /**
         * @ignore
         * 标记date/datetime的类型
         */
        this.isDatetime = true;
        /**
         * @ignore
         * 用于标记是不是range
         */
        this.isRange = false;
        /**
         * @ignore
         * placeholder提示文本
         */
        this.placeholder = `${TiLocale.getLocaleWords().tiDate.datetimePlaceholder}`;
        /**
         * @ignore
         * 旧时间值
         */
        this.oldValue = '';
    }
    ngOnInit() {
        super.ngOnInit();
        this.oldFormat = this.format;
    }
    ngOnChanges(changes) {
        // 验证最大值最小值，为了处理最大值和最小值从合法日期变为undefined 的情景
        if ((changes['max'] && !changes['max'].firstChange) || (changes['min'] && !changes['min'].firstChange)) {
            this.validateMinAndMax(this.config, this.isDatetime);
        }
    }
    ngDoCheck() {
        // 监听format的变化
        this.setFormat();
    }
    /**
     * @ignore
     * model值变化时的回调
     */
    ngOnModelChange() {
        if (!TiDateUtil.isDate(this.model)) {
            this.inputValue = '';
            return;
        }
        this.formatValue();
        this.setOkBtnState();
        this.setPickerDate();
    }
    /**
     * @ignore
     * 确认按钮的点击事件处理
     */
    onOkClick() {
        if (this.inValidValue) {
            return;
        }
        if (!TiDateUtil.isDate(this.datePanel['value']['begin'])) {
            this.dropCom.hide();
            return;
        }
        // 获取时间的字符串
        const dateStr = TiDateUtil.getDateStr(this.datePanel['value']['begin']);
        // 空格误删
        const newValue = new Date(`${dateStr} ${TiDateUtil.addColon(this.beginTime['value'])}`);
        // 点击确认按钮对比新旧值：相等不做处理，不相等将新值赋给model
        if (!TiDateUtil.isDatetimeEqual(this.model, newValue)) {
            this.model = newValue;
        }
        this.hideDrop();
        this.okClick.emit(this.model);
    }
    /**
     * @ignore
     * 设置下拉面板中datePanel组件接口
     */
    setDatePanel() {
        this.datePanel = {
            picker: 'day',
            max: this.max,
            min: this.min,
            format: this.format,
            nowDateTime: this.nowDateTime,
            value: {
                begin: this.model,
                end: null
            },
            select: () => {
                // 点击日期面板值，校验时间的最大值最小值
                // 原因：当选择的日期是最小或者最大时，需要校验当前的时间是否合法
                // 设定时间范围
                if (TiDateUtil.isDateEqual(this.datePanel['value']['begin'], this.max)) {
                    this.beginTime['max'] = TiDateUtil.getTimeStr(this.max);
                    this.beginTime['min'] = '00:00:00';
                }
                else if (TiDateUtil.isDateEqual(this.datePanel['value']['begin'], this.min)) {
                    this.beginTime['max'] = '23:59:59';
                    this.beginTime['min'] = TiDateUtil.getTimeStr(this.min);
                }
                else {
                    this.beginTime['min'] = '00:00:00';
                    this.beginTime['max'] = '23:59:59';
                }
                this.setBeginTime();
                this.setOkBtnState();
            },
            selectTimeFn: (obj) => {
                this.setTimeFn(obj, this.beginTime);
                this.setOkBtnState();
            }
        };
    }
    setBeginTime() {
        if (this.timeEditDisabled) {
            this.beginTime['value'] = TiDateUtil.getTimeStr(new Date());
        }
        // 1.获取时间的字符串
        const dateStr = TiDateUtil.getDateStr(this.datePanel['value']['begin']);
        // 空格误删
        const datetimeStr = new Date(`${dateStr} ${TiDateUtil.addColon(this.beginTime['value'])}`);
        // 最大值校验
        if (TiDateUtil.isBigger(datetimeStr, this.max)) {
            this.beginTime['value'] = TiDateUtil.getTimeStr(this.max);
        }
        // 最小值校验
        if (TiDateUtil.isSmaller(datetimeStr, this.min)) {
            this.beginTime['value'] = TiDateUtil.getTimeStr(this.min);
        }
        this.oldValue = this.beginTime['value'];
        this.timeEditDisabled = false;
    }
    /**
     * @ignore
     * @param event
     * @param val
     */
    onKeydownFn(event, val) {
        if (event.keyCode === TiKeymap.KEY_ENTER || event.keyCode === TiKeymap.KEY_NUMPAD_ENTER) {
            if (!TiDateUtil.isDate(val)) {
                return;
            }
            this.setBeginTime();
            this.setOkBtnState();
        }
    }
    /**
     * @ignore
     */
    editBlur(val) {
        if (val !== null) {
            this.setBeginTime();
            this.setOkBtnState();
        }
    }
    // 设置下拉面板中time组件接口
    setTime() {
        // value接口设置
        this.setTimeValue();
        // maxValue接口设置
        this.setTimeMaxValue();
        // minValue接口设置
        this.setTimeMinValue();
    }
    setTimeValue() {
        this.beginTime['value'] = TiDateUtil.isDate(this.model) ? TiDateUtil.getTimeStr(this.model) : '';
    }
    setTimeMaxValue() {
        if (!TiDateUtil.isDate(this.model)) {
            return;
        }
        this.beginTime['max'] = (TiDateUtil.isDateEqual(this.model, this.max)) ?
            TiDateUtil.getTimeStr(this.max) : '23:59:59';
    }
    setTimeMinValue() {
        if (!TiDateUtil.isDate(this.model)) {
            return;
        }
        this.beginTime['min'] = (TiDateUtil.isDateEqual(this.model, this.min)) ?
            TiDateUtil.getTimeStr(this.min) : '00:00:00';
    }
    /**
     * @ignore
     */
    isValidValue(value) {
        if (TiDateUtil.isDate(value) && TiDateUtil.isBetweenMaxAndmin(value, this.min, this.max)) {
            return true;
        }
        return false;
    }
    /**
     * @ignore
     */
    setPickerDate() {
        // 设置下拉面板中datePanel组件接口
        this.setDatePanel();
        // 设置下拉面板中time组件接口
        this.setTime();
        this.setOkBtnState();
        this.timeEditDisabled = TiDateUtil.isDate(this.model) ? false : true;
        if (this.timeEditDisabled) {
            this.selectTime = false;
        }
    }
    /**
     * @ignore
     * 设置确认按钮的状态
     */
    setOkBtnState() {
        // 输入中文冒号之后，及时转换为英文冒号
        const inputvalue = this.beginTime.value;
        if (!Util.isUndefined(inputvalue)) {
            this.beginTime.value = inputvalue.replace('：', ':');
        }
        const date = this.datePanel.value.begin;
        if (!TiDateUtil.isDate(date)) {
            this.inValidValue = true;
        }
        else {
            const dateTime = new Date(`${TiDateUtil.getDateStr(date)} ${TiDateUtil.addColon(this.beginTime['value'])}`);
            this.inValidValue = !TiDateUtil.isBetweenMaxAndmin(dateTime, this.min, this.max);
        }
        if (this.buttonComs) {
            this.setAttr(this.buttonComs.last.nativeElement, 'disabled', this.inValidValue);
            this.setInputStyle(this.inValidValue);
        }
    }
    /**
     * @ignore
     * 将value转换为format接口格式的字符串
     */
    formatValue() {
        if (this.model === null) {
            this.inputValue = '';
        }
        else {
            // 空格误删
            const format = `${this.format.date} ${TiDateUtil.addAmPm(this.format.time)}`;
            this.inputValue = TiLocaleFormat.formatDateTime(this.model, format);
        }
        this.oldValue = TiDateUtil.getTimeStr(this.model);
    }
    /**
     * @ignore
     * 时间框失焦事件
     */
    timeBlur() {
        this.handleTimeValue();
    }
    /**
     * @ignore
     * 时间框enter事件
     */
    timeKeydown(event) {
        if (event.keyCode === TiKeymap.KEY_ENTER || event.keyCode === TiKeymap.KEY_NUMPAD_ENTER) {
            this.handleTimeValue();
        }
    }
    /**
     * @ignore
     * time时间框输入内容处理
     */
    handleTimeValue() {
        // 区分中英文冒号
        const reg = new RegExp('[\\:\\：]');
        const dateReg = new RegExp('[年\\月\\日\\-\\/\\.\\_]');
        // 输入区间是否存在小数点，非整数
        let isNotInteger = false;
        this.beginTime = JSON.parse(JSON.stringify(this.beginTime));
        const timeArr = this.beginTime.value.split(reg);
        timeArr.forEach((item, index) => {
            if (item.length === 1) {
                timeArr[index] = '0' + item;
            }
            if (parseInt(item, 10) !== Number(item)) {
                isNotInteger = true;
            }
        });
        const dateStr = TiDateUtil.getDateStr(this.datePanel['value']['begin']);
        const dateArr = dateStr.split(dateReg);
        this.beginTime.value = timeArr.join(':');
        const datetime = new Date(`${dateStr} ${TiDateUtil.addColon(this.beginTime['value'])}`);
        const dateVal = new Date(parseInt(dateArr[0], 10), parseInt(dateArr[1], 10), parseInt(dateArr[2], 10), parseInt(timeArr[0], 10), parseInt(timeArr[1], 10), parseInt(timeArr[2], 10));
        if (String(datetime) === 'Invalid Date' || String(dateVal) === 'Invalid Date' || timeArr.length > 3 || isNotInteger) {
            this.beginTime.value = this.oldValue;
            this.setOkBtnState();
            return;
        }
        this.oldValue = this.beginTime.value;
        this.setOkBtnState();
    }
    /**
     * @description 判读字符串是否是合法的时间
     * @param: time: 校验的时间
     */
    isValidTime(time) {
        if (!Util.isString(time) || time.trim() === '') {
            return false;
        }
        const date = new Date(`2018/5/15 ${time}`);
        return !(String(date) === 'Invalid Date');
    }
}
TiDatetimeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-datetime',
                template: "<ti-date-dominator #dominator\r\n                   [id]=\"appendId('dominator')\"\r\n                   [clearable]=\"clearIcon\"\r\n                   [(ngModel)]=\"inputValue\"\r\n                   [disabled]=\"disabled\"\r\n                   (clear)=\"onIconClearClick($event)\"\r\n                   (click)=\"onShowClick()\">{{ placeholder }}</ti-date-dominator>\r\n<ti-drop #drop\r\n        [id]=\"appendId('drop')\"\r\n        class=\"ti3-datetime-picker\"\r\n        [ngClass]=\"{'ti3-date-time-customize': hasCustomizeTime}\"\r\n        [dominatorElem]=\"dominatorCom.nativeElement\"\r\n        fixMaxHeight=\"true\"\r\n        [panelWidth]=\"datePanelWidth\"\r\n        [panelAlign]=\"panelAlign\"\r\n        [browserSpace]=\"browserSpace\"\r\n        [dominatorSpace]='dominatorSpace'\r\n        [determinPositionFn]=\"determinPositionFn\"\r\n        theme='noborder'>\r\n        <!-- <section *ngIf=\"dropCom.isShow\"> -->\r\n\r\n        <section class='ti3-date-clear'>\r\n                <section *ngIf='hasCustomizeTime' class='ti3-date-time-customize-contianer'>\r\n                        <ng-container *ngTemplateOutlet=\"customizeTemplate; context:  {$implicit: customizeOptions}\"></ng-container>\r\n                </section>\r\n\r\n                <section [ngClass]=\"{'ti3-datetime-panel-container': hasCustomizeTime}\">\r\n                        <ti-date-edit class='ti3-datetime-dateedit'\r\n                        [ngClass]=\"{'ti3-datetime-dateedit-input': this.focusedPosition === 'begin'}\"\r\n                        [(ngModel)] = \"datePanel.value.begin\"\r\n                        [min] = \"datePanel.min\"\r\n                        [max] = \"datePanel.max\"\r\n                        (keydown)=\"onKeydownFn($event, datePanel.value.begin)\"\r\n                        (click)=\"dateEditClick('begin')\"\r\n                        (focus)=\"dateEditFocus('begin')\"\r\n                        (blur)='editBlur(datePanel.value.begin)'\r\n                        [format]=\"datePanel.format\" [id]=\"appendId('edit')\"></ti-date-edit>\r\n                        <!-- \u786E\u8BA4\u6309\u94AE\u7981\u7528\u573A\u666F\u4E0B\uFF0C\u7ED3\u675F\u6846\u8F93\u5165\u4E4B\u540E\u65E0\u6CD5\u76F4\u63A5tab\u5207\u6362\u7126\u70B9\u81F3\u786E\u8BA4\u6309\u94AE\uFF0C\u6545\u6DFB\u52A0\u6B64\u8FC7\u5EA6input -->\r\n                        <input #input type=\"text\" class=\"ti3-tab-input\"/>\r\n                    <input  class='ti3-datetime-timeedit'\r\n                    [ngClass]=\"{'ti3-datetime-timeedit-input': this.focusedPosition === 'beginTime'}\"\r\n                    type=\"text\"\r\n                    (focus)=\"timeFocus('begin')\"\r\n                    (blur)='timeBlur()'\r\n                    maxlength='8'\r\n                    [disabled]=\"timeEditDisabled\"\r\n                    [placeholder]='timeplaceholder'\r\n                    [(ngModel)]=\"beginTime.value\"\r\n                    (keydown)='timeKeydown($event)'\r\n                    [id]=\"appendId('input')\"\r\n                    tiText/>\r\n                        <ti-date-panel\r\n                                [id]=\"appendId('panel')\"\r\n                                [(value)]=\"datePanel.value\"\r\n                                [(picker)]=\"datePanel.picker\"\r\n                                [isRange]='false'\r\n                                [beginTime]='beginTime'\r\n                                [selectTime]='selectTime'\r\n                                (selectTimeFn)='datePanel.selectTimeFn($event)'\r\n                                [min]=\"datePanel.min\"\r\n                                [max]=\"datePanel.max\"\r\n                                [nowDateTime]=\"datePanel.nowDateTime\"\r\n                                [format]=\"format.date\"\r\n                                (select)=\"datePanel.select()\"\r\n                                (valueChange)=\"setOkBtnState()\"></ti-date-panel>\r\n                </section>\r\n        </section>\r\n                <section class=\"ti3-datetime-btn-picker-footer\" [ngClass]=\"{'ti3-datetime-select-time': selectTime}\">\r\n                        <button class=\"ti3-datetime-picker-footer-btn\"\r\n                                [id]=\"appendId('okBtn')\"\r\n                                type=\"button\"\r\n                                size=\"small\"\r\n                                (click)=\"onOkClick()\"\r\n                                tiButton>{{ 'tiCommon.okBtn' | tiTranslate }}</button>\r\n                        <section (click)='selectTimeFn()' [id]=\"appendId('select_time')\" *ngIf='!selectTime' [ngClass]=\"{'ti3-datetime-select-btn-disabled': timeEditDisabled}\" class='ti3-datetime-select-btn'>{{'tiDate.selectTime' | tiTranslate}}</section>\r\n                        <section (click)='selectDateFn()' [id]=\"appendId('select_date')\" *ngIf='selectTime' class='ti3-datetime-select-btn'>{{'tiDate.selectDate' | tiTranslate}}</section>\r\n                </section>\r\n</ti-drop>\r\n\r\n<ng-template #customizeTemplate let-options>\r\n        <ul [id]=\"appendId('list')\">\r\n            <li *ngFor='let option of options; index as i;' class='ti3-customize-time-label' (click)='customizeTimeClickFn(option.value.begin)' [id]=\"appendId('label_' + i)\">{{option.label}}</li>\r\n        </ul>\r\n</ng-template>\r\n",
                host: {
                    '[class.ti3-datetime-input-container]': 'true',
                    '(blur)': 'hidePanel()'
                },
                providers: [TiFormComponent.getValueAccessor(TiDatetimeComponent)],
                styles: [".ti3-compnent-container-border,:host.ti3-datetime-input-container{-ms-box-sizing:border-box;border:1px solid;border-radius:var(--ti-input-border-radius);box-sizing:border-box;display:inline-block}.ti3-compnent-container-border:not([disabled]),:host.ti3-datetime-input-container:not([disabled]){background-color:var(--ti-input-bg-color);border-color:var(--ti-input-border-color)}.ti3-compnent-container-border:not([disabled]):hover,:host.ti3-datetime-input-container:not([disabled]):hover{border-color:var(--ti-input-border-color-hover)}.ti3-compnent-container-border:not([disabled])[tiFocused],:host.ti3-datetime-input-container:not([disabled])[tiFocused]{border-color:var(--ti-input-border-color-focus)}.ti3-compnent-container-border[disabled],:host.ti3-datetime-input-container[disabled]{background-color:var(--ti-input-bg-color-disabled);border-color:var(--ti-input-border-color-disabled);cursor:not-allowed!important}.ti3-customize-time-label{color:var(--ti-common-color-text-primary);cursor:pointer;font-size:var(--ti-common-font-size-base);line-height:var(--ti-common-line-height-number);margin-bottom:10px}.ti3-customize-time-label:hover{color:var(--ti-common-color-line-active)}.ti3-date-clear{display:flex;*zoom:1}.ti3-date-clear:after{clear:both}.ti3-date-clear:after,.ti3-date-clear:before{content:\"\";display:table}.ti3-datetime-select-btn{color:var(--ti-common-color-text-highlight);cursor:pointer;float:right;line-height:24px;padding-right:var(--ti-common-space-2x)}.ti3-datetime-select-btn-disabled{color:var(--ti-common-color-text-disabled);cursor:not-allowed}.ti3-date-range-splitline{padding:0 6px}.ti3-tab-input{height:0;left:-9999px;position:absolute;top:-9999px;width:0}::ng-deep :root{--ti-date-picker-padding-bottom:12px;--ti-date-picker-padding-horizon:16px}:host.ti3-datetime-input-container{width:200px}.ti3-dropdown-container.ti3-datetime-picker{font-size:var(--ti-datetime-input-font-size);padding:var(--ti-date-picker-padding-bottom) var(--ti-date-picker-padding-horizon);width:calc(var(--ti-datetime-day-width)*7 + var(--ti-date-picker-padding-horizon)*2 + 2px);z-index:var(--ti-datetime-z-index)}.ti3-dropdown-container.ti3-datetime-picker:focus{outline:0}.ti3-datetime-picker-footer{-ms-box-sizing:border-box;-ms-user-select:none;-webkit-user-select:none;box-sizing:border-box;clear:both;padding-bottom:var(--ti-common-space-10);user-select:none;width:100%;*zoom:1}.ti3-datetime-picker-footer:after{clear:both;content:\"\";display:table}.ti3-datetime-picker-footer:before{content:\"\";display:table}.ti3-date-picker-footer-right{float:right}.ti3-datetime-btn-picker-footer{-ms-box-sizing:border-box;-ms-user-select:none;-webkit-user-select:none;border-top:1px solid var(--ti-common-color-line-dividing);box-sizing:border-box;clear:both;margin-top:var(--ti-common-space-3x);padding-top:var(--ti-common-space-3x);user-select:none;width:100%;*zoom:1}.ti3-datetime-btn-picker-footer:after{clear:both;content:\"\";display:table}.ti3-datetime-btn-picker-footer:before{content:\"\";display:table}.ti3-datetime-btn-picker-footer .ti3-datetime-picker-footer-btn{float:right}.ti3-datetime-btn-picker-footer .ti3-datetime-picker-footer-btn:last-child{margin-right:var(--ti-common-space-10)}.ti3-datetime-btn-picker-footer.ti3-datetime-select-time{border-top:none;margin-top:0}.ti3-date-time-customize{width:397px!important}.ti3-date-time-customize-contianer{border-right:1px solid var(--ti-common-color-line-dividing);float:left;height:292px;padding-right:var(--ti-common-space-4x);width:80px}.ti3-datetime-dateedit{margin-right:var(--ti-common-space-2x)}.ti3-datetime-dateedit,.ti3-datetime-timeedit{display:inline-block;width:122px}.ti3-datetime-panel-container{float:right;padding-left:var(--ti-common-space-4x)}::ng-deep .ti3-datetime-dateedit-input input[tiText],::ng-deep .ti3-datetime-timeedit-input{border-color:var(--ti-input-border-color-focus)!important}"]
            },] }
];
//# sourceMappingURL=data:application/json;base64,