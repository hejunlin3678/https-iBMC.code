import { Component, ContentChild, ElementRef, EventEmitter, HostListener, Input, NgZone, Output, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { TiFormComponent } from '../base/TiBaseModule';
import { TiBrowser, TiKeymap } from '../../utils/Util';
import { TiLocale } from '../../locale/TiLocaleModule'; // 获取词条
/**
 * @ignore
 *  列表组件，使用者有menu、droplist
 */
export class TiListComponent extends TiFormComponent {
    constructor(render, hostRef, zone) {
        super(hostRef, render);
        this.zone = zone;
        // 列表数据配置
        this.multiple = false; // 是否多选
        this.labelKey = 'label'; // 要显示的字段
        this.tipPosition = 'right';
        this.noDataText = '...'; // 无数据时的显示文本
        this.hideEmptyOption = false; // 过滤空字符串选项
        this.selectAll = false; // 多选模式下是否有全选功能
        /**
         * 10.0.4 版本新增，
         * 用于配置是否显示children字段数据，大部分场景需要显示children，cascader不需要
         */
        this.showChildren = true;
        /**
         * @ignore
         * 10.1.0新增
         * 适配内部time类组件，点选滚动效果,暂不开放。
         */
        this.scrollTop = 0;
        /**
         * 选中事件，向外通知option数据
         */
        // tslint:disable-next-line:no-output-named-after-standard-event
        this.select = new EventEmitter();
        this.hover = new EventEmitter();
        /**
         *  需要阻止失焦标记: 点击面板时，会触发失焦，需要阻止失焦。
         *  IE兼容性问题: 点击滚动条，触发失焦，面板会收起
         *  修复方案：点击list面板区域（包含滚动条）后，给失焦元素强制获取焦点。修改Form基类不触发组件整体失焦。
         */
        this.stopBlur = false;
        this.unlistenIEScrollbarBugFns = [];
        this.selectAllText = TiLocale.getLocaleWords().tiList.selectAll;
        this.optionSelectAll = 'all';
        this.optionScrollTopLastTime = 0;
        // 判断是否禁用的函数: 函数类型是(any) => boolean，赋值是(item: any) => {}
        this.isDisabledFn = (item) => {
            return item && item.disabled === true;
            // tslint:disable-next-line:semicolon
        }; // 这个分号是书写正确的
    }
    get hoverOption() {
        return this._hoverOption;
    }
    set hoverOption(hoverOption) {
        if (this._hoverOption !== hoverOption) {
            this._hoverOption = hoverOption;
            this.hover.emit(hoverOption);
        }
    }
    // 在Selected使用List时，Selected的聚焦元素是Dominator和Searchbox，它们接收按键，并调用list来处理。
    // 在表格列设置时，List自己聚焦，List处理按键。
    onKeydown(event) {
        // 10.0.2删除 KEY_SPACE 空格快捷键的响应
        switch (event.keyCode) {
            case TiKeymap.KEY_ENTER: // ENTER键 相当于click
            case TiKeymap.KEY_NUMPAD_ENTER: // ENTER键(苹果数字小键盘)
                if (this.hoverOption) {
                    this.selectOption(this.hoverOption);
                }
                break;
            case TiKeymap.KEY_ESCAPE: // Esc键，仅可关闭
            case TiKeymap.KEY_TAB: // Tab键，仅可关闭
                break;
            case TiKeymap.KEY_ARROW_UP: // 向上箭头，上移选项
                event.preventDefault(); // 防止上下按键默认行为：移动滚动条
                this.nextOption(true);
                break;
            case TiKeymap.KEY_ARROW_DOWN: // 向下箭头，下移选项
                event.preventDefault(); // 防止上下按键默认行为：移动滚动条
                this.nextOption(false);
                break;
            default:
                break;
        }
    }
    ngOnInit() {
        this.zone.runOutsideAngular(() => {
            this.renderer.listen(this.nativeElement, 'mousedown', (event) => {
                // Select时，点击滚动条和点击面板，不要触发默认行为：dominator blur
                // 现在，list默认不聚焦。在所有场合，点击面板或者滚动条，都不触发默认焦点事件。
                event.preventDefault(); // 防止dominator blur行为
                // list自身可以落焦点时，需要聚焦的默认行为。
            });
            // list内部滚动条会引起外部滚动条事件触发，引起弹框内的下拉组件无法使用鼠标拖动滚动条，因此此处阻止事件冒泡
            this.renderer.listen(this.nativeElement, 'mousewheel', (event) => {
                event.stopPropagation();
            });
            this.renderer.listen(this.nativeElement, 'DOMMouseScroll', (event) => {
                event.stopPropagation();
            });
        });
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        if (this.multiple && this.selectAll) {
            const optionsChange = changes['options'];
            if (optionsChange) {
                this.setSelectedAllState();
            }
        }
        // time及datetime/datetimeRange组件使用list，点选时候需要滚动效果
        if (changes['scrollTop'] && !changes['scrollTop'].firstChange) {
            this.setScrollFn();
        }
        if (changes['options']) {
            this.setHoverOption();
        }
    }
    ngAfterViewInit() {
        if (this.scrollTop > 0) {
            this.setScrollFn();
        }
    }
    writeValue(model) {
        super.writeValue(model);
        if (this.multiple && this.selectAll) {
            this.setSelectedAllState();
        }
    }
    // time及datetime/datetimeRange组件使用list，点选时候需要滚动效果
    setScrollFn() {
        if (TiBrowser.isIE()) {
            this.renderer.setProperty(this.hostRef.nativeElement, 'scrollTop', this.scrollTop);
            return;
        }
        this.hostRef.nativeElement.scrollTo(0, this.scrollTop);
    }
    // 下拉选项的鼠标按下操作
    onMousedownItem(event, own) {
        event.preventDefault();
        event.stopPropagation();
        own.classList.add('ti3-menu-panel-list-active');
    }
    // 下拉选项的鼠标按下后的抬起操作
    onMouseupItem(event, own) {
        this.removeClass(event, own);
    }
    // 下拉选项的鼠标离开时的操作
    onMouseleaveItem(event, own) {
        this.removeClass(event, own);
    }
    // 移除li元素上的ti3-menu-panel-list-active类
    removeClass(event, own) {
        event.preventDefault();
        event.stopPropagation();
        own.classList.remove('ti3-menu-panel-list-active');
    }
    // 下拉选项的单击操作（包括组名所在的<li>元素）
    onClickItem(event, option) {
        // Selected时，点击选项，不要触发默认行为：dominator blur。
        event.preventDefault(); // 防止dominator blur行为
        // Group节点和禁用节点，无需响应。
        if (this.isGroup(option) || this.isDisabledFn(option)) {
            event.stopPropagation();
            return;
        }
        // 只处理左键和中键
        if (event.button !== TiKeymap.MOUSE_LEFT_BUTTON
            && event.button !== TiKeymap.MOUSE_MIDDLE_BUTTON) { // Tiny2这里逻辑错误TODO：
            return;
        }
        // 点击选中项
        this.selectOption(option);
        // 更新hover
        this.hoverOption = option;
    }
    selectOption(option) {
        // 全选
        if (this.multiple && this.selectAll && option === this.optionSelectAll) {
            this.selectAllOptions();
            this.select.emit(option);
            return;
        }
        let index = -1;
        if (this.multiple) { // 多选
            if (!this.model) { // 如果为空值
                this.model = [];
            }
            // 是否选中，取反
            index = this.model.indexOf(option);
            if (index === -1) {
                this.model.push(option); // 点击下拉项选中，选中项按用户操作顺序显示
            }
            else if (index !== -1) {
                this.model.splice(index, 1);
            }
            // 强行向外通知model改变。
            this.model = this.model.concat();
            // 设置全选状态
            if (this.selectAll) {
                this.setSelectedAllState();
            }
        }
        else { // 单选
            this.model = option;
        }
        this.select.emit(option);
    }
    selectAllOptions() {
        if (!this.model) { // 如果为空值
            this.model = [];
        }
        const listOptions = this.getListOptions();
        let isChange = false;
        if (this.selectAllState === false || this.selectAllState === null) {
            listOptions.forEach((item) => {
                if (this.model.indexOf(item) === -1 && this.isSelectable(item)) { // 不在当前选中项且为可选数据项（排除禁用项和组名项）
                    // 点击全选按钮时的选中值顺序与option的顺序一致
                    const insertIndex = this.getInsertIndex(item);
                    this.model.splice(insertIndex, 0, item);
                    isChange = true;
                }
            });
            this.selectAllState = true;
        }
        else {
            listOptions.forEach((item) => {
                const index = this.model.indexOf(item);
                if (index !== -1 && !this.isDisabledFn(item)) {
                    this.model.splice(index, 1);
                    isChange = true;
                }
            });
            this.selectAllState = false;
        }
        if (isChange) {
            // model的值在以上循环中，多次变化，或者不变，根据isChange，一次性触发变化检测
            this.model = this.model.concat();
        }
    }
    setSelectedAllState() {
        if (!this.model || this.model.length === 0 || !this.options || this.options.length === 0) {
            this.selectAllState = false;
            return;
        }
        const listOptions = this.getListOptions();
        const selectedOptions = listOptions.filter((item) => {
            return this.isSelectable(item) && this.model.includes(item);
        });
        if (selectedOptions.length === 0) {
            this.selectAllState = false;
            return;
        }
        const selectableOptions = listOptions.filter((item) => {
            return this.isSelectable(item);
        });
        this.selectAllState = selectedOptions.length === selectableOptions.length ? true : null;
    }
    // 获取新插入元素的插入次序，该次序与list集合中的元素顺序保持一致
    getInsertIndex(option) {
        const listOptions = this.getListOptions();
        const indexOfList = listOptions.indexOf(option); // 当前元素在list中的排序
        // 将该元素与已选中在list中的次序进行比较，如果该元素在某选中项次序之后，则将其插入该元素之后
        for (let i = this.model.length; i > 0; i--) {
            const itemIndexOfList = listOptions.indexOf(this.model[i - 1]);
            if (itemIndexOfList < indexOfList) {
                return i;
            }
        }
        return 0;
    }
    onMouseenterItem(event, option) {
        // 是可选项，且不是在选中项置Top时鼠标经过。
        // tslint:disable-next-line:prefer-conditional-expression
        if (this.isSelectable(option) && new Date().getTime() - this.optionScrollTopLastTime > TiListComponent.SCROLL_TOP_TIME) {
            this.hoverOption = option; // 更新hover
        }
    }
    // 寻找下一个可选项。参数：向上/向下
    nextOption(isUp) {
        const listOptions = this.getListOptions();
        if (this.multiple && this.selectAll) {
            listOptions.unshift(this.optionSelectAll);
        }
        if (listOptions.filter((x) => this.isSelectable(x)).length === 0) { // 没有可选中的项目
            return;
        }
        let nextOption = this.hoverOption;
        let curIndex = listOptions.indexOf(nextOption);
        do {
            if (isUp) {
                // tslint:disable-next-line:prefer-conditional-expression
                if (curIndex > 0) { // 找到了，且不是第一个元素
                    curIndex = curIndex - 1;
                }
                else { // -1没有找到, 0第一个元素
                    curIndex = listOptions.length - 1; // 跳到第一个元素。
                }
            }
            else {
                // tslint:disable-next-line:prefer-conditional-expression
                if (curIndex < listOptions.length - 1) { // -1没有找到, 和不是最后一个
                    curIndex = curIndex + 1;
                }
                else { // length - 1 最后一个元素
                    curIndex = 0; // 跳到第一个元素。
                }
            }
            nextOption = listOptions[curIndex];
        } while (!(this.isSelectable(nextOption) || nextOption === this.hoverOption)); // 找到停止，或者寻找一圈停止
        // 没有找到结果
        if (nextOption === null || nextOption === this.hoverOption) {
            return;
        }
        // 改变hover选项。
        this.hoverOption = nextOption;
        // 更新滚动条
        this.optionScollTop(this.hoverOption);
    }
    getListOptions() {
        let listOptions = []; // 装有所有选项的数组
        if (this.options) {
            this.options.forEach((x) => {
                listOptions.push(x);
                if (this.isGroup(x)) {
                    listOptions = listOptions.concat(x.children);
                }
            });
        }
        return listOptions;
    }
    // 滚动到选中项元素，多选定位到第一个选中项元素，无选中项时定义到第一项元素；
    // 适用于每次下拉打开的场景
    scrollToSelected() {
        // 获取当前选中项
        let selectedItem;
        // tslint:disable-next-line:prefer-conditional-expression
        if (this.multiple) {
            selectedItem = (this.model && this.model.length > 0) ? this.model[0] : null;
        }
        else {
            selectedItem = this.model;
        }
        if (selectedItem) { // 有选中项时，自动定位到第一个选中元素
            this.scrollToEle(selectedItem, true);
        }
        else { // 无选中项时，定位在第一项元素
            this.nativeElement.scrollTop = 0;
        }
        this.setHoverOption();
    }
    /**
     * 设置hoverOption
     * 用于数据更新时，非鼠标或快捷键操作时
     */
    setHoverOption() {
        var _a, _b;
        this.hoverOption = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0
            ? (this.hasSelectedinList()
                ? this.getHoverOptionInModel()
                : (this.multiple && this.selectAll
                    ? this.optionSelectAll
                    : (((_b = this.options[0]) === null || _b === void 0 ? void 0 : _b.children) ? this.getGroupHoverOption()
                        : this.options.find((option) => !this.isDisabledFn(option)))))
            : undefined;
    }
    /**
     * 单选有model的时候，单选的model不会是禁用项，hoverOption应当是model，
     * 多选有model的时候，hoverOption是第一个非禁用的model，如果model全部禁用，hoverOption是第一个禁用项往下的第一个可用项。
     */
    getHoverOptionInModel() {
        return this.multiple
            ? (this.model.find((item) => !this.isDisabledFn(item))
                || this.options.find((item, index) => {
                    return index > this.options.indexOf(this.model[0]) && !this.isDisabledFn(item);
                }))
            : this.model;
    }
    /**
     * 判断当前list中是否有选中项，过滤后的数据有可能不含有选中项
     */
    hasSelectedinList() {
        var _a;
        const listOption = this.getListOptions();
        if (this.multiple && ((_a = this.model) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            return !!this.model.find((item) => listOption.includes(item));
        }
        else if (this.model) {
            return listOption.includes(this.model);
        }
        else {
            return false;
        }
    }
    // 分组情况下，找到hoverOption
    getGroupHoverOption() {
        let groupHoverOption;
        this.options.find((option) => {
            if (option.children.length > 0) {
                groupHoverOption = option.children.find((child) => !this.isDisabledFn(child));
            }
            return groupHoverOption ? true : false; // 这个return只是为了结束find方法
        });
        return groupHoverOption; // 这个return是为了返回查找结果
    }
    scrollToEle(option, isScrollBySelected = false) {
        if (!option || !this.ulRef) { // 第一次model值改变时, ulRef不存在。
            return;
        }
        const listOptions = this.getListOptions();
        if (this.multiple && this.selectAll) {
            listOptions.unshift(this.optionSelectAll);
        }
        const curIndex = listOptions.indexOf(option);
        if (curIndex < 2 && isScrollBySelected) {
            return; // 前两项不需要滚动
        }
        // 下拉框有滚动条时，若上下选项足够，选中项为下拉框的第二项，这样可以展示选中项的前后选项
        const scrollTopOptionIndex = Math.max(curIndex - 1, 0);
        const ele = this.ulRef.nativeElement.getElementsByTagName('LI')[scrollTopOptionIndex];
        if (ele) {
            this.nativeElement.scrollTop = ele.offsetTop;
        }
    }
    optionScollTop(option) {
        this.optionScrollTopLastTime = new Date().getTime();
        this.scrollToEle(option);
    }
    // 是组数据项
    isGroup(item) {
        return item && item.hasOwnProperty('children') && this.showChildren;
    }
    // 是可选数据项
    isSelectable(item) {
        return !this.isGroup(item) && !this.isDisabledFn(item);
    }
    // 是已选中数据项
    isSelected(item) {
        return (!this.multiple && item === this.model) ||
            (this.multiple && this.model && this.model.includes(item));
    }
    /**
     * 修复点击IE滚动条，面板关闭。
     * 打开面板时监听，关闭和销毁面板时取消监听。
     */
    listenIESrollbarBug() {
        // IE兼容性涉及知识，见本文件底部。
        // IE兼容性问题: 点击滚动条，触发失焦，面板会收起
        // 修复方案：点击list面板区域（包含滚动条）后，给失焦元素强制获取焦点。修改Form基类不触发组件整体失焦。
        if (TiBrowser.isIE()) {
            // 点击面板，阻止Blur
            this.unlistenIEScrollbarBugFns.push(this.renderer.listen(this.nativeElement, 'mousedown', (event) => {
                this.stopBlur = true; // 标记，以供focusin消耗
                // 阻止冒泡到document，因为document会把标志位改回false。和下面修复双击滚动条Bug配合
                event.stopPropagation();
            }));
            // 修复bug：双击滚动条，再点击面板之外，不失焦。
            this.unlistenIEScrollbarBugFns.push(this.renderer.listen(document, 'mousedown', (event) => {
                // 点击面板之外区域，不阻止blur
                this.stopBlur = false;
            }));
            // IE事件顺序：focusout->foucsin->blur->focus, 支持冒泡的focusin/focusout, 不支持冒泡的是focus/blur
            this.unlistenIEScrollbarBugFns.push(this.renderer.listen(document.body, 'focusin', (event) => {
                if (this.stopBlur && event.relatedTarget !== document.body) {
                    // 本来不需要!==document, 但连续多次点击太快，会发生：刚点击一下，上次的dominator->body focusin, 会进来
                    // 清零，因为下面的聚焦事件，又会触发focusin事件，并不想处理
                    this.stopBlur = false; // 一般情况这里置为false是可以的。
                    // focusin事件，target是聚焦元素。relatedTarget是失焦元素。
                    // 强制让失焦元素，重新获得焦点。
                    event.relatedTarget.focus();
                }
            }));
        }
    }
    unlistenIESrollbarBug() {
        if (TiBrowser.isIE()) {
            // 解绑监听
            for (const x of this.unlistenIEScrollbarBugFns) {
                x();
            }
        }
    }
}
TiListComponent.SCROLL_TOP_TIME = 200; // 设置选中项滚动到TOP所需时间。Chorme下简单测试。TODO：其他浏览器、复杂数据
TiListComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-list',
                template: "<ul #ulRef tabindex=\"-1\" *ngIf=\"options&&options.length > 0 else nodatatemplate\"  [ngClass]=\"{'ti3-dropdown-group':isGroup(options[0])}\" class=\"ti3-drop-list-ul\" [id]=\"appendId('list')\">\r\n        <li *ngIf=\"selectAll && multiple\"\r\n            class=\"ti3-dropdown-option\"\r\n            [ngClass]=\"{'ti3-dropdown-option-hover': optionSelectAll === hoverOption}\"\r\n            (click)=\"onClickItem($event, optionSelectAll)\"\r\n            (mouseenter)=\"onMouseenterItem($event, optionSelectAll)\"\r\n            [id]=\"appendId('select_all')\">\r\n                <section class=\"ti3-overflow-padding\">\r\n                        <label  class=\"ti3-icon ti3-icon-checkmark ti3-multi-select-checkbox\"\r\n                                [ngClass]=\"{'ti3-multi-select-checkbox-selected': selectAllState === true,\r\n                                            'ti3-multi-select-checkbox-indeterminate': selectAllState === null}\">\r\n                        </label>\r\n                        <span [title]=\"selectAllText\">{{selectAllText}}</span>\r\n                </section>\r\n\r\n        </li>\r\n        <ng-container *ngFor=\"let option of options; let i = index\">\r\n                <ng-container *ngTemplateOutlet=\"optionTemplate; context:  {$implicit: option, index: i, liid: i}\">\r\n                </ng-container>\r\n                <ng-container *ngIf=\"showChildren\">\r\n                        <ng-container *ngFor=\"let child of option.children; let j = index;let last = last;\">\r\n                                <ng-container *ngTemplateOutlet=\"optionTemplate; context:  {$implicit: child, index: j, liid: i+'_'+j,last: last}\">\r\n                                </ng-container>\r\n                        </ng-container>\r\n                </ng-container>\r\n        </ng-container>\r\n</ul>\r\n<!-- no data\u6A21\u677F -->\r\n<ng-template #nodatatemplate>\r\n        <div class=\"ti3-dropdown-no-data\" [innerHtml]=\"noDataText\"></div>\r\n</ng-template>\r\n<!-- \u5206\u7EC4\u548C\u9009\u9879\u7684\u6A21\u677F -->\r\n<ng-template #optionTemplate let-item let-i=index let-lid=liid let-last=last><!--\u4E24\u5C42\u6A21\u677F\u5D4C\u5957\uFF0C\u6709\u70B9\u96BE\u7406\u89E3-->\r\n        <li #liRefs [ngClass]=\"{'ti3-dropdown-group-list':isGroup(item),\r\n                'ti3-dropdown-group-list-cascader': item.children && item.children.length > 0 && !showChildren,\r\n                'ti3-dropdown-option':!isGroup(item),\r\n                'ti3-dropdown-option-disabled': !isGroup(item)&&isDisabledFn(item),\r\n                'ti3-dropdown-option-selected': !isGroup(item)&&!multiple&&isSelected(item),\r\n                'ti3-dropdown-option-hover': !isGroup(item)&&item === hoverOption}\"\r\n                (click)=\"onClickItem($event, item)\"\r\n                (mouseenter)=\"onMouseenterItem($event, item)\"\r\n                [id]=\"appendId(lid)\">\r\n                        <section [tiTip]=\"item.tip\"\r\n                                [tiTipPosition]=\"tipPosition\"\r\n                                [tiTipHostEleX]=\"nativeElement\"\r\n                                [tiTipContext]=\"item\"\r\n                                class=\"ti3-overflow-padding\">\r\n                                <label *ngIf=\"multiple&&!isGroup(item)\"\r\n                                        class=\"ti3-icon ti3-icon-checkmark ti3-multi-select-checkbox\"\r\n                                        [ngClass]=\"{'ti3-multi-select-checkbox-selected': isSelected(item)}\">\r\n                                </label>\r\n                                <ng-container *ngIf=\"itemTemplate else labelTemplate\">\r\n                                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item, index: i,last: last}\">\r\n                                        </ng-container>\r\n                                </ng-container>\r\n                                <ng-template #labelTemplate><span [title]=\"item[labelKey]\">{{item[labelKey]}}</span></ng-template>\r\n                        </section>\r\n        </li>\r\n</ng-template>",
                providers: [TiFormComponent.getValueAccessor(TiListComponent)],
                styles: ["::ng-deep :root{--ti-multiselect-text-min-height:30px}:host{box-sizing:border-box;display:inline-block;overflow-x:hidden;overflow-y:auto;padding:var(--ti-common-space-base) 0;position:relative}:host:focus{outline:none}.ti3-dropdown-group>.ti3-dropdown-option{padding-left:var(--ti-common-space-3x)}.ti3-overflow-padding{overflow:hidden;padding:0 10px;text-overflow:ellipsis;white-space:nowrap}.ti3-dropdown-option{background-color:var(--ti-common-color-bg-white-normal);color:inherit;cursor:pointer;line-height:var(--ti-common-line-height-number);list-style:none;padding:var(--ti-common-space-6) 0;text-align:left}.ti3-dropdown-option [tiTextweaken]{color:var(--ti-common-color-text-weaken)}.ti3-dropdown-option:first-child{margin-top:0}.ti3-dropdown-group-list{box-sizing:border-box;color:var(--ti-select-group-color);font-weight:700;height:var(--ti-multiselect-text-min-height);line-height:var(--ti-multiselect-text-min-height);text-align:left}.ti3-dropdown-group-list-cascader{padding-right:var(--ti-common-space-4x);position:relative}.ti3-dropdown-group-list-cascader:after{border-bottom:5px solid var(--ti-common-color-icon-normal);border-left:4px solid transparent;border-right:4px solid transparent;content:\"\";display:block;height:0;position:absolute;right:calc(var(--ti-common-space-3x) - 2px);top:50%;transform:translateY(-50%) rotate(90deg);width:0}.ti3-dropdown-option-selected.ti3-dropdown-group-list-cascader:after{border-bottom-color:var(--ti-common-color-icon-white)}.ti3-dropdown-option-disabled.ti3-dropdown-group-list-cascader:after{border-bottom-color:var(--ti-common-color-icon-disabled)}.ti3-dropdown-no-data,.ti3-dropdown-option.ti3-dropdown-option-disabled,.ti3-dropdown-option.ti3-dropdown-option-disabled:hover,.ti3-dropdown-option.ti3-dropdown-option-disabled [tiTextweaken],.ti3-dropdown-option.ti3-dropdown-option-disabled [tiTextweaken]:hover{color:var(--ti-common-color-text-disabled);cursor:not-allowed}.ti3-dropdown-no-data{line-height:var(--ti-common-line-height-number);padding:var(--ti-common-space-6) var(--ti-input-padding-horizontal)}.ti3-dropdown-option-hover,.ti3-dropdown-option-hover [tiTextweaken]{background-color:var(--ti-select-item-bg-color-hover);color:var(--ti-select-item-text-color-hover)}.ti3-dropdown-option-selected,.ti3-dropdown-option-selected [tiTextweaken]{background-color:var(--ti-select-item-selected-bg-color);color:var(--ti-select-item-selected-text-color)}.ti3-drop-list-ul{overflow-x:hidden;overflow-y:auto}", ".ti3-multi-select-checkbox{-ms-box-sizing:border-box;background-color:var(--ti-checkbox-bg-color);border:1px solid var(--ti-checkbox-border-color);border-radius:var(--ti-common-border-radius-normal);box-sizing:border-box;color:var(--ti-common-color-text-white);cursor:pointer;display:inline-block;height:var(--ti-checkbox-size);line-height:var(--ti-checkbox-mark-size);margin-right:10px;text-align:center;width:var(--ti-checkbox-size)}.ti3-dropdown-option .ti3-multi-select-checkbox-selected{background:var(--ti-checkbox-bg-color-checked);border-color:var(--ti-checkbox-bg-color-checked)}.ti3-dropdown-option .ti3-multi-select-checkbox-indeterminate{border-color:var(--ti-checkbox-bg-color-checked);border-width:5px;vertical-align:sub}.ti3-dropdown-option .ti3-multi-select-checkbox-indeterminate:before{content:\"\"}.ti3-dropdown-option-disabled .ti3-multi-select-checkbox{background:var(--ti-checkbox-bg-color-disable);border-color:var(--ti-common-color-line-dividing);color:var(--ti-checkbox-bg-color-disable);cursor:not-allowed}.ti3-dropdown-option-disabled .ti3-multi-select-checkbox.ti3-multi-select-checkbox-selected{color:var(--ti-checkbox-mark-color-disabled)}"]
            },] }
];
TiListComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone }
];
TiListComponent.propDecorators = {
    multiple: [{ type: Input }],
    options: [{ type: Input }],
    labelKey: [{ type: Input }],
    tipPosition: [{ type: Input }],
    noDataText: [{ type: Input }],
    hideEmptyOption: [{ type: Input }],
    selectAll: [{ type: Input }],
    showChildren: [{ type: Input }],
    scrollTop: [{ type: Input }],
    select: [{ type: Output }],
    hover: [{ type: Output }],
    itemTemplate: [{ type: ContentChild, args: [TemplateRef, /* TODO: add static flag */ { static: true },] }],
    ulRef: [{ type: ViewChild, args: ['ulRef',] }],
    isDisabledFn: [{ type: Input }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
/*
IE兼容性问题：点击面板滚动条，触发失焦，无法阻止。
解决方案：给失焦元素强制获取焦点。修改Form基类不触发组件整体失焦。

涉及知识点：
点击div面板的滚动条，浏览器会失焦，焦点到body。event.preventDefault();，可以阻止默认失焦行为。
点击div面板的滚动条，浏览器会失焦，焦点到body。无法阻止。（问题产生）

Chrome浏览器事件顺序：
blur->focusout->focus->foucsin
IE浏览器事件顺序：
focusout->focusin->blur->focus

IE浏览器，在blur事件里，失焦元素.focus(),	会先显示失焦css，后显示聚焦css，会闪一下。
IE浏览器，在focusout事件里，失焦元素.focus(), 无效。
IE浏览器，在focusin事件里，失焦元素.focus(), 会一直显示聚焦css，不会闪。（作为解决问题的方案）

Chrome blur事件时，document.activeElement是body
IE blur事件时，document.activeElement是将要聚焦的元素。
IE 如果在focusin里，失焦元素.focus()，那么blur时document.activeElement刚好是这个失焦并强制聚焦的元素。

第一版方案：
强制聚焦，用了延时处理
整体onBlur时，IE特殊处理，不闭合面板
闭合面板时，处理标志位。
解决双击滚动条bug，利用监听面板之外点击。

第二版方案：
强制聚焦，不用延时。
修复Form基类，不再触发整体失焦/聚焦。
闭合面板时，处理标志位 （TODO: 设法去除。尽量集中对标志位的管理）
解决双击滚动条bug，利用监听面板之外点击。（TODO: 设法去除。尽量集中对标志位的管理）

第三版方案：
面板打开时监听mouse，面板闭合时不再监听

 */
//# sourceMappingURL=data:application/json;base64,