import { Directive, ElementRef, NgZone, Renderer2, Input } from '@angular/core';
import { TiRenderer } from '../../services/renderer/TiRenderer';
import { TiTableComponent } from './TiTableComponent';
import { TiBrowser } from '../../utils/Util';
/**
 * tiColumnFixed 表格列固定(IE和Edge浏览器不支持)
 *
 * 适用场景：对于列数很多的表格，可以固定前后列，横向滚动查看其它数据。
 *
 * 规范：左侧支持最多3列固定(3列不包含单选/复选框所在列)，右侧支持最多1列固定。横向滚动条贯穿左右，与表格最左和最右对齐。
 * 表格下展场景不需要支持列固定。
 *
 * 9.0.4新增
 */
export class TiColumnFixedDirective {
    constructor(renderer, elementRef, tiRenderer, tableCom, zone) {
        this.renderer = renderer;
        this.tiRenderer = tiRenderer;
        this.tableCom = tableCom;
        this.zone = zone;
        this.columnFixedLeftLast = false;
        this.floatingFixedColumn = false;
        this.firstAfterViewChecked = true;
        this.element = elementRef.nativeElement;
    }
    ngOnInit() {
        // IE 不支持粘性定位position: sticky，使用其他定位方式有闪动，目前无法解决； EDGE 固定列边框不显示， 表头固定时拖动横向滚动条表头横向平移不及时
        this.notSupportBrowser = TiBrowser.isIE() || TiBrowser.isEdge();
        if (this.notSupportBrowser || !this.type) {
            return;
        }
        if (!this.tableCom.fixedColumnInfo.container) {
            const container = this.tiRenderer.findChildrenByClassName(this.tableCom.hostEle, 'ti3-table-container')[0];
            if (!container) {
                return;
            }
            this.tableCom.fixedColumnInfo.container = container;
        }
        this.tableCom.fixedColumnInfo.hasFixedColumn = true;
        this.tagName = this.element.tagName;
        if (this.type === 'right' && this.tagName === 'TH') {
            // 表头固定需要此参数
            this.tableCom.fixedColumnInfo.thFixedRight = this.element;
        }
        this.addBehavior();
    }
    ngAfterViewChecked() {
        if (this.notSupportBrowser || !this.type || !this.firstAfterViewChecked) {
            return;
        }
        this.firstAfterViewChecked = false;
        this.init();
    }
    ngOnDestroy() {
        if (this.containerScrollXChangeSubscription) {
            this.containerScrollXChangeSubscription.unsubscribe();
        }
        if (this.thResizeSubscription) {
            this.thResizeSubscription.unsubscribe();
        }
        if (this.updateFixedThLeftSubscription) {
            this.updateFixedThLeftSubscription.unsubscribe();
        }
        if (this.updateFixedTdLeftSubscription) {
            this.updateFixedTdLeftSubscription.unsubscribe();
        }
    }
    init() {
        if (this.type === 'left') {
            if (this.tagName === 'TH') {
                this.processTh();
            }
            else {
                this.processTd();
            }
        }
        if (this.tagName === 'TH') {
            this.zone.runOutsideAngular(() => {
                // 表头初始时容器的滚动状态还未初始完成
                setTimeout(() => {
                    const scrollLeft = this.tableCom.fixedColumnInfo.container.scrollLeft;
                    const isRightColumnFloat = scrollLeft + this.tableCom.fixedColumnInfo.container.clientWidth < this.tableCom.fixedColumnInfo.container.scrollWidth;
                    this.tableCom.containerScrollXChangeSubject.next({
                        scrollLeft,
                        isRightColumnFloat
                    });
                }, 0);
            });
        }
        else {
            const scrollLeft = this.tableCom.fixedColumnInfo.container.scrollLeft;
            const isRightColumnFloat = scrollLeft + this.tableCom.fixedColumnInfo.container.clientWidth < this.tableCom.fixedColumnInfo.container.scrollWidth;
            this.tableCom.containerScrollXChangeSubject.next({
                scrollLeft,
                isRightColumnFloat
            });
        }
    }
    addBehavior() {
        // 处理左右固定的最后一列是否有阴影(看起来有浮动效果)
        this.containerScrollXChangeSubscription = this.tableCom.containerScrollXChangeSubject.subscribe((scrollInfo) => {
            if (this.type === 'right' && scrollInfo.isRightColumnFloat !== this.floatingFixedColumn) {
                this.processLastFixedColumn(this.element, scrollInfo.isRightColumnFloat);
            }
            if (this.type === 'left' && this.columnFixedLeftLast && (scrollInfo.scrollLeft > 0) !== this.floatingFixedColumn) {
                this.processLastFixedColumn(this.element, scrollInfo.scrollLeft > 0);
            }
        });
        // 处理左侧固定的列的left值(左侧可多列固定)
        if (this.type === 'left' && this.tagName === 'TH') {
            this.thResizeSubscription = this.tableCom.thResizeSubject.subscribe((thResizeInfo) => {
                const th = thResizeInfo.th;
                if (th !== this.element) {
                    return;
                }
                const nextSibling = th.nextElementSibling;
                if (nextSibling && this.tiRenderer.hasClass(nextSibling, 'ti3-table-column-fixed-left')) {
                    const siblings = th.parentElement.children;
                    const index = Array.from(siblings)
                        .indexOf(th);
                    const changeColumnsIndex = [];
                    for (let i = index + 1; i < siblings.length; i++) {
                        if (!siblings[i] || !this.tiRenderer.hasClass(siblings[i], 'ti3-table-column-fixed-left')) {
                            break;
                        }
                        changeColumnsIndex.push(i);
                        this.tableCom.fixedColumnInfo.fixedColumnLeftValues[i] += thResizeInfo.leftEdge;
                        this.renderer.setStyle(siblings[i], 'left', `${this.tableCom.fixedColumnInfo.fixedColumnLeftValues[i]}px`);
                    }
                    const bodyTable = this.tableCom.isFixedHead ? thResizeInfo.resizableOpts.secondTable : thResizeInfo.resizableOpts.table;
                    const trs = Array.from(bodyTable.children[1].children)
                        .filter((tr) => {
                        return this.needFixedColumnTr(tr);
                    });
                    trs.forEach((tr) => {
                        changeColumnsIndex.forEach((columnIndex) => {
                            this.renderer.setStyle(tr.children[columnIndex], 'left', `${this.tableCom.fixedColumnInfo.fixedColumnLeftValues[columnIndex]}px`);
                        });
                    });
                }
            });
            this.updateFixedThLeftSubscription = this.tableCom.updateFixedThLeftSubject.subscribe(() => {
                this.processTh();
            });
        }
        if (this.type === 'left' && this.tagName === 'TD') {
            this.updateFixedTdLeftSubscription = this.tableCom.updateFixedTdLeftSubject.subscribe(() => {
                this.processTd();
            });
        }
    }
    processTd() {
        const siblings = this.element.parentElement.children;
        const index = Array.from(siblings)
            .indexOf(this.element);
        // 进行判空处理，因为有可能是td元素先出现。
        // TODO: 考虑下processTd和processTd是否可以使用相同的处理方式。
        if (this.tableCom.fixedColumnInfo.fixedColumnLeftValues && this.tableCom.fixedColumnInfo.fixedColumnLeftValues.length &&
            this.tableCom.fixedColumnInfo.fixedColumnLeftValues[index] !== this.tdLeft) {
            this.tdLeft = this.tableCom.fixedColumnInfo.fixedColumnLeftValues[index];
            this.renderer.setStyle(this.element, 'left', `${this.tdLeft}px`);
        }
        if (index === this.tableCom.fixedColumnInfo.columnFixedLeftLastIndex) {
            this.columnFixedLeftLast = true;
        }
    }
    processTh() {
        const siblings = this.element.parentElement.children;
        let left = 0;
        this.tableCom.fixedColumnInfo.fixedColumnLeftValues = [];
        // tslint:disable-next-line:prefer-for-of
        for (let i = 0; i < siblings.length; i++) {
            const current = siblings[i];
            if (this.tableCom.fixedColumnInfo.fixedColumnLeftValues[i] !== left) {
                this.tableCom.fixedColumnInfo.fixedColumnLeftValues[i] = left;
                this.renderer.setStyle(current, 'left', `${left}px`);
            }
            // offsetWidth 包括边框
            left += current.offsetWidth;
            const nextSibling = siblings[i + 1];
            if (nextSibling && !this.tiRenderer.hasClass(nextSibling, 'ti3-table-column-fixed-left')) {
                this.columnFixedLeftLast = true;
                this.tableCom.fixedColumnInfo.columnFixedLeftLastIndex = i;
                break;
            }
            else {
                this.columnFixedLeftLast = false;
            }
        }
    }
    processLastFixedColumn(ele, add) {
        if (add) {
            this.floatingFixedColumn = true;
            this.renderer.addClass(ele, 'ti3-table-floating-fixed-column');
        }
        else {
            this.floatingFixedColumn = false;
            this.renderer.removeClass(ele, 'ti3-table-floating-fixed-column');
        }
    }
    needFixedColumnTr(tr) {
        if (!tr) {
            return false;
        }
        const classes = ['ti3-details-tr', 'ti3-table-nodata', 'ti3-table-loadfail',
            'ti3-table-nodata-guide', 'ti3-table-nodata-simple'];
        for (const className of classes) {
            if (this.tiRenderer.hasClass(tr, className)) {
                return false;
            }
        }
        return true;
    }
}
TiColumnFixedDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'th[tiColumnFixed], td[tiColumnFixed]',
                host: {
                    '[class.ti3-table-column-fixed-right]': "!notSupportBrowser && type === 'right'",
                    '[class.ti3-table-column-fixed-left]': "!notSupportBrowser && type === 'left'"
                }
            },] }
];
TiColumnFixedDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: TiRenderer },
    { type: TiTableComponent },
    { type: NgZone }
];
TiColumnFixedDirective.propDecorators = {
    type: [{ type: Input, args: ['tiColumnFixed',] }]
};
//# sourceMappingURL=data:application/json;base64,