import { Component, Input } from '@angular/core';
import { TiFormComponent } from './TiFormComponent';
/**
 * 复原完整model对象基类，基于valueKey时，select/buttongroup实现复原选中值到完整对象
 */
export class TiWholeComponent extends TiFormComponent {
    constructor() {
        super(...arguments);
        /**
         * @ignore
         * 找到value值的函数
         */
        this.valueFn = (item) => {
            return item[this.valueKey];
            // tslint:disable-next-line:semicolon
        }; // 这个分号是书写正确的
    }
    /**
     * @ignore
     */
    get modelWhole() {
        return this._modelWhole;
    }
    /**
     * @ignore
     * 用户点选时modelWhole改变，要同时更改model
     */
    set modelWhole(value) {
        this._modelWhole = value;
        if (this.valueKey && value !== undefined && value !== null) {
            // 存在valueKey，且value不为空
            this.model = this['multiple'] ?
                value.map((item) => this.valueFn(item))
                : this.valueFn(value);
        }
        else {
            this.model = value;
        }
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        // 监听 options/items 变化
        if ((changes['options'] || changes['items']) && this.valueKey && this.model) {
            // 存在 valueKey 时，modelWhole 需通过匹配 valueKey 来重新赋值（解决动态改变options/items时选中项不高亮问题 issues#1332）
            this.writeValue(this.model);
        }
    }
    /**
     * 每次用户主动设置ngModel值时，需要顺便更改modelWhole
     * @param model 设置的ngModel值
     */
    writeValue(model) {
        super.writeValue(model);
        if (this.valueKey && model !== undefined && model !== null) { // 存在valueKey，且value不为空
            // 历史设计缺陷：select总数据集是options，buttongroup总数据集时items
            const options = this['options'] ? this['options'] : this['items'];
            // 直接去写内部值，不触发set函数
            this._modelWhole = this['multiple'] ?
                options.filter((item) => model.includes(this.valueFn(item))) :
                options.find((item) => this.valueFn(item) === model);
        }
        else {
            this._modelWhole = model;
        }
    }
}
TiWholeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-whole',
                template: ''
            },] }
];
TiWholeComponent.propDecorators = {
    valueKey: [{ type: Input }],
    valueFn: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGlXaG9sZUNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL0BjbG91ZC90aW55My9jb21wb25lbnRzL2Jhc2UvVGlXaG9sZUNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDaEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BEOztHQUVHO0FBS0gsTUFBTSxPQUFPLGdCQUFpQixTQUFRLGVBQWU7SUFKckQ7O1FBa0NJOzs7V0FHRztRQUNNLFlBQU8sR0FBdUIsQ0FBQyxJQUFTLEVBQUUsRUFBRTtZQUNqRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDM0IscUNBQXFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDLGFBQWE7SUEyQnBCLENBQUM7SUF4REc7O09BRUc7SUFDSCxJQUFXLFVBQVU7UUFDakIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzVCLENBQUM7SUFDRDs7O09BR0c7SUFDSCxJQUFXLFVBQVUsQ0FBQyxLQUFVO1FBRTVCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFDeEQsdUJBQXVCO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzVDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzdCO2FBQU07WUFDSCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUN0QjtJQUNMLENBQUM7SUFVRCxXQUFXLENBQUMsT0FBc0I7UUFDOUIsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixzQkFBc0I7UUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDekUsMEZBQTBGO1lBQzFGLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQy9CO0lBQ0wsQ0FBQztJQUNEOzs7T0FHRztJQUNILFVBQVUsQ0FBQyxLQUFVO1FBQ2pCLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEIsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxLQUFLLElBQUksRUFBRSxFQUFFLHVCQUF1QjtZQUNqRixrREFBa0Q7WUFDbEQsTUFBTSxPQUFPLEdBQWUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM5RSxtQkFBbUI7WUFDbkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDakMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNuRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDO1NBQ2pFO2FBQU07WUFDSCxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztTQUM1QjtJQUNMLENBQUM7OztZQW5FSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLFFBQVEsRUFBRSxFQUFFO2FBQ2Y7Ozt1QkFPSSxLQUFLO3NCQTRCTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUaUZvcm1Db21wb25lbnQgfSBmcm9tICcuL1RpRm9ybUNvbXBvbmVudCc7XHJcbi8qKlxyXG4gKiDlpI3ljp/lrozmlbRtb2RlbOWvueixoeWfuuexu++8jOWfuuS6jnZhbHVlS2V55pe277yMc2VsZWN0L2J1dHRvbmdyb3Vw5a6e546w5aSN5Y6f6YCJ5Lit5YC85Yiw5a6M5pW05a+56LGhXHJcbiAqL1xyXG5AQ29tcG9uZW50KHsvLyBsaWLnvJbor5HopoHmsYJAQ29tcG9uZW50XHJcbiAgICBzZWxlY3RvcjogJ3RpLXdob2xlJyxcclxuICAgIHRlbXBsYXRlOiAnJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgVGlXaG9sZUNvbXBvbmVudCBleHRlbmRzIFRpRm9ybUNvbXBvbmVudCB7XHJcbiAgICAvKipcclxuICAgICAqIOW9k+WtmOWcqHZhbHVlS2V55pe277yM6YCJ5Lit5YC85Z+65LqOdmFsdWVLZXlcclxuICAgICAqXHJcbiAgICAgKiAxMC4wLjHmlrDlop5cclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgdmFsdWVLZXk6IHN0cmluZztcclxuICAgIHByaXZhdGUgX21vZGVsV2hvbGU6IGFueTtcclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IG1vZGVsV2hvbGUoKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbW9kZWxXaG9sZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZVxyXG4gICAgICog55So5oi354K56YCJ5pe2bW9kZWxXaG9sZeaUueWPmO+8jOimgeWQjOaXtuabtOaUuW1vZGVsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgbW9kZWxXaG9sZSh2YWx1ZTogYW55KSB7XHJcblxyXG4gICAgICAgIHRoaXMuX21vZGVsV2hvbGUgPSB2YWx1ZTtcclxuICAgICAgICBpZiAodGhpcy52YWx1ZUtleSAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIOWtmOWcqHZhbHVlS2V577yM5LiUdmFsdWXkuI3kuLrnqbpcclxuICAgICAgICAgICAgdGhpcy5tb2RlbCA9IHRoaXNbJ211bHRpcGxlJ10gP1xyXG4gICAgICAgICAgICAgICAgdmFsdWUubWFwKChpdGVtOiBhbnkpID0+IHRoaXMudmFsdWVGbihpdGVtKSlcclxuICAgICAgICAgICAgICAgIDogdGhpcy52YWx1ZUZuKHZhbHVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKiDmib7liLB2YWx1ZeWAvOeahOWHveaVsFxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSB2YWx1ZUZuOiAoaXRlbTogYW55KSA9PiBhbnkgPSAoaXRlbTogYW55KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW1bdGhpcy52YWx1ZUtleV07XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnNlbWljb2xvblxyXG4gICAgfTsgLy8g6L+Z5Liq5YiG5Y+35piv5Lmm5YaZ5q2j56Gu55qEXHJcblxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLm5nT25DaGFuZ2VzKGNoYW5nZXMpO1xyXG4gICAgICAgIC8vIOebkeWQrCBvcHRpb25zL2l0ZW1zIOWPmOWMllxyXG4gICAgICAgIGlmICgoY2hhbmdlc1snb3B0aW9ucyddIHx8IGNoYW5nZXNbJ2l0ZW1zJ10pICYmIHRoaXMudmFsdWVLZXkgJiYgdGhpcy5tb2RlbCkge1xyXG4gICAgICAgICAgICAvLyDlrZjlnKggdmFsdWVLZXkg5pe277yMbW9kZWxXaG9sZSDpnIDpgJrov4fljLnphY0gdmFsdWVLZXkg5p2l6YeN5paw6LWL5YC877yI6Kej5Yaz5Yqo5oCB5pS55Y+Yb3B0aW9ucy9pdGVtc+aXtumAieS4remhueS4jemrmOS6rumXrumimCBpc3N1ZXMjMTMzMu+8iVxyXG4gICAgICAgICAgICB0aGlzLndyaXRlVmFsdWUodGhpcy5tb2RlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDmr4/mrKHnlKjmiLfkuLvliqjorr7nva5uZ01vZGVs5YC85pe277yM6ZyA6KaB6aG65L6/5pu05pS5bW9kZWxXaG9sZVxyXG4gICAgICogQHBhcmFtIG1vZGVsIOiuvue9rueahG5nTW9kZWzlgLxcclxuICAgICAqL1xyXG4gICAgd3JpdGVWYWx1ZShtb2RlbDogYW55KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIud3JpdGVWYWx1ZShtb2RlbCk7XHJcbiAgICAgICAgaWYgKHRoaXMudmFsdWVLZXkgJiYgbW9kZWwgIT09IHVuZGVmaW5lZCAmJiBtb2RlbCAhPT0gbnVsbCkgeyAvLyDlrZjlnKh2YWx1ZUtlee+8jOS4lHZhbHVl5LiN5Li656m6XHJcbiAgICAgICAgICAgIC8vIOWOhuWPsuiuvuiuoee8uumZt++8mnNlbGVjdOaAu+aVsOaNrumbhuaYr29wdGlvbnPvvIxidXR0b25ncm91cOaAu+aVsOaNrumbhuaXtml0ZW1zXHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnM6IEFycmF5PGFueT4gPSB0aGlzWydvcHRpb25zJ10gPyB0aGlzWydvcHRpb25zJ10gOiB0aGlzWydpdGVtcyddO1xyXG4gICAgICAgICAgICAvLyDnm7TmjqXljrvlhpnlhoXpg6jlgLzvvIzkuI3op6blj5FzZXTlh73mlbBcclxuICAgICAgICAgICAgdGhpcy5fbW9kZWxXaG9sZSA9IHRoaXNbJ211bHRpcGxlJ10gP1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5maWx0ZXIoKGl0ZW06IGFueSkgPT4gbW9kZWwuaW5jbHVkZXModGhpcy52YWx1ZUZuKGl0ZW0pKSkgOlxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5maW5kKChpdGVtOiBhbnkpID0+IHRoaXMudmFsdWVGbihpdGVtKSA9PT0gbW9kZWwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21vZGVsV2hvbGUgPSBtb2RlbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19