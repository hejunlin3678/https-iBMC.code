import { Component, ContentChild, ElementRef, EventEmitter, Input, IterableDiffers, Output, Renderer2, TemplateRef, ViewChildren, QueryList, ChangeDetectorRef } from '@angular/core';
import { Util, TiKeymap } from '../../utils/Util';
import { TiBaseComponent } from '../base/TiBaseModule';
import { TiTreeUtil } from './TiTreeUtil';
import { TiLocale } from '../../locale/TiLocaleModule';
import { TiRenderer } from '../../services/renderer/TiRenderer';
/**
 * Tree树组件
 *
 * 分类：支持单选、多选两种类型
 *
 * 公共方法：树组件提供 [TiTreeUtil]{@link ../classes/TiTreeUtil.html} 公共方法，包括增、删、改、查、选中、取消选中、遍历、筛选、获取选中项等操作
 *
 * <example-url>../tiny3demo/#/tree/tree-all</example-url>
 */
export class TiTreeComponent extends TiBaseComponent {
    constructor(elementRef, renderer2, iterableDiffers, tiRenderer, cdRef) {
        super(elementRef, renderer2);
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.iterableDiffers = iterableDiffers;
        this.tiRenderer = tiRenderer;
        this.cdRef = cdRef;
        /**
         * 设置多选树时，父节点是否可被点击选中，默认父节点子节点都显示复选框，都可被选中，设置false时，只有子节点前边显示复选框。
         */
        this.parentCheckable = true;
        /**
         * 设置是否为多选。
         */
        this.multiple = false;
        /**
         * 当为多选时该接口才生效。
         *
         * 默认为 false, 当设置为 true 时：
         *
         * 1.点击文本，复选框状态不会改变，只会触发select事件；
         *
         * 2.点击复选框只会触发change事件；
         *
         * 3.复选框disabled时，点击文本会触发select事件。
         *
         * Tiny3.1.1-alpha新增。
         */
        this.changedByCheckbox = false;
        /**
         * 10.1.4 新增
         * 支持拖放
         */
        this.nodeDraggable = false;
        /**
         * 树节点展开前的事件回调，一般用于异步数据获取
         */
        this.beforeExpand = new EventEmitter();
        /**
         * 当用户点击某一节点时触发的事件
         */
        // tslint:disable-next-line:no-output-named-after-standard-event
        this.select = new EventEmitter();
        /**
         * 当前选中项发生变化时，触发change事件
         */
        // tslint:disable-next-line:no-output-named-after-standard-event
        this.change = new EventEmitter();
        /**
         * 10.1.4 新增
         * drop event
         */
        this.nodeDrop = new EventEmitter();
        /**
         * 10.1.4 新增
         * 悬浮增加节点按钮回调
         */
        this.nodeAdded = new EventEmitter();
        /**
         * 10.1.4 新增
         * 悬浮编辑节点按钮回调
         */
        this.nodeEdited = new EventEmitter();
        /**
         * 10.1.4 新增
         * 悬浮删除节点按钮回调
         */
        this.nodeDeleted = new EventEmitter();
        /**
         * @ignore
         * 词条
         */
        this.treeLan = TiLocale.getLocaleWords().tiTree;
        // 处理当前节点选中状态变化后，对父子节点的影响
        this.setSeletedState = (node, allData, checked) => {
            if (checked === true) {
                TiTreeUtil.selectAllChildren(node);
                TiTreeUtil.selectParents(node, allData, true);
            }
            else {
                TiTreeUtil.deSelectAllChildren(node);
                TiTreeUtil.deSelectParents(node, allData);
            }
        };
        /**
         * 单选时，取消所有节点的选中状态
         * @param  allData 所有节点数据
         */
        this.deSelectAllNode = (allData) => {
            allData.forEach((node) => {
                TiTreeUtil.deSelectAllChildren(node);
            });
        };
        // 初始化选中项高亮
        this.initActived = (data) => {
            let result;
            for (const node of data) {
                if (node.checked === true) {
                    return node;
                }
                if (!TiTreeUtil.isLeaf(node)) {
                    result = this.initActived(node.children);
                }
                if (!Util.isUndefined(result)) {
                    return result;
                }
            }
            return result;
        };
    }
    ngOnInit() {
        super.ngOnInit();
        this.dataDiffer = this.iterableDiffers.find(this.data)
            .create();
        // 内部使用的数据，用于记录用户的操作改变
        // TODO: 仅在初始化时挡非法数据，是不够的。建议去除。但因为要兼容已发出的版本，所以不去除。
        this.data = !Util.isArray(this.data) ? [] : this.data;
        // 初始化默认选中项高亮
        this.actived = this.initActived(this.data);
    }
    ngDoCheck() {
        super.ngDoCheck();
        const dataChanges = this.dataDiffer.diff(this.data);
        if (dataChanges) {
            // 重新初始化默认选中项高亮
            this.actived = this.initActived(this.data);
        }
    }
    /**
     * @ignore
     * @description 判断是否显示复选框
     * @param node 节点数据
     */
    showCheckboxFn(node) {
        if (this.multiple !== true) {
            return false;
        }
        if (this.parentCheckable === true) {
            return true;
        }
        return TiTreeUtil.isLeaf(node);
    }
    /**
     * @ignore
     * @description 点击父节点图标执行的逻辑
     * @param  node 当前节点数据
     */
    onClickPnodeIcon(node, event) {
        if (node.disabled) {
            return;
        }
        // 阻止事件冒泡：点击父节点图标无高亮样式
        event.stopPropagation();
        this.beforeExpandNode = node;
        // 1.当前节点是展开状态
        if (node.expanded) {
            node.expanded = false;
        }
        else if (this.beforeExpand.observers.length === 0) { // 2.如果未定义beforeExpand事件(非异步)，点击时让节点展开
            node.expanded = true;
        }
        else { // 3.异步获取数据：将组件实例通知出去
            this.beforeExpand.emit(this);
        }
    }
    // 获取异步点击的节点
    getBeforeExpandNode() {
        return this.beforeExpandNode;
    }
    /**
     * @ignore
     * @description 根据item的isExpanded属性获取item图标
     * @param node 当前节点数据
     */
    getItemIcon(node) {
        if (TiTreeUtil.isLeaf(node)) {
            return `${node.expandIcon} ti3-tree-node-icon`;
        }
        return `${(node.expanded) ? node.expandIcon : node.collapseIcon} ti3-tree-node-icon`;
    }
    /**
     * @ignore
     * @description 点击复选框触发select、change事件
     * 需要注意：click事件中拿到的是操作前的选中状态，而change事件中拿到的是操作后的选中状态
     * @param node 当前节点数据
     */
    onInputChange(node, event) {
        if (node.disabled === true) {
            return;
        }
        // 点击当前项高亮
        this.actived = node;
        this.setSeletedState(node, this.data, node.checked);
        if (!this.changedByCheckbox) {
            this.select.emit(node);
        }
        this.change.emit(node);
    }
    /**
     * @ignore
     * 点击文本区域
     * @param node 当前节点数据
     * @param event 鼠标事件
     * @returns void
     */
    onItemWrapperClick(node) {
        if (node.disabled === true || node.editing) {
            return;
        }
        // 悬浮功能: 点击生成节点时，显示操作按钮
        if (!node.editing) {
            node.isHover = true;
        }
        // 点击当前项高亮
        this.actived = node;
        // 1.处理多选情况
        if (this.multiple === true) {
            if (this.changedByCheckbox) {
                this.select.emit(node);
                return;
            }
            // 1.1 处理父节点不支持多选
            if (!this.showCheckboxFn(node)) {
                return;
            }
            // 1.2 处理父节点支持多选
            node.checked = !node.checked;
            // 处理当前节点选中状态变化后，对父子节点的影响
            this.setSeletedState(node, this.data, node.checked);
            this.select.emit(node);
            this.change.emit(node);
            return;
        }
        // 2.处理单选场景
        // 2.1(单选且已选中)或者(单选且非叶子节点)的情况下，点击只会触发select事件,因为当前选中项不会发生变化
        if (node.checked === true || !TiTreeUtil.isLeaf(node)) {
            // 触发select事件
            this.select.emit(node);
            return;
        }
        // 2.2单选叶子节点未选中
        this.deSelectAllNode(this.data);
        node.checked = true;
        TiTreeUtil.selectParents(node, this.data, 'indeterminate'); // 设置祖先节点的选中状态
        // 触发select和change事件
        this.select.emit(node);
        this.change.emit(node);
    }
    /**
     * @ignore
     */
    trackByFn(index, node) {
        return index;
    }
    /**
     * @ignore
     * 判断是否为叶子节点
     */
    isLeaf(node) {
        return !(Util.isArray(node.children));
    }
    /**
     * @ignore
     * @param node 节点数据
     */
    onBlur(node) {
        if (node.focused) {
            node.focused = false; // 失焦后节点删除获焦标志类
        }
    }
    /**
     * @ignore
     * @param node 节点数据
     */
    onFocus(node) {
        if (!node.focused && !node.disabled) {
            node.focused = true; // 设置获焦标志类
        }
    }
    /**
     * @ignore
     * @param event 键盘事件
     * @param node 当前节点数据
     */
    onKeydown(event, node) {
        /**
         * 快捷键交互定义
         * 1,tab键切换焦点至树组件的文本区域，复选框无需提供焦点，文本样式为文本悬浮态
         * 2,树组件内部焦点切换支持上下左右键：
         *    -上下键：按上下键可以在并列的节点移动，如无并列节点无法移动。
         *    -左右键：展开收起节点及跨层级移动焦点。当焦点再子节点时，按左键可收起改节点，焦点移动至父节点；
         *     当焦点在父节点上时，按右键可将焦点移动到启子节点上,如节点未展开则同时展开该子节点
         * 3,Enter键或Space键：当焦点在节点名称上时，按下键则选中或取消该节点，选中后节点变为选中态
         */
        // 阻止默认和冒泡
        if ([TiKeymap.KEY_ENTER, TiKeymap.KEY_NUMPAD_ENTER, TiKeymap.KEY_SPACE, TiKeymap.KEY_ARROW_UP, TiKeymap.KEY_ARROW_DOWN,
            TiKeymap.KEY_ARROW_LEFT, TiKeymap.KEY_ARROW_RIGHT].indexOf(event.keyCode) > -1) {
            event.preventDefault();
            event.stopPropagation();
        }
        switch (event.keyCode) {
            case TiKeymap.KEY_ENTER: // ENTER键
            case TiKeymap.KEY_NUMPAD_ENTER: // ENTER键(苹果数字小键盘)
            case TiKeymap.KEY_SPACE:
                this.onItemWrapperClick(node);
                break;
            case TiKeymap.KEY_ARROW_UP: // 向上箭头，同级
                this.setKeyDownUp(node, 'up');
                break;
            case TiKeymap.KEY_ARROW_DOWN: // 向下箭头，同级
                this.setKeyDownUp(node, 'down');
                break;
            case TiKeymap.KEY_ARROW_LEFT: // 向左箭头，跨节点层级
                this.setKeyleft(node);
                break;
            case TiKeymap.KEY_ARROW_RIGHT: // 向右箭头，跨节点层级
                this.setKeyright(node);
                break;
            default:
                break;
        }
    }
    // 上下键
    setKeyDownUp(node, type) {
        let parArr;
        const pareNode = TiTreeUtil.getParentNode(this.data, node); // 获取父节点
        if (pareNode) {
            parArr = pareNode.children;
        }
        else {
            parArr = this.data;
        }
        const curIndex = parArr.findIndex((item) => item === node); // 获取当前节点在其父节点集合的index
        this.setFocusNode(node, parArr, curIndex, type);
    }
    // 左键
    setKeyleft(node) {
        // 当正在编辑时，关闭其父节点时，节点恢复文本状态
        if (node.editing && node.label !== '') {
            delete node.editing;
        }
        const pareNode = TiTreeUtil.getParentNode(this.data, node);
        if (!pareNode) { // 当前节点时一级节点时 return
            return;
        }
        pareNode.expanded = false;
        if (pareNode.disabled) {
            this.setKeyleft(pareNode);
            return;
        }
        pareNode.focused = true;
        this.setFocusElem(node);
    }
    // 右键
    setKeyright(node) {
        if (TiTreeUtil.isLeaf(node)) {
            return;
        }
        const childNodeArr = node.children;
        const childnoDisabledArr = childNodeArr.filter((childNode) => !childNode.disabled); // 获取子节点未禁用的节点集合
        if (childnoDisabledArr.length < 1) {
            return;
        }
        const childFirstNode = childnoDisabledArr[0]; // 未禁用的节点集合的first获取焦点
        childFirstNode.focused = true;
        if (!node.expanded) {
            node.expanded = true;
        }
        this.setFocusElem(node);
    }
    // 上下键焦点处理
    setFocusNode(node, parList, curIndex, type) {
        let targetNode;
        let targetIndex;
        let _curIndex = curIndex;
        if (type === 'up') { // 同级获取上一个节点
            targetIndex = _curIndex - 1;
            if (targetIndex < 0) {
                targetIndex = parList.length - 1;
            }
            targetNode = parList[targetIndex];
        }
        else { // 同级获取下一个节点
            targetIndex = _curIndex + 1;
            if (targetIndex > (parList.length - 1)) {
                targetIndex = 0;
            }
            targetNode = parList[targetIndex];
        }
        // 上下移动时，first或last节点禁用时,return
        if ((targetNode === parList[0] || targetNode === parList[parList.length - 1]) && targetNode.disabled) {
            return;
        }
        // 当中间节点有禁用时，移动到禁用的节点上一个或下一个节点
        if (targetNode.disabled) {
            _curIndex = targetIndex;
            this.setFocusNode(node, parList, _curIndex, type);
            return;
        }
        targetNode.focused = true;
        this.setFocusElem(node);
    }
    // 目标元素获取焦点
    setFocusElem(node) {
        if (node.focused) {
            node.focused = false;
        }
        // 当按键操作会改变文本元素是否添加class`ti3-tree-text-focus`, 加延时是为了class变更后，获取正确的含有class的文本区域元素
        // 类ti3-tree-text-focus作为获焦元素的标志
        setTimeout(() => {
            // 找到含有类ti3-tree-text-focus的文本元素
            const focusNode = this.elems.toArray().find((elem) => this.tiRenderer.hasClass(elem.nativeElement, 'ti3-tree-text-focus'));
            if (focusNode) {
                focusNode.nativeElement.focus();
            }
        }, 0);
    }
    /**
     * @ignore
     * @param startEvent 鼠标事件
     * @param node 当前节点数据
     * @description 拖拽开始时在被拖拽元素上触发此事件
     */
    onDragstart(event, node) {
        event.stopPropagation();
        this.dragNode = node; // 保存被拖拽的节点
    }
    /**
     * @ignore
     * @param enterEvent 鼠标事件
     * @param node 当前节点数据
     * @description 拖拽鼠标进入元素时在该元素上触发
     */
    onDragenter(event, node) {
        event.preventDefault();
        this.overNode = null;
        // 拖拽节点和目标节点是同一节点,retuen
        if (node === this.dragNode) {
            return;
        }
        // 保存移动到的节点
        this.overNode = node;
        // 拖拽的节点拖拽到其子节点时，关闭其节点
        if (this.dragNode === TiTreeUtil.getParentNode(this.data, node)) {
            this.dragNode.expanded = false;
        }
    }
    /**
     * @ignore
     * @param overEvent 鼠标事件
     * @param node 当前节点数据
     * @description 拖拽时鼠标在目标元素上移动时触发
     */
    onDragover(event, node) {
        event.preventDefault();
        event.dataTransfer.effectAllowed = "move";
        if (node === this.overNode) {
            this.clearDragClass(event); // 清除节点之前的样式
            this.dropPosition = this.calcDropPosition(event); // 获取移动到节点的位置
            // 拖拽经过节点,放置内部位置时，且该节点未展开时，展开其节点
            if (this.dropPosition === 0 && !node.expanded) {
                node.expanded = true;
            }
            // 设置拖动过程中的状态样式
            this.renderer2.addClass(event.currentTarget, this.setDragOverClass(node));
        }
        ;
    }
    /**
     * @ignore
     * @param leaveEvent 鼠标事件
     * @param node 当前节点数据
     * @description 拖拽时鼠标在离开目标元素时触发
     */
    onDragleave(event, node) {
        event.preventDefault();
        this.clearDragClass(event);
    }
    /**
     * @ignore
     * @param dropEvent 鼠标事件
     * @param node 当前节点数据
     * @description 鼠标在拖放目标上释放时,在拖放目标上触发
     */
    onDrop(event, node) {
        event.preventDefault();
        this.dragNode.focused = false;
        this.clearDragClass(event);
        // 异步加载节点时禁止放置到节点内部
        if (this.dropPosition === 0 && node.loadStatus === 'loading') {
            return;
        }
        // 拖拽节点和目标节点是同一节点,retuen
        if (node === this.dragNode) {
            return;
        }
        const params = {
            event: event,
            targetNode: node,
            dragNode: this.dragNode,
            dropPosition: this.dropPosition
        };
        TiTreeUtil.dropApply(params, this.data, this.multiple);
        this.nodeDrop.emit(params);
    }
    /**
     * @ignore
     * @param endEvent 鼠标事件
     * @param node 当前节点数据
     * @description 鼠标在拖放目标上释放时,在拖拽元素上触发
     */
    onDragend(event, node) {
        event.preventDefault();
        this.dragNode = null;
        this.overNode = null;
    }
    // 计算拖拽节点的放置方式0（作为目标节点的子节点），-1（放置在目标节点的前面）,1（放置在目标节点的后面）
    calcDropPosition(event) {
        const clientY = event.clientY;
        const { top, height } = event.target.getBoundingClientRect();
        const gapHeight = height / 3;
        if (clientY > top + height - gapHeight) {
            return 1;
        }
        if (clientY < top + gapHeight) {
            return -1;
        }
        return 0;
    }
    // 清除拖拽样式
    clearDragClass(event) {
        // 拖拽过程中的三种状态
        const dragClasses = ['ti3-tree-drag-over-inner', 'ti3-tree-drag-over-top', 'ti3-tree-drag-over-bottom'];
        dragClasses.forEach((item) => {
            this.renderer2.removeClass(event.currentTarget, item);
        });
    }
    // 根据拖动的位置获取相应的样式
    setDragOverClass(node) {
        if (node !== this.overNode) {
            return;
        }
        if (this.dropPosition === 0) {
            return "ti3-tree-drag-over-inner";
        }
        else if (this.dropPosition === -1) {
            return "ti3-tree-drag-over-top";
        }
        else if (this.dropPosition === 1) {
            return "ti3-tree-drag-over-bottom";
        }
        return "";
    }
    /**
     * @ignore
     * @param node 节点
     * @param type hover标志
     */
    onMousenode(node, type) {
        // 鼠标进入节点且不是编辑状态时，显示操作按钮
        if (type === 'enter' && !node.editing) {
            node.isHover = true;
        }
        else {
            delete node.isHover;
        }
    }
    /**
     * @ignore
     * @param node 节点
     */
    onBlurEdit(node) {
        if (node.label !== '') {
            delete node.editing;
        }
    }
    /**
      * @ignore
      * @param deleteEvent 删除事件
      * @param node 节点
      */
    deleteNode(event, node) {
        // 阻止事件冒泡 防止触发选中
        event.stopPropagation();
        const parentNode = TiTreeUtil.getParentNode(this.data, node);
        TiTreeUtil.removeNode(this.data, node);
        // 节点的父节点无子节点时， 删除children属性，解决依旧会显示展开图标问题
        if (parentNode && parentNode.children.length < 1) {
            delete parentNode.children;
        }
        // 更新多选状态
        if (this.multiple) {
            TiTreeUtil.updateChecked(this.data);
        }
        this.nodeDeleted.emit(node);
    }
    /**
     * @ignore
     * @param editEvent 编辑事件
     * @param node 节点
     */
    editNode(event, node) {
        // 阻止事件冒泡 防止触发选中
        event.stopPropagation();
        node.editing = true;
        delete node.isHover;
        this.nodeEdited.emit(node);
        // autofocus视图变化时 会报错 视图变化时 强制变检一次，消除报错(Expression has changed after it was checked)
        this.cdRef.detectChanges();
    }
    /**
     * @ignore
     * @param addEvent 增加事件
     * @param node 节点
     */
    addNode(event, node) {
        // 阻止事件冒泡 防止触发选中
        event.stopPropagation();
        const newNode = {
            label: this.treeLan.newNode,
            editing: true,
        };
        node.expanded = true;
        this.nodeAdded.emit(newNode);
        TiTreeUtil.addNode(this.data, [newNode], 0, node);
        // 更新多选状态
        if (this.multiple) {
            TiTreeUtil.updateChecked(this.data);
        }
        // autofocus视图变化时 会报错 强制变检一次，消除报错(Expression has changed after it was checked)
        this.cdRef.detectChanges();
    }
}
TiTreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-tree',
                template: "<ul class=\"ti3-tree-container ti3-tree-parent-node\" [id]=\"appendId('list')\">\r\n    <li *ngFor=\"let node of data; index as i;\">\r\n        <ng-container *ngTemplateOutlet=\"treeItem; context: {$implicit: node, index: i}\"></ng-container>\r\n    </li>\r\n</ul>\r\n\r\n<ng-template #treeItem let-node let-i=index>\r\n    <div class=\"ti3-tree-content-box\"\r\n        [id]=\"appendId(i + '_node')\"\r\n        [ngClass]=\"{'ti3-tree-item-leaf': isLeaf(node), 'ti3-tree-content-box-disabled': node.disabled}\">\r\n        <span class=\"ti3-tree-item-guide-line\"></span>\r\n        <ti-loading *ngIf=\"node.loadStatus === 'loading'\" class=\"ti3-tree-item-loading\"></ti-loading>\r\n        <i (click)=\"onClickPnodeIcon(node, $event)\" *ngIf=\"!node.loadStatus || node.loadStatus !== 'loading'\"\r\n            [id]=\"appendId(i + '_icon')\"\r\n            class=\"ti3-icon\"\r\n            [ngClass]=\"{'ti3-icon-minus-square': !isLeaf(node) && node.expanded,\r\n                        'ti3-icon-plus-square': !isLeaf(node) && !node.expanded,\r\n                        'ti3-icon-square-disabled': !isLeaf(node) && node.disabled}\">\r\n        </i>\r\n        <label class=\"ti3-tree-checkbox-wrapper\" *ngIf=\"multiple\">\r\n            <input type=\"checkbox\" [(ngModel)]=\"node.checked\" [disabled]=\"node.disabled\" *ngIf=\"showCheckboxFn(node)\" [id]=\"appendId('checkbox_' + i)\"\r\n                [indeterminate]=\"node.checked === 'indeterminate'\" (change)=\"onInputChange(node, $event)\" tabindex=\"-1\" tiCheckbox />\r\n        </label>\r\n        <div (click)=\"onItemWrapperClick(node)\" [id]=\"appendId(i + '_content')\" class=\"ti3-tree-node-text-wrapper\" #nodeList\r\n             (keydown)=\"onKeydown($event, node)\"\r\n             (blur)=\"onBlur(node)\"\r\n             (focus)=\"onFocus(node)\"\r\n             [tabindex]=\"node.disabled ? -1 : 0\"\r\n             [draggable]=\"node.disabled ? false : nodeDraggable\"\r\n             (dragstart)=\"onDragstart($event, node)\"\r\n             (dragenter)=\"onDragenter($event, node)\"\r\n             (dragover)=\"onDragover($event, node)\"\r\n             (dragleave)=\"onDragleave($event, node)\"\r\n             (drop)=\"onDrop($event, node)\"\r\n             (dragend)=\"onDragend($event, node)\"\r\n             (mouseenter)=\"onMousenode(node, 'enter')\"\r\n             (mouseleave)=\"onMousenode(node, 'leave')\"\r\n             [ngClass]=\"{'ti3-tree-item-active' : actived === node,\r\n                    'ti3-tree-text-disabled-wrapper': node.disabled,\r\n                    'ti3-tree-text-nomultiple-wrapper': !multiple && !isLeaf(node),\r\n                    'ti3-tree-text-multiple-leaf-wrapper': multiple && isLeaf(node),\r\n                    'ti3-tree-text-leaf-wrapper': !multiple && isLeaf(node),\r\n                    'ti3-tree-text-focus': node.focused,\r\n                    'ti3-tree-content-drag-box': nodeDraggable}\">\r\n            <ng-container *ngIf=\"itemTemplate else labelTemplate\">\r\n                <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: node, index: i}\">\r\n                </ng-container>\r\n            </ng-container>\r\n            <ng-template #labelTemplate>\r\n                <ng-container *ngIf=\"(node.loadStatus !== 'error') else errorTemplate\">\r\n                    <i class=\"{{getItemIcon(node)}}\" *ngIf='node.expandIcon || node.collapseIcon'></i>\r\n                    <span [title]=\"node.label\" *ngIf=\"!node.editing\" class='ti3-tree-node-text' [innerHTML]=\"node.label | tiHighlight: highlightWords\"></span>\r\n                    <input  tiText\r\n                            tiValidation\r\n                            tiRequired\r\n                            tiAutoSelect\r\n                            autofocus\r\n                            *ngIf=\"node.editing\"\r\n                            autoComplete=\"off\"\r\n                            class=\"ti3-tree-edit-input\"\r\n                            [id]=\"appendId(i + '_input')\"\r\n                            (blur)=\"onBlurEdit(node)\"\r\n                            [(ngModel)] = \"node.label\"\r\n                            (keyup.enter)=\"onBlurEdit(node)\">\r\n                    <ng-container *ngIf=\"node.isHover && !node.disabled\">\r\n                        <ti-icon name=\"add1\"\r\n                                *ngIf=\"node.addable\"\r\n                                [id]=\"appendId(i + '_add')\"\r\n                                (click)=\"addNode($event, node)\"\r\n                                class=\"ti3-tree-operate\"></ti-icon>\r\n                        <ti-icon\r\n                                name=\"edit\"\r\n                                *ngIf=\"node.editable\"\r\n                                [id]=\"appendId(i + '_edit')\"\r\n                                (click)=\"editNode($event, node)\"\r\n                                class=\"ti3-tree-operate\"></ti-icon>\r\n                        <ti-icon name=\"delete-1\"\r\n                                *ngIf=\"node.deleteable\"\r\n                                [id]=\"appendId(i + '_delete')\"\r\n                                (click)=\"deleteNode($event,node)\"\r\n                                class=\"ti3-tree-operate\"></ti-icon>\r\n                    </ng-container>\r\n                </ng-container>\r\n                <ng-template #errorTemplate>\r\n                    <i class='ti3-tree-error-icon ti3-icon ti3-icon-alert-warn'></i>\r\n                    <span>{{treeLan.loadError}}<span [id]=\"appendId(i + '_error')\" (click)=\"onClickPnodeIcon(node, $event)\" class=\"ti3-tree-item-reload\">{{treeLan.reload}}</span></span>\r\n                </ng-template>\r\n            </ng-template>\r\n        </div>\r\n    </div>\r\n    <ul *ngIf=\"!isLeaf(node) && node.expanded\" class='ti3-tree-parent-node' [id]=\"appendId('child_list_' + i)\">\r\n        <li class='ti3-tree-leaf-node'\r\n            *ngFor=\"let children of node.children; index as j; trackBy: trackByFn\">\r\n            <ng-container *ngTemplateOutlet=\"treeItem; context: {$implicit: children, index: i + '_' + j}\"></ng-container>\r\n        </li>\r\n    </ul>\r\n</ng-template>",
                styles: ["::ng-deep :root{--ti-tree-error-icon-size:16px;--ti-tree-item-guide-line-first-child-space:var(--ti-common-space-2x);--ti-tree-item-guide-line-width:8px;--ti-tree-node-icon-font-size:16px;--ti-tree-node-icon-space:calc(var(--ti-tree-square-icon-font-size) + var(--ti-tree-node-icon-font-size) + var(--ti-common-space-base)*2 + var(--ti-tree-icon-right-space)*2);--ti-tree-node-text-multiple-leaf-space:calc(var(--ti-tree-node-icon-font-size) + var(--ti-common-space-base) + var(--ti-tree-icon-right-space)*2);--ti-tree-node-text-nomultiple-space:calc(var(--ti-tree-square-icon-font-size) + var(--ti-tree-icon-right-space)*2);--ti-tree-node-text-padding-space:calc(var(--ti-common-space-2x) + var(--ti-common-space-base));--ti-tree-small-checkbox-size:12px;--ti-tree-small-icon-font-size:12px;--ti-tree-small-icon-space:calc(var(--ti-common-space-base)/2)}.ti3-tree-node-text{display:inline-block;max-width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ti3-tree-parent-node{font-size:var(--ti-common-font-size-base);position:relative}.ti3-tree-node-icon{font-size:var(--ti-tree-node-icon-font-size);margin-right:var(--ti-tree-icon-right-space);text-align:center}.ti3-tree-leaf-node{margin-left:var(--ti-common-space-6x);position:relative}.ti3-tree-node-text-wrapper{align-items:center;display:flex;padding:0 var(--ti-common-space-2x) 0 var(--ti-common-space-base);white-space:nowrap;width:calc(100% - var(--ti-tree-node-icon-space))}.ti3-tree-node-text-wrapper:hover{background:var(--ti-tree-content-box-color-hover)}.ti3-tree-node-text-wrapper:hover.ti3-tree-text-disabled-wrapper{background:none}.ti3-tree-node-text-wrapper:focus{outline:none}.ti3-tree-node-text-wrapper.ti3-tree-text-focus{background:var(--ti-tree-content-box-color-hover);outline:none}.ti3-tree-node-text-wrapper .ti3-tree-operate{color:var(--ti-common-color-icon-normal);font-size:var(--ti-common-font-size-2);margin-left:var(--ti-common-space-2x)}.ti3-tree-node-text-wrapper .ti3-tree-operate:active,.ti3-tree-node-text-wrapper .ti3-tree-operate:hover{color:var(--ti-common-color-icon-hover);cursor:pointer}.ti3-tree-node-text-wrapper .ti3-tree-operate:first-of-type{margin-left:var(--ti-common-space-3x)}.ti3-tree-node-text-wrapper .ti3-tree-edit-input{height:var(--ti-tree-item-height)}.ti3-tree-text-nomultiple-wrapper{width:calc(100% - var(--ti-tree-node-text-nomultiple-space))}.ti3-tree-text-multiple-leaf-wrapper{width:calc(100% - var(--ti-tree-node-text-multiple-leaf-space))}.ti3-tree-text-leaf-wrapper{width:calc(100% - var(--ti-tree-node-text-padding-space))}.ti3-tree-content-box{align-items:center;cursor:pointer;display:flex;height:var(--ti-tree-item-height);line-height:var(--ti-tree-item-lineheight);padding-left:var(--ti-tree-content-box-left-space)}.ti3-tree-content-box-disabled{color:var(--ti-common-color-text-disabled);cursor:not-allowed}.ti3-tree-item-active,.ti3-tree-item-active:focus,.ti3-tree-item-active:hover{background:var(--ti-tree-node-bg-color-checked)}.ti3-tree-item-leaf{margin-left:calc(var(--ti-tree-square-icon-font-size) + var(--ti-common-space-base))}.ti3-tree-checkbox-wrapper{display:inline-block;font-size:0}:host .ti3-tree-content-box .ti3-tree-checkbox-wrapper ::ng-deep input[type=checkbox][tiCheckbox]+.ti3-checkbox .ti3-checkbox-skin{margin:0 var(--ti-common-space-base) 0 var(--ti-common-space-base)}.ti3-tree-item-loading{margin-right:var(--ti-common-space-2x)}.ti3-tree-item-reload{color:var(--ti-common-color-text-link);text-decoration:none}.ti3-tree-item-reload:hover{color:var(--ti-common-color-text-link-hover);text-decoration:underline}.ti3-tree-error-icon{background-color:var(--ti-valid-error-color);border-radius:50%;color:var(--ti-common-color-text-white);display:inline-block;height:var(--ti-tree-error-icon-size);line-height:var(--ti-tree-error-icon-size);margin-right:var(--ti-common-space-2x);text-align:center;width:var(--ti-tree-error-icon-size)}.ti3-tree-container .ti3-icon-minus-square{color:var(--ti-tree-minus-square-color)}.ti3-tree-container .ti3-icon-plus-square{color:var(--ti-tree-plus-square-color)}.ti3-tree-container .ti3-icon-square-disabled{background:var(--ti-common-color-bg-disabled);color:var(--ti-common-color-icon-graybg-disabled)}.ti3-tree-container .ti3-icon-minus-square,.ti3-tree-container .ti3-icon-plus-square{display:inline-block;font-size:var(--ti-tree-square-icon-font-size);line-height:var(--ti-tree-square-icon-font-size);margin-right:var(--ti-common-space-base);width:var(--ti-tree-square-icon-font-size)}.ti3-tree-container .ti3-icon-minus-square:hover,.ti3-tree-container .ti3-icon-plus-square:hover{color:var(--ti-tree-icon-color-active);cursor:pointer}.ti3-tree-container .ti3-icon-minus-square:hover.ti3-icon-square-disabled,.ti3-tree-container .ti3-icon-plus-square:hover.ti3-icon-square-disabled{color:var(--ti-common-color-icon-graybg-disabled);cursor:not-allowed}.ti3-tree-container .ti3-icon-minus-square:active,.ti3-tree-container .ti3-icon-plus-square:active{background:var(--ti-tree-icon-bg-color-active);color:var(--ti-tree-icon-color-active)}.ti3-tree-container .ti3-icon-minus-square:active.ti3-icon-square-disabled,.ti3-tree-container .ti3-icon-plus-square:active.ti3-icon-square-disabled{background:var(--ti-common-color-bg-disabled);color:var(--ti-common-color-icon-graybg-disabled)}.ti3-tree-content-drag-box{border-bottom:2px solid transparent;border-top:2px solid transparent;box-sizing:border-box;height:var(--ti-tree-item-height)}.ti3-tree-drag-over-inner{border:2px solid var(--ti-common-color-line-active);padding:0 6px 0 2px}.ti3-tree-drag-over-top{border-top:2px solid var(--ti-common-color-line-active)}.ti3-tree-drag-over-bottom{border-bottom:2px solid var(--ti-common-color-line-active)}.ti3-tree-leaf-node>.ti3-tree-content-box>.ti3-tree-item-guide-line{-ms-box-sizing:border-box;border-bottom:1px solid var(--ti-tree-item-guide-line-color);border-left:1px solid var(--ti-tree-item-guide-line-color);box-sizing:border-box;height:var(--ti-tree-item-height);left:calc(-1*var(--ti-tree-square-icon-font-size)/2);position:absolute;top:calc(-1*var(--ti-tree-item-height)/2);width:var(--ti-tree-item-guide-line-width)}.ti3-tree-leaf-node:first-child>.ti3-tree-content-box>.ti3-tree-item-guide-line{height:calc(var(--ti-tree-item-height) - var(--ti-tree-square-icon-font-size)/2 - var(--ti-tree-item-guide-line-first-child-space));top:calc(var(--ti-tree-square-icon-font-size)/2 + var(--ti-tree-item-guide-line-first-child-space) - var(--ti-tree-item-height)/2)}.ti3-tree-leaf-node:not(:last-child)>.ti3-tree-parent-node:after{-ms-box-sizing:border-box;border-left:1px solid var(--ti-tree-item-guide-line-color);box-sizing:border-box;content:\"\";height:100%;left:calc(-1*var(--ti-tree-square-icon-font-size)/2);position:absolute;top:calc(-1*var(--ti-tree-item-height)/2);width:var(--ti-tree-item-guide-line-width)}:host[small] .ti3-icon-minus-square,:host[small] .ti3-icon-plus-square{font-size:var(--ti-tree-small-icon-font-size);line-height:var(--ti-tree-small-icon-font-size);margin-right:var(--ti-tree-small-icon-space);width:var(--ti-tree-small-icon-font-size)}:host[small] .ti3-tree-node-icon{font-size:var(--ti-tree-small-icon-font-size);margin-right:var(--ti-common-space-base)}:host[small] .ti3-tree-content-box .ti3-tree-checkbox-wrapper ::ng-deep input[type=checkbox][tiCheckbox]+.ti3-checkbox .ti3-checkbox-skin{height:var(--ti-tree-small-checkbox-size);line-height:var(--ti-tree-small-checkbox-size);margin:0 var(--ti-tree-small-icon-space) 0 var(--ti-tree-small-icon-space);width:var(--ti-tree-small-checkbox-size)}:host[small] .ti3-tree-content-box .ti3-tree-checkbox-wrapper ::ng-deep input[type=checkbox][tiCheckbox]:indeterminate+.ti3-checkbox .ti3-checkbox-skin:before{left:2px;top:2px}:host[small] .ti3-tree-content-box .ti3-tree-checkbox-wrapper ::ng-deep input[type=checkbox][tiCheckbox]:checked+.ti3-checkbox .ti3-checkbox-skin:before{height:7px;width:5px}:host[small] .ti3-tree-item-leaf{margin-left:calc(var(--ti-tree-small-icon-font-size) + var(--ti-tree-small-icon-space))}:host[small] .ti3-tree-content-box{padding-left:var(--ti-common-space-base)}:host[small] .ti3-tree-leaf-node{margin-left:calc(var(--ti-common-space-base) + var(--ti-tree-small-icon-font-size))}:host[small] .ti3-tree-leaf-node .ti3-tree-content-box{padding-left:var(--ti-common-space-base)}:host[small] .ti3-tree-leaf-node>.ti3-tree-content-box>.ti3-tree-item-guide-line{left:calc(-1*var(--ti-tree-small-icon-font-size)/2);width:calc(var(--ti-tree-small-icon-font-size)/2)}:host[small] .ti3-tree-leaf-node:not(:last-child)>.ti3-tree-parent-node:after{left:calc(-1*var(--ti-tree-small-icon-font-size)/2)}:host[small] .ti3-tree-node-text-wrapper{padding-left:var(--ti-tree-small-icon-space)}::ng-deep .ti3-font-highlight{color:var(--ti-common-color-text-highlight)}"]
            },] }
];
TiTreeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: IterableDiffers },
    { type: TiRenderer },
    { type: ChangeDetectorRef }
];
TiTreeComponent.propDecorators = {
    data: [{ type: Input }],
    parentCheckable: [{ type: Input }],
    multiple: [{ type: Input }],
    changedByCheckbox: [{ type: Input }],
    highlightWords: [{ type: Input }],
    nodeDraggable: [{ type: Input }],
    beforeExpand: [{ type: Output }],
    select: [{ type: Output }],
    change: [{ type: Output }],
    nodeDrop: [{ type: Output }],
    nodeAdded: [{ type: Output }],
    nodeEdited: [{ type: Output }],
    nodeDeleted: [{ type: Output }],
    itemTemplate: [{ type: ContentChild, args: [TemplateRef, /* TODO: add static flag */ { static: true },] }],
    elems: [{ type: ViewChildren, args: ['nodeList',] }]
};
//# sourceMappingURL=data:application/json;base64,