import { Directive, ElementRef, Renderer2 } from '@angular/core';
import { TiTableComponent } from './TiTableComponent';
/**
 * TiColspan 表格跨列数colspan 计算，
 *
 * 根据表头第一行tr中th的数目，同步colspan数。
 *
 * 主要配合表格详情展开功能使用，用于表格详情展示行的的列合并。
 *
 */
export class TiColspanDirective {
    constructor(table, renderer, elementRef) {
        this.table = table;
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    ngAfterViewInit() {
        // 获取thead中第一行tr
        const tableFirstTr = this.table.nativeElement.querySelector('table>thead>tr');
        if (!tableFirstTr) {
            return;
        }
        // 初始化设置一次colspan
        this.renderer.setAttribute(this.elementRef.nativeElement, 'colspan', String(tableFirstTr.children.length));
        // 修复SSR报错：ERROR ReferenceError: MutationObserver is not defined
        if (typeof MutationObserver === 'undefined') {
            return;
        }
        this.firstTrObserver = new MutationObserver((mutationsList) => {
            for (let mutation of mutationsList) {
                if (mutation.type === 'childList') {
                    this.renderer.setAttribute(this.elementRef.nativeElement, 'colspan', String(tableFirstTr.children.length));
                }
            }
        });
        // 只需要处理tr中th的增删，所以只配置 childList为true,
        this.firstTrObserver.observe(tableFirstTr, { childList: true, });
    }
    ngOnDestroy() {
        if (this.firstTrObserver) {
            this.firstTrObserver.disconnect();
        }
    }
}
TiColspanDirective.decorators = [
    { type: Directive, args: [{
                selector: 'td[tiColspan]'
            },] }
];
TiColspanDirective.ctorParameters = () => [
    { type: TiTableComponent },
    { type: Renderer2 },
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGlDb2xzcGFuRGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vQGNsb3VkL3RpbnkzL2NvbXBvbmVudHMvdGFibGUvVGlDb2xzcGFuRGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFSCxTQUFTLEVBQ1QsVUFBVSxFQUVWLFNBQVMsRUFDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RDs7Ozs7OztHQU9HO0FBSUgsTUFBTSxPQUFPLGtCQUFrQjtJQUczQixZQUFvQixLQUF1QixFQUFVLFFBQW1CLEVBQVUsVUFBc0I7UUFBcEYsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUN4RyxDQUFDO0lBQ0QsZUFBZTtRQUNYLGdCQUFnQjtRQUNoQixNQUFNLFlBQVksR0FBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQTZCLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDL0YsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNmLE9BQU87U0FDVjtRQUNELGlCQUFpQjtRQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUMzRyxnRUFBZ0U7UUFDaEUsSUFBRyxPQUFPLGdCQUFnQixLQUFLLFdBQVcsRUFBQztZQUN2QyxPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksZ0JBQWdCLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRTtZQUMxRCxLQUFLLElBQUksUUFBUSxJQUFJLGFBQWEsRUFBRTtnQkFDaEMsSUFBSSxRQUFRLENBQUMsSUFBSSxLQUFLLFdBQVcsRUFBRTtvQkFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7aUJBQzlHO2FBQ0o7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUNILHNDQUFzQztRQUN0QyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBQ0QsV0FBVztRQUNQLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN0QixJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ3JDO0lBQ0wsQ0FBQzs7O1lBbENKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZUFBZTthQUM1Qjs7O1lBWFEsZ0JBQWdCO1lBRnJCLFNBQVM7WUFGVCxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIEFmdGVyVmlld0luaXQsXHJcbiAgICBEaXJlY3RpdmUsXHJcbiAgICBFbGVtZW50UmVmLFxyXG4gICAgT25EZXN0cm95LFxyXG4gICAgUmVuZGVyZXIyXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRpVGFibGVDb21wb25lbnQgfSBmcm9tICcuL1RpVGFibGVDb21wb25lbnQnO1xyXG4vKipcclxuICogVGlDb2xzcGFuIOihqOagvOi3qOWIl+aVsGNvbHNwYW4g6K6h566X77yMXHJcbiAqXHJcbiAqIOagueaNruihqOWktOesrOS4gOihjHRy5LitdGjnmoTmlbDnm67vvIzlkIzmraVjb2xzcGFu5pWw44CCXHJcbiAqXHJcbiAqIOS4u+imgemFjeWQiOihqOagvOivpuaDheWxleW8gOWKn+iDveS9v+eUqO+8jOeUqOS6juihqOagvOivpuaDheWxleekuuihjOeahOeahOWIl+WQiOW5tuOAglxyXG4gKlxyXG4gKi9cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ3RkW3RpQ29sc3Bhbl0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUaUNvbHNwYW5EaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgLy9cclxuICAgIHByaXZhdGUgZmlyc3RUck9ic2VydmVyOiBNdXRhdGlvbk9ic2VydmVyO1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB0YWJsZTogVGlUYWJsZUNvbXBvbmVudCwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcclxuICAgIH1cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgICAgICAvLyDojrflj5Z0aGVhZOS4reesrOS4gOihjHRyXHJcbiAgICAgICAgY29uc3QgdGFibGVGaXJzdFRyID0gKHRoaXMudGFibGUubmF0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCkucXVlcnlTZWxlY3RvcigndGFibGU+dGhlYWQ+dHInKTtcclxuICAgICAgICBpZiAoIXRhYmxlRmlyc3RUcikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOWIneWni+WMluiuvue9ruS4gOasoWNvbHNwYW5cclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2NvbHNwYW4nLCBTdHJpbmcodGFibGVGaXJzdFRyLmNoaWxkcmVuLmxlbmd0aCkpO1xyXG4gICAgICAgIC8vIOS/ruWkjVNTUuaKpemUme+8mkVSUk9SIFJlZmVyZW5jZUVycm9yOiBNdXRhdGlvbk9ic2VydmVyIGlzIG5vdCBkZWZpbmVkXHJcbiAgICAgICAgaWYodHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgPT09ICd1bmRlZmluZWQnKXtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZpcnN0VHJPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnNMaXN0KSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IG11dGF0aW9uIG9mIG11dGF0aW9uc0xpc3QpIHtcclxuICAgICAgICAgICAgICAgIGlmIChtdXRhdGlvbi50eXBlID09PSAnY2hpbGRMaXN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnY29sc3BhbicsIFN0cmluZyh0YWJsZUZpcnN0VHIuY2hpbGRyZW4ubGVuZ3RoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyDlj6rpnIDopoHlpITnkIZ0cuS4rXRo55qE5aKe5Yig77yM5omA5Lul5Y+q6YWN572uIGNoaWxkTGlzdOS4unRydWUsXHJcbiAgICAgICAgdGhpcy5maXJzdFRyT2JzZXJ2ZXIub2JzZXJ2ZSh0YWJsZUZpcnN0VHIsIHsgY2hpbGRMaXN0OiB0cnVlLCB9KTtcclxuICAgIH1cclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmZpcnN0VHJPYnNlcnZlcikge1xyXG4gICAgICAgICAgICB0aGlzLmZpcnN0VHJPYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==