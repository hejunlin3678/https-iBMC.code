import { Component, ElementRef, Input, Renderer2, ViewChild } from '@angular/core';
import { TiUploadService } from '../../services/upload/TiUploadService';
import { Util } from '../../utils/Util';
import { TiOverflowService } from '../../services/overflow/TiOverflowService';
import { TiUploadbaseComponent } from './TiUploadbaseComponent';
/**
 * 该组件用于实现已设计好的交互完整的文件上传组件，包含两种样式：
 *
 * 1.带输入框的样式(type为inputField)
 *
 * 2.按钮样式(type为button)
 *
 * 如果以上两种样式不满足业务场景，可使用自定义方式实现，具体实现请参考[tiFileSelect]{@link ../directives/TiFileSelectDirective.html}
 *
 * <example-url>../tiny3demo/#/upload/upload-all</example-url>
 */
export class TiUploadComponent extends TiUploadbaseComponent {
    constructor(uploaderService, hostEle, renderer, tiOverflow) {
        super(hostEle, renderer);
        this.uploaderService = uploaderService;
        this.tiOverflow = tiOverflow;
        /**
         * 上传样式类型
         */
        this.type = 'inputField';
        /**
         * 是否自动聚焦，只适用于inputField类型
         */
        this.autofocus = false;
    }
    /**
     * @ignore 点击上传按钮触发事件
     */
    onSelectClick() {
        this.fileInput.nativeElement.click();
    }
    /**
     * @ignore
     */
    // tslint:disable-next-line: use-life-cycle-interface
    ngOnInit() {
        super.ngOnInit();
        // 创建uploader实例
        const autoUpload = Util.isUndefined(this.autoUpload) ? true : this.autoUpload;
        this.uploadConfig.autoUpload = autoUpload;
        this.uploadInst = this.uploaderService.create(this.uploadConfig);
        this.placeholder = this.setPlaceholder();
        // 设置submit按钮的显示状态
        this.showSubmitButton = Util.isUndefined(this.showSubmitButton) ?
            !autoUpload : this.showSubmitButton;
        // 是否定义beforeRemoveItems事件
        this.isRemove = this.beforeRemoveItems.observers.length !== 0;
    }
    // tslint:disable-next-line:use-life-cycle-interface
    ngAfterViewInit() {
        super.ngAfterViewInit();
        // 处理autofocus
        if (this.autofocus === true) {
            this.focus();
        }
    }
    // 提供focus/blur方法，供外部调用
    /**
     * 聚焦方法，只适用于inputField类型
     */
    focus() {
        this.fileInput.nativeElement.nextElementSibling.focus();
    }
    /**
     * 失焦方法，只适用于inputField类型
     */
    blur() {
        this.fileInput.nativeElement.nextElementSibling.blur();
    }
    // 通过item元素的移入移出事件控制元素的hover状态，该hover状态会决定item中部分按钮的显示状态
    /**
     * @ignore
     */
    onItemMouseenter(item, event) {
        if (this.disabled) {
            return;
        }
        item.isHover = true;
        // 文件名超长溢出时，显示名称
        const fileNameEle = event.target.querySelector('.ti3-aui-file-name');
        item.isOverflow = this.tiOverflow.isOverflow(fileNameEle);
    }
    /**
     * @ignore
     */
    onItemMouseleave(item) {
        if (this.disabled) {
            return;
        }
        item.isHover = false;
    }
    // 获取上传文件状态，同时根据状态设置状态详细信息
    /**
     * @ignore
     */
    getUploadState() {
        let uploadingLen = 0;
        let uploadErrLen = 0;
        let uploadSuccLen = 0;
        this.uploadInst.queue.forEach((item) => {
            if (item.isUploading) {
                uploadingLen++;
            }
            else if (item.isError) {
                uploadErrLen++;
            }
            else if (item.isSuccess) {
                uploadSuccLen++;
            }
        });
        const fileQueueLen = this.uploadInst.queue.length;
        if (uploadSuccLen === fileQueueLen) {
            this.stateInfo = this.uploadLan.successInfo;
            return 'success';
        }
        if (uploadErrLen !== 0) {
            this.stateInfo = Util.formatEntry(this.uploadLan.errorMultiInfo, [uploadErrLen]);
            return 'error';
        }
        if (uploadingLen !== 0) {
            this.stateInfo = Util.formatEntry(this.uploadLan.uploadingMutiInfo, [`${uploadingLen}/${fileQueueLen}`]);
            return 'uploading';
        }
        this.stateInfo = Util.formatEntry(this.uploadLan.addSuccessMutiInfo, [fileQueueLen]);
        return 'addSuccess';
    }
    /**
     * 初始设置输入框内提示文本
     * 四种场景：自动单文件上传，自动多文件上传，手动单文件上传，手动多文件上传
     */
    setPlaceholder() {
        if (this.placeholder) {
            return this.placeholder;
        }
        if (this.autoUpload) {
            if (this.uploadInst.isSingleFile) {
                return this.uploadLan.autoUploadFilePlaceholder;
            }
            return this.uploadLan.autoUploadFilesPlaceholder;
        }
        if (this.uploadInst.isSingleFile) {
            return this.uploadLan.notAutoUploadFilePlaceholder;
        }
        return this.uploadLan.notAutoUploadFilesPlaceholder;
    }
}
TiUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-upload:not([type]), ti-upload[type="inputField"], ti-upload[type="button"]',
                template: "<div class=\"ti3-file-upload-container\" *ngIf=\"type === 'button'\">\r\n    <!-- IE\u4E0B\u4F7F\u7528button\u505A\u5BB9\u5668\uFF0C\u65E0\u6CD5\u505A\u70B9\u9009\u64CD\u4F5C\uFF0C\u56E0\u6B64\u4F7F\u7528div\u4EE3\u66FF -->\r\n    <div class=\"ti3-file-btn\" tiButton [tiDisabled]='disabled'>\r\n        <input class=\"ti3-file-input\" type=\"file\" [tiFileSelect]=\"uploadInst\" [title]=\"title\" [accept]=\"accept\"\r\n            [disabled]=\"disabled\" [multiple]=\"!uploadInst.isSingleFile\">\r\n        <span class=\"ti3-file-text\">{{buttonText || uploadLan.addFile}}</span>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"ti3-aui-file-container\" *ngIf=\"type !== 'button'\" [ngClass]=\"{'ti3-aui-file-disable': disabled}\">\r\n    <div class=\"clearfix\">\r\n        <div class=\"ti3-aui-file-field-container\" [style.width]=\"inputFieldWidth\">\r\n            <ul class=\"ti3-aui-file-items-container\" [id]=\"appendId('list')\">\r\n                <!-- \u6587\u4EF6\u540D\u79F0\u8D85\u957F\u6EA2\u51FA\u6216\u8005\u8BE5\u6587\u4EF6\u4E0A\u4F20\u5931\u8D25\u65F6\uFF0C\u663E\u793Atip -->\r\n                <li class=\"ti3-aui-file-item\" *ngFor=\"let item of uploadInst.queue; index as i;\" [tiTip]=\"item.isOverflow || item.isError ? tipContent : ''\" [tiTipContext]='{\"item\": item}'\r\n                [tiTipPosition]=\"'top-left'\" (mouseenter)='onItemMouseenter(item, $event)' (mouseleave)='onItemMouseleave(item)' [id]=\"appendId('queue_' + i)\"\r\n                [ngClass]=\"{'ti3-aui-single-file-item': uploadInst.isSingleFile}\">\r\n                    <div class=\"ti3-aui-file-name-size-container\">\r\n                        <div class=\"ti3-aui-file-name\" [ngClass]=\"{'ti3-aui-file-state-general-info-error': item.isError}\">{{item.file.name}}</div>\r\n                        <div class=\"ti3-aui-file-size\">\r\n                            <span class=\"ti3-aui-file-size-brackets\">(</span>\r\n                            <span class=\"ti3-aui-file-item-size\">{{item.file.sizeWithUnit}}</span>\r\n                            <span class=\"ti3-aui-file-size-brackets\">)</span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"ti3-aui-file-operates\">\r\n                            <div *ngIf=\"!item.isUploading && !item.isUploaded\">\r\n                                <span class=\"ti3-aui-file-x ti3-icon ti3-icon-cancel\" (click)=\"item.remove(isRemove)\" [id]=\"appendId('remove_'+ i)\"></span>\r\n                            </div>\r\n                            <div *ngIf=\"item.isUploading\">\r\n                                <ti-progresspie [value]=\"item.progress\" [hidden]=\"item.isHover\" class=\"ti3-aui-file-progress-pie\">\r\n                                </ti-progresspie>\r\n                                <span class=\"ti3-aui-file-x ti3-icon ti3-icon-cancel\" (click)=\"item.cancel()\" *ngIf=\"item.isHover\" [id]=\"appendId('cancel_' + i)\"></span>\r\n                            </div>\r\n                            <div *ngIf=\"item.isSuccess\">\r\n                                <span class=\"ti3-aui-file-success ti3-icon ti3-icon-alert-success\" [hidden]=\"item.isHover\"></span>\r\n                                <span class=\"ti3-aui-file-x ti3-icon ti3-icon-cancel\" (click)=\"item.remove(isRemove)\" *ngIf=\"item.isHover\" [id]=\"appendId('success_remove_' + i)\"></span>\r\n                            </div>\r\n                           <div *ngIf=\"item.isError\" class=\"ti3-aui-file-error-state\">\r\n                                <span class=\"ti3-aui-file-error-reupload ti3-icon ti3-icon-refresh-1\" (click)=\"item.upload()\" *ngIf=\"!item.batchSend\" [id]=\"appendId('refresh_' + i)\"></span>\r\n                                <span class=\"ti3-aui-file-x ti3-icon ti3-icon-cancel\" (click)=\"item.remove(isRemove)\" [id]=\"appendId('error_remove_' + i)\"></span>\r\n                           </div>\r\n                        </div>\r\n                </li>\r\n                <li *ngIf=\"!uploadInst.queue.length\" class=\"ti3-aui-file-placeholder\" [id]=\"appendId('placeholder')\">{{placeholder}}</li>\r\n            </ul>\r\n\r\n        </div>\r\n\r\n        <!-- \u81EA\u52A8\u4E0A\u4F20\u6587\u4EF6/\u624B\u52A8\u6DFB\u52A0\u6587\u4EF6\u6309\u94AE -->\r\n        <div class=\"ti3-file-upload-btnCon\">\r\n                <input #fileInput type=\"file\" [tiFileSelect]=\"uploadInst\" class=\"ti3-aui-file-select-input\"\r\n                       [multiple]=\"!uploadInst.isSingleFile\"\r\n                       [title]=\"title\"\r\n                       [accept]=\"accept\"\r\n                       [id]=\"appendId('file')\">\r\n                <button tiButton type=\"button\" class=\"ti3-aui-upload-btn\"\r\n                        [disabled]=\"disabled\"\r\n                        (click)=\"onSelectClick()\"\r\n                        [id]=\"appendId('select')\">{{buttonText || autoUpload ? uploadLan.upload : uploadLan.addFile}}</button>\r\n        </div>\r\n\r\n         <!-- \u624B\u52A8\u4E0A\u4F20\u6587\u4EF6\u6309\u94AE -->\r\n        <span class=\"ti3-file-upload-btnCon\" *ngIf=\"showSubmitButton\">\r\n            <span class=\"ti3-file-upload-btn-cover\" *ngIf=\"disabled || !uploadInst.queue.length || uploadInst.isUploadedAll()\"></span>\r\n            <button tiButton type=\"button\"\r\n                    (click)=\"uploadInst.uploadAll()\"\r\n                    class=\"ti3-aui-upload-btn\"\r\n                    *ngIf=\"showSubmitButton\"\r\n                    [disabled]=\"disabled || !uploadInst.queue.length || uploadInst.isUploadedAll()\"\r\n                    [id]=\"appendId('uploadAll')\">{{buttonText || uploadLan.upload}}</button>\r\n        </span>\r\n    </div>\r\n    <div class=\"ti3-aui-file-state-general\" *ngIf=\"uploadInst.queue.length && !uploadInst.isSingleFile\" [style.width]=\"inputFieldWidth\">\r\n        <div *ngIf=\"getUploadState() === 'addSuccess'\" class=\"ti3-aui-file-state-general-info\">\r\n            <span class=\"ti3-aui-file-state-general-info-addSuccess\" >{{stateInfo}}</span>\r\n        </div>\r\n        <div *ngIf=\"getUploadState() === 'uploading'\" class=\"ti3-aui-file-state-general-info\">\r\n            <span class=\"ti3-aui-file-state-general-info-uploading\">{{stateInfo}}</span>\r\n            <div class=\"ti3-aui-file-state-general-operate\" (click)=\"uploadInst.cancelAll()\"[id]=\"appendId('cancel')\">{{uploadLan.cancel}}</div>\r\n        </div>\r\n        <div *ngIf=\"getUploadState() === 'success'\" class=\"ti3-aui-file-state-general-info\">\r\n            <span class=\"ti3-aui-file-state-general-icon ti3-aui-file-state-general-success ti3-icon ti3-icon-check-circle\"></span>\r\n            <span class=\"ti3-aui-file-state-general-info-success\">{{stateInfo}}</span>\r\n        </div>\r\n        <div *ngIf=\"getUploadState() === 'error'\" class=\"ti3-aui-file-state-general-info\">\r\n            <span class=\"ti3-aui-file-state-general-icon ti3-aui-file-state-general-error ti3-icon ti3-icon-exclamation-circle\"></span>\r\n            <span class=\"ti3-aui-file-state-general-info-error\">{{stateInfo}}</span><!--\r\n            --><div class=\"ti3-aui-file-state-general-operate\" (click)=\"uploadInst.reloadAllError()\" [id]=\"appendId('reload')\">{{uploadLan.reload}}</div>\r\n        </div>\r\n    </div>\r\n    <div class=\"ti3-aui-file-state-general\" *ngIf = \"uploadInst.queue.length && uploadInst.isSingleFile\"  [style.width]=\"inputFieldWidth\">\r\n        <div *ngIf=\"uploadInst.queue[0].isUploading\" class=\"ti3-aui-file-state-general-info\">\r\n            <span class=\"ti3-aui-file-state-general-info-uploading\">{{uploadLan.uploadingSingleInfo}}</span>\r\n        </div>\r\n        <div *ngIf=\"uploadInst.queue[0].isSuccess\" class=\"ti3-aui-file-state-general-info\">\r\n            <span class=\"ti3-aui-file-state-general-icon ti3-aui-file-state-general-success ti3-icon ti3-icon-check-circle\"></span>\r\n            <span class=\"ti3-aui-file-state-general-info-success\">{{uploadLan.successInfo}}</span>\r\n        </div>\r\n        <div *ngIf=\"uploadInst.queue[0].isError\" class=\"ti3-aui-file-state-general-info\">\r\n            <span class=\"ti3-aui-file-state-general-icon ti3-aui-file-state-general-error ti3-icon ti3-icon-exclamation-circle\"></span>\r\n            <span class=\"ti3-aui-file-state-general-info-error\">{{uploadLan.errorSingleInfo}}</span>\r\n            <div class=\"ti3-aui-file-state-general-operate\" (click)=\"uploadInst.reloadAllError()\" [id]=\"appendId('reload')\">{{uploadLan.reload}}</div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- \u5355\u4E2Aitem tip\u5185\u5BB9\u663E\u793A\u6A21\u677F-->\r\n<ng-template #tipContent let-item=\"context.item\">\r\n    <ti-error-msg *ngIf='item.isError' [errorMessage]=\"item.errorInfo || uploadLan.error\"></ti-error-msg>\r\n    <span class=\"ti3-aui-file-tip-name\" *ngIf=\"item.isOverflow\">{{item.file.name}}</span>\r\n</ng-template>\r\n",
                styles: ["::ng-deep :root{--ti-upload-icon-size:16px;--ti-upload-item-container-padding-vertical:calc(var(--ti-upload-item-space)/2);--ti-upload-item-height:(var(--ti-upload-height) - 2*(var(--ti-upload-item-space)) - 2px);--ti-upload-item-operate-container-width:(var(--ti-upload-icon-size) * 2 + var(--ti-common-space-2x) * 2);--ti-upload-item-size-margin-left:var(--ti-common-space-base);--ti-upload-item-size-max-width:70px;--ti-upload-item-space:2px;--ti-upload-x-reupload-icon-color:var(--ti-common-color-icon-normal)}.ti3-file-detail-item{margin-top:20px;position:relative}.ti3-file-item-name{display:inline-block;max-width:40%;overflow:hidden;padding-left:10px;text-overflow:ellipsis;white-space:nowrap;width:40%}.ti3-file-item-info,.ti3-file-item-size{display:inline-block;max-width:20%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:20%}.ti3-file-detail-operate{bottom:18px;position:absolute;right:10px}.ti3-file-detail-operate-icon{cursor:pointer;font-size:15px;margin-left:5px}.ti3-file-progress{background-color:var(--ti-upload-progress-bg-color);color:var(--ti-upload-progerss-text-color);height:5px}.ti3-file-btn{overflow:hidden;position:relative}.ti3-file-input{bottom:0;cursor:pointer;font-size:1000px;margin:0;opacity:0;padding:0;position:absolute;right:0;z-index:1}.ti3-file-input[disabled]{cursor:not-allowed}.ti3-file-text{line-height:calc(var(--ti-button-middle-height) - 2px)}.ti3-aui-file-disable .ti3-aui-file-field-container{background-color:var(--ti-input-bg-color-disabled);border-color:var(--ti-input-border-color-disabled);box-sizing:border-box;cursor:not-allowed}.ti3-aui-file-disable .ti3-aui-file-select-input{cursor:not-allowed}.ti3-aui-file-container{color:var(--ti-common-color-text-primary);font-size:var(--ti-common-font-size-base);line-height:var(--ti-common-line-height-number)}.ti3-aui-file-field-container{border:1px solid var(--ti-input-border-color);border-radius:var(--ti-input-border-radius);float:left;position:relative;width:var(--ti-upload-field-default-width)}.ti3-aui-file-items-container{-ms-box-sizing:border-box;box-sizing:border-box;max-height:calc((var(--ti-upload-height) - 2px)*2 - var(--ti-upload-item-space));min-height:calc(var(--ti-upload-height) - 2px);overflow-x:hidden;overflow-y:auto;padding:var(--ti-upload-item-container-padding-vertical) 0;width:calc(100% - 2px)}.ti3-aui-file-item{-ms-box-sizing:border-box;background-color:var(--ti-upload-item-bg);box-sizing:border-box;cursor:pointer;display:flex;float:left;height:calc(var(--ti-upload-item-height));justify-content:space-between;line-height:calc(var(--ti-upload-item-height));margin:calc(var(--ti-upload-item-space)/2) 0 calc(var(--ti-upload-item-space)/2) var(--ti-upload-item-space);max-width:100%;padding:0 var(--ti-input-padding-horizontal)}.ti3-aui-file-item.ti3-aui-single-file-item{width:100%}.ti3-aui-file-name-size-container{display:flex;flex-shrink:0;width:calc(100% - var(--ti-upload-item-operate-container-width))}.ti3-aui-file-name{color:var(--ti-upload-item-name-color);height:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ti3-aui-file-size{-ms-box-sizing:border-box;box-sizing:border-box;color:var(--ti-upload-item-size-color);display:flex;flex-shrink:0;padding-left:var(--ti-upload-item-size-margin-left)}.ti3-aui-file-item-size{max-width:var(--ti-upload-item-size-max-width);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ti3-aui-file-operates{width:calc(var(--ti-upload-item-operate-container-width))}.ti3-aui-file-error-icon,.ti3-aui-file-error-reupload,.ti3-aui-file-success,.ti3-aui-file-x{color:var(--ti-upload-x-reupload-icon-color);float:right;font-size:var(--ti-upload-icon-size)}.ti3-aui-file-success{color:var(--ti-common-color-success)}.ti3-aui-file-error-icon,.ti3-aui-file-error-state .ti3-aui-file-x{margin-right:var(--ti-common-space-2x)}.ti3-aui-file-error-icon{color:var(--ti-common-color-error)}.ti3-aui-file-progress-pie{float:right;height:var(--ti-upload-icon-size);position:relative;top:calc((var(--ti-upload-item-height) - var(--ti-upload-icon-size))/2);width:var(--ti-upload-icon-size)}.ti3-aui-file-select-input{height:0;opacity:0;width:0}.ti3-aui-file-tip-name{display:inline-block;font-size:var(--ti-common-font-size-base);margin-top:var(--ti-common-space-base)}.ti3-aui-file-placeholder{color:var(--ti-input-placeholder-color);line-height:calc(var(--ti-upload-height) - 2px - var(--ti-upload-item-container-padding-vertical)*2);padding-left:var(--ti-input-padding-horizontal)}.ti3-aui-upload-btn{float:left;height:var(--ti-upload-height);margin-left:var(--ti-common-space-2x)}.ti3-aui-file-state-general{margin-top:var(--ti-common-space-2x)}.ti3-aui-file-state-general-info{align-items:center;display:flex}.ti3-aui-file-state-general-info-addSuccess,.ti3-aui-file-state-general-info-uploading{color:var(--ti-common-color-text-weaken)}.ti3-aui-file-state-general-info-error{color:var(--ti-common-color-error-text)}.ti3-aui-file-state-general-info-success{color:var(--ti-common-color-text-primary)}.ti3-aui-file-state-general-operate{color:var(--ti-upload-state-general-operate-color);cursor:pointer;display:inline-block;margin-left:var(--ti-common-space-base);vertical-align:middle}.ti3-aui-file-state-general-operate:hover{color:var(--ti-upload-state-general-operate-color-hover)}.ti3-aui-file-state-general-error,.ti3-aui-file-state-general-success{color:var(--ti-common-color-success);font-size:var(--ti-upload-icon-size);line-height:18px;margin-right:var(--ti-common-space-2x)}.ti3-aui-file-state-general-error{color:var(--ti-common-color-error)}.ti3-file-upload-btnCon{float:left;position:relative}.ti3-file-upload-btn-cover{bottom:0;cursor:not-allowed;left:var(--ti-common-space-2x);position:absolute;right:0;top:0}.ti3-file-upload-container .ti3-btn-default:not(:focus):not([disabled]):hover,.ti3-file-upload-container [ti-button]:not(:focus):not([disabled]):hover{animation:none}"]
            },] }
];
TiUploadComponent.ctorParameters = () => [
    { type: TiUploadService },
    { type: ElementRef },
    { type: Renderer2 },
    { type: TiOverflowService }
];
TiUploadComponent.propDecorators = {
    type: [{ type: Input }],
    buttonText: [{ type: Input }],
    inputFieldWidth: [{ type: Input }],
    showSubmitButton: [{ type: Input }],
    placeholder: [{ type: Input }],
    autofocus: [{ type: Input }],
    fileInput: [{ type: ViewChild, args: ['fileInput',] }]
};
//# sourceMappingURL=data:application/json;base64,