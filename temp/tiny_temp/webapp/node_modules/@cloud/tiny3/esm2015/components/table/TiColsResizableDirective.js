import { Directive, ElementRef, IterableDiffers, NgZone, Renderer2, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { TiTableComponent } from './TiTableComponent';
import { TiRenderer } from '../../services/renderer/TiRenderer';
import { Util } from '../../utils/Util';
import { TiTableFixedHeadService } from './TiTableFixedHeadService';
/**
 * TiColsResizable 表格列拖动指令
 *
 * 支持拖动表格列来调整各列宽度。
 *
 * 在ti-table标签上加了tiColsResizable属性，则表格自动具有列拖动功能；
 * 同时还需要对table元素包裹父容器div，并对父容器设置 ti3-resize-wrapper样式类。
 */
export class TiColsResizableDirective {
    constructor(tableCom, renderer, elementRef, zone, tiRenderer, iterableDiffers, fixedHeadService, document) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.zone = zone;
        this.tiRenderer = tiRenderer;
        this.iterableDiffers = iterableDiffers;
        this.fixedHeadService = fixedHeadService;
        this.document = document;
        /**
         * @ignore
         */
        this.notResizableAttr = 'not-resizable';
        /**
         * @ignore
         */
        this.resizableOpts = {
            table: null,
            ths: null,
            wrap: null,
            mouseXPosition: 0,
            target: null,
            storedSizes: [],
            storedSortEleSizes: [],
            storeTableWidthChange: 0,
            isYOverflowedWithX: false
        }; // 初始化列拖动属性的配置项
        this.isDragStart = false;
        this.isColumnsInit = true;
        /**
         * @ignore
         */
        this.isfirstYScrollStateChange = true;
        /**
         * @ignore
         * 将当前表格各列的宽度更新到到resizableOpts.storedSizes中
         */
        this.updateStoredSizes = () => {
            this.resizableOpts.storedSizes = [];
            this.resizableOpts.ths.forEach((th, index) => {
                this.tiRenderer.setAttributes(th, { 'ti-visible-index': index });
                this.resizableOpts.storedSizes[index] = TiColsResizableDirective.getWidth(th);
            });
            // 更新表格记忆
            if (this.tableCom.storageId && this.tableCom.storageConfig.colsWidth) {
                this.tableCom.localStorageState['colsWidth'] = this.resizableOpts.storedSizes;
            }
        };
        /**
         * @ignore
         */
        this.setWidth = (element, width) => {
            this.renderer.setStyle(element, 'width', width + 'px');
        };
        this.hostEle = this.elementRef.nativeElement;
        this.tableCom = tableCom;
    }
    static getThs(table) {
        return Array.from(table.children[0].children[0].children);
    }
    static getWidth(element) {
        return parseFloat(element.getBoundingClientRect().width
            .toFixed(1));
    }
    static trackByFn(index, item) {
        return item.show;
    }
    ngOnInit() {
        this.subscription = this.tableCom.viewInitSubject.subscribe(() => {
            this.processColsResizable();
            this.isColumnsInit = false; // 主要处理 columns 初始为空，异步的场景
            // 表格记忆
            // 版本更新后用户第一次访问，localStorageState['colsWidth']不存在
            // 修复SSR错误：ERROR TypeError: Cannot read property 'colsWidth' of undefined 
            if (this.tableCom.storageId && this.tableCom.storageConfig && this.tableCom.storageConfig.colsWidth
                && this.tableCom.localStorageState && this.tableCom.localStorageState['colsWidth']) {
                this.initStorageColsWidth();
            }
        });
        this.columsDiffer = this.iterableDiffers.find(this.tableCom.columns)
            .create(TiColsResizableDirective.trackByFn);
    }
    ngDoCheck() {
        const columsDiffer = this.columsDiffer.diff(this.tableCom.columns);
        if (columsDiffer) {
            if (this.isColumnsInit) {
                this.isColumnsInit = false;
                return;
            }
            this.zone.runOutsideAngular(() => {
                setTimeout(() => {
                    this.setDefaultWidth();
                }, 0);
            });
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
        if (this.documentMouseMoveListener) {
            this.documentMouseMoveListener();
        }
        if (this.documentMouseUpListener) {
            this.documentMouseUpListener();
        }
        if (this.windowResizeListener) {
            this.windowResizeListener();
        }
    }
    processColsResizable() {
        this.setTableWidthChange();
        const table = this.resizableOpts.table = this.getTable();
        const thead = table.children[0];
        if (this.tableCom.isFixedHead) {
            this.resizableOpts.secondTable = this.getSecondTable();
            this.resizableOpts.xScrollState = this.overflowedX();
            this.resizableOpts.yScrollState = this.overflowedY();
            this.resizableOpts.ths = TiColsResizableDirective.getThs(table);
            this.resizableOpts.secondThs = TiColsResizableDirective.getThs(this.resizableOpts.secondTable);
            this.tableCom.processYScrollStateChangeWithColsResizable = () => {
                this.fixedHeadService.processYScrollStateChange(this);
            };
        }
        this.zone.runOutsideAngular(() => {
            this.renderer.listen(thead, 'mousemove', (event) => {
                const currentTh = event.target;
                if (currentTh['nodeName'] !== 'TH') {
                    return;
                }
                // 获取当前th距页面文档的left值
                const left = currentTh['getBoundingClientRect']().left + this.document.documentElement.scrollLeft;
                const thWidth = currentTh['getBoundingClientRect']().width;
                // 判断光标是否落在th的右边缘
                const isOnColBorder = Math.abs(event.pageX - Math.round(left + thWidth)) <=
                    TiColsResizableDirective.COL_BORDER_RANGE;
                if (isOnColBorder) {
                    if (event.target['hasAttribute'](this.notResizableAttr) ||
                        this.isLastColumn(currentTh)) {
                        return;
                    }
                    this.createDividingLine(currentTh);
                }
                else {
                    this.removeDividingLine();
                }
            });
            this.renderer.listen(thead, 'mouseleave', () => {
                this.removeDividingLine();
            });
            this.renderer.listen(thead, 'mousedown', (event) => {
                const currentTh = event.target;
                if (this.tiRenderer.hasClass(currentTh, 'col-resize-active')) {
                    this.isDragStart = true;
                    // 鼠标点击的当前列
                    this.resizableOpts.target = currentTh;
                    // 更新光标位置
                    this.resizableOpts.mouseXPosition = event.pageX;
                    // 在拖动前获取当前表格最新的列信息、宽度，很关键，使得设置宽度与样式实际宽度一直
                    this.updateTableInfo();
                    // 给页面设置不可选样式，避免拖动时页面或表格内部出现被选中的蓝色区域
                    this.toggleTextSelection(true);
                }
                if (this.tableCom.isFixedHead) {
                    this.resizableOpts.xScrollState = this.overflowedX();
                    this.resizableOpts.yScrollState = this.overflowedY();
                }
            });
            const tableContainer = this.tiRenderer.findChildrenByClassName(this.hostEle, 'ti3-resize-wrapper')[0];
            if (!this.tiRenderer.hasClass(tableContainer, 'ti3-table-container')) {
                this.renderer.listen(tableContainer, 'scroll', () => {
                    Util.trigger(this.document, 'tiScroll');
                });
            }
            this.documentMouseMoveListener = this.renderer.listen(this.document, 'mousemove', (event) => {
                // 列拖动的动作应该是先mousedown，然后mousemove，因此先判断是否已经触发了mousedown
                if (!this.isDragStart || this.resizableOpts.mouseXPosition === 0 || !this.resizableOpts.target) {
                    return;
                }
                this.mouseMove(event);
            });
            this.documentMouseUpListener = this.renderer.listen(this.document, 'mouseup', (event) => {
                if (!this.isDragStart) {
                    return;
                }
                this.toggleTextSelection(false); // 恢复页面可选样式
                this.stopResize(); // 保存最新宽度到浏览器中
                this.isDragStart = false;
            });
            // 修复SSR报错：ERROR ReferenceError: window is not defined
            if (typeof window === 'undefined') {
                return;
            }
            this.windowResizeListener = this.renderer.listen(window, 'resize', () => {
                this.setTableWidthChange();
            });
        });
    }
    mouseMove(event) {
        const options = this.resizableOpts;
        const lastColIndex = options.ths.length - 1;
        const curColIndex = parseInt(options.target.getAttribute('ti-visible-index'), 10);
        const colWidth = options.storedSizes[curColIndex];
        const leftEdge = parseFloat((event.pageX - options.mouseXPosition).toFixed(1));
        const minWidth = this.getColMinWidth(options.target);
        // 当拖拽方向为列宽度减小的方向且列宽已达到文本区最小宽度时阻止拖动
        if ((leftEdge >= 0) || (colWidth + leftEdge > Math.ceil(minWidth))) {
            // 更新拖动列宽度
            options.storedSizes[curColIndex] += leftEdge;
            this.setWidth(options.target, options.storedSizes[curColIndex]);
            // 对最后一列的列宽的整体处理方案：
            // 如果更新拖动列宽度后的表格的总宽度小于表格初始宽度，则将宽度差补偿到最后一列;
            // 如果更新拖动列宽度后的表格的总宽度大于表格初始宽度，且之前最后一列列宽有补偿时，
            // 将最后一列的补偿先抵消掉，然后有超出时再出滚动条
            // s: storeTableWidthChange(此次拖动前各列拖动值的累计和)
            // b: 此次拖动前给末列的补偿值
            // l: leftEdge(此次拖动的距离)
            //   s      l        s + l       b       此次拖动后对末列宽的设置
            //  -5     -1       -6 < 0      +5          +1(-leftEdge)
            //  -5     +3       -2 < 0      +5          -3(-leftEdge)
            //  +5     -8       -3 < 0       0          +3(-(storeColsWidthChange+leftEdge))
            //  -5     +8        3 > 0      +5          -5(+storeColsWidthChange)
            //  +5     +3        8 > 0       0          +0(不做处理)
            //  +5     -3        2 > 0       0          +0(不做处理)
            if (leftEdge + options.storeTableWidthChange < 0) {
                if (options.storeTableWidthChange < 0) {
                    options.storedSizes[lastColIndex] -= leftEdge;
                }
                else {
                    options.storedSizes[lastColIndex] -= (leftEdge + options.storeTableWidthChange);
                }
            }
            else {
                if (options.storeTableWidthChange < 0) {
                    options.storedSizes[lastColIndex] += options.storeTableWidthChange;
                }
            }
            this.setWidth(options.ths[lastColIndex], options.storedSizes[lastColIndex]);
            // 更新各列拖动相对值的累计和
            options.storeTableWidthChange += leftEdge;
            // 表头锁定
            if (this.tableCom.isFixedHead) {
                // 更新第二个表格（bodyTable）中的当前列和最后一列的宽度
                this.setWidth(options.secondThs[curColIndex], options.storedSizes[curColIndex]);
                this.setWidth(options.secondThs[options.secondThs.length - 1], options.storedSizes[lastColIndex]);
                this.fixedHeadService.handleYNotOverflowedWithX(this.resizableOpts, this.tableCom.tbodyContainer);
                // 当横向滚动条出现导致纵向滚动条出现时对账本做处理
                this.fixedHeadService.handleYOverflowedWithX(this.resizableOpts, this.tableCom.tbodyContainer);
                // 纵向滚动条状态变化时对固定的表头右边填充块的处理
                this.fixedHeadService.processOverflowY(this.tableCom.theadContainer, this.tableCom.tbodyContainer, this.tableCom);
            }
            if (this.tableCom.fixedColumnInfo.hasFixedColumn) {
                this.tableCom.thResizeSubject.next({
                    th: options.target,
                    leftEdge,
                    resizableOpts: this.resizableOpts
                });
                const container = this.tableCom.fixedColumnInfo.container;
                if (container) {
                    const scrollLeft = container.scrollLeft;
                    const isRightColumnFloat = scrollLeft + container.clientWidth < container.scrollWidth;
                    this.tableCom.containerScrollXChangeSubject.next({
                        scrollLeft,
                        isRightColumnFloat
                    });
                }
            }
        }
        // 更新光标位置
        options.mouseXPosition = event.pageX;
    }
    getColMinWidth(thElement) {
        // 此处的值是'...'所占宽度，文本区的宽度最小为省略号所占宽度；当容器宽度小于此值时，文本会完全显示，但超出部分会直接被截断。
        // Chrome 和 IE下省略号'...'所占宽度大概为10px;
        // Firefox 下不会出现只有'...'的情况，最小为：一个字符 + '...',其所占宽度大概为28px(中文字符下)；
        // 此处为保证三个浏览器都表现正常，取值29(28 + 1, 1为矫正偏差值)。
        let minWidth = 29;
        minWidth += parseFloat(window.getComputedStyle(thElement).paddingLeft) +
            parseFloat(window.getComputedStyle(thElement).paddingRight);
        const sortEle = this.tiRenderer.findChildrenByClassName(thElement, 'ti3-sort-container')[0];
        const iconsEle = this.tiRenderer.findChildrenByClassName(thElement, 'ti3-cell-icons-container')[0];
        const headFilterEle = this.tiRenderer.findChildrenByClassName(thElement, 'ti3-head-filter-container')[0];
        if (sortEle) {
            const sortWidth = parseFloat(sortEle.getBoundingClientRect().width
                .toFixed(1));
            minWidth += sortWidth;
        }
        if (iconsEle) {
            const filterWidth = parseFloat(iconsEle.getBoundingClientRect().width
                .toFixed(1));
            minWidth += filterWidth;
        }
        if (headFilterEle) {
            const headFilterWidth = parseFloat(headFilterEle.getBoundingClientRect().width
                .toFixed(1));
            minWidth += headFilterWidth;
        }
        return minWidth;
    }
    setTableWidthChange() {
        const tableContainer = this.tiRenderer.findChildrenByClassName(this.hostEle, 'ti3-resize-wrapper')[0];
        // 表格容器自身宽度（不包括Y方向滚动条的宽度）
        const clientWidth = tableContainer ? tableContainer['clientWidth'] : 0;
        // 表格容器实际内容区域宽度
        const scrollWidth = tableContainer ? tableContainer['scrollWidth'] : 0;
        // resizableOpts.storeColsWidthChange为各列拖动相对值的累计和
        // 将表格内容溢出部分的宽度赋给各列拖动相对值的累计和
        this.resizableOpts.storeTableWidthChange = scrollWidth - clientWidth;
    }
    stopResize() {
        this.updateStoredSizes();
        this.resizableOpts.mouseXPosition = 0;
        this.resizableOpts.target = null;
        if (this.tableCom.isFixedHead) {
            this.resizableOpts.xScrollState = this.overflowedX();
            this.resizableOpts.yScrollState = this.overflowedY();
        }
    }
    getTable() {
        // 用户给table元素加父容器，通过父容器设置overflow属性
        const tableContainerClassName = this.tableCom.isFixedHead ? 'ti3-table-fixed-head' : 'ti3-resize-wrapper';
        const tableContainer = this.tiRenderer.findChildrenByClassName(this.hostEle, tableContainerClassName)[0];
        const table = tableContainer.children[0].nodeName === 'TABLE' ? tableContainer.children[0] : null;
        return table;
    }
    /**
     * @ignore
     */
    isLastColumn(th) {
        const parentElement = th.parentElement;
        if (!parentElement) {
            return true;
        }
        const ths = th.parentElement.children;
        const index = Array.from(ths)
            .indexOf(th);
        return index === ths.length - 1;
    }
    // 当光标移到感应区时，出现拖动分割线
    createDividingLine(th) {
        this.renderer.addClass(th, 'col-resize-active');
        const index = Array.from(th.parentElement.children)
            .indexOf(th);
        const bodyTable = this.tableCom.isFixedHead ? this.resizableOpts.secondTable : this.resizableOpts.table;
        // 防止不存在tbody的场景报错
        if (!bodyTable.children[1]) {
            return;
        }
        const trs = Array.from(bodyTable.children[1].children)
            .filter((tr) => {
            return this.needDividingLine(tr);
        });
        trs.forEach((tr) => {
            // 分组场景index 大于tr.children.length
            if (!tr.children[index]) {
                return;
            }
            this.renderer.addClass(tr.children[index], 'col-resize-active');
        });
    }
    // 当光标离开感应区时，拖动分割线消失
    removeDividingLine() {
        const bodyTable = this.tableCom.isFixedHead ? this.resizableOpts.secondTable : this.resizableOpts.table;
        const ths = Array.from(this.resizableOpts.table.children[0].children[0].children);
        ths.forEach((th) => {
            this.renderer.removeClass(th, 'col-resize-active');
        });
        // 防止不存在tbody的场景报错
        if (!bodyTable.children[1]) {
            return;
        }
        const trs = Array.from(bodyTable.children[1].children);
        trs.forEach((tr) => {
            if (!this.needDividingLine(tr)) {
                return;
            }
            Array.from(tr.children)
                .forEach((td) => {
                this.renderer.removeClass(td, 'col-resize-active');
            });
        });
    }
    updateTableInfo() {
        this.resizableOpts.ths = TiColsResizableDirective.getThs(this.resizableOpts.table);
        this.updateStoredSizes(); // 保存最新宽度
        this.setComputedWidth(); // 设置最新宽度
    }
    initStorageColsWidth() {
        this.resizableOpts.ths = TiColsResizableDirective.getThs(this.resizableOpts.table);
        this.resizableOpts.storedSizes = this.tableCom.localStorageState['colsWidth'];
        this.setComputedWidth();
        // 各列宽度设置后，可能出现滚动条，所以要计算一次 storeTableWidthChange的值
        this.setTableWidthChange();
    }
    setComputedWidth() {
        if (this.resizableOpts.table && this.resizableOpts.ths && this.resizableOpts.ths.length) {
            this.resizableOpts.ths.forEach((th, index) => {
                this.setWidth(th, this.resizableOpts.storedSizes[index]);
                // 表头锁定
                if (this.tableCom.isFixedHead) {
                    this.resizableOpts.secondThs = TiColsResizableDirective.getThs(this.resizableOpts.secondTable);
                    this.setWidth(this.resizableOpts.secondThs[index], this.resizableOpts.storedSizes[index]);
                }
            });
        }
    }
    // 将表格宽度设置为默认宽度
    setDefaultWidth() {
        const ths = this.resizableOpts.ths = TiColsResizableDirective.getThs(this.resizableOpts.table);
        // 列隐藏或显示后，将各列宽设置为初始用户设置的列宽
        ths.forEach((th) => {
            const width = th.getAttribute('width') ? th.getAttribute('width') : '';
            // 注意：设置列宽的方式有多种，此处统一默认以width属性设置的宽为准
            this.renderer.setStyle(th, 'width', width);
        });
        // 表头锁定
        if (this.tableCom.isFixedHead) {
            const secondTable = this.getSecondTable();
            const secondThs = TiColsResizableDirective.getThs(secondTable);
            this.resizableOpts.secondThs = secondThs;
            this.resizableOpts.xScrollState = this.overflowedX();
            this.resizableOpts.yScrollState = this.overflowedY();
            secondThs.forEach((th) => {
                const width = th.getAttribute('width') ? th.getAttribute('width') : '';
                // 注意：设置列宽的方式有多种，此处统一默认以width属性设置的宽为准
                this.renderer.setStyle(th, 'width', width);
            });
            this.fixedHeadService.processYScrollStateChange(this);
        }
        this.setTableWidthChange();
    }
    // 当列拖动进行时去掉文字可选样式(user-select: none)
    toggleTextSelection(toggle) {
        const body = this.document.body;
        if (toggle) {
            this.renderer.addClass(body, 'ti3-unselectable');
            this.renderer.setAttribute(body, 'unselectable', 'on');
        }
        else {
            this.renderer.removeClass(body, 'ti3-unselectable');
            body.removeAttribute('unselectable');
        }
    }
    needDividingLine(tr) {
        if (!tr) {
            return false;
        }
        const classes = ['ti3-details-tr', 'ti3-table-nodata', 'ti3-table-loadfail',
            'ti3-table-nodata-guide', 'ti3-table-nodata-simple'];
        for (const className of classes) {
            if (this.tiRenderer.hasClass(tr, className)) {
                return false;
            }
        }
        return true;
    }
    // 供表头锁定使用
    getSecondTable() {
        const secondTableContainer = this.tiRenderer.findChildrenByClassName(this.hostEle, 'ti3-resize-wrapper')[0];
        return secondTableContainer ? secondTableContainer.children[0] : null;
    }
    overflowedX(isNum) {
        return this.fixedHeadService.overflowedResult(this.tableCom.tbodyContainer, 'X', isNum);
    }
    overflowedY(isNum) {
        return this.fixedHeadService.overflowedResult(this.tableCom.tbodyContainer, 'Y', isNum);
    }
}
/**
 * @ignore
 */
TiColsResizableDirective.UNSELECTABLE_CLASS = 'ti3-unselectable';
/**
 * @ignore
 * 移到表头能够显示拖动线的感应范围
 */
TiColsResizableDirective.COL_BORDER_RANGE = 10;
TiColsResizableDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ti-table[tiColsResizable]'
            },] }
];
TiColsResizableDirective.ctorParameters = () => [
    { type: TiTableComponent },
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: TiRenderer },
    { type: IterableDiffers },
    { type: TiTableFixedHeadService },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
//# sourceMappingURL=data:application/json;base64,