/* eslint-disable no-param-reassign */
import { Component, ElementRef, EventEmitter, HostListener, Input, NgZone, Output, QueryList, Renderer2, ViewChild, ViewChildren, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { TiDateUtil, TiKeymap, Util } from '../../utils/Util';
import { TiLocale } from '../../locale/TiLocaleModule';
import { TiFormComponent } from '../base/TiBaseModule';
import { TiDateDominatorComponent } from '../datedominator/TiDateDominatorModule';
import { TiDropComponent } from '../drop/TiDropModule';
import { TiDateEditComponent } from '../dateedit/TiDateEditModule';
import { TiButtonComponent } from '../button/TiButtonModule';
import { TiTextComponent } from '../text/TiTextModule';
// lib编译要求@Component
export class TiDateBaseComponent extends TiFormComponent {
    constructor(hostRef, render, zone, document) {
        super(hostRef, render);
        this.hostRef = hostRef;
        this.render = render;
        this.zone = zone;
        this.document = document;
        /**
         * 设置最小值
         */
        this.min = TiDateUtil.minDate();
        /**
         * 设置最大值
         */
        this.max = TiDateUtil.maxDate();
        /**
         * 控制时间日期类组件是否展示清除日期图标（默认显示）
         */
        this.clearIcon = true;
        /**
         * 面板对齐方式
         */
        this.panelAlign = 'left';
        /**
         * 开始值固定不可选
         */
        this.isBeginFixed = false;
        /**
         * 结束值固定不可选
         */
        this.isEndFixed = false;
        /**
         * 此接口只适用于dateRange组件，是否允许结束日期和开始日期为同一天
         */
        this.isAllowBeginEqualEnd = true;
        /**
         * （date组件无该接口）点击时间日期面板上的确认按钮触发的事件
         */
        this.okClick = new EventEmitter();
        /**
         * 点击日期面板上的日期触发的事件
         */
        this.dayClick = new EventEmitter();
        this.localeWords = TiLocale.getLocaleWords();
        /**
         * @ignore
         * 标志是时间选择面板还是日期选择面板
         */
        this.selectTime = false;
        /**
         * @ignore
         * 对应每个时间日期组件的最大最小值的配置
         */
        this.config = {
            min: TiDateUtil.minDate(),
            max: TiDateUtil.maxDate()
        };
        /**
         * @ignore
         * model默认值
         */
        this.defaultValue = {
            begin: null,
            end: null
        };
        /**
         * @ignore
         * 模板初始化
         */
        this.datePanel = {
            value: this.defaultValue
        };
        /**
         * @ignore
         * date/datetime 面板宽度
         */
        this.datePanelWidth = '286px';
        /**
         * @ignore
         * daterange/datetimerange 面板宽度
         */
        this.daterangePanelWidth = '558px';
        /**
         * @ignore
         * 日期显示字符串
         */
        this.inputValue = '';
        /**
         * @ignore
         * 模板中使用
         */
        this.browserSpace = TiDateBaseComponent.BROWSER_SPACE + 'px';
        /**
         * @ignore 面板与dominator的距离
         */
        this.dominatorSpace = TiDateBaseComponent.DOMINATOR_SPACE + 'px';
        /**
         * @ignore
         * 记录当前面板内部编辑区域焦点位置
         */
        this.focusedPosition = 'begin';
        /**
         * @ignore
         * 时间编辑框placehoder
         */
        this.timeplaceholder = 'hh:mm:ss';
        /**
         * @ignore
         * 标志是否存在左侧自定义时间区域
         */
        this.hasCustomizeTime = false;
        /**
         * @ignore
         * 可聚焦元素集合
         */
        this.focusElementsArr = [];
        this.keydownHandlerFn = (event) => {
            if (!this.dropCom.isShow) {
                return;
            }
            if (event.keyCode === TiKeymap.KEY_ESCAPE) {
                this.hidePanel();
                this.dominatorCom.focus();
            }
            this.tabKeydown(event);
        };
        /**
         * @ignore
         * 决定上下位置的函数
         */
        this.determinPositionFn = (layout) => {
            const needHeight = layout.targetLayout.height + TiDateBaseComponent.DOMINATOR_SPACE + TiDateBaseComponent.BROWSER_SPACE;
            if (layout.avilableLayout.bottom >= needHeight) { // 下方空间足够，向下展开
                return this.panelAlign === 'left' ? 'bottom-left' : 'bottom-right';
            }
            else {
                return this.panelAlign === 'left' ? 'top-left' : 'top-right';
            }
        };
    }
    static getFocusElements(focusComs, focusElements) {
        for (const focusCom of focusComs.toArray()) {
            focusElements = focusElements.concat(focusCom.getFocusableElems());
        }
        return focusElements;
    }
    /**
     * 组件快捷键处理tab键 enter键
     */
    onKeydown(event) {
        switch (event.keyCode) {
            case TiKeymap.KEY_TAB: // TAB键
                this.hidePanel();
                break;
            case TiKeymap.KEY_ENTER: // ENTER键(大键盘)
            case TiKeymap.KEY_NUMPAD_ENTER: // ENTER键(数字小键盘)
                this.responseEnter();
                break;
            default:
                break;
        }
    }
    /**
     * @ignore
     * writeValue区分是不是range组件：
     */
    writeValue(value) {
        super.writeValue(value);
        // 1.daterange和datetimerange组件的处理
        // 新旧值判断处理放在docheck中
        if (this.isRange) {
            // value不是对象时，将value设置为null，输入框中显示空白
            if (!(value instanceof Object) || !this.isValidValue(value)) {
                this.model = null;
                return;
            }
        }
        // 2.date和datetime组件的处理，非法时间日期值统一置为null，显示空
        if (!this.isValidValue(value)) {
            this.model = null;
            return;
        }
        // 新旧值相同时不作处理；
        if (TiDateUtil.isDateEqual(value, this.model)) {
            return;
        }
    }
    // tslint:disable-next-line:use-life-cycle-interface
    ngOnInit() {
        super.ngOnInit();
        // 是否存在左侧自定义面板
        this.hasCustomizeTime = !Util.isUndefined(this.customizeOptions) && !Util.isNull(this.customizeOptions);
        // format接口校验:对时间日期进行国际化处理
        this.validateFormat(this.isDatetime);
        // 最大最小值校验
        this.validateMinAndMax(this.config, this.isDatetime);
        this.zone.runOutsideAngular(() => {
            // document上的Ecs快捷键功能
            this.documentKeydownListener = this.render.listen(this.document, 'keydown', this.keydownHandlerFn);
        });
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        // 定义变量存储聚焦元素；
        let focusElements = [];
        // 获取dateedit的聚焦元素
        focusElements = TiDateBaseComponent.getFocusElements(this.dateEditComs, focusElements);
        // 获取时间编辑框聚焦元素
        if (this.textComs.length !== 0) {
            for (const textCom of this.textComs.toArray()) {
                focusElements = focusElements.concat(textCom.nativeElement);
            }
        }
        if (this.inputRef) {
            focusElements = focusElements.concat(this.inputRef.nativeElement);
        }
        // 获取确认取消按钮的聚焦元素
        for (const buttonCom of this.buttonComs.toArray()) {
            focusElements = focusElements.concat(buttonCom.nativeElement);
        }
        this.focusElementsArr = focusElements;
        this.setFocusableElems([this.dominatorCom.nativeElement]
            .concat(this.dropCom.nativeElement)
            .concat(focusElements));
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        if (this.documentKeydownListener) {
            this.documentKeydownListener();
        }
    }
    /**
     * 实现按tab键时，focus在下拉面板中循环
     */
    tabKeydown(event) {
        if (this.focusElementsArr.length === 0) {
            return;
        }
        let focusChanged = false;
        if (event.keyCode === TiKeymap.KEY_TAB) {
            const panelFocusElementsArr = this.focusElementsArr.filter((item) => !item.hasAttribute('disabled'));
            if (event.shiftKey) {
                if (event.target === panelFocusElementsArr[0]) {
                    focusChanged = true;
                    panelFocusElementsArr[panelFocusElementsArr.length - 1].focus();
                }
            }
            else if (event.target === panelFocusElementsArr[panelFocusElementsArr.length - 1]) {
                focusChanged = true;
                panelFocusElementsArr[0].focus();
            }
        }
        if (focusChanged) {
            event.preventDefault();
            event.stopPropagation();
        }
    }
    // ----------------------------- 公共事件处理 -----------------------------
    /**
     * @ignore
     * 点击面板展开收起函数
     */
    onShowClick() {
        if (this.disabled) { // 非灰化可点击展开面板
            return;
        }
        if (this.dropCom.isShow || this.isClearClick) {
            this.isClearClick = false;
            this.dropCom.hide();
        }
        else {
            // 配置时间日期面板接口
            this.setPickerDate();
            this.show();
            this.selectTime = false; // 面板打开初次总展示日期面板
            setTimeout(() => {
                if (this.isBeginFixed && !this.isEndFixed) {
                    this.dateEditComs.last.focus(); // 开始值固定，则第二个编辑区域聚焦
                    this.focusedPosition = 'end';
                }
                else {
                    this.dateEditComs.first.focus(); // 初始化打开面板，第一个编辑区域聚焦
                    this.focusedPosition = 'begin';
                }
            }, 0);
        }
    }
    /**
     * @ignore
     * 左侧自定义时间文本点击事件
     */
    customizeTimeClickFn(val) {
        this.model = val;
        this.dropCom.hide();
    }
    /**
     * @ignore
     * 点击选择时间，根据初始传入值设定下拉选择项
     */
    selectTimeFn() {
        if (this.timeEditDisabled) {
            return;
        }
        this.selectTime = true; // 切换为时间选择面板
        this.textComs.first.nativeElement.focus();
    }
    /**
     * @ignore
     */
    selectDateFn() {
        this.selectTime = false;
        this.dateEditComs.first.nativeElement.focus();
        this.focusedPosition = 'begin';
    }
    /**
     * @ignore
     */
    dateEditClick(val) {
        if (this.isBeginFixed || this.isEndFixed) {
            return;
        }
        this.focusedPosition = val;
        this.selectTime = false;
    }
    /**
     * @ignore
     */
    dateEditFocus(val) {
        this.focusedPosition = val;
        this.selectTime = false;
    }
    /**
     * @ignore
     * 时间框聚焦
     */
    timeFocus(val) {
        this.selectTime = true;
        this.focusedPosition = val === 'begin' ? 'beginTime' : 'endTime';
    }
    /**
     * @ignore
     */
    setTimeFn(obj, beginTime, endTime) {
        const timePosition = obj.timeOption;
        const beginTimeArr = beginTime.value.split(':');
        let endTimeArr;
        if (!Util.isUndefined(endTime)) {
            endTimeArr = endTime.value.split(':');
        }
        switch (timePosition) {
            case 'beginHour':
                beginTimeArr[0] = obj.val.label;
                break;
            case 'beginMinute':
                beginTimeArr[1] = obj.val.label;
                break;
            case 'beginSecond':
                beginTimeArr[2] = obj.val.label;
                break;
            case 'endHour':
                endTimeArr[0] = obj.val.label;
                break;
            case 'endMinute':
                endTimeArr[1] = obj.val.label;
                break;
            case 'endSecond':
                endTimeArr[2] = obj.val.label;
                break;
            default:
                break;
        }
        beginTime.value = beginTimeArr.join(':');
        if (!Util.isUndefined(endTime)) {
            endTime.value = endTimeArr.join(':');
        }
    }
    /**
     * @ignore
     * 点击删除按钮
     */
    onIconClearClick(event) {
        // 阻止事件冒泡：可以防止点击叉号引起面板的显示或者隐藏，但此处不能阻止事件冒泡，
        // 事件不会冒泡到document上，会出现页面上其他下拉类组件面板不收起情况
        // 添加标志量，在onShowClick函数中处理
        if (this.disabled || !this.clearIcon) {
            return;
        }
        this.isClearClick = true;
        this.model = null;
        this.oldBeginValue = null;
        this.oldEndValue = null;
        this.inputValue = '';
        // 时间日期面板显示则隐藏
        this.hidePanel();
    }
    /**
     * @ignore
     * 隐藏drop, 适用于drop中用户点击引起drop隐藏，阻止了整体失焦。
     */
    hideDrop() {
        // 阻止整体失去焦点
        this.dominatorCom.focus();
        this.dropCom.hide();
    }
    /**
     * @ignore
     * 隐藏面板
     */
    hidePanel() {
        if (this.dropCom.isShow) {
            this.dropCom.hide();
        }
    }
    /**
     * @ignore
     * enter键的功能：如果面板展开不处理，面板收起则展开，设置datePanel指令的接口值
     */
    responseEnter() {
        if (this.dropCom.isShow) {
            return;
        }
        // 面板收起前是年或月面板，按enter键重新设置datePanel指令的接口值
        this.setPickerDate();
        // 时间面板展开
        this.show();
        setTimeout(() => {
            this.dateEditComs.first.nativeElement.focus();
            this.focusedPosition = 'begin';
        }, 0);
    }
    /**
     * @ignore
     *
     * 设置按钮禁用场景下 过度input的样式（适配tab快捷键场景）
     */
    setInputStyle(val) {
        if (val) {
            this.render.removeStyle(this.inputRef.nativeElement, 'display');
            this.render.setStyle(this.inputRef.nativeElement, 'opacity', '0');
        }
        else {
            this.render.setStyle(this.inputRef.nativeElement, 'display', 'none');
        }
    }
    // ----------------------------- 公共方法处理 -----------------------------
    /**
     * @ignore
     * 判断是不是合法的DatetimeFormat: format为对象 {date:'', time: ''}
     */
    isValidDatetimeFormat() {
        return (this.format instanceof Object) && Util.isString(this.format['date']) && Util.isString(this.format['time']);
    }
    /**
     * @ignore
     * 最大值最小值校验:和date组件不同，此处不需要做最大最小时分秒处理
     */
    validateMinAndMax(dateCofig, isDatetime) {
        const maxChanged = isDatetime ? this.max : TiDateUtil.changeMaxTime(this.max);
        this.max = TiDateUtil.isDate(this.max) ? maxChanged : dateCofig.max;
        const minChanged = isDatetime ? this.min : TiDateUtil.changeMinTime(this.min);
        this.min = TiDateUtil.isDate(this.min) ? minChanged : dateCofig.min;
        // 最大最小值矛盾时，设置为默认值
        if (this.max.getTime() < this.min.getTime()) {
            this.max = dateCofig.max;
            this.min = dateCofig.min;
        }
    }
    /**
     * @ignore
     * 校验format接口
     */
    validateFormat(isDatetime) {
        if (isDatetime) {
            this.validateDatetimeFormat();
        }
        else {
            this.validateDateFormat();
        }
    }
    /**
     * @ignore
     * 校验format: string类型，
     */
    validateDateFormat() {
        if (Util.isString(this.format)) {
            return;
        }
        // TODO:如果配置时间日期国际化
        this.format = this.localeWords.tiLocaleDate['date'];
    }
    /**
     * @ignore
     * 校验format: 对象类型{date:'', time:''}
     */
    validateDatetimeFormat() {
        // TODO:初始化为ngLocale格式
        // 用户设置format不是一个对象，设置为国际配置的format或默认值
        if (!(this.format instanceof Object)) {
            this.format = {
                date: this.localeWords.tiLocaleDate['date'],
                time: this.localeWords.tiLocaleDate['time']
            };
            return;
        }
        // format 为联合类型:此处处理DatetimeFormat类型
        this.format = this.format;
        // 日期格式校验
        if (!Util.isString(this.format.date)) {
            this.format.date = this.localeWords.tiLocaleDate['date'];
        }
        // 日期格式校验
        if (!Util.isString(this.format.time)) {
            this.format.time = this.localeWords.tiLocaleDate['time'];
        }
    }
    /**
     * @ignore
     * 判断range类型的model是否变化：比较起始时间和结束时间
     */
    rangeValueIsEqual(newValue, oldValue, isDatetime) {
        if (newValue === oldValue) {
            return true;
        }
        if ((newValue instanceof Object) && (oldValue instanceof Object)) {
            if (isDatetime) {
                return (TiDateUtil.isDatetimeEqual(newValue['begin'], oldValue['begin']) &&
                    TiDateUtil.isDatetimeEqual(newValue['end'], oldValue['end']));
            }
            else {
                return (TiDateUtil.isDateEqual(newValue['begin'], oldValue['begin']) &&
                    TiDateUtil.isDateEqual(newValue['end'], oldValue['end']));
            }
        }
        return false;
    }
    // ----------------------------- 动态监听处理 -----------------------------
    /**
     * @ignore
     * model值动态变更：支持仅修改begin或end值
     */
    setModel(isDatetime) {
        if (this.rangeValueIsEqual(this.model, this.oldModel, isDatetime)) {
            return;
        }
        // model中begin或者end值的变更
        this.formatValue();
        // 通过按钮改变model值：当面板处于打开状态时需要重新设置面板接口
        if (this.dropCom.isShow) {
            this.setPickerDate();
        }
        this.oldModel = (this.model === null) ? null : {
            begin: this.model.begin,
            end: this.model.end
        };
    }
    /**
     * @ignore
     * datetime与datetimeRange组件format动态变更
     */
    setFormat() {
        if (this.format && this.format['date'] === this.oldFormat['date'] &&
            this.format['time'] === this.oldFormat['time']) {
            return;
        }
        if (!this.isValidDatetimeFormat()) {
            this.format = this.oldFormat;
            return;
        }
        this.formatValue();
        this.oldFormat = this.format;
    }
    show() {
        if (this.renderer.parentNode(this.dropCom.nativeElement) === document.body) {
            this.dropCom.show();
        }
        else {
            // 使用setTimeout是为了保证datepanel渲染完成后再显示，否则首次打开时定位计算不准确
            setTimeout(() => {
                this.dropCom.show();
            }, 0);
        }
    }
    // ----------------------------- 需要在子类中实现 -----------------------------
    /**
     * @ignore
     * 0.判断是不是合法的model
     */
    isValidValue(value) {
        return true;
    }
    /**
     * @ignore
     * 1.配置时间日期面板接口
     */
    setPickerDate() { }
    /**
     * @ignore
     * 2.根据format格式model值
     */
    formatValue() { }
    /**
     * @ignore
     * 3.根据当前值设置确认按钮的状态
     */
    setOkBtnState() { }
    /**
     * @ignore
     * 起始面板日期有变化时，要重新设置其time组件对应最大值 datetimeRange组件中实现此方法
     */
    setBeginTimeMaxValue() { }
    /**
     * @ignore
     * 起始面板日期有变化时，要重新设置其time组件对应最小值 datetimeRange组件中实现此方法
     */
    setBeginTimeMinValue() { }
    /**
     * @ignore
     * 结束日期有变化时，要重新设置其time组件对应最大值 datetimeRange组件中实现此方法
     */
    setEndTimeMaxValue() { }
    /**
     * @ignore
     * 结束日期有变化时，要重新设置其time组件对应最小值 datetimeRange组件中实现此方法
     */
    setEndTimeMinValue() { }
}
/**
 * @ignore
 * 下拉距离选择框0px
 */
TiDateBaseComponent.DOMINATOR_SPACE = -30;
/**
 * 日期/日期时间下拉选择框距离浏览器上下边沿的距离为5px，开发者可在项目中整体配置
 */
TiDateBaseComponent.BROWSER_SPACE = 5;
TiDateBaseComponent.decorators = [
    { type: Component, args: [{
                template: ''
            },] }
];
TiDateBaseComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
TiDateBaseComponent.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    format: [{ type: Input }],
    nowDateTime: [{ type: Input }],
    clearIcon: [{ type: Input }],
    panelAlign: [{ type: Input }],
    customizeOptions: [{ type: Input }],
    disabledDays: [{ type: Input }],
    isBeginFixed: [{ type: Input }],
    isEndFixed: [{ type: Input }],
    isAllowBeginEqualEnd: [{ type: Input }],
    okClick: [{ type: Output }],
    dayClick: [{ type: Output }],
    dominatorCom: [{ type: ViewChild, args: [TiDateDominatorComponent, /* TODO: add static flag */ { static: true },] }],
    dropCom: [{ type: ViewChild, args: [TiDropComponent, /* TODO: add static flag */ { static: true },] }],
    inputRef: [{ type: ViewChild, args: ['input', { static: true },] }],
    dateEditComs: [{ type: ViewChildren, args: [TiDateEditComponent,] }],
    textComs: [{ type: ViewChildren, args: [TiTextComponent,] }],
    buttonComs: [{ type: ViewChildren, args: [TiButtonComponent,] }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,