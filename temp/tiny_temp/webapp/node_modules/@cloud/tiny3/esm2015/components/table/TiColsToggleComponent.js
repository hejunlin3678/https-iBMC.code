import { Component, ElementRef, Input, Renderer2, ViewChild } from '@angular/core';
import { TiTableComponent } from './TiTableComponent';
import { TiColsToggleDropComponent } from './TiColsToggleDropComponent';
import { TiSelectComponent } from '../select/TiSelectModule';
import { TiLocale } from '../../locale/TiLocaleModule';
// 下面注释，可以避免编译lib时正则报错。原理未知，副作用未知。
// @dynamic
/**
 * TiColsToggle 控制列动态隐藏/显示的组件
 *
 * ti-cols-toggle 用来显示列操作按钮，点击该按钮可在打开的下拉中设置各列的隐藏/显示；
 * 在 ti-table 标签内，开发者可灵活设置其位置。
 *
 * TiTable 上的 columns 接口传入值各项(列)的 show 和 title 属性值影响着各列的隐藏/显示状
 * 态,具体可参考 TiTableComponen t组件的 columns 输入接口说明。
 *
 * 开发者必须给需要动态显示/隐藏的列(th，td)使用 ngIf, 利用 ngIf 和 tiTable 上的 columns
 * 接口值中每列的show的值来控制当前列的显示或隐藏。
 *
 * ### 接口说明
 * **Inputs：**
 *
 * |     名称    |  类型   | 默认值   | 功能描述  |
 * | --------   | :-----   | :---- | :---- |
 * |  disabled   | boolean  | false | 设置列操作按钮是否禁用 |
 * | searchable   | boolean  | false | 是否显示搜索框 |
 * | selectAll   | boolean  | false | 是否开启全选功能。3.1.2新增 |
 * | panelWidth   |  string  | 'justified' | 下拉面板的宽度，可选值为'justified'(默认), 'auto'或自定义宽度，但宽度不能小于select面板的宽度 |
 * | noDataText   |  string  | '...' | 无数据时的显示文本。10.0.3版本新增 |
 * | select   | EventEmitter<TiTableColumns>  | 无 | 选中/取消选中事件，向外通知当前项数据，需要自行判断当前项是否选中。Tiny3.1.2 版本新增 |
 * | focus   | HTML事件  | 无 | 聚焦事件 |
 * | blur   | HTML事件  | 无 | 失焦事件 |
 *
 * <p><span style="color: red">以下说明不可用，不做参考。</span>该组件只有以上disabled、searchable、panelWidth、selectAll 这四个Input接口
 * 和foucs、blur、select 这三个事件接口可用，其余方法、Input、输出等(继承于TiSelectComponent,是供select的内部使用的)都不可用</p>
 */
export class TiColsToggleComponent extends TiSelectComponent {
    constructor(table, elementRef, renderer2) {
        super(elementRef, renderer2);
        /**
         * 设置tip提示内容，默认文本'自定义列表项'（国际化）
         *
         * 10.0.3新增
         */
        this.tipContent = TiLocale.getLocaleWords().tiTable.colsToggleTip;
        /**
         * 设置tip提示方向
         *
         * 10.0.3新增
         */
        this.tipPosition = 'top';
        // 标记是否需要更新聚焦元素
        this.shouldUpdateFocusableElems = false;
        this.table = table;
    }
    ngOnInit() {
        // 兼容使用tiTip指令实现的tip提示
        this.tipContent = this.tiTip ? '' : this.tipContent;
        this.tipPosition = this.tiTip ? undefined : this.tipPosition;
        this.setDropPanelWidth();
        super.ngOnInit();
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.updateFocusableElems();
        // TODO：严格来说，不应该继承自Select，Select中有对dominator的处理。看有没有更好实现方式。
    }
    ngAfterViewChecked() {
        // 这里不能调用父类方法，因为Select父类对dominator处理，空指针报错。
        // TODO: 看是否能够不继承select
        if (this.shouldUpdateFocusableElems) {
            this.shouldUpdateFocusableElems = false;
            this.updateFocusableElems();
        }
    }
    ngOnChanges(changes) {
        if (changes['searchable'] && !changes['searchable'].firstChange) {
            // searchable 参数变更后，dropSearch 组件中会重新获取搜索输入框元素，this.dropsearchCom.getFocusableElems() 方法获取的搜索框元素失效。
            // 由于dropSearch在ngAfterViewChecked中变更聚焦元素，时机比ngOnChanges晚，但比组件的ngAfterViewChecked早，
            // 所以用shouldUpdateFocusableElems变量标记是否需要更新聚焦元素，之后在ngAfterViewChecked中处理
            this.shouldUpdateFocusableElems = true;
        }
    }
    /**
     * @ignore
     * 在失焦时，通知更新了表格的列数据，用于表格记忆上传列显示数据
     */
    onBlur() {
        super.onBlur();
        // 表格记忆通知列切换变化
        if (this.table.storageId) {
            this.table.updateColumnsSubject.next();
        }
    }
    // 更新可聚焦元素
    updateFocusableElems() {
        if (this.searchable) {
            // 推荐在onInit()时调用setFocusableElems(), 但是ngFor/ngIf中的元素在ngAfterViewInit()才能获取到
            this.setFocusableElems([this.toggleMenuEleRef.nativeElement].concat(this.dropsearchCom.getFocusableElems()));
        }
        else {
            this.setFocusableElems([this.toggleMenuEleRef.nativeElement]);
        }
    }
    setDropPanelWidth() {
        const panelWidthNum = parseInt(this.panelWidth, 10);
        //  if (!Util.isNumber()) {
        //      this.panelWidth = TiColsToggleComponent.DEFAULT_PANEL_WIDTH + 'px';
        //      return;
        //  }
        if (panelWidthNum > TiColsToggleComponent.MAX_PANEL_WIDTH) {
            this.panelWidth = `${TiColsToggleComponent.MAX_PANEL_WIDTH}px`;
            return;
        }
        if (panelWidthNum < TiColsToggleComponent.MIN_PANEL_WIDTH) {
            this.panelWidth = `${TiColsToggleComponent.MIN_PANEL_WIDTH}px`;
        }
    }
}
TiColsToggleComponent.DEFAULT_PANEL_WIDTH = 250;
TiColsToggleComponent.MAX_PANEL_WIDTH = 300;
TiColsToggleComponent.MIN_PANEL_WIDTH = 200;
TiColsToggleComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-cols-toggle',
                template: "<div #toggleMenu\r\n     tiOutline\r\n     class=\"ti3-cols-toggle-menu-container\"\r\n     tabindex=\"{{disabled ? -1 : 0}}\"\r\n     (click)=\"onClickDominator()\"\r\n     (keydown)=\"onKeydown($event)\"\r\n     [id]=\"appendId('cols-toggle-menu')\"\r\n     [ngClass]=\"{'ti3-cols-toggle-menu-disabled': disabled}\">\r\n    <div class=\"ti3-icon ti3-icon-config ti3-cols-toggle-menu\" [tiTip]=\"tipContent\" [tiTipPosition]=\"tipPosition\"></div>\r\n</div>\r\n<ti-cols-toggle-drop [dominatorElem]=\"toggleMenuEleRef.nativeElement\"\r\n                     [panelWidth]=\"panelWidth\"\r\n                     [searchable]=\"searchable\"\r\n                     [options]=\"table.columns\"\r\n                     [selectAll]=\"selectAll\"\r\n                     [noDataText]=\"noDataText\"\r\n                     (select)=\"onSelect($event)\"\r\n                     [id]=\"appendId('colstoggle_drop')\"></ti-cols-toggle-drop>\r\n\r\n",
                host: {
                    '[class.ti3-cols-toggle-container]': 'true',
                    '(blur)': 'onBlur()'
                }
            },] }
];
TiColsToggleComponent.ctorParameters = () => [
    { type: TiTableComponent },
    { type: ElementRef },
    { type: Renderer2 }
];
TiColsToggleComponent.propDecorators = {
    tiTip: [{ type: Input }],
    tipContent: [{ type: Input }],
    tipPosition: [{ type: Input }],
    toggleMenuEleRef: [{ type: ViewChild, args: ['toggleMenu', { static: true },] }],
    dropsearchCom: [{ type: ViewChild, args: [TiColsToggleDropComponent, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,