import { Component, ElementRef, Input } from '@angular/core';
import { TiFormfieldComponent } from './TiFormfieldComponent';
/**
 * 本组件嵌在 tiFormfield 中使用，包裹着表单按钮
 */
export class TiButtonItemComponent {
    constructor(formfield, elementRef) {
        this.formfield = formfield;
        this.elementRef = elementRef;
        /**
         * 设置表单按钮是否显示
         *
         * tiButtonItem 不支持 ngIf 和 hidden，由该接口来控制表单按钮的显示与否
         */
        this.show = true;
        /**
         * @ignore
         */
        this.verticalAlignObj = {};
    }
    ngOnInit() {
        this.btnContent = this.elementRef.nativeElement;
        this.btnColspan = (this.formfield.colsNum - 1) * TiButtonItemComponent.TD_NUM_PER_ITEM + 2;
        if (this.verticalAlign) {
            this.verticalAlignObj['vertical-align'] = this.verticalAlign;
        }
        if (this.show) {
            this.formfield.addBtnItem(this);
        }
    }
    ngOnChanges(changes) {
        const showObj = changes['show'];
        if (showObj && !showObj.firstChange) {
            if (showObj.currentValue) {
                this.formfield.addBtnItem(this);
            }
            else {
                this.formfield.removeBtnItem(this);
            }
        }
    }
    ngOnDestroy() {
        this.formfield.removeBtnItem(this);
    }
}
/**
 * 每一个ti-item占4个td。第一个td用来显示“*”，第二个td用来显示label，
 * 第三个td用来显示content, 第四个td是item间距。
 */
TiButtonItemComponent.TD_NUM_PER_ITEM = 4;
TiButtonItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-button-item',
                template: "<ng-content></ng-content>"
            },] }
];
TiButtonItemComponent.ctorParameters = () => [
    { type: TiFormfieldComponent },
    { type: ElementRef }
];
TiButtonItemComponent.propDecorators = {
    show: [{ type: Input }],
    verticalAlign: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGlCdXR0b25JdGVtQ29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vQGNsb3VkL3RpbnkzL2NvbXBvbmVudHMvZm9ybWZpZWxkL1RpQnV0dG9uSXRlbUNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBTU4sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFOUQ7O0dBRUc7QUFLSCxNQUFNLE9BQU8scUJBQXFCO0lBOEI5QixZQUFvQixTQUErQixFQUFVLFVBQXNCO1FBQS9ELGNBQVMsR0FBVCxTQUFTLENBQXNCO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQXhCbkY7Ozs7V0FJRztRQUNNLFNBQUksR0FBWSxJQUFJLENBQUM7UUFPOUI7O1dBRUc7UUFDSSxxQkFBZ0IsR0FBa0MsRUFBRSxDQUFDO0lBUzBCLENBQUM7SUFFdkYsUUFBUTtRQUNKLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDaEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxHQUFHLHFCQUFxQixDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUM7UUFDM0YsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7U0FDaEU7UUFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDWCxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuQztJQUNMLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDOUIsTUFBTSxPQUFPLEdBQWlCLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU5QyxJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUU7WUFDakMsSUFBSSxPQUFPLENBQUMsWUFBWSxFQUFFO2dCQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNuQztpQkFBTTtnQkFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN0QztTQUNKO0lBQ0wsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QyxDQUFDOztBQXpERDs7O0dBR0c7QUFDcUIscUNBQWUsR0FBVyxDQUFDLENBQUM7O1lBVHZELFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixxQ0FBd0M7YUFDekM7OztZQVJRLG9CQUFvQjtZQVIzQixVQUFVOzs7bUJBNEJQLEtBQUs7NEJBTUwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50LFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgSW5wdXQsXHJcbiAgT25DaGFuZ2VzLFxyXG4gIE9uRGVzdHJveSxcclxuICBPbkluaXQsXHJcbiAgU2ltcGxlQ2hhbmdlLFxyXG4gIFNpbXBsZUNoYW5nZXNcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVGlGb3JtZmllbGRDb21wb25lbnQgfSBmcm9tICcuL1RpRm9ybWZpZWxkQ29tcG9uZW50JztcclxuXHJcbi8qKlxyXG4gKiDmnKznu4Tku7bltYzlnKggdGlGb3JtZmllbGQg5Lit5L2/55So77yM5YyF6KO5552A6KGo5Y2V5oyJ6ZKuXHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3RpLWJ1dHRvbi1pdGVtJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vZm9ybWZpZWxkLWJ0bi1pdGVtLmh0bWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUaUJ1dHRvbkl0ZW1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcclxuICAgIC8qKlxyXG4gICAgICog5q+P5LiA5LiqdGktaXRlbeWNoDTkuKp0ZOOAguesrOS4gOS4qnRk55So5p2l5pi+56S64oCcKuKAne+8jOesrOS6jOS4qnRk55So5p2l5pi+56S6bGFiZWzvvIxcclxuICAgICAqIOesrOS4ieS4qnRk55So5p2l5pi+56S6Y29udGVudCwg56ys5Zub5LiqdGTmmK9pdGVt6Ze06Led44CCXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFREX05VTV9QRVJfSVRFTTogbnVtYmVyID0gNDtcclxuICAgIC8qKlxyXG4gICAgICog6K6+572u6KGo5Y2V5oyJ6ZKu5piv5ZCm5pi+56S6XHJcbiAgICAgKlxyXG4gICAgICogdGlCdXR0b25JdGVtIOS4jeaUr+aMgSBuZ0lmIOWSjCBoaWRkZW7vvIznlLHor6XmjqXlj6PmnaXmjqfliLbooajljZXmjInpkq7nmoTmmL7npLrkuI7lkKZcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgc2hvdzogYm9vbGVhbiA9IHRydWU7XHJcbiAgICAvKipcclxuICAgICAqIOiuvue9ruihqOWNleaMiemSrueahOWeguebtOWvuem9kOaWueW8j++8jOm7mOiupOS4unRvcO+8iOS4iuS4i+W4g+WxgOihqOWNleS4jeaUr+aMgeivpeWxnuaAp++8ieOAglxyXG4gICAgICpcclxuICAgICAqIOiDveWkn+imhueblnRpRm9ybWZpZWxk5oyH5Luk5LiK55qEdmVydGljYWxBbGlnbuiuvue9rlxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSB2ZXJ0aWNhbEFsaWduOiAndG9wJyB8ICdtaWRkbGUnIHwgJ2JvdHRvbSc7XHJcbiAgICAvKipcclxuICAgICAqIEBpZ25vcmVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHZlcnRpY2FsQWxpZ25PYmo6IHsgJ3ZlcnRpY2FsLWFsaWduJz86IHN0cmluZyB9ID0ge307XHJcbiAgICAvKipcclxuICAgICAqIEBpZ25vcmVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGJ0bkNvbnRlbnQ6IE5vZGU7XHJcbiAgICAvKipcclxuICAgICAqIEBpZ25vcmVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGJ0bkNvbHNwYW46IG51bWJlcjtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZm9ybWZpZWxkOiBUaUZvcm1maWVsZENvbXBvbmVudCwgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYnRuQ29udGVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuYnRuQ29sc3BhbiA9ICh0aGlzLmZvcm1maWVsZC5jb2xzTnVtIC0gMSkgKiBUaUJ1dHRvbkl0ZW1Db21wb25lbnQuVERfTlVNX1BFUl9JVEVNICsgMjtcclxuICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbEFsaWduKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmVydGljYWxBbGlnbk9ialsndmVydGljYWwtYWxpZ24nXSA9IHRoaXMudmVydGljYWxBbGlnbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNob3cpIHtcclxuICAgICAgICAgICAgdGhpcy5mb3JtZmllbGQuYWRkQnRuSXRlbSh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHNob3dPYmo6IFNpbXBsZUNoYW5nZSA9IGNoYW5nZXNbJ3Nob3cnXTtcclxuXHJcbiAgICAgICAgaWYgKHNob3dPYmogJiYgIXNob3dPYmouZmlyc3RDaGFuZ2UpIHtcclxuICAgICAgICAgICAgaWYgKHNob3dPYmouY3VycmVudFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1maWVsZC5hZGRCdG5JdGVtKHRoaXMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtZmllbGQucmVtb3ZlQnRuSXRlbSh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmZvcm1maWVsZC5yZW1vdmVCdG5JdGVtKHRoaXMpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==