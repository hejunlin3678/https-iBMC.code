import { ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, HostListener, Input, IterableDiffers, Output, Renderer2, SecurityContext, TemplateRef, ViewChild } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Util } from '../../utils/Util';
import { TiRenderer } from '../../services/renderer/TiRenderer';
import { TiFormComponent } from '../base/TiBaseModule';
/**
 * Slider滑块组件
 *
 * 滑块组件，通过操作组件选择指示范围
 *
 * <example-url>../tiny3demo/#/slider/slider-all</example-url>
 */
export class TiSliderComponent extends TiFormComponent {
    constructor(tiRenderer, iterableDiffers, hostRef, renderer2, changeDetectorRef, domSanitizer) {
        super(hostRef, renderer2);
        this.tiRenderer = tiRenderer;
        this.iterableDiffers = iterableDiffers;
        this.hostRef = hostRef;
        this.renderer2 = renderer2;
        this.changeDetectorRef = changeDetectorRef;
        this.domSanitizer = domSanitizer;
        /**
         * 最小范围值
         */
        this.min = 0;
        /**
         * 最大范围值
         */
        this.max = 10;
        /**
         * 滑动步长，滑块每次跳变的步长（若要实现只在刻度上跳变的效果，step需严格和刻度间距一致）
         */
        this.step = 1;
        /**
         * 设置滑块的tip显示方式：取值"always"，"auto"（默认值）
         *
         * always：tip一直显示
         *
         * auto：鼠标移到滑块上出tip
         */
        this.tipMode = 'auto';
        /**
         * 滑块停止后值发生改变时触发的事件
         *
         * 3.1.0新增
         */
        this.changeStop = new EventEmitter();
        this.isDouble = false; // 判断是否是双滑块，默认是单滑块 false
        this.isTipAutoShow = true; // 判断tip提示是否是自动显示（鼠标操作才显示）,默认true
        // 实现ControlValueAccessor接口--end
        // 组件交互方法集合--start
        /**
         * @ignore
         * Tiny3中不存在下面的问题，用click和mousedown事件都可以（统一使用mousedown事件）
         * 使用mousedown替代click，用于防止拖拽过程中触发click事件导致的滑块滑动
         * 问题场景：min滑块拖动与max滑块重合后，鼠标继续向右移动，此时鼠标抬起，触发click事件，导致max发生移动
         */
        this.hostMousedownEvent = (event) => {
            // 灰化状态或点击pointer时不做处理
            if (this.disabled || this.tiRenderer.hasClass(event.target, 'ti3-slider-pointer')
                || this.tiRenderer.hasClass(event.target, 'ti3-slider-tip')) {
                return;
            }
            this.stepSliderFromClick(event);
        };
        /**
         * @description: 滑块元素的mouseover事件处理函数
         */
        this.tipMouseoverHandle = (event) => {
            if (this.disabled) {
                return;
            }
            this.show(event.target.querySelector('.ti3-slider-tip'));
        };
        /**
         * @description: 滑块元素的mouseleave事件处理函数
         */
        this.tipMouseleaveHandle = (event) => {
            if (this.disabled) {
                return;
            }
            this.hide(event.target.querySelector('.ti3-slider-tip'));
        };
        /**
         * @description: 宿主元素的mousedown事件处理函数
         */
        this.stepSliderFromClick = (event) => {
            const firstTickX = this.trackELe.getBoundingClientRect().left + this.pointerMaxEleWidth / 2;
            const oldModel = this.model;
            let pointerX = event.clientX - firstTickX;
            pointerX = TiSliderComponent.limitValue(pointerX, 0, this.getBarWidth());
            let value = this.positionToValue(pointerX); // 获取value绝对比例值，用于确定滑块移动位置
            // 确定滑动哪个滑块
            let pointer = this.pointerMaxEle;
            if (this.isDouble) {
                const valueMin = TiSliderComponent.splitValueToArray(this.model).valueMin;
                const valueMax = TiSliderComponent.splitValueToArray(this.model).valueMax;
                // 以value中间值为界，在最小值及中间值之间=》左滑块移动；否则=》右滑块移动
                const midValue = (valueMax + valueMin) / 2;
                if ((value >= this.min) && (value < midValue)) {
                    pointer = this.pointerMinEle;
                    this.isMinPointerActive = true;
                }
                else {
                    this.isMinPointerActive = false;
                }
            }
            value = this.getStepValue(value);
            this.setValue(value); // 向外部通知value值
            this.valueToPosition(value, pointer); // 跳至value对应的坐标位置（与step对应）
            if (this.model !== oldModel) {
                this.changeStop.emit(this.model);
            }
        };
        /**
         * @description 拖拽开始执行的事件
         * @param: ui 拖拽助手 {helper：表示被拖拽的助手（helper）, position: 助手（helper）的当前 CSS 位置}
         */
        this.dragStartHandle = (ui) => {
            this.dragStartModel = this.model;
            if (this.isDouble) {
                this.isMinPointerActive = !this.tiRenderer.hasClass(ui.helper, 'ti3-slider-pointer-max');
            }
        };
        /**
         * @description 根据拖拽位置更新value值并改变位置呈现
         * @param: ui 拖拽助手 {helper：表示被拖拽的助手（helper）, position: 助手（helper）的当前 CSS 位置}
         */
        this.dragHandle = (ui) => {
            // 设置value值
            const value = this.dragCommonHandle(ui);
            this.setValue(value); // 向外部通知value值
            // 设置tip提示
            if (this.isTipAutoShow) { // 拖拽过程中显示tip提示
                this.show(ui.helper.querySelector('.ti3-slider-tip'));
            }
            this.setTip(ui.helper.querySelector('.ti3-slider-tip'), value); // 设置tip提示值及位置
        };
        /**
         * @description: 鼠标弹起之后：根据拖拽位置跳至step对应的值并设置slider
         * @param: ui 拖拽助手 {helper：表示被拖拽的助手（helper）, position: 助手（helper）的当前 CSS 位置}
         */
        this.dragStopHandle = (ui) => {
            // 设置value值
            const value = this.dragCommonHandle(ui);
            if (this.isTipAutoShow) { // 拖拽停止隐藏tip提示
                this.hide(ui.helper.querySelector('.ti3-slider-tip'));
            }
            this.valueToPosition(value, ui.helper); // 跳至value对应的坐标位置
            if (this.model !== this.dragStartModel) {
                this.changeStop.emit(this.model);
            }
        };
    }
    /**
     * @description: 将value值处理成数组
     * @param: value 需要切割的数组
     */
    static splitValueToArray(value) {
        const arr = (`${value}`).split(';'); // value为number时强转为字符串
        return {
            valueMin: parseFloat(arr[0]),
            valueMax: arr[1] && parseFloat(arr[1])
        };
    }
    /**
     * @description: value值是否超限制
     * @param: value: 判断的value值
     * @param: minValue: 最大值
     * @param: maxValue: 最小值
     */
    static isLimitExceed(value, minValue, maxValue) {
        return value < minValue || value > maxValue;
    }
    /**
     * @description: 当this.scales为函数情况下，转换为ticks数组
     * @param: scaleFormat 被转换的函数
     * @param: minValue 刻度限制的最大值
     * @param: maxValue 刻度限制的最小值
     * @param: step 刻度步长
     */
    static translateScales(scaleFormat, minValue, maxValue, step) {
        const valueLen = (maxValue - minValue) / step;
        const tickArray = [];
        for (let i = 0; i <= valueLen; i++) {
            const stepNValue = step * i + minValue;
            const formatRet = scaleFormat(stepNValue, minValue, maxValue);
            if (Util.isUndefined(formatRet) || Util.isNull(formatRet)) {
                // 为undefined或null情况下，不打点不显示label
                /* tslint:disable:no-null-keyword */
                tickArray.push(null);
            }
            else {
                // 包含为""（打点不显示label）和非""情况（打点且显示label）
                tickArray.push(formatRet);
            }
        }
        return tickArray;
    }
    /**
     * @description: 在范围内限制value数值
     * @param: value 校验的value值
     * @param: min 最小值
     * @param: max 最大值
     * @return: 有效value值
     */
    static limitValue(value, min, max) {
        // fossid整改，采用一种不撞车写法，可读性差一点。
        // 小于min取min，大于max取max，其他不变。
        const res = value < min ? min :
            value > max ? max : value;
        return res;
    }
    /**
     * @description: 将样式数值转化为calc形式的css样式（设置为百分比形式，确保缩放的支持）
     * @param: percent calc百分比
     * @param: subValue calc减去值
     */
    static parseToCalcStyle(percent, subValue) {
        if (Number.isNaN(subValue) || Util.isUndefined(subValue)) {
            return `calc(${percent * 100}%)`;
        }
        return `calc(${percent * 100}% - ${subValue}px)`; // calc中运算符合2边一定要空格
    }
    onResize() {
        this.updateValuePosition(this.model);
    }
    // 组件声明周期钩子--start
    ngOnInit() {
        super.ngOnInit();
        this.initDom();
        this.initVars();
    }
    /**
     * @ignore
     */
    initDom() {
        this.trackELe = this.trackRef.nativeElement;
        this.selectionEle = this.selectionRef.nativeElement;
        this.pointerMinEle = this.pointerMinRef.nativeElement;
        this.pointerMaxEle = this.pointerMaxRef.nativeElement;
        this.tipMinEle = this.tipMinRef.nativeElement;
        this.tipMaxEle = this.tipMaxRef.nativeElement;
    }
    /**
     * @ignore
     */
    initVars() {
        this.step = Number.isNaN(parseFloat(`${this.step}`)) ? 1 : parseFloat(`${this.step}`);
        this.setMinMax();
        // ratios中最大的小数位数
        this.decimalDigit = this.getDecimalDigit();
        // 处理用戶未设置scales或者scales為function情況
        if (!this.scales || !Array.isArray(this.scales)) {
            this.setScales();
        }
        this.setTipConfig();
        // 给tip添加事件（tipMode是 'auto'的场景）
        this.addTipEvent();
        this.dragOptions = {
            axis: 'x',
            start: this.dragStartHandle,
            drag: this.dragHandle,
            stop: this.dragStopHandle
        };
    }
    ngOnChanges(changes) {
        if (changes['scales'] && !changes['scales'].firstChange && !Array.isArray(this.scales)) {
            this.setScales();
            this.updateValuePosition(this.model);
        }
        // 监听最大值最小值变化
        if ((changes['min'] && !changes['min'].firstChange) || (changes['max'] && !changes['max'].firstChange)) {
            this.setMinMax();
        }
    }
    ngAfterViewInit() {
        this.pointerMaxEleWidth = this.pointerMaxEle.offsetWidth;
        this.isVisibleInit = this.pointerMaxEleWidth !== 0;
        this.changeDetectorRef.detectChanges();
    }
    ngAfterViewChecked() {
        // 监听滑块的宽度：处理组件从隐藏到显示定位问题
        if (!this.isVisibleInit) {
            const pointerMaxWidth = this.pointerMaxEle.offsetWidth;
            if (pointerMaxWidth !== 0) {
                this.isVisibleInit = true;
                this.pointerMaxEleWidth = pointerMaxWidth;
                this.updateValuePosition(this.model);
                this.changeDetectorRef.detectChanges();
            }
        }
    }
    ngDoCheck() {
        if (!Array.isArray(this.scales)) {
            return;
        }
        if (!this.scalesDiffer) {
            this.scalesDiffer = this.iterableDiffers.find(this.scales)
                .create();
        }
        const scalesDiffer = this.scalesDiffer.diff(this.scales);
        if (scalesDiffer) {
            this.setScales();
            // 初始化的updateValuePosition在writeValue中执行（writeValue迟于docheck执行）
            if (!Util.isUndefined(this.model)) {
                this.updateValuePosition(this.model);
            }
        }
    }
    // 组件声明周期钩子--end
    // 实现ControlValueAccessor接口
    /**
     * @ignore
     */
    writeValue(value) {
        // TODO: 接口设计重新调整
        // ngModel => value: string | number; // 滑块对应的value值 exp： 单滑块: 15 OR '15' 双滑块 '15;34';
        super.writeValue(value);
        if (!Util.isNull(value) && !Util.isUndefined(value)) {
            // 1.判断是否是双滑块
            this.isDouble = !Util.isUndefined(TiSliderComponent.splitValueToArray(value).valueMax); // 根据value形式确定单滑块/双滑块
            if (Util.isUndefined(this.onModelChange)) {
                // 在reactive-form中使用，初始化赋值调用writeValue时，
                // 此时registerOnChange还未被调用，onChangeFn还未被赋值，
                // 所以要使用promise(异步)等onChangeFn被赋值后再调用
                Promise.resolve(undefined)
                    .then(() => {
                    this.writeValueHandle(value);
                });
            }
            else {
                this.writeValueHandle(value);
            }
        }
    }
    writeValueHandle(value) {
        if (this.isDouble) {
            this.show(this.pointerMinEle);
        }
        else {
            this.hide(this.pointerMinEle);
        }
        // 赋值操作 && 更新位置
        this.updateValuePosition(value);
    }
    /**
     * @description: 添加tip的事件监听
     */
    addTipEvent() {
        if (this.isTipAutoShow) {
            this.renderer2.listen(this.pointerMaxEle, 'mouseover', this.tipMouseoverHandle);
            this.renderer2.listen(this.pointerMinEle, 'mouseover', this.tipMouseoverHandle);
            this.renderer2.listen(this.pointerMaxEle, 'mouseleave', this.tipMouseleaveHandle);
            this.renderer2.listen(this.pointerMinEle, 'mouseleave', this.tipMouseleaveHandle);
        }
    }
    // 组件交互方法集合--end
    // 内部公共方法集合--start
    /**
     * @description: 拖拽公共处理
     * @param: ui 拖拽助手 {helper：表示被拖拽的助手（helper）, position: 助手（helper）的当前 CSS 位置}
     */
    dragCommonHandle(ui) {
        const pointerX = this.limitDragPosition(ui); // 限制指针在合理的位置范围内
        const value = this.positionToStepValue(pointerX); // 获取当前位置对应的value值
        return value;
    }
    /**
     * @description: 限制滑块移动位置并设置对应的选择区域宽度
     * @param: pointerX 鼠标点击位置（x方向）
     */
    limitDragPosition(ui) {
        let pointerX = ui.position.left; // 当前滑块中心距离tick第一个坐标位置
        const barWidth = this.getBarWidth();
        let pointerWidthHalf = this.pointerMaxEleWidth / 2;
        let pointerMinLeft;
        let pointerMaxLeft;
        if (this.isDouble) {
            if (!this.isMinPointerActive) { // max对应滑块情况的处理
                pointerMinLeft = parseFloat(getComputedStyle(this.pointerMinEle).left);
                pointerX = TiSliderComponent.limitValue(pointerX, pointerMinLeft, barWidth); // 限制滑块在最小和右边界之间
                pointerMaxLeft = pointerX;
            }
            else {
                pointerMaxLeft = parseFloat(getComputedStyle(this.pointerMaxEle).left);
                pointerX = TiSliderComponent.limitValue(pointerX, 0, pointerMaxLeft); // 限制滑块在左边界和最大之间
                pointerMinLeft = pointerX;
            }
            const styles = {
                width: `${pointerMaxLeft - pointerMinLeft}px`,
                left: `${pointerMinLeft + pointerWidthHalf}px`
            };
            this.tiRenderer.setStyles(this.selectionEle, styles);
        }
        else {
            pointerX = TiSliderComponent.limitValue(pointerX, 0, barWidth);
            this.renderer2.setStyle(this.selectionEle, 'width', `${pointerX + pointerWidthHalf}px`);
        }
        ui.position.left = pointerX; // 限制滑块的位置显示
        return pointerX;
    }
    /**
     * @description: 根据滑块位置获取value值(和step对应) (拖拽公共函数中用)
     * @param: pointerX 鼠标点击位置（x方向）
     */
    positionToStepValue(pointerX) {
        const value = this.positionToValue(pointerX); // 获取指针对应的value绝对比例值(和step无关)
        return this.getStepValue(value); // 转化value为与step对应的值;
    }
    /**
     * @description: 获取位置对应的value值
     * @param: pointerX 鼠标点击位置（x方向）
     */
    positionToValue(pointerX) {
        const barWidth = this.getBarWidth();
        const percent = pointerX / barWidth;
        if (!Util.isUndefined(this.ratios)) {
            return this.unequalPositionToValue(pointerX, barWidth, percent);
        }
        return this.min + percent * (this.max - this.min);
    }
    /**
     * @description: 设置组件的model值，用于向外通知
     * @param: value 当前指针的值
     */
    setValue(value) {
        if (this.isDouble) {
            const valueMin = TiSliderComponent.splitValueToArray(this.model).valueMin;
            const valueMax = TiSliderComponent.splitValueToArray(this.model).valueMax;
            if (!this.isMinPointerActive && value !== valueMax) {
                this.model = `${valueMin};${value}`;
            }
            else if (this.isMinPointerActive && value !== valueMin) {
                this.model = `${value};${valueMax}`;
            }
        }
        else {
            if (value !== this.model) {
                this.model = value;
            }
        }
    }
    /**
     * @description: 获取对应的step值(根据step修正value值)
     * @param: value 当前点击的绝对值
     */
    getStepValue(value) {
        const min = this.min;
        const step = this.step;
        let stepValue;
        const stepN = Math.round((value - min) / step); // value值变化几个步长
        if (step.toString()
            .indexOf('.') !== -1) {
            const n = step.toString()
                .split('.').length;
            stepValue = parseFloat((min + stepN * step).toFixed(n));
        }
        else {
            stepValue = min + stepN * step;
        }
        return TiSliderComponent.limitValue(stepValue, min, this.max);
    }
    /**
     * @description: 在不等分条件下获取位置对应的value值
     * @param: pointerX 鼠标点击位置（x方向）
     * @param: barWidth 指针宽度
     * @param: percent pointerX占滑动轴百分比
     */
    unequalPositionToValue(pointerX, barWidth, percent) {
        let limitWidth = 0; // 每一段的宽度
        let selectLength = 0; // 已被选中区域段的宽度
        let ratiosWidth = 0; // 已被选中区域段长度和占总长的比例
        const c = this.decimalDigit;
        const ticksLen = this.ticksArr.length;
        for (let i = 0; i < ticksLen - 1; i++) {
            limitWidth = barWidth * this.ratios[i];
            if (i === 0) {
                selectLength = 0;
                ratiosWidth = 0;
            }
            else {
                ratiosWidth = Number((ratiosWidth + this.ratios[i - 1]).toFixed(c));
                selectLength = barWidth * ratiosWidth;
            }
            const pointerWidth = pointerX - selectLength;
            if (percent <= Number((ratiosWidth + this.ratios[i]).toFixed(c))
                && percent >= ratiosWidth) {
                return this.ticksArr[i] + (pointerWidth / limitWidth) * (this.ticksArr[i + 1] - this.ticksArr[i]);
            }
        }
    }
    /**
     * @description: 当前组件写入新值 || min || max || scales发生变化 时更新value对应的位置
     * @param: newValue 需要处理的value的值
     */
    updateValuePosition(newValue) {
        let valueTmp;
        if (this.isDouble) {
            valueTmp = this.restrictDoubleValue(newValue);
            const valueMax = TiSliderComponent.splitValueToArray(valueTmp).valueMax;
            const valueMin = TiSliderComponent.splitValueToArray(valueTmp).valueMin;
            // 当设置value均为最大值情况下，设置最小滑块层级，确保滑块可被拖动
            // 最小值的情况左右滑块zIndex相等，但是右滑块DOM在左滑块之后，因此根据zIndex规则，右滑块可以覆盖左滑块
            if ((valueMin === valueMax) && (valueMin === this.max)) {
                this.isMinPointerActive = true;
            }
            // 设置滑块的位置
            this.valueToPosition(valueMin, this.pointerMinEle);
            this.valueToPosition(valueMax, this.pointerMaxEle);
        }
        else {
            valueTmp = this.restrictSingleValue(newValue);
            this.valueToPosition(valueTmp, this.pointerMaxEle);
        }
        if (newValue !== valueTmp) {
            this.model = valueTmp;
        }
    }
    /**
     * @description: 限定双滑块value的值
     * @param: value 需要处理的value的值
     */
    restrictDoubleValue(value) {
        const valueMin = TiSliderComponent.splitValueToArray(value).valueMin; // 双滑块的小值
        const valueMax = TiSliderComponent.splitValueToArray(value).valueMax; // 双滑块的大值
        // 非法情况：非数字，超过限制，value大小顺序不正确情况
        const isInvalidValueMin = isNaN(valueMin) ||
            TiSliderComponent.isLimitExceed(valueMin, this.min, this.max) || valueMin > valueMax;
        // 非法情况：非数字，超过限制，value大小顺序不正确情况
        const isInvalidValueMax = isNaN(valueMax) ||
            TiSliderComponent.isLimitExceed(valueMax, this.min, this.max) || valueMin > valueMax;
        return `${isInvalidValueMin ? this.min : valueMin};${isInvalidValueMax ? this.max : valueMax}`;
    }
    /**
     * @description: 限定单滑块value的值
     * @param: value 需要处理的value的值
     */
    restrictSingleValue(value) {
        if (isNaN(parseFloat(value)) || value < this.min) {
            // value不是数字或者小于最小值point定位到最小值
            return this.min;
        }
        if (value > this.max) {
            // value大于最大值point定位到最大值
            return this.max;
        }
        return value;
    }
    /**
     * @description: 处理tip
     */
    setTipConfig() {
        const defaultTipShow = 'auto';
        const defaultTipFormatter = (value) => {
            return value;
        };
        this.tipMode = Util.isUndefined(this.tipMode) ? defaultTipShow : this.tipMode;
        this.tipFormatterFn = Util.isUndefined(this.tipFormatterFn) ? defaultTipFormatter : this.tipFormatterFn;
        this.isTipAutoShow = (this.tipMode !== 'always');
        if (this.isTipAutoShow) {
            this.hide(this.tipMaxEle);
            this.hide(this.tipMinEle);
        }
        else {
            this.show(this.tipMaxEle);
            this.show(this.tipMinEle);
        }
    }
    /**
     * @description: 处理限制
     */
    setMinMax() {
        const defaultMin = 0;
        const defaultMax = 10;
        const min = parseFloat(`${this.min}`);
        const max = parseFloat(`${this.max}`);
        this.min = (isNaN(min) || min >= max) ? defaultMin : min;
        this.max = (isNaN(max) || min >= max) ? defaultMax : max;
    }
    /**
     * @description: 处理刻度
     */
    setScales() {
        const step = this.step;
        const min = this.min;
        const max = this.max;
        let ticks = [];
        if (typeof this.scales === 'function') {
            this.ticks = TiSliderComponent.translateScales(this.scales, min, max, step);
        }
        else if (Array.isArray(this.scales)) {
            // 为Array情况下，直接使用数值
            this.ticks = this.scales.concat();
        }
        else {
            // 未传scale(包含非法)的情况下，只显示最小和最大值
            const ticksLen = (max - min) / step;
            ticks.push(min);
            for (let i = 0; i < ticksLen - 1; i++) {
                // 除最小最大值外，其余只打点不显示label
                ticks.push('');
            }
            ticks.push(max);
            this.ticks = ticks;
        }
        if (!Util.isUndefined(this.ratios)) {
            let ratiosSum = 0; // 将ratios中每一项与之前的求和
            const sumArray = []; //  由ratiosSum组成的数组
            const ratiosLen = this.ratios.length;
            for (let i = 0; i < ratiosLen; i++) {
                ratiosSum = Number((ratiosSum + Number(this.ratios[i])).toFixed(this.decimalDigit));
                sumArray.push(ratiosSum);
            }
            ticks = this.getTicks(sumArray, this.decimalDigit);
            this.ticks = ticks;
        }
    }
    /**
     * @description: 非均匀情况下确定打点的位置
     * @param: arr 由ratiosSum组成的数组
     * @param: num ratios中最大的小数位数
     */
    getTicks(arr, num) {
        const minScale = Number(Math.pow(0.1, num)
            .toFixed(num)); //  判断是否打点的基数
        let k = 1;
        let p = 0;
        const ticks = [this.ticks[0]];
        const length = parseInt(`${1 / minScale}`, 10);
        for (let i = 0; i < length; i++) {
            p = Number((p + minScale).toFixed(num));
            if (arr.indexOf(p) === -1) {
                // 判断每次相加基数后是否在数组中，不在不打点不显示label
                // tslint:disable-next-line:no-null-keyword
                ticks.push(null);
            }
            else {
                // 否则打点显示label
                ticks.push(this.ticks[k]);
                k++;
            }
        }
        return ticks;
    }
    /**
     * @description: 显示隐藏的元素
     * @param: ele: 要显示的DOM对象
     */
    show(ele) {
        // 注：此处未使用ng-show方式控制滑块显示是因为有延迟，造成后续方法获取pointer宽度为0，显示错乱
        this.renderer2.setStyle(ele, 'display', 'block');
    }
    /**
     * @description: 隐藏显示的元素
     * @param: ele: 要隐藏的DOM对象
     */
    hide(ele) {
        // 注：此处未使用ng-show方式控制滑块显示是因为有延迟，造成后续方法获取pointer宽度为0，显示错乱
        this.renderer2.setStyle(ele, 'display', 'none');
    }
    /**
     * @ignore
     * @description: 获取ticks的最大显示宽度，一行显示不下情况下，换行显示
     * @param: index 刻度下标
     */
    calcTickMaxWidth(index) {
        const ticksLen = this.ticks.length;
        const spacePercent = 1 / (ticksLen - 1); // 两个刻度点间隔宽度百分百（小数）
        if (index === 0 || index === (ticksLen - 1)) {
            // 第一个和最后一个刻度
            return TiSliderComponent.parseToCalcStyle(spacePercent, this.pointerMaxEleWidth / 2);
        }
        return TiSliderComponent.parseToCalcStyle(spacePercent);
    }
    /**
     * @ignore
     * @description: 获取 ticks 的left位置
     * @param: index 刻度下标
     */
    calcTickLeftPosition(index) {
        return `${index / (this.ticks.length - 1) * 100}%`;
    }
    /**
     * @ignore
     * @description: 确定滑动轴打点是否为选中点，根据函数返回值设置选中样式 (是否是selection区域的点)
     * @param: index 刻度下标
     */
    isSelectTick(index) {
        const ticksLen = this.ticks.length;
        // 双滑块情况下,位于最大最小值之间为选中状态
        if (this.isDouble) {
            const value = this.model.split(';');
            const isLargeThanValMin = index / ticksLen >= (parseFloat(value[0]) - this.min) / (this.max - this.min);
            const isSmallThanValMax = index / ticksLen <= (parseFloat(value[1]) - this.min) / (this.max - this.min);
            return isLargeThanValMin && isSmallThanValMax;
        }
        // 单滑块情况下,小于选中值为选中状态
        return index / ticksLen <= (parseFloat(this.model) - this.min);
    }
    /**
     * @description:  获取滑动轴的宽度(涉及到屏幕缩放，所以需要实时获取)
     */
    getBarWidth() {
        return this.trackELe.getBoundingClientRect().width - this.pointerMaxEleWidth;
    }
    /**
     * @description: 获取ratios中最大的小数位数
     */
    getDecimalDigit() {
        const decimalArr = [];
        if (Array.isArray(this.ratios)) {
            this.ratios.forEach((item) => {
                const decimal = item.toString()
                    .split('.')[1];
                if (decimal) {
                    decimalArr.push(decimal.length);
                }
            });
        }
        return Math.max.apply(null, decimalArr);
    }
    /**
     * @description: 获取当前value所在的区域以及当前value对应的长度占总长的百分比(小数)
     * @param: value 指针对应的value值
     * @param: paragraph 当前打点的段数
     */
    getValuePercent(value, paragraph) {
        let ratiosSum = 0; // 当前打点的段数下ratios的总和
        for (let i = 0; i < paragraph; i++) {
            ratiosSum = Number((ratiosSum + this.ratios[i]).toFixed(this.decimalDigit));
        }
        return ratiosSum + (value - this.ticksArr[paragraph]) / (this.ticksArr[paragraph + 1]
            - this.ticksArr[paragraph]) * this.ratios[paragraph];
    }
    /**
     * @description: 设置pointerDOM位置
     * @param: value 指针对应的value值
     * @param: pointer 被设置的DOM对象
     */
    setPointerPos(value, pointer) {
        let valuePercent;
        if (!Util.isUndefined(this.ratios)) {
            if (Util.isUndefined(this.ticks)) {
                return;
            }
            this.ticksArr = [];
            this.ticks.forEach((tick) => {
                if (!Util.isNull(tick)) {
                    this.ticksArr.push(tick);
                }
            });
            const ticksArrLen = this.ticksArr.length;
            for (let i = 0; i < ticksArrLen - 1; i++) {
                if (value >= this.ticksArr[i] && value <= this.ticksArr[i + 1]) {
                    valuePercent = this.getValuePercent(value, i);
                }
            }
        }
        else {
            valuePercent = (value - this.min) / (this.max - this.min);
        }
        // 计算value对应的百分比位置,并以tick中心点居中显示
        const pointerLeft = TiSliderComponent.parseToCalcStyle(valuePercent);
        this.renderer2.setStyle(pointer, 'left', pointerLeft);
    }
    /**
     * @description: 改变某一指针value值对应的指示位置
     * @param: value 指针对应的value值
     * @param: pointer 被设置的DOM对象
     */
    valueToPosition(value, pointer) {
        this.setPointerPos(value, pointer); // 设置pointer位置
        let styles; // 滑动轴有效区域背景 样式对象
        // 修复SSR报错：ERROR { Error: Uncaught (in promise): TypeError: this.pointerMaxEle.getBoundingClientRect is not a function
        if (typeof this.pointerMaxEle.getBoundingClientRect !== 'function') {
            return;
        }
        // 设置滑动轴有效区域背景
        const pointerMaxLeft = this.pointerMaxEle.getBoundingClientRect().left;
        const pointerMinLeft = this.pointerMinEle.getBoundingClientRect().left;
        const barWidth = this.getBarWidth();
        const barLeft = this.trackELe.getBoundingClientRect().left;
        const pointerWidthHalf = this.pointerMaxEleWidth / 2;
        if (this.isDouble) {
            styles = {
                width: `${(pointerMaxLeft - pointerMinLeft) * 100 / barWidth}%`,
                left: `${((pointerMinLeft - barLeft + pointerWidthHalf) * 100 / barWidth)}%`
            };
        }
        else {
            styles = {
                width: `${((pointerMaxLeft - barLeft + pointerWidthHalf) * 100 / barWidth)}%`,
                left: 0
            };
        }
        this.tiRenderer.setStyles(this.selectionEle, styles);
        this.setTip(pointer.querySelector('.ti3-slider-tip'), value);
    }
    /**
     * @description:设置Tip提示内容及位置
     * @param: curTipEle 要设置tip的元素
     * @param: value 设置tip内容对应的value值
     */
    setTip(curTipEle, value) {
        // 设置tip内容
        const tipContent = this.tipFormatterFn(value);
        curTipEle.innerHTML = this.domSanitizer.sanitize(SecurityContext.HTML, tipContent);
        // 设置当前tip位置
        const tipDisplay = getComputedStyle(curTipEle).display;
        this.show(curTipEle); // 先把tip显示出来 才能获取宽度
        const tipContentWidth = curTipEle.getBoundingClientRect().width;
        const styles = {
            left: `${-(tipContentWidth - this.pointerMaxEleWidth) / 2 - 1}px`,
            display: tipDisplay // 设置回原来的display
        };
        this.tiRenderer.setStyles(curTipEle, styles);
        // tip重合情况处理  (双滑块并且tip是一直显示出来那种场景)
        if (this.isDouble && !this.isTipAutoShow) {
            /**
             * @description: 渲染当前的tip样式 （移除一个class并且添加一个class）
             * @param: tipEle 当前tipDOM
             * @param: removeClass 要移除的class名字
             * @param: addClass 要添加的class名字
             */
            const renderTipStyle = (tipEle, removeClass, addClass) => {
                this.renderer2.removeClass(tipEle, removeClass);
                this.renderer2.addClass(tipEle, addClass);
            };
            // 重置tip样式，防止之前样式设置造成的影响  ti3-slider-tip-top
            renderTipStyle(this.tipMaxEle, 'ti3-slider-tip-bottom', 'ti3-slider-tip-top');
            renderTipStyle(this.tipMinEle, 'ti3-slider-tip-bottom', 'ti3-slider-tip-top');
            this.show(this.tipMaxEle);
            this.show(this.tipMinEle);
            // 最大最小值重合情况下，只显示当前tip
            const selectionWidth = this.selectionEle.getBoundingClientRect().width;
            if (selectionWidth === 0) {
                if (this.tiRenderer.hasClass(curTipEle, 'ti3-slider-tip-max')) {
                    // 当前tip是最大值的 隐藏最小值tip
                    this.hide(this.tipMinEle);
                }
                else {
                    // 当前tip是最小值的 隐藏最大值tip
                    this.hide(this.tipMaxEle);
                }
                return;
            }
            // tip重合情况下，当前tip向下显示
            const tipMaxWidth = this.tipMaxEle.getBoundingClientRect().width;
            const tipMinWidth = this.tipMinEle.getBoundingClientRect().width;
            if ((tipMaxWidth + tipMinWidth) / 2 >= selectionWidth) {
                renderTipStyle(curTipEle, 'ti3-slider-tip-top', 'ti3-slider-tip-bottom');
            }
        }
    }
}
TiSliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-slider',
                template: "<div #trackEle class=\"ti3-slider-track-container\">\r\n  <div class=\"ti3-slider-track-content\">\r\n    <div #selection class=\"ti3-slider-bar-selection\"></div>\r\n    <div #pointerMin [id]=\"appendId('min')\" [tiDraggable]=\"dragOptions\"\r\n         [style.zIndex]=\"isMinPointerActive ? 2 : 1\" [tiDragDisabled]=\"disabled\"\r\n         class=\"ti3-slider-pointer ti3-slider-pointer-min ti3-icon ti3-icon-slider-point\">\r\n        <div #tipMin class=\"ti3-slider-tip ti3-slider-tip-top ti3-slider-tip-min\"></div>\r\n    </div>\r\n    <div #pointerMax [id]=\"appendId('max')\" [tiDraggable]=\"dragOptions\"\r\n         [style.zIndex]=\"!isMinPointerActive ? 2 : 1\" [tiDragDisabled]=\"disabled\"\r\n         class=\"ti3-slider-pointer ti3-slider-pointer-max ti3-icon ti3-icon-slider-point\">\r\n        <div #tipMax class=\"ti3-slider-tip ti3-slider-tip-top ti3-slider-tip-max\"></div>\r\n    </div>\r\n  </div>\r\n  <ul class=\"ti3-slider-ticks\" [id]=\"appendId('list')\">\r\n    <li *ngFor=\"let tick of ticks; index as i\" class=\"ti3-slider-tick\"\r\n        [ngStyle]=\"{'left': calcTickLeftPosition(i), 'max-width': calcTickMaxWidth(i)}\">\r\n        <ng-container *ngIf=\"tick !== null\">\r\n          <div class=\"ti3-slider-tick-dot\" [ngClass]=\"{'ti3-slider-selection-tick-dot': isSelectTick(i)}\"></div>\r\n          <section *ngIf=\"labelTemplate else defaultTemplate\" class=\"ti3-slider-tick-value\">\r\n            <ng-container *ngTemplateOutlet=\"labelTemplate; context: {$implicit: tick, index: i}\">\r\n            </ng-container>\r\n          </section>\r\n\r\n          <ng-template #defaultTemplate>\r\n            <span *ngIf=\"tick!== ''\" class=\"ti3-slider-tick-value\" [innerHTML]=\"tick\"></span>\r\n          </ng-template>\r\n        </ng-container>\r\n    </li>\r\n  </ul>\r\n</div>\r\n",
                host: {
                    '[class.ti3-slider-container]': 'true',
                    '[class.ti3-slider-disable]': 'disabled',
                    '(mousedown)': 'hostMousedownEvent($event)'
                },
                providers: [TiFormComponent.getValueAccessor(TiSliderComponent)],
                styles: ["::ng-deep :root{--ti-slider-bar-selection-height:16px;--ti-slider-border-radius:var(--ti-common-border-radius-normal);--ti-slider-pointer-height:28px;--ti-slider-pointer-width:20px;--ti-slider-tick-margin-left:calc(var(--ti-slider-pointer-width)/2);--ti-slider-tick-top:8px;--ti-slider-tip-triangle-height:6px;--ti-slider-tip-triangle-width:10px;--ti-slider-tip-vertical-space:calc(var(--ti-slider-tip-triangle-height) + 5px);--ti-slider-track-height:8px}:host.ti3-slider-container{cursor:pointer;display:block;margin:36px 0;*zoom:1}:host.ti3-slider-container:after{clear:both;content:\"\";display:table}:host.ti3-slider-container:before{content:\"\";display:table}:host.ti3-slider-container .ti3-slider-track-container{background-color:var(--ti-slider-track-bg-color);border-radius:var(--ti-slider-border-radius);height:var(--ti-slider-track-height);position:relative;width:100%}:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content{height:var(--ti-slider-track-height);position:relative;width:calc(100% - 20px)}:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-bar-selection{background-color:var(--ti-slider-selection-bg-color);border-radius:var(--ti-slider-border-radius) 0 0 var(--ti-slider-border-radius);height:var(--ti-slider-bar-selection-height);position:absolute;top:calc(-1*var(--ti-common-space-base));z-index:1}:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-pointer-max,:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-pointer-min{-ms-box-sizing:border-box;background-color:var(--ti-common-color-bg-white-normal);border-radius:calc(var(--ti-slider-border-radius)*5);box-sizing:border-box;height:var(--ti-slider-pointer-height);line-height:calc(var(--ti-slider-pointer-height) - 2px);position:absolute;top:calc(-1*(var(--ti-slider-pointer-height) - var(--ti-slider-track-height))/2);width:20px;z-index:1}:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-pointer-max.ti3-icon-slider-point:hover,:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-pointer-min.ti3-icon-slider-point:hover{border-color:var(--ti-slider-pointer-color-hover);color:var(--ti-slider-pointer-color-hover)}:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-pointer-max.ti3-icon-slider-point,:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-pointer-min.ti3-icon-slider-point{background:var(--ti-slider-pointer-bg-color);border:1px solid var(--ti-slider-pointer-color);border-radius:calc(var(--ti-slider-border-radius)*5);box-shadow:var(--ti-slider-pointer-bs);color:var(--ti-slider-pointer-color);position:absolute;text-align:center}:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-pointer-max .ti3-slider-tip,:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-pointer-min .ti3-slider-tip{background-color:var(--ti-slider-tip-bg-color);border-radius:var(--ti-common-border-radius-1);box-shadow:var(--ti-slider-tip-bs);color:var(--ti-slider-tip-color);cursor:default;font-family:var(--ti-default-font-family);font-size:12px;line-height:var(--ti-common-line-height-number);padding:12px 16px;position:absolute;white-space:pre;word-wrap:break-word}:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-pointer-max .ti3-slider-tip.ti3-slider-tip-top,:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-pointer-min .ti3-slider-tip.ti3-slider-tip-top{bottom:calc(100% + var(--ti-slider-tip-vertical-space))}:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-pointer-max .ti3-slider-tip.ti3-slider-tip-top:before,:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-pointer-min .ti3-slider-tip.ti3-slider-tip-top:before{border-left:calc(var(--ti-slider-tip-triangle-width)/2) solid transparent;border-right:calc(var(--ti-slider-tip-triangle-width)/2) solid transparent;border-top:var(--ti-slider-tip-triangle-height) solid var(--ti-slider-tip-bg-color);content:\" \";height:0;left:50%;margin-left:calc(-1*var(--ti-slider-tip-triangle-width)/2);pointer-events:none;position:absolute;top:100%;width:0;z-index:3}:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-pointer-max .ti3-slider-tip.ti3-slider-tip-bottom,:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-pointer-min .ti3-slider-tip.ti3-slider-tip-bottom{top:calc(100% + var(--ti-slider-tip-vertical-space))}:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-pointer-max .ti3-slider-tip.ti3-slider-tip-bottom:before,:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-pointer-min .ti3-slider-tip.ti3-slider-tip-bottom:before{border-bottom:var(--ti-slider-tip-triangle-height) solid var(--ti-slider-tip-bg-color);border-left:calc(var(--ti-slider-tip-triangle-width)/2) solid transparent;border-right:calc(var(--ti-slider-tip-triangle-width)/2) solid transparent;bottom:100%;content:\" \";height:0;left:50%;margin-left:calc(-1*var(--ti-slider-tip-triangle-width)/2);pointer-events:none;position:absolute;width:0;z-index:3}:host.ti3-slider-container .ti3-slider-track-container .ti3-slider-track-content .ti3-slider-pointer-min{display:none}:host.ti3-slider-container .ti3-slider-ticks{position:relative;width:calc(100% - var(--ti-slider-pointer-width))}:host.ti3-slider-container .ti3-slider-ticks .ti3-slider-tick{height:var(--ti-slider-track-height);margin-left:var(--ti-slider-tick-margin-left);position:absolute;top:calc(-1*var(--ti-slider-tick-top))}:host.ti3-slider-container .ti3-slider-ticks .ti3-slider-tick .ti3-slider-tick-dot{background-color:var(--ti-common-color-bg-white-normal);height:var(--ti-slider-track-height);position:relative;width:2px}:host.ti3-slider-container .ti3-slider-ticks .ti3-slider-tick .ti3-slider-tick-dot.ti3-slider-selection-tick-dot{background-color:var(--ti-slider-tick-selection-color)}:host.ti3-slider-container .ti3-slider-ticks .ti3-slider-tick:first-child .ti3-slider-tick-dot,:host.ti3-slider-container .ti3-slider-ticks .ti3-slider-tick:last-child .ti3-slider-tick-dot{width:0}:host.ti3-slider-container .ti3-slider-ticks .ti3-slider-tick:first-child .ti3-slider-tick-value{left:calc(-1*var(--ti-slider-tick-margin-left))}:host.ti3-slider-container .ti3-slider-ticks .ti3-slider-tick:last-child .ti3-slider-tick-value{left:calc(-100% + var(--ti-slider-tick-margin-left));white-space:nowrap}:host.ti3-slider-container .ti3-slider-ticks .ti3-slider-tick .ti3-slider-tick-value{color:var(--ti-slider-tick-color);left:-50%;position:relative;top:var(--ti-slider-tick-top)}:host.ti3-slider-container.ti3-slider-disable.ti3-slider-container{cursor:not-allowed}:host.ti3-slider-container.ti3-slider-disable.ti3-slider-container .ti3-slider-track-container{background-color:var(--ti-slider-pointer-bg-disable)}:host.ti3-slider-container.ti3-slider-disable.ti3-slider-container .ti3-slider-track-container .ti3-slider-bar-selection{background-color:var(--ti-slider-color-disabled)}:host.ti3-slider-container.ti3-slider-disable.ti3-slider-container .ti3-slider-track-container .ti3-slider-pointer-max.ti3-icon-slider-point,:host.ti3-slider-container.ti3-slider-disable.ti3-slider-container .ti3-slider-track-container .ti3-slider-pointer-min.ti3-icon-slider-point{background:var(--ti-slider-pointer-bg-disable);border-color:var(--ti-slider-pointer-border-disable);box-shadow:none;color:var(--ti-slider-color-disabled)}"]
            },] }
];
TiSliderComponent.ctorParameters = () => [
    { type: TiRenderer },
    { type: IterableDiffers },
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: DomSanitizer }
];
TiSliderComponent.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    step: [{ type: Input }],
    scales: [{ type: Input }],
    tipMode: [{ type: Input }],
    tipFormatterFn: [{ type: Input }],
    ratios: [{ type: Input }],
    changeStop: [{ type: Output }],
    labelTemplate: [{ type: ContentChild, args: [TemplateRef, { static: true },] }],
    trackRef: [{ type: ViewChild, args: ['trackEle', { static: true },] }],
    selectionRef: [{ type: ViewChild, args: ['selection', { static: true },] }],
    pointerMinRef: [{ type: ViewChild, args: ['pointerMin', { static: true },] }],
    pointerMaxRef: [{ type: ViewChild, args: ['pointerMax', { static: true },] }],
    tipMinRef: [{ type: ViewChild, args: ['tipMin', { static: true },] }],
    tipMaxRef: [{ type: ViewChild, args: ['tipMax', { static: true },] }],
    onResize: [{ type: HostListener, args: ['window:resize',] }]
};
//# sourceMappingURL=data:application/json;base64,