import { Component, ElementRef, Input, ViewChild } from '@angular/core';
/**
 * @ignore
 */
export class TiProgresspieComponent {
    constructor(hostEle) {
        this.hostEle = hostEle;
        this.defaultConfig = {
            value: 0,
            maxValue: 100,
            color: '#3dcca6',
            lineWidth: 2
        };
        this.value = this.defaultConfig.value;
        this.maxValue = this.defaultConfig.maxValue;
        this.nativeElement = this.hostEle.nativeElement;
    }
    ngOnChanges(changes) {
        // value和maxValue的动态修改均需要重绘进度呈现
        if ((changes.value && !changes.value.isFirstChange()) ||
            (changes.maxValue && !changes.maxValue.isFirstChange())) {
            this.draw();
        }
    }
    ngAfterViewInit() {
        this.canvasElement = this.canvasEle.nativeElement;
        // 修复SSR错误：ERROR ReferenceError: getComputedStyle is not defined
        if (typeof getComputedStyle === 'undefined') {
            return;
        }
        this.canvasElement.width = parseFloat(getComputedStyle(this.nativeElement).width);
        this.canvasElement.height = parseFloat(getComputedStyle(this.nativeElement).height);
        this.draw();
    }
    draw() {
        this.calcPercent();
        this.drawProgressPie();
    }
    // 计算百分比，外部需要保证maxVlue和value均为数字类型
    calcPercent() {
        // 计算percent值
        if (this.maxValue === 0) {
            this.percent = 0;
            return;
        }
        let percent = this.value / this.maxValue;
        if (isNaN(percent)) {
            this.percent = 0;
            return;
        }
        if (percent > 1) {
            percent = 1;
        }
        if (percent < 0) {
            percent = 0;
        }
        this.percent = percent;
    }
    drawProgressPie() {
        const canvas = this.canvasElement;
        const ctx = canvas.getContext('2d');
        // 清除先前画布内容
        const width = canvas.width;
        const height = canvas.height;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        // 圆半径及起始点计算
        const d = Math.min(width, height);
        const cx = width / 2;
        const cy = height / 2;
        const lineWidth = this.defaultConfig.lineWidth;
        const r = d / 2 - lineWidth;
        const startPoint = -Math.PI / 2;
        // 笔触样式设置
        const color = this.defaultConfig.color;
        ctx.fillStyle = color;
        ctx.strokeStyle = color;
        ctx.lineWidth = lineWidth;
        // 画外圆
        ctx.beginPath();
        ctx.arc(cx, cy, r, startPoint, startPoint + Math.PI * 2);
        ctx.stroke();
        // 画扇形
        const endPoint = startPoint + Math.PI * this.percent * 2;
        ctx.beginPath();
        ctx.moveTo(cx, cy); // 移动至圆心
        ctx.arc(cx, cy, r, startPoint, endPoint); // 从外边上的点画曲线
        ctx.lineTo(cx, cy); // 从圆心画直线到计算好的圆外上的点
        ctx.fill();
        if (this.percent === 0) { // 为0的情况下，绘制圆心值边缘竖线
            ctx.stroke();
        }
        ctx.closePath();
    }
}
TiProgresspieComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-progresspie',
                template: '<canvas #canvas></canvas>'
            },] }
];
TiProgresspieComponent.ctorParameters = () => [
    { type: ElementRef }
];
TiProgresspieComponent.propDecorators = {
    value: [{ type: Input }],
    maxValue: [{ type: Input }],
    canvasEle: [{ type: ViewChild, args: ['canvas', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGlQcm9ncmVzc3BpZUNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL0BjbG91ZC90aW55My9jb21wb25lbnRzL3Byb2dyZXNzcGllL1RpUHJvZ3Jlc3NwaWVDb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBNEIsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pIOztHQUVHO0FBTUgsTUFBTSxPQUFPLHNCQUFzQjtJQWEvQixZQUFvQixPQUFtQjtRQUFuQixZQUFPLEdBQVAsT0FBTyxDQUFZO1FBWi9CLGtCQUFhLEdBQVE7WUFDekIsS0FBSyxFQUFFLENBQUM7WUFDUixRQUFRLEVBQUUsR0FBRztZQUNiLEtBQUssRUFBRSxTQUFTO1lBQ2hCLFNBQVMsRUFBRSxDQUFDO1NBQ2YsQ0FBQztRQUNPLFVBQUssR0FBVyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUN6QyxhQUFRLEdBQVcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFNcEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztJQUNwRCxDQUFDO0lBQ0QsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLCtCQUErQjtRQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDakQsQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxFQUFFO1lBQ3pELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNmO0lBQ0wsQ0FBQztJQUNELGVBQWU7UUFDWCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO1FBQ2xE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QVEsR0FBVyxVQUFVLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNqRSxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRO1FBQzVCLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWTtRQUN0RCxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLG1CQUFtQjtRQUN2QyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDWCxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssQ0FBQyxFQUFFLEVBQUUsbUJBQW1CO1lBQ3pDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNoQjtRQUNELEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNwQixDQUFDOzs7WUF6R0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLFFBQVEsRUFBRSwyQkFBMkI7YUFDeEM7OztZQVBrQyxVQUFVOzs7b0JBZ0J4QyxLQUFLO3VCQUNMLEtBQUs7d0JBRUwsU0FBUyxTQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG4vKipcclxuICogQGlnbm9yZVxyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3RpLXByb2dyZXNzcGllJyxcclxuICAgIHRlbXBsYXRlOiAnPGNhbnZhcyAjY2FudmFzPjwvY2FudmFzPidcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBUaVByb2dyZXNzcGllQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0IHtcclxuICAgIHByaXZhdGUgZGVmYXVsdENvbmZpZzogYW55ID0ge1xyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIG1heFZhbHVlOiAxMDAsXHJcbiAgICAgICAgY29sb3I6ICcjM2RjY2E2JyxcclxuICAgICAgICBsaW5lV2lkdGg6IDJcclxuICAgIH07XHJcbiAgICBASW5wdXQoKSB2YWx1ZTogbnVtYmVyID0gdGhpcy5kZWZhdWx0Q29uZmlnLnZhbHVlO1xyXG4gICAgQElucHV0KCkgbWF4VmFsdWU6IG51bWJlciA9IHRoaXMuZGVmYXVsdENvbmZpZy5tYXhWYWx1ZTtcclxuICAgIHByaXZhdGUgcGVyY2VudDogbnVtYmVyOyAvLyDorqHnrpflkI7nmoTnmb7liIbmr5RcclxuICAgIEBWaWV3Q2hpbGQoJ2NhbnZhcycsIHsgc3RhdGljOiB0cnVlIH0pIHByaXZhdGUgY2FudmFzRWxlOiBFbGVtZW50UmVmOyAvLyBjYW52YXPlhYPntKDlr7nlupTnmoRFbGVtZW50UmVmXHJcbiAgICBwcml2YXRlIGNhbnZhc0VsZW1lbnQ6IGFueTsgLy8gY2FudmFz5YWD57Sg5a+55bqU55qEbmF0aXZlRWxlbWVudFxyXG4gICAgbmF0aXZlRWxlbWVudDogRWxlbWVudDsgLy8g5YWD57Sg5pys6LqrXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGhvc3RFbGU6IEVsZW1lbnRSZWYpIHtcclxuICAgICAgICB0aGlzLm5hdGl2ZUVsZW1lbnQgPSB0aGlzLmhvc3RFbGUubmF0aXZlRWxlbWVudDtcclxuICAgIH1cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgICAgICAvLyB2YWx1ZeWSjG1heFZhbHVl55qE5Yqo5oCB5L+u5pS55Z2H6ZyA6KaB6YeN57uY6L+b5bqm5ZGI546wXHJcbiAgICAgICAgaWYgKChjaGFuZ2VzLnZhbHVlICYmICFjaGFuZ2VzLnZhbHVlLmlzRmlyc3RDaGFuZ2UoKSkgfHxcclxuICAgICAgICAgICAgKGNoYW5nZXMubWF4VmFsdWUgJiYgIWNoYW5nZXMubWF4VmFsdWUuaXNGaXJzdENoYW5nZSgpKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7IC8vIOWIneWni+WMlui1sOS4gOasoeWchumlvOeahOe7mOWItu+8jOWcqOatpOWkhOWkhOeQhuaYr+WboOS4umNhbnZhc+WvueixoeatpOWkhOaYr+mAmui/h3JlZuaWueW8j+iOt+WPlmNhbnZhc+eahOacgOaXqeaXtuaculxyXG4gICAgICAgIHRoaXMuY2FudmFzRWxlbWVudCA9IHRoaXMuY2FudmFzRWxlLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgLy8g5L+u5aSNU1NS6ZSZ6K+v77yaRVJST1IgUmVmZXJlbmNlRXJyb3I6IGdldENvbXB1dGVkU3R5bGUgaXMgbm90IGRlZmluZWRcclxuICAgICAgICBpZih0eXBlb2YgZ2V0Q29tcHV0ZWRTdHlsZSA9PT0gJ3VuZGVmaW5lZCcpe1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2FudmFzRWxlbWVudC53aWR0aCA9IHBhcnNlRmxvYXQoZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLm5hdGl2ZUVsZW1lbnQpLndpZHRoKTtcclxuICAgICAgICB0aGlzLmNhbnZhc0VsZW1lbnQuaGVpZ2h0ID0gcGFyc2VGbG9hdChnZXRDb21wdXRlZFN0eWxlKHRoaXMubmF0aXZlRWxlbWVudCkuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmRyYXcoKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgZHJhdygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNhbGNQZXJjZW50KCk7XHJcbiAgICAgICAgdGhpcy5kcmF3UHJvZ3Jlc3NQaWUoKTtcclxuICAgIH1cclxuICAgIC8vIOiuoeeul+eZvuWIhuavlO+8jOWklumDqOmcgOimgeS/neivgW1heFZsdWXlkox2YWx1ZeWdh+S4uuaVsOWtl+exu+Wei1xyXG4gICAgcHJpdmF0ZSBjYWxjUGVyY2VudCgpOiB2b2lkIHtcclxuICAgICAgICAvLyDorqHnrpdwZXJjZW505YC8XHJcbiAgICAgICAgaWYgKHRoaXMubWF4VmFsdWUgPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5wZXJjZW50ID0gMDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBwZXJjZW50OiBudW1iZXIgPSB0aGlzLnZhbHVlIC8gdGhpcy5tYXhWYWx1ZTtcclxuICAgICAgICBpZiAoaXNOYU4ocGVyY2VudCkpIHtcclxuICAgICAgICAgICAgdGhpcy5wZXJjZW50ID0gMDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwZXJjZW50ID4gMSkge1xyXG4gICAgICAgICAgICBwZXJjZW50ID0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwZXJjZW50IDwgMCkge1xyXG4gICAgICAgICAgICBwZXJjZW50ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wZXJjZW50ID0gcGVyY2VudDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRyYXdQcm9ncmVzc1BpZSgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBjYW52YXM6IGFueSA9IHRoaXMuY2FudmFzRWxlbWVudDtcclxuICAgICAgICBjb25zdCBjdHg6IGFueSA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cclxuICAgICAgICAvLyDmuIXpmaTlhYjliY3nlLvluIPlhoXlrrlcclxuICAgICAgICBjb25zdCB3aWR0aDogbnVtYmVyID0gY2FudmFzLndpZHRoO1xyXG4gICAgICAgIGNvbnN0IGhlaWdodDogbnVtYmVyID0gY2FudmFzLmhlaWdodDtcclxuICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIOWchuWNiuW+hOWPiui1t+Wni+eCueiuoeeul1xyXG4gICAgICAgIGNvbnN0IGQ6IG51bWJlciA9IE1hdGgubWluKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgIGNvbnN0IGN4OiBudW1iZXIgPSB3aWR0aCAvIDI7XHJcbiAgICAgICAgY29uc3QgY3k6IG51bWJlciA9IGhlaWdodCAvIDI7XHJcbiAgICAgICAgY29uc3QgbGluZVdpZHRoOiBudW1iZXIgPSB0aGlzLmRlZmF1bHRDb25maWcubGluZVdpZHRoO1xyXG4gICAgICAgIGNvbnN0IHI6IG51bWJlciA9IGQgLyAyIC0gbGluZVdpZHRoO1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0UG9pbnQ6IG51bWJlciA9IC1NYXRoLlBJIC8gMjtcclxuICAgICAgICAvLyDnrJTop6bmoLflvI/orr7nva5cclxuICAgICAgICBjb25zdCBjb2xvcjogc3RyaW5nID0gdGhpcy5kZWZhdWx0Q29uZmlnLmNvbG9yO1xyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBjb2xvcjtcclxuICAgICAgICBjdHgubGluZVdpZHRoID0gbGluZVdpZHRoO1xyXG4gICAgICAgIC8vIOeUu+WkluWchlxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjdHguYXJjKGN4LCBjeSwgciwgc3RhcnRQb2ludCwgc3RhcnRQb2ludCArIE1hdGguUEkgKiAyKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgICAgIC8vIOeUu+aJh+W9olxyXG4gICAgICAgIGNvbnN0IGVuZFBvaW50OiBudW1iZXIgPSBzdGFydFBvaW50ICsgTWF0aC5QSSAqIHRoaXMucGVyY2VudCAqIDI7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5tb3ZlVG8oY3gsIGN5KTsgLy8g56e75Yqo6Iez5ZyG5b+DXHJcbiAgICAgICAgY3R4LmFyYyhjeCwgY3ksIHIsIHN0YXJ0UG9pbnQsIGVuZFBvaW50KTsgLy8g5LuO5aSW6L655LiK55qE54K555S75puy57q/XHJcbiAgICAgICAgY3R4LmxpbmVUbyhjeCwgY3kpOyAvLyDku47lnIblv4PnlLvnm7Tnur/liLDorqHnrpflpb3nmoTlnIblpJbkuIrnmoTngrlcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgIGlmICh0aGlzLnBlcmNlbnQgPT09IDApIHsgLy8g5Li6MOeahOaDheWGteS4i++8jOe7mOWItuWchuW/g+WAvOi+uee8mOerlue6v1xyXG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcclxuICAgIH1cclxufVxyXG4iXX0=