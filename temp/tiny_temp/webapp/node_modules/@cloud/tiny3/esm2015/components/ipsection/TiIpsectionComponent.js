import { Component, ElementRef, Input, Renderer2 } from '@angular/core';
import { TiFormComponent } from '../base/TiBaseModule';
import { FormBuilder, FormControl } from '@angular/forms';
/**
 * Ipsection组件，Ip各网段分开处理，各网段有下拉类和输入类两种类型；
 *
 * 9.0.4新增
 *
 * <example-url>../tiny3demo/#/ipsection/ipsection-all</example-url>
 */
export class TiIpsectionComponent extends TiFormComponent {
    constructor(hostRef, renderer2, fb) {
        super(hostRef, renderer2);
        this.hostRef = hostRef;
        this.renderer2 = renderer2;
        this.fb = fb;
        /**
         * @ignore
         * 存放 input 控件实例数组
         */
        this.controls = [];
        /**
         * @ignore
         * 格式化输入
         */
        this.maskInput = '000';
        /**
         * @ignore
         * 存放各网段 ip 值的数组
         */
        this.ipValues = [];
        this.formGroup = fb.group({});
    }
    /**
     * 将ip值分割为数组
     */
    static splitToIPArray(ipValue) {
        const ipArray = ipValue ? ipValue.replace(/\//, '.').split('.') : [];
        return ipArray;
    }
    /**
     * 将ip数组拼接为ip值
     */
    static joinToIPValue(ipArray) {
        let ipValue = ipArray.join('.');
        if (ipArray.length > 4) {
            ipValue = ipValue.replace(/(.*)\./, '$1/');
        }
        return ipValue;
    }
    ngOnInit() {
        super.ngOnInit();
        // 创建表单控件实例
        for (let i = 0; i < this.configs.length; i++) {
            if (!this.configs[i].options) {
                this.controls[i] = new FormControl();
                this.formGroup.addControl(`input_${i}`, this.controls[i]);
                // input类型网段值更改时触发事件
                this.controls[i].valueChanges.subscribe((value) => {
                    this.updateIpValue(i, value);
                });
            }
        }
    }
    ngAfterViewInit() {
        const itemElems = this.hostRef.nativeElement.getElementsByClassName('ti3-ipsection');
        const focusElements = [];
        // 设置可聚焦元素
        for (let i = 0; i < this.configs.length; i++) {
            if (itemElems[i].firstChild) {
                focusElements.push(itemElems[i].firstChild);
            }
            else {
                this.setAttr(itemElems[i], 'disabled', this.configs[i].disabled || this.disabled);
                focusElements.push(itemElems[i]);
            }
        }
        this.setFocusableElems(focusElements);
    }
    /**
     * @ignore
     * 获取model值，并进行初始化处理
     */
    writeValue(value) {
        super.writeValue(value);
        this.ipValues = TiIpsectionComponent.splitToIPArray(value);
        this.initIpValue();
    }
    /**
     * @ignore
     * 整体失焦触发事件
     */
    onBlur(event) {
        this.formatValue();
    }
    /**
     * @ignore
     * select类型网段值更改时触发事件
     */
    onChange(i, value) {
        this.updateIpValue(i, value);
    }
    /**
     * 初始化ip值
     */
    initIpValue() {
        for (let i = 0; i < this.configs.length; i++) {
            if (this.configs[i].options) {
                // 初始显示默认选中项，若value值在options存在，则显示该值，否则显示下拉配置项第一项
                this.configs[i].selected = this.configs[i].options.find(item => item === this.ipValues[i]) ? this.ipValues[i] : this.configs[i].options[0];
                this.updateIpValue(i, this.configs[i].selected);
            }
            else {
                // 初始设置value，disabled及校验规则
                this.ipValues[i] = this.ipValues[i] ? parseInt(this.ipValues[i], 10).toString() : '';
                this.controls[i].setValue(this.ipValues[i]);
                this.controls[i].setValidators(this.configs[i].validationRules);
                this.configs[i].disabled || this.disabled ? this.controls[i].disable() : this.controls[i].enable();
            }
        }
    }
    /**
     * 初始及失焦处理输入框值，清除Ip网段前面的0
     */
    formatValue() {
        for (let i = 0; i < this.configs.length; i++) {
            if (!this.configs[i].options) {
                this.controls[i].setValue(parseInt(this.controls[i].value, 10).toString());
            }
        }
    }
    /**
     * 更新model值
     */
    updateIpValue(index, value) {
        if (this.ipValues.length <= 0 || this.ipValues[index] === value) {
            return;
        }
        this.ipValues.splice(index, 1, value);
        const ipValue = TiIpsectionComponent.joinToIPValue(this.ipValues);
        this.model = (ipValue === '...' || ipValue === '.../') ? '' : ipValue;
        return ipValue;
    }
}
TiIpsectionComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-ipsection',
                template: "<ng-container *ngFor=\"let config of configs; index as i; let last=last\">\r\n    <ng-container *ngIf=\"!config.options; else selectTemplate\" >\r\n        <form [formGroup]='formGroup' style=\"display:inline-block\">\r\n            <input autocomplete=\"off\"\r\n                [id]=\"appendId('input_' + config.section)\"\r\n                [tiMask]=\"maskInput\"\r\n                class=\"ti3-ipsection ti3-ipsection-input\"\r\n                [ngClass]=\"{'ti3-ipsection-text-blod': config.bold}\"\r\n                formControlName=\"{{'input_' + i}}\"\r\n                tiText [tiValidation]=\"config.validation\"/>\r\n        </form>\r\n    </ng-container>\r\n    <ng-template #selectTemplate>\r\n        <ti-select class=\"ti3-ipsection ti3-ipsection-select\"\r\n                   [id]=\"appendId('select_' + config.section)\"\r\n                   [options]='config.options'\r\n                   [(ngModel)]=\"config.selected\"\r\n                   (ngModelChange)=\"onChange(i, $event)\"\r\n                   [disabled]=\"config.disabled || disabled\">\r\n                   <ng-template let-option>{{option}}</ng-template>\r\n        </ti-select>\r\n    </ng-template>\r\n    <section *ngIf=\"!last\"\r\n              class=\"ti3-ipsection-division\"\r\n              [ngClass]=\"{'ti3-ipsection-dot': i < 3,\r\n                          'ti3-ipsection-maskdivision': i===3,\r\n                          'ti3-ipsection-division-disabled': disabled}\"></section>\r\n</ng-container>\r\n",
                host: {
                    '[class.ti3-ipsection-container]': 'true',
                    '(blur)': 'onBlur($event)'
                },
                providers: [TiFormComponent.getValueAccessor(TiIpsectionComponent)],
                styles: ["::ng-deep :root{--ti-ipsection-dot-size:2px}:host.ti3-ipsection-container{display:inline-block}.ti3-ipsection-input{text-align:center;width:50px}.ti3-ipsection-select{width:70px}.ti3-ipsection-text-blod{font-weight:700}.ti3-ipsection-division{background:var(--ti-common-color-icon-normal);display:inline-block;vertical-align:middle}.ti3-ipsection-dot{-ms-box-sizing:border-box;border-radius:50%;box-sizing:border-box;height:var(--ti-ipsection-dot-size);margin:0 var(--ti-common-space-2x);width:var(--ti-ipsection-dot-size)}.ti3-ipsection-maskdivision{height:1px;transform:rotate(110deg);width:18px}.ti3-ipsection-division-disabled{background:var(--ti-common-color-icon-disabled)}"]
            },] }
];
TiIpsectionComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: FormBuilder }
];
TiIpsectionComponent.propDecorators = {
    configs: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,