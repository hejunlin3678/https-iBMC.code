import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { TiFormComponent } from '../base/TiBaseModule';
import { TiDroplistComponent } from '../droplist/TiDroplistModule';
import { debounceTime, switchMap } from 'rxjs/operators';
import { TiTextComponent } from '../text/TiTextModule';
import { empty, Subject } from 'rxjs';
import { Util } from '../../utils/Util';
/**
 * 自动补全输入框组件
 *
 * <example-url>../tiny3demo/#/autocomplete/autocomplete-all</example-url>
 */
export class TiAutocompleteComponent extends TiFormComponent {
    constructor() {
        super(...arguments);
        /**
         * 预留提示文本
         */
        this.placeholder = '';
        /**
         * 是否开启清空输入框内容的功能
         *
         * 10.1.0/9.1.0版本之后默认不开启，在此之前版本默认开启
         */
        this.clearable = false;
        /**
         * 1."justified"(默认): 下拉框的宽度与输入框的宽度保持一致；
         *
         * 2."auto": 下拉框的宽度根据下拉项的内容自动撑开；
         *
         * 3.表示宽度的字符串: 设置固定的下拉框宽度(不小于输入框的宽度)。例如："200px"。
         */
        this.panelWidth = 'justified';
        /**
         * 指定下拉建议项中显示的文本对应的字段关键字
         */
        this.labelKey = 'label';
        /**
         * 10.0.1版本新增
         *
         * 下拉建议项
         */
        this.options = [];
        /**
         * 10.0.2版本新增
         *
         * 下拉建议项文字超长显示...，hover时tip弹出方向
         */
        this.tipPosition = 'right';
        /**
         * suggest事件，当聚焦或值改变时触发事件，为开发者提供设置建议项的时机。
         *
         * 参数：组件实例
         */
        this.suggest = new EventEmitter();
        /**
         * clear事件，点击清除按钮时触发
         *
         * 10.0.2版本新增(tiAutocomplete组件)
         *
         * 3.0.6版本新增(tiSearchbox组件)
         *
         */
        this.clear = new EventEmitter();
        /**
         * @ignore
         *
         */
        this.suggestions = [];
        /**
         * @ignore
         * 是否聚焦的标志位
         */
        this.isFocused = false;
        /**
         * 最后一次下拉建议项
         */
        this.lastSuggestions = [];
        /**
         * @ignore
         */
        this.inputChangeObserve = new Subject();
        // 内部公共方法集合--end
    }
    ngOnInit() {
        super.ngOnInit();
        this.setFocusableElems([this.textComp.nativeElement]);
        this.createInputChangeObserve();
        if (this.clearable) {
            this.renderer.setAttribute(this.textComp.nativeElement, 'clearable', '');
        }
    }
    ngOnDestroy() {
        // 修正SSR报错：TypeError: Cannot read property 'unsubscribe' of undefined
        this.inputChangeSub && this.inputChangeSub.unsubscribe();
    }
    // 组件交互方法集合--start
    /**
     * @ignore
     * 输入框中内容改变事件
     */
    onInputChange(value) {
        if (this.disabled || !this.isFocused) {
            return;
        }
        this.inputChangeObserve.next(value);
    }
    /**
     * @ignore
     * 两种情况下触发
     * 1.在suggestion面板展开的情况下，通过hover选中一项，然后按下enter
     * 2.在suggestion面板展开的情况下，通过鼠标点击选中一项
     */
    onDroplistChange(value) {
        if (value) {
            this.model = value[this.labelKey] || value.label;
        }
    }
    /**
     * @ignore
     */
    onFocus() {
        if (this.disabled) {
            return;
        }
        this.isFocused = true;
        if (this.isInputClear()) { // 如果是点击清除按钮，值会改变，那么就会在onInputChange中处理
            return;
        }
        this.showSuggestions();
    }
    /**
     * @ignore
     */
    onBlur() {
        this.dropListComp && this.dropListComp.hide();
        this.isFocused = false;
    }
    /**
     * @ignore
     *
     * 避免滚动页面下拉框隐藏之后组件仍聚焦时再次点击，下拉框无法展开
     *
     * mousedown在focus事件之前执行
     */
    onInputMousedown() {
        if (this.disabled || !this.isFocused || this.isInputClear()) { // 如果是点击清除按钮，值会改变，那么就会在onInputChange中处理
            return;
        }
        this.showSuggestions();
    }
    /**
     * @ignore
     * 点击叉号时触发
     *
     */
    onClear(event) {
        this.clear.emit(event);
    }
    // 组件交互方法集合--end
    // 内部公共方法集合--start
    /**
     * @description: 创建inputValue的observable，确保收集2ms内的数据后再更新下拉
     *  触发该observable时，使用next方法
     */
    createInputChangeObserve() {
        this.inputChangeSub = this.inputChangeObserve
            .pipe(debounceTime(200), // 200ms延迟执行，解决请求太频繁问题
        // TODO: 在点击清除按钮或者快捷键删除时数据不准确，可能导致在这些操作时触发不了下面的逻辑
        // distinctUntilChanged(),避免前后两次相同数据重复处理，只有上次数据和200ms后的数据不相等时才触发后续动作。
        switchMap(// TODO: 这个switchMap有可能没有生效。测试用例增加，switchMap
        (value) => {
            if (this.isFocused) {
                if (this.suggest.observers.length === 0) {
                    this.lastSuggestions = this.suggestions;
                    this.suggestions = this.filter(value);
                    if (this.suggestions.length > 0) {
                        this.show();
                    }
                    else {
                        this.dropListComp && this.dropListComp.hide();
                    }
                }
                else {
                    this.suggest.emit(this);
                }
            }
            return empty();
        }))
            .subscribe();
    }
    /**
     * 设置下拉建议项数据
     *
     * @param value 下拉建议项数组
     */
    setSuggestions(value) {
        this.lastSuggestions = this.suggestions;
        this.suggestions = value;
        if (this.suggestions.length > 0) {
            this.show();
        }
        else {
            this.dropListComp.hide();
        }
    }
    filter(searchWord) {
        if (this.options && this.options.length >= 0) {
            // 搜索结果临时值。结果默认值，是原数据
            let searchResult = this.options;
            // 如果搜索词存在
            if (!Util.isEmptyString(searchWord)) {
                // 在集合中搜索
                searchResult = searchResult.filter((option) => {
                    return option[this.labelKey].toLowerCase()
                        .indexOf(searchWord.toLowerCase()) >= 0;
                });
            }
            return searchResult;
        }
        return [];
    }
    show() {
        if (this.dropListComp.isShow) {
            // 搜索时，按需重新定位
            if (this.lastSuggestions.length !== this.suggestions.length) {
                setTimeout(() => {
                    this.dropListComp.rePosition(true);
                }, 0);
            }
        }
        else {
            // 数据更新后，未及时通知到droplist，初始化时按照默认值[]绘制视图，需延时处理
            setTimeout(() => {
                this.dropListComp.show();
                this.selected = undefined; // 为了去掉选中样式
                this.dropListComp.listCom.hoverOption = undefined; // 去掉hoverOption
            }, 0);
        }
    }
    isInputClear() {
        return this.textComp.isShowClear && this.textComp.isClearActive;
    }
    showSuggestions() {
        if (this.suggest.observers.length === 0) {
            this.lastSuggestions = this.suggestions;
            this.suggestions = this.filter(this.model);
            if (this.suggestions.length > 0) {
                this.show();
            }
        }
        else {
            this.suggest.emit(this);
        }
    }
}
TiAutocompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-autocomplete',
                template: "<input #input tiText\r\n        class=\"ti3-autocomplete-input\"\r\n        [disabled]=\"disabled\"\r\n        spellcheck=false\r\n        [(ngModel)] = \"model\"\r\n        [placeholder]=\"placeholder\"\r\n        (ngModelChange)=\"onInputChange($event)\"\r\n        [maxlength]=\"maxlength\"\r\n        [id]=\"appendId('input')\"\r\n        (mousedown)=\"onInputMousedown()\"\r\n        (clear)=\"onClear($event)\">\r\n<ti-droplist #droplist\r\n              [dominatorElem]=\"nativeElement\"\r\n              [options]=\"suggestions\"\r\n              [(ngModel)]=\"selected\"\r\n              [labelKey]=\"labelKey\"\r\n              [panelMaxHeight]=\"panelMaxHeight\"\r\n              [panelWidth]=\"panelWidth\"\r\n              [tipPosition]=\"tipPosition\"\r\n              (ngModelChange)=\"onDroplistChange($event)\"\r\n              [id]=\"appendId('droplist')\">\r\n</ti-droplist>",
                providers: [TiFormComponent.getValueAccessor(TiAutocompleteComponent)],
                host: {
                    '[class.ti3-autocomplete-container]': 'true',
                    '(blur)': 'onBlur()',
                    '(focus)': 'onFocus()'
                },
                styles: [":host.ti3-autocomplete-container{background-color:var(--ti-common-color-bg-white-normal);border:1px solid var(--ti-input-border-color);border-radius:var(--ti-common-border-radius-normal);display:inline-block;vertical-align:middle}:host.ti3-autocomplete-container:hover{border-color:var(--ti-input-border-color-hover)}:host.ti3-autocomplete-container[tifocused]{border-color:var(--ti-input-border-color-focus)}:host.ti3-autocomplete-container[disabled]{border-color:var(--ti-input-border-color-disabled)}:host.ti3-autocomplete-container[disabled] .ti3-autocomplete-input{background-color:var(--ti-input-bg-color-disabled)}:host.ti3-autocomplete-container .ti3-autocomplete-input{background-color:transparent;border:none!important;width:100%}"]
            },] }
];
TiAutocompleteComponent.propDecorators = {
    placeholder: [{ type: Input }],
    clearable: [{ type: Input }],
    maxlength: [{ type: Input }],
    panelWidth: [{ type: Input }],
    panelMaxHeight: [{ type: Input }],
    labelKey: [{ type: Input }],
    options: [{ type: Input }],
    tipPosition: [{ type: Input }],
    suggest: [{ type: Output }],
    clear: [{ type: Output }],
    textComp: [{ type: ViewChild, args: ['input', { static: true },] }],
    dropListComp: [{ type: ViewChild, args: ['droplist', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,