import { Component, ContentChild, ElementRef, EventEmitter, Input, Output, QueryList, TemplateRef, ViewChild, ViewChildren } from '@angular/core';
import { TiFormComponent } from '../base/TiBaseModule';
import { TiDropComponent } from '../drop/TiDropModule';
import { TiMenuListComponent } from './TiMenuListComponent';
import { TiKeymap } from '../../utils/Util';
/**
 * Menu菜单组件
 *
 * 提供了一种方便的生成菜单下拉列表的方式，提供分组、自定义内容等功能。
 *
 * <example-url>../tiny3demo/#/menu/menu-all</example-url>
 */
export class TiMenuComponent extends TiFormComponent {
    constructor() {
        super(...arguments);
        /**
         * 下拉菜单面板与按钮对齐方式。
         */
        this.panelAlign = 'right';
        /**
         * 下拉面板最大宽度，超过时换行，对所有子菜单都生效。
         */
        this.panelMaxWidth = '9999px';
        /**
         * 下拉面板最大高度，超过时出现竖向滚动条，对所有子菜单都生效。
         */
        this.panelMaxHeight = '9999px';
        /**
         * 要显示文字的键值
         */
        this.labelKey = 'label'; // labelKey
        /**
         * 选中菜单项事件
         */
        this.select = new EventEmitter();
        /**
         * 打开面板之前，通知事件。完全交给业务用户处理。
         */
        this.beforeOpen = new EventEmitter();
        /**
         * @ignore
         * itemsArr[0]存放根面板内容，itemArr[1]存放次级面板内容，itemArr[2]存放次次级面板内容
         */
        this.itemsArr = [];
        /**
         * @ignore
         *  与开关距离
         */
        this.dominatorSpace = '10px';
    }
    ngOnInit() {
        // 基类中做了设置宿主id的操作
        super.ngOnInit();
        this.hasBorder = this.nativeElement.hasAttribute('hasborder');
    }
    ngOnChanges(changes) {
        this.setFocusableElems([this.mytoggleRef.nativeElement]);
        super.ngOnChanges(changes);
        if (changes['items']) { // 外部修改show属性的处理，初始定义在ngOnInit中处理
            this.itemsArr[0] = this.items;
        }
    }
    /**
     * 兼容旧版：
     * 10.0.3 版本之前只能内嵌一个模板，无命名。
     * 新版可以内嵌两个模板，示例书写要求都命名（#item，#tip）。
     * 但需要兼容旧版无命名测试用例。
     */
    // tslint:disable-next-line: use-life-cycle-interface
    ngAfterContentInit() {
        super.ngAfterContentInit();
        // 如果 item 模板为空 && 存在第一个模板，那么把第一个出现的 “非#tip 标签” 的模板作为 item 模板
        if (!this.itemTemplate && this.firstTemplate
            && (this.firstTemplate.elementRef.nativeElement !== (this.tipTemplate && this.tipTemplate.elementRef.nativeElement))) {
            this.itemTemplate = this.firstTemplate;
        }
    }
    /**
     * 打开面板
     */
    open() {
        if (this.disabled) {
            return;
        }
        // 打开面板前重置menulist最大高度
        this.initListMaxHeight();
        this.dropComs.first.show();
        this.listComs.first.hoverOption = null;
        // 根据drop的最大高度设置menulist最大高度
        this.restyleListMaxHeight();
        // IE滚动条Bug的监听
        this.listComs.toArray().forEach(listCom => {
            listCom.listenIESrollbarBug();
        });
    }
    /**
     * 关闭面板
     */
    close() {
        this.dropComs.first.hide();
        this.onHover(null, 0);
        // 解除IE滚动条Bug的监听
        this.listComs.toArray().forEach(listCom => {
            listCom.unlistenIESrollbarBug();
        });
    }
    /**
     * 切换面板状态：打开/关闭
     */
    toggle() {
        this.dropComs.first.isShow ? this.close() : this.open();
    }
    /**
     * @ignore
     */
    onKeydown(event) {
        switch (event.keyCode) {
            case TiKeymap.KEY_SPACE: // 原生SPACE键仅可打开。但Tiny2,3都跟Enter键保持一致
            case TiKeymap.KEY_ENTER: // ENTER键 相当于click
            case TiKeymap.KEY_NUMPAD_ENTER: // ENTER键(苹果数字小键盘)
                // 第一级已打开，但无选中项。或者第一级没有打开。相当于鼠标点击逻辑。
                if ((this.dropComs.first.isShow && !this.listComs.toArray()[0].hoverOption)
                    || !this.dropComs.first.isShow) {
                    this.onMousedown(null); // 相当于鼠标点击
                    break; // 注意:break在if内，如果if不满足，则走到default，list处理按键
                }
            // 上面的回车键, 可能继续走到下面分支。
            // tslint:disable-next-line:no-switch-case-fall-through
            // eslint-disable-next-line no-fallthrough
            case TiKeymap.KEY_ARROW_LEFT: // 左右箭头，焦点在左右面板转移
            case TiKeymap.KEY_ARROW_RIGHT: // 左右箭头，焦点在左右面板转移
            case TiKeymap.KEY_ARROW_UP: // 上下箭头，上下移动选中项
            case TiKeymap.KEY_ARROW_DOWN: // 上下箭头，上下移动选中项
                for (let i = this.dropComs.length - 1; i >= 0; i--) { // 寻找末尾面板且有hover，list处理按键
                    if (this.dropComs.toArray()[i].isShow && this.listComs.toArray()[i].hoverOption) {
                        this.onKeydownLastHoverList(event, i);
                        // break; //这里触发了for循环的break；并没有走到switch的break;所以改为return;
                        return;
                    }
                }
                // 没有hover的面板，那么第一级面板（肯定是展开的）处理按键
                this.listComs.first.onKeydown(event);
                break;
            default:
                break;
        }
    }
    onKeydownLastHoverList(event, i) {
        switch (event.keyCode) {
            case TiKeymap.KEY_ARROW_LEFT: // 左右箭头，焦点在左右面板转移
            case TiKeymap.KEY_ARROW_RIGHT: // 左右箭头，焦点在左右面板转移
                if ((this.panelAlign === 'right' && event.keyCode === TiKeymap.KEY_ARROW_LEFT)
                    || (this.panelAlign === 'left' && event.keyCode === TiKeymap.KEY_ARROW_RIGHT)) { // 次级面板方向键
                    if (i + 1 < this.dropComs.length && this.dropComs.toArray()[i + 1].isShow) { // 次级存在且展开
                        this.listComs.toArray()[i + 1].nextOption(false); // 次级面板hover由null改为下一个
                    }
                }
                else { // 上级面板方向键
                    this.listComs.toArray()[i].hoverOption = null;
                }
                break;
            case TiKeymap.KEY_SPACE: // 原生SPACE键仅可打开。但Tiny2,3都跟Enter键保持一致
            case TiKeymap.KEY_ENTER: // ENTER键 相当于click
            case TiKeymap.KEY_NUMPAD_ENTER: // ENTER键(苹果数字小键盘)
                if (!this.listComs.toArray()[i].isGroup(this.listComs.toArray()[i].hoverOption)) {
                    this.listComs.toArray()[i].onKeydown(event);
                }
                break;
            default: // 上下键等，和上面的回车键也会走到这里。
                this.listComs.toArray()[i].onKeydown(event);
                break;
        }
    }
    /**
     * @ignore
     */
    onMousedown(event) {
        if (this.dropComs.first.isShow) { // 已打开，则关闭
            this.close();
        }
        else if (this.beforeOpen.observers.length === 0) { // 已打开，且无beforeOpen，则打开
            this.open();
        }
        else { // 已打开，有beforeOpen
            this.beforeOpen.emit(this);
        }
    }
    /**
     * @ignore
     */
    onSelect(panelIndex) {
        this.select.emit(this.listComs.toArray()[panelIndex].model);
        this.close();
    }
    /**
     * @ignore
     */
    onBlur() {
        this.close();
    }
    /**
     * @ignore
     */
    onHover(item, panelIndex) {
        if (panelIndex + 1 === this.dropComs.length) { // 当前hover面板，已经是最后一级面板
            return;
        }
        const dropComArr = this.dropComs.toArray();
        const listComArr = this.listComs.toArray();
        if (item && listComArr[panelIndex].isGroup(item) && !listComArr[panelIndex].isDisabledFn(item)) { // 根据数据，是否展开下一级
            this.itemsArr[panelIndex + 1] = item.children; // 下一级数据，赋新值。
            listComArr[panelIndex + 1].hoverOption = null; // 下一级面板赋空hoverOption，会触发onHover，进而关闭下一级面板的后续面板。
            // 赋新值以后，等模板有了新的尺寸，再弹出。
            setTimeout(() => {
                const currentPanel = dropComArr[panelIndex].nativeElement; // 当前面板元素
                const nextPanel = dropComArr[panelIndex + 1].nativeElement; // 下一级面板元素
                dropComArr[panelIndex + 1].show(); // 打开下一级面板
                // 位置调整，X方向 // TODO: 使用Position是否可行？
                const leftOffset = (this.panelAlign === 'left') ?
                    currentPanel.offsetLeft + currentPanel.offsetWidth :
                    currentPanel.offsetLeft - nextPanel.offsetWidth;
                nextPanel.style.left = `${leftOffset}px`;
                // 位置调整，Y方向
                const itemIndex = this.itemsArr[panelIndex].indexOf(item);
                const itemElem = listComArr[panelIndex].nativeElement.getElementsByTagName('LI')[itemIndex];
                // 当前li距离面板顶部的距离 = 当前li距离可视区顶部的距离 - 当前面板到可视区顶部的距离;
                const itemElmTop = itemElem.getBoundingClientRect().top - currentPanel.getBoundingClientRect().top;
                // 当前li距离页面底部的距离 = 可视区窗口高度 + 文档滚动高度 - 当前面板的offsetTop - 当前li距离面板顶部的距离;
                const bottomOffset = document.documentElement.clientHeight + document.documentElement.scrollTop -
                    currentPanel.offsetTop - itemElmTop;
                // 下一级面板的的高度
                const itemHeight = nextPanel.offsetHeight;
                // 底部空间能放下下一级面板：下一级面板的top = 当前面板的offsetTop + 当前li距离面板顶部的距离 - 面板的上下留白
                const nextPanelTop = currentPanel.offsetTop + itemElmTop - 4;
                if (bottomOffset > itemHeight) {
                    nextPanel.style.top = nextPanelTop + 'px';
                    return;
                }
                // 底部空间不足，和浏览器底部对齐
                nextPanel.style.top = nextPanelTop + bottomOffset - itemHeight + 'px';
            }, 0);
        }
        else {
            // 当hover到具体项目（非分组）或 null（移出当前面板），需要闭合所有后续面板
            for (let i = panelIndex + 1; i < dropComArr.length; i++) {
                dropComArr[i].hide();
            }
        }
    }
    /**
     * @ignore
     */
    onMouseoutDrop(event, panelIndex) {
        // 默认需要隐藏, 除非鼠标进入面板区域。
        for (let i = 0; i < this.dropComs.length; i++) {
            const dropRect = this.dropComs.toArray()[i].nativeElement
                .getBoundingClientRect();
            // 因为慢慢移出本面板时，移出鼠标事件依然停留在本面板内（1px误差），所以面板rect四周范围要更小1px。
            if (dropRect.left < event.clientX && event.clientX < dropRect.right
                && dropRect.top < event.clientY && event.clientY < dropRect.bottom) {
                return;
            }
        }
        // 给第一级面板置无选中，那么次级面板自然会关闭。
        this.listComs.first.hoverOption = null; // 会触发到上面this.onHover(null, 0);
    }
    // 初始化menulist最大高度
    initListMaxHeight() {
        this.menulistMaxHeight = parseInt(this.panelMaxHeight, 10);
        this.listComs.toArray().forEach(listCom => {
            this.renderer.setStyle(listCom.nativeElement, 'max-height', this.menulistMaxHeight + 'px');
        });
    }
    // 考虑drop的压缩情况，设置menulist的max-height
    restyleListMaxHeight() {
        const dropCurMaxHeight = parseInt(this.dropComs.first.nativeElement.style.maxHeight, 10);
        if (!isNaN(dropCurMaxHeight) && dropCurMaxHeight < this.menulistMaxHeight) {
            this.listComs.toArray().forEach(listCom => {
                this.renderer.setStyle(listCom.nativeElement, 'max-height', dropCurMaxHeight + 'px');
            });
        }
    }
}
TiMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-menu',
                template: "<a #mytoggle class=\"ti3-menu-toggle ti3-menu-toggle-menu \"\r\n        (mousedown)=\"onMousedown($event)\"\r\n        (keydown)=\"onKeydown($event)\"\r\n        oncontextmenu=\"return false\"\r\n        href=\"javascript:void(0)\"\r\n        [id]=\"appendId('toggle')\">\r\n        <ng-content></ng-content>\r\n</a>\r\n<ng-container *ngTemplateOutlet=\"pannelTemplate; context: {$implicit: itemsArr[0], panelIndex: 0}\">\r\n</ng-container>\r\n<ng-container *ngTemplateOutlet=\"pannelTemplate; context: {$implicit: itemsArr[1],panelIndex: 1}\">\r\n</ng-container>\r\n<ng-container *ngTemplateOutlet=\"pannelTemplate; context: {$implicit: itemsArr[2], panelIndex: 2}\">\r\n</ng-container>\r\n<ng-template #pannelTemplate let-options let-panelIndex=panelIndex>\r\n        <ti-drop #drop\r\n        [ngClass]=\"{'ti3-menu-border-drop': hasBorder}\"\r\n        class=\"ti3-menu-panel-container\"\r\n        [dominatorElem]=\"mytoggleRef.nativeElement\"\r\n        [panelAlign]=\"panelAlign\"\r\n        panelWidth='auto'\r\n        height='auto'\r\n        [id]=\"appendId('drop'+panelIndex)\"\r\n        (mouseout)=\"onMouseoutDrop($event, panelIndex)\">\r\n                <ti-menulist #menulist\r\n                        [options]=\"options\"\r\n                        [labelKey]=\"labelKey\"\r\n                        [panelAlign]=\"panelAlign\"\r\n                        style=\"display:block;\"\r\n                        (select)=\"onSelect(panelIndex)\"\r\n                        size =\"small\"\r\n                        [ngStyle]=\"{'max-width': panelMaxWidth}\"\r\n                         (hover)=\"onHover($event, panelIndex)\"\r\n                         [id]=\"appendId('menulist'+panelIndex)\">\r\n                        <ng-template let-item let-i=index>\r\n                                <section [tiTip]='tipTemplate ? tipTemplate : item.tip' [tiTipContext]='item' [tiTipPosition]='item.tipPosition'>\r\n                                        <ng-container *ngIf=\"itemTemplate else listLabelTemplate\">\r\n                                                <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item,index: i}\">\r\n                                                </ng-container>\r\n                                        </ng-container>\r\n                                        <ng-template #listLabelTemplate>{{item[labelKey]}}</ng-template>\r\n                                </section>\r\n                        </ng-template>\r\n                </ti-menulist>\r\n        </ti-drop>\r\n<ng-template>\r\n",
                host: {
                    '(blur)': 'onBlur()'
                },
                styles: [".ti3-compnent-container-border,:host[hasborder]{-ms-box-sizing:border-box;border:1px solid;border-radius:var(--ti-input-border-radius);box-sizing:border-box;display:inline-block}.ti3-compnent-container-border:not([disabled]),:host[hasborder]:not([disabled]){background-color:var(--ti-input-bg-color);border-color:var(--ti-input-border-color)}.ti3-compnent-container-border:not([disabled]):hover,:host[hasborder]:not([disabled]):hover{border-color:var(--ti-input-border-color-hover)}.ti3-compnent-container-border:not([disabled])[tiFocused],:host[hasborder]:not([disabled])[tiFocused]{border-color:var(--ti-input-border-color-focus)}.ti3-compnent-container-border[disabled],:host[hasborder][disabled]{background-color:var(--ti-input-bg-color-disabled);border-color:var(--ti-input-border-color-disabled);cursor:not-allowed!important}:host{display:inline-block}.ti3-menu-toggle,a.ti3-menu-toggle:focus{color:var(--ti-menu-item-color)}.ti3-menu-toggle-menu{-ms-user-select:none;-webkit-user-select:none;cursor:pointer;display:inline-block;text-decoration:none;user-select:none}.ti3-menu-toggle-menu:hover{color:var(--ti-menu-item-color-hover)}.ti3-menu-toggle-menu:hover:after{border-top-color:var(--ti-menu-item-color-hover)}.ti3-menu-toggle-menu:active{color:var(--ti-menu-item-color-active)}.ti3-menu-toggle-menu:active:after{border-top-color:var(--ti-menu-item-color-active)}.ti3-menu-toggle-menu:after{border-left:4px solid transparent;border-right:4px solid transparent;border-top:5px solid var(--ti-menu-item-color);content:\"\";display:inline-block;height:0;margin-left:5px;vertical-align:middle;width:0}.ti3-menu-toggle-button{-ms-user-select:none;-webkit-user-select:none;cursor:pointer;display:inline-block;user-select:none}.ti3-menu-toggle-button:after{border-left:4px solid transparent;border-right:4px solid transparent;border-top:5px solid;content:\"\";display:inline-block;height:0;margin-left:3px;vertical-align:middle;width:0}.ti3-menu-panel-container{-ms-box-sizing:border-box;background-color:#fff;border-radius:2px;box-shadow:0 2px 8px 1px rgba(0,0,0,.2);box-sizing:border-box;display:none;list-style:none;position:absolute;z-index:1060}.ti3-menu-panel-container.ti3-button-menu-panel-container{border:1px solid var(--ti-menu-button-panel-border-color);box-shadow:none}.ti3-menu-panel-container.ti3-button-menu-panel-container .ti3-menu-panel-list:hover{color:var(--ti-menu-button-panel-border-color)}.ti3-menu-panel-container.ti3-button-menu-panel-container .ti3-menu-panel-list.ti3-menu-panel-list-active{background-color:var(--ti-menu-button-panel-border-color);color:var(--ti-menu-panel-item-color-active)}.ti3-menu-panel-container.ti3-region-menu-panel-container-down{border-top:1px solid #ccc}.ti3-menu-panel-container.ti3-region-menu-panel-container-up{border-bottom:1px solid #ccc}:host[hasborder] .ti3-menu-toggle-menu{border:1px solid transparent;color:var(--ti-input-text-color);height:var(--ti-input-height);line-height:var(--ti-input-height);margin:-1px;padding-left:var(--ti-common-space-5x);padding-right:var(--ti-common-space-4x)}:host[hasborder] .ti3-menu-toggle-menu:focus,:host[hasborder] .ti3-menu-toggle-menu:hover{color:var(--ti-default-font-color)}:host[hasborder] .ti3-menu-toggle-menu:after,:host[hasborder] .ti3-menu-toggle-menu:hover:after{border-top-color:var(--ti-dominator-select-arrow-color)}:host[hasborder]:hover:not([disabled]){border-color:var(--ti-common-color-line-active)}:host[disabled] .ti3-menu-toggle-menu{color:var(--ti-input-text-color-disabled)!important;cursor:not-allowed}:host[disabled] .ti3-menu-toggle-menu:after{border-top-color:var(--ti-input-text-color-disabled)!important}.ti3-menu-border-drop ti-menulist{max-height:inherit;overflow-y:auto}.ti3-menu-border-drop ti-menulist .ti3-menu-panel-list{padding-left:var(--ti-common-space-10);padding-right:var(--ti-common-space-10)}"]
            },] }
];
TiMenuComponent.propDecorators = {
    panelAlign: [{ type: Input }],
    items: [{ type: Input }],
    panelMaxWidth: [{ type: Input }],
    panelMaxHeight: [{ type: Input }],
    labelKey: [{ type: Input }],
    mytoggleRef: [{ type: ViewChild, args: ['mytoggle', { static: true },] }],
    dropComs: [{ type: ViewChildren, args: [TiDropComponent,] }],
    listComs: [{ type: ViewChildren, args: [TiMenuListComponent,] }],
    firstTemplate: [{ type: ContentChild, args: [TemplateRef, /* TODO: add static flag */ { static: true },] }],
    itemTemplate: [{ type: ContentChild, args: ['item', /* TODO: add static flag */ { static: true },] }],
    tipTemplate: [{ type: ContentChild, args: ['tip', /* TODO: add static flag */ { static: false },] }],
    select: [{ type: Output }],
    beforeOpen: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,