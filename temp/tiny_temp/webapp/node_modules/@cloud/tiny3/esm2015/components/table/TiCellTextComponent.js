import { Component, ElementRef, Input, Renderer2, ViewChild } from '@angular/core';
import { TiRenderer } from '../../services/renderer/TiRenderer';
/**
 * TiCellText 表格单元格中放置文本的容器组件
 *
 * 提供文本溢出时出省略号...,且hover时出tip的功能。
 *
 * 配合TiCellText组件使用可使表格单元格中内容显示不下时，文本出省略号...,
 * 而文本后的放在TiCellIcons图标始终可以显示出来
 *
 */
export class TiCellTextComponent {
    constructor(renderer, elementRef, tiRenderer) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.tiRenderer = tiRenderer;
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.setMaxWidth();
        }, 0);
    }
    setMaxWidth() {
        let otherWidth = 0;
        const parent = this.renderer.parentNode(this.elementRef.nativeElement);
        const iconsContainer = this.tiRenderer.findChildrenByClassName(parent, 'ti3-cell-icons-container')[0];
        const sortContainer = this.tiRenderer.findChildrenByClassName(parent, 'ti3-sort-container')[0];
        const headFilterContainer = this.tiRenderer.findChildrenByClassName(parent, 'ti3-head-filter-container')[0];
        const renameContainer = this.tiRenderer.findChildrenByTagName(parent, 'TP-RENAME')[0];
        // 修复SSR报错：ERROR TypeError: sortContainer.getBoundingClientRect is not a function
        if (typeof parent.getBoundingClientRect !== 'function') {
            return;
        }
        // 修复SSR报错：ERROR TypeError: Cannot read property 'getBoundingClientRect' of undefined
        if (iconsContainer) {
            const iconsContainerWidth = parseFloat(iconsContainer.getBoundingClientRect().width
                .toFixed(1));
            otherWidth += iconsContainerWidth;
        }
        if (sortContainer) {
            const sortContainerWidth = parseFloat(sortContainer.getBoundingClientRect().width
                .toFixed(1));
            otherWidth += sortContainerWidth;
        }
        if (headFilterContainer) {
            const headFilterContainerWidth = parseFloat(headFilterContainer.getBoundingClientRect().width
                .toFixed(1));
            otherWidth += headFilterContainerWidth;
        }
        if (renameContainer) {
            const renameContainerWidth = parseFloat(renameContainer.getBoundingClientRect().width
                .toFixed(1));
            otherWidth += renameContainerWidth;
        }
        this.renderer.setStyle(this.cellTextEle.nativeElement, 'max-width', `calc(100% - ${otherWidth}px)`);
    }
}
TiCellTextComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-cell-text',
                template: "<span #text class=\"ti3-cell-text\" tiOverflow [tiTipContent]=\"tipContent\" [tiTipPosition]=\"tipPosition\">\r\n    <ng-content></ng-content>\r\n</span>",
                host: {
                    '[class.ti3-cell-text-container]': 'true'
                }
            },] }
];
TiCellTextComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: TiRenderer }
];
TiCellTextComponent.propDecorators = {
    tipContent: [{ type: Input }],
    tipPosition: [{ type: Input }],
    cellTextEle: [{ type: ViewChild, args: ['text', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGlDZWxsVGV4dENvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL0BjbG91ZC90aW55My9jb21wb25lbnRzL3RhYmxlL1RpQ2VsbFRleHRDb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxFQUVMLFNBQVMsRUFDVCxTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBR2hFOzs7Ozs7OztHQVFHO0FBUUgsTUFBTSxPQUFPLG1CQUFtQjtJQVU1QixZQUFvQixRQUFtQixFQUFVLFVBQXNCLEVBQ25ELFVBQXNCO1FBRHRCLGFBQVEsR0FBUixRQUFRLENBQVc7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ25ELGVBQVUsR0FBVixVQUFVLENBQVk7SUFBRyxDQUFDO0lBRTlDLGVBQWU7UUFDWCxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3ZCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNWLENBQUM7SUFFTyxXQUFXO1FBQ2YsSUFBSSxVQUFVLEdBQVcsQ0FBQyxDQUFDO1FBQzNCLE1BQU0sTUFBTSxHQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDaEYsTUFBTSxjQUFjLEdBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvRyxNQUFNLGFBQWEsR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hHLE1BQU0sbUJBQW1CLEdBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsMkJBQTJCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNySCxNQUFNLGVBQWUsR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUvRixpRkFBaUY7UUFDakYsSUFBRyxPQUFPLE1BQU0sQ0FBQyxxQkFBcUIsS0FBSyxVQUFVLEVBQUM7WUFDbEQsT0FBTztTQUNWO1FBQ0QscUZBQXFGO1FBQ3JGLElBQUksY0FBYyxFQUFFO1lBQ2hCLE1BQU0sbUJBQW1CLEdBQVcsVUFBVSxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEtBQUs7aUJBQ3RGLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLFVBQVUsSUFBSSxtQkFBbUIsQ0FBQztTQUNyQztRQUVELElBQUksYUFBYSxFQUFFO1lBQ2YsTUFBTSxrQkFBa0IsR0FBVyxVQUFVLENBQUMsYUFBYSxDQUFDLHFCQUFxQixFQUFFLENBQUMsS0FBSztpQkFDcEYsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsVUFBVSxJQUFJLGtCQUFrQixDQUFDO1NBQ3BDO1FBRUQsSUFBSSxtQkFBbUIsRUFBRTtZQUNyQixNQUFNLHdCQUF3QixHQUFXLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEtBQUs7aUJBQ2hHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLFVBQVUsSUFBSSx3QkFBd0IsQ0FBQztTQUMxQztRQUVELElBQUksZUFBZSxFQUFFO1lBQ2pCLE1BQU0sb0JBQW9CLEdBQVcsVUFBVSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEtBQUs7aUJBQ3hGLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLFVBQVUsSUFBSSxvQkFBb0IsQ0FBQztTQUN0QztRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxlQUFlLFVBQVUsS0FBSyxDQUFDLENBQUM7SUFDeEcsQ0FBQzs7O1lBaEVKLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYztnQkFDeEIscUtBQStCO2dCQUMvQixJQUFJLEVBQUU7b0JBQ0YsaUNBQWlDLEVBQUUsTUFBTTtpQkFDNUM7YUFDRjs7O1lBckJDLFNBQVM7WUFIVCxVQUFVO1lBTUgsVUFBVTs7O3lCQXVCZCxLQUFLOzBCQUlMLEtBQUs7MEJBQ0wsU0FBUyxTQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIEFmdGVyVmlld0luaXQsXHJcbiAgQ29tcG9uZW50LFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgSW5wdXQsXHJcbiAgT25Jbml0LFxyXG4gIFJlbmRlcmVyMixcclxuICBWaWV3Q2hpbGRcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVGlSZW5kZXJlciB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3JlbmRlcmVyL1RpUmVuZGVyZXInO1xyXG5pbXBvcnQgeyBUaVBvc2l0aW9uVHlwZSB9IGZyb20gJy4uLy4uL3V0aWxzL1Bvc2l0aW9uJztcclxuXHJcbi8qKlxyXG4gKiBUaUNlbGxUZXh0IOihqOagvOWNleWFg+agvOS4reaUvue9ruaWh+acrOeahOWuueWZqOe7hOS7tlxyXG4gKlxyXG4gKiDmj5DkvpvmlofmnKzmuqLlh7rml7blh7rnnIHnlaXlj7cuLi4s5LiUaG92ZXLml7blh7p0aXDnmoTlip/og73jgIJcclxuICpcclxuICog6YWN5ZCIVGlDZWxsVGV4dOe7hOS7tuS9v+eUqOWPr+S9v+ihqOagvOWNleWFg+agvOS4reWGheWuueaYvuekuuS4jeS4i+aXtu+8jOaWh+acrOWHuuecgeeVpeWPty4uLixcclxuICog6ICM5paH5pys5ZCO55qE5pS+5ZyoVGlDZWxsSWNvbnPlm77moIflp4vnu4jlj6/ku6XmmL7npLrlh7rmnaVcclxuICpcclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAndGktY2VsbC10ZXh0JyxcclxuICB0ZW1wbGF0ZVVybDogJy4vY2VsbC10ZXh0Lmh0bWwnLFxyXG4gIGhvc3Q6IHtcclxuICAgICAgJ1tjbGFzcy50aTMtY2VsbC10ZXh0LWNvbnRhaW5lcl0nOiAndHJ1ZSdcclxuICB9XHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUaUNlbGxUZXh0Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICAvKipcclxuICAgICAqIOiuvue9ruaWh+acrOi2hemVv+aYvuekuuaXtlRpcOWGheWuuemhuVxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSB0aXBDb250ZW50OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIOiuvue9ruaWh+acrOi2hemVv+aYvuekuuaXtlRpcOS9jee9rlxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSB0aXBQb3NpdGlvbjogVGlQb3NpdGlvblR5cGU7XHJcbiAgICBAVmlld0NoaWxkKCd0ZXh0JywgeyBzdGF0aWM6IHRydWUgfSkgcHJpdmF0ZSBjZWxsVGV4dEVsZTogRWxlbWVudFJlZjtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxyXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSB0aVJlbmRlcmVyOiBUaVJlbmRlcmVyKSB7fVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRNYXhXaWR0aCgpO1xyXG4gICAgICAgIH0sIDApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0TWF4V2lkdGgoKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IG90aGVyV2lkdGg6IG51bWJlciA9IDA7XHJcbiAgICAgICAgY29uc3QgcGFyZW50OiBFbGVtZW50ID0gdGhpcy5yZW5kZXJlci5wYXJlbnROb2RlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICBjb25zdCBpY29uc0NvbnRhaW5lcjogRWxlbWVudCA9IHRoaXMudGlSZW5kZXJlci5maW5kQ2hpbGRyZW5CeUNsYXNzTmFtZShwYXJlbnQsICd0aTMtY2VsbC1pY29ucy1jb250YWluZXInKVswXTtcclxuICAgICAgICBjb25zdCBzb3J0Q29udGFpbmVyOiBFbGVtZW50ID0gdGhpcy50aVJlbmRlcmVyLmZpbmRDaGlsZHJlbkJ5Q2xhc3NOYW1lKHBhcmVudCwgJ3RpMy1zb3J0LWNvbnRhaW5lcicpWzBdO1xyXG4gICAgICAgIGNvbnN0IGhlYWRGaWx0ZXJDb250YWluZXI6IEVsZW1lbnQgPSB0aGlzLnRpUmVuZGVyZXIuZmluZENoaWxkcmVuQnlDbGFzc05hbWUocGFyZW50LCAndGkzLWhlYWQtZmlsdGVyLWNvbnRhaW5lcicpWzBdO1xyXG4gICAgICAgIGNvbnN0IHJlbmFtZUNvbnRhaW5lcjogRWxlbWVudCA9IHRoaXMudGlSZW5kZXJlci5maW5kQ2hpbGRyZW5CeVRhZ05hbWUocGFyZW50LCAnVFAtUkVOQU1FJylbMF07XHJcblxyXG4gICAgICAgIC8vIOS/ruWkjVNTUuaKpemUme+8mkVSUk9SIFR5cGVFcnJvcjogc29ydENvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgbm90IGEgZnVuY3Rpb25cclxuICAgICAgICBpZih0eXBlb2YgcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gJ2Z1bmN0aW9uJyl7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5L+u5aSNU1NS5oql6ZSZ77yaRVJST1IgVHlwZUVycm9yOiBDYW5ub3QgcmVhZCBwcm9wZXJ0eSAnZ2V0Qm91bmRpbmdDbGllbnRSZWN0JyBvZiB1bmRlZmluZWRcclxuICAgICAgICBpZiAoaWNvbnNDb250YWluZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgaWNvbnNDb250YWluZXJXaWR0aDogbnVtYmVyID0gcGFyc2VGbG9hdChpY29uc0NvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aFxyXG4gICAgICAgICAgICAgICAgLnRvRml4ZWQoMSkpO1xyXG4gICAgICAgICAgICBvdGhlcldpZHRoICs9IGljb25zQ29udGFpbmVyV2lkdGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc29ydENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBjb25zdCBzb3J0Q29udGFpbmVyV2lkdGg6IG51bWJlciA9IHBhcnNlRmxvYXQoc29ydENvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aFxyXG4gICAgICAgICAgICAgICAgLnRvRml4ZWQoMSkpO1xyXG4gICAgICAgICAgICBvdGhlcldpZHRoICs9IHNvcnRDb250YWluZXJXaWR0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChoZWFkRmlsdGVyQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhlYWRGaWx0ZXJDb250YWluZXJXaWR0aDogbnVtYmVyID0gcGFyc2VGbG9hdChoZWFkRmlsdGVyQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoXHJcbiAgICAgICAgICAgICAgICAudG9GaXhlZCgxKSk7XHJcbiAgICAgICAgICAgIG90aGVyV2lkdGggKz0gaGVhZEZpbHRlckNvbnRhaW5lcldpZHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJlbmFtZUNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBjb25zdCByZW5hbWVDb250YWluZXJXaWR0aDogbnVtYmVyID0gcGFyc2VGbG9hdChyZW5hbWVDb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGhcclxuICAgICAgICAgICAgICAgIC50b0ZpeGVkKDEpKTtcclxuICAgICAgICAgICAgb3RoZXJXaWR0aCArPSByZW5hbWVDb250YWluZXJXaWR0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5jZWxsVGV4dEVsZS5uYXRpdmVFbGVtZW50LCAnbWF4LXdpZHRoJywgYGNhbGMoMTAwJSAtICR7b3RoZXJXaWR0aH1weClgKTtcclxuICAgIH1cclxufVxyXG4iXX0=