import { Component, ElementRef, HostListener, Input, ViewChild } from '@angular/core';
import { Util } from '../../utils/Util';
import { TiFormComponent } from './TiFormComponent';
// 编译lib要求注册Component，不能用抽象类
/**
 * 单选/多选共同的基类。单选多选唯一的差异：单选只有在未选状态才接受空格键改变状态。
 */
export class TiRadioBaseComponent extends TiFormComponent {
    ngOnInit() {
        super.ngOnInit();
        this.creatId();
        this.setFocusableElems([this.proxyRef.nativeElement]);
        this.moveNode();
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.renderer.removeChild(this.renderer.parentNode(this.nativeElement), this.renderer.nextSibling(this.nativeElement));
    }
    /**
     * 将input子元素label，调整为兄弟元素。
     */
    moveNode() {
        const parentNode = this.renderer.parentNode(this.nativeElement);
        const nextNode = this.renderer.nextSibling(this.nativeElement);
        this.renderer.insertBefore(parentNode, this.labelRef.nativeElement, nextNode);
    }
    // Tiny3 TODO: 原始节点改为0高度，不显示。那么所有宿主元素focus都转移到proxy。
    // @HostListener('focus') onHostFocus() {
    //       Logger.log('onHostFocus');
    //       this.proxyNode.focus();
    //   }
    /**
     * @ignore
     * 点选元素后，聚集到对应的checkbox-skin
     * 经赵梦测试，这段逻辑，是为了解决radio火狐下tab键只聚焦不选中。
     * @param event 鼠标点击事件
     */
    onHostClick(event) {
        if (!this.nativeElement.disabled) {
            this.focusElem.focus();
        }
    }
    // 阻止事件冒泡：当子组件中有input元素时，change事件会冒泡到父组件
    // 问题：多选树模板包含复选框组件，树组件中有自己的change事件，点击复选框会触发两次change事件
    // 一次是树组件自身触发，一次是复选框组件冒泡，故需阻止该事件，例如下边代码会打印日志
    onHostChange(event) {
        event.stopPropagation();
    }
    /**
     * @ignore
     * 阻止checkbox-skin和checkbox-label的事件冒泡，防止上层dom绑定的事件被多次触发
     * 原因：span和label使用for和input关联，input上的click等事件也会触发span/label的事件处理，
     * 如果不做处理，上层dom绑定的事件会被触发两次
     * @param event 鼠标点击事件
     */
    onLabelClick(event) {
        event.stopPropagation();
    }
    /**
     * @ignore
     * 快捷键的处理(Enter和Space)：考虑到交互的友好性及与原生的一致性，
     * 在keyup中做相应的事件处理(keydown和keypress会存在一次点击，多次触发的情况);
     * 此外，需要阻止浏览器默认事件（空格键会触发页面滚动条滚到底部的行为，
     * 默认事件的阻止需要在keyup之前，因此此处在keydown中阻止）
     * @param event 键盘按键事件
     */
    onSpaceKeydown(event) {
        if (!this.nativeElement.disabled) {
            event.preventDefault();
        }
    }
    /**
     * @ignore
     * @param event 键盘按键事件
     */
    onSpaceKeyup(event) {
        if (!this.nativeElement.disabled && this.canChange()) {
            this.nativeElement.checked = !this.nativeElement.checked; // 设置元素的选中状态
            // this.cdRef.detectChanges();  执行并不能触发checked改变检查，所以只有下面的change事件才可以。
            // 触发check原生的change事件"createEvent" in document. 因为原生只有blur时才触发onchange
            Util.trigger(this.nativeElement, 'change');
        }
    }
    /**
     * @ignore
     * 这是单选多选唯一的差异：单选只有在未选状态才接受空格键改变状态。
     * @returns 默认返回true，多选框会继承这个方法。单选框重写这个方法。
     */
    canChange() {
        return true;
    }
} // end of class
TiRadioBaseComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-radiobase',
                template: ''
            },] }
];
TiRadioBaseComponent.propDecorators = {
    label: [{ type: Input }],
    labelRef: [{ type: ViewChild, args: ['labelRef', /* TODO: add static flag */ { static: true },] }],
    proxyRef: [{ type: ViewChild, args: ['proxyRef', /* TODO: add static flag */ { static: true },] }],
    onHostClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onHostChange: [{ type: HostListener, args: ['change', ['$event'],] }]
};
// Tiny3去除：不再操作宿主tabindex。取消input元素的tab聚焦行为(input 可聚焦情况下，tab键切换时会聚焦该元素)
// this.renderer.setAttribute(hostNode, 'tabindex', '-1'); // 经测试，display：none元素压根拿不到焦点。
// Tiny3去除：不再支持fosused属性。
// if ( this.nativeElement.focused !== this.hostAttrOld.focused) {
//   Logger.log('change hostAttrOld.focused');
//   if (this.nativeElement.focused) {
//       this.mySkinRef.nativeElement.focus();
//   }
//   this.hostAttrOld.focused = this.nativeElement.focused;
// Tiny3去除：增加对半选状态的支持。改为用户在模板上直接操作indeterminate
// const partialCheck = this.nativeElement.getAttribute('partialCheck');
// if (partialCheck !== this.hostAttrOld.partialCheck) {
//   Logger.log('change partialCheck=' + partialCheck);
//   this.nativeElement.indeterminate = partialCheck;
//   this.hostAttrOld.partialCheck = partialCheck;
// }
// Tiny3去除：event.which ||
//# sourceMappingURL=data:application/json;base64,