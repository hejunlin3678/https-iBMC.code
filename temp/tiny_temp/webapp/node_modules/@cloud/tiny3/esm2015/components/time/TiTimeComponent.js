import { Component, ElementRef, HostListener, Input, NgZone, Renderer2, ViewChild, Inject } from '@angular/core';
import { TiKeymap, Util } from '../../utils/Util';
import { TiLocale, TiLocaleFormat } from '../../locale/TiLocaleModule';
import { TiFormComponent } from '../base/TiBaseModule';
import { TiDropComponent } from '../drop/TiDropModule';
import { DOCUMENT } from '@angular/common';
/**
 * Time时间组件
 *
 * Time组件提供了一种方便的显示和设置时间的方式。
 *
 * <example-url>../tiny3demo/#/time/time-all</example-url>
 */
export class TiTimeComponent extends TiFormComponent {
    constructor(zone, hostRef, renderer2, document) {
        super(hostRef, renderer2);
        this.zone = zone;
        this.hostRef = hostRef;
        this.renderer2 = renderer2;
        this.document = document;
        /**
         * 是否展示清除时间图标（默认显示）
         *
         * 10.1.2新增接口
         */
        this.clearIcon = true;
        this.localeWords = TiLocale.getLocaleWords();
        /**
         * @ignore
         * time编辑框内部value值
         */
        this.inputValue = '';
        /**
         * @ignore
         * dominator最终显示时间值
         */
        this.timeValue = '';
        /**
         * @ignore
         * 时间下拉面板宽度，根据时间格式宽度各异
         */
        this.timePanelWidth = 284;
        /**
         * @ignore
         * 底部确认按钮是否禁用
         */
        this.buttonDisabled = true;
        /**
         * @ignore
         */
        this.oldInputValue = '';
        /**
         * @ignore
         * 面板与dominator的距离
         */
        this.dominatorSpace = '-30px';
        this.keydownHandlerFn = (event) => {
            if (event.keyCode === TiKeymap.KEY_ESCAPE) {
                this.hidePanel();
            }
        };
    }
    /**
     * @description: 若时间字符串没有一个冒号时处理成合法的事件字符串（加冒号）
     * @param value 时间字符串
     */
    static addColon(value) {
        // new Date()时，时间中没有一个冒号得到的是非法时间
        if (value.match(/:/)) {
            return value;
        }
        let ampm = value.match(/am|AM|pm|PM/);
        ampm = ampm || '';
        return `${parseInt(value, 10)}: ${ampm}`;
    }
    /**
     * @description 判读字符串是否是合法的时间
     * @param: time: 校验的时间
     */
    static isValidTime(time) {
        // value非字符串或者为空字符串时，为非法时间
        if (!Util.isString(time) || time.trim() === '') {
            return false;
        }
        const date = new Date(`2018/5/15 ${TiTimeComponent.addColon(time)}`);
        // any类型是为了防止编译报错 Date类型不能和string类型比较
        return !(String(date) === 'Invalid Date');
    }
    /**
     * @description: hh/HH/mm/ss 时间格式时，显示的值处理成2位，不足2位补0
     * @param: num : 各个时间显示框的数值
     * @param: length : 需要处理之后的长度
     */
    static addZero(num, length) {
        const zeroNum = `00${num}`;
        return zeroNum.substr(zeroNum.length - length, length);
    }
    /**
     * @description newVal参数为合法值时返回newVal，否则返回defaultValue参数
     * @param: newVal:新值
     * @param: defaultValue:默认值
     */
    static verifyTime(newVal, defaultValue) {
        return TiTimeComponent.isValidTime(newVal) ? newVal : defaultValue;
    }
    /**
     * @description 比较value1和value2两个时间值大小.value1 < value2时，返回true；否则返回false  ；
     * @param: value1:比较的前一个值
     * @param: value2:比较的后一个值
     */
    static isSmaller(value1, value2) {
        return Date.parse(`2018/5/15 ${TiTimeComponent.addColon(value1)}`) < Date.parse(`2018/5/15 ${TiTimeComponent.addColon(value2)}`);
    }
    /**
     * @description 比较value1和value2两个时间值大小.value1 > value2时，返回true；否则返回false  ；
     * @param: value1:比较的前一个值
     * @param: value2:比较的后一个值
     */
    static isBigger(value1, value2) {
        return Date.parse(`2018/5/15 ${TiTimeComponent.addColon(value1)}`) > Date.parse(`2018/5/15 ${TiTimeComponent.addColon(value2)}`);
    }
    /**
     * @description 比较value1和value2两个时间值大小.value1 <= value2时，返回true；否则返回false  ；
     * @param: value1:比较的前一个值
     * @param: value2:比较的后一个值
     */
    static isSmallerOrEqual(value1, value2) {
        return Date.parse(`2018/5/15 ${TiTimeComponent.addColon(value1)}`) <= Date.parse(`2018/5/15 ${TiTimeComponent.addColon(value2)}`);
    }
    /**
     * @description 比较value1和value2两个时间值大小.value1 >= value2时，返回true；否则返回false  ；
     * @param: value1:比较的前一个值
     * @param: value2:比较的后一个值
     */
    static isBiggerOrEqual(value1, value2) {
        return Date.parse(`2018/5/15 ${TiTimeComponent.addColon(value1)}`) >= Date.parse(`2018/5/15 ${TiTimeComponent.addColon(value2)}`);
    }
    // 组件声明周期钩子--start
    ngOnInit() {
        super.ngOnInit();
        // 初始化变量
        this.initVariable();
        // 最大最小值校验
        this.validateMaxAndMin();
        this.showTimeWithFormat();
        this.setTimeOptions();
        this.placeholder = this.format;
        this.zone.runOutsideAngular(() => {
            // document上的Ecs快捷键功能
            this.documentKeydownListener = this.renderer2.listen(this.document, 'keydown', this.keydownHandlerFn);
        });
    }
    setTimeOptions() {
        this.hourOptions = this.setOptions(24, 'hour');
        this.minuteOptions = this.setOptions(60, 'minute');
        this.secondOptions = this.setOptions(60, 'second');
    }
    // 根据格式format判断面板展示情况
    showTimeWithFormat() {
        // 纯小时
        if (this.format.indexOf('m') === -1) {
            this.onlyHour = true;
        }
        else if (this.format.indexOf('s') === -1) { // 仅时分
            this.onlyHourMinute = true;
        }
    }
    initVariable() {
        // 1. 时间格式校验
        this.format = Util.isString(this.format) ? this.format : this.localeWords.tiLocaleDate['time'];
    }
    validateMaxAndMin() {
        const defaultMaxValue = '23:59:59';
        const defaultMinValue = '00:00:00';
        // 最大值合法性校验
        this.max = TiTimeComponent.verifyTime(this.max, defaultMaxValue);
        // 最小值合法性校验
        this.min = TiTimeComponent.verifyTime(this.min, defaultMinValue);
        // 最大最小值矛盾时，设置为默认值
        if (TiTimeComponent.isSmaller(this.max, this.min)) {
            this.min = defaultMinValue;
            this.max = defaultMaxValue;
        }
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        // 1.0 minValue监控
        if (changes['min'] && !changes['min'].isFirstChange()) {
            // 新minValue值非法时，恢复到之前值
            if (!this.isValidMinValue(changes['min'].currentValue)) {
                this.min = changes['min'].previousValue;
                return;
            }
            // 对value值进行最小值校验
            setTimeout(() => {
                if (TiTimeComponent.isValidTime(this.model) && TiTimeComponent.isSmaller(this.model, this.min)) {
                    this.model = this.min;
                    this.formatValue();
                }
                this.setDisableData();
            }, 0);
        }
        // 2.0 maxValue监控
        if (changes['max'] && !changes['max'].isFirstChange()) {
            // 新maxValue值非法时，恢复到之前值
            if (!this.isValidMaxValue(changes['max'].currentValue)) {
                this.max = changes['max'].previousValue;
                return;
            }
            // 对value值进行最小值校验
            setTimeout(() => {
                if (TiTimeComponent.isValidTime(this.model) && TiTimeComponent.isBigger(this.model, this.max)) {
                    this.model = this.max;
                    this.formatValue();
                }
                this.setDisableData();
            }, 0);
        }
        // 3.0 format监控
        if (changes['format'] && !changes['format'].isFirstChange()) {
            // 新format值非法时，恢复到之前值
            if (!Util.isString(changes['format'].currentValue)) {
                this.format = changes['format'].previousValue;
                return;
            }
            this.showTimeWithFormat();
            if (TiTimeComponent.isValidTime(this.model)) {
                this.formatValue();
            }
        }
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        setTimeout(() => {
            this.dominatorCom = this.containerRef.nativeElement;
            this.setFocusableElems([this.dominatorCom]
                .concat(this.dropCom.nativeElement)
                .concat(this.textCom.nativeElement)
                .concat(this.inputEle.nativeElement)
                .concat(this.buttonEle.nativeElement));
        }, 0);
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        if (this.documentKeydownListener) {
            this.documentKeydownListener();
        }
    }
    // 组件声明周期钩子--end
    // 实现ControlValueAccessor接口
    /**
     * @ignore
     */
    writeValue(value) {
        super.writeValue(value);
        if (value === '' || !this.isValidValue(value)) {
            this.model = '';
            this.buttonDisabled = true;
            this.setDisableData();
            return;
        }
        this.buttonDisabled = false;
        this.model = value;
        this.formatValue();
        this.setDisableData();
    }
    // 实现ControlValueAccessor接口--end
    /**
     * @ignore
     * @description: 组件整体失焦之后处理函数
     */
    onBlur() {
        // 失焦后下拉关闭
        this.hidePanel();
        this.inputValue = this.model;
        this.setDisableData();
        this.setSelectVal();
        this.getScrollData();
    }
    // 面板延迟200ms关闭,用户输入新值之后，直接点击确认按钮关闭面板时，
    // 面板内部选中项先刷新 再关闭 200ms的延迟 用户可以看到这样一个视觉的过程
    // 200ms通过本地用例，跟规范侧共同决定的一个延时数值
    hidePanel() {
        setTimeout(() => {
            this.dropCom.hide();
            // 初始化数据，保证有时间值时，初次打开数据定位在顶部
            this.hourScroll = -1;
            this.minuteScroll = -1;
            this.secondScroll = -1;
        }, 200);
    }
    /**
     * @ignore
     * 点击dominator打开面板
     */
    onShowClick() {
        if (this.disabled) {
            return;
        }
        if (this.isClearClick) {
            this.isClearClick = false;
            return;
        }
        this.getScrollData();
        this.dropCom.show();
        this.textCom.nativeElement.focus();
        this.buttonDisabled = !this.model;
    }
    /**
     * @ignore
     * 点击确认按钮关闭面板
     */
    okClickFn() {
        this.timeValue = this.inputValue;
        this.model = this.inputValue;
        // 记录旧值，当输入非法时，返回之前合法值
        this.oldInputValue = this.inputValue;
        this.containerRef.nativeElement.focus();
        this.hidePanel();
    }
    /**
     * @ignore
     * 时间面板点击选择事件
     * @param val
     * @param title
     */
    onSelect(val, title) {
        // 禁用状态
        if (val.disabled) {
            return;
        }
        const arr = this.onlyHour ? ['00'] : this.onlyHourMinute ? ["00", "00"] : ["00", "00", "00"];
        const timeArr = this.inputValue === '' ? arr : this.inputValue.split(':');
        switch (title) {
            case 'hour':
                timeArr[0] = val.label;
                this.hourScroll = val.label * 30;
                break;
            case 'minute':
                timeArr[1] = val.label;
                this.minuteScroll = val.label * 30;
                break;
            case 'second':
                timeArr[2] = val.label;
                this.secondScroll = val.label * 30;
                break;
            default:
                break;
        }
        this.inputValue = timeArr.join(':');
        this.setSelectVal();
        this.oldInputValue = this.inputValue;
        this.buttonDisabled = false;
        this.setDisableData();
    }
    setSelectVal() {
        if (!TiTimeComponent.isValidTime(this.inputValue)) {
            this.selectedHour = null;
            this.selectedMinute = null;
            this.selectedSecond = null;
            return;
        }
        if (TiTimeComponent.isSmaller(this.inputValue, this.min)) {
            this.inputValue = this.min;
        }
        if (TiTimeComponent.isBigger(this.inputValue, this.max)) {
            this.inputValue = this.max;
        }
        const newtimeArr = this.inputValue.split(':');
        const hourVal = TiTimeComponent.addZero(Number(newtimeArr[0]), 2);
        const minuteVal = TiTimeComponent.addZero(Number(newtimeArr[1]), 2);
        const secondVal = TiTimeComponent.addZero(Number(newtimeArr[2]), 2);
        this.selectedHour = this.getSelectedVal(this.hourOptions, hourVal);
        this.selectedMinute = this.getSelectedVal(this.minuteOptions, minuteVal);
        this.selectedSecond = this.getSelectedVal(this.secondOptions, secondVal);
        // 失焦之后，个位的数字需补零
        if (this.onlyHour) {
            this.inputValue = hourVal;
        }
        else if (this.onlyHourMinute) {
            this.inputValue = hourVal + ':' + minuteVal;
        }
        else {
            this.inputValue = hourVal + ':' + minuteVal + ':' + secondVal;
        }
        this.getScrollData();
    }
    /**
     * 组件快捷键处理tab键 enter键
     */
    onKeydown(event) {
        switch (event.keyCode) {
            case TiKeymap.KEY_ENTER: // ENTER键(大键盘)
            case TiKeymap.KEY_NUMPAD_ENTER: // ENTER键(数字小键盘)
                this.responseEnter();
                break;
            default:
                break;
        }
    }
    /**
     * @ignore
     * enter键的功能：如果面板展开不处理，面板收起则展开，设置datePanel指令的接口值
     */
    responseEnter() {
        if (this.dropCom.isShow) {
            return;
        }
        this.getScrollData();
        // 时间面板展开
        this.dropCom.show();
        this.textCom.nativeElement.focus();
    }
    /**
     * @ignore
     * 输入为中文冒号时，自动转换为英文冒号
     * @param val
     */
    onInputChangeFn(val) {
        if (!Util.isEmptyString(val)) {
            let value = val;
            value = value.replace('：', ':');
            this.inputValue = value;
        }
        else {
            this.buttonDisabled = true;
        }
    }
    /**
     * @ignore
     * 时间框enter事件
     */
    timeKeydownFn(event, val) {
        if (event.keyCode === TiKeymap.KEY_ENTER || event.keyCode === TiKeymap.KEY_NUMPAD_ENTER) {
            this.timeBlur(val);
        }
    }
    timeBlur(val) {
        if (val === '') {
            this.buttonDisabled = true;
            this.inputValue = '';
            this.oldInputValue = this.inputValue;
            this.getScrollData();
            return;
        }
        // 区分中英文冒号
        const reg = new RegExp('[\\:\\：]');
        let timeArr = val.split(reg);
        const formatArr = this.format.split(':');
        // 用户输入与format不匹配时，按照非法字符处理
        if (timeArr.length !== formatArr.length) {
            this.inputValue = this.oldInputValue;
            return;
        }
        timeArr.forEach((item) => {
            if ((item < 0 || item > 59) || isNaN(Number(item)) || parseInt(item, 10) !== Number(item)) {
                this.inputValue = this.oldInputValue;
                if (Util.isEmptyString(this.inputValue)) {
                    this.buttonDisabled = false;
                }
                return;
            }
        });
        this.oldInputValue = this.inputValue;
        this.buttonDisabled = false;
        this.setSelectVal();
        this.getScrollData();
        this.setDisableData();
    }
    // 获取滚动值
    getScrollData() {
        if (Util.isEmptyString(this.inputValue)) {
            this.hourScroll = 0;
            this.minuteScroll = 0;
            this.secondScroll = 0;
        }
        else {
            const reg = new RegExp('[\\:\\：]');
            const timeArr = this.inputValue.split(reg);
            this.hourScroll = timeArr[0] * 30;
            this.minuteScroll = timeArr[1] * 30;
            this.secondScroll = timeArr[2] * 30;
        }
    }
    /**
     * @ignore
     * 清除
     */
    onIconClearClick() {
        if (this.disabled || !this.clearIcon) {
            return;
        }
        this.inputValue = '';
        this.oldInputValue = '';
        this.timeValue = '';
        this.model = '';
        this.selectedHour = null;
        this.selectedMinute = null;
        this.selectedSecond = null;
        this.buttonDisabled = true;
        this.isClearClick = true;
        this.setDisableData();
    }
    getSelectedVal(options, val) {
        return options.find((item) => {
            if (!item.disabled && item.label === val) {
                return item;
            }
            else {
                return null;
            }
        });
    }
    setOptions(num, labelKey) {
        const options = [];
        for (let i = 0; i < num; i++) {
            options[i] = {
                label: TiTimeComponent.addZero(i, 2),
                disabled: false
            };
        }
        return options;
    }
    setDisableData() {
        if (this.max === '23:59:59' && this.min === '00:00:00') {
            return false;
        }
        const maxArr = this.max.split(':');
        const minArr = this.min.split(':');
        const timeArr = this.inputValue.split(':');
        // 根据最大最小值判定小时禁用项
        this.hourOptions.forEach((item) => {
            item.disabled = Number(item.label) < Number(minArr[0]) || Number(item.label) > Number(maxArr[0]);
        });
        // 最小小时情况,需考虑分钟禁用
        if (Number(timeArr[0]) === Number(minArr[0])) {
            this.minuteOptions.forEach((minuteItem) => {
                minuteItem.disabled = Number(minuteItem.label) < Number(minArr[1]);
            });
        }
        // 最大小时情况,需考虑分钟禁用
        if (Number(timeArr[0]) === Number(maxArr[0])) {
            this.minuteOptions.forEach((minuteItem) => {
                minuteItem.disabled = Number(minuteItem.label) > Number(maxArr[1]);
            });
        }
        // 最小时分情况,需考虑秒数禁用
        if (Number(timeArr[0]) === Number(minArr[0]) && Number(timeArr[1]) === Number(minArr[1])) {
            this.secondOptions.forEach((secondItem) => {
                secondItem.disabled = Number(secondItem.label) < Number(minArr[2]);
            });
        }
        else if (Number(timeArr[0]) === Number(maxArr[0]) && Number(timeArr[1]) === Number(maxArr[1])) { // 最大时分情况,需考虑秒数禁用
            this.secondOptions.forEach((secondItem) => {
                secondItem.disabled = Number(secondItem.label) > Number(maxArr[2]);
            });
        }
        else {
            this.secondOptions.forEach((secondItem) => {
                secondItem.disabled = false;
            });
        }
        // 非临界值(最大最小小时)时需复原
        if (Number(timeArr[0]) !== Number(minArr[0]) && Number(timeArr[0]) !== Number(maxArr[0])) {
            this.minuteOptions.forEach((minuteItem) => {
                minuteItem.disabled = false;
            });
        }
    }
    /**
    * @ignore
    * 时间选择框部分鼠标移出时去除hover样式
    */
    onMouseleave(listCom) {
        listCom.hoverOption = null;
    }
    // 组件交互方法集合--end
    // 内部公共方法集合--start
    /**
     * @description:最大值最小值检验
     */
    validateValue() {
        // 最小值校验
        if (TiTimeComponent.isSmaller(this.model, this.min)) {
            this.model = this.min;
        }
        // 最大值校验
        if (TiTimeComponent.isBigger(this.model, this.max)) {
            this.model = this.max;
        }
    }
    /**
     * @description: 时间格式化及时间各个框显示值设置
     */
    formatValue() {
        // 格式化value
        const date = new Date(`2018/5/15 ${TiTimeComponent.addColon(this.model)}`);
        const formatStr = TiLocaleFormat.formatTime(date, this.format);
        if (this.model !== formatStr) {
            this.model = formatStr;
        }
        this.timeValue = this.model;
        this.inputValue = this.model;
        this.oldInputValue = this.inputValue;
        const timeArr = this.inputValue.split(':');
        this.selectedHour = this.getSelectedVal(this.hourOptions, TiTimeComponent.addZero(Number(timeArr[0]), 2));
        this.selectedMinute = this.getSelectedVal(this.minuteOptions, TiTimeComponent.addZero(Number(timeArr[1]), 2));
        this.selectedSecond = this.getSelectedVal(this.secondOptions, TiTimeComponent.addZero(Number(timeArr[2]), 2));
    }
    /**
     * @description: 校验动态更新的minValue是否是合法值
     * @param: minValue:动态更新的传入的minValue
     */
    isValidMinValue(minValue) {
        return TiTimeComponent.isValidTime(minValue) && TiTimeComponent.isSmallerOrEqual(minValue, this.max);
    }
    /**
     * @description: 校验动态更新的maxValue是否是合法值
     * @param: maxValue:动态更新的传入的maxValue
     */
    isValidMaxValue(maxValue) {
        return TiTimeComponent.isValidTime(maxValue) && TiTimeComponent.isBiggerOrEqual(maxValue, this.min);
    }
    /**
     * @description: 判断动态更新写入组件的value值是否是一个合法值
     * @param: value 动态更新写入组件的value值
     */
    isValidValue(value) {
        return TiTimeComponent.isValidTime(value) &&
            TiTimeComponent.isBiggerOrEqual(value, this.min) &&
            TiTimeComponent.isSmallerOrEqual(value, this.max);
    }
}
TiTimeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-time',
                template: "<ti-date-dominator #dominator\r\n    [id]=\"appendId('dominator')\"\r\n    [clearable]=\"clearIcon\"\r\n    [disabled]=\"disabled\"\r\n    [isTime]='true'\r\n    [(ngModel)]=\"timeValue\"\r\n    (clear)=\"onIconClearClick()\"\r\n    (click)=\"onShowClick()\">{{ placeholder }}</ti-date-dominator>\r\n\r\n<ti-drop #drop [dominatorElem]=\"dominatorCom\"\r\n    [dominatorSpace]='dominatorSpace'\r\n    fixMaxHeight=\"true\"\r\n    [panelWidth]=\"timePanelWidth\" class='ti3-time-drop-container'\r\n    [id]=\"appendId('drop')\">\r\n    <input class='ti3-time-edit'\r\n                    type=\"text\"\r\n                    [(ngModel)]='inputValue'\r\n                    (ngModelChange)='onInputChangeFn($event)'\r\n                    (blur)='timeBlur(inputValue)'\r\n                    maxlength=\"8\"\r\n                    (keydown)='timeKeydownFn($event, inputValue)'\r\n                    [id]=\"appendId('input')\"\r\n                    #text\r\n                    tiText/>\r\n                    <!-- \u786E\u8BA4\u6309\u94AE\u7981\u7528\u573A\u666F\u4E0B\uFF0C\u65F6\u95F4\u8F93\u5165\u4E4B\u540E\u65E0\u6CD5\u76F4\u63A5tab\u5207\u6362\u7126\u70B9\u81F3\u786E\u8BA4\u6309\u94AE\uFF0C\u6545\u6DFB\u52A0\u6B64\u8FC7\u5EA6input -->\r\n                    <input #input type=\"text\"\r\n                    [ngClass]=\"{'ti3-time-edit-with-button-disabled': buttonDisabled,\r\n                    'ti3-time-edit-with-button-undisabled': !buttonDisabled}\"\r\n                    class=\"ti3-time-tab-input\"/>\r\n    <section class='ti3-time-select-container'>\r\n        <!-- \u65F6 -->\r\n        <div class='ti3-time-select-item-container'>\r\n            <span class='ti3-time-select-title'>{{ 'tiDate.hour' | tiTranslate }}</span>\r\n            <ti-list #hourContainer class='ti3-time-select-list' [options]='hourOptions'\r\n                [(ngModel)]=\"selectedHour\"\r\n                [scrollTop]='hourScroll'\r\n                (select)=\"onSelect($event, 'hour')\"\r\n                (mouseleave)=\"onMouseleave(hourContainer)\"\r\n                [id]=\"appendId('list_hour')\"></ti-list>\r\n        </div>\r\n        <!-- \u5206 -->\r\n        <div class='ti3-time-select-item-container' *ngIf=\"!onlyHour\">\r\n            <span class='ti3-time-select-title'>{{ 'tiDate.minute' | tiTranslate }}</span>\r\n           <ti-list #minuteContainer class='ti3-time-select-list' [options]='minuteOptions'\r\n           [(ngModel)]=\"selectedMinute\"\r\n           [scrollTop]='minuteScroll'\r\n           (select)=\"onSelect($event, 'minute')\"\r\n           (mouseleave)=\"onMouseleave(minuteContainer)\"\r\n           [id]=\"appendId('list_minute')\"></ti-list>\r\n        </div>\r\n        <!-- \u79D2 -->\r\n        <div class='ti3-time-select-item-container' *ngIf='!onlyHour && !onlyHourMinute'>\r\n            <span class='ti3-time-select-title'>{{ 'tiDate.second' | tiTranslate }}</span>\r\n            <ti-list #secondContainer class='ti3-time-select-list' [options]='secondOptions'\r\n            [(ngModel)]=\"selectedSecond\"\r\n            [scrollTop]='secondScroll'\r\n            (select)=\"onSelect($event, 'second')\"\r\n            (mouseleave)=\"onMouseleave(secondContainer)\"\r\n            [id]=\"appendId('list_second')\"></ti-list>\r\n        </div>\r\n    </section>\r\n    <div class='ti3-time-button-confirm'>\r\n        <button #button tiButton size=\"small\" [disabled]=\"buttonDisabled\" (click)='okClickFn()' [id]=\"appendId('button')\">{{ 'tiCommon.okBtn' | tiTranslate }}</button>\r\n    </div>\r\n</ti-drop>\r\n",
                providers: [TiFormComponent.getValueAccessor(TiTimeComponent)],
                host: {
                    '[class.ti3-time-container]': 'true',
                    '(blur)': 'onBlur()'
                },
                styles: [".ti3-compnent-container-border,:host.ti3-time-container{-ms-box-sizing:border-box;border:1px solid;border-radius:var(--ti-input-border-radius);box-sizing:border-box;display:inline-block}.ti3-compnent-container-border:not([disabled]),:host.ti3-time-container:not([disabled]){background-color:var(--ti-input-bg-color);border-color:var(--ti-input-border-color)}.ti3-compnent-container-border:not([disabled]):hover,:host.ti3-time-container:not([disabled]):hover{border-color:var(--ti-input-border-color-hover)}.ti3-compnent-container-border:not([disabled])[tiFocused],:host.ti3-time-container:not([disabled])[tiFocused]{border-color:var(--ti-input-border-color-focus)}.ti3-compnent-container-border[disabled],:host.ti3-time-container[disabled]{background-color:var(--ti-input-bg-color-disabled);border-color:var(--ti-input-border-color-disabled);cursor:not-allowed!important}:host.ti3-time-container{width:120px}::ng-deep :root .ti3-time-drop-container:focus{outline:0}:host.ti3-time-container{-ms-box-sizing:border-box;-ms-user-select:none;-webkit-user-select:none;background-color:var(--ti-input-bg-color);border:1px solid var(--ti-input-border-color);border-radius:var(--ti-input-border-radius);box-sizing:border-box;display:inline-block;font-size:var(--ti-common-font-size-base);height:var(--ti-input-height);line-height:normal;position:relative;user-select:none;vertical-align:middle}.ti3-time-select-container{border:1px solid var(--ti-common-color-line-dividing);display:flex;justify-content:space-around}.ti3-time-select-item-container{border-right:1px solid var(--ti-common-color-line-dividing);width:100%}.ti3-time-select-item-container:last-child{border-right:none}::ng-deep :root .ti3-time-select-list{height:230px;overflow-y:auto;width:100%}::ng-deep :root .ti3-time-select-list li{margin-top:0;text-align:center}.ti3-time-drop-container{height:365px;padding:var(--ti-common-space-3x) var(--ti-common-space-4x)}.ti3-time-edit{display:block;margin-bottom:var(--ti-common-space-3x);width:100%}::ng-deep .ti3-time-edit{border-color:var(--ti-input-border-color-focus)!important}.ti3-time-select-title{display:block;height:30px;line-height:30px;margin-left:-6px;text-align:center;width:100%}.ti3-time-button-confirm{float:right;margin-top:var(--ti-common-space-3x)}::ng-deep .ti3-time-edit-with-button-disabled{opacity:0}::ng-deep .ti3-time-edit-with-button-undisabled{display:none}.ti3-time-tab-input{height:0;left:-9999px;position:absolute;top:-9999px;width:0}"]
            },] }
];
TiTimeComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ElementRef },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
TiTimeComponent.propDecorators = {
    format: [{ type: Input }],
    max: [{ type: Input }],
    min: [{ type: Input }],
    clearIcon: [{ type: Input }],
    containerRef: [{ type: ViewChild, args: ['dominator', { static: true },] }],
    dropCom: [{ type: ViewChild, args: [TiDropComponent, { static: true },] }],
    textCom: [{ type: ViewChild, args: ['text', { static: true },] }],
    inputEle: [{ type: ViewChild, args: ['input', { static: true },] }],
    buttonEle: [{ type: ViewChild, args: ['button', { static: true },] }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,