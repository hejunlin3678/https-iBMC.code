import { TiLeftmenuComponent } from './TiLeftmenuComponent';
import { Component, ElementRef, Renderer2 } from '@angular/core';
export class TiLeftmenuFootComponent {
    constructor(renderer2, elementRef, tiLeftmenu) {
        this.renderer2 = renderer2;
        this.elementRef = elementRef;
        this.tiLeftmenu = tiLeftmenu;
    }
    ngAfterViewInit() {
        const templateDom = this.renderer2.createElement('div');
        const panelDom = this.tiLeftmenu.nativeElement.querySelector('.ti3-leftmenu-panel');
        const hostElement = this.elementRef.nativeElement;
        // 修复SSR错误：ERROR ReferenceError: getComputedStyle is not defined
        const spaceRight = typeof getComputedStyle === 'function' ? getComputedStyle(hostElement).getPropertyValue('stroke-width') : '0';
        this.renderer2.setStyle(templateDom, 'height', hostElement.offsetHeight + 'px');
        this.renderer2.appendChild(panelDom, templateDom);
        this.renderer2.setStyle(hostElement, 'width', `calc(100% - ${this.tiLeftmenu.scrollWidth}px)`);
        this.renderer2.setStyle(hostElement, 'marginRight', `${this.tiLeftmenu.scrollWidth}px`);
        this.renderer2.setStyle(hostElement, 'paddingRight', `calc(${spaceRight} - ${this.tiLeftmenu.scrollWidth}px)`);
    }
}
TiLeftmenuFootComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-leftmenu-foot',
                template: "<ng-content></ng-content>",
                host: {
                    '[class.ti3-leftmenu-foot]': 'true'
                }
            },] }
];
TiLeftmenuFootComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: TiLeftmenuComponent }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGlMZWZ0bWVudUZvb3RDb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9AY2xvdWQvdGlueTMvY29tcG9uZW50cy9sZWZ0bWVudS9UaUxlZnRtZW51Rm9vdENvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFTakUsTUFBTSxPQUFPLHVCQUF1QjtJQUNoQyxZQUFvQixTQUFvQixFQUFVLFVBQXNCLEVBQVUsVUFBK0I7UUFBN0YsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUFVLGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFxQjtJQUFHLENBQUM7SUFFckgsZUFBZTtRQUNYLE1BQU0sV0FBVyxHQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdELE1BQU0sUUFBUSxHQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3pGLE1BQU0sV0FBVyxHQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBQ3ZELGdFQUFnRTtRQUNoRSxNQUFNLFVBQVUsR0FBVyxPQUFPLGdCQUFnQixLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUV6SSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLFdBQVcsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDaEYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRWxELElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsZUFBZSxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsS0FBSyxDQUFDLENBQUM7UUFDL0YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLGFBQWEsRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQztRQUN4RixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsY0FBYyxFQUFFLFFBQVEsVUFBVSxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxLQUFLLENBQUMsQ0FBQztJQUNuSCxDQUFDOzs7WUF4QkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLHFDQUFtQztnQkFDbkMsSUFBSSxFQUFFO29CQUNGLDJCQUEyQixFQUFFLE1BQU07aUJBQ3RDO2FBQ0o7OztZQVArQixTQUFTO1lBQXJCLFVBQVU7WUFEckIsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGlMZWZ0bWVudUNvbXBvbmVudCB9IGZyb20gJy4vVGlMZWZ0bWVudUNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd0aS1sZWZ0bWVudS1mb290JyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9sZWZ0bWVudS1mb290Lmh0bWwnLFxyXG4gICAgaG9zdDoge1xyXG4gICAgICAgICdbY2xhc3MudGkzLWxlZnRtZW51LWZvb3RdJzogJ3RydWUnXHJcbiAgICB9XHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgVGlMZWZ0bWVudUZvb3RDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHRpTGVmdG1lbnU6IFRpTGVmdG1lbnVDb21wb25lbnQpIHt9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHRlbXBsYXRlRG9tOiBhbnkgPSB0aGlzLnJlbmRlcmVyMi5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBjb25zdCBwYW5lbERvbTogYW55ID0gdGhpcy50aUxlZnRtZW51Lm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignLnRpMy1sZWZ0bWVudS1wYW5lbCcpO1xyXG4gICAgICAgIGNvbnN0IGhvc3RFbGVtZW50OiBhbnkgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcclxuICAgICAgICAvLyDkv67lpI1TU1LplJnor6/vvJpFUlJPUiBSZWZlcmVuY2VFcnJvcjogZ2V0Q29tcHV0ZWRTdHlsZSBpcyBub3QgZGVmaW5lZFxyXG4gICAgICAgIGNvbnN0IHNwYWNlUmlnaHQ6IHN0cmluZyA9IHR5cGVvZiBnZXRDb21wdXRlZFN0eWxlID09PSAnZnVuY3Rpb24nID8gZ2V0Q29tcHV0ZWRTdHlsZShob3N0RWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZSgnc3Ryb2tlLXdpZHRoJykgOiAnMCc7XHJcblxyXG4gICAgICAgIHRoaXMucmVuZGVyZXIyLnNldFN0eWxlKHRlbXBsYXRlRG9tLCAnaGVpZ2h0JywgaG9zdEVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgJ3B4Jyk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlcjIuYXBwZW5kQ2hpbGQocGFuZWxEb20sIHRlbXBsYXRlRG9tKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZW5kZXJlcjIuc2V0U3R5bGUoaG9zdEVsZW1lbnQsICd3aWR0aCcsIGBjYWxjKDEwMCUgLSAke3RoaXMudGlMZWZ0bWVudS5zY3JvbGxXaWR0aH1weClgKTtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyMi5zZXRTdHlsZShob3N0RWxlbWVudCwgJ21hcmdpblJpZ2h0JywgYCR7dGhpcy50aUxlZnRtZW51LnNjcm9sbFdpZHRofXB4YCk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlcjIuc2V0U3R5bGUoaG9zdEVsZW1lbnQsICdwYWRkaW5nUmlnaHQnLCBgY2FsYygke3NwYWNlUmlnaHR9IC0gJHt0aGlzLnRpTGVmdG1lbnUuc2Nyb2xsV2lkdGh9cHgpYCk7XHJcbiAgICB9XHJcbn1cclxuIl19