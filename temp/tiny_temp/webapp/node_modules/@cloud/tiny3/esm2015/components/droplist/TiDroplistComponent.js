import { Component, ContentChild, ElementRef, EventEmitter, Input, NgZone, Output, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { TiFormComponent } from '../base/TiBaseModule';
import { TiDropComponent } from '../drop/TiDropModule';
import { TiListComponent } from '../list/TiListModule';
import { TiKeymap } from '../../utils/Util';
/**
 * @ignore
 * 下拉面板带有数组列表组件，用于aucomplete等。它有子类TiDropsearchComponent
 */
export class TiDroplistComponent extends TiFormComponent {
    constructor(render, hostRef, zone) {
        super(hostRef, render);
        this.render = render;
        this.zone = zone;
        /**
         * 默认高度8条 DEFAULT_LIST_MAX_HEIGHT
         */
        this.defaultListMaxHeight = 30 * 8 + 8;
        /**
         * 面板中，除去list外，其它元素的占位高度
         */
        this.heightExcludeList = 2;
        /**
         * drop面板自定义底部高度
         */
        this.footerHeight = 0;
        /**
         * 是否多选
         */
        this.multiple = false;
        /**
         * 下拉面板的最大显示宽度，该变量与下拉类组件保持一致
         *
         * 1."justified"(默认): 下拉框的宽度与Select组件的宽度保持一致；
         *
         * 2."auto": 下拉框的宽度根据下拉选项的内容自动撑开；
         *
         * 3.表示宽度的字符串: 设置固定的下拉框宽度(不小于Select组件的宽度)。例如："200px"
         */
        this.panelWidth = 'justified';
        this.labelKey = 'label';
        this.noDataText = '...';
        this.tipPosition = 'right';
        this.dominatorSpace = TiDropComponent.DOMINATOR_SPACE + 'px'; // 10.0.1新增
        this.panelAlign = 'left'; // 10.0.1新增
        /**
         * 内部接口，用作suggestion时type传入suggestion，默认值default
         */
        this.type = 'default';
        /**
         * 大小样式，default/small. 默认值default
         */
        this.size = 'default';
        /**
         * 选中选项后面板是否保持显示， 默认值false
         */
        this.isShowAfterSelect = false;
        /**
         * 选中事件，向外通知option数据
         */
        // tslint:disable-next-line:no-output-named-after-standard-event
        this.select = new EventEmitter();
        /**
         * 储存donimator bottom旧值
         */
        this.dominatorLastBottom = undefined;
        /**
         * 储存donimator left旧值
         */
        this.dominatorLastLeft = undefined;
    }
    ngOnInit() {
        super.ngOnInit();
        // 初始设置list高度
        this.initListMaxHeight();
        this.listenKeydown(this.dominatorElem);
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        // dominatorElem 改变后重新添加监听
        if (changes['dominatorElem'] && !changes['dominatorElem'].firstChange) {
            this.unlistenKendown();
            this.listenKeydown(this.dominatorElem);
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        // 解除按键监听
        this.unlistenKendown();
        // 解除IE滚动条Bug的监听
        this.listCom.unlistenIESrollbarBug();
    }
    /**
     * 当做生命周期用吧，监听模型值变化。包括writeValue和this.model=赋值 这两个时刻。
     * @param model ngModel值
     */
    ngOnModelChange(model) {
        super.ngOnModelChange(model);
        if (!this.multiple || !this.dominatorElem) { // 多选才会有dominator行高切换
            return;
        }
        if (this.dominatorLastBottom === undefined && this.dominatorElem) { // 第一次只记录位置，不走进重定位逻辑
            // 修复SSR错误：ERROR TypeError: this.dominatorElem.getBoundingClientRect is not a function
            if (typeof this.dominatorElem.getBoundingClientRect === 'function') {
                this.dominatorLastBottom = this.dominatorElem.getBoundingClientRect().bottom;
                this.dominatorLastLeft = this.dominatorElem.getBoundingClientRect().left;
            }
            return;
        }
        this.zone.runOutsideAngular(() => {
            setTimeout(() => {
                if (!this.dominatorElem) {
                    return;
                }
                // ngModel更新（点击checkbox，或者点击叉叉号）后，dominator有可能一行/两行变换，所以更新下拉面板位置。
                // 甚至donimator本身位置也会变动。（比如测试用例中元素变动，引起donimator本身变动 ???）
                if (this.dominatorLastBottom !== this.dominatorElem.getBoundingClientRect().bottom ||
                    this.dominatorLastLeft !== this.dominatorElem.getBoundingClientRect().left) {
                    if (this.dropCom.isShow) {
                        // 仅当高度变化时，重定位。
                        this.rePosition();
                    }
                    this.dominatorLastBottom = this.dominatorElem.getBoundingClientRect().bottom;
                    this.dominatorLastLeft = this.dominatorElem.getBoundingClientRect().left;
                }
            }, 0);
        });
    }
    /**
     *  监听keydown
     * @param focusElem 焦点元素
     */
    listenKeydown(focusElem) {
        if (!focusElem) {
            return;
        }
        this.unlistenKeydownFn = this.renderer.listen(focusElem, 'keydown', (event) => {
            if (!this.isShow) {
                return;
            }
            // 10.0.2删除 KEY_SPACE 空格快捷键的响应
            switch (event.keyCode) {
                case TiKeymap.KEY_ESCAPE: // Esc键，仅可关闭
                case TiKeymap.KEY_TAB: // Tab键，仅可关闭
                    event.preventDefault(); // 阻止触发blurFn
                    this.hide();
                    break;
                case TiKeymap.KEY_ARROW_UP: // 向上箭头，上移选项
                case TiKeymap.KEY_ARROW_DOWN: // 向下箭头，下移选项
                case TiKeymap.KEY_ENTER: // ENTER键 相当于click
                case TiKeymap.KEY_NUMPAD_ENTER: // ENTER键(苹果数字小键盘)
                    this.listCom.onKeydown(event);
                    break;
                default:
                    break;
            }
            // 如果droplist响应了按键，那么就不再冒泡。
            event.stopPropagation();
        });
    }
    unlistenKendown() {
        if (this.unlistenKeydownFn) {
            this.unlistenKeydownFn();
        }
    }
    /**
     * 外部接口: 获取当前状态, 只读不写
     */
    get isShow() {
        return this.dropCom.isShow;
    }
    /**
     * 打开面板
     */
    show() {
        if (!this.isShow) {
            // 打开面板
            // 每次打开面板前需要重置list的高度确保drop高度不受其影响
            this.initListMaxHeight();
            // 打开面板
            this.dropCom.show();
            // 根据drop的最大高度设置list的最大高度
            this.restyleListMaxHeight();
            this.listCom.scrollToSelected();
            // IE滚动条Bug的监听
            this.listCom.listenIESrollbarBug();
        }
    }
    /**
     * 关闭面板的处理
     */
    hide() {
        // this.listCom.hide(); // 隐藏时list也需要做处理：清除当前hover项状态
        if (this.isShow) {
            this.dropCom.hide(); // 关闭面板
            // 解除IE滚动条Bug的监听
            this.listCom.unlistenIESrollbarBug();
        }
    }
    /**
     * 重新设置元素位置
     */
    rePosition(optionsChange) {
        if (optionsChange) {
            this.dropCom.resetPosition();
        }
        else {
            this.dropCom.setPosition();
        }
        this.restyleListMaxHeight();
    }
    /**
     * 根据drop的压缩情况，设置list的max-height
     */
    restyleListMaxHeight() {
        // 计算自定义底部的高度
        if (this.footerElemRef && this.footerElemRef.nativeElement) {
            let rect = this.footerElemRef.nativeElement.getBoundingClientRect();
            if (rect.height) {
                this.footerHeight = rect.height;
            }
        }
        // 如果drop被压缩，则根据drop最大高度设置当前list最大高度。
        const dropCurMaxHeight = parseInt(this.dropCom.nativeElement.style.maxHeight, 10);
        let dropMaxHeightAdapted = this.dropMaxHeight + this.footerHeight;
        if (!isNaN(dropCurMaxHeight) && dropCurMaxHeight < dropMaxHeightAdapted) {
            dropMaxHeightAdapted = dropCurMaxHeight;
            const computedListMaxHeight = dropMaxHeightAdapted - this.heightExcludeList - this.footerHeight;
            // 设置list max-height
            this.renderer.setStyle(this.listCom.nativeElement, 'max-height', computedListMaxHeight + 'px');
        }
    }
    // 初始化list最大高度
    initListMaxHeight() {
        this.dropMaxHeight = this.panelMaxHeight ? parseInt(this.panelMaxHeight, 10) :
            this.defaultListMaxHeight + this.heightExcludeList;
        this.renderer.setStyle(this.listCom.nativeElement, 'max-height', (this.dropMaxHeight - this.heightExcludeList) + 'px');
    }
    // 鼠标或enter点击选项后，组件隐藏
    onSelect(option) {
        this.select.emit(option);
        // nextlevel只用在省市区regionselect组件场景，选中省、市级别面板不关闭
        if (!this.isShowAfterSelect && !this.multiple && !option.nextLevel) {
            this.hide();
        }
    }
}
/**
 * 带搜索框情况下需要去除的高度
 */
// tslint:disable-next-line:binary-expression-operand-order
TiDroplistComponent.SEARCHBOX_EXCLUDE_HEIGHT = 28; // 下拉框中的搜索框的高度
TiDroplistComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-droplist',
                template: "<ti-drop [dominatorElem]=\"dominatorElem\"\r\n    [dominatorSpace]=\"dominatorSpace\"\r\n    [panelAlign]='panelAlign'\r\n    [panelWidth]='panelWidth' [class.ti3-select-small]=\"size === 'small'\">\r\n    <ti-list [multiple]=\"multiple\"\r\n        [options]=\"options\"\r\n        [(ngModel)]=\"model\"\r\n        style=\"display:block;\"\r\n        (select)=\"onSelect($event)\"\r\n        [id]=\"appendId('list')\"\r\n        [tipPosition]=\"tipPosition\"\r\n        [noDataText]=\"noDataText\">\r\n        <ng-template let-item let-i=index>\r\n                <ng-container *ngIf=\"itemTemplate else listLabelTemplate\">\r\n                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item,index: i}\">\r\n                        </ng-container>\r\n                </ng-container>\r\n                <ng-template #listLabelTemplate><span [title]=\"item[labelKey]\">{{item[labelKey]}}</span></ng-template>\r\n        </ng-template>\r\n    </ti-list>\r\n</ti-drop>",
                providers: [TiFormComponent.getValueAccessor(TiDroplistComponent)]
            },] }
];
TiDroplistComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone }
];
TiDroplistComponent.propDecorators = {
    dominatorElem: [{ type: Input }],
    multiple: [{ type: Input }],
    panelWidth: [{ type: Input }],
    panelMaxHeight: [{ type: Input }],
    options: [{ type: Input }],
    labelKey: [{ type: Input }],
    noDataText: [{ type: Input }],
    tipPosition: [{ type: Input }],
    dominatorSpace: [{ type: Input }],
    panelAlign: [{ type: Input }],
    type: [{ type: Input }],
    size: [{ type: Input }],
    isShowAfterSelect: [{ type: Input }],
    select: [{ type: Output }],
    dropCom: [{ type: ViewChild, args: [TiDropComponent, { static: true },] }],
    listCom: [{ type: ViewChild, args: [TiListComponent, { static: true },] }],
    footerElemRef: [{ type: ViewChild, args: ['footer', { static: false },] }],
    itemTemplate: [{ type: ContentChild, args: [TemplateRef, /* TODO: add static flag */ { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,