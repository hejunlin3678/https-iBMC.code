import { Component, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';
import { TiBaseComponent } from '../base/TiBaseModule';
import { TiLocale } from '../../locale/TiLocaleModule';
import { TiBrowser, Util } from '../../utils/Util';
/**
 * 10.0.2版本抽取
 *
 * upload基类，继承于TiBaseComponent组件
 */
export class TiUploadbaseComponent extends TiBaseComponent {
    constructor(hostRef, renderer) {
        super(hostRef, renderer);
        this.hostRef = hostRef;
        this.renderer = renderer;
        /**
         * 上传方式，可选值为：get/post(其他方式IE9不支持，因此暂不开放)
         */
        this.method = 'post';
        /**
         * 向后台发送请求时对应的文件对象name属性，该name属性是后台读取文件的入口值
         */
        this.alias = 'tiFile';
        /**
         * 上传对象信息中，formData是否先于file对象，适用于后台传输时，formData数据先于file对象的场景
         */
        this.formDataFirst = false;
        /**
         * 文件选中后是否自动上传
         */
        this.autoUpload = true;
        /**
         * 文件上传是否 是否一次请求传输多个文件，默认情况下一次请求上传一个文件
         */
        this.batchSend = false;
        /**
         * 是否禁用
         */
        this.disabled = false;
        /**
         * @ignore
         */
        this.title = TiBrowser.isChrome() ? ' ' : ''; // 禁用文件上传默认tip提示,Chrome下设置title为""时会显示默认提示，所以Chrome下需要设置为" ";而IE下设置为" "会显示文本为空的tip
        /**
         * 文件添加失败回调，可使用该回调定义上传错误提示
         *
         * 参数为对象形式，结构如下：
         *
         * {
         *
         * file: [TiFileInfo]{@link ../interfaces/TiFileInfo.html}, // 上传文件信息
         *
         * validResults: Array&lt;string&gt;  // 校验不合法的规则name数组
         *
         * }
         */
        this.addItemFailed = new EventEmitter();
        /**
         * 文件添加成功回调
         *
         * 参数：文件对象
         */
        this.addItemSuccess = new EventEmitter();
        // 以下回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理
        /**
         * 上传文件前回调，可在该回调中动态设置formData
         * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理
         *
         * 参数为数组形式，代表上传的文件对象
         */
        this.beforeSendItems = new EventEmitter();
        /**
         * 上传文件进度改变回调
         *
         * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理
         *
         * 参数为对象形式，结构如下：
         *
         * {
         *
         * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组
         *
         * progress: number  // 进度信息
         *
         * }
         */
        this.progressItems = new EventEmitter();
        /**
         * 文件上传完成回调，成功/失败都会触发
         *
         * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理
         *
         * 参数为对象形式，结构如下：
         *
         * {
         *
         * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组
         *
         * response: string  // 文件上传响应信息
         *
         * status: number 文件上传响应状态码
         *
         * }
         */
        this.completeItems = new EventEmitter();
        /**
         * 文件上传成功回调
         *
         * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理
         *
         * 参数为对象形式，结构如下：
         *
         * {
         *
         * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组
         *
         * response: string  // 文件上传响应信息
         *
         * status: number 文件上传响应状态码
         *
         * }
         */
        this.successItems = new EventEmitter();
        /**
         * 文件上传失败回调
         *
         * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理
         *
         * 参数为对象形式，结构如下：
         *
         * {
         *
         * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组
         *
         * response: string  // 文件上传响应信息
         *
         * status: number 文件上传响应状态码
         *
         * }
         */
        this.errorItems = new EventEmitter();
        /**
         * 文件上传取消回调
         *
         * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理
         *
         * 参数为对象形式，结构如下：
         *
         * {
         *
         * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组
         *
         * response: string  // 文件上传响应信息
         *
         * status: number 文件上传响应状态码
         *
         * }
         */
        this.cancelItems = new EventEmitter();
        /**
         * 上传删除回调
         * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理
         *
         * 参数为数组形式，代表在操作的文件对象
         */
        this.removeItems = new EventEmitter();
        /**
         * 所有文件上传完成回调
         *
         * 参数为数组形式，代表在操作的文件对象
         */
        this.completeAllItems = new EventEmitter();
        /**
         * 上传文件删除前的回调
         *
         * 参数为数组形式，代表在操作的文件对象
         */
        this.beforeRemoveItems = new EventEmitter();
        /**
         * @ignore 词条
         */
        // tslint:disable-next-line:typedef
        this.uploadLan = TiLocale.getLocaleWords().tiUpload;
    }
    ngOnInit() {
        super.ngOnInit();
        this.uploadConfig = {
            url: this.url,
            method: this.method,
            filters: this.filters,
            alias: this.alias,
            formData: this.formData,
            autoUpload: this.autoUpload,
            batchSend: this.batchSend || false,
            formDataFirst: this.formDataFirst || false,
            headers: this.headers,
            onAddItemFailed: (file, validResults) => {
                this.addItemFailed.emit({ file, validResults });
            },
            onAddItemSuccess: (fileItem) => {
                this.addItemSuccess.emit(fileItem);
            },
            onBeforeSendItems: (fileItems) => {
                this.beforeSendItems.emit(fileItems);
            },
            onProgressItems: (fileItems, progress) => {
                this.progressItems.emit({ fileItems, progress });
            },
            onCompleteItems: (fileItems, response, status) => {
                this.completeItems.emit({ fileItems, response, status });
            },
            onSuccessItems: (fileItems, response, status) => {
                this.successItems.emit({ fileItems, response, status });
            },
            onErrorItems: (fileItems, response, status) => {
                this.errorItems.emit({ fileItems, response, status });
            },
            onCancelItems: (fileItems, response, status) => {
                this.cancelItems.emit({ fileItems, response, status });
            },
            onRemoveItems: (fileItems) => {
                this.removeItems.emit(fileItems);
            },
            onBeforeRemoveItems: (fileItems) => {
                this.beforeRemoveItems.emit(fileItems);
            },
            onCompleteAllItems: (fileItems) => {
                this.completeAllItems.emit(fileItems);
            }
        };
        // 根据配置的文件类型过滤属性设置H5下的文件过滤属性,如果accept未定义,则按照type过滤条件进行设置；
        // 如果accept已定义，则按照accept定义设置：此种场景应用于浏览器设置accept后导致文件窗打开很慢的情况
        if (Util.isUndefined(this.accept) && this.filters && this.filters.length) {
            this.filters.forEach((filter) => {
                if (filter.name === 'type') {
                    this.accept = filter.params[0];
                }
                return;
            });
        }
    }
    /**
     * 手动上传，可以通过组件调用
     */
    upload() {
        this.uploadInst.uploadAll();
    }
}
TiUploadbaseComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-uploadbase',
                template: ''
            },] }
];
TiUploadbaseComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
TiUploadbaseComponent.propDecorators = {
    url: [{ type: Input }],
    method: [{ type: Input }],
    filters: [{ type: Input }],
    alias: [{ type: Input }],
    formData: [{ type: Input }],
    formDataFirst: [{ type: Input }],
    autoUpload: [{ type: Input }],
    batchSend: [{ type: Input }],
    headers: [{ type: Input }],
    accept: [{ type: Input }],
    disabled: [{ type: Input }],
    addItemFailed: [{ type: Output }],
    addItemSuccess: [{ type: Output }],
    beforeSendItems: [{ type: Output }],
    progressItems: [{ type: Output }],
    completeItems: [{ type: Output }],
    successItems: [{ type: Output }],
    errorItems: [{ type: Output }],
    cancelItems: [{ type: Output }],
    removeItems: [{ type: Output }],
    completeAllItems: [{ type: Output }],
    beforeRemoveItems: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGlVcGxvYWRiYXNlQ29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vQGNsb3VkL3RpbnkzL2NvbXBvbmVudHMvdXBsb2FkL1RpVXBsb2FkYmFzZUNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxRQUFRLEVBQWlCLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVuRDs7OztHQUlHO0FBS0gsTUFBTSxPQUFPLHFCQUFzQixTQUFRLGVBQWU7SUF1TnRELFlBQXNCLE9BQW1CLEVBQVksUUFBbUI7UUFDcEUsS0FBSyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztRQURQLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFBWSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBak54RTs7V0FFRztRQUNNLFdBQU0sR0FBaUIsTUFBTSxDQUFDO1FBS3ZDOztXQUVHO1FBQ00sVUFBSyxHQUFXLFFBQVEsQ0FBQztRQUtsQzs7V0FFRztRQUNNLGtCQUFhLEdBQVksS0FBSyxDQUFDO1FBQ3hDOztXQUVHO1FBQ00sZUFBVSxHQUFZLElBQUksQ0FBQztRQUNwQzs7V0FFRztRQUNNLGNBQVMsR0FBWSxLQUFLLENBQUM7UUFjcEM7O1dBRUc7UUFDTSxhQUFRLEdBQVksS0FBSyxDQUFDO1FBRW5DOztXQUVHO1FBQ0gsVUFBSyxHQUFXLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxrRkFBa0Y7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TSxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7b0JBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDbEM7Z0JBRUQsT0FBTztZQUNYLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNO1FBQ1QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNoQyxDQUFDOzs7WUEvUkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxlQUFlO2dCQUN6QixRQUFRLEVBQUUsRUFBRTthQUNmOzs7WUFkbUIsVUFBVTtZQUF1QyxTQUFTOzs7a0JBb0J6RSxLQUFLO3FCQUlMLEtBQUs7c0JBSUwsS0FBSztvQkFJTCxLQUFLO3VCQUlMLEtBQUs7NEJBSUwsS0FBSzt5QkFJTCxLQUFLO3dCQUlMLEtBQUs7c0JBSUwsS0FBSztxQkFRTCxLQUFLO3VCQUtMLEtBQUs7NEJBb0JMLE1BQU07NkJBT04sTUFBTTs4QkFRTixNQUFNOzRCQWdCTixNQUFNOzRCQW1CTixNQUFNOzJCQW1CTixNQUFNO3lCQW1CTixNQUFNOzBCQW1CTixNQUFNOzBCQVFOLE1BQU07K0JBTU4sTUFBTTtnQ0FNTixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRpRmlsZUluZm8sIFRpRmlsZUl0ZW0sIFRpRmlsdGVyLCBUaVVwbG9hZENvbmZpZywgVGlVcGxvYWRSZWYgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy91cGxvYWQvVGlGaWxlSW50ZXJmYWNlJztcclxuaW1wb3J0IHsgVGlCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi4vYmFzZS9UaUJhc2VNb2R1bGUnO1xyXG5pbXBvcnQgeyBUaUxvY2FsZSwgVGlMb2NhbGVXb3JkcyB9IGZyb20gJy4uLy4uL2xvY2FsZS9UaUxvY2FsZU1vZHVsZSc7XHJcbmltcG9ydCB7IFRpQnJvd3NlciwgVXRpbCB9IGZyb20gJy4uLy4uL3V0aWxzL1V0aWwnO1xyXG5cclxuLyoqXHJcbiAqIDEwLjAuMueJiOacrOaKveWPllxyXG4gKlxyXG4gKiB1cGxvYWTln7rnsbvvvIznu6fmib/kuo5UaUJhc2VDb21wb25lbnTnu4Tku7ZcclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd0aS11cGxvYWRiYXNlJyxcclxuICAgIHRlbXBsYXRlOiAnJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgVGlVcGxvYWRiYXNlQ29tcG9uZW50IGV4dGVuZHMgVGlCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOaWh+S7tuS4iuS8oOWcsOWdgOmFjee9rlxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSB1cmw6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICog5LiK5Lyg5pa55byP77yM5Y+v6YCJ5YC85Li677yaZ2V0L3Bvc3Qo5YW25LuW5pa55byPSUU55LiN5pSv5oyB77yM5Zug5q2k5pqC5LiN5byA5pS+KVxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBtZXRob2Q6ICdnZXQnfCdwb3N0JyA9ICdwb3N0JztcclxuICAgIC8qKlxyXG4gICAgICog5paH5Lu25pyJ5pWI5oCn5Yik5pat5p2h5Lu25pWw57uEXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGZpbHRlcnM6IEFycmF5PFRpRmlsdGVyPjtcclxuICAgIC8qKlxyXG4gICAgICog5ZCR5ZCO5Y+w5Y+R6YCB6K+35rGC5pe25a+55bqU55qE5paH5Lu25a+56LGhbmFtZeWxnuaAp++8jOivpW5hbWXlsZ7mgKfmmK/lkI7lj7Dor7vlj5bmlofku7bnmoTlhaXlj6PlgLxcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgYWxpYXM6IHN0cmluZyA9ICd0aUZpbGUnO1xyXG4gICAgLyoqXHJcbiAgICAgKiDkuIrkvKDmlofku7bpmYTluKbkv6Hmga/vvIzmlbDmja7nsbvlnovkuLrlr7nosaHlvaLlvI9cclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgZm9ybURhdGE6IG9iamVjdDtcclxuICAgIC8qKlxyXG4gICAgICog5LiK5Lyg5a+56LGh5L+h5oGv5Lit77yMZm9ybURhdGHmmK/lkKblhYjkuo5maWxl5a+56LGh77yM6YCC55So5LqO5ZCO5Y+w5Lyg6L6T5pe277yMZm9ybURhdGHmlbDmja7lhYjkuo5maWxl5a+56LGh55qE5Zy65pmvXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGZvcm1EYXRhRmlyc3Q6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIC8qKlxyXG4gICAgICog5paH5Lu26YCJ5Lit5ZCO5piv5ZCm6Ieq5Yqo5LiK5LygXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGF1dG9VcGxvYWQ6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmlofku7bkuIrkvKDmmK/lkKYg5piv5ZCm5LiA5qyh6K+35rGC5Lyg6L6T5aSa5Liq5paH5Lu277yM6buY6K6k5oOF5Ya15LiL5LiA5qyh6K+35rGC5LiK5Lyg5LiA5Liq5paH5Lu2XHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGJhdGNoU2VuZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiDkuIrkvKDmlofku7bor7fmsYLlpLTphY3nva7vvIzoh6rlrprkuYnkuLrlr7nosaHlvaLlvI9cclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgaGVhZGVyczogb2JqZWN0O1xyXG4gICAgLyoqXHJcbiAgICAgKiDmlofku7bnsbvlnovov4fmu6TphY3nva7vvIzpgILnlKjkuo5JRTEwK+a1j+iniOWZqO+8jOiDveWBmuWIsOaWh+S7tuW8ueeql+S4reS4jeWHuueOsOmdnuazleexu+Wei+eahOaWh+S7tu+8jOS4u+imgemAgueUqOS6juS4pOenjeWcuuaZr++8mlxyXG4gICAgICpcclxuICAgICAqIDEu6L+H5ruk6KeE5YiZ5Lit5bim57G75Z6L6L+H5ruk77yM5L2G5piv5oOz6KaB5Y675o6J5paH5Lu26YCJ5oup5qGG5Lit5paH5Lu26L+H5ruk55qE5Zy65pmv77yI6K6+572uYWNjZXB05Li656m65a2X56ym5Liy5Y2z5Y+v77yJ77ya5q2k56eN5Zy65pmv5bqU55So5LqO5rWP6KeI5Zmo6K6+572uYWNjZXB05ZCO5a+86Ie05paH5Lu256qX5omT5byA5b6I5oWi55qE5oOF5Ya1XHJcbiAgICAgKlxyXG4gICAgICogMi7kuI3pnIDopoHlrprkuYnmlofku7bnsbvlnovov4fmu6TmnaHku7bvvIzkvYbmmK/pgJrov4dhY2NlcHTog73nsr7noa7nmoTnoa7kv53mlofku7bnsbvlnovnmoTlnLrmma9cclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgYWNjZXB0OiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmmK/lkKbnpoHnlKhcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpZ25vcmVcclxuICAgICAqL1xyXG4gICAgdGl0bGU6IHN0cmluZyA9IFRpQnJvd3Nlci5pc0Nocm9tZSgpID8gJyAnIDogJyc7IC8vIOemgeeUqOaWh+S7tuS4iuS8oOm7mOiupHRpcOaPkOekuixDaHJvbWXkuIvorr7nva50aXRsZeS4ulwiXCLml7bkvJrmmL7npLrpu5jorqTmj5DnpLrvvIzmiYDku6VDaHJvbWXkuIvpnIDopoHorr7nva7kuLpcIiBcIjvogIxJReS4i+iuvue9ruS4ulwiIFwi5Lya5pi+56S65paH5pys5Li656m655qEdGlwXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmlofku7bmt7vliqDlpLHotKXlm57osIPvvIzlj6/kvb/nlKjor6Xlm57osIPlrprkuYnkuIrkvKDplJnor6/mj5DnpLpcclxuICAgICAqXHJcbiAgICAgKiDlj4LmlbDkuLrlr7nosaHlvaLlvI/vvIznu5PmnoTlpoLkuIvvvJpcclxuICAgICAqXHJcbiAgICAgKiB7XHJcbiAgICAgKlxyXG4gICAgICogZmlsZTogW1RpRmlsZUluZm9de0BsaW5rIC4uL2ludGVyZmFjZXMvVGlGaWxlSW5mby5odG1sfSwgLy8g5LiK5Lyg5paH5Lu25L+h5oGvXHJcbiAgICAgKlxyXG4gICAgICogdmFsaWRSZXN1bHRzOiBBcnJheSZsdDtzdHJpbmcmZ3Q7ICAvLyDmoKHpqozkuI3lkIjms5XnmoTop4TliJluYW1l5pWw57uEXHJcbiAgICAgKlxyXG4gICAgICogfVxyXG4gICAgICovXHJcbiAgICBAT3V0cHV0KCkgcmVhZG9ubHkgYWRkSXRlbUZhaWxlZDogRXZlbnRFbWl0dGVyPHtmaWxlOiBUaUZpbGVJbmZvLCB2YWxpZFJlc3VsdHM6IEFycmF5PHN0cmluZz59PiA9XHJcbiAgICAgICAgbmV3IEV2ZW50RW1pdHRlcjx7ZmlsZTogVGlGaWxlSW5mbywgdmFsaWRSZXN1bHRzOiBBcnJheTxzdHJpbmc+fT4oKTtcclxuICAgIC8qKlxyXG4gICAgICog5paH5Lu25re75Yqg5oiQ5Yqf5Zue6LCDXHJcbiAgICAgKlxyXG4gICAgICog5Y+C5pWw77ya5paH5Lu25a+56LGhXHJcbiAgICAgKi9cclxuICAgIEBPdXRwdXQoKSByZWFkb25seSBhZGRJdGVtU3VjY2VzczogRXZlbnRFbWl0dGVyPFRpRmlsZUl0ZW0+ID0gbmV3IEV2ZW50RW1pdHRlcjxUaUZpbGVJdGVtPigpO1xyXG4gICAgLy8g5Lul5LiL5Zue6LCD5a+55Y2V5Liq5oiW5aSa5Liq5paH5Lu25Zyo5ZCM5LiAdXJs5ZCM5pe25LiK5Lyg5pyJ5pWI77yM5Y+v5L2/55So5YW26L+b6KGM5paH5Lu25LiK5Lyg6L+H56iL5Lit55qE5Lia5Yqh5aSE55CGXHJcbiAgICAvKipcclxuICAgICAqIOS4iuS8oOaWh+S7tuWJjeWbnuiwg++8jOWPr+WcqOivpeWbnuiwg+S4reWKqOaAgeiuvue9rmZvcm1EYXRhXHJcbiAgICAgKiDor6Xlm57osIPlr7nljZXkuKrmiJblpJrkuKrmlofku7blnKjlkIzkuIB1cmzlkIzml7bkuIrkvKDmnInmlYjvvIzlj6/kvb/nlKjlhbbov5vooYzmlofku7bkuIrkvKDov4fnqIvkuK3nmoTkuJrliqHlpITnkIZcclxuICAgICAqXHJcbiAgICAgKiDlj4LmlbDkuLrmlbDnu4TlvaLlvI/vvIzku6PooajkuIrkvKDnmoTmlofku7blr7nosaFcclxuICAgICAqL1xyXG4gICAgQE91dHB1dCgpIHJlYWRvbmx5IGJlZm9yZVNlbmRJdGVtczogRXZlbnRFbWl0dGVyPEFycmF5PFRpRmlsZUl0ZW0+PiA9IG5ldyBFdmVudEVtaXR0ZXI8QXJyYXk8VGlGaWxlSXRlbT4+KCk7XHJcbiAgICAvKipcclxuICAgICAqIOS4iuS8oOaWh+S7tui/m+W6puaUueWPmOWbnuiwg1xyXG4gICAgICpcclxuICAgICAqIOivpeWbnuiwg+WvueWNleS4quaIluWkmuS4quaWh+S7tuWcqOWQjOS4gHVybOWQjOaXtuS4iuS8oOacieaViO+8jOWPr+S9v+eUqOWFtui/m+ihjOaWh+S7tuS4iuS8oOi/h+eoi+S4reeahOS4muWKoeWkhOeQhlxyXG4gICAgICpcclxuICAgICAqIOWPguaVsOS4uuWvueixoeW9ouW8j++8jOe7k+aehOWmguS4i++8mlxyXG4gICAgICpcclxuICAgICAqIHtcclxuICAgICAqXHJcbiAgICAgKiBmaWxlSXRlbXM6IEFycmF5PFtUaUZpbGVJdGVtXXtAbGluayAuLi9pbnRlcmZhY2VzL1RpRmlsZUl0ZW0uaHRtbH0+LCAvLyDkuIrkvKDmlofku7blr7nosaHmlbDnu4RcclxuICAgICAqXHJcbiAgICAgKiBwcm9ncmVzczogbnVtYmVyICAvLyDov5vluqbkv6Hmga9cclxuICAgICAqXHJcbiAgICAgKiB9XHJcbiAgICAgKi9cclxuICAgIEBPdXRwdXQoKSByZWFkb25seSBwcm9ncmVzc0l0ZW1zOiBFdmVudEVtaXR0ZXI8e2ZpbGVJdGVtczogQXJyYXk8VGlGaWxlSXRlbT4sIHByb2dyZXNzOiBudW1iZXJ9PiA9XHJcbiAgICAgICAgbmV3IEV2ZW50RW1pdHRlcjx7ZmlsZUl0ZW1zOiBBcnJheTxUaUZpbGVJdGVtPiwgcHJvZ3Jlc3M6IG51bWJlcn0+KCk7XHJcbiAgICAvKipcclxuICAgICAqIOaWh+S7tuS4iuS8oOWujOaIkOWbnuiwg++8jOaIkOWKny/lpLHotKXpg73kvJrop6blj5FcclxuICAgICAqXHJcbiAgICAgKiDor6Xlm57osIPlr7nljZXkuKrmiJblpJrkuKrmlofku7blnKjlkIzkuIB1cmzlkIzml7bkuIrkvKDmnInmlYjvvIzlj6/kvb/nlKjlhbbov5vooYzmlofku7bkuIrkvKDov4fnqIvkuK3nmoTkuJrliqHlpITnkIZcclxuICAgICAqXHJcbiAgICAgKiDlj4LmlbDkuLrlr7nosaHlvaLlvI/vvIznu5PmnoTlpoLkuIvvvJpcclxuICAgICAqXHJcbiAgICAgKiB7XHJcbiAgICAgKlxyXG4gICAgICogZmlsZUl0ZW1zOiBBcnJheTxbVGlGaWxlSXRlbV17QGxpbmsgLi4vaW50ZXJmYWNlcy9UaUZpbGVJdGVtLmh0bWx9PiwgLy8g5LiK5Lyg5paH5Lu25a+56LGh5pWw57uEXHJcbiAgICAgKlxyXG4gICAgICogcmVzcG9uc2U6IHN0cmluZyAgLy8g5paH5Lu25LiK5Lyg5ZON5bqU5L+h5oGvXHJcbiAgICAgKlxyXG4gICAgICogc3RhdHVzOiBudW1iZXIg5paH5Lu25LiK5Lyg5ZON5bqU54q25oCB56CBXHJcbiAgICAgKlxyXG4gICAgICogfVxyXG4gICAgICovXHJcbiAgICBAT3V0cHV0KCkgcmVhZG9ubHkgY29tcGxldGVJdGVtczogRXZlbnRFbWl0dGVyPHtmaWxlSXRlbXM6IEFycmF5PFRpRmlsZUl0ZW0+LCByZXNwb25zZTogc3RyaW5nLCBzdGF0dXM6IG51bWJlcn0+ID1cclxuICAgICAgICBuZXcgRXZlbnRFbWl0dGVyPHtmaWxlSXRlbXM6IEFycmF5PFRpRmlsZUl0ZW0+LCByZXNwb25zZTogc3RyaW5nLCBzdGF0dXM6IG51bWJlcn0+KCk7XHJcbiAgICAvKipcclxuICAgICAqIOaWh+S7tuS4iuS8oOaIkOWKn+Wbnuiwg1xyXG4gICAgICpcclxuICAgICAqIOivpeWbnuiwg+WvueWNleS4quaIluWkmuS4quaWh+S7tuWcqOWQjOS4gHVybOWQjOaXtuS4iuS8oOacieaViO+8jOWPr+S9v+eUqOWFtui/m+ihjOaWh+S7tuS4iuS8oOi/h+eoi+S4reeahOS4muWKoeWkhOeQhlxyXG4gICAgICpcclxuICAgICAqIOWPguaVsOS4uuWvueixoeW9ouW8j++8jOe7k+aehOWmguS4i++8mlxyXG4gICAgICpcclxuICAgICAqIHtcclxuICAgICAqXHJcbiAgICAgKiBmaWxlSXRlbXM6IEFycmF5PFtUaUZpbGVJdGVtXXtAbGluayAuLi9pbnRlcmZhY2VzL1RpRmlsZUl0ZW0uaHRtbH0+LCAvLyDkuIrkvKDmlofku7blr7nosaHmlbDnu4RcclxuICAgICAqXHJcbiAgICAgKiByZXNwb25zZTogc3RyaW5nICAvLyDmlofku7bkuIrkvKDlk43lupTkv6Hmga9cclxuICAgICAqXHJcbiAgICAgKiBzdGF0dXM6IG51bWJlciDmlofku7bkuIrkvKDlk43lupTnirbmgIHnoIFcclxuICAgICAqXHJcbiAgICAgKiB9XHJcbiAgICAgKi9cclxuICAgIEBPdXRwdXQoKSByZWFkb25seSBzdWNjZXNzSXRlbXM6IEV2ZW50RW1pdHRlcjx7ZmlsZUl0ZW1zOiBBcnJheTxUaUZpbGVJdGVtPiwgcmVzcG9uc2U6IHN0cmluZywgc3RhdHVzOiBudW1iZXJ9PiA9XHJcbiAgICAgICAgbmV3IEV2ZW50RW1pdHRlcjx7ZmlsZUl0ZW1zOiBBcnJheTxUaUZpbGVJdGVtPiwgcmVzcG9uc2U6IHN0cmluZywgc3RhdHVzOiBudW1iZXJ9PigpO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmlofku7bkuIrkvKDlpLHotKXlm57osINcclxuICAgICAqXHJcbiAgICAgKiDor6Xlm57osIPlr7nljZXkuKrmiJblpJrkuKrmlofku7blnKjlkIzkuIB1cmzlkIzml7bkuIrkvKDmnInmlYjvvIzlj6/kvb/nlKjlhbbov5vooYzmlofku7bkuIrkvKDov4fnqIvkuK3nmoTkuJrliqHlpITnkIZcclxuICAgICAqXHJcbiAgICAgKiDlj4LmlbDkuLrlr7nosaHlvaLlvI/vvIznu5PmnoTlpoLkuIvvvJpcclxuICAgICAqXHJcbiAgICAgKiB7XHJcbiAgICAgKlxyXG4gICAgICogZmlsZUl0ZW1zOiBBcnJheTxbVGlGaWxlSXRlbV17QGxpbmsgLi4vaW50ZXJmYWNlcy9UaUZpbGVJdGVtLmh0bWx9PiwgLy8g5LiK5Lyg5paH5Lu25a+56LGh5pWw57uEXHJcbiAgICAgKlxyXG4gICAgICogcmVzcG9uc2U6IHN0cmluZyAgLy8g5paH5Lu25LiK5Lyg5ZON5bqU5L+h5oGvXHJcbiAgICAgKlxyXG4gICAgICogc3RhdHVzOiBudW1iZXIg5paH5Lu25LiK5Lyg5ZON5bqU54q25oCB56CBXHJcbiAgICAgKlxyXG4gICAgICogfVxyXG4gICAgICovXHJcbiAgICBAT3V0cHV0KCkgcmVhZG9ubHkgZXJyb3JJdGVtczogRXZlbnRFbWl0dGVyPHtmaWxlSXRlbXM6IEFycmF5PFRpRmlsZUl0ZW0+LCByZXNwb25zZTogc3RyaW5nLCBzdGF0dXM6IG51bWJlcn0+ID1cclxuICAgICAgICBuZXcgRXZlbnRFbWl0dGVyPHtmaWxlSXRlbXM6IEFycmF5PFRpRmlsZUl0ZW0+LCByZXNwb25zZTogc3RyaW5nLCBzdGF0dXM6IG51bWJlcn0+KCk7XHJcbiAgICAvKipcclxuICAgICAqIOaWh+S7tuS4iuS8oOWPlua2iOWbnuiwg1xyXG4gICAgICpcclxuICAgICAqIOivpeWbnuiwg+WvueWNleS4quaIluWkmuS4quaWh+S7tuWcqOWQjOS4gHVybOWQjOaXtuS4iuS8oOacieaViO+8jOWPr+S9v+eUqOWFtui/m+ihjOaWh+S7tuS4iuS8oOi/h+eoi+S4reeahOS4muWKoeWkhOeQhlxyXG4gICAgICpcclxuICAgICAqIOWPguaVsOS4uuWvueixoeW9ouW8j++8jOe7k+aehOWmguS4i++8mlxyXG4gICAgICpcclxuICAgICAqIHtcclxuICAgICAqXHJcbiAgICAgKiBmaWxlSXRlbXM6IEFycmF5PFtUaUZpbGVJdGVtXXtAbGluayAuLi9pbnRlcmZhY2VzL1RpRmlsZUl0ZW0uaHRtbH0+LCAvLyDkuIrkvKDmlofku7blr7nosaHmlbDnu4RcclxuICAgICAqXHJcbiAgICAgKiByZXNwb25zZTogc3RyaW5nICAvLyDmlofku7bkuIrkvKDlk43lupTkv6Hmga9cclxuICAgICAqXHJcbiAgICAgKiBzdGF0dXM6IG51bWJlciDmlofku7bkuIrkvKDlk43lupTnirbmgIHnoIFcclxuICAgICAqXHJcbiAgICAgKiB9XHJcbiAgICAgKi9cclxuICAgIEBPdXRwdXQoKSByZWFkb25seSBjYW5jZWxJdGVtczogRXZlbnRFbWl0dGVyPHtmaWxlSXRlbXM6IEFycmF5PFRpRmlsZUl0ZW0+LCByZXNwb25zZTogc3RyaW5nLCBzdGF0dXM6IG51bWJlcn0+ID1cclxuICAgICAgICBuZXcgRXZlbnRFbWl0dGVyPHtmaWxlSXRlbXM6IEFycmF5PFRpRmlsZUl0ZW0+LCByZXNwb25zZTogc3RyaW5nLCBzdGF0dXM6IG51bWJlcn0+KCk7XHJcbiAgICAvKipcclxuICAgICAqIOS4iuS8oOWIoOmZpOWbnuiwg1xyXG4gICAgICog6K+l5Zue6LCD5a+55Y2V5Liq5oiW5aSa5Liq5paH5Lu25Zyo5ZCM5LiAdXJs5ZCM5pe25LiK5Lyg5pyJ5pWI77yM5Y+v5L2/55So5YW26L+b6KGM5paH5Lu25LiK5Lyg6L+H56iL5Lit55qE5Lia5Yqh5aSE55CGXHJcbiAgICAgKlxyXG4gICAgICog5Y+C5pWw5Li65pWw57uE5b2i5byP77yM5Luj6KGo5Zyo5pON5L2c55qE5paH5Lu25a+56LGhXHJcbiAgICAgKi9cclxuICAgIEBPdXRwdXQoKSByZWFkb25seSByZW1vdmVJdGVtczogRXZlbnRFbWl0dGVyPEFycmF5PFRpRmlsZUl0ZW0+PiA9IG5ldyBFdmVudEVtaXR0ZXI8QXJyYXk8VGlGaWxlSXRlbT4+KCk7XHJcbiAgICAvKipcclxuICAgICAqIOaJgOacieaWh+S7tuS4iuS8oOWujOaIkOWbnuiwg1xyXG4gICAgICpcclxuICAgICAqIOWPguaVsOS4uuaVsOe7hOW9ouW8j++8jOS7o+ihqOWcqOaTjeS9nOeahOaWh+S7tuWvueixoVxyXG4gICAgICovXHJcbiAgICBAT3V0cHV0KCkgcmVhZG9ubHkgY29tcGxldGVBbGxJdGVtczogRXZlbnRFbWl0dGVyPEFycmF5PFRpRmlsZUl0ZW0+PiA9IG5ldyBFdmVudEVtaXR0ZXI8QXJyYXk8VGlGaWxlSXRlbT4+KCk7XHJcbiAgICAvKipcclxuICAgICAqIOS4iuS8oOaWh+S7tuWIoOmZpOWJjeeahOWbnuiwg1xyXG4gICAgICpcclxuICAgICAqIOWPguaVsOS4uuaVsOe7hOW9ouW8j++8jOS7o+ihqOWcqOaTjeS9nOeahOaWh+S7tuWvueixoVxyXG4gICAgICovXHJcbiAgICBAT3V0cHV0KCkgcmVhZG9ubHkgYmVmb3JlUmVtb3ZlSXRlbXM6IEV2ZW50RW1pdHRlcjxBcnJheTxUaUZpbGVJdGVtPj4gPSBuZXcgRXZlbnRFbWl0dGVyPEFycmF5PFRpRmlsZUl0ZW0+PigpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LiK5Lyg5a6e5L6L55qE6YWN572u5L+h5oGvXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB1cGxvYWRDb25maWc6IFRpVXBsb2FkQ29uZmlnO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZSDnlJ/miJDnmoTkuIrkvKDmlofku7blrp7kvotcclxuICAgICAqL1xyXG4gICAgcHVibGljIHVwbG9hZEluc3Q6IFRpVXBsb2FkUmVmO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZSDor43mnaFcclxuICAgICAqL1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnR5cGVkZWZcclxuICAgIHB1YmxpYyB1cGxvYWRMYW4gPSAoVGlMb2NhbGUuZ2V0TG9jYWxlV29yZHMoKSBhcyBUaUxvY2FsZVdvcmRzKS50aVVwbG9hZDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaG9zdFJlZjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcclxuICAgICAgICBzdXBlcihob3N0UmVmLCByZW5kZXJlcik7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIubmdPbkluaXQoKTtcclxuICAgICAgICB0aGlzLnVwbG9hZENvbmZpZyA9IHtcclxuICAgICAgICAgICAgdXJsOiB0aGlzLnVybCwgLy8g5paH5Lu25LiK5Lyg5Zyw5Z2A6YWN572uXHJcbiAgICAgICAgICAgIG1ldGhvZDogdGhpcy5tZXRob2QsIC8vIOS4iuS8oOaWueW8j++8jOWPr+mAieWAvOS4uu+8mmdldOOAgXBvc3Qo5YW25LuW5pa55byPSUU55LiN5pSv5oyBKVxyXG4gICAgICAgICAgICBmaWx0ZXJzOiB0aGlzLmZpbHRlcnMsIC8vIOaWh+S7tuacieaViOaAp+WIpOaWreadoeS7tuaVsOe7hFxyXG4gICAgICAgICAgICBhbGlhczogdGhpcy5hbGlhcywgLy8g5ZCR5ZCO5Y+w5Y+R6YCB6K+35rGC5pe25a+55bqU55qE5paH5Lu25a+56LGhbmFtZeWxnuaAp++8jOivpW5hbWXlsZ7mgKfmmK/lkI7lj7Dor7vlj5bmlofku7bnmoTlhaXlj6PlgLzvvIzpu5jorqTlgLzkuLogJ3RpRmlsZSdcclxuICAgICAgICAgICAgZm9ybURhdGE6IHRoaXMuZm9ybURhdGEsIC8vIOS4iuS8oOaWh+S7tumZhOW4puS/oeaBr1xyXG4gICAgICAgICAgICBhdXRvVXBsb2FkOiB0aGlzLmF1dG9VcGxvYWQsIC8vIOaYr+WQpuiHquWKqOS4iuS8oO+8jOm7mOiupOS4unRydWVcclxuICAgICAgICAgICAgYmF0Y2hTZW5kOiB0aGlzLmJhdGNoU2VuZCB8fCBmYWxzZSwgLy8g5piv5ZCm5LiA5qyh5oCn5LiK5Lyg5aSa5Liq5paH5Lu2XHJcbiAgICAgICAgICAgIGZvcm1EYXRhRmlyc3Q6IHRoaXMuZm9ybURhdGFGaXJzdCB8fCBmYWxzZSwgLy8gZm9ybURhdGHmmK/lkKblhYjkuo5maWxl5a+56LGhXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycywgLy8g5LiK5Lyg5paH5Lu26K+35rGC5aS06YWN572uXHJcbiAgICAgICAgICAgIG9uQWRkSXRlbUZhaWxlZDogKGZpbGU6IFRpRmlsZUluZm8sIHZhbGlkUmVzdWx0czogQXJyYXk8c3RyaW5nPik6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRJdGVtRmFpbGVkLmVtaXQoe2ZpbGUsIHZhbGlkUmVzdWx0c30pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkFkZEl0ZW1TdWNjZXNzOiAoZmlsZUl0ZW06IFRpRmlsZUl0ZW0pOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkSXRlbVN1Y2Nlc3MuZW1pdChmaWxlSXRlbSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQmVmb3JlU2VuZEl0ZW1zOiAoZmlsZUl0ZW1zOiBBcnJheTxUaUZpbGVJdGVtPik6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iZWZvcmVTZW5kSXRlbXMuZW1pdChmaWxlSXRlbXMpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvblByb2dyZXNzSXRlbXM6IChmaWxlSXRlbXM6IEFycmF5PFRpRmlsZUl0ZW0+LCBwcm9ncmVzczogbnVtYmVyKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzSXRlbXMuZW1pdCh7ZmlsZUl0ZW1zLCBwcm9ncmVzc30pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkNvbXBsZXRlSXRlbXM6IChmaWxlSXRlbXM6IEFycmF5PFRpRmlsZUl0ZW0+LCByZXNwb25zZTogc3RyaW5nLCBzdGF0dXM6IG51bWJlcik6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZUl0ZW1zLmVtaXQoe2ZpbGVJdGVtcywgcmVzcG9uc2UsIHN0YXR1c30pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvblN1Y2Nlc3NJdGVtczogKGZpbGVJdGVtczogQXJyYXk8VGlGaWxlSXRlbT4sIHJlc3BvbnNlOiBzdHJpbmcsIHN0YXR1czogbnVtYmVyKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1Y2Nlc3NJdGVtcy5lbWl0KHtmaWxlSXRlbXMsIHJlc3BvbnNlLCBzdGF0dXN9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25FcnJvckl0ZW1zOiAoZmlsZUl0ZW1zOiBBcnJheTxUaUZpbGVJdGVtPiwgcmVzcG9uc2U6IHN0cmluZywgc3RhdHVzOiBudW1iZXIpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JJdGVtcy5lbWl0KHtmaWxlSXRlbXMsIHJlc3BvbnNlLCBzdGF0dXN9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25DYW5jZWxJdGVtczogKGZpbGVJdGVtczogQXJyYXk8VGlGaWxlSXRlbT4sIHJlc3BvbnNlOiBzdHJpbmcsIHN0YXR1czogbnVtYmVyKTogdm9pZCAgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxJdGVtcy5lbWl0KHtmaWxlSXRlbXMsIHJlc3BvbnNlLCBzdGF0dXN9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25SZW1vdmVJdGVtczogKGZpbGVJdGVtczogQXJyYXk8VGlGaWxlSXRlbT4pOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlSXRlbXMuZW1pdChmaWxlSXRlbXMpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkJlZm9yZVJlbW92ZUl0ZW1zOiAoZmlsZUl0ZW1zOiBBcnJheTxUaUZpbGVJdGVtPik6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iZWZvcmVSZW1vdmVJdGVtcy5lbWl0KGZpbGVJdGVtcyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQ29tcGxldGVBbGxJdGVtczogKGZpbGVJdGVtczogQXJyYXk8VGlGaWxlSXRlbT4pOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGVBbGxJdGVtcy5lbWl0KGZpbGVJdGVtcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIOagueaNrumFjee9rueahOaWh+S7tuexu+Wei+i/h+a7pOWxnuaAp+iuvue9rkg15LiL55qE5paH5Lu26L+H5ruk5bGe5oCnLOWmguaenGFjY2VwdOacquWumuS5iSzliJnmjInnhad0eXBl6L+H5ruk5p2h5Lu26L+b6KGM6K6+572u77ybXHJcbiAgICAgICAgLy8g5aaC5p6cYWNjZXB05bey5a6a5LmJ77yM5YiZ5oyJ54WnYWNjZXB05a6a5LmJ6K6+572u77ya5q2k56eN5Zy65pmv5bqU55So5LqO5rWP6KeI5Zmo6K6+572uYWNjZXB05ZCO5a+86Ie05paH5Lu256qX5omT5byA5b6I5oWi55qE5oOF5Ya1XHJcbiAgICAgICAgaWYgKFV0aWwuaXNVbmRlZmluZWQodGhpcy5hY2NlcHQpICYmIHRoaXMuZmlsdGVycyAmJiB0aGlzLmZpbHRlcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVycy5mb3JFYWNoKChmaWx0ZXI6IFRpRmlsdGVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyLm5hbWUgPT09ICd0eXBlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWNjZXB0ID0gZmlsdGVyLnBhcmFtc1swXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaJi+WKqOS4iuS8oO+8jOWPr+S7pemAmui/h+e7hOS7tuiwg+eUqFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdXBsb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudXBsb2FkSW5zdC51cGxvYWRBbGwoKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19