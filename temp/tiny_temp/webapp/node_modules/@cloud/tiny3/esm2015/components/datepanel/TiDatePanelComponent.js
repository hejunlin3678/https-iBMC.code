import { Component, ElementRef, EventEmitter, Input, Output, Renderer2, ViewChild } from '@angular/core';
import { TiDateUtil, Util } from '../../utils/Util';
import { TiLocale } from '../../locale/TiLocaleModule';
import { TiBaseComponent } from '../base/TiBaseModule';
import { TiDropComponent } from './../drop/TiDropModule';
/**
 * @ignore
 */
export class TiDatePanelComponent extends TiBaseComponent {
    constructor(render, hostRef, drop) {
        super(hostRef, render);
        this.render = render;
        this.hostRef = hostRef;
        this.drop = drop;
        this.valueChange = new EventEmitter();
        this.picker = 'day'; // 设置年、月、日面板
        this.pickerChange = new EventEmitter();
        /**
         * 开始日期是否禁用
         */
        this.isBeginFixed = false;
        /**
         * 结束日期是否禁用
         */
        this.isEndFixed = false;
        // 日期面板，月份面板点击每个日期、月份的事件回调
        // tslint:disable-next-line:no-output-named-after-standard-event
        this.select = new EventEmitter();
        // 时间面板选择时分秒的事件回调
        this.selectTimeFn = new EventEmitter();
        this.dayArr = [];
        this.nextdayArr = [];
        this.monthArr = [];
        this.endpanelMonthArr = [];
        this.yearArr = [];
        this.endpanelYearArr = [];
        this.pickerValue = {}; // 面板头部显示文本数据
        this.nextPickerValue = {}; // 面板头部显示文本数据
        this.oldValue = {
            begin: undefined,
            end: undefined
        };
        this.hourOptions = this.setOptions(24);
        this.minuteOptions = this.setOptions(60);
        this.secondOptions = this.setOptions(60);
        this.endHourOptions = this.setOptions(24);
        this.endMinuteOptions = this.setOptions(60);
        this.endSecondOptions = this.setOptions(60);
        this.isChinese = true;
        this.local = {
            weekArr: [],
            weekTitleArr: [],
            monthArr: [],
            yearText: ''
        };
    }
    ngOnInit() {
        super.ngOnInit();
        const localeWords = TiLocale.getLocaleWords();
        this.isChinese = localeWords.tiLocaleKey === TiLocale.ZH_CN;
        this.local = {
            weekArr: localeWords.tiDate['weekNamesAbb'],
            weekTitleArr: localeWords.tiDate['weeknamesTitle'],
            monthArr: localeWords.tiDate['monthNamesAbb'],
            yearText: localeWords.tiDate['yearSuffixLabel']
        };
        this.drop.dropSubject.subscribe(() => {
            this.setValue();
        });
        this.renderer.listen(this.nativeElement, 'mousedown', (event) => {
            event.preventDefault(); // 防止dominator blur行为
        });
    }
    ngOnChanges(changes) {
        if (changes['endTimeDisabled'] && !changes['endTimeDisabled'].firstChange) {
            this.endHourOptions = this.setOptions(24, 'end');
            this.endMinuteOptions = this.setOptions(60, 'end');
            this.endSecondOptions = this.setOptions(60, 'end');
        }
        if (changes['beginTimeDisabled'] && !changes['beginTimeDisabled'].firstChange) {
            this.hourOptions = this.setOptions(24);
            this.minuteOptions = this.setOptions(60);
            this.secondOptions = this.setOptions(60);
        }
        // format支持动态变更
        if (changes['picker'] && !changes['picker'].firstChange) {
            if (Util.isUndefined(this.date)) {
                return;
            }
            // 设置下拉面板的数据
            this.setDatePanel();
        }
        // 最大最小值更新时，需要更新面板来保证最大最小值外的禁用有效
        if ((changes['max'] && !changes['max'].firstChange) || (changes['min'] && !changes['min'].firstChange)) {
            this.setDatePanel();
        }
        // 根据传入值确定时间下拉选择项
        if (changes['selectTime'] && !changes['selectTime'].firstChange) {
            const beginTimeStrArr = this.beginTime.value.split(':');
            this.beginHour = this.hourOptions.find((item) => item.label === beginTimeStrArr[0]);
            this.beginMinute = this.minuteOptions.find((item) => item.label === beginTimeStrArr[1]);
            this.beginSecond = this.secondOptions.find((item) => item.label === beginTimeStrArr[2]);
            if (this.endTime) {
                const endTimeStrArr = this.endTime.value.split(':');
                this.endHour = this.endHourOptions.find((item) => item.label === endTimeStrArr[0]);
                this.endMinute = this.endMinuteOptions.find((item) => item.label === endTimeStrArr[1]);
                this.endSecond = this.endSecondOptions.find((item) => item.label === endTimeStrArr[2]);
            }
            setTimeout(() => {
                this.timeHandleFn(this.beginHour, this.beginHourContainerRef);
                this.timeHandleFn(this.beginMinute, this.beginMinuteContainerRef);
                this.timeHandleFn(this.beginSecond, this.beginSecondContainerRef);
                if (this.endTime) {
                    this.timeHandleFn(this.endHour, this.endHourContainerRef);
                    this.timeHandleFn(this.endMinute, this.endMinuteContainerRef);
                    this.timeHandleFn(this.endSecond, this.endSecondContainerRef);
                }
            }, 0);
        }
        if (changes['beginTime'] && !changes['beginTime'].firstChange) {
            const beginTimeArr = changes['beginTime'].currentValue.value.split(':');
            this.beginHour = this.hourOptions.find((item) => item.label === beginTimeArr[0]);
            this.beginMinute = this.minuteOptions.find((item) => item.label === beginTimeArr[1]);
            this.beginSecond = this.secondOptions.find((item) => item.label === beginTimeArr[2]);
            this.timeHandleFn(this.beginHour, this.beginHourContainerRef);
            this.timeHandleFn(this.beginMinute, this.beginMinuteContainerRef);
            this.timeHandleFn(this.beginSecond, this.beginSecondContainerRef);
        }
        if (changes['endTime'] && !changes['endTime'].firstChange) {
            const endTimeArr = changes['endTime'].currentValue.value.split(':');
            this.endHour = this.endHourOptions.find((item) => item.label === endTimeArr[0]);
            this.endMinute = this.endMinuteOptions.find((item) => item.label === endTimeArr[1]);
            this.endSecond = this.endSecondOptions.find((item) => item.label === endTimeArr[2]);
            this.timeHandleFn(this.endHour, this.endHourContainerRef);
            this.timeHandleFn(this.endMinute, this.endMinuteContainerRef);
            this.timeHandleFn(this.endSecond, this.endSecondContainerRef);
        }
    }
    timeHandleFn(model, ele) {
        if (model === undefined) {
            return;
        }
        const index = model.label;
        this.render.setProperty(ele.nativeElement.children[0], 'scrollTop', index * 30);
        // TODO 动画效果
    }
    ngDoCheck() {
        super.ngDoCheck();
        // 只有点击面板打开时，才会有接口值，需要渲染面板，在没有打开时间日期面板时不需要渲染面板数据
        if (Util.isUndefined(this.value) || Util.isUndefined(this.max)) {
            return;
        }
        if (!TiDateUtil.isDateEqual(this.oldValue['begin'], this.value['begin']) ||
            !TiDateUtil.isDateEqual(this.oldValue['end'], this.value['end'])) {
            this.setValue();
            this.oldValue = {
                begin: this.value.begin,
                end: this.value.end
            };
        }
    }
    // 处理左侧年后退按钮事件
    onPreYearClick(event) {
        // 最小月，最小年，最小年时间段：左按钮灰化
        if (this.isPickerYearMinValue()) {
            return;
        }
        // 日期和月份面板
        if (this.picker === 'day' || this.picker === 'month' || this.picker === 'onlyYearMonth') {
            const year = this.date.year - 1; // 年份减1
            if (year >= this.min.getFullYear()) { // 当年份大于等于最小值
                this.date.year = year;
                if (this.isSmallerThanMinMonth(year, this.date.month)) {
                    this.date.month = this.min.getMonth() + 1;
                }
                this.setYearMonthText();
                this.setPreNextState(year, this.date.month);
                this.setDayMonthArr(this.picker);
            }
            return;
        }
        // 年面板
        if (this.picker === 'year') {
            // 当前年减10
            const year = this.date.year - 10; // 年份减10
            const minValueRange = this.getYearRange(this.min.getFullYear()); // 最小年：年面板的范围
            const currentYearRange = this.getYearRange(year); // 当前年面板的范围
            // 当年份大于等于最小年面板的最小值是有效的
            if (year >= minValueRange.min) {
                this.date.year = currentYearRange.min; // 默认跳转到年面板的第一个有效年
                // 设置下拉面板头部显示文本
                this.setYearMonthText();
                // 设置左右键状态
                this.setYearRangePreNextState();
                // 设置年份面板的值和状态
                this.setYearArr();
                this.setEndpanelYearArr();
            }
        }
    }
    // 处理左侧月后退按钮事件
    onPreMonthClick(event) {
        // 最小月，最小年，最小年时间段：左按钮灰化
        if (this.isMinMonth) {
            return;
        }
        // 日期面板
        let month;
        let year;
        if (this.date.month === 1) {
            month = 12;
            year = this.date.year - 1;
        }
        else {
            month = this.date.month - 1;
            year = this.date.year;
        }
        if (!this.isSmallerThanMinMonth(year, month)) {
            this.date.month = month;
            this.date.year = year;
            this.setYearMonthText();
            this.setPreNextState(year, month);
            this.setDayArr();
            this.setNextDayArr();
        }
    }
    // 处理右侧月前进按钮事件
    onNextMonthClick(event) {
        // 最大月，最大年，最大年时间段
        if (this.isMaxMonth) {
            return;
        }
        let month;
        let year;
        if (this.date.month === 12) {
            month = 1;
            year = this.date.year + 1;
        }
        else {
            month = this.date.month + 1;
            year = this.date.year;
        }
        if (!this.isBiggerThanMaxMonth(year, month)) {
            this.date.month = month;
            this.date.year = year;
            this.setYearMonthText();
            this.setPreNextState(year, month);
            this.setDayArr();
            this.setNextDayArr();
        }
    }
    // 处理右侧年前进按钮事件
    onNextYearClick(event) {
        // 最大月，最大年，最大年时间段
        if (this.isPickerYearMaxValue()) {
            return;
        }
        // 日期和月份面板
        if (this.picker === 'day' || this.picker === 'month' || this.picker === 'onlyYearMonth') {
            const year = this.date.year + 1; // 年份加1
            if (year <= this.max.getFullYear()) { // 判断是否小于等于最大年
                this.date.year = year;
                if (this.isBiggerThanMaxMonth(year, this.date.month)) {
                    this.date.month = this.max.getMonth() + 1;
                }
                this.setYearMonthText();
                this.setPreNextState(year, this.date.month);
                this.setDayMonthArr(this.picker);
            }
            return;
        }
        // 年面板
        if (this.picker === 'year' || this.picker === 'onlyYear') {
            const year = this.date.year + 10; // 年份加10
            const maxValueRange = this.getYearRange(this.max.getFullYear());
            const currentYearRange = this.getYearRange(year);
            // 当年份小于等于最大年面板的最大值是有效的
            if (year <= maxValueRange.max) {
                this.date.year = currentYearRange.min;
                // 设置下拉面板头部显示文本
                this.setYearMonthText();
                // 设置左右键状态
                this.setYearRangePreNextState();
                // 设置年份面板的值和状态
                this.setYearArr();
                this.setEndpanelYearArr();
            }
        }
    }
    // 面板头部文本点击事件
    onHeadTextClick(picker) {
        // 点击日期面板头部，跳转到月份面板
        this.picker = picker;
        this.pickerChange.emit(picker);
    }
    // 日期面板：日期点击事件
    onDayClick(isNext, day, event) {
        if (day.state === 'disable') {
            return;
        }
        if (day.state === 'preMonth') { // 如果是上个月的日期则跳转到上个月
            this.onPreMonthClick(event);
        }
        else if (day.state === 'nextMonth') { // 如果是下个月的日期则跳转到下个月
            this.onNextMonthClick(event);
        }
        let dateSelect;
        const newDate = JSON.parse(JSON.stringify(this.date));
        if (isNext) {
            newDate.year = this.date.month === 12 ? this.date.year + 1 : this.date.year;
            newDate.month = this.date.month === 12 ? 1 : this.date.month + 1;
            dateSelect = new Date(newDate.year, newDate.month - 1, Number(day.value));
        }
        else {
            dateSelect = new Date(this.date.year, this.date.month - 1, day.value);
        }
        if (this.focusedPosition !== 'begin' && this.isRange) {
            if (this.value.end === null && this.value.begin !== null && TiDateUtil.isBigger(this.value.begin, dateSelect)) {
                this.value.begin = dateSelect;
                this.valueChange.emit(this.value);
                // 事件回调：点击日期执行面板收起操作
                this.select.emit(day.state);
                return;
            }
            this.value.end = dateSelect;
            if (this.value.begin !== null && TiDateUtil.isBigger(this.value.begin, this.value.end)) {
                this.value.begin = null;
            }
        }
        else {
            this.value.begin = dateSelect;
            if (this.value.end !== null && TiDateUtil.isBigger(this.value.begin, this.value.end)) {
                this.value.end = null;
            }
        }
        this.valueChange.emit(this.value);
        // 事件回调：点击日期执行面板收起操作
        this.select.emit(day.state);
    }
    // 月份面板：月份点击事件
    onMonthClick(month, event, isEndClick) {
        // 月份灰化不可点击
        if (month.state === 'disable') {
            return;
        }
        // 当前月值变更
        this.date.month = this.local.monthArr.indexOf(String(month.value)) + 1;
        // 根据当前月更新面板头部月份显示
        this.pickerValue = this.pickerValue instanceof Object ? this.pickerValue : {};
        this.nextPickerValue = this.nextPickerValue instanceof Object ? this.nextPickerValue : {};
        this.pickerValue['month'] = this.local.monthArr[this.date.month - 1];
        this.nextPickerValue['month'] = this.date.month === 12 ? this.local.monthArr[0] : this.local.monthArr[this.date.month];
        // 无日期面板：点击月份将value值变更。将执行select事件回调
        // 有日期面板：点击跳转到日期面板，根据年月设置左右按钮状态和日期面板值；
        if (this.format.indexOf('d') === -1) { // 只显示年月
            this.date.year = isEndClick ? this.date.year + 1 : this.date.year;
            if (this.focusedPosition === 'begin') {
                this.value.begin = new Date(this.date.year, this.date.month - 1);
            }
            else {
                this.value.end = new Date(this.date.year, this.date.month - 1);
            }
            this.valueChange.emit(this.value);
            this.select.emit();
        }
        else {
            this.picker = 'day';
            this.pickerChange.emit(this.picker);
        }
    }
    // 年范围面板：年点击事件
    onYearClick(year, event) {
        if (year.state !== 'disable') {
            this.date.year = year.value;
            this.pickerValue = this.pickerValue instanceof Object ? this.pickerValue : {};
            this.nextPickerValue = this.nextPickerValue instanceof Object ? this.nextPickerValue : {};
            this.pickerValue['year'] = `${this.date.year}${this.local.yearText}`;
            this.nextPickerValue['year'] = this.date.month === 12 ? `${this.date.year + 1}${this.local.yearText}`
                : `${this.date.year}${this.local.yearText}`;
            this.nextPickerValue['onlyYear'] = `${this.date.year + 1}${this.local.yearText}`;
            // 只有年份面板
            if (this.format.indexOf('M') === -1) {
                if (this.focusedPosition === 'begin') {
                    this.value.begin = new Date(this.date.year, 1, 1);
                }
                else {
                    this.value.end = new Date(this.date.year, 1, 1);
                }
                this.valueChange.emit(this.value);
                this.select.emit();
                return;
            }
            // 年月格式
            if (this.format.indexOf('d') === -1) {
                this.picker = 'onlyYearMonth';
                this.setDayMonthArr(this.picker);
                return;
            }
            this.picker = 'month';
            this.pickerChange.emit(this.picker);
        }
    }
    onSelect(val, timeOption) {
        const obj = {
            timeOption,
            val
        };
        this.selectTimeFn.emit(obj);
        switch (timeOption) {
            case 'beginHour':
                this.timeHandleFn(val, this.beginHourContainerRef);
                break;
            case 'beginMinute':
                this.timeHandleFn(val, this.beginMinuteContainerRef);
                break;
            case 'beginSecond':
                this.timeHandleFn(val, this.beginSecondContainerRef);
                break;
            case 'endHour':
                this.timeHandleFn(val, this.endHourContainerRef);
                break;
            case 'endMinute':
                this.timeHandleFn(val, this.endMinuteContainerRef);
                break;
            case 'endSecond':
                this.timeHandleFn(val, this.endSecondContainerRef);
                break;
            default:
                break;
        }
    }
    // 分年月日三个面板：根据不同面板设置相应的值
    setDatePanel() {
        // 设置下拉面板头部显示文本
        this.setYearMonthText();
        // 设置年月文本；设置左右键状态；设置下拉面板中日期
        switch (this.picker) {
            case 'day':
                this.setPreNextState(this.date.year, this.date.month);
                this.setDayArr();
                this.setNextDayArr();
                break;
            case 'month':
            case 'onlyYearMonth':
                this.setPreNextState(this.date.year, this.date.month);
                this.setMonthArr();
                this.setEndpanelMonthArr();
                break;
            case 'year':
            case 'onlyYear':
                this.setYearRangePreNextState();
                this.setYearArr();
                this.setEndpanelYearArr();
                break;
            default:
                break;
        }
    }
    /**
     * @description 设置展示的日期
     */
    setValue() {
        // 1.根据接口值获取合法的当前值
        let date;
        let today;
        if ((this.value instanceof Object) && TiDateUtil.isDate(this.value.begin)) {
            date = this.value.begin;
        }
        else if ((this.value instanceof Object) && TiDateUtil.isDate(this.value.end)) {
            date = this.value.end;
        }
        else {
            // 1.1根据nowDateTime接口获取现在时间
            today = (this.nowDateTime && TiDateUtil.isDate(this.nowDateTime)) ? this.nowDateTime : new Date();
            // 1.2根据最大值最小值对获取的现在时间进行进一步判断
            const year = today.getFullYear();
            const month = today.getMonth() + 1;
            const day = today.getDate();
            date = (!this.isBiggerThanMaxDay(year, month, day) && !this.isSmallerThanMinDay(year, month, day))
                ? today : this.min;
        }
        // 2.将当前时间的年月日存在对象
        this.date = {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate()
        };
        this.setDatePanel();
    }
    /**
     * @description 判断参数传来的日期是否大于最大日期：大于返回true，小于返回false
     * @param year 年份
     * @param month 月份
     * @param day 日
     */
    isBiggerThanMaxDay(year, month, day) {
        // 1.最大值不是合法的时间对象
        if (!TiDateUtil.isDate(this.max)) {
            return false;
        }
        // 2.重新生成一个新的最大值的原因：防止传入一个带时分的最大值
        let max = this.max;
        max = new Date(max.getFullYear(), max.getMonth(), max.getDate());
        if (max.getTime() < new Date(year, month - 1, day).getTime()) {
            return true;
        }
        return false;
    }
    /**
     * @description 判断参数传来的日期是否小于最小日期：小于返回true，大于返回false
     * @param year 年份
     * @param month 月份
     * @param day 日
     */
    isSmallerThanMinDay(year, month, day) {
        if (!TiDateUtil.isDate(this.min)) {
            return false;
        }
        // 防止传入一个带时分的最小值
        let min = this.min;
        min = new Date(min.getFullYear(), min.getMonth(), min.getDate());
        if (min.getTime() > new Date(year, month - 1, day).getTime()) {
            return true;
        }
        return false;
    }
    // 是否为禁用日期
    isDisabledDay(year, month, day) {
        if (!Util.isArray(this.disabledDays)) {
            return false;
        }
        let isDisabled = false;
        this.disabledDays.forEach((item) => {
            if (item.getTime() === new Date(year, month - 1, day).getTime()) {
                isDisabled = true;
            }
        });
        return isDisabled;
    }
    // 开始日期或者结束日期固定不允许修改时，超出范围的需要禁用
    isFixedWithDisabled(year, month, day) {
        if (!this.isBeginFixed && !this.isEndFixed || this.value === null) {
            return false;
        }
        // 开始日期有值并且禁用
        if (this.isBeginFixed) {
            if (this.value.begin.getTime() > new Date(year, month - 1, day).getTime()) {
                return true;
            }
        }
        if (this.isEndFixed) {
            if (this.value.end.getTime() < new Date(year, month - 1, day).getTime()) {
                return true;
            }
        }
        return false;
    }
    /**
     * @description 设置下拉面板中年月文本
     */
    setYearMonthText() {
        // 1.大于等于最大年，设置年为最大年，月大于最大月，设置为最大月；
        if (this.date.year >= this.max.getFullYear()) {
            this.date.year = this.max.getFullYear();
            if (this.date.month > (this.max.getMonth() + 1)) {
                this.date.month = this.max.getMonth() + 1;
            }
        }
        // 2.小于等于最小年，设置年为最小年，月份小于最小月设置为最小月；
        if (this.date.year <= this.min.getFullYear()) {
            this.date.year = this.min.getFullYear();
            if (this.date.month < (this.min.getMonth() + 1)) {
                this.date.month = this.min.getMonth() + 1;
            }
        }
        // 3.根据年月值，拼成下拉面板中年月文本
        const start = this.date.year - this.date.year % 10;
        this.pickerValue = this.pickerValue instanceof Object ? this.pickerValue : {};
        this.nextPickerValue = this.nextPickerValue instanceof Object ? this.nextPickerValue : {};
        this.pickerValue['year'] = `${this.date.year}${this.local.yearText}`;
        this.nextPickerValue['onlyYear'] = `${this.date.year + 1}${this.local.yearText}`;
        this.nextPickerValue['year'] = this.date.month === 12 ? `${this.date.year + 1}${this.local.yearText}`
            : `${this.date.year}${this.local.yearText}`;
        this.pickerValue['month'] = this.local.monthArr[this.date.month - 1];
        this.nextPickerValue['month'] = this.date.month === 12 ? this.local.monthArr[0] : this.local.monthArr[this.date.month];
        this.pickerValue['yearRange'] = `${start} - ${start + 9}`;
        this.pickerValue['endpanelYearRange'] = `${start + 10} - ${start + 19}`;
    }
    /**
     * @description 设置上月、下月按钮状态：已经是最大、最小月时，将对应的按钮置灰
     * @param year 年份
     * @param month 月份
     */
    setPreNextState(year, month) {
        this.isMaxMonth = this.isEqualToMaxMonth(year, month);
        this.isMinMonth = this.isEqualToMinMonth(year, month);
        this.isMaxYear = year === this.max.getFullYear();
        this.isMinYear = year === this.min.getFullYear();
    }
    /**
     * @description 判断参数传来的年月是否等于最大月份：等于返回true，不等于返回false
     * @param year 年份
     * @param month 月份
     */
    isEqualToMaxMonth(year, month) {
        // 1.最大值不是合法的时间对象
        if (!TiDateUtil.isDate(this.max)) {
            return false;
        }
        // 2.重新生成一个新的最大值的原因：防止传入一个带时分的最大值
        let max = this.max;
        max = new Date(max.getFullYear(), max.getMonth(), 1);
        if (max.getTime() === new Date(year, month - 1, 1).getTime()) {
            return true;
        }
        return false;
    }
    /**
     * @description 判断参数传来的年月是否等于最小月份：等于返回true，不等于返回false
     * @param year 年份
     * @param month 月份
     */
    isEqualToMinMonth(year, month) {
        if (!TiDateUtil.isDate(this.min)) {
            return false;
        }
        let min = this.min;
        min = new Date(min.getFullYear(), min.getMonth(), 1);
        if (min.getTime() === new Date(year, month - 1, 1).getTime()) {
            return true;
        }
        return false;
    }
    /**
     * @description 根据面板设置 dayArr或monthArr
     *
     */
    setDayMonthArr(picker) {
        if (picker === 'day') {
            this.setDayArr();
            this.setNextDayArr();
        }
        else if (picker === 'month' || picker === 'onlyYearMonth') {
            this.setMonthArr();
            this.setEndpanelMonthArr();
        }
    }
    /**
     * @description 根据当前年月值，设置下拉面板中显示的日数据
     */
    // tslint:disable-next-line:cyclomatic-complexity
    // eslint-disable-next-line complexity
    setDayArr() {
        // 获取当前年月
        const year = parseInt(String(this.date.year), 10);
        const month = parseInt(String(this.date.month), 10);
        // 1：计算这个月1号是下拉面板第一行的第几个
        // 获取到这个月1号是周几 周一到周六：1-6，周天：0；
        const begin = new Date(year, month - 1, 1).getDay();
        // 2：将上个月的日期存入数组dateArr
        const dateArr = []; // 存储下拉面板中所有日的值和状态
        const preMonth = (month === 1 ? 12 : (month - 1)); // 上个月
        const preMonthDays = new Date(year, preMonth, 0).getDate(); // 上个月总天数
        const preMonthStart = preMonthDays - begin + 1; // 获取到第一行的起始值
        let preMonthDayState = ''; // 上个月日期的状态
        // 本月是最小月时的上月日期置灰
        preMonthDayState = this.isMinMonth ? 'disable' : 'preMonth';
        for (let i = 0; i < begin; i++) {
            dateArr[i] = {
                value: preMonthStart + i,
                state: preMonthDayState
            };
            if (this.isSmallerThanMinDay(year, month - 1, preMonthStart + i) || this.isDisabledDay(year, month - 1, preMonthStart + i)
                || this.isFixedWithDisabled(year, month - 1, preMonthStart + i)) {
                dateArr[i].state = 'disable';
            }
        }
        // 3：将本月的日存入数组dateArr
        let dayNum = 1;
        const monthDays = new Date(year, month, 0).getDate(); // 这个月总天数
        const length = begin + monthDays;
        let state = '';
        for (let j = begin; j < length; j++) {
            if (this.isBiggerThanMaxDay(year, month, dayNum) ||
                this.isSmallerThanMinDay(year, month, dayNum) ||
                this.isDisabledDay(year, month, dayNum) ||
                this.isFixedWithDisabled(year, month, dayNum)) {
                state = 'disable'; // 日样式置灰
            }
            else if (this.isEqualToValue('day', year, month, dayNum)) {
                state = 'current'; // 当前选中
            }
            else if (this.isBetweenInRange(year, month, dayNum)) {
                state = 'select'; // 在选中范围
            }
            else {
                state = 'default'; // 没有选中
            }
            dateArr[j] = {
                value: dayNum,
                state,
                isToday: this.isEqualToToday('day', year, month, dayNum)
            };
            dayNum++;
        }
        // 4：将下个月的日存入数组dateArr
        dayNum = 1;
        const nextMonthDayState = this.isMaxMonth ? 'disable' : 'nextMonth'; // 下个月日期的状态
        for (let k = dateArr.length; k < 42; k++) {
            dateArr[k] = {
                value: dayNum,
                state: nextMonthDayState
            };
            if (this.isBiggerThanMaxDay(year, month + 1, dayNum) || this.isDisabledDay(year, month + 1, dayNum)
                || this.isFixedWithDisabled(year, month + 1, dayNum)) {
                dateArr[k].state = 'disable';
            }
            dayNum++;
        }
        // 5：将dateArr组装成下拉面板中显示日的二维数组dayArr
        for (let p = 0; p < dateArr.length / 7; p++) {
            this.dayArr[p] = [];
            for (let q = 0; q < 7; q++) {
                this.dayArr[p].push(dateArr[q + p * 7]);
            }
        }
    }
    /**
      * @description 根据当前年月值，设置下拉面板中显示的日数据
      */
    // tslint:disable-next-line:cyclomatic-complexity
    // eslint-disable-next-line complexity
    setNextDayArr() {
        // 获取当前年月
        const sss = this.date.month === 12 ? 1 : this.date.month + 1;
        const yyy = this.date.month === 12 ? this.date.year + 1 : this.date.year;
        const year = parseInt(String(yyy), 10);
        const month = parseInt(String(sss), 10);
        //    const monthNext: number = parseInt(String(this.date.month + 1), 10);
        // 1：计算这个月1号是下拉面板第一行的第几个
        // 获取到这个月1号是周几 周一到周六：1-6，周天：0；
        const begin = new Date(year, month - 1, 1).getDay();
        // 2：将上个月的日期存入数组dateArr
        const dateArr = []; // 存储下拉面板中所有日的值和状态
        const preMonth = (month === 1 ? 12 : (month - 1)); // 上个月
        const preMonthDays = new Date(year, preMonth, 0).getDate(); // 上个月总天数
        const preMonthStart = preMonthDays - begin + 1; // 获取到第一行的起始值
        for (let i = 0; i < begin; i++) {
            dateArr[i] = {
                value: preMonthStart + i,
                state: 'preMonth'
            };
            if (this.isBiggerThanMaxDay(year, month - 1, preMonthStart + i) ||
                this.isSmallerThanMinDay(year, month - 1, preMonthStart + i) ||
                this.isDisabledDay(year, month - 1, preMonthStart + i) ||
                this.isFixedWithDisabled(year, month - 1, preMonthStart + i)) {
                dateArr[i].state = 'disable';
            }
        }
        // 3：将本月的日存入数组dateArr
        let dayNum = 1;
        const monthDays = new Date(year, month, 0).getDate(); // 这个月总天数
        const length = begin + monthDays;
        let state = '';
        for (let j = begin; j < length; j++) {
            if (this.isBiggerThanMaxDay(year, month, dayNum) ||
                this.isSmallerThanMinDay(year, month, dayNum) ||
                this.isDisabledDay(year, month, dayNum) ||
                this.isFixedWithDisabled(year, month, dayNum)) {
                state = 'disable'; // 日样式置灰
            }
            else if (this.isEqualToValue('day', year, month, dayNum)) {
                state = 'current'; // 当前选中
            }
            else if (this.isBetweenInRange(year, month, dayNum)) {
                state = 'select'; // 在选中范围
            }
            else {
                state = 'default'; // 没有选中
            }
            dateArr[j] = {
                value: dayNum,
                state,
                isToday: this.isEqualToToday('day', year, month, dayNum)
            };
            dayNum++;
        }
        // 4：将下个月的日存入数组dateArr
        dayNum = 1;
        const nextMonthDayState = this.isMaxMonth ? 'disable' : 'nextMonth'; // 下个月日期的状态
        for (let k = dateArr.length; k < 42; k++) {
            dateArr[k] = {
                value: dayNum,
                state: nextMonthDayState
            };
            if (this.isBiggerThanMaxDay(year, month + 1, dayNum) ||
                this.isDisabledDay(year, month + 1, dayNum) ||
                this.isFixedWithDisabled(year, month + 1, dayNum)) {
                dateArr[k].state = 'disable';
            }
            dayNum++;
        }
        // 5：将dateArr组装成下拉面板中显示日的二维数组dayArr
        for (let p = 0; p < dateArr.length / 7; p++) {
            this.nextdayArr[p] = [];
            for (let q = 0; q < 7; q++) {
                this.nextdayArr[p].push(dateArr[q + p * 7]);
            }
        }
    }
    /**
     * @description 判断参数传来的日期是否begin值小于end的值，end值大于begion值
     * @param year 年份
     * @param month 月份
     * @param day 日
     */
    isOutInRange(year, month, day) {
        const value = this.value;
        const curValue = new Date(year, month - 1, day).getTime();
        if (!(value instanceof Object)) {
            return false;
        }
        let end = value.end;
        let endValue;
        if (TiDateUtil.isDate(value.end)) {
            // 只取年月日：防止传入带有时分秒的值
            end = new Date(end.getFullYear(), end.getMonth(), end.getDate());
            endValue = end.getTime();
            return curValue > endValue;
        }
        return false;
    }
    /**
     * @description 判断参数传来的日期是否等于当前选中的日期：等于返回true，不等于返回false
     * @param year 年份
     * @param month 月份
     * @param day 日
     */
    isEqualToValue(type, year, month, day) {
        const beginVal = this.value.begin;
        const endVal = this.value.end;
        if (beginVal === null && endVal === null) {
            return false;
        }
        else {
            let value1;
            let value2;
            let beginV;
            let endV;
            if (beginVal !== null) {
                value1 = new Date(beginVal.getFullYear(), beginVal.getMonth(), beginVal.getDate());
                beginV = this.isEqualValue(type, value1, year, month, day);
            }
            if (endVal !== null) {
                value2 = new Date(endVal.getFullYear(), endVal.getMonth(), endVal.getDate());
                endV = this.isEqualValue(type, value2, year, month, day);
            }
            return beginV || endV;
        }
    }
    /**
     * @description 判断参数传来的日期是否在当前选中日期的范围内,并且不等于当前选中的值：符合返回true，不符合返回false
     * @param year 年份
     * @param month 月份
     * @param day 日
     */
    isBetweenInRange(year, month, day) {
        const value = this.value;
        // value不是对象，begin或者end不是合法日期
        if (!(value instanceof Object) || !TiDateUtil.isDate(value.begin) || !TiDateUtil.isDate(value.end)) {
            return false;
        }
        let begin = value.begin;
        begin = new Date(begin.getFullYear(), begin.getMonth(), begin.getDate());
        const beginValue = begin.getTime();
        let end = value.end;
        end = new Date(end.getFullYear(), end.getMonth(), end.getDate());
        const endValue = end.getTime();
        const curValue = new Date(year, month - 1, day).getTime();
        if (beginValue < curValue && curValue <= endValue) {
            return true;
        }
        return false;
    }
    /**
     * @description 判断参数传来的日期是否等于当前日期时间
     * @param year 年份
     * @param month 月份
     * @param day 日
     */
    isEqualToToday(type, year, month, day) {
        const today = (this.nowDateTime && TiDateUtil.isDate(this.nowDateTime)) ? this.nowDateTime : new Date();
        return this.isEqualValue(type, today, year, month, day);
    }
    // 判断日期是当前日期或当前选中日期
    // tslint:disable-next-line:prefer-function-over-method
    isEqualValue(type, value, year, month, day) {
        let _value;
        if (type === 'year') { // 年
            _value = value.getFullYear();
            if (_value === year) {
                return true;
            }
            return false;
        }
        if (type === 'month') { // 年、月
            _value = new Date(value.getFullYear(), value.getMonth());
            if (_value.getTime() === new Date(year, month - 1).getTime()) {
                return true;
            }
            return false;
        }
        // 年、月、日
        _value = new Date(value.getFullYear(), value.getMonth(), value.getDate());
        if (_value.getTime() === new Date(year, month - 1, day).getTime()) {
            return true;
        }
        return false;
    }
    /**
     * @description 根据当前年份和最大最小值，设置下拉面板中显示的月份状态
     */
    setMonthArr() {
        const year = this.date.year;
        const innerMonth = [];
        let state = '';
        // 设置每个月份对应的值和状态
        for (let month = 1; month <= 12; month++) {
            // tslint:disable-next-line:prefer-conditional-expression
            if (this.isSmallerThanMinMonth(year, month) || (this.isBiggerThanMaxMonth(year, month))) {
                state = 'disable'; // 月样式置灰
            }
            else if (this.isEqualToValue('month', year, month)) {
                state = 'current'; // 当前选中
            }
            else {
                state = 'default'; // 没有选中
            }
            innerMonth[month - 1] = {
                value: this.local.monthArr[month - 1],
                state,
                isMonth: this.isEqualToToday('month', year, month)
            };
        }
        // 将月份数据格式化为二维数组
        this.monthArr = [];
        for (let p = 0; p < 3; p++) {
            this.monthArr[p] = [];
            for (let q = 0; q < 4; q++) {
                this.monthArr[p].push(innerMonth[q + p * 4]);
            }
        }
    }
    /**
     * @description 根据当前年份和最大最小值，设置下拉面板中显示的月份状态
     */
    setEndpanelMonthArr() {
        const year = this.date.year + 1;
        const innerMonth = [];
        let state = '';
        // 设置每个月份对应的值和状态
        for (let month = 1; month <= 12; month++) {
            // tslint:disable-next-line:prefer-conditional-expression
            if (this.isSmallerThanMinMonth(year, month) || (this.isBiggerThanMaxMonth(year, month))) {
                state = 'disable'; // 月样式置灰
            }
            else if (this.isEqualToValue('month', year, month)) {
                state = 'current'; // 当前选中
            }
            else {
                state = 'default'; // 没有选中
            }
            innerMonth[month - 1] = {
                value: this.local.monthArr[month - 1],
                state,
                isMonth: this.isEqualToToday('month', year, month)
            };
        }
        // 将月份数据格式化为二维数组
        this.endpanelMonthArr = [];
        for (let p = 0; p < 3; p++) {
            this.endpanelMonthArr[p] = [];
            for (let q = 0; q < 4; q++) {
                this.endpanelMonthArr[p].push(innerMonth[q + p * 4]);
            }
        }
    }
    /**
     * @description 判断参数传来的年月是否小于最小月份：小于返回true，大于返回false
     * @param year 年份
     * @param month 月份
     */
    isSmallerThanMinMonth(year, month) {
        if (!TiDateUtil.isDate(this.min)) {
            return false;
        }
        let min = this.min;
        min = new Date(min.getFullYear(), min.getMonth(), 1);
        if (min.getTime() > new Date(year, month - 1, 1).getTime()) {
            return true;
        }
        return false;
    }
    /**
     * @description 判断参数传来的年月是否大于最大月份：大于返回true，小于返回false
     * @param year 年份
     * @param month 月份
     */
    isBiggerThanMaxMonth(year, month) {
        if (!TiDateUtil.isDate(this.max)) {
            return false;
        }
        let max = this.max;
        max = new Date(max.getFullYear(), max.getMonth(), 1);
        if (max.getTime() < new Date(year, month - 1, 1).getTime()) {
            return true;
        }
        return false;
    }
    /**
     * @description 设置按钮状态：
     */
    setYearRangePreNextState() {
        const minValueRange = this.getYearRange(this.min.getFullYear());
        const maxValueRange = this.getYearRange(this.max.getFullYear());
        this.isMaxYearRange = (this.date.year >= maxValueRange.min && this.date.year <= maxValueRange.max) ? true : false;
        this.isMinYearRange = (this.date.year >= minValueRange.min && this.date.year <= minValueRange.max) ? true : false;
    }
    // 获取时间面板：最大值和最小值年面板范围
    getYearRange(year) {
        const minDateRange = year - year % 10;
        const maxDateRange = minDateRange + 9;
        return {
            min: minDateRange,
            max: maxDateRange
        };
    }
    /**
     * @description 根据当前年份和最大最小值，设置下拉面板中显示的年份状态
     */
    setYearArr() {
        // 1.获取当前年；算出起始年，
        const innerYear = []; // 存储年值
        const year = this.date.year - this.date.year % 10;
        // 2.数组的第一个为起始年 -1；
        const start = year - 1;
        const end = year + 9;
        let index = 0;
        let state = '';
        const preYearRange = (start <= this.min.getFullYear()) ? 'disable' : 'preYear';
        innerYear.push({
            state: preYearRange,
            value: start
        });
        // 3.起始年  - 最终年（起始年+9）（for遍历）
        for (let i = year; i <= end; i++) {
            index++;
            if (i < this.min.getFullYear() || i > this.max.getFullYear()) {
                state = 'disable';
            }
            else if (this.isEqualToValue('year', i)) {
                state = 'current'; // 当前选中
            }
            else {
                state = 'default';
            }
            innerYear[index] = {
                value: i,
                state,
                isYear: this.isEqualToToday('year', i)
            };
        }
        // 判断是不是大于最大年：大于最大年状态为灰化
        const nextYearRange = (end >= this.max.getFullYear()) ? 'disable' : 'nextYear';
        innerYear.push({
            state: nextYearRange,
            value: end + 1
        });
        // 将月份数据格式化为二维数组
        this.yearArr = [];
        for (let p = 0; p < 3; p++) {
            this.yearArr[p] = [];
            for (let q = 0; q < 4; q++) {
                this.yearArr[p].push(innerYear[q + p * 4]);
            }
        }
    }
    /**
     * @description 根据当前年份和最大最小值，设置下拉面板中显示的年份状态
     */
    setEndpanelYearArr() {
        // 1.获取当前年；算出起始年，
        const innerYear = []; // 存储年值
        const year = this.date.year - this.date.year % 10 + 10;
        // 2.数组的第一个为起始年 -1；
        const start = year - 1;
        const end = year + 9;
        let index = 0;
        let state = '';
        const preYearRange = (start <= this.min.getFullYear()) ? 'disable' : 'preYear';
        innerYear.push({
            state: preYearRange,
            value: start
        });
        // 3.起始年  - 最终年（起始年+9）（for遍历）
        for (let i = year; i <= end; i++) {
            index++;
            if (i < this.min.getFullYear() || i > this.max.getFullYear()) {
                state = 'disable';
            }
            else if (this.isEqualToValue('year', i)) {
                state = 'current'; // 当前选中
            }
            else {
                state = 'default';
            }
            innerYear[index] = {
                value: i,
                state,
                isYear: this.isEqualToToday('year', i)
            };
        }
        // 判断是不是大于最大年：大于最大年状态为灰化
        const nextYearRange = (end >= this.max.getFullYear()) ? 'disable' : 'nextYear';
        innerYear.push({
            state: nextYearRange,
            value: end + 1
        });
        // 将月份数据格式化为二维数组
        this.endpanelYearArr = [];
        for (let p = 0; p < 3; p++) {
            this.endpanelYearArr[p] = [];
            for (let q = 0; q < 4; q++) {
                this.endpanelYearArr[p].push(innerYear[q + p * 4]);
            }
        }
    }
    // 设置左年后退按钮灰化
    isPickerYearMinValue() {
        return this.picker === 'year' ? this.isMinYearRange : this.isMinYear;
    }
    // 设置右年前进按钮灰化
    isPickerYearMaxValue() {
        return this.picker === 'year' ? this.isMaxYearRange : this.isMaxYear;
    }
    trackByFn(index, item) {
        return index;
    }
    setOptions(num, pos) {
        const options = [];
        for (let i = 0; i < num; i++) {
            options[i] = {
                label: i < 10 ? '0' + i : String(i),
                disabled: pos === 'end' ? this.endTimeDisabled : this.beginTimeDisabled
            };
        }
        return options;
    }
    /**
    * @ignore
    * 时间选择框部分鼠标移出时去除hover样式
    */
    onMouseleave(listCom) {
        listCom.hoverOption = null;
    }
}
TiDatePanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-date-panel',
                template: "<!-- 1.\u9762\u677F\u5934\u90E8-->\r\n<section class=\"ti3-date-picker-header\" *ngIf='!selectTime'>\r\n    <!-- 1.1\u5DE6\u6309\u94AE-->\r\n    <section class=\"ti3-date-picker-icons-prev\">\r\n      <!-- \u6309\u5E74\u540E\u9000 -->\r\n      <section class=\"ti3-icon ti3-icon-left-2\"\r\n        [ngClass]=\"{'ti3-date-state-disabled' : isPickerYearMinValue()}\" [id]=\"appendId('pre-year')\"\r\n        (click)=\"onPreYearClick($event)\">\r\n      </section>\r\n      <!-- \u6309\u6708\u540E\u9000-->\r\n      <section *ngIf=\"picker === 'day'\" class=\"ti3-icon ti3-icon-left-1\"\r\n        [ngClass]=\"{'ti3-date-state-disabled' : isMinMonth}\" [id]=\"appendId('pre-month')\"\r\n        (click)=\"onPreMonthClick($event)\">\r\n      </section>\r\n    </section>\r\n    <!-- 1.2\u53F3\u6309\u94AE -->\r\n    <section class=\"ti3-date-picker-icons-next\">\r\n      <!-- \u6309\u6708\u524D\u8FDB-->\r\n      <section #next *ngIf=\"picker === 'day'\" class=\"ti3-icon ti3-icon-right-1\"\r\n        [ngClass]=\"{'ti3-date-state-disabled' : isMaxMonth}\" [id]=\"appendId('next-month')\"\r\n        (click)=\"onNextMonthClick($event)\">\r\n      </section>\r\n      <!-- \u6309\u5E74\u524D\u8FDB -->\r\n      <section #nextYear class=\" ti3-icon ti3-icon-right-2\"\r\n        [ngClass]=\"{'ti3-date-state-disabled' :isPickerYearMaxValue()}\" [id]=\"appendId('next-year')\"\r\n        (click)=\"onNextYearClick($event)\">\r\n      </section>\r\n    </section>\r\n    <!-- 1.3\u5E74\u6708\u65E5/\u5E74\u6708\u6587\u672C\u663E\u793A\u533A\u57DF-->\r\n    <section class=\"ti3-header-year-month-picker\">\r\n        <section class=\"ti3-date-picker-year-month\" [ngClass]=\"{'ti3-date-picker-year-month-text': !isRange || picker !== 'day' && picker !== 'onlyYear'&& picker !== 'onlyYearMonth'}\"\r\n             [id]=\"appendId('head')\">\r\n            <div [ngClass]=\"{'ti3-date-picker-text' : isRange && (picker === 'day' || picker === 'onlyYear' || picker === 'onlyYearMonth')}\">\r\n                <span *ngIf=\"picker === 'day' && !isChinese\" (click)=\"onHeadTextClick('month')\" [id]=\"appendId('head_left_month')\">{{pickerValue.month}} </span>\r\n                <span *ngIf=\"picker === 'day' || picker === 'month' || picker === 'onlyYearMonth'\" (click)=\"onHeadTextClick('year')\" [id]=\"appendId('head_left_year')\">{{pickerValue.year}} </span>\r\n                <span *ngIf=\"picker === 'day' && isChinese\" (click)=\"onHeadTextClick('month')\" [id]=\"appendId('head_left_month')\">{{pickerValue.month}}</span>\r\n                <span *ngIf=\"picker === 'onlyYear' || picker === 'year'\">{{pickerValue.yearRange}}</span>\r\n            </div>\r\n            <div *ngIf=\"(picker === 'day' || picker === 'onlyYear' || picker === 'onlyYearMonth') && isRange\" class='ti3-date-picker-endpanel-text'>\r\n                <span *ngIf=\"picker === 'day' && !isChinese\" (click)=\"onHeadTextClick('month')\" [id]=\"appendId('head_right_month')\">{{nextPickerValue.month}} </span>\r\n                <span *ngIf=\"picker === 'day'\" (click)=\"onHeadTextClick('year')\" [id]=\"appendId('head_right_year')\">{{nextPickerValue.year}} </span>\r\n                <span *ngIf=\"picker === 'onlyYearMonth'\" (click)=\"onHeadTextClick('year')\" [id]=\"appendId('head_right_year')\">{{nextPickerValue.onlyYear}} </span>\r\n                <span *ngIf=\"picker === 'day' && isChinese\" (click)=\"onHeadTextClick('month')\" [id]=\"appendId('head_right_month')\">{{nextPickerValue.month}}</span>\r\n                <span *ngIf=\"picker === 'onlyYear'\">{{pickerValue.endpanelYearRange}}</span>\r\n            </div>\r\n        </section>\r\n    </section>\r\n</section>\r\n\r\n<!-- 2.\u65E5\u671F\u9762\u677F-->\r\n<section *ngIf=\"picker === 'day' && !selectTime\" class=\"ti3-date-picker-container\">\r\n        <section style='float:left'>\r\n            <!-- 2.1\u661F\u671F\uFF1A\u5468\u4E00\u5230\u5468\u4E94-->\r\n            <thead>\r\n                <tr>\r\n                    <th *ngFor=\"let week of local.weekArr; index as i\" class=\"ti3-date-week\" title=\"{{local.weekTitleArr[i]}}\">{{week}}</th>\r\n                </tr>\r\n            </thead>\r\n        <!-- 2.2\u65E5\u671F\uFF1A-->\r\n            <tbody>\r\n                <tr *ngFor=\"let week of dayArr; index as i; trackBy: trackByFn\" class=\"ti3-date-day-tr\">\r\n                    <th *ngFor=\"let day of week; index as j; trackBy: trackByFn\"\r\n                        [ngClass]=\"{'ti3-date-today-current-td': day.isToday && day.state === 'current'}\"\r\n                        (click)=\"onDayClick(false, day, $event)\">\r\n                        <section [ngClass]=\"{\r\n                            'ti3-date-current-day' : day.state === 'current',\r\n                            'ti3-dateRange-select-day' : day.state === 'select',\r\n                            'ti3-date-today' : day.isToday && day.state !== 'disable',\r\n                            'ti3-date-default-day' : day.state === 'default',\r\n                            'ti3-date-disable-day' : day.state === 'disable',\r\n                            'ti3-date-beside-day' : day.state === 'preMonth' || day.state === 'nextMonth'}\"\r\n                            [id]=\"appendId('day_left_' + i + '_' + j)\">{{day.value}}</section>\r\n                    </th>\r\n                </tr>\r\n            </tbody>\r\n        </section>\r\n        <section style='margin-left: 20px;float: right;' *ngIf='isRange'>\r\n            <thead>\r\n                <tr>\r\n                    <th *ngFor=\"let week of local.weekArr; index as i\" class=\"ti3-date-week\" title=\"{{local.weekTitleArr[i]}}\">{{week}}</th>\r\n                </tr>\r\n            </thead>\r\n            <!-- 2.2\u65E5\u671F\uFF1A-->\r\n            <tbody>\r\n                <tr *ngFor=\"let week of nextdayArr; index as i; trackBy: trackByFn\" class=\"ti3-date-day-tr\">\r\n                    <th *ngFor=\"let day of week; index as j; trackBy: trackByFn\"\r\n                        [ngClass]=\"{'ti3-date-today-current-td': day.isToday && day.state === 'current'}\"\r\n                        (click)=\"onDayClick(true, day, $event)\">\r\n                        <section [ngClass]=\"{\r\n                            'ti3-date-current-day' : day.state === 'current',\r\n                            'ti3-dateRange-select-day' : day.state === 'select',\r\n                            'ti3-date-today' : day.isToday && day.state !== 'disable',\r\n                            'ti3-date-default-day' : day.state === 'default',\r\n                            'ti3-date-disable-day' : day.state === 'disable',\r\n                            'ti3-date-beside-day' : day.state === 'preMonth' || day.state === 'nextMonth'}\"\r\n                            [id]=\"appendId('day_right_' + i + '_' + j)\">{{day.value}}</section>\r\n                    </th>\r\n                </tr>\r\n            </tbody>\r\n        </section>\r\n</section>\r\n\r\n<!-- 3.\u6708\u4EFD\u9762\u677F-->\r\n<section *ngIf=\"picker === 'month' && !selectTime\" class=\"ti3-date-picker-container ti3-date-picker-year\">\r\n    <section *ngFor=\"let monthList of monthArr; index as i\" class='ti3-date-year-month-picker-container'>\r\n        <section *ngFor=\"let month of monthList; index as j\" style='display: inline-block;'\r\n            (click)=\"onMonthClick(month, $event)\">\r\n            <section class=\"ti3-date-month\"\r\n                     [ngClass]=\"{'ti3-date-disable-month': month.state === 'disable',\r\n                                 'ti3-date-default-month' : month.state === 'default',\r\n                                 'ti3-date-current-month' : month.state === 'current',\r\n                                 'ti-date-nowMonth' : month.isMonth && month.state !== 'disable'}\"\r\n                                 [id]=\"appendId('month_' + i + '_' + j)\">{{month.value}}</section>\r\n        </section>\r\n    </section>\r\n</section>\r\n\r\n<!-- \u5E74\u6708\u683C\u5F0F\u5C55\u793A\u9762\u677F -->\r\n<section *ngIf=\"picker === 'onlyYearMonth' && !selectTime\" class=\"ti3-date-picker-year-month-container\">\r\n    <section  class=\"ti3-date-picker-container ti3-date-picker-year\">\r\n        <section *ngFor=\"let monthList of monthArr; index as i;\" class='ti3-date-year-month-picker-container'>\r\n            <section *ngFor=\"let month of monthList; index as j;\" style='display: inline-block;'\r\n                (click)=\"onMonthClick(month, $event, false)\">\r\n                <section class=\"ti3-date-month\"\r\n                         [ngClass]=\"{'ti3-date-disable-month': month.state === 'disable',\r\n                                     'ti3-date-default-month' : month.state === 'default',\r\n                                     'ti3-date-current-month' : month.state === 'current',\r\n                                     'ti-date-nowMonth' : month.isMonth && month.state !== 'disable'}\"\r\n                                     [id]=\"appendId('month_left_' + i + '_' + j)\">{{month.value}}</section>\r\n            </section>\r\n        </section>\r\n    </section>\r\n    <section *ngIf=\"isRange\" class=\"ti3-date-picker-container ti3-date-picker-year ti3-date-picker-right-zone\">\r\n        <section *ngFor=\"let monthList of endpanelMonthArr; index as i;\" class='ti3-date-year-month-picker-container'>\r\n            <section *ngFor=\"let month of monthList; index as j;\" style='display: inline-block;'\r\n                (click)=\"onMonthClick(month, $event, true)\">\r\n                <section class=\"ti3-date-month\"\r\n                         [ngClass]=\"{'ti3-date-disable-month': month.state === 'disable',\r\n                                     'ti3-date-default-month' : month.state === 'default',\r\n                                     'ti3-date-current-month' : month.state === 'current',\r\n                                     'ti-date-nowMonth' : month.isMonth && month.state !== 'disable'}\"\r\n                                     [id]=\"appendId('month_right_' + i + '_' + j)\">{{month.value}}</section>\r\n            </section>\r\n        </section>\r\n    </section>\r\n</section>\r\n\r\n<!-- 4.\u5E74\u9762\u677F -->\r\n<section *ngIf=\"picker === 'year' && !selectTime\" class=\"ti3-date-picker-container ti3-date-picker-month\">\r\n    <section *ngFor=\"let yearList of yearArr; index as i;\" class='ti3-date-year-month-picker-container'>\r\n        <section *ngFor=\"let year of yearList; index as j;\" style='display: inline-block;'\r\n            (click)=\"onYearClick(year, $event)\">\r\n            <section class=\"ti3-date-year\"\r\n                     [ngClass]=\"{'ti3-date-disable-year': year.state === 'disable',\r\n                                 'ti3-date-default-year' : year.state === 'default',\r\n                                 'ti3-date-preNext-year' : year.state === 'preYear' || year.state === 'nextYear',\r\n                                 'ti3-date-current-year' : year.state === 'current',\r\n                                 'ti-date-nowYear': year.isYear && year.state !== 'disable'}\"\r\n                                 [id]=\"appendId('year_' + i + '_' + j)\">{{year.value}}</section>\r\n        </section>\r\n    </section>\r\n</section>\r\n<!-- \u7EAF\u5E74\u4EFD\u5C55\u793A\u9762\u677F -->\r\n<section *ngIf=\"picker === 'onlyYear' && !selectTime\" class=\"ti3-date-picker-only-year-container\">\r\n    <section class=\"ti3-date-picker-container ti3-date-picker-month\">\r\n        <section *ngFor=\"let yearList of yearArr; index as i;\" class='ti3-date-year-month-picker-container'>\r\n            <section *ngFor=\"let year of yearList; index as j;\" style='display: inline-block;'\r\n                (click)=\"onYearClick(year, $event)\">\r\n                <section class=\"ti3-date-year\"\r\n                         [ngClass]=\"{'ti3-date-disable-year': year.state === 'disable',\r\n                                     'ti3-date-default-year' : year.state === 'default',\r\n                                     'ti3-date-preNext-year' : year.state === 'preYear' || year.state === 'nextYear',\r\n                                     'ti3-date-current-year' : year.state === 'current',\r\n                                     'ti-date-nowYear': year.isYear && year.state !== 'disable'}\"\r\n                                     [id]=\"appendId('year_left_' + i + '_' + j)\">{{year.value}}</section>\r\n            </section>\r\n        </section>\r\n    </section>\r\n    <section *ngIf=\"isRange\" class=\"ti3-date-picker-container ti3-date-picker-month ti3-date-picker-right-zone\">\r\n        <section *ngFor=\"let yearList of endpanelYearArr; index as i;\" class='ti3-date-year-month-picker-container'>\r\n            <section *ngFor=\"let year of yearList; index as j;\" style='display: inline-block;'\r\n                (click)=\"onYearClick(year, $event)\">\r\n                <section class=\"ti3-date-year\"\r\n                         [ngClass]=\"{'ti3-date-disable-year': year.state === 'disable',\r\n                                     'ti3-date-default-year' : year.state === 'default',\r\n                                     'ti3-date-preNext-year' : year.state === 'preYear' || year.state === 'nextYear',\r\n                                     'ti3-date-current-year' : year.state === 'current',\r\n                                     'ti-date-nowYear': year.isYear && year.state !== 'disable'}\"\r\n                                     [id]=\"appendId('year_right_' + i + '_' + j)\">{{year.value}}</section>\r\n            </section>\r\n        </section>\r\n    </section>\r\n</section>\r\n<!-- 5.\u65F6\u95F4\u9009\u62E9\u9762\u677F -->\r\n<div [hidden]='!selectTime' [ngClass]=\"{'ti3-time-select-panel': selectTime}\">\r\n    <div class='ti3-time-select-container' [ngClass]=\"{'ti3-time-select-container-border': selectTime}\">\r\n        <div class='ti3-time-hourselect-container'>\r\n            <span class='ti3-time-select-title'>{{ 'tiDate.hour' | tiTranslate }}</span>\r\n            <ti-list #beginHourContainer\r\n               [options]='hourOptions'\r\n                [(ngModel)]=\"beginHour\"\r\n                (select)=\"onSelect($event, 'beginHour')\"\r\n                (mouseleave)=\"onMouseleave(beginHourContainer)\"\r\n                [id]=\"appendId('list_beginhour')\"></ti-list>\r\n        </div>\r\n        <div class='ti3-time-minuteselect-container'>\r\n            <span class='ti3-time-select-title'>{{ 'tiDate.minute' | tiTranslate }}</span>\r\n           <ti-list #beginMinuteContainer [options]='minuteOptions'\r\n           [(ngModel)]=\"beginMinute\"\r\n           (select)=\"onSelect($event, 'beginMinute')\"\r\n           (mouseleave)=\"onMouseleave(beginMinuteContainer)\"\r\n           [id]=\"appendId('list_beginminute')\"></ti-list>\r\n        </div>\r\n        <div class='ti3-time-secondselect-container'>\r\n            <span class='ti3-time-select-title'>{{ 'tiDate.second' | tiTranslate }}</span>\r\n            <ti-list #beginSecondContainer [options]='secondOptions'\r\n            [(ngModel)]=\"beginSecond\"\r\n            (select)=\"onSelect($event, 'beginSecond')\"\r\n            (mouseleave)=\"onMouseleave(beginSecondContainer)\"\r\n            [id]=\"appendId('list_beginsecond')\"></ti-list>\r\n        </div>\r\n    </div>\r\n    <div [hidden]='!isRange' class='ti3-time-select-container ti3-endtime-select-container' [ngClass]=\"{'ti3-endtime-select-none': !isRange, 'ti3-time-select-container-border': selectTime}\">\r\n        <div class='ti3-time-hourselect-container'>\r\n            <span class='ti3-time-select-title'>{{ 'tiDate.hour' | tiTranslate }}</span>\r\n            <ti-list #endHourContainer [options]='endHourOptions'\r\n                [(ngModel)]=\"endHour\"\r\n                (select)=\"onSelect($event, 'endHour')\"\r\n                (mouseleave)=\"onMouseleave(endHourContainer)\"\r\n                [id]=\"appendId('list_endhour')\"></ti-list>\r\n        </div>\r\n        <div class='ti3-time-minuteselect-container'>\r\n            <span class='ti3-time-select-title'>{{ 'tiDate.minute' | tiTranslate }}</span>\r\n           <ti-list #endMinuteContainer [options]='endMinuteOptions'\r\n           [(ngModel)]=\"endMinute\"\r\n           (select)=\"onSelect($event, 'endMinute')\"\r\n           (mouseleave)=\"onMouseleave(endMinuteContainer)\"\r\n           [id]=\"appendId('list_endminute')\"></ti-list>\r\n        </div>\r\n        <div  class='ti3-time-secondselect-container'>\r\n            <span class='ti3-time-select-title'>{{ 'tiDate.second' | tiTranslate }}</span>\r\n            <ti-list #endSecondContainer [options]='endSecondOptions'\r\n            [(ngModel)]=\"endSecond\"\r\n            (select)=\"onSelect($event, 'endSecond')\"\r\n            (mouseleave)=\"onMouseleave(endSecondContainer)\"\r\n            [id]=\"appendId('list_endsecond')\"></ti-list>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!--IE\u6D4F\u89C8\u5668\u517C\u5BB9\u6027\u95EE\u9898\uFF1A\u5728IE\u4E0B\uFF0C\u6240\u6709div\uFF0C\u90E8\u5206span\uFF08\u8BBE\u7F6E\u4E3Ainline-block\u3001block\u7684span\uFF09\uFF0Ctable\uFF0Ctd\u662F\u4EA4\u4E92\u5143\u7D20\uFF0C\u53EF\u4EE5\u843D\u7126\u70B9\u3002\r\n\u800C\u5176\u4ED6\u6D4F\u89C8\u5668\uFF0Cdiv\u548Cspan\u9ED8\u8BA4\u662F\u4E0D\u53EF\u4EA4\u4E92\u5143\u7D20\uFF0C\u4E0D\u80FD\u843D\u7126\u70B9\u3002\r\n\u89E3\u51B3\u65B9\u6848\uFF1Asection\u6807\u7B7E\uFF0C\u53EF\u4EE5\u7B49\u540C\u4E8Ediv\u4F7F\u7528\uFF0CIE\u548C\u5176\u4ED6\u6D4F\u89C8\u5668\u884C\u4E3A\u4E00\u81F4\u3002\r\n-->\r\n",
                styles: ["::ng-deep :root{--date-day-line-width:12px;--date-day-picker-line-bottom:calc((var(--ti-datetime-day-height) - 16px)/2 - 2px);--date-month-line-width:24px;--date-picker-line-bottom:calc((var(--ti-date-picker-month-height) - 16px)/2 - 4px);--date-year-line-width:30px;--ti-date-picker-header-height:18px;--ti-date-picker-header-margin:12px;--ti-date-picker-icon-width:16px;--ti-date-picker-month-height:32px;--ti-date-picker-month-width:63px;--ti-date-picker-week-height:18px;--ti-date-picker-year-month-width:166px}.ti3-date-picker-header{-ms-box-sizing:content-box;box-sizing:content-box;font-weight:400;margin:var(--ti-date-picker-header-margin) 0;position:relative}.ti3-date-picker-header,.ti3-date-picker-icons-next,.ti3-date-picker-icons-prev{height:var(--ti-date-picker-header-height);line-height:var(--ti-date-picker-header-height)}.ti3-date-picker-icons-next,.ti3-date-picker-icons-prev{-ms-box-sizing:border-box;box-sizing:border-box;color:var(--ti-datetime-icon-color-normal);cursor:pointer;display:block;font-size:var(--ti-common-font-size-base);padding:0;position:absolute;text-align:right;top:0;width:calc(var(--ti-date-picker-icon-width)*2 + var(--ti-common-space-10))}.ti3-date-picker-icons-next .ti3-icon,.ti3-date-picker-icons-prev .ti3-icon{display:inline-block;text-align:center;width:var(--ti-date-picker-icon-width)}.ti3-date-picker-icons-next .ti3-icon:active,.ti3-date-picker-icons-next .ti3-icon:hover,.ti3-date-picker-icons-prev .ti3-icon:active,.ti3-date-picker-icons-prev .ti3-icon:hover{color:var(--ti-datetime-icon-color-hover)}.ti3-date-picker-icons-prev{left:0;padding-left:10px;text-align:left}.ti3-date-picker-icons-next{padding-right:10px;right:0;text-align:right}.ti3-date-state-disabled{color:var(--ti-datetime-icon-color-disabled)!important;cursor:not-allowed!important}.ti3-header-year-month-picker{margin:0 calc((var(--ti-datetime-day-width)*7 - var(--ti-date-picker-year-month-width) + 2px)/2)}.ti3-date-picker-year-month{-ms-user-select:none;-webkit-user-select:none;background-color:var(--ti-input-bg-color);color:var(--ti-datetime-content-color-normal);cursor:pointer;font-weight:700;user-select:none}.ti3-date-picker-year-month span:hover{color:var(--ti-datetime-picker-color-hover)}.ti3-date-picker-year-month-text{text-align:center}.ti3-date-picker-container{background-color:var(--ti-input-bg-color);font-size:var(--ti-datetime-input-font-size);*zoom:1}.ti3-date-picker-container:after{clear:both;content:\"\";display:table}.ti3-date-picker-container:before{content:\"\";display:table}.ti3-date-picker-container th{font-weight:400}.ti3-date-picker-container.ti3-date-picker-month,.ti3-date-picker-container.ti3-date-picker-year{margin-top:42px}.ti3-date-week{-ms-user-select:none;-webkit-user-select:none;background-color:var(--ti-datetime-week-bg-color);border:0;color:var(--ti-datetime-beside-day-color);font-weight:400;height:var(--ti-date-picker-week-height);text-align:center;user-select:none}.ti3-date-day-tr{height:var(--ti-datetime-day-height)}.ti3-date-today-current-td{position:relative}.ti3-date-current-day{background-color:var(--ti-datetime-content-color-active);color:var(--ti-datetime-current-day-color)}.ti3-date-current-day,.ti3-dateRange-select-day{-ms-box-sizing:border-box;-ms-user-select:none;-webkit-user-select:none;box-sizing:border-box;cursor:pointer;display:block;height:var(--ti-datetime-day-height);line-height:var(--ti-datetime-day-height);margin-top:var(--ti-datetime-day-margin-top);min-width:var(--ti-datetime-day-width);padding:0;text-align:center;text-decoration:none;user-select:none}.ti3-dateRange-select-day{background-color:var(--ti-datetime-range-selected-day-bg-color);color:var(--ti-input-text-color)}.ti3-dateRange-select-day:hover{background-color:var(--ti-datetime-range-selected-day-bg-color-hover)}.ti3-date-default-day{-ms-box-sizing:border-box;-ms-user-select:none;-webkit-user-select:none;background-color:var(--ti-input-bg-color);box-sizing:border-box;color:var(--ti-datetime-default-day-color);cursor:pointer;display:block;font-size:var(--ti-datetime-input-font-size);height:var(--ti-datetime-day-height);line-height:var(--ti-datetime-day-height);margin-top:var(--ti-datetime-day-margin-top);min-width:var(--ti-datetime-day-width);padding:0;text-align:center;text-decoration:none;user-select:none}.ti3-date-default-day:hover{background-color:var(--ti-common-color-bg-white-emphasize);color:var(--ti-datetime-content-text-color-hover)}.ti3-date-today{position:relative}.ti3-date-today.ti3-date-current-day{background-color:var(--ti-datetime-content-color-active);border:0}.ti3-date-today:after{background:var(--ti-common-color-line-active);bottom:var(--date-day-picker-line-bottom);content:\"\";height:1px;left:calc((var(--ti-datetime-day-width) - var(--date-day-line-width))/2);position:absolute;width:var(--date-day-line-width)}.ti3-date-disable-day{background-color:var(--ti-datetime-disable-day-bg-color);background-image:none;color:var(--ti-common-color-line-normal);cursor:not-allowed}.ti3-date-beside-day,.ti3-date-disable-day{-ms-box-sizing:border-box;-ms-user-select:none;-webkit-user-select:none;box-sizing:border-box;display:block;font-size:var(--ti-datetime-input-font-size);height:var(--ti-datetime-day-height);line-height:var(--ti-datetime-day-height);margin-top:var(--ti-datetime-day-margin-top);min-width:var(--ti-datetime-day-width);padding:0;text-align:center;text-decoration:none;user-select:none}.ti3-date-beside-day{color:var(--ti-datetime-beside-day-color);cursor:pointer}.ti3-date-beside-day:hover{background-color:var(--ti-datetime-beside-day-bg-color-hover)}.ti3-date-month,.ti3-date-year{-ms-box-sizing:border-box;-ms-user-select:none;-webkit-user-select:none;box-sizing:border-box;cursor:pointer;display:block;height:var(--ti-date-picker-month-height);line-height:var(--ti-date-picker-month-height);text-align:center;text-decoration:none;user-select:none;width:var(--ti-date-picker-month-width)}.ti3-date-default-month,.ti3-date-default-year{background-color:var(--ti-input-bg-color);color:var(--ti-pagination-text-color)}.ti3-date-default-month:hover,.ti3-date-default-year:hover{background-color:var(--ti-common-color-bg-white-emphasize)}.ti3-date-current-month,.ti3-date-current-year{background-color:var(--ti-datetime-content-color-active);color:var(--ti-datetime-current-day-color)}.ti3-date-disable-month,.ti3-date-disable-year{background-color:var(--ti-input-bg-color);color:var(--ti-common-color-line-normal);cursor:not-allowed}.ti3-date-preNext-year{background-color:var(--ti-input-bg-color);color:var(--ti-input-text-color-disabled)}::ng-deep .ti3-time-select-container{border:1px solid var(--ti-common-color-line-dividing);border-bottom:none;display:flex;height:265px;margin-top:10px;width:250px}::ng-deep .ti3-time-select-container ul{height:231px;overflow-y:auto;text-align:center;width:82px}::ng-deep .ti3-time-select-container ul li{margin-top:0!important;text-align:center!important}.ti3-time-select-title{color:var(--ti-common-color-text-darkbg);display:inline-block;font-size:var(--ti-common-font-size-base);height:30px;line-height:30px;margin-left:-6px;text-align:center;width:100%}.ti3-endtime-select-container,.ti3-time-select-panel{display:flex}.ti3-endtime-select-container{margin-left:var(--ti-common-space-5x)}.ti3-endtime-select-none{display:none}.ti3-date-picker-text{display:inline;padding-left:58px}.ti3-date-picker-endpanel-text{display:inline;padding-left:204px}.ti3-time-hourselect-container,.ti3-time-minuteselect-container{border-right:1px solid var(--ti-common-color-line-dividing)}.ti3-date-year-month-picker-container{display:flex;justify-content:space-around;margin-bottom:32px}.ti3-time-select-container-border{border-bottom:1px solid var(--ti-common-color-line-dividing)}.ti-date-nowMonth{position:relative}.ti-date-nowMonth:after{background:var(--ti-common-color-line-active);bottom:var(--date-picker-line-bottom);content:\"\";height:1px;left:calc((var(--ti-date-picker-month-width) - var(--date-month-line-width))/2);position:absolute;width:var(--date-month-line-width)}.ti-date-nowYear{position:relative}.ti-date-nowYear:after{background:var(--ti-common-color-line-active);bottom:var(--date-picker-line-bottom);content:\"\";height:1px;left:calc((var(--ti-date-picker-month-width) - var(--date-year-line-width))/2);position:absolute;width:var(--date-year-line-width)}.ti3-date-picker-only-year-container,.ti3-date-picker-year-month-container{display:flex}.ti3-date-picker-right-zone{padding-left:var(--ti-common-space-5x)}"]
            },] }
];
TiDatePanelComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: TiDropComponent }
];
TiDatePanelComponent.propDecorators = {
    value: [{ type: Input }],
    valueChange: [{ type: Output }],
    picker: [{ type: Input }],
    pickerChange: [{ type: Output }],
    nowDateTime: [{ type: Input }],
    max: [{ type: Input }],
    min: [{ type: Input }],
    format: [{ type: Input }],
    disabledDays: [{ type: Input }],
    endTimeDisabled: [{ type: Input }],
    beginTimeDisabled: [{ type: Input }],
    focusedPosition: [{ type: Input }],
    selectTime: [{ type: Input }],
    beginTime: [{ type: Input }],
    endTime: [{ type: Input }],
    isRange: [{ type: Input }],
    isBeginFixed: [{ type: Input }],
    isEndFixed: [{ type: Input }],
    select: [{ type: Output }],
    selectTimeFn: [{ type: Output }],
    nextRef: [{ type: ViewChild, args: ['next', { static: true },] }],
    beginHourContainerRef: [{ type: ViewChild, args: ['beginHourContainer', { static: true },] }],
    beginMinuteContainerRef: [{ type: ViewChild, args: ['beginMinuteContainer', { static: true },] }],
    beginSecondContainerRef: [{ type: ViewChild, args: ['beginSecondContainer', { static: true },] }],
    endHourContainerRef: [{ type: ViewChild, args: ['endHourContainer', { static: true },] }],
    endMinuteContainerRef: [{ type: ViewChild, args: ['endMinuteContainer', { static: true },] }],
    endSecondContainerRef: [{ type: ViewChild, args: ['endSecondContainer', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,