import { ChangeDetectorRef, Component, ElementRef, Input, Renderer2 } from '@angular/core';
import { Util } from '../../utils/Util';
import { TiBaseComponent } from '../base/TiBaseModule';
/**
 * 本组件实现对多个表单元素的布局，支持单列和多列布局。
 * 其中包含了tiFormfield、tiItem、tiItemLabel和tiButtonItem几个组件。
 *
 * <example-url>../tiny3demo/#/formfield/formfield-all</example-url>
 */
export class TiFormfieldComponent extends TiBaseComponent {
    constructor(hostRef, renderer, changeDetector) {
        super(hostRef, renderer);
        this.hostRef = hostRef;
        this.renderer = renderer;
        this.changeDetector = changeDetector;
        /**
         * 设置表单类型，不设置时默认为带输入控件类表单;当为 text 时，为纯文本描述类表单
         *
         * 带输入控件类表单：各个表单条目的内容区主要为输入框、下拉框、按钮组等输入组件；
         *
         * 纯文本描述类表单：各个表单条目的内容区为纯文本。
         */
        this.type = 'default';
        /**
         * 设置表单布局的列数
         */
        this.colsNumber = 1;
        /**
         * 设置列与列之间的间隔，只有多列（colsNumber >= 2）时该属性配置才生效。
         */
        this.colsGap = [];
        /**
         * 统一设置表单条目的垂直对齐方式（上下布局表单不支持该属性）。
         */
        this.verticalAlign = 'top';
        /**
         * 设置各列宽度（IE不支持，行合并列合并暂不支持）
         *
         * 设置该接口后，colsGap第一个值表示各列间距
         *
         * 10.1.1 新增
         */
        this.colsWidth = [];
        /**
         * @ignore
         * 纯文本描述类表单的type的值
         */
        this.textType = 'text';
        /**
         * @ignore
         * ti-formfield中包含的所有ti-item的集合
         */
        this.items = [];
        /**
         * @ignore
         * ti-formfield中包含的所有ti-btn-item的集合
         */
        this.btnItems = [];
        /**
         * @ignore
         * 根据colsNum对 items 分组后的数据
         */
        this.groupedItems = [];
        /**
         * @ignore
         * 表单的列数
         */
        this.colsNum = 1;
        /**
         * @ignore
         * 当前formfield下ti-item的总个数
         */
        this.itemTotal = 0;
        /**
         * @ignore
         * 表单是否为上下布局
         */
        this.isVertical = false;
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngOnInit() {
        super.ngOnInit();
        this.isVertical = this.nativeElement.hasAttribute('vertical');
        this.setColsNumber();
        // 统一设置表单内容的垂直对齐方式;
        // tbody、tr、td的verticalAlign继承于此(table),所以此处可以
        // 统一设置表单内容的垂直对齐方式
        this.setFieldStyle();
    }
    setColsNumber() {
        if (this.colsNumber) {
            // tslint:disable-next-line:prefer-template
            const colsNumber = parseInt(String(this.colsNumber), 10);
            if (!Number.isNaN(colsNumber) && colsNumber >= 1) {
                this.colsNum = colsNumber;
            }
        }
    }
    setFieldStyle() {
        if (!Util.isEmptyString(this.verticalAlign)) {
            this.containterObj = { 'vertical-align': this.verticalAlign };
        }
        // 设置width接口时，配置grid，IE下不支持grid布局，存在兼容性问题
        const isSupportGrid = (typeof window !== 'undefined') && window.CSS && window.CSS.supports && window.CSS.supports('(display: grid)');
        this.useGrid = this.colsWidth && this.colsWidth.length > 0 && isSupportGrid;
        if (this.useGrid) {
            this.labelWidth = this.labelWidth ? this.labelWidth : '80px'; // 给定宽度，确保content对齐；
            for (let i = 0; i < this.colsWidth.length; i++) {
                // 各列设置百分比且设置列间距时，需要重新计算各列宽度，设置宽度-各列间距总和
                const calcWidth = `calc( ${this.colsWidth[i]} - ${parseFloat(this.colsGap[0]) * (this.colsWidth.length - 1) / this.colsWidth.length}px)`;
                this.colsWidth[i] = /%$/.test(this.colsWidth[i]) && this.colsGap[0] ? calcWidth : this.colsWidth[i];
            }
            this.containterObj['grid-template-columns'] = `${this.colsWidth.join(' ')}`;
            this.containterObj['grid-column-gap'] = this.colsGap[0]; // 列间距 grid-column-gap属性只支持一个值，取首项作为列间距
            this.buttonStyle = this.isVertical ? {} : { 'margin-left': `calc(${this.labelWidth} + 20px)` }; // 20px padding
        }
    }
    /**
     * @ignore
     * 需要在TiItemComponent.ts中调用
     */
    addCntItem(item) {
        this.items.push(item);
        this.items.sort((a, b) => {
            return a.itemIndex - b.itemIndex;
        });
        this.groupedItems = this.chunkArray(this.items, this.colsNum);
        // 强制变检一次，消除报错(Expression has changed after it was checked)
        this.changeDetector.detectChanges();
    }
    /**
     * @ignore
     * 需要在 TiItemComponent.ts 中调用
     */
    removeCntItem(item) {
        const itemIndex = this.items.indexOf(item);
        if (itemIndex !== -1) {
            this.items.splice(itemIndex, 1);
            this.groupedItems = this.chunkArray(this.items, this.colsNum);
            // 强制变检一次，消除报错(Expression has changed after it was checked)
            // ti-item和ti-formfiled组件都销毁时，视图也已销毁，不需要再强制变检;
            // 因此，强制变检需要在一定的条件下执行，消除服务报错（Attempt to use a destroyed view: detectChanges）
            if (!this.changeDetector['destroyed']) {
                this.changeDetector.detectChanges();
            }
        }
    }
    /**
     * @ignore
     * 需要在 TiButtonItemComponent.ts 中调用
     */
    addBtnItem(item) {
        this.btnItems.push(item);
    }
    /**
     * @ignore
     * 需要在 TiButtonItemComponent.ts 中调用
     */
    removeBtnItem(item) {
        const itemIndex = this.btnItems.indexOf(item);
        if (itemIndex !== -1) {
            this.btnItems.splice(itemIndex, 1);
        }
    }
    // tslint:disable-next-line:prefer-function-over-method
    chunkArray(array, size) {
        const length = array ? array.length : 0;
        if (!length || size < 1) {
            return [];
        }
        const result = [];
        // 单列
        if (size === 1) {
            array.forEach((item) => {
                result.push([item]);
            });
            // 多列
        }
        else {
            const rowspanNums = new Array(size); // 记录每一列的行合并的信息
            let onegroup = [];
            let colIndex = 0;
            array.forEach((item, index) => {
                while (rowspanNums[colIndex] > 0) {
                    rowspanNums[colIndex] = rowspanNums[colIndex] - 1;
                    colIndex++;
                    if (colIndex === size) {
                        result.push(onegroup);
                        onegroup = [];
                        colIndex = 0;
                    }
                }
                onegroup.push(item);
                // 如果该单元是行合并，则影响后续行
                if (item.rowspan > 1) {
                    rowspanNums[colIndex] = item.rowspan - 1;
                }
                // 如果该单元是列合并，则影响当前行
                if (item.colspan > 1) {
                    colIndex += (item.colspan - 1);
                }
                // 设置列间距
                if (colIndex < size - 1) {
                    // 设置宽度时，为使IE下有良好的呈现，取首项作为各列间距
                    item.gapWidth = this.colsWidth && this.colsWidth.length > 0 && this.colsGap[0] ? this.colsGap[0] : (this.colsGap[colIndex] || TiFormfieldComponent.COLS_GAP);
                }
                colIndex++;
                if (colIndex === size || index === array.length - 1) {
                    result.push(onegroup);
                    onegroup = [];
                    colIndex = 0;
                }
            });
        }
        return result;
    }
    /**
     * @ignore
     * 需要在html模板中使用
     */
    trackByFn(index, item) {
        return item.itemIndex;
    }
    /**
     * @ignore
     * 每项图标是否占位，设置按钮及content样式
     */
    getRequire(item, index) {
        let hasRequire;
        for (let i = 0; i < this.groupedItems.length; i++) {
            const groupedItem = this.groupedItems[i];
            if (groupedItem[index % this.colsNum] && groupedItem[index % this.colsNum].required) {
                hasRequire = true;
            }
        }
        if (index === 0 && hasRequire) {
            this.buttonStyle = { 'margin-left': `calc(${this.labelWidth} + 36px)` }; // 20 padding + 16 图标
        }
        if (hasRequire) {
            item.contentStyle['width'] = item.hasLabel ? `calc(100% - ${this.labelWidth} - 36px)` : `calc(100% - 16px)`;
        }
        else {
            // TiItemComponent 初始化时，ti-item-label指令无法获取到label，导致宽度设置不正确，因此在此处设置宽度
            item.contentStyle['width'] = item.hasLabel ? `calc(100% - ${this.labelWidth} - 20px)` : '100%';
        }
        return hasRequire;
    }
}
/**
 * 默认两列的间距
 */
TiFormfieldComponent.COLS_GAP = '70px';
TiFormfieldComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-formfield',
                template: "<h3 *ngIf=\"title\" class=\"ti3-form-title\" [id]=\"appendId('title')\">{{title}}</h3>\r\n<ng-container *ngIf=\"!useGrid else gridLayout\">\r\n    <table style=\"max-width: 100%;\" class=\"ti3-form\" [ngStyle]=\"containterObj\">\r\n        <tbody [ngClass]=\"{'ti3-text-form': type === textType}\">\r\n            <tr *ngFor=\"let groupedItem of groupedItems;index as groupIndex;\"\r\n                [ngClass]=\"{ 'ti3-form-list' : groupedItems.length === (groupIndex + 1)}\">\r\n                <ng-container *ngFor=\"let item of groupedItem;index as i;trackBy: trackByFn\">\r\n                    <ng-container\r\n                        *ngTemplateOutlet=\"isVertical&&type!==textType ? topAlign : leftAlign; context: {$implicit: item}\">\r\n                    </ng-container>\r\n                </ng-container>\r\n            </tr>\r\n            <tr *ngFor=\"let item of btnItems;\">\r\n                <td *ngIf=\"!isVertical\"></td>\r\n                <td *ngIf=\"!isVertical\"></td>\r\n                <td [tiInclude]=\"item.btnContent\" [ngStyle]=\"item.verticalAlignObj\" class=\"ti3-form-button-item\"\r\n                    [attr.colspan]=\"item.btnColspan\"></td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n\r\n    <ng-template #leftAlign let-item>\r\n        <td [ngStyle]=\"item.verticalAlignObj\"\r\n            [ngClass]=\"{'ti3-form-require': item.required}\"\r\n            [attr.rowspan]=\"item.rowspan\">\r\n            <span [hidden]=\"!item.required\" class=\"ti3-icon ti3-icon-staricon\"></span>\r\n        </td>\r\n        <td [tiInclude]=\"item.itemLabel\"\r\n            class=\"ti3-form-label ti3-text-form-label\"\r\n            [attr.rowspan]=\"item.rowspan\"\r\n            *ngIf=\"item.hasLabel\"\r\n            [ngStyle]=\"item.labelStyle\"></td>\r\n        <td [tiInclude]=\"item.element\"\r\n            [attr.colspan]=\"(item.colspan - 1) * 4 + 1 + (item.hasLabel ? 0 : 1)\"\r\n            [attr.rowspan]=\"item.rowspan\"\r\n            [ngStyle]=\"item.contentStyle\"\r\n            class=\"ti3-form-content ti3-text-form-content\"></td>\r\n        <td [ngStyle]=\"{width: item.gapWidth}\"\r\n            [attr.rowspan]=\"item.rowspan\"></td>\r\n    </ng-template>\r\n\r\n    <ng-template #topAlign let-item>\r\n        <td [attr.rowspan]=\"item.rowspan\">\r\n            <div class=\"ti3-form-top-label\">\r\n                <span [hidden]=\"!item.required\" class=\"ti3-icon ti3-icon-staricon ti3-form-top-require\"></span>\r\n                <span [tiInclude]=\"item.itemLabel\"\r\n                      class=\"ti3-form-top-text\"\r\n                      [attr.rowspan]=\"item.rowspan\"\r\n                      *ngIf=\"item.hasLabel\"\r\n                      [ngStyle]=\"item.labelStyle\"></span>\r\n            </div>\r\n            <div [tiInclude]=\"item.element\"\r\n                 [attr.colspan]=\"(item.colspan - 1) * 4 + 1 + (item.hasLabel ? 0 : 1)\"\r\n                 [attr.rowspan]=\"item.rowspan\"\r\n                 [ngStyle]=\"item.contentStyle\"\r\n                 class=\"ti3-form-content\"></div>\r\n        </td>\r\n        <td [ngStyle]=\"{width: item.gapWidth}\"\r\n            [attr.rowspan]=\"item.rowspan\"></td>\r\n    </ng-template>\r\n</ng-container>\r\n\r\n<ng-template #gridLayout>\r\n    <div class=\"ti3-form\">\r\n        <div class=\"ti3-form-grid-container\" [ngStyle]=\"containterObj\">\r\n            <div *ngFor=\"let item of items;index as i;trackBy: trackByFn\"\r\n                 [ngClass]=\"{ 'ti3-text-form': type === textType }\"\r\n                 [ngStyle]=\"item.itemStyle\">\r\n                <ng-container\r\n                    *ngTemplateOutlet=\"isVertical&&type!==textType ? gridTopAlign : gridLeftAlign; context: {$implicit: item, index: i}\">\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n        <div *ngFor=\"let item of btnItems;\" class=\"ti3-form-button-item\" [ngStyle]=\"buttonStyle\">\r\n            <div [tiInclude]=\"item.btnContent\" [ngStyle]=\"item.verticalAlignObj\"></div>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #gridLeftAlign let-item let-i=index>\r\n        <div [ngStyle]=\"item.verticalAlignObj\"\r\n             [ngClass]=\"{'ti3-form-require': item.required}\"\r\n             class=\"ti3-form-grid-require\"\r\n             *ngIf=\"getRequire(item, i)\">\r\n            <ti-icon [hidden]=\"!item.required\" name=\"staricon\"></ti-icon>\r\n        </div>\r\n        <div [tiInclude]=\"item.itemLabel\"\r\n             class=\"ti3-form-label ti3-text-form-label\"\r\n             *ngIf=\"item.hasLabel\"\r\n             [ngStyle]=\"item.labelStyle\"\r\n             style=\"display: inline-block;\"></div>\r\n        <div [tiInclude]=\"item.element\"\r\n             [ngStyle]=\"item.contentStyle\"\r\n             class=\"ti3-form-content ti3-text-form-content\"\r\n             style=\"display: inline-block;\"></div>\r\n    </ng-template>\r\n\r\n    <ng-template #gridTopAlign let-item>\r\n        <div class=\"ti3-form-top-label\">\r\n            <span [hidden]=\"!item.required\" class=\"ti3-icon ti3-icon-staricon ti3-form-top-require\"></span>\r\n            <span [tiInclude]=\"item.itemLabel\"\r\n                  class=\"ti3-form-top-text\"\r\n                  *ngIf=\"item.hasLabel\"\r\n                  [ngStyle]=\"item.labelStyle\"></span>\r\n        </div>\r\n        <div [tiInclude]=\"item.element\"\r\n             [ngStyle]=\"item.contentStyle\"\r\n             class=\"ti3-form-content\"></div>\r\n    </ng-template>\r\n</ng-template>\r\n\r\n",
                styles: [".ti3-form-title{color:var(--ti-common-color-text-primary);font-size:20px;margin-bottom:30px}.ti3-form{text-align:left}.ti3-form>tbody,.ti3-form>tbody tr,.ti3-form div,.ti3-form div tr{vertical-align:inherit}.ti3-form>tbody tr>td,.ti3-form div tr>td{vertical-align:inherit;white-space:normal}.ti3-form>tbody tr>td.ti3-form-label,.ti3-form div tr>td.ti3-form-label{white-space:nowrap}.ti3-form .ti3-form-grid-container{display:-ms-grid;display:grid}.ti3-form .ti3-form-list .ti3-form-content,.ti3-form .ti3-form-list .ti3-form-label,.ti3-form .ti3-form-list .ti3-form-require{padding-bottom:0}.ti3-form .ti3-form-require{padding:0 var(--ti-formfield-item-required-padding-right) var(--ti-formfield-item-padding-bottom) 0}.ti3-form .ti3-form-require .ti3-icon{color:var(--ti-common-color-error);font-size:var(--ti-formfield-item-required-font-size);font-weight:400;line-height:var(--ti-formfield-item-required-label-line-height)}.ti3-form .ti3-form-grid-require{display:inline-block;width:16px}.ti3-form .ti3-form-label{color:var(--ti-common-color-text-secondary);font-size:var(--ti-default-font-size);line-height:var(--ti-formfield-item-required-label-line-height);padding:0 var(--ti-formfield-item-label-padding-right) var(--ti-formfield-item-padding-bottom) 0}.ti3-form .ti3-form-content{padding-bottom:var(--ti-formfield-item-padding-bottom);word-break:break-word}.ti3-form .ti3-form-content input[type=checkbox][ti-checkbox]+.ti3-checkbox,.ti3-form .ti3-form-content input[type=radio][ti-radio]+.ti3-radio{display:inline-block;line-height:var(--ti-formfield-item-content-line-height)}.ti3-form .ti3-form-grid-container+.ti3-form-button-item,.ti3-form td.ti3-form-button-item{padding-top:var(--ti-formfield-button-item-padding-top)}.ti3-form .ti3-text-form .ti3-text-form-content,.ti3-form .ti3-text-form .ti3-text-form-label{line-height:var(--ti-formfield-text-from-item-line-height);padding-bottom:0}.ti3-form .ti3-text-form .ti3-text-form-label{color:var(--ti-formfield-text-form-label-color)}.ti3-form .ti3-form-top-label{align-items:center;color:var(--ti-common-color-text-secondary);display:flex;font-size:var(--ti-default-font-size);padding-bottom:var(--ti-common-space-2x);white-space:nowrap}.ti3-form .ti3-form-top-require{color:var(--ti-common-color-error);font-size:var(--ti-formfield-item-required-font-size)}.ti3-form .ti3-form-top-text{line-height:var(--ti-common-line-height-number)}"]
            },] }
];
TiFormfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef }
];
TiFormfieldComponent.propDecorators = {
    type: [{ type: Input }],
    title: [{ type: Input }],
    labelWidth: [{ type: Input }],
    colsNumber: [{ type: Input }],
    colsGap: [{ type: Input }],
    verticalAlign: [{ type: Input }],
    textLineHeight: [{ type: Input }],
    colsWidth: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,