import { Component } from '@angular/core';
import { TiDateUtil, TiKeymap, Util } from '../../utils/Util';
import { TiLocaleFormat, TiLocale } from '../../locale/TiLocaleModule';
import { TiFormComponent } from '../base/TiBaseModule';
import { TiDateBaseComponent } from '../datebase/TiDateBaseModule';
/**
 * DatetimeRange日期时间范围组件
 *
 * Datetime组件提供了一种方便的显示和设置日期时间范围的方式。
 *
 * <example-url>../tiny3demo/#/datetimerange/datetimerange-all</example-url>
 */
export class TiDatetimeRangeComponent extends TiDateBaseComponent {
    constructor() {
        super(...arguments);
        /**
         * @ignore
         * 保存model值
         */
        this.oldModel = {
            begin: null,
            end: null,
        };
        /**
         * @ignore
         * 对应Time组件的接口属性
         */
        this.beginTime = {};
        /**
         * @ignore
         * 对应Time组件的接口属性
         */
        this.endTime = {};
        /**
         * @ignore
         * 标记date/datetime的类型
         */
        this.isDatetime = true;
        /**
         * @ignore
         * 用于标记是不是range
         */
        this.isRange = true;
        /**
         * @ignore
         */
        this.oldBegintimeValue = '';
        /**
         * @ignore
         */
        this.oldEndtimeValue = '';
        /**
         * @ignore
         * placeholder提示文本
         */
        this.placeholder = `${TiLocale.getLocaleWords().tiDate.rangeBeginLabel} ─ ${TiLocale.getLocaleWords().tiDate.rangeEndLabel}`;
    }
    ngOnInit() {
        super.ngOnInit();
        // 将日期与时间的format拼接为一个字符串
        this.dominatorFormat = `${this.format.date} ${this.format.time}`;
        this.oldFormat = this.format;
        // model有值时，需要记录初始时间值
        if (Util.isUndefined(this.model)) {
            return;
        }
        if (this.model !== null) {
            setTimeout(() => {
                this.oldBegintimeValue = TiDateUtil.getTimeStr(this.model.begin);
                this.oldEndtimeValue = TiDateUtil.getTimeStr(this.model.end);
            }, 0);
        }
    }
    ngOnChanges(changes) {
        // 验证最大值最小值，为了处理最大值和最小值从合法日期变为undefined 的情景
        if ((changes['max'] && !changes['max'].firstChange) || (changes['min'] && !changes['min'].firstChange)) {
            this.validateMinAndMax(this.config, this.isDatetime);
        }
    }
    ngDoCheck() {
        if (!Util.isUndefined(this.model)) {
            // 监听model值的变化
            this.setModel(this.isDatetime);
            // 监听format变化
            this.setFormat();
        }
    }
    /**
     * @ignore
     * 确认按钮事件处理
     */
    onOkClick() {
        if (this.inValidValue) {
            return;
        }
        const beginDateStr = TiDateUtil.getDateStr(this.datePanel['value']['begin']);
        // 中间空格误删
        const beginValue = new Date(`${beginDateStr} ${TiDateUtil.addColon(this.beginTime['value'])}`);
        const endDateStr = TiDateUtil.getDateStr(this.datePanel['value']['end']);
        // 中间空格误删
        const endValue = new Date(`${endDateStr} ${TiDateUtil.addColon(this.endTime['value'])}`);
        const newModel = {
            begin: beginValue,
            end: endValue
        };
        // 新旧值不同更新model值
        if (!this.rangeValueIsEqual(this.model, newModel, this.isDatetime)) {
            this.model = newModel;
        }
        this.hideDrop();
        this.okClick.emit(this.model);
    }
    /**
     * @ignore
     * model值的合法性判断
     */
    isValidValue(value) {
        if (value === null) {
            return true;
        }
        if (TiDateUtil.isDate(value['begin']) && TiDateUtil.isDate(value['end']) &&
            value['begin'].getTime() <= value['end'].getTime() &&
            TiDateUtil.isBetweenMaxAndmin(value['begin'], this.min, this.max) &&
            TiDateUtil.isBetweenMaxAndmin(value['end'], this.min, this.max)) {
            return true;
        }
        return false;
    }
    /**
     * @ignore
     * 将value转换成format接口格式的字符串
     */
    formatValue() {
        if (this.model === null || (this.model.begin === null && this.model.end === null)) {
            this.inputValue = '';
        }
        else {
            // 空格误删
            const format = `${this.format.date} ${TiDateUtil.addAmPm(this.format.time)}`;
            const begin = TiLocaleFormat.formatDateTime(this.model.begin, format);
            const end = TiLocaleFormat.formatDateTime(this.model.end, format);
            // 注意：中划线用的是制表符中的中划线，与正常的中线区分开2017-2-12 - 2018-3-20
            this.inputValue = `${begin} ─ ${end}`;
        }
    }
    /**
     * @ignore
     * 配置时间日期面板接口
     */
    setPickerDate() {
        // 设置datepanel指令接口
        this.setDatePanelOptions();
        // 设置time指令接口
        this.setTimeOptions();
        // 设置OK按钮状态
        this.setOkBtnState();
        this.beginTimeDisabled = this.model === null ? true : false;
        this.endTimeDisabled = this.model === null ? true : false;
        this.timeEditDisabled = this.beginTimeDisabled && this.endTimeDisabled;
    }
    // 设置datepanel指令接口
    setDatePanelOptions() {
        let value;
        if (this.model === null) {
            value = {
                begin: null,
                end: null
            };
        }
        else {
            value = {
                begin: this.model.begin,
                end: this.model.end
            };
        }
        this.datePanel = {
            value,
            max: this.max,
            min: this.min,
            format: this.format,
            picker: 'day',
            select: () => {
                const obj = {
                    value: this.datePanel.value[this.focusedPosition],
                    focusedPosition: this.focusedPosition
                };
                this.dayClick.emit(obj);
                // 选择开始日期
                if (this.focusedPosition === 'begin') {
                    if (this.beginTimeDisabled) {
                        this.beginTime['value'] = TiDateUtil.getTimeStr(new Date());
                    }
                    this.beginTimeDisabled = false;
                    this.timeEditDisabled = false;
                    this.dateEditComs.last.focus();
                    this.focusedPosition = 'end';
                }
                else {
                    if (this.endTimeDisabled) {
                        this.endTime['value'] = TiDateUtil.getTimeStr(new Date());
                    }
                    this.endTimeDisabled = false;
                    if (this.focusedPosition === 'end' && this.datePanel.value.begin === null) {
                        this.focusedPosition = 'begin';
                        this.dateEditComs.first.focus();
                    }
                }
                this.validTime();
                this.setOkBtnState();
            },
            selectTimeFn: (obj) => {
                this.setTimeFn(obj, this.beginTime, this.endTime);
                this.setOkBtnState();
                // 选择结束时分秒 焦点移动到结束时间框
                if (obj.timeOption.includes('end')) {
                    this.textComs.last.nativeElement.focus();
                }
                else {
                    // 选择开始时分秒 焦点移动到开始时间框
                    this.textComs.first.nativeElement.focus();
                }
            }
        };
    }
    validTime() {
        const beginDateStr = this.datePanel.value.begin ? TiDateUtil.getDateStr(this.datePanel.value.begin) : '';
        const beginDateTime = new Date(` ${beginDateStr} ${this.beginTime.value}`);
        const endDateStr = this.datePanel.value.end ? TiDateUtil.getDateStr(this.datePanel.value.end) : '';
        const endDateTime = new Date(` ${endDateStr} ${this.endTime.value}`);
        if (TiDateUtil.isSmaller(beginDateTime, this.min)) {
            this.beginTime.value = TiDateUtil.getTimeStr(this.min);
        }
        if (TiDateUtil.isBigger(beginDateTime, this.max)) {
            this.beginTime.value = TiDateUtil.getTimeStr(this.max);
        }
        if (TiDateUtil.isBigger(endDateTime, this.max)) {
            this.endTime.value = TiDateUtil.getTimeStr(this.max);
        }
        this.oldBegintimeValue = this.beginTime['value'];
        this.oldEndtimeValue = this.endTime['value'];
    }
    /**
     * @ignore
     *  时间框失焦事件
     */
    timeBlur(pos, val) {
        let timeVal = val;
        // 区分中英文冒号
        const reg = new RegExp('[\\:\\：]');
        this.beginTime = JSON.parse(JSON.stringify(this.beginTime));
        this.endTime = JSON.parse(JSON.stringify(this.endTime));
        // 输入区间是否存在小数点，非整数
        let isNotInteger = false;
        const timeArr = val.split(reg);
        timeArr.forEach((item, index) => {
            if (item.length === 1) {
                timeArr[index] = '0' + item;
            }
            if (parseInt(item, 10) !== Number(item)) {
                isNotInteger = true;
            }
        });
        timeVal = timeArr.join(':');
        const dateStr = '2020/10/30';
        if (pos === 'begin') {
            this.beginTime.value = timeVal;
            const beginDateVal = new Date(`${TiDateUtil.getDateStr(this.datePanel.value.begin)} ${this.beginTime.value}`);
            const isSmallerThanMin = TiDateUtil.isSmaller(beginDateVal, this.min);
            const beginDate = new Date(`${dateStr} ${TiDateUtil.addColon(this.beginTime['value'])}`);
            const dateVal = new Date(2020, 10, 30, parseInt(timeArr[0], 10), parseInt(timeArr[1], 10), parseInt(timeArr[2], 10));
            if (String(beginDate) === 'Invalid Date' || String(dateVal) === 'Invalid Date' || timeArr.length > 3 || isNotInteger || !this.isBeginSmallerThanEnd() || isSmallerThanMin) {
                this.beginTime.value = this.oldBegintimeValue;
            }
            else {
                this.oldBegintimeValue = this.beginTime.value;
            }
        }
        else {
            this.endTime.value = timeVal;
            const endDateVal = new Date(`${TiDateUtil.getDateStr(this.datePanel.value.end)} ${this.endTime.value}`);
            const isBiggerThanMax = TiDateUtil.isBigger(endDateVal, this.max);
            const endDate = new Date(`${dateStr} ${TiDateUtil.addColon(this.endTime['value'])}`);
            const dateVal = new Date(2020, 10, 30, parseInt(timeArr[0], 10), parseInt(timeArr[1], 10), parseInt(timeArr[2], 10));
            if (String(endDate) === 'Invalid Date' || String(dateVal) === 'Invalid Date' || timeArr.length > 3 || isNotInteger || !this.isBeginSmallerThanEnd() || isBiggerThanMax) {
                this.endTime.value = this.oldEndtimeValue;
            }
            else {
                this.oldEndtimeValue = this.endTime.value;
            }
        }
        this.setOkBtnState();
    }
    /**
     * @ignore
     * 时间框enter事件
     */
    timeKeydown(pos, val, event) {
        if (event.keyCode === TiKeymap.KEY_ENTER || event.keyCode === TiKeymap.KEY_NUMPAD_ENTER) {
            this.timeBlur(pos, val);
        }
    }
    /**
     * @ignore
     */
    dateEditBlur(val, pos) {
        if (val === null) {
            return;
        }
        if (TiDateUtil.isBetweenMaxAndmin(val, this.min, this.max)) {
            if (pos === 'begin') {
                const inputValue = this.dateEditComs.first.nativeElement.firstChild.value;
                if (inputValue === '') {
                    return;
                }
                const beginDateVal = new Date(`${inputValue} ${this.beginTime['value']}`);
                if (TiDateUtil.isDate(this.datePanel.value.end)) {
                    const endDateVal = new Date(`${TiDateUtil.getDateStr(this.datePanel.value.end)} ${this.endTime['value']}`);
                    if (TiDateUtil.isBigger(beginDateVal, endDateVal)) {
                        this.datePanel.value.begin = this.oldBeginValue || this.oldModel && this.oldModel.begin;
                        return;
                    }
                }
                if (this.beginTimeDisabled) {
                    this.beginTime['value'] = TiDateUtil.getTimeStr(new Date());
                }
                this.oldBeginValue = this.datePanel.value.begin;
                this.beginTimeDisabled = false;
            }
            else {
                if (this.endTimeDisabled) {
                    this.endTime['value'] = TiDateUtil.getTimeStr(new Date());
                }
                const inputValue = this.dateEditComs.last.nativeElement.firstChild.value;
                if (inputValue === '') {
                    return;
                }
                const endDateVal = new Date(`${inputValue} ${this.endTime['value']}`);
                if (TiDateUtil.isDate(this.datePanel.value.begin)) {
                    const beginDateVal = new Date(`${TiDateUtil.getDateStr(this.datePanel.value.begin)} ${this.beginTime['value']}`);
                    if (TiDateUtil.isBigger(beginDateVal, endDateVal)) {
                        this.datePanel.value.end = this.oldEndValue || this.oldModel && this.oldModel.end;
                        return;
                    }
                }
                this.oldEndValue = this.datePanel.value.end;
                this.endTimeDisabled = false;
            }
            this.validTime();
            this.setOkBtnState();
            this.timeEditDisabled = this.beginTimeDisabled && this.endTimeDisabled;
        }
    }
    /**
     * @ignore
     */
    onKeydownFn(event, val, pos) {
        if (event.keyCode === TiKeymap.KEY_ENTER || event.keyCode === TiKeymap.KEY_NUMPAD_ENTER) {
            this.dateEditBlur(val, pos);
        }
    }
    // 设置time指令接口
    setTimeOptions() {
        // 设置开始time指令接口
        this.setBeginTimeOptions();
        // 设置结束time指令接口
        this.setEndTimeOptions();
    }
    // 设置开始面板time指令接口
    setBeginTimeOptions() {
        // value接口设置
        this.setBeginTimeValue();
        // max接口设置
        this.setBeginTimeMaxValue();
        // min接口设置
        this.setBeginTimeMinValue();
    }
    // time指令的起始面板的value接口设置 点击删除按钮：如果设置nowDateTime并且值为合法时间日期，时间设置为nowDateTime的时间
    setBeginTimeValue() {
        if (this.model === null || this.model['begin'] === null && this.model['end'] === null) {
            this.beginTime['value'] = '';
            return;
        }
        this.beginTime['value'] = TiDateUtil.getTimeStr(this.model.begin);
    }
    /**
     * @ignore
     * time指令的起始面板的max接口设置
     */
    setBeginTimeMaxValue() {
        // 起始日期是最大日期时，时间组件最大值是max接口中的时间；其他情况最大值是"23:59:59"
        const value = this.datePanel['value'];
        this.beginTime['max'] = ((value instanceof Object) && TiDateUtil.isDateEqual(this.max, value['begin'])) ?
            TiDateUtil.getTimeStr(this.max) : '23:59:59';
    }
    /**
     * @ignore
     * time指令的起始面板的min接口设置
     */
    setBeginTimeMinValue() {
        // 起始日期是最小日期时，时间组件最小值是min接口中的时间；其他情况最大值是"00:00:00"
        const value = this.datePanel['value'];
        this.beginTime['min'] = ((value instanceof Object) && TiDateUtil.isDateEqual(this.min, value['begin'])) ?
            TiDateUtil.getTimeStr(this.min) : '00:00:00';
    }
    // 设置结束面板time指令接口
    setEndTimeOptions() {
        // value接口设置
        this.setEndTimeValue();
        // max接口设置
        this.setEndTimeMaxValue();
        // min接口设置
        this.setEndTimeMinValue();
    }
    // time指令的结束面板的value接口设置
    setEndTimeValue() {
        if (this.model === null || this.model['begin'] === null && this.model['end'] === null) {
            this.endTime['value'] = '';
            return;
        }
        this.endTime['value'] = TiDateUtil.getTimeStr(this.model.end);
    }
    /**
     * @ignore
     * time指令的结束面板的max接口设置
     */
    setEndTimeMaxValue() {
        // 结束日期是最大日期时，时间组件最大值是max接口中的时间; 否则，时间组件最大值是"23:59:59"
        const value = this.datePanel['value'];
        this.endTime['max'] = ((value instanceof Object) && TiDateUtil.isDateEqual(this.max, value['end'])) ?
            TiDateUtil.getTimeStr(this.max) : '23:59:59';
    }
    /**
     * @ignore
     * time指令的结束面板的min接口设置
     */
    setEndTimeMinValue() {
        // 起始日期是最小日期时，时间组件最小值是min接口中的时间；其他情况最大值是"00:00:00"
        const value = this.datePanel['value'];
        this.endTime['min'] = ((value instanceof Object) && TiDateUtil.isDateEqual(this.min, value['end'])) ?
            TiDateUtil.getTimeStr(this.min) : '00:00:00';
    }
    /**
     * @ignore
     * 设置确认按钮的状态
     */
    setOkBtnState() {
        // 输入中文冒号之后，及时转换为英文冒号
        const inputvalue = this.beginTime.value;
        const inputvalue1 = this.endTime.value;
        this.beginTime.value = inputvalue.replace('：', ':');
        this.endTime.value = inputvalue1.replace('：', ':');
        // 判断下拉面板中时间区间是否合法
        this.inValidValue = !this.isValidRange();
        if (this.buttonComs) {
            this.setAttr(this.buttonComs.last.nativeElement, 'disabled', this.inValidValue);
            this.setInputStyle(this.inValidValue);
        }
    }
    // 判断下拉面板中时间区间是否合法
    isValidRange() {
        const date = this.datePanel.value;
        return (date instanceof Object) && (TiDateUtil.isDate(date.begin)) &&
            (TiDateUtil.isDate(date.end)) && this.isBeginSmallerThanEnd();
    }
    // 判断起始值和结束值都在最小值最大值之间
    isBeginSmallerThanEnd() {
        if (!TiDateUtil.isDate(this.datePanel.value.begin) || !TiDateUtil.isDate(this.datePanel.value.end)) {
            return false;
        }
        // 组装起始日期时间 空格误删
        const begin = new Date(`${TiDateUtil.getDateStr(this.datePanel.value.begin)} ${TiDateUtil.addColon(this.beginTime['value'])}`);
        const end = new Date(`${TiDateUtil.getDateStr(this.datePanel.value.end)} ${TiDateUtil.addColon(this.endTime['value'])}`);
        return begin.getTime() <= end.getTime();
    }
}
TiDatetimeRangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-datetime-range',
                template: "<ti-date-dominator  #dominator\r\n                    [id]=\"appendId('dominator')\"\r\n                    type = \"range\"\r\n                    [format] = \"dominatorFormat\"\r\n                    [disabled]=\"disabled\"\r\n                    [clearable]=\"clearIcon\"\r\n                    [(ngModel)]=\"inputValue\"\r\n                    (clear)=\"onIconClearClick($event)\"\r\n                    (click)=\"onShowClick()\">{{placeholder}}</ti-date-dominator><!-- \u5206\u5272\u7EBF\u662F\u7279\u6B8A\u5B57\u7B26\u5236\u8868\u7B26\uFF0C\u4E0D\u662F\u666E\u901A\u4E2D\u7EBF -->\r\n<ti-drop #drop\r\n        [id]=\"appendId('drop')\"\r\n        class=\"ti3-date-range-picker\"\r\n        [ngClass]=\"{'ti3-date-time-range-customize': hasCustomizeTime}\"\r\n        [dominatorElem]=\"dominatorCom.nativeElement\"\r\n        fixMaxHeight=\"true\"\r\n        [panelWidth]=\"daterangePanelWidth\"\r\n        [panelAlign]=\"panelAlign\"\r\n        [browserSpace]=\"browserSpace\"\r\n        [dominatorSpace]='dominatorSpace'\r\n        [determinPositionFn]=\"determinPositionFn\"\r\n        theme='noborder'>\r\n\r\n        <section class='ti3-date-clear'>\r\n            <section *ngIf='hasCustomizeTime' class='ti3-date-time-range-customize-container'>\r\n                <ng-container *ngTemplateOutlet=\"customizeTemplate; context:  {$implicit: customizeOptions}\"></ng-container>\r\n        </section>\r\n\r\n        <section [ngClass]=\"{'ti3-datetime-range-panel-container': hasCustomizeTime}\">\r\n            <ti-date-edit class='ti3-date-time-range-dateedit'\r\n                [ngClass]=\"{'ti3-date-time-range-begin-edit': focusedPosition === 'begin'}\"\r\n                [(ngModel)] = \"datePanel.value.begin\"\r\n                [min] = \"datePanel.min\"\r\n                [max] = \"datePanel.max\"\r\n                (click)=\"dateEditClick('begin')\"\r\n                (focus)=\"dateEditFocus('begin')\"\r\n                (blur)=\"dateEditBlur(datePanel.value.begin, 'begin')\"\r\n                (keydown)=\"onKeydownFn($event, datePanel.value.begin, 'begin')\"\r\n                [format]=\"datePanel.format\"\r\n                [id]=\"appendId('begin_edit')\"></ti-date-edit>\r\n            <input class='ti3-date-time-range-timeedit'\r\n                [ngClass]=\"{'ti3-date-time-range-begintime-edit': focusedPosition === 'beginTime'}\"\r\n                type=\"text\"\r\n                maxlength='8'\r\n                [(ngModel)]=\"beginTime.value\"\r\n                (focus)=\"timeFocus('begin')\"\r\n                [disabled]=\"beginTimeDisabled\"\r\n                [placeholder]='timeplaceholder'\r\n                (blur)=\"timeBlur('begin',beginTime.value)\"\r\n                (keydown)=\"timeKeydown('begin', beginTime.value, $event)\"\r\n                [id]=\"appendId('begin_input')\"\r\n                tiText/>\r\n            <span class='ti3-date-range-splitline'> \u2500 </span>\r\n            <ti-date-edit class='ti3-date-time-range-dateedit'\r\n                [ngClass]=\"{'ti3-date-time-range-end-edit': focusedPosition === 'end'}\"\r\n                [(ngModel)] = \"datePanel.value.end\"\r\n                [min] = \"datePanel.min\"\r\n                [max] = \"datePanel.max\"\r\n                (click)=\"dateEditClick('end')\"\r\n                (focus)=\"dateEditFocus('end')\"\r\n                (blur)=\"dateEditBlur(datePanel.value.end, 'end')\"\r\n                (keydown)=\"onKeydownFn($event, datePanel.value.end, 'end')\"\r\n                [format]=\"datePanel.format\"\r\n                [id]=\"appendId('end_edit')\"></ti-date-edit>\r\n                <!-- \u786E\u8BA4\u6309\u94AE\u7981\u7528\u573A\u666F\u4E0B\uFF0C\u7ED3\u675F\u6846\u8F93\u5165\u4E4B\u540E\u65E0\u6CD5\u76F4\u63A5tab\u5207\u6362\u7126\u70B9\u81F3\u786E\u8BA4\u6309\u94AE\uFF0C\u6545\u6DFB\u52A0\u6B64\u8FC7\u5EA6input -->\r\n                <input #input type=\"text\" class=\"ti3-tab-input\"/>\r\n            <input type=\"text\" class='ti3-date-time-range-timeedit'\r\n                [ngClass]=\"{'ti3-date-time-range-endtime-edit': focusedPosition === 'endTime'}\"\r\n                [(ngModel)]=\"endTime.value\"\r\n                [disabled]=\"endTimeDisabled\"\r\n                [placeholder]='timeplaceholder'\r\n                maxlength='8'\r\n                tiText\r\n                (focus)=\"timeFocus('end')\"\r\n                (keydown)=\"timeKeydown('end',endTime.value, $event)\"\r\n                (blur)=\"timeBlur('end',endTime.value)\"\r\n                [id]=\"appendId('end_input')\"/>\r\n            <ti-date-panel\r\n                [id]=\"appendId('begin-panel')\"\r\n                [(value)]=\"datePanel.value\"\r\n                [focusedPosition]='focusedPosition'\r\n                [selectTime]='selectTime'\r\n                [beginTime]='beginTime'\r\n                [endTime]='endTime'\r\n                [endTimeDisabled]='endTimeDisabled'\r\n                [beginTimeDisabled]='beginTimeDisabled'\r\n                [isRange]='true'\r\n                [(picker)]=\"datePanel.picker\"\r\n                (select)='datePanel.select()'\r\n                (selectTimeFn)='datePanel.selectTimeFn($event)'\r\n                [min]=\"datePanel.min\"\r\n                [max]=\"datePanel.max\"\r\n                [format]=\"format.date\"\r\n                [nowDateTime]=\"nowDateTime\"></ti-date-panel>\r\n        </section>\r\n        </section>\r\n        <section class=\"ti3-date-range-picker-footer\" [ngClass]=\"{'ti3-date-range-select-time': selectTime}\">\r\n            <section class=\"ti3-date-picker-footer-right\">\r\n                <button class=\"ti3-date-picker-footer-btn\"\r\n                        [ngClass]=\"{'ti3-date-picker-footer-noborder': selectTime}\"\r\n                        [id]=\"appendId('okBtn')\"\r\n                        type=\"button\"\r\n                        size=\"small\"\r\n                        (click)=\"onOkClick()\"\r\n                        tiButton>{{ 'tiCommon.okBtn' | tiTranslate }}</button>\r\n                <section (click)='selectTimeFn()' [id]=\"appendId('select_time')\" *ngIf='!selectTime'  class='ti3-datetime-select-btn' [ngClass]=\"{'ti3-datetime-select-btn-disabled': timeEditDisabled}\">{{'tiDate.selectTime' | tiTranslate}}</section>\r\n                <section (click)='selectDateFn()' [id]=\"appendId('select_date')\" *ngIf='selectTime' class='ti3-datetime-select-btn'>{{'tiDate.selectDate' | tiTranslate}}</section>\r\n            </section>\r\n        </section>\r\n</ti-drop>\r\n<ng-template #customizeTemplate let-options>\r\n    <ul [id]=\"appendId('list')\">\r\n        <li *ngFor='let option of options; index as i;' class='ti3-customize-time-label' (click)='customizeTimeClickFn(option.value)' [id]=\"appendId('label_' + i)\">{{option.label}}</li>\r\n    </ul>\r\n</ng-template>\r\n",
                host: {
                    '[class.ti3-datetime-range-input-container]': 'true',
                    '(blur)': 'hidePanel()'
                },
                providers: [TiFormComponent.getValueAccessor(TiDatetimeRangeComponent)],
                styles: [".ti3-compnent-container-border,:host.ti3-datetime-range-input-container{-ms-box-sizing:border-box;border:1px solid;border-radius:var(--ti-input-border-radius);box-sizing:border-box;display:inline-block}.ti3-compnent-container-border:not([disabled]),:host.ti3-datetime-range-input-container:not([disabled]){background-color:var(--ti-input-bg-color);border-color:var(--ti-input-border-color)}.ti3-compnent-container-border:not([disabled]):hover,:host.ti3-datetime-range-input-container:not([disabled]):hover{border-color:var(--ti-input-border-color-hover)}.ti3-compnent-container-border:not([disabled])[tiFocused],:host.ti3-datetime-range-input-container:not([disabled])[tiFocused]{border-color:var(--ti-input-border-color-focus)}.ti3-compnent-container-border[disabled],:host.ti3-datetime-range-input-container[disabled]{background-color:var(--ti-input-bg-color-disabled);border-color:var(--ti-input-border-color-disabled);cursor:not-allowed!important}.ti3-customize-time-label{color:var(--ti-common-color-text-primary);cursor:pointer;font-size:var(--ti-common-font-size-base);line-height:var(--ti-common-line-height-number);margin-bottom:10px}.ti3-customize-time-label:hover{color:var(--ti-common-color-line-active)}.ti3-date-clear{display:flex;*zoom:1}.ti3-date-clear:after{clear:both}.ti3-date-clear:after,.ti3-date-clear:before{content:\"\";display:table}.ti3-datetime-select-btn{color:var(--ti-common-color-text-highlight);cursor:pointer;float:right;line-height:24px;padding-right:var(--ti-common-space-2x)}.ti3-datetime-select-btn-disabled{color:var(--ti-common-color-text-disabled);cursor:not-allowed}.ti3-date-range-splitline{padding:0 6px}.ti3-tab-input{height:0;left:-9999px;position:absolute;top:-9999px;width:0}::ng-deep :root{--ti-date-picker-middle-margin:20px;--ti-date-picker-padding-bottom:12px;--ti-date-picker-padding-horizon:16px}:host.ti3-datetime-range-input-container{width:320px}.ti3-dropdown-container.ti3-date-range-picker{font-size:var(--ti-datetime-input-font-size);padding:var(--ti-date-picker-padding-bottom) var(--ti-date-picker-padding-horizon);width:calc(var(--ti-datetime-day-width)*7 + var(--ti-date-picker-padding-horizon) + var(--ti-date-picker-middle-margin) + 2px);z-index:var(--ti-datetime-z-index)}.ti3-dropdown-container.ti3-date-range-picker:focus{outline:0}.ti3-date-range-begin-end-text{color:var(--ti-datetime-picker-color);height:var(--ti-datetime-input-font-size);line-height:var(--ti-datetime-input-font-size);margin-top:var(--ti-common-space-10);padding-left:var(--ti-common-space-10)}.ti3-datetime-range-time{height:var(--ti-input-height)}.ti3-date-range-end-container{float:right;width:calc(var(--ti-datetime-day-width)*7)}.ti3-date-range-end-container ti-date-edit>input{text-align:center}.ti3-date-range-picker-footer{-ms-box-sizing:border-box;-ms-user-select:none;-webkit-user-select:none;border-top:1px solid var(--ti-common-color-line-dividing);box-sizing:border-box;clear:both;margin-top:var(--ti-common-space-3x);padding-top:var(--ti-common-space-10);user-select:none;width:100%;*zoom:1}.ti3-date-range-picker-footer:after{clear:both;content:\"\";display:table}.ti3-date-range-picker-footer:before{content:\"\";display:table}.ti3-date-range-picker-footer .ti3-date-picker-footer-btn{float:right}.ti3-date-range-picker-footer .ti3-date-picker-footer-btn:last-child{margin-right:var(--ti-common-space-10)}.ti3-date-range-picker-footer.ti3-date-range-select-time{border-top:none;margin-top:0}.ti3-date-picker-footer-right{float:right}.ti3-date-time-range-customize{width:677px!important}.ti3-date-time-range-customize-container{border-right:1px solid var(--ti-common-color-line-dividing);float:left;height:292px;padding-right:var(--ti-common-space-4x);width:80px}.ti3-date-time-range-dateedit{display:inline-block;margin-right:var(--ti-common-space-2x);width:120px}::ng-deep .ti3-date-time-range-begin-edit input[tiText],::ng-deep .ti3-date-time-range-begintime-edit,::ng-deep .ti3-date-time-range-end-edit input[tiText],::ng-deep .ti3-date-time-range-endtime-edit{border-color:var(--ti-input-border-color-focus)!important}.ti3-date-time-range-timeedit{display:inline-block;width:120px}.ti3-datetime-range-panel-container{float:right;padding-left:var(--ti-common-space-4x)}"]
            },] }
];
//# sourceMappingURL=data:application/json;base64,