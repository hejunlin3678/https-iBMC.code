/* eslint-disable no-eq-null */
/* eslint-disable eqeqeq */
import { Component, ElementRef, Input, QueryList, Renderer2, ViewChildren } from '@angular/core';
import { TiKeymap, Util } from '../../utils/Util';
import { TiFormComponent } from '../base/TiBaseModule';
// 下面注释，可以避免编译lib时正则报错。原理未知，副作用未知。
// @dynamic
/**
 * Ip组件
 *
 * Ip组件提供了一种方便的显示和设置IP地址的功能。
 *
 * <example-url>../tiny3demo/#/ip/ip-all</example-url>
 */
export class TiIpComponent extends TiFormComponent {
    constructor(hostRef, renderer2) {
        super(hostRef, renderer2);
        this.hostRef = hostRef;
        this.renderer2 = renderer2;
        /**
         * ip版本号，可以赋值4或6
         */
        this.version = 4;
        /**
         * @ignore
         */
        this.pasteHandle = (event) => {
            if (this.disabled) {
                return;
            }
            event.preventDefault(); // 阻止默认的input原生的粘贴事件（把粘贴板的值粘贴到input框）
            let pasteValue = '';
            if (window['clipboardData'] && window['clipboardData'].getData) { // for IE
                pasteValue = window['clipboardData'].getData('Text');
            }
            else { // For other browser
                try {
                    pasteValue = event.clipboardData.getData('Text');
                }
                catch (err) { }
            }
            const unmaskpaste = this.unmask(this.version, pasteValue);
            if (this.isValidIP(this.version, unmaskpaste)) {
                this.updateValue(unmaskpaste); // 粘贴之后更新值
                this.ipsValues = this.splitToIPArray(this.version, this.model); // 内部的操作手动更新数组
            }
        };
        /**
         * @ignore
         */
        this.blurHandle = (event) => {
            const ipValue = this.generateIPValue(0);
            if (ipValue === '') {
                this.updateValue(ipValue);
            }
            else {
                const fixedVaule = this.blurFixed(this.version, ipValue);
                this.updateValue(this.mask(this.version, fixedVaule));
            }
        };
    }
    static getGlbInfo(ver) {
        return ver === 4 ? TiIpComponent.ipv4 : TiIpComponent.ipv6;
    }
    blurFixed(ver, ip) {
        const arr = this.splitToIPArray(ver, ip);
        for (let i = 0; i < arr.length; i++) {
            if (arr[i] === '') {
                arr[i] = '0';
            }
        }
        return this.joinToIPValue(ver, arr);
    }
    // 组件声明周期钩子--start
    ngOnInit() {
        super.ngOnInit();
        this.init();
    }
    init() {
        // 默认是IPv4
        this.version = parseInt(String(this.version), 10) === TiIpComponent.ipv6Version ?
            TiIpComponent.ipv6Version : TiIpComponent.ipv4Version;
        // 初始化ipValueArray  赋值新的数组
        this.ipsValues = TiIpComponent.getGlbInfo(this.version).ipValueArray.concat();
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        //  处理 聚焦 并使第一段ip获焦(放在这个钩子的原因：在oninit中拿不到 QueryList 返回的结果集)
        const elements = [];
        this.ipInputs.forEach((item) => {
            elements.push(item.nativeElement);
        });
        // 推荐在onInit()时调用setFocusableElems(), 但是ngFor/ngIf中的元素在ngAfterViewInit()才能获取到
        this.setFocusableElems(elements);
    }
    // 组件声明周期钩子--end
    // 实现ControlValueAccessor接口--start
    /**
     * @ignore
     */
    writeValue(value) {
        if (value === '') {
            super.writeValue(value);
            // 对空值做特殊处理,为空时清空IP框
            this.ipsValues = TiIpComponent.getGlbInfo(this.version).ipValueArray.concat();
        }
        else if (value === this.joinToIPValue(this.version, this.ipsValues)) {
            // 和当前IP框的值相同不处理
        }
        else if (this.isValidIP(this.version, value) || this.isInputting(this.version, value)) {
            super.writeValue(this.mask(this.version, value));
            this.ipsValues = this.splitToIPArray(this.version, this.model);
        }
        else {
            // 非法不处理 恢复之前值
            super.writeValue(this.joinToIPValue(this.version, this.ipsValues));
        }
    }
    // 实现ControlValueAccessor接口--end
    // 组件交互方法集合--start
    /**
     * @ignore
     */
    keydown(e, index) {
        const ipInputs = this.ipInputs;
        const keyCode = e.keyCode;
        this.keydownHandle(e, ipInputs['_results'][index], index, this.version);
        // 按下键为左或右键时，不做重新赋值，避免IE浏览器下重新赋值之后光标位置不准确问题
        if (keyCode === TiKeymap.KEY_ARROW_LEFT || keyCode === TiKeymap.KEY_ARROW_RIGHT) {
            return;
        }
    }
    /**
     * @ignore
     */
    input(e, index) {
        // 防止中文输入和非法字符的输入
        this.generateIPValue(index);
    }
    /**
     * @ignore
     */
    change(index) {
        const ipValues = this.generateIPValue(index);
        this.updateValue(ipValues);
    }
    // 组件交互方法集合--end
    // 内部公共方法集合--start
    /**
     * @description  将 ip 数组拼接成ip值
     * @param: ver ip版本
     * @param: arr ip字符串中数字组成的数组
     * @returns
     */
    joinToIPValue(ver, arr) {
        return arr.join(TiIpComponent.getGlbInfo(ver).separator);
    }
    /**
     * @description 将 ip 值分割成ip数组
     * @param: ver ip版本
     * @param: ip ip字符串
     */
    splitToIPArray(ver, ip) {
        const res = ip ? ip.split(TiIpComponent.getGlbInfo(ver).separator) : [];
        return res;
    }
    isInputting(ver, value) {
        const arr = this.splitToIPArray(ver, value);
        return arr.indexOf('') >= 0;
    }
    // 判断当前ip值是否合法
    isValidIP(ver, ip) {
        if (ip === null || ip === undefined) {
            return false;
        }
        const rgx = (ver === TiIpComponent.ipv4Version) ? TiIpComponent.ipv4Reg : TiIpComponent.ipv6Reg;
        return rgx.test(ip);
    }
    /**
     * @description IP需要去除前面的0，例如：,“012.12.23.002”经过该函数处理后变为：“12.12.23.2”；IPv6支持缩略格式
     * @param: ver ip版本
     * @param: ip ip字符串
     * @returns
     */
    mask(ver, ip) {
        const ipInfo = TiIpComponent.getGlbInfo(ver);
        const part = ip.split(ipInfo.separator);
        const partLength = part.length;
        if (ver === 4) {
            for (let i = 0; i < partLength; i++) {
                if (part[i] !== '') {
                    let partNumber = parseInt(part[i], 10);
                    // parseInt(part[i], 10) /= 1;
                    partNumber /= 1; // 将part[j]转化为整数，目的是消除前面的0
                    part[i] = String(partNumber); // 再转化为字符串
                }
            }
        }
        else {
            // IPv6支持缩略格式，即任何由全0组成的1个或多个16位段的单个连续的字符串 都可以用一个双冒号“::”，且“::”只出现一次；例如：2001:d02::14:95
            // 用‘0’补齐缩略格式缺少个数
            while (part.length < 8) {
                let index = part.indexOf('');
                part.splice(index, 0, '0');
            }
            part.forEach((partItem, index) => {
                //  查找是否有1-9和字母，如果没有，替换为0，如果有，去除前面的0
                if (partItem.match(/[1-9a-f]/i)) {
                    part[index] = partItem.replace(/^0{1,3}/i, '');
                }
                else if (partItem !== '0') {
                    part[index] = '0';
                }
            });
        }
        return part.join(ipInfo.separator);
    }
    /**
     * @description 去掉空格后的IP地址；例如“  12.12 .23.2  ”进过该函数处理后返回：“12.12.23.2”
     * @param: ver ip版本
     * @param: ip ip字符串
     */
    unmask(ver, ip) {
        const iPInfo = TiIpComponent.getGlbInfo(ver);
        return ip.replace(iPInfo.placeReg, '');
    }
    /**
     * @description  获取当前ip段输入的值并进行判断，合法时更新到当前ip段输入框内，并拼接返回整体ip值
     * @param: index 当前输入框的下标
     */
    generateIPValue(index) {
        const ipInfo = TiIpComponent.getGlbInfo(this.version);
        const cellArray = this.ipInputs;
        let value = cellArray['_results'][index].nativeElement.value;
        if (ipInfo.ipvCheckReg.test(value)) {
            value = value.replace(ipInfo.ipvCheckReg, '');
        }
        // ipv4下，当前输入框值大于255时，强制转换成255
        if (this.version === TiIpComponent.ipv4Version && value > 255) {
            value = 255;
        }
        for (let i = 0; i < this.ipsValues.length; i++) {
            if (i === index) {
                this.ipsValues[i] = value;
                cellArray['_results'][index].nativeElement.value = value;
            }
        }
        let ipValues;
        ipValues = this.ipsValues.join(ipInfo.separator);
        if (ipValues === ipInfo.label) {
            ipValues = '';
        }
        return ipValues;
    }
    // 更新value值 //TODO: Tiny3考虑去除这个函数，用writeValue代替
    updateValue(newValue) {
        if (newValue === this.model) {
            return;
        }
        // 记录ip的值在value中,方便用户获取
        this.model = newValue;
        this.writeValue(newValue);
    }
    // keydown事件触发时，判断并设置组件光标位置
    keydownHandle(e, thisInput, index, ver) {
        const ipInputsLength = this.ipInputs.length;
        const nextCell = index < ipInputsLength - 1 ?
            this.ipInputs['_results'][index + 1] : undefined;
        const prevCell = index > 0 ? this.ipInputs['_results'][index - 1] : undefined;
        const keyCode = e.keyCode;
        // 键盘码110代表. 190代表 >.---当键盘码为这两种时,跳至下一输入框中,并选中该输入框中的值
        if (keyCode === TiKeymap.KEY_NUMPAD_DECIMAL || keyCode === TiKeymap.KEY_PERIOD) {
            if (!Util.isUndefined(nextCell)) { // 非最后一个输入框时，跳至下一输入框
                nextCell.nativeElement.focus();
                nextCell.nativeElement.select();
            }
            e.preventDefault(); // 不论是否为最后一个输入框,防止默认事件发生,否则输入框中会出现 ...
            return;
        }
        // 光标后移到下一段ip
        if (this.isMoveToNext(e, thisInput, nextCell, ver)) {
            nextCell.nativeElement.focus();
            this.caret(nextCell, 0); // 设置光标位置
        }
        // 光标前移到上一段ip
        if (this.isMoveToPrevous(keyCode, thisInput, prevCell)) {
            this.caret(prevCell, prevCell.nativeElement.value.length); // 设置光标位置
            e.preventDefault(); // 防止默认事件发生,否则输入框中的回退光标位置会有问题
        }
    }
    // 判断当前是否需要将光标移至后一段ip
    isMoveToNext(e, thisInput, nextCell, ver) {
        // 如果下一段ip不存在直接返回false
        if (Util.isUndefined(nextCell)) {
            return false;
        }
        // 如果输入为合法数字,输入框中已有3个值,光标位于输入框末尾,并且存在下一输入框, 则跳至下一输入框
        let isFullToNext;
        if (ver !== TiIpComponent.ipv6Version) {
            isFullToNext = this.checkIpv4MoveToNext(thisInput, e);
        }
        else {
            isFullToNext = this.checkIpv6MoveToNext(thisInput, e);
        }
        // 当为向右键时→,且光标位置在该输入框末尾。则直接跳到下一输入框中
        const keyCode = e.keyCode;
        const isRightToNext = keyCode === TiKeymap.KEY_ARROW_RIGHT
            && this.caret(thisInput)[0] === thisInput.nativeElement.value.length;
        return isFullToNext || isRightToNext;
    }
    // 判断当前是否需要将光标移至前一段ip
    isMoveToPrevous(keyCode, thisInput, prevCell) {
        // 1.当为向左键(37),且光标位置位于输入框起始位置时,则跳至前一输入框中;
        // 2.当为backspace键,且已回删至输入框起始位置 跳至前已输入框中
        // 3.输入框处于选中状态时，按backspace键不跳到前一输入框中
        return !Util.isUndefined(prevCell) &&
            ((keyCode === TiKeymap.KEY_ARROW_LEFT && this.caret(thisInput)[0] === 0) // 按左键
                || (keyCode === TiKeymap.KEY_BACKSPACE && this.caret(thisInput)[0] === 0) // 按后退键并且删除完
                    && (this.caret(thisInput)[0] === this.caret(thisInput)[1])); // 输入框处于选中状态按后退键不跳到前一个输入框
    }
    // 判断当前段ipv4输入框是否已满3,末端是合法字符，且光标位置在此段ip最后
    checkIpv4MoveToNext(thisInput, e) {
        return (thisInput.nativeElement.value.length === 3) && (this.isNumeric(e)
            && (this.caret(thisInput)[0] === 3));
    }
    // 判断当前段ipv6输入框是否已满4未合法字符，且光标位置在此段ip最后
    checkIpv6MoveToNext(thisInput, e) {
        return (thisInput.nativeElement.value.length === 4) && (this.isHexaDecimal(e)
            && (this.caret(thisInput)[0] === 4));
    }
    // 判断输入是否为ipv4合法字符
    isNumeric(e) {
        if (e.shiftKey || e.ctrlKey) {
            return false;
        }
        const code = e.keyCode;
        return (code >= TiKeymap.KEY_0 && code <= TiKeymap.KEY_9) ||
            (code >= TiKeymap.KEY_NUMPAD_0 && code <= TiKeymap.KEY_NUMPAD_9);
    }
    // 判断输入是否为ipv6合法字符
    isHexaDecimal(e) {
        const keyCode = e.keyCode;
        // ctrl键组合其它情况，输入框中不会输入有效字符，返回
        if (e.ctrlKey) {
            return false;
        }
        // 输入有效字符情况：1）a~f 2）有效数字
        const isValidInput = (keyCode >= TiKeymap.KEY_A && keyCode <= TiKeymap.KEY_F)
            || (keyCode >= TiKeymap.KEY_NUMPAD_0 && keyCode <= TiKeymap.KEY_NUMPAD_9)
            || (keyCode >= TiKeymap.KEY_0 && keyCode <= TiKeymap.KEY_9);
        return isValidInput;
    }
    /**
     * @description  获取或设置光标位置
     * @param: ele 光标所在dom
     * @param: s 开始位置
     * @param: e 结束位置
     */
    caret(ele, s, e) {
        const element = ele.nativeElement;
        const setPosition = function (el, start, end) {
            if (el.setSelectionRange) {
                el.focus();
                el.setSelectionRange(start, end);
            }
            else if (el.createTextRange) {
                const range = el.createTextRange();
                range.collapse(true);
                range.moveEnd('character', end);
                range.moveStart('character', start);
                range.select();
            }
        };
        if (s != null && e != null) { // setting range
            return setPosition(element, s, e);
        }
        else if (s != null) { // setting position
            return setPosition(element, s, s);
        }
        // getting
        if (element.createTextRange && document['selection']) {
            const r = document['selection'].createRange().duplicate();
            const end = element.value.lastIndexOf(r.text) + r.text.length;
            r.moveEnd('character', element.value.length);
            const start = (r.text === '') ? element.value.length : element.value.lastIndexOf(r.text);
            return [start, end];
        }
        return [element.selectionStart, element.selectionEnd];
    }
    /**
     * @ignore
     * ngFor遍历的 trackBy函数，防止数据更新导致所有DOM重新渲染
     */
    trackByFn(index, item) {
        return index;
    }
}
// ipv4 配置参数
TiIpComponent.ipv4Version = 4;
// 采用华为自研的ipv4正则表达式
TiIpComponent.ipv4Reg = /^(((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))\.){3}((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))$/i;
TiIpComponent.ipv4 = {
    ipvCheckReg: /[\D]/g,
    label: '...',
    placeReg: /\s/g,
    separator: '.',
    ipValueArray: new Array(4).fill('')
};
// ipv6 配置参数
TiIpComponent.ipv6Version = 6;
// 采用华为自研的ipv6正则表达式
TiIpComponent.ipv6Reg = /^(((([\da-f]{1,4}):){7}([\da-f]{1,4}))|(((([\da-f]{1,4}):){1,7}:)|((([\da-f]{1,4}):){6}:([\da-f]{1,4}))|((([\da-f]{1,4}):){5}:(([\da-f]{1,4}):)?([\da-f]{1,4}))|((([\da-f]{1,4}):){4}:(([\da-f]{1,4}):){0,2}([\da-f]{1,4}))|((([\da-f]{1,4}):){3}:(([\da-f]{1,4}):){0,3}([\da-f]{1,4}))|((([\da-f]{1,4}):){2}:(([\da-f]{1,4}):){0,4}([\da-f]{1,4}))|((([\da-f]{1,4}):){1}:(([\da-f]{1,4}):){0,5}([\da-f]{1,4}))|(::(([\da-f]{1,4}):){0,6}([\da-f]{1,4}))|(::([\da-f]{1,4})?))|(((([\da-f]{1,4}):){6}(((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))\.){3}((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5])))|((([\da-f]{1,4}):){5}:(((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))\.){3}((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5])))|((([\da-f]{1,4}):){4}:(([\da-f]{1,4}):)?(((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))\.){3}((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5])))|((([\da-f]{1,4}):){3}:(([\da-f]{1,4}):){0,2}(((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))\.){3}((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5])))|((([\da-f]{1,4}):){2}:(([\da-f]{1,4}):){0,3}(((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))\.){3}((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5])))|(([\da-f]{1,4})::(([\da-f]{1,4}):){0,4}(((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))\.){3}((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5])))|(::(([\da-f]{1,4}):){0,5}(((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))\.){3}((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5])))))$/i;
TiIpComponent.ipv6 = {
    ipvCheckReg: /[^a-f\d]/ig,
    label: ':::::::',
    placeReg: /\s/g,
    separator: ':',
    ipValueArray: new Array(8).fill('')
};
TiIpComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-ip',
                template: "<ng-container *ngFor=\"let ipsValue of ipsValues; index as i; trackBy: trackByFn\"><!--\r\n --><input #ipInput type=\"text\"\r\n           autocomplete=\"off\"\r\n           [ngClass]=\"version === 4 ? 'ti_input_ip_octet' : 'ti_input_ip_octet_v6'\"\r\n           class=\"ti_input_ip_anchor\"\r\n           [ngModel]=\"ipsValue\"\r\n           [id]=\"appendId(i)\"\r\n           (ngModelChange)=\"change(i)\"\r\n           (keydown)=\"keydown($event, i)\"\r\n           (input)=\"input($event, i)\"\r\n           [disabled]=\"disabled\"\r\n           noborder tiText\r\n           maxlength=\"{{version === 4 ? 3 : 4}}\"/><!--\r\n --><span class=\"ti_input_ip_division\"\r\n          *ngIf=\"i != (ipsValues.length - 1)\">{{version === 4 ? '.' : ':'}}</span><!--\r\n--></ng-container>\r\n",
                providers: [TiFormComponent.getValueAccessor(TiIpComponent)],
                host: {
                    '[class.ti_input_ip_container_ipv4]': 'version !== 6',
                    '[class.ti_input_ip_container_ipv6]': 'version === 6',
                    '(paste)': 'pasteHandle($event)',
                    '(blur)': 'blurHandle($event)'
                },
                styles: ["::ng-deep :root{--ti-ip-division-width:3px}:host.ti_input_ip_container_ipv4{-ms-box-sizing:border-box;background-color:var(--ti-input-bg-color);border:1px solid var(--ti-input-border-color);border-radius:var(--ti-input-border-radius);box-sizing:border-box;display:inline-block;height:var(--ti-input-height);transition:border-color .15s;width:160px}:host.ti_input_ip_container_ipv4.ng-invalid.ng-dirty:not([tiBlurCheck]) .ti_input_ip_anchor,:host.ti_input_ip_container_ipv4.ng-invalid.ng-dirty[tiBlurCheck]:not([tiFocused]) .ti_input_ip_anchor,:host.ti_input_ip_container_ipv4.ng-invalid.ng-touched:not([tiBlurCheck]) .ti_input_ip_anchor,:host.ti_input_ip_container_ipv4.ng-invalid.ng-touched[tiBlurCheck]:not([tiFocused]) .ti_input_ip_anchor{background-color:var(--ti-input-bg-color-error)}:host.ti_input_ip_container_ipv4 .ti_input_ip_anchor{height:calc(var(--ti-input-height) - 2px);padding:0;text-align:center;vertical-align:middle;width:calc((100% - var(--ti-ip-division-width)*3)/4)}:host.ti_input_ip_container_ipv4 .ti_input_ip_division{color:var(--ti-common-color-icon-normal);display:inline-block;font-family:Helvetica,Myriad,Arial,Microsoft Yahei,\"????\",SimSun,Tahoma;font-weight:700;width:var(--ti-ip-division-width)}:host.ti_input_ip_container_ipv4:hover{border-color:var(--ti-input-border-color-hover);transition:border-color .2s}:host.ti_input_ip_container_ipv4[tiFocused]{border-color:var(--ti-input-border-color-focus)}:host.ti_input_ip_container_ipv4[disabled]{background-color:var(--ti-input-bg-color-disabled);border-color:var(--ti-input-border-color-disabled)}:host.ti_input_ip_container_ipv4[disabled] .ti_input_ip_division,:host.ti_input_ip_container_ipv4[disabled] .ti_input_ip_octet,:host.ti_input_ip_container_ipv4[disabled] .ti_input_ip_octet_v6{color:var(--ti-common-color-icon-disabled);cursor:not-allowed}:host.ti_input_ip_container_ipv6{-ms-box-sizing:border-box;background-color:var(--ti-input-bg-color);border:1px solid var(--ti-input-border-color);border-radius:var(--ti-input-border-radius);box-sizing:border-box;display:inline-block;height:var(--ti-input-height);transition:border-color .15s;width:380px}:host.ti_input_ip_container_ipv6.ng-invalid.ng-dirty:not([tiBlurCheck]) .ti_input_ip_anchor,:host.ti_input_ip_container_ipv6.ng-invalid.ng-dirty[tiBlurCheck]:not([tiFocused]) .ti_input_ip_anchor,:host.ti_input_ip_container_ipv6.ng-invalid.ng-touched:not([tiBlurCheck]) .ti_input_ip_anchor,:host.ti_input_ip_container_ipv6.ng-invalid.ng-touched[tiBlurCheck]:not([tiFocused]) .ti_input_ip_anchor{background-color:var(--ti-input-bg-color-error)}:host.ti_input_ip_container_ipv6 .ti_input_ip_anchor{height:calc(var(--ti-input-height) - 2px);padding:0;text-align:center;vertical-align:middle;width:calc((100% - var(--ti-ip-division-width)*7 - 1px)/8)}:host.ti_input_ip_container_ipv6 .ti_input_ip_division{color:var(--ti-common-color-icon-normal);display:inline-block;font-family:Helvetica,Myriad,Arial,Microsoft Yahei,\"????\",SimSun,Tahoma;font-weight:700;width:var(--ti-ip-division-width)}:host.ti_input_ip_container_ipv6:hover{border-color:var(--ti-input-border-color-hover);transition:border-color .2s}:host.ti_input_ip_container_ipv6[tiFocused]{border-color:var(--ti-input-border-color-focus)}:host.ti_input_ip_container_ipv6[disabled]{background-color:var(--ti-input-bg-color-disabled);border-color:var(--ti-input-border-color-disabled)}:host.ti_input_ip_container_ipv6[disabled] .ti_input_ip_division,:host.ti_input_ip_container_ipv6[disabled] .ti_input_ip_octet,:host.ti_input_ip_container_ipv6[disabled] .ti_input_ip_octet_v6{color:var(--ti-common-color-icon-disabled);cursor:not-allowed}"]
            },] }
];
TiIpComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
TiIpComponent.propDecorators = {
    version: [{ type: Input }],
    ipInputs: [{ type: ViewChildren, args: ['ipInput',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGlJcENvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL0BjbG91ZC90aW55My9jb21wb25lbnRzL2lwL1RpSXBDb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCO0FBQy9CLDJCQUEyQjtBQUMzQixPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDdkQsa0NBQWtDO0FBQ2xDLFdBQVc7QUFDWDs7Ozs7O0dBTUc7QUFhSCxNQUFNLE9BQU8sYUFBYyxTQUFRLGVBQWU7SUF5QzlDLFlBQXNCLE9BQW1CLEVBQVksU0FBb0I7UUFDckUsS0FBSyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztRQURSLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFBWSxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBZHpFOztXQUVHO1FBQ00sWUFBTyxHQUFXLENBQUMsQ0FBQztRQWM3Qjs7V0FFRztRQUNJLGdCQUFXLEdBQUcsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUNoQyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2YsT0FBTzthQUNWO1lBQ0QsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMscUNBQXFDO1lBQzdELElBQUksVUFBVSxHQUFXLEVBQUUsQ0FBQztZQUM1QixJQUFJLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsU0FBUztnQkFDdkUsVUFBVSxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxD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S0FBSztJQUNaLFFBQVEsRUFBRSxLQUFLO0lBQ2YsU0FBUyxFQUFFLEdBQUc7SUFDZCxZQUFZLEVBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztDQUN0QyxDQUFDO0FBQ0YsWUFBWTtBQUNZLHlCQUFXLEdBQVcsQ0FBQyxDQUFDO0FBQ2hELG1CQUFtQjtBQUNLLHFCQUFPLEdBQVcsMDBDQUEwMEMsQ0FBQztBQUM3MUMsa0JBQUksR0FBRztJQUMzQixXQUFXLEVBQUUsWUFBWTtJQUN6QixLQUFLLEVBQUUsU0FBUztJQUNoQixRQUFRLEVBQUUsS0FBSztJQUNmLFNBQVMsRUFBRSxHQUFHO0lBQ2QsWUFBWSxFQUFFLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Q0FDdEMsQ0FBQzs7WUFsQ0wsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxPQUFPO2dCQUNqQiwreEJBQXdCO2dCQUV4QixTQUFTLEVBQUUsQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQzVELElBQUksRUFBRTtvQkFDRixvQ0FBb0MsRUFBRSxlQUFlO29CQUNyRCxvQ0FBb0MsRUFBRSxlQUFlO29CQUNyRCxTQUFTLEVBQUUscUJBQXFCO29CQUNoQyxRQUFRLEVBQUUsb0JBQW9CO2lCQUNqQzs7YUFDSjs7O1lBdkJtQixVQUFVO1lBQW9CLFNBQVM7OztzQkFzRHRELEtBQUs7dUJBSUwsWUFBWSxTQUFDLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1lcS1udWxsICovXHJcbi8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBRdWVyeUxpc3QsIFJlbmRlcmVyMiwgVmlld0NoaWxkcmVuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRpS2V5bWFwLCBVdGlsIH0gZnJvbSAnLi4vLi4vdXRpbHMvVXRpbCc7XHJcbmltcG9ydCB7IFRpRm9ybUNvbXBvbmVudCB9IGZyb20gJy4uL2Jhc2UvVGlCYXNlTW9kdWxlJztcclxuLy8g5LiL6Z2i5rOo6YeK77yM5Y+v5Lul6YG/5YWN57yW6K+RbGli5pe25q2j5YiZ5oql6ZSZ44CC5Y6f55CG5pyq55+l77yM5Ymv5L2c55So5pyq55+l44CCXHJcbi8vIEBkeW5hbWljXHJcbi8qKlxyXG4gKiBJcOe7hOS7tlxyXG4gKlxyXG4gKiBJcOe7hOS7tuaPkOS+m+S6huS4gOenjeaWueS+v+eahOaYvuekuuWSjOiuvue9rklQ5Zyw5Z2A55qE5Yqf6IO944CCXHJcbiAqXHJcbiAqIDxleGFtcGxlLXVybD4uLi90aW55M2RlbW8vIy9pcC9pcC1hbGw8L2V4YW1wbGUtdXJsPlxyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3RpLWlwJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9pcC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL2lwLmxlc3MnXSxcclxuICAgIHByb3ZpZGVyczogW1RpRm9ybUNvbXBvbmVudC5nZXRWYWx1ZUFjY2Vzc29yKFRpSXBDb21wb25lbnQpXSxcclxuICAgIGhvc3Q6IHtcclxuICAgICAgICAnW2NsYXNzLnRpX2lucHV0X2lwX2NvbnRhaW5lcl9pcHY0XSc6ICd2ZXJzaW9uICE9PSA2JyxcclxuICAgICAgICAnW2NsYXNzLnRpX2lucHV0X2lwX2NvbnRhaW5lcl9pcHY2XSc6ICd2ZXJzaW9uID09PSA2JyxcclxuICAgICAgICAnKHBhc3RlKSc6ICdwYXN0ZUhhbmRsZSgkZXZlbnQpJyxcclxuICAgICAgICAnKGJsdXIpJzogJ2JsdXJIYW5kbGUoJGV2ZW50KSdcclxuICAgIH1cclxufSlcclxuZXhwb3J0IGNsYXNzIFRpSXBDb21wb25lbnQgZXh0ZW5kcyBUaUZvcm1Db21wb25lbnQge1xyXG4gICAgLy8gaXB2NCDphY3nva7lj4LmlbBcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGlwdjRWZXJzaW9uOiBudW1iZXIgPSA0O1xyXG4gICAgLy8g6YeH55So5Y2O5Li66Ieq56CU55qEaXB2NOato+WImeihqOi+vuW8j1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgaXB2NFJlZzogUmVnRXhwID0gL14oKCgxP1sxLTldP1xcZCl8KDEwXFxkKXwoMlswLTRdXFxkKXwoMjVbMC01XSkpXFwuKXszfSgoMT9bMS05XT9cXGQpfCgxMFxcZCl8KDJbMC00XVxcZCl8KDI1WzAtNV0pKSQvaTtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGlwdjQgPSB7XHJcbiAgICAgICAgaXB2Q2hlY2tSZWc6IC9bXFxEXS9nLFxyXG4gICAgICAgIGxhYmVsOiAnLi4uJyxcclxuICAgICAgICBwbGFjZVJlZzogL1xccy9nLFxyXG4gICAgICAgIHNlcGFyYXRvcjogJy4nLFxyXG4gICAgICAgIGlwVmFsdWVBcnJheTogbmV3IEFycmF5KDQpLmZpbGwoJycpXHJcbiAgICB9O1xyXG4gICAgLy8gaXB2NiDphY3nva7lj4LmlbBcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGlwdjZWZXJzaW9uOiBudW1iZXIgPSA2O1xyXG4gICAgLy8g6YeH55So5Y2O5Li66Ieq56CU55qEaXB2Nuato+WImeihqOi+vuW8j1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgaXB2NlJlZzogUmVnRXhwID0gL14oKCgoW1xcZGEtZl17MSw0fSk6KXs3fShbXFxkYS1mXXsxLDR9KSl8KCgoKFtcXGRhLWZdezEsNH0pOil7MSw3fTopfCgoKFtcXGRhLWZdezEsNH0pOil7Nn06KFtcXGRhLWZdezEsNH0pKXwoKChbXFxkYS1mXXsxLDR9KTopezV9OigoW1xcZGEtZl17MSw0fSk6KT8oW1xcZGEtZl17MSw0fSkpfCgoKFtcXGRhLWZdezEsNH0pOil7NH06KChbXFxkYS1mXXsxLDR9KTopezAsMn0oW1xcZGEtZl17MSw0fSkpfCgoKFtcXGRhLWZdezEsNH0pOil7M306KChbXFxkYS1mXXsxLDR9KTopezAsM30oW1xcZGEtZl17MSw0fSkpfCgoKFtcXGRhLWZdezEsNH0pOil7Mn06KChbXFxkYS1mXXsxLDR9KTopezAsNH0oW1xcZGEtZl17MSw0fSkpfCgoKFtcXGRhLWZdezEsNH0pOil7MX06KChbXFxkYS1mXXsxLDR9KTopezAsNX0oW1xcZGEtZl17MSw0fSkpfCg6OigoW1xcZGEtZl17MSw0fSk6KXswLDZ9KFtcXGRhLWZdezEsNH0pKXwoOjooW1xcZGEtZl17MSw0fSk/KSl8KCgoKFtcXGRhLWZdezEsNH0pOil7Nn0oKCgxP1sxLTldP1xcZCl8KDEwXFxkKXwoMlswLTRdXFxkKXwoMjVbMC01XSkpXFwuKXszfSgoMT9bMS05XT9cXGQpfCgxMFxcZCl8KDJbMC00XVxcZCl8KDI1WzAtNV0pKSl8KCgoW1xcZGEtZl17MSw0fSk6KXs1fTooKCgxP1sxLTldP1xcZCl8KDEwXFxkKXwoMlswLTRdXFxkKXwoMjVbMC01XSkpXFwuKXszfSgoMT9bMS05XT9cXGQpfCgxMFxcZCl8KDJbMC00XVxcZCl8KDI1WzAtNV0pKSl8KCgoW1xcZGEtZl17MSw0fSk6KXs0fTooKFtcXGRhLWZdezEsNH0pOik/KCgoMT9bMS05XT9cXGQpfCgxMFxcZCl8KDJbMC00XVxcZCl8KDI1WzAtNV0pKVxcLil7M30oKDE/WzEtOV0/XFxkKXwoMTBcXGQpfCgyWzAtNF1cXGQpfCgyNVswLTVdKSkpfCgoKFtcXGRhLWZdezEsNH0pOil7M306KChbXFxkYS1mXXsxLDR9KTopezAsMn0oKCgxP1sxLTldP1xcZCl8KDEwXFxkKXwoMlswLTRdXFxkKXwoMjVbMC01XSkpXFwuKXszfSgoMT9bMS05XT9cXGQpfCgxMFxcZCl8KDJbMC00XVxcZCl8KDI1WzAtNV0pKSl8KCgoW1xcZGEtZl17MSw0fSk6KXsyfTooKFtcXGRhLWZdezEsNH0pOil7MCwzfSgoKDE/WzEtOV0/XFxkKXwoMTBcXGQpfCgyWzAtNF1cXGQpfCgyNVswLTVdKSlcXC4pezN9KCgxP1sxLTldP1xcZCl8KDEwXFxkKXwoMlswLTRdXFxkKXwoMjVbMC01XSkpKXwoKFtcXGRhLWZdezEsNH0pOjooKFtcXGRhLWZdezEsNH0pOil7MCw0fSgoKDE/WzEtOV0/XFxkKXwoMTBcXGQpfCgyWzAtNF1cXGQpfCgyNVswLTVdKSlcXC4pezN9KCgxP1sxLTldP1xcZCl8KDEwXFxkKXwoMlswLTRdXFxkKXwoMjVbMC01XSkpKXwoOjooKFtcXGRhLWZdezEsNH0pOil7MCw1fSgoKDE/WzEtOV0/XFxkKXwoMTBcXGQpfCgyWzAtNF1cXGQpfCgyNVswLTVdKSlcXC4pezN9KCgxP1sxLTldP1xcZCl8KDEwXFxkKXwoMlswLTRdXFxkKXwoMjVbMC01XSkpKSkpJC9pO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgaXB2NiA9IHtcclxuICAgICAgICBpcHZDaGVja1JlZzogL1teYS1mXFxkXS9pZyxcclxuICAgICAgICBsYWJlbDogJzo6Ojo6OjonLFxyXG4gICAgICAgIHBsYWNlUmVnOiAvXFxzL2csXHJcbiAgICAgICAgc2VwYXJhdG9yOiAnOicsXHJcbiAgICAgICAgaXBWYWx1ZUFycmF5OiBuZXcgQXJyYXkoOCkuZmlsbCgnJylcclxuICAgIH07XHJcbiAgICBwcml2YXRlIHN0YXRpYyBnZXRHbGJJbmZvKHZlcjogbnVtYmVyKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdmVyID09PSA0ID8gVGlJcENvbXBvbmVudC5pcHY0IDogVGlJcENvbXBvbmVudC5pcHY2O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogaXDniYjmnKzlj7fvvIzlj6/ku6XotYvlgLw05oiWNlxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSB2ZXJzaW9uOiBudW1iZXIgPSA0O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKi9cclxuICAgIEBWaWV3Q2hpbGRyZW4oJ2lwSW5wdXQnKSBpcElucHV0czogUXVlcnlMaXN0PEVsZW1lbnRSZWY+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKiDlrZjmlL4gaXAg57uE5Lu25ZCE5LiqaW5wdXTmoYblgLznmoTmlbDnu4RcclxuICAgICAqL1xyXG4gICAgcHVibGljIGlwc1ZhbHVlczogQXJyYXk8c3RyaW5nPjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaG9zdFJlZjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHJlbmRlcmVyMjogUmVuZGVyZXIyKSB7XHJcbiAgICAgICAgc3VwZXIoaG9zdFJlZiwgcmVuZGVyZXIyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcGFzdGVIYW5kbGUgPSAoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8g6Zi75q2i6buY6K6k55qEaW5wdXTljp/nlJ/nmoTnspjotLTkuovku7bvvIjmiornspjotLTmnb/nmoTlgLznspjotLTliLBpbnB1dOahhu+8iVxyXG4gICAgICAgIGxldCBwYXN0ZVZhbHVlOiBzdHJpbmcgPSAnJztcclxuICAgICAgICBpZiAod2luZG93WydjbGlwYm9hcmREYXRhJ10gJiYgd2luZG93WydjbGlwYm9hcmREYXRhJ10uZ2V0RGF0YSkgeyAvLyBmb3IgSUVcclxuICAgICAgICAgICAgcGFzdGVWYWx1ZSA9IHdpbmRvd1snY2xpcGJvYXJkRGF0YSddLmdldERhdGEoJ1RleHQnKTtcclxuICAgICAgICB9IGVsc2UgeyAvLyBGb3Igb3RoZXIgYnJvd3NlclxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcGFzdGVWYWx1ZSA9IGV2ZW50LmNsaXBib2FyZERhdGEuZ2V0RGF0YSgnVGV4dCcpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB1bm1hc2twYXN0ZTogc3RyaW5nID0gdGhpcy51bm1hc2sodGhpcy52ZXJzaW9uLCBwYXN0ZVZhbHVlKTtcclxuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkSVAodGhpcy52ZXJzaW9uLCB1bm1hc2twYXN0ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZSh1bm1hc2twYXN0ZSk7IC8vIOeymOi0tOS5i+WQjuabtOaWsOWAvFxyXG4gICAgICAgICAgICB0aGlzLmlwc1ZhbHVlcyA9IHRoaXMuc3BsaXRUb0lQQXJyYXkodGhpcy52ZXJzaW9uLCB0aGlzLm1vZGVsKTsgLy8g5YaF6YOo55qE5pON5L2c5omL5Yqo5pu05paw5pWw57uEXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBibHVySGFuZGxlID0gKGV2ZW50OiBhbnkpID0+IHtcclxuICAgICAgICBjb25zdCBpcFZhbHVlOiBzdHJpbmcgPSB0aGlzLmdlbmVyYXRlSVBWYWx1ZSgwKTtcclxuICAgICAgICBpZiAoaXBWYWx1ZSA9PT0gJycpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZShpcFZhbHVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBmaXhlZFZhdWxlOiBzdHJpbmcgPSB0aGlzLmJsdXJGaXhlZCh0aGlzLnZlcnNpb24sIGlwVmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKHRoaXMubWFzayh0aGlzLnZlcnNpb24sIGZpeGVkVmF1bGUpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGJsdXJGaXhlZCh2ZXI6IG51bWJlciwgaXA6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgYXJyOiBBcnJheTxzdHJpbmc+ID0gdGhpcy5zcGxpdFRvSVBBcnJheSh2ZXIsIGlwKTtcclxuICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChhcnJbaV0gPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBhcnJbaV0gPSAnMCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmpvaW5Ub0lQVmFsdWUodmVyLCBhcnIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOe7hOS7tuWjsOaYjuWRqOacn+mSqeWtkC0tc3RhcnRcclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdCgpOiB2b2lkIHtcclxuICAgICAgICAvLyDpu5jorqTmmK9JUHY0XHJcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gcGFyc2VJbnQoU3RyaW5nKHRoaXMudmVyc2lvbiksIDEwKSA9PT0gVGlJcENvbXBvbmVudC5pcHY2VmVyc2lvbiA/XHJcbiAgICAgICAgVGlJcENvbXBvbmVudC5pcHY2VmVyc2lvbiA6IFRpSXBDb21wb25lbnQuaXB2NFZlcnNpb247XHJcbiAgICAgICAgLy8g5Yid5aeL5YyWaXBWYWx1ZUFycmF5ICDotYvlgLzmlrDnmoTmlbDnu4RcclxuICAgICAgICB0aGlzLmlwc1ZhbHVlcyA9IFRpSXBDb21wb25lbnQuZ2V0R2xiSW5mbyh0aGlzLnZlcnNpb24pLmlwVmFsdWVBcnJheS5jb25jYXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIubmdBZnRlclZpZXdJbml0KCk7XHJcbiAgICAgICAgLy8gIOWkhOeQhiDogZrnhKYg5bm25L2/56ys5LiA5q61aXDojrfnhKYo5pS+5Zyo6L+Z5Liq6ZKp5a2Q55qE5Y6f5Zug77ya5Zyob25pbml05Lit5ou/5LiN5YiwIFF1ZXJ5TGlzdCDov5Tlm57nmoTnu5Pmnpzpm4YpXHJcbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBbXTtcclxuICAgICAgICB0aGlzLmlwSW5wdXRzLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgZWxlbWVudHMucHVzaChpdGVtLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIOaOqOiNkOWcqG9uSW5pdCgp5pe26LCD55Soc2V0Rm9jdXNhYmxlRWxlbXMoKSwg5L2G5pivbmdGb3IvbmdJZuS4reeahOWFg+e0oOWcqG5nQWZ0ZXJWaWV3SW5pdCgp5omN6IO96I635Y+W5YiwXHJcbiAgICAgICAgdGhpcy5zZXRGb2N1c2FibGVFbGVtcyhlbGVtZW50cyk7XHJcbiAgICB9XHJcbiAgICAvLyDnu4Tku7blo7DmmI7lkajmnJ/pkqnlrZAtLWVuZFxyXG5cclxuICAgIC8vIOWunueOsENvbnRyb2xWYWx1ZUFjY2Vzc29y5o6l5Y+jLS1zdGFydFxyXG4gICAgLyoqXHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKi9cclxuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xyXG5cclxuICAgICAgICBpZiAodmFsdWUgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHN1cGVyLndyaXRlVmFsdWUodmFsdWUpO1xyXG4gICAgICAgICAgICAvLyDlr7nnqbrlgLzlgZrnibnmrorlpITnkIYs5Li656m65pe25riF56m6SVDmoYZcclxuICAgICAgICAgICAgdGhpcy5pcHNWYWx1ZXMgPSBUaUlwQ29tcG9uZW50LmdldEdsYkluZm8odGhpcy52ZXJzaW9uKS5pcFZhbHVlQXJyYXkuY29uY2F0KCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gdGhpcy5qb2luVG9JUFZhbHVlKHRoaXMudmVyc2lvbiwgdGhpcy5pcHNWYWx1ZXMpKSB7XHJcbiAgICAgICAgICAgIC8vIOWSjOW9k+WJjUlQ5qGG55qE5YC855u45ZCM5LiN5aSE55CGXHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzVmFsaWRJUCh0aGlzLnZlcnNpb24sIHZhbHVlKSB8fCB0aGlzLmlzSW5wdXR0aW5nKHRoaXMudmVyc2lvbiwgdmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHN1cGVyLndyaXRlVmFsdWUodGhpcy5tYXNrKHRoaXMudmVyc2lvbiwgdmFsdWUpKTtcclxuICAgICAgICAgICAgdGhpcy5pcHNWYWx1ZXMgPSB0aGlzLnNwbGl0VG9JUEFycmF5KHRoaXMudmVyc2lvbiwgdGhpcy5tb2RlbCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8g6Z2e5rOV5LiN5aSE55CGIOaBouWkjeS5i+WJjeWAvFxyXG4gICAgICAgICAgICBzdXBlci53cml0ZVZhbHVlKHRoaXMuam9pblRvSVBWYWx1ZSh0aGlzLnZlcnNpb24sIHRoaXMuaXBzVmFsdWVzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8g5a6e546wQ29udHJvbFZhbHVlQWNjZXNzb3LmjqXlj6MtLWVuZFxyXG5cclxuICAgIC8vIOe7hOS7tuS6pOS6kuaWueazlembhuWQiC0tc3RhcnRcclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMga2V5ZG93bihlOiBhbnksIGluZGV4OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBpcElucHV0cyA9IHRoaXMuaXBJbnB1dHM7XHJcbiAgICAgICAgY29uc3Qga2V5Q29kZSA9IGUua2V5Q29kZTtcclxuICAgICAgICB0aGlzLmtleWRvd25IYW5kbGUoZSwgaXBJbnB1dHNbJ19yZXN1bHRzJ11baW5kZXhdLCBpbmRleCwgdGhpcy52ZXJzaW9uKTtcclxuICAgICAgICAvLyDmjInkuIvplK7kuLrlt6bmiJblj7PplK7ml7bvvIzkuI3lgZrph43mlrDotYvlgLzvvIzpgb/lhY1JRea1j+iniOWZqOS4i+mHjeaWsOi1i+WAvOS5i+WQjuWFieagh+S9jee9ruS4jeWHhuehrumXrumimFxyXG4gICAgICAgIGlmIChrZXlDb2RlID09PSBUaUtleW1hcC5LRVlfQVJST1dfTEVGVCB8fCBrZXlDb2RlID09PSBUaUtleW1hcC5LRVlfQVJST1dfUklHSFQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5wdXQoZTogYW55LCBpbmRleDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgLy8g6Ziy5q2i5Lit5paH6L6T5YWl5ZKM6Z2e5rOV5a2X56ym55qE6L6T5YWlXHJcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUlQVmFsdWUoaW5kZXgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjaGFuZ2UoaW5kZXg6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGlwVmFsdWVzOiBzdHJpbmcgPSB0aGlzLmdlbmVyYXRlSVBWYWx1ZShpbmRleCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVWYWx1ZShpcFZhbHVlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g57uE5Lu25Lqk5LqS5pa55rOV6ZuG5ZCILS1lbmRcclxuXHJcbiAgICAvLyDlhoXpg6jlhazlhbHmlrnms5Xpm4blkIgtLXN0YXJ0XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiAg5bCGIGlwIOaVsOe7hOaLvOaOpeaIkGlw5YC8XHJcbiAgICAgKiBAcGFyYW06IHZlciBpcOeJiOacrFxyXG4gICAgICogQHBhcmFtOiBhcnIgaXDlrZfnrKbkuLLkuK3mlbDlrZfnu4TmiJDnmoTmlbDnu4RcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgam9pblRvSVBWYWx1ZSh2ZXI6IG51bWJlciwgYXJyOiBBcnJheTxzdHJpbmc+KTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gYXJyLmpvaW4oVGlJcENvbXBvbmVudC5nZXRHbGJJbmZvKHZlcikuc2VwYXJhdG9yKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIOWwhiBpcCDlgLzliIblibLmiJBpcOaVsOe7hFxyXG4gICAgICogQHBhcmFtOiB2ZXIgaXDniYjmnKxcclxuICAgICAqIEBwYXJhbTogaXAgaXDlrZfnrKbkuLJcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzcGxpdFRvSVBBcnJheSh2ZXI6IG51bWJlciwgaXA6IHN0cmluZyk6IEFycmF5PHN0cmluZz4ge1xyXG4gICAgICAgIGNvbnN0IHJlczogQXJyYXk8c3RyaW5nPiA9IGlwID8gaXAuc3BsaXQoVGlJcENvbXBvbmVudC5nZXRHbGJJbmZvKHZlcikuc2VwYXJhdG9yKSA6IFtdO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBpc0lucHV0dGluZyh2ZXI6IG51bWJlciwgdmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGFycjogQXJyYXk8c3RyaW5nPiA9IHRoaXMuc3BsaXRUb0lQQXJyYXkodmVyLCB2YWx1ZSk7XHJcblxyXG4gICAgICAgIHJldHVybiBhcnIuaW5kZXhPZignJykgPj0gMDtcclxuICAgIH1cclxuICAgIC8vIOWIpOaWreW9k+WJjWlw5YC85piv5ZCm5ZCI5rOVXHJcbiAgICBwcml2YXRlIGlzVmFsaWRJUCh2ZXI6IG51bWJlciwgaXA6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChpcCA9PT0gbnVsbCB8fCBpcCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgcmd4ID0gKHZlciA9PT0gVGlJcENvbXBvbmVudC5pcHY0VmVyc2lvbikgPyBUaUlwQ29tcG9uZW50LmlwdjRSZWcgOiBUaUlwQ29tcG9uZW50LmlwdjZSZWc7XHJcbiAgICAgICAgcmV0dXJuIHJneC50ZXN0KGlwKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIElQ6ZyA6KaB5Y676Zmk5YmN6Z2i55qEMO+8jOS+i+Wmgu+8mizigJwwMTIuMTIuMjMuMDAy4oCd57uP6L+H6K+l5Ye95pWw5aSE55CG5ZCO5Y+Y5Li677ya4oCcMTIuMTIuMjMuMuKAne+8m0lQdjbmlK/mjIHnvKnnlaXmoLzlvI9cclxuICAgICAqIEBwYXJhbTogdmVyIGlw54mI5pysXHJcbiAgICAgKiBAcGFyYW06IGlwIGlw5a2X56ym5LiyXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG1hc2sodmVyOiBudW1iZXIsIGlwOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGlwSW5mbyA9IFRpSXBDb21wb25lbnQuZ2V0R2xiSW5mbyh2ZXIpO1xyXG4gICAgICAgIGNvbnN0IHBhcnQgPSBpcC5zcGxpdChpcEluZm8uc2VwYXJhdG9yKTtcclxuICAgICAgICBjb25zdCBwYXJ0TGVuZ3RoID0gcGFydC5sZW5ndGg7XHJcbiAgICAgICAgaWYgKHZlciA9PT0gNCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgcGFydExlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFydFtpXSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcGFydE51bWJlciA9IHBhcnNlSW50KHBhcnRbaV0sIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBwYXJzZUludChwYXJ0W2ldLCAxMCkgLz0gMTtcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0TnVtYmVyIC89IDE7IC8vIOWwhnBhcnRbal3ovazljJbkuLrmlbTmlbDvvIznm67nmoTmmK/mtojpmaTliY3pnaLnmoQwXHJcbiAgICAgICAgICAgICAgICAgICAgcGFydFtpXSA9IFN0cmluZyhwYXJ0TnVtYmVyKTsgLy8g5YaN6L2s5YyW5Li65a2X56ym5LiyXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBJUHY25pSv5oyB57yp55Wl5qC85byP77yM5Y2z5Lu75L2V55Sx5YWoMOe7hOaIkOeahDHkuKrmiJblpJrkuKoxNuS9jeauteeahOWNleS4qui/nue7reeahOWtl+espuS4siDpg73lj6/ku6XnlKjkuIDkuKrlj4zlhpLlj7figJw6OuKAne+8jOS4lOKAnDo64oCd5Y+q5Ye6546w5LiA5qyh77yb5L6L5aaC77yaMjAwMTpkMDI6OjE0Ojk1XHJcbiAgICAgICAgICAgIC8vIOeUqOKAmDDigJnooaXpvZDnvKnnlaXmoLzlvI/nvLrlsJHkuKrmlbBcclxuICAgICAgICAgICAgd2hpbGUgKHBhcnQubGVuZ3RoIDwgOCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gcGFydC5pbmRleE9mKCcnKTtcclxuICAgICAgICAgICAgICAgIHBhcnQuc3BsaWNlKGluZGV4LCAwLCAnMCcpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHBhcnQuZm9yRWFjaCgocGFydEl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyAg5p+l5om+5piv5ZCm5pyJMS055ZKM5a2X5q+N77yM5aaC5p6c5rKh5pyJ77yM5pu/5o2i5Li6MO+8jOWmguaenOacie+8jOWOu+mZpOWJjemdoueahDBcclxuICAgICAgICAgICAgICAgIGlmIChwYXJ0SXRlbS5tYXRjaCgvWzEtOWEtZl0vaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0W2luZGV4XSA9IHBhcnRJdGVtLnJlcGxhY2UoL14wezEsM30vaSwgJycpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnRJdGVtICE9PSAnMCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0W2luZGV4XSA9ICcwJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcGFydC5qb2luKGlwSW5mby5zZXBhcmF0b3IpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24g5Y675o6J56m65qC85ZCO55qESVDlnLDlnYDvvJvkvovlpoLigJwgIDEyLjEyIC4yMy4yICDigJ3ov5vov4for6Xlh73mlbDlpITnkIblkI7ov5Tlm57vvJrigJwxMi4xMi4yMy4y4oCdXHJcbiAgICAgKiBAcGFyYW06IHZlciBpcOeJiOacrFxyXG4gICAgICogQHBhcmFtOiBpcCBpcOWtl+espuS4slxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHVubWFzayh2ZXI6IG51bWJlciwgaXA6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgaVBJbmZvID0gVGlJcENvbXBvbmVudC5nZXRHbGJJbmZvKHZlcik7XHJcblxyXG4gICAgICAgIHJldHVybiBpcC5yZXBsYWNlKGlQSW5mby5wbGFjZVJlZywgJycpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uICDojrflj5blvZPliY1pcOautei+k+WFpeeahOWAvOW5tui/m+ihjOWIpOaWre+8jOWQiOazleaXtuabtOaWsOWIsOW9k+WJjWlw5q616L6T5YWl5qGG5YaF77yM5bm25ou85o6l6L+U5Zue5pW05L2TaXDlgLxcclxuICAgICAqIEBwYXJhbTogaW5kZXgg5b2T5YmN6L6T5YWl5qGG55qE5LiL5qCHXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2VuZXJhdGVJUFZhbHVlKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGlwSW5mbyA9IFRpSXBDb21wb25lbnQuZ2V0R2xiSW5mbyh0aGlzLnZlcnNpb24pO1xyXG4gICAgICAgIGNvbnN0IGNlbGxBcnJheSA9IHRoaXMuaXBJbnB1dHM7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gY2VsbEFycmF5WydfcmVzdWx0cyddW2luZGV4XS5uYXRpdmVFbGVtZW50LnZhbHVlO1xyXG4gICAgICAgIGlmIChpcEluZm8uaXB2Q2hlY2tSZWcudGVzdCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKGlwSW5mby5pcHZDaGVja1JlZywgJycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaXB2NOS4i++8jOW9k+WJjei+k+WFpeahhuWAvOWkp+S6jjI1NeaXtu+8jOW8uuWItui9rOaNouaIkDI1NVxyXG4gICAgICAgIGlmICh0aGlzLnZlcnNpb24gPT09IFRpSXBDb21wb25lbnQuaXB2NFZlcnNpb24gJiYgdmFsdWUgPiAyNTUpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSAyNTU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCB0aGlzLmlwc1ZhbHVlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoaSA9PT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXBzVmFsdWVzW2ldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBjZWxsQXJyYXlbJ19yZXN1bHRzJ11baW5kZXhdLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgaXBWYWx1ZXM7XHJcbiAgICAgICAgaXBWYWx1ZXMgPSB0aGlzLmlwc1ZhbHVlcy5qb2luKGlwSW5mby5zZXBhcmF0b3IpO1xyXG4gICAgICAgIGlmIChpcFZhbHVlcyA9PT0gaXBJbmZvLmxhYmVsKSB7XHJcbiAgICAgICAgICAgIGlwVmFsdWVzID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpcFZhbHVlcztcclxuICAgIH1cclxuICAgIC8vIOabtOaWsHZhbHVl5YC8IC8vVE9ETzogVGlueTPogIPomZHljrvpmaTov5nkuKrlh73mlbDvvIznlKh3cml0ZVZhbHVl5Luj5pu/XHJcbiAgICBwcml2YXRlIHVwZGF0ZVZhbHVlKG5ld1ZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBpZiAobmV3VmFsdWUgPT09IHRoaXMubW9kZWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDorrDlvZVpcOeahOWAvOWcqHZhbHVl5LitLOaWueS+v+eUqOaIt+iOt+WPllxyXG4gICAgICAgIHRoaXMubW9kZWwgPSBuZXdWYWx1ZTtcclxuICAgICAgICB0aGlzLndyaXRlVmFsdWUobmV3VmFsdWUpO1xyXG4gICAgfVxyXG4gICAgLy8ga2V5ZG93buS6i+S7tuinpuWPkeaXtu+8jOWIpOaWreW5tuiuvue9rue7hOS7tuWFieagh+S9jee9rlxyXG4gICAgcHJpdmF0ZSBrZXlkb3duSGFuZGxlKGU6IGFueSwgdGhpc0lucHV0OiBFbGVtZW50UmVmLCBpbmRleDogbnVtYmVyLCB2ZXI6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGlwSW5wdXRzTGVuZ3RoID0gdGhpcy5pcElucHV0cy5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgbmV4dENlbGwgPSBpbmRleCA8IGlwSW5wdXRzTGVuZ3RoIC0gMSA/XHJcbiAgICAgICAgICAgIHRoaXMuaXBJbnB1dHNbJ19yZXN1bHRzJ11baW5kZXggKyAxXSA6IHVuZGVmaW5lZDtcclxuICAgICAgICBjb25zdCBwcmV2Q2VsbCA9IGluZGV4ID4gMCA/IHRoaXMuaXBJbnB1dHNbJ19yZXN1bHRzJ11baW5kZXggLSAxXSA6IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgY29uc3Qga2V5Q29kZSA9IGUua2V5Q29kZTtcclxuICAgICAgICAvLyDplK7nm5jnoIExMTDku6PooaguIDE5MOS7o+ihqCA+Li0tLeW9k+mUruebmOeggeS4uui/meS4pOenjeaXtizot7Poh7PkuIvkuIDovpPlhaXmoYbkuK0s5bm26YCJ5Lit6K+l6L6T5YWl5qGG5Lit55qE5YC8XHJcbiAgICAgICAgaWYgKGtleUNvZGUgPT09IFRpS2V5bWFwLktFWV9OVU1QQURfREVDSU1BTCB8fCBrZXlDb2RlID09PSBUaUtleW1hcC5LRVlfUEVSSU9EKSB7XHJcbiAgICAgICAgICAgIGlmICghVXRpbC5pc1VuZGVmaW5lZChuZXh0Q2VsbCkpIHsgIC8vIOmdnuacgOWQjuS4gOS4qui+k+WFpeahhuaXtu+8jOi3s+iHs+S4i+S4gOi+k+WFpeahhlxyXG4gICAgICAgICAgICAgICAgbmV4dENlbGwubmF0aXZlRWxlbWVudC5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgbmV4dENlbGwubmF0aXZlRWxlbWVudC5zZWxlY3QoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIOS4jeiuuuaYr+WQpuS4uuacgOWQjuS4gOS4qui+k+WFpeahhizpmLLmraLpu5jorqTkuovku7blj5HnlJ8s5ZCm5YiZ6L6T5YWl5qGG5Lit5Lya5Ye6546wIC4uLlxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOWFieagh+WQjuenu+WIsOS4i+S4gOautWlwXHJcbiAgICAgICAgaWYgKHRoaXMuaXNNb3ZlVG9OZXh0KGUsIHRoaXNJbnB1dCwgbmV4dENlbGwsIHZlcikpIHtcclxuICAgICAgICAgICAgbmV4dENlbGwubmF0aXZlRWxlbWVudC5mb2N1cygpO1xyXG4gICAgICAgICAgICB0aGlzLmNhcmV0KG5leHRDZWxsLCAwKTsgLy8g6K6+572u5YWJ5qCH5L2N572uXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDlhYnmoIfliY3np7vliLDkuIrkuIDmrrVpcFxyXG4gICAgICAgIGlmICh0aGlzLmlzTW92ZVRvUHJldm91cyhrZXlDb2RlLCB0aGlzSW5wdXQsIHByZXZDZWxsKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNhcmV0KHByZXZDZWxsLCBwcmV2Q2VsbC5uYXRpdmVFbGVtZW50LnZhbHVlLmxlbmd0aCk7IC8vIOiuvue9ruWFieagh+S9jee9rlxyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIOmYsuatoum7mOiupOS6i+S7tuWPkeeUnyzlkKbliJnovpPlhaXmoYbkuK3nmoTlm57pgIDlhYnmoIfkvY3nva7kvJrmnInpl67pophcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgLy8g5Yik5pat5b2T5YmN5piv5ZCm6ZyA6KaB5bCG5YWJ5qCH56e76Iez5ZCO5LiA5q61aXBcclxuICAgIHByaXZhdGUgaXNNb3ZlVG9OZXh0KGU6IGFueSwgdGhpc0lucHV0OiBFbGVtZW50UmVmLCBuZXh0Q2VsbDogRWxlbWVudFJlZiwgdmVyOiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICAvLyDlpoLmnpzkuIvkuIDmrrVpcOS4jeWtmOWcqOebtOaOpei/lOWbnmZhbHNlXHJcbiAgICAgICAgaWYgKFV0aWwuaXNVbmRlZmluZWQobmV4dENlbGwpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5aaC5p6c6L6T5YWl5Li65ZCI5rOV5pWw5a2XLOi+k+WFpeahhuS4reW3suaciTPkuKrlgLws5YWJ5qCH5L2N5LqO6L6T5YWl5qGG5pyr5bC+LOW5tuS4lOWtmOWcqOS4i+S4gOi+k+WFpeahhiwg5YiZ6Lez6Iez5LiL5LiA6L6T5YWl5qGGXHJcbiAgICAgICAgbGV0IGlzRnVsbFRvTmV4dDtcclxuICAgICAgICBpZiAodmVyICE9PSBUaUlwQ29tcG9uZW50LmlwdjZWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgIGlzRnVsbFRvTmV4dCA9IHRoaXMuY2hlY2tJcHY0TW92ZVRvTmV4dCh0aGlzSW5wdXQsIGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlzRnVsbFRvTmV4dCA9IHRoaXMuY2hlY2tJcHY2TW92ZVRvTmV4dCh0aGlzSW5wdXQsIGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDlvZPkuLrlkJHlj7PplK7ml7bihpIs5LiU5YWJ5qCH5L2N572u5Zyo6K+l6L6T5YWl5qGG5pyr5bC+44CC5YiZ55u05o6l6Lez5Yiw5LiL5LiA6L6T5YWl5qGG5LitXHJcbiAgICAgICAgY29uc3Qga2V5Q29kZSA9IGUua2V5Q29kZTtcclxuICAgICAgICBjb25zdCBpc1JpZ2h0VG9OZXh0ID0ga2V5Q29kZSA9PT0gVGlLZXltYXAuS0VZX0FSUk9XX1JJR0hUXHJcbiAgICAgICAgICAgICYmIHRoaXMuY2FyZXQodGhpc0lucHV0KVswXSA9PT0gdGhpc0lucHV0Lm5hdGl2ZUVsZW1lbnQudmFsdWUubGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiBpc0Z1bGxUb05leHQgfHwgaXNSaWdodFRvTmV4dDtcclxuICAgIH1cclxuICAgIC8vIOWIpOaWreW9k+WJjeaYr+WQpumcgOimgeWwhuWFieagh+enu+iHs+WJjeS4gOautWlwXHJcbiAgICBwcml2YXRlIGlzTW92ZVRvUHJldm91cyhrZXlDb2RlOiBudW1iZXIsIHRoaXNJbnB1dDogRWxlbWVudFJlZiwgcHJldkNlbGw6IEVsZW1lbnRSZWYpOiBib29sZWFuIHtcclxuICAgICAgICAvLyAxLuW9k+S4uuWQkeW3pumUrigzNyks5LiU5YWJ5qCH5L2N572u5L2N5LqO6L6T5YWl5qGG6LW35aeL5L2N572u5pe2LOWImei3s+iHs+WJjeS4gOi+k+WFpeahhuS4rTtcclxuICAgICAgICAvLyAyLuW9k+S4umJhY2tzcGFjZemUrizkuJTlt7Llm57liKDoh7PovpPlhaXmoYbotbflp4vkvY3nva4g6Lez6Iez5YmN5bey6L6T5YWl5qGG5LitXHJcbiAgICAgICAgLy8gMy7ovpPlhaXmoYblpITkuo7pgInkuK3nirbmgIHml7bvvIzmjIliYWNrc3BhY2XplK7kuI3ot7PliLDliY3kuIDovpPlhaXmoYbkuK1cclxuICAgICAgICByZXR1cm4gIVV0aWwuaXNVbmRlZmluZWQocHJldkNlbGwpICYmXHJcbiAgICAgICAgICAgICgoa2V5Q29kZSA9PT0gVGlLZXltYXAuS0VZX0FSUk9XX0xFRlQgJiYgdGhpcy5jYXJldCh0aGlzSW5wdXQpWzBdID09PSAwKSAgLy8g5oyJ5bem6ZSuXHJcbiAgICAgICAgICAgICAgICB8fCAoa2V5Q29kZSA9PT0gVGlLZXltYXAuS0VZX0JBQ0tTUEFDRSAmJiB0aGlzLmNhcmV0KHRoaXNJbnB1dClbMF0gPT09IDApIC8vIOaMieWQjumAgOmUruW5tuS4lOWIoOmZpOWujFxyXG4gICAgICAgICAgICAgICAgJiYgKHRoaXMuY2FyZXQodGhpc0lucHV0KVswXSA9PT0gdGhpcy5jYXJldCh0aGlzSW5wdXQpWzFdKSk7IC8vIOi+k+WFpeahhuWkhOS6jumAieS4reeKtuaAgeaMieWQjumAgOmUruS4jei3s+WIsOWJjeS4gOS4qui+k+WFpeahhlxyXG4gICAgfVxyXG5cclxuICAgIC8vIOWIpOaWreW9k+WJjeautWlwdjTovpPlhaXmoYbmmK/lkKblt7Lmu6EzLOacq+err+aYr+WQiOazleWtl+espu+8jOS4lOWFieagh+S9jee9ruWcqOatpOautWlw5pyA5ZCOXHJcbiAgICBwcml2YXRlIGNoZWNrSXB2NE1vdmVUb05leHQodGhpc0lucHV0OiBFbGVtZW50UmVmLCBlOiBhbnkpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKHRoaXNJbnB1dC5uYXRpdmVFbGVtZW50LnZhbHVlLmxlbmd0aCA9PT0gMykgJiYgKHRoaXMuaXNOdW1lcmljKGUpXHJcbiAgICAgICAgICAgICYmICh0aGlzLmNhcmV0KHRoaXNJbnB1dClbMF0gPT09IDMpKTtcclxuICAgIH1cclxuICAgIC8vIOWIpOaWreW9k+WJjeautWlwdjbovpPlhaXmoYbmmK/lkKblt7Lmu6E05pyq5ZCI5rOV5a2X56ym77yM5LiU5YWJ5qCH5L2N572u5Zyo5q2k5q61aXDmnIDlkI5cclxuICAgIHByaXZhdGUgY2hlY2tJcHY2TW92ZVRvTmV4dCh0aGlzSW5wdXQ6IEVsZW1lbnRSZWYsIGU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAodGhpc0lucHV0Lm5hdGl2ZUVsZW1lbnQudmFsdWUubGVuZ3RoID09PSA0KSAmJiAodGhpcy5pc0hleGFEZWNpbWFsKGUpXHJcbiAgICAgICAgICAgICYmICh0aGlzLmNhcmV0KHRoaXNJbnB1dClbMF0gPT09IDQpKTtcclxuICAgIH1cclxuICAgIC8vIOWIpOaWrei+k+WFpeaYr+WQpuS4umlwdjTlkIjms5XlrZfnrKZcclxuICAgIHByaXZhdGUgaXNOdW1lcmljKGU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChlLnNoaWZ0S2V5IHx8IGUuY3RybEtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvZGUgPSBlLmtleUNvZGU7XHJcbiAgICAgICAgcmV0dXJuIChjb2RlID49IFRpS2V5bWFwLktFWV8wICYmIGNvZGUgPD0gVGlLZXltYXAuS0VZXzkpIHx8XHJcbiAgICAgICAgICAgIChjb2RlID49IFRpS2V5bWFwLktFWV9OVU1QQURfMCAmJiBjb2RlIDw9IFRpS2V5bWFwLktFWV9OVU1QQURfOSk7XHJcbiAgICB9XHJcbiAgICAvLyDliKTmlq3ovpPlhaXmmK/lkKbkuLppcHY25ZCI5rOV5a2X56ymXHJcbiAgICBwcml2YXRlIGlzSGV4YURlY2ltYWwoZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3Qga2V5Q29kZSA9IGUua2V5Q29kZTtcclxuICAgICAgICAvLyBjdHJs6ZSu57uE5ZCI5YW25a6D5oOF5Ya177yM6L6T5YWl5qGG5Lit5LiN5Lya6L6T5YWl5pyJ5pWI5a2X56ym77yM6L+U5ZueXHJcbiAgICAgICAgaWYgKGUuY3RybEtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOi+k+WFpeacieaViOWtl+espuaDheWGte+8mjHvvIlhfmYgMu+8ieacieaViOaVsOWtl1xyXG4gICAgICAgIGNvbnN0IGlzVmFsaWRJbnB1dCA9IChrZXlDb2RlID49IFRpS2V5bWFwLktFWV9BICYmIGtleUNvZGUgPD0gVGlLZXltYXAuS0VZX0YpXHJcbiAgICAgICAgICAgIHx8IChrZXlDb2RlID49IFRpS2V5bWFwLktFWV9OVU1QQURfMCAmJiBrZXlDb2RlIDw9IFRpS2V5bWFwLktFWV9OVU1QQURfOSlcclxuICAgICAgICAgICAgfHwgKGtleUNvZGUgPj0gVGlLZXltYXAuS0VZXzAgJiYga2V5Q29kZSA8PSBUaUtleW1hcC5LRVlfOSk7XHJcbiAgICAgICAgcmV0dXJuIGlzVmFsaWRJbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiAg6I635Y+W5oiW6K6+572u5YWJ5qCH5L2N572uXHJcbiAgICAgKiBAcGFyYW06IGVsZSDlhYnmoIfmiYDlnKhkb21cclxuICAgICAqIEBwYXJhbTogcyDlvIDlp4vkvY3nva5cclxuICAgICAqIEBwYXJhbTogZSDnu5PmnZ/kvY3nva5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjYXJldChlbGU6IEVsZW1lbnRSZWYsIHM/OiBudW1iZXIsIGU/OiBudW1iZXIpOiBhbnkge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGUubmF0aXZlRWxlbWVudDtcclxuICAgICAgICBjb25zdCBzZXRQb3NpdGlvbiA9IGZ1bmN0aW9uIChlbCwgc3RhcnQsIGVuZCkge1xyXG4gICAgICAgICAgICBpZiAoZWwuc2V0U2VsZWN0aW9uUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIGVsLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICBlbC5zZXRTZWxlY3Rpb25SYW5nZShzdGFydCwgZW5kKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChlbC5jcmVhdGVUZXh0UmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gZWwuY3JlYXRlVGV4dFJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIGVuZCk7XHJcbiAgICAgICAgICAgICAgICByYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIHN0YXJ0KTtcclxuICAgICAgICAgICAgICAgIHJhbmdlLnNlbGVjdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHMgIT0gbnVsbCAmJiBlICE9IG51bGwpIHsvLyBzZXR0aW5nIHJhbmdlXHJcbiAgICAgICAgICAgIHJldHVybiBzZXRQb3NpdGlvbihlbGVtZW50LCBzLCBlKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHMgIT0gbnVsbCkgey8vIHNldHRpbmcgcG9zaXRpb25cclxuICAgICAgICAgICAgcmV0dXJuIHNldFBvc2l0aW9uKGVsZW1lbnQsIHMsIHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZ2V0dGluZ1xyXG4gICAgICAgIGlmIChlbGVtZW50LmNyZWF0ZVRleHRSYW5nZSAmJiBkb2N1bWVudFsnc2VsZWN0aW9uJ10pIHtcclxuICAgICAgICAgICAgY29uc3QgciA9IGRvY3VtZW50WydzZWxlY3Rpb24nXS5jcmVhdGVSYW5nZSgpLmR1cGxpY2F0ZSgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZW5kID0gZWxlbWVudC52YWx1ZS5sYXN0SW5kZXhPZihyLnRleHQpICsgci50ZXh0Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIHIubW92ZUVuZCgnY2hhcmFjdGVyJywgZWxlbWVudC52YWx1ZS5sZW5ndGgpO1xyXG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IChyLnRleHQgPT09ICcnKSA/IGVsZW1lbnQudmFsdWUubGVuZ3RoIDogZWxlbWVudC52YWx1ZS5sYXN0SW5kZXhPZihyLnRleHQpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIFtzdGFydCwgZW5kXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBbZWxlbWVudC5zZWxlY3Rpb25TdGFydCwgZWxlbWVudC5zZWxlY3Rpb25FbmRdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKiBuZ0ZvcumBjeWOhueahCB0cmFja0J55Ye95pWw77yM6Ziy5q2i5pWw5o2u5pu05paw5a+86Ie05omA5pyJRE9N6YeN5paw5riy5p+TXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB0cmFja0J5Rm4oaW5kZXg6IGFueSwgaXRlbTogYW55KTogYW55IHtcclxuICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICB9XHJcbiAgICAvLyDlhoXpg6jlhazlhbHmlrnms5Xpm4blkIgtLWVuZFxyXG59XHJcbiJdfQ==