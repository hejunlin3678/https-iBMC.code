import { Component, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';
import { TiRenderer } from '../../services/renderer/TiRenderer';
/**
 * @ignore
 *
 * 10.0.3版本增加，暂时不对外开放
 *
 * 该指令可以实现图片放大镜功能，添加tiZoom后会创建放大区域选择器元素（div）和放大结果呈现元素（div）
 *
 * 通过设置放大结果的background-image、background-size和background-position来达到放大效果
 *
 * 10.1.0版本从指令调整为组件形式
 *
 * <example-url>../tiny3demo/#/zoom/zoom-all</example-url>
 */
export class TiZoomComponent {
    constructor(hostRef, renderer, tiRenderer) {
        this.renderer = renderer;
        this.tiRenderer = tiRenderer;
        // 选择遮罩的宽高，默认150px
        this.zoomSelectorLength = 150;
        // 放大展示的宽高，默认300px
        this.zoomViewerLength = 300;
        // 宿主元素的图片路径
        this.imgSrc = '';
        this.hostEle = hostRef.nativeElement;
    }
    ngOnInit() {
        // 设置父元素
        this.setParentEle();
        // 设置放大比例
        this.ratio = this.zoomViewerLength / this.zoomSelectorLength;
    }
    /**
     * @ignore
     * 图片加载成功事件处理
     */
    onHostLoad(event) {
        this.imgSrc = event.target.src;
    }
    /**
     * @ignore
     * 鼠标进入宿主元素，创建放大效果相关元素
     */
    onHostMouseEnter(event) {
        this.createZoomSelector();
        this.createZoomViewer();
        this.reStyleResults(event);
    }
    /**
     * @ignore
     * 鼠标离开宿主元素，移除放大效果相关元素
     */
    onHostMouseLeave(event) {
        // 当鼠标离开宿主元素并且不是进入选择遮罩时，移除选择遮罩和放大结果
        if (event.relatedTarget !== this.zoomSelectorEle) {
            this.removeZoomEle();
        }
    }
    /**
     * 设置父元素
     */
    setParentEle() {
        const parentEle = this.hostEle.parentElement;
        if (parentEle !== null && parentEle.clientWidth !== 0 && parentEle.clientHeight !== 0) {
            if (this.hostEle.offsetParent !== parentEle) {
                // 父元素必须能够定位
                this.renderer.setStyle(parentEle, 'position', 'relative');
            }
            this.parentEle = parentEle;
        }
        else {
            this.parentEle = document.body;
        }
    }
    /**
     * 创建选择遮罩，初始化样式，增加事件监听
     */
    createZoomSelector() {
        this.zoomSelectorEle = this.renderer.createElement('div');
        // 添加样式，tinyplus3的productpreview需要根据分辨率修改元素尺寸
        this.renderer.addClass(this.zoomSelectorEle, 'ti3-img-zoom-selector');
        this.tiRenderer.setStyles(this.zoomSelectorEle, {
            width: this.zoomSelectorLength + 'px',
            height: this.zoomSelectorLength + 'px'
        });
        // 鼠标在选择遮罩上移动时的事件
        this.selectorMouseMoveHandler = this.renderer.listen(this.zoomSelectorEle, 'mousemove', (event) => {
            this.reStyleResults(event);
        });
        // 鼠标离开选择遮罩的事件，销毁遮罩元素和放大结果呈现元素
        this.selectorMouseLeaveHandler = this.renderer.listen(this.zoomSelectorEle, 'mouseleave', (event) => {
            this.renderer.removeChild(this.parentEle, this.zoomSelectorEle);
            this.renderer.removeChild(document.body, this.zoomViewerEle);
            this.zoomSelectorEle = undefined;
            this.zoomViewerEle = undefined;
        });
        this.renderer.appendChild(this.parentEle, this.zoomSelectorEle);
    }
    /**
     * 创建放大结果呈现元素，初始化样式
     */
    createZoomViewer() {
        this.zoomViewerEle = this.renderer.createElement('div');
        const hostEleRect = this.hostEle.getBoundingClientRect();
        const parentEleRect = this.parentEle.getBoundingClientRect();
        // 放大结果元素相对于父元素进行定位
        // left = 父元素宽度 - 边框宽度 + 滚动距离
        let left = this.parentEle.offsetWidth - TiZoomComponent.ZOOM_VIEWER_BORDER_WIDTH + parentEleRect.left + window.pageXOffset;
        // top = 父元素到视口距离 + 滚动距离
        let top = parentEleRect.top + window.pageYOffset;
        // 当父元素为body时，调整为相对于宿主元素定位
        if (this.parentEle === document.body) {
            left = this.hostEle.offsetWidth - TiZoomComponent.ZOOM_VIEWER_BORDER_WIDTH + hostEleRect.left + window.pageXOffset;
            top = hostEleRect.top + window.pageYOffset;
        }
        // 添加样式，tinyplus3的productpreview需要根据分辨率修改元素尺寸
        this.renderer.addClass(this.zoomViewerEle, 'ti3-img-zoom-viewer');
        this.tiRenderer.setStyles(this.zoomViewerEle, {
            left: left + 'px',
            top: top + 'px',
            width: `${this.zoomViewerLength}px`,
            height: `${this.zoomViewerLength}px`,
            background: `url(${this.imgSrc})`,
            'background-size': `${this.hostEle.width * this.ratio}px ${this.hostEle.height * this.ratio}px`
        });
        this.renderer.appendChild(document.body, this.zoomViewerEle);
    }
    // 计算鼠标相对宿主元素的位置
    getCursorPos(mouseEvent) {
        const hostEleRect = this.hostEle.getBoundingClientRect();
        // 考虑滚动情况
        const left = mouseEvent.pageX - hostEleRect.left - window.pageXOffset;
        const top = mouseEvent.pageY - hostEleRect.top - window.pageYOffset;
        return { x: left, y: top };
    }
    /**
     * 计算选择遮罩偏移和放大区域
     */
    reStyleResults(mouseEvent) {
        // 1. 获取计算鼠标相对于宿主元素左上角的位置
        const cursorPos = this.getCursorPos(mouseEvent);
        // 获取遮罩宽度
        const zoomSelectorWidth = this.zoomSelectorEle.offsetWidth;
        // 2. 计算放大结果的位置
        let viewerPosX = cursorPos.x - (zoomSelectorWidth / 2);
        let viewerPosY = cursorPos.y - (zoomSelectorWidth / 2);
        // 3. 调整
        // 3.1 选择遮罩移出宿主元素的右侧
        if (viewerPosX > this.hostEle.offsetWidth - zoomSelectorWidth) {
            viewerPosX = this.hostEle.offsetWidth - zoomSelectorWidth;
        }
        // 3.2 选择遮罩移出宿主元素的左侧
        if (viewerPosX < 0) {
            viewerPosX = 0;
        }
        // 3.3 选择遮罩移出宿主元素的下方
        if (viewerPosY > this.hostEle.offsetHeight - zoomSelectorWidth) {
            viewerPosY = this.hostEle.offsetHeight - zoomSelectorWidth;
        }
        // 3.4 选择遮罩移出宿主元素的上方
        if (viewerPosY < 0) {
            viewerPosY = 0;
        }
        // 4. 设置选择区域偏移，选择区域偏移=放大结果位置 + 宿主元素的偏移
        this.tiRenderer.setStyles(this.zoomSelectorEle, {
            left: `${viewerPosX + this.hostEle.offsetLeft}px`,
            top: `${viewerPosY + this.hostEle.offsetTop}px`
        });
        // 5. 设置放大结果
        this.renderer.setStyle(this.zoomViewerEle, 'background-position', `-${viewerPosX * this.ratio}px -${viewerPosY * this.ratio}px`);
    }
    ngOnDestroy() {
        this.removeZoomEle();
    }
    /**
     * 移除选择遮罩和放大结果元素、解绑相关事件
     */
    removeZoomEle() {
        if (this.zoomSelectorEle !== undefined) {
            this.renderer.removeChild(this.parentEle, this.zoomSelectorEle);
            this.zoomSelectorEle = undefined;
        }
        if (this.zoomViewerEle !== undefined) {
            this.renderer.removeChild(document.body, this.zoomViewerEle);
            this.zoomViewerEle = undefined;
        }
        if (this.selectorMouseMoveHandler) {
            this.selectorMouseMoveHandler();
        }
        if (this.selectorMouseLeaveHandler) {
            this.selectorMouseLeaveHandler();
        }
    }
}
// 放大结果的边框宽度
TiZoomComponent.ZOOM_VIEWER_BORDER_WIDTH = 1;
TiZoomComponent.decorators = [
    { type: Component, args: [{
                // 非img元素，tiZoom指令无效
                selector: 'img[tiZoom]',
                template: '',
                styles: [".ti3-img-zoom-selector{background-color:var(--ti-common-color-icon-hover);cursor:move;display:block;left:0;opacity:.2;position:absolute;top:0}.ti3-img-zoom-viewer{background-repeat:no-repeat!important;border:1px solid var(--ti-common-color-line-dividing);box-sizing:border-box;display:block;position:absolute;top:0}"]
            },] }
];
TiZoomComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: TiRenderer }
];
TiZoomComponent.propDecorators = {
    zoomSelectorLength: [{ type: Input }],
    zoomViewerLength: [{ type: Input }],
    onHostLoad: [{ type: HostListener, args: ['load', ['$event'],] }],
    onHostMouseEnter: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
    onHostMouseLeave: [{ type: HostListener, args: ['mouseleave', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,