import { Component, Input } from '@angular/core';
import { TiBaseComponent } from '../base/TiBaseModule';
/**
 * TiLeftmenuGroup 是分组菜单组件，嵌在 TiLeftmenu组件中使用。
 *
 * 3.1.3新增
 *
 */
export class TiLeftmenuGroupComponent extends TiBaseComponent {
    constructor() {
        super(...arguments);
        /**
         * 设置当前分组菜单项是否展开
         */
        this.expanded = false;
        /**
         * @ignore
         * 当前TiLeftmenuGroup下的所有TiLeftmenuLevel1的集合
         */
        this.children = [];
    }
    /**
     * @ignore
     * 在模板中使用，实现分组的展开与收起
     */
    clickGroup() {
        this.expanded = !this.expanded;
    }
    /**
     * @ignore
     * 在模板中使用，当前分组中的子项是否有激活项
     */
    hasActivedChild() {
        if (!this.children || this.children.length <= 0) {
            return false;
        }
        for (const level1 of this.children) {
            if (level1.isActived || level1.hasActivedChildren()) {
                return true;
            }
        }
        return false;
    }
}
TiLeftmenuGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-leftmenu-group',
                template: "<div class=\"ti3-leftmenu-group-wrapper\"\r\n    [ngClass]=\"{'ti3-leftmenu-group-active': !expanded && hasActivedChild()}\"\r\n    [tabindex]=\"0\"\r\n    tiOutline\r\n    (click)=\"clickGroup()\"\r\n    (keydown.enter)=\"clickGroup()\"\r\n    [id]=\"appendId('leftmenu_group')\">\r\n    <ng-content select='ti-leftmenu-group-item'></ng-content>\r\n    <span class=\"ti3-leftmenu-triangle\" [ngClass]=\"{'ti3-leftmenu-triangle-down' : !expanded ,\r\n    'ti3-leftmenu-triangle-up' : expanded}\"></span>\r\n</div>\r\n<div [hidden]=\"!expanded\">\r\n    <ng-content></ng-content>\r\n</div>",
                host: {
                    '[class.ti3-leftmenu-group-container]': 'true'
                }
            },] }
];
TiLeftmenuGroupComponent.propDecorators = {
    expanded: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGlMZWZ0bWVudUdyb3VwQ29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vQGNsb3VkL3RpbnkzL2NvbXBvbmVudHMvbGVmdG1lbnUvVGlMZWZ0bWVudUdyb3VwQ29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV2RDs7Ozs7R0FLRztBQVNILE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxlQUFlO0lBUjdEOztRQVNJOztXQUVHO1FBQ00sYUFBUSxHQUFZLEtBQUssQ0FBQztRQUNuQzs7O1dBR0c7UUFDSSxhQUFRLEdBQXFDLEVBQUUsQ0FBQztJQTJCM0QsQ0FBQztJQXpCRzs7O09BR0c7SUFDSSxVQUFVO1FBQ2IsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDbkMsQ0FBQztJQUNEOzs7T0FHRztJQUNJLGVBQWU7UUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQzdDLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBRWhDLElBQUksTUFBTSxDQUFDLFNBQVMsSUFBSSxNQUFNLENBQUMsa0JBQWtCLEVBQUUsRUFBRTtnQkFDakQsT0FBTyxJQUFJLENBQUM7YUFDZjtTQUNKO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQzs7O1lBM0NKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3Qix3bEJBQW9DO2dCQUNwQyxJQUFJLEVBQUU7b0JBQ0Ysc0NBQXNDLEVBQUUsTUFBTTtpQkFDakQ7YUFDSjs7O3VCQU1JLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUaUxlZnRtZW51TGV2ZWwxQ29tcG9uZW50IH0gZnJvbSAnLi9UaUxlZnRtZW51TGV2ZWwxQ29tcG9uZW50JztcclxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUaUJhc2VDb21wb25lbnQgfSBmcm9tICcuLi9iYXNlL1RpQmFzZU1vZHVsZSc7XHJcblxyXG4vKipcclxuICogVGlMZWZ0bWVudUdyb3VwIOaYr+WIhue7hOiPnOWNlee7hOS7tu+8jOW1jOWcqCBUaUxlZnRtZW5157uE5Lu25Lit5L2/55So44CCXHJcbiAqXHJcbiAqIDMuMS4z5paw5aKeXHJcbiAqXHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndGktbGVmdG1lbnUtZ3JvdXAnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2xlZnRtZW51LWdyb3VwLmh0bWwnLFxyXG4gICAgaG9zdDoge1xyXG4gICAgICAgICdbY2xhc3MudGkzLWxlZnRtZW51LWdyb3VwLWNvbnRhaW5lcl0nOiAndHJ1ZSdcclxuICAgIH1cclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBUaUxlZnRtZW51R3JvdXBDb21wb25lbnQgZXh0ZW5kcyBUaUJhc2VDb21wb25lbnR7XHJcbiAgICAvKipcclxuICAgICAqIOiuvue9ruW9k+WJjeWIhue7hOiPnOWNlemhueaYr+WQpuWxleW8gFxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBleHBhbmRlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKiDlvZPliY1UaUxlZnRtZW51R3JvdXDkuIvnmoTmiYDmnIlUaUxlZnRtZW51TGV2ZWwx55qE6ZuG5ZCIXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjaGlsZHJlbjogQXJyYXk8VGlMZWZ0bWVudUxldmVsMUNvbXBvbmVudD4gPSBbXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpZ25vcmVcclxuICAgICAqIOWcqOaooeadv+S4reS9v+eUqO+8jOWunueOsOWIhue7hOeahOWxleW8gOS4juaUtui1t1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2xpY2tHcm91cCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmV4cGFuZGVkID0gIXRoaXMuZXhwYW5kZWQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpZ25vcmVcclxuICAgICAqIOWcqOaooeadv+S4reS9v+eUqO+8jOW9k+WJjeWIhue7hOS4reeahOWtkOmhueaYr+WQpuaciea/gOa0u+mhuVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaGFzQWN0aXZlZENoaWxkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghdGhpcy5jaGlsZHJlbiB8fCB0aGlzLmNoaWxkcmVuLmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgbGV2ZWwxIG9mIHRoaXMuY2hpbGRyZW4pIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChsZXZlbDEuaXNBY3RpdmVkIHx8IGxldmVsMS5oYXNBY3RpdmVkQ2hpbGRyZW4oKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG4iXX0=