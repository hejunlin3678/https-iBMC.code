import { Component, ContentChild, ElementRef, EventEmitter, Input, IterableDiffers, KeyValueDiffers, Output, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { TiFormComponent } from '../base/TiBaseModule';
import { TiMenuComponent } from '../menu/TiMenuModule';
import { TiLocale } from '../../locale/TiLocaleModule';
// 空间设置规则：
// 可显示项目数（children项目必须出现在“更多”），最大显示数目，空间宽度。
// 更多”里面至少两个选项
// 如果只有一个带children项目那么直接用menu。
/**
 * ActionMenu菜单按钮组件
 *
 * ActionMenu组件主要是一组操作按钮。当按钮数量太多导致预留空间大小无法显示所有按钮时，自动将超出部分的按钮放置在一个menu组件下拉中。
 *
 * 使用该组件，用户只需关注操作项配置，无需关注操作项显示不足的情况。
 *
 * 注意：ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked.（本组件在调试环境报此错误，不必理会。生产环境不报错，功能也不受影响。）
 *
 * <example-url>../tiny3demo/#/actionmenu/actionmenu-all</example-url>
 */
export class TiActionmenuComponent extends TiFormComponent {
    constructor(hostRef, renderer, iterableDiffers, keyValueDiffers) {
        super(hostRef, renderer);
        this.hostRef = hostRef;
        this.renderer = renderer;
        this.iterableDiffers = iterableDiffers;
        this.keyValueDiffers = keyValueDiffers;
        /**
         * 下拉面板最大宽度，超过时换行，对所有子菜单都生效。
         */
        this.panelMaxWidth = '130px';
        /**
         * 下拉面板最大高度度，超过时出现竖向滚动条，对所有子菜单都生效。
         */
        this.panelMaxHeight = '9999px';
        /**
         * 数据中要显示字符串的key
         */
        this.labelKey = 'label';
        /**
         * 用户点击选中菜单项事件
         */
        // tslint:disable-next-line:no-output-named-after-standard-event
        this.select = new EventEmitter();
        /* Menu参数透传end */
        /**
         * 外部容器宽度
         */
        this.maxWidth = '250px';
        /**
         * 各item的间距
         */
        this.space = '10px';
        // 分割线为divider，分割字符叫做separator（比如分割ip里的点）
        /**
         * 各item之间是否展示分割线
         *
         * 3.1.3新增
         */
        this.showDivider = true;
        /**
         * 最大显示个数, 包含下拉菜单
         */
        this.maxShowNum = 4;
        /**
         * @ignore
         * 下拉菜单绑定的选项数据
         */
        this.panelItems = [];
        /**
         * @ignore
         * 各item之间间隔的一半距离
         */
        this.halfSpace = '';
        this.needInitItems = false;
        const localeWords = TiLocale.getLocaleWords();
        this.moreText = localeWords.tiActionmenu.more;
        this.menuText = localeWords.tiActionmenu.operation;
    }
    // 纠正 IE下同一行两个元素 offsetTop 值可能存在的一些(目前测试到有1px)的误差
    static isEqualOffsetTop(elem1, elem2) {
        return Math.abs(elem1.offsetTop - elem2.offsetTop) <= 2;
    }
    /**
     * @ignore
     *  选中菜单内选项
     * @param item 菜单项数据
     */
    onSelect(item) {
        if (!item.disabled) {
            this.select.emit(item);
        }
    }
    ngOnInit() {
        super.ngOnInit();
        this.panelItems = this.items;
        this.halfSpace = Number.parseInt(this.space, 10) / 2 + 'px';
    }
    ngDoCheck() {
        if (this.data) {
            if (!this.dataDiffer) { // 首次docheck是ngOnInit()之后
                this.dataDiffer = this.keyValueDiffers.find(this.data)
                    .create();
            }
            const dataChanges = this.dataDiffer.diff(this.data);
            if (dataChanges) { // 根据data初始化items. 注意：第一次diff会走入changes
                this.items = this.dataToItemsFn(this.data);
            }
        }
        if (this.items) {
            if (!this.itemsDiffer) {
                this.itemsDiffer = this.iterableDiffers.find(this.items)
                    .create();
                this.needInitItems = true;
            }
            const itemsChanges = this.itemsDiffer.diff(this.items);
            // 注意：如果有数据，那么第一次diff会就走入changes。如果是空数据，第一次diff结果是null，不会进入changes。
            if (itemsChanges) { // 如果items改变，则重新初始化。
                this.needInitItems = true;
            }
        }
    }
    /**
     * 兼容旧版：
     * 10.0.3 版本之前只能内嵌一个模板，无命名。
     * 新版可以内嵌两个模板，示例书写要求都命名（#item，#tip）。
     * 但需要兼容旧版无命名测试用例。
     */
    // tslint:disable-next-line: use-life-cycle-interface
    ngAfterContentInit() {
        super.ngAfterContentInit();
        // 如果 item 模板为空 && 存在第一个模板，那么把第一个出现的 “非 #tip 标签” 的模板作为 item 模板
        if (!this.itemTemplate && this.firstTemplate
            && (this.firstTemplate.elementRef.nativeElement !== (this.tipTemplate && this.tipTemplate.elementRef.nativeElement))) {
            this.itemTemplate = this.firstTemplate;
        }
    }
    ngAfterViewChecked() {
        if (this.needInitItems) {
            this.initItems();
        }
        super.ngAfterViewChecked(); // 内部执行了autofocus
    }
    /**
     * 计算那些item应该显示在外部，移除不该显示的item，调整pannel上显示的item项，调整menu显示的文字。
     */
    initItems() {
        this.needInitItems = false;
        const itemElems = this.hostRef.nativeElement.getElementsByClassName('ti3-action-menu-item');
        const dividingElems = this.hostRef.nativeElement.getElementsByClassName('ti3-action-menu-divider');
        const menuElem = this.menuCom.nativeElement;
        const moreTextElem = this.hostRef.nativeElement.getElementsByClassName('tiMoreText')[0];
        const menuTextElem = this.hostRef.nativeElement.getElementsByClassName('tiMenuText')[0];
        // 情况一：items为空
        if (!this.items || this.items.length === 0) {
            this.setDisplay(menuElem, false);
            return;
        }
        else {
            this.setDisplay(menuElem, true);
        }
        // 注意: itemElems不是数组，并且数据更新时，取到的length不对。所以，得使用items的length
        let firstChildrenIndex = -1; // 第一个含有子项目的索引
        // 这个for循环，做了两件事：找含有子项目，重置item可见。
        for (let i = 0; i < this.items.length; i++) {
            if (this.items[i].hasOwnProperty('children')) {
                firstChildrenIndex = i; // 找到第一个含有子项目的索引
                // break;
            }
            this.setDisplay(itemElems[i], true); // 因为动态修改item，所以第二次进入时需要重置item可见。
        }
        // 情况二：不显示menu  //条件：没有超过最大显示个数，且最后一个项目也在第一行, 且没有子项
        if (this.items.length <= this.maxShowNum
            && TiActionmenuComponent.isEqualOffsetTop(itemElems[this.items.length - 1], itemElems[0])
            && firstChildrenIndex === -1) {
            for (let i = 0; i < this.items.length; i++) {
                this.setAttr(itemElems[i], 'disabled', this.items[i].disabled);
            }
            this.setDisplay(menuElem, false);
            // 设置可聚焦元素
            const focusItems = [];
            for (let i = 0; i < this.items.length; i++) {
                focusItems.push(itemElems[i]);
            }
            this.setFocusableElems(focusItems);
            return;
        }
        // 情况三：显示Menu，显示数目条件：有子项目的一定在菜单内/倒数第二个一定在菜单内/最大显示个数（含menu）。3值取最小。
        if (firstChildrenIndex === -1) {
            firstChildrenIndex = this.items.length; // firstChild给一个超越数组大小的索引，方便下面计算
        }
        let outShowNum = (this.items.length - 2) < (this.maxShowNum - 1) ? (this.items.length - 2) :
            (this.maxShowNum - 1) < (firstChildrenIndex + 1) ? (this.maxShowNum - 1) : (firstChildrenIndex + 1);
        for (let i = this.items.length - 1; i >= 0; i--) {
            if (i > outShowNum - 1) { // 本项属于超出的数目，先删除掉
                //  TODO: remove和style哪个效率高？
                this.setDisplay(itemElems[i], false);
                if (dividingElems[i]) {
                    this.setDisplay(dividingElems[i], false);
                }
            }
            else if (!TiActionmenuComponent.isEqualOffsetTop(menuElem, itemElems[0])) { // 菜单没有在第一行，删除本项
                this.setDisplay(itemElems[i], false);
                if (dividingElems[i]) {
                    this.setDisplay(dividingElems[i], false);
                }
                outShowNum--;
            }
            else {
                this.setAttr(itemElems[i], 'disabled', this.items[i].disabled);
            }
        }
        // 设置菜单显示文字，设置可聚焦元素
        if (outShowNum === 0) { // 立即生效，否则根据模板变量生效慢
            this.renderer.setStyle(menuElem, 'margin-left', '0px');
            this.setDisplay(moreTextElem, false);
            this.setDisplay(menuTextElem, true);
            // 设置可聚焦元素
            this.setFocusableElems(this.menuCom.getFocusableElems());
        }
        else {
            this.setDisplay(moreTextElem, true);
            this.setDisplay(menuTextElem, false);
            // 设置可聚焦元素
            const focusItems = [];
            for (let i = 0; i < outShowNum; i++) {
                focusItems.push(itemElems[i]);
            }
            this.setFocusableElems(focusItems.concat(this.menuCom.getFocusableElems()));
        }
        /**
         * 此句改变了模板变量，需要强制刷新
         * 这里引起ng-serve环境报错ExpressionChangedAfterItHasBeenCheckedError, 所以用Promise延时
         */
        Promise.resolve().then(() => {
            this.panelItems = this.items.slice(outShowNum, this.items.length);
        });
    }
    /**
     * 设置显示/隐藏样式，比ngIf更及时生效。
     * @param elem HTML元素
     * @param isShow 是否显示
     */
    setDisplay(elem, isShow) {
        this.renderer.setStyle(elem, 'display', isShow ? 'inline-block' : 'none');
    }
    /**
     * @ignore
     * ngFor遍历的 trackBy函数，防止数据更新导致所有DOM重新渲染。TODO：这里是否该使用trackBy?
     * @param index 索引
     * @param item 数据
     * @returns 索引
     */
    trackByFn(index, item) {
        return index;
    }
}
TiActionmenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-actionmenu',
                template: "<ng-container *ngFor=\"let item of items; let i = index; let first = first; let last = last; trackBy: trackByFn\">\r\n    <a href=\"javascript:void(0)\"\r\n        oncontextmenu=\"return false\"\r\n        class=\"ti3-action-menu-item\"\r\n        [ngStyle]=\"{ 'margin-left': first ? 'none' : halfSpace, 'margin-right': last ? 'none' : halfSpace}\"\r\n        (click)=\"onSelect(item)\"\r\n        [tiPopconfirm]=\"item.popConfig&&!item.disabled ? item.popConfig : {}\"\r\n        [id]=\"appendId('item'+i)\">\r\n        <section [tiTip]='tipTemplate ? tipTemplate : item.tip' [tiTipContext]='item' [tiTipPosition]='item.tipPosition'\r\n                 >\r\n                <ng-container *ngIf=\"itemTemplate else labelTemplate\">\r\n                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item,index: i}\">\r\n                        </ng-container>\r\n                </ng-container>\r\n                <ng-template #labelTemplate>{{item[labelKey]}}</ng-template>\r\n        </section>\r\n    </a>\r\n    <span class=\"ti3-action-menu-divider\" *ngIf=\"showDivider && !last\"></span>\r\n</ng-container>\r\n<ti-menu\r\npanelAlign=\"right\"\r\n[panelMaxWidth]=\"panelMaxWidth\"\r\n[panelMaxHeight]=\"panelMaxHeight\"\r\n[labelKey]=\"labelKey\"\r\n[items]=\"panelItems\"\r\n(select)=\"onSelect($event)\"\r\n[ngStyle]=\"{'margin-left': halfSpace}\"\r\nstyle=\"display: none\"\r\n[id]=\"appendId('menu')\">\r\n<section class=\"tiMoreText\" style=\"display:inline-block\">{{moreText}}</section>\r\n<section class=\"tiMenuText\" style=\"display:none\">{{menuText}}</section>\r\n<ng-template #item let-item let-i=index>\r\n        <ng-container *ngIf=\"itemTemplate else labelTemplate\">\r\n                <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item,index: i}\">\r\n                </ng-container>\r\n        </ng-container>\r\n        <ng-template #labelTemplate>{{item[labelKey]}}</ng-template>\r\n</ng-template>\r\n<ng-template #tip let-item=\"context\" *ngIf=\"tipTemplate\">\r\n        <ng-container *ngTemplateOutlet=\"tipTemplate; context: {context: item}\">\r\n        </ng-container>\r\n</ng-template>\r\n</ti-menu>\r\n\r\n",
                host: {
                    '[style.max-width]': 'maxWidth'
                },
                styles: [":host{display:inline-block}.ti3-action-menu-item{-ms-user-select:none;-webkit-user-select:none;color:var(--ti-actionmenu-item-text-color);cursor:pointer;display:inline-block;text-decoration:none;user-select:none}.ti3-action-menu-item:hover{color:var(--ti-actionmenu-item-text-color-hover);text-decoration:none}.ti3-action-menu-item[disabled]{cursor:not-allowed;outline:none!important;text-decoration:none}.ti3-action-menu-item[disabled] *{color:var(--ti-actionmenu-item-text-color-disabled)!important}a.ti3-action-menu-item:active,a.ti3-action-menu-item:focus{color:var(--ti-actionmenu-item-text-color-active)}.ti3-action-menu-divider{background:var(--ti-actionmenu-divider-color);display:inline-block;height:12px;position:relative;top:2px;width:1px}"]
            },] }
];
TiActionmenuComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: IterableDiffers },
    { type: KeyValueDiffers }
];
TiActionmenuComponent.propDecorators = {
    items: [{ type: Input }],
    panelMaxWidth: [{ type: Input }],
    panelMaxHeight: [{ type: Input }],
    labelKey: [{ type: Input }],
    select: [{ type: Output }],
    maxWidth: [{ type: Input }],
    space: [{ type: Input }],
    showDivider: [{ type: Input }],
    maxShowNum: [{ type: Input }],
    moreText: [{ type: Input }],
    menuText: [{ type: Input }],
    data: [{ type: Input }],
    dataToItemsFn: [{ type: Input }],
    firstTemplate: [{ type: ContentChild, args: [TemplateRef, /* TODO: add static flag */ { static: true },] }],
    itemTemplate: [{ type: ContentChild, args: ['item', /* TODO: add static flag */ { static: true },] }],
    tipTemplate: [{ type: ContentChild, args: ['tip', /* TODO: add static flag */ { static: true },] }],
    menuCom: [{ type: ViewChild, args: [TiMenuComponent, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,