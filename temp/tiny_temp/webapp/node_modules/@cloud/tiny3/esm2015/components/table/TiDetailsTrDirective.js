import { Directive, Input, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';
import { TiTableComponent } from './TiTableComponent';
import { TiDetailsIconComponent } from './TiDetailsIconComponent';
/**
 * TiDetailsTr 详情行结构指令
 *
 * 使用时需要在其前面加 * 语法糖，传入当前行数据；
 * 其内部根据row.showDetails的值来控制详情行是否显示，功能类似于ngIf。
 */
export class TiDetailsTrDirective {
    constructor(templateRef, viewContainerRef, renderer, table) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.renderer = renderer;
        this.table = table;
    }
    ngDoCheck() {
        if (this.row.showDetails !== this.oldShowDetails) {
            this.updateView();
            this.oldShowDetails = this.row.showDetails;
        }
    }
    updateView() {
        if (this.row.showDetails) {
            // 上下文参数是否需要传递
            this.viewContainerRef.createEmbeddedView(this.templateRef);
            // 结构指令的宿主元素是一个 comment(注释) 的Node节点，
            // 生成节点元素插入DOM中的位置跟angularCompilerOptions.enableIvy 配置有关，true时在宿主元素之前，false时在宿主元素之后，
            // 而 ng9开始angularCompilerOptions.enableIvy 默认为true,但一些项目为兼容性，强制设置为了false，所以要做一下兼容处理
            let detailTr;
            const nativeElement = this.templateRef.elementRef.nativeElement;
            if (nativeElement.previousSibling && nativeElement.previousSibling.classList &&
                nativeElement.previousSibling.classList.contains(TiDetailsIconComponent.TABLE_ClASS_DETAIL_BASE)) {
                detailTr = nativeElement.nextSibling;
            }
            else {
                detailTr = nativeElement.previousSibling;
            }
            this.renderer.addClass(detailTr, 'ti3-details-tr');
        }
        else {
            this.viewContainerRef.clear();
            //  TODO: 方案是否可优化
            // 表头锁定时，展开时可在table的AfterViewChecked中获取到表格变化后的高度，
            // 但是收起时，在table的AfterViewChecked中获取不到表格变化后的高度，不能及时处理滚动条的变化
            // 所以此处使用setTimeout使其延时触发table的AfterViewChecked，使其能够处理由高度变化引起的滚动条状态的改变
            // 注：使用ngIf指令也是如此效果
            if (this.table.isFixedHead) {
                setTimeout(() => { }, 0);
            }
        }
    }
}
TiDetailsTrDirective.decorators = [
    { type: Directive, args: [{
                selector: '[tiDetailsTr]'
            },] }
];
TiDetailsTrDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: Renderer2 },
    { type: TiTableComponent }
];
TiDetailsTrDirective.propDecorators = {
    row: [{ type: Input, args: ['tiDetailsTr',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGlEZXRhaWxzVHJEaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9AY2xvdWQvdGlueTMvY29tcG9uZW50cy90YWJsZS9UaURldGFpbHNUckRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULEtBQUssRUFDTCxTQUFTLEVBQ1QsV0FBVyxFQUNYLGdCQUFnQixFQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZ0JBQWdCLEVBQWtCLE1BQU0sb0JBQW9CLENBQUM7QUFDdEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbEU7Ozs7O0dBS0c7QUFJSCxNQUFNLE9BQU8sb0JBQW9CO0lBTTdCLFlBQW9CLFdBQTZCLEVBQzdCLGdCQUFrQyxFQUNsQyxRQUFtQixFQUFVLEtBQXVCO1FBRnBELGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtRQUM3QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLGFBQVEsR0FBUixRQUFRLENBQVc7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFrQjtJQUN4RSxDQUFDO0lBRUQsU0FBUztRQUNMLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEtBQUssSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUM5QyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQztTQUM5QztJQUVMLENBQUM7SUFDTyxVQUFVO1FBQ2QsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRTtZQUN0QixjQUFjO1lBQ2QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMzRCxvQ0FBb0M7WUFDcEMsb0ZBQW9GO1lBQ3BGLG1GQUFtRjtZQUNuRixJQUFJLFFBQXFCLENBQUM7WUFDMUIsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1lBQ2hFLElBQUksYUFBYSxDQUFDLGVBQWUsSUFBSSxhQUFhLENBQUMsZUFBZSxDQUFDLFNBQVM7Z0JBQ3hFLGFBQWEsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFO2dCQUNsRyxRQUFRLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQzthQUN4QztpQkFBTTtnQkFDSCxRQUFRLEdBQUcsYUFBYSxDQUFDLGVBQWUsQ0FBQzthQUM1QztZQUVELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ3REO2FBQU07WUFDSCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDOUIsaUJBQWlCO1lBQ2pCLGlEQUFpRDtZQUNqRCwwREFBMEQ7WUFDMUQsc0VBQXNFO1lBQ3RFLG1CQUFtQjtZQUNuQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFO2dCQUN4QixVQUFVLENBQUMsR0FBRyxFQUFFLEdBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzNCO1NBQ0o7SUFDTCxDQUFDOzs7WUFqREosU0FBUyxTQUFFO2dCQUNSLFFBQVEsRUFBRSxlQUFlO2FBQzVCOzs7WUFiQyxXQUFXO1lBQ1gsZ0JBQWdCO1lBRmhCLFNBQVM7WUFJRixnQkFBZ0I7OztrQkFlcEIsS0FBSyxTQUFDLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIERpcmVjdGl2ZSxcclxuICBEb0NoZWNrLFxyXG4gIElucHV0LFxyXG4gIFJlbmRlcmVyMixcclxuICBUZW1wbGF0ZVJlZixcclxuICBWaWV3Q29udGFpbmVyUmVmXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRpVGFibGVDb21wb25lbnQsIFRpVGFibGVSb3dEYXRhIH0gZnJvbSAnLi9UaVRhYmxlQ29tcG9uZW50JztcclxuaW1wb3J0IHsgVGlEZXRhaWxzSWNvbkNvbXBvbmVudCB9IGZyb20gJy4vVGlEZXRhaWxzSWNvbkNvbXBvbmVudCc7XHJcbi8qKlxyXG4gKiBUaURldGFpbHNUciDor6bmg4XooYznu5PmnoTmjIfku6RcclxuICpcclxuICog5L2/55So5pe26ZyA6KaB5Zyo5YW25YmN6Z2i5YqgICog6K+t5rOV57OW77yM5Lyg5YWl5b2T5YmN6KGM5pWw5o2u77ybXHJcbiAqIOWFtuWGhemDqOagueaNrnJvdy5zaG93RGV0YWlsc+eahOWAvOadpeaOp+WItuivpuaDheihjOaYr+WQpuaYvuekuu+8jOWKn+iDveexu+S8vOS6jm5nSWbjgIJcclxuICovXHJcbkBEaXJlY3RpdmUgKHtcclxuICAgIHNlbGVjdG9yOiAnW3RpRGV0YWlsc1RyXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFRpRGV0YWlsc1RyRGlyZWN0aXZlIGltcGxlbWVudHMgRG9DaGVjayB7XHJcbiAgICAvKipcclxuICAgICAqIOW9k+WJjeihjOaVsOaNrlxyXG4gICAgICovXHJcbiAgICBASW5wdXQoJ3RpRGV0YWlsc1RyJykgcm93OiBUaVRhYmxlUm93RGF0YTtcclxuICAgIHByaXZhdGUgb2xkU2hvd0RldGFpbHM6IGJvb2xlYW47XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxyXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCBwcml2YXRlIHRhYmxlOiBUaVRhYmxlQ29tcG9uZW50KSB7XHJcbiAgICB9XHJcblxyXG4gICAgbmdEb0NoZWNrKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnJvdy5zaG93RGV0YWlscyAhPT0gdGhpcy5vbGRTaG93RGV0YWlscykge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICAgICAgICAgICAgdGhpcy5vbGRTaG93RGV0YWlscyA9IHRoaXMucm93LnNob3dEZXRhaWxzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHVwZGF0ZVZpZXcoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMucm93LnNob3dEZXRhaWxzKSB7XHJcbiAgICAgICAgICAgIC8vIOS4iuS4i+aWh+WPguaVsOaYr+WQpumcgOimgeS8oOmAklxyXG4gICAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYpO1xyXG4gICAgICAgICAgICAvLyDnu5PmnoTmjIfku6TnmoTlrr/kuLvlhYPntKDmmK/kuIDkuKogY29tbWVudCjms6jph4opIOeahE5vZGXoioLngrnvvIxcclxuICAgICAgICAgICAgLy8g55Sf5oiQ6IqC54K55YWD57Sg5o+S5YWlRE9N5Lit55qE5L2N572u6LefYW5ndWxhckNvbXBpbGVyT3B0aW9ucy5lbmFibGVJdnkg6YWN572u5pyJ5YWz77yMdHJ1ZeaXtuWcqOWuv+S4u+WFg+e0oOS5i+WJje+8jGZhbHNl5pe25Zyo5a6/5Li75YWD57Sg5LmL5ZCO77yMXHJcbiAgICAgICAgICAgIC8vIOiAjCBuZznlvIDlp4thbmd1bGFyQ29tcGlsZXJPcHRpb25zLmVuYWJsZUl2eSDpu5jorqTkuLp0cnVlLOS9huS4gOS6m+mhueebruS4uuWFvOWuueaAp++8jOW8uuWItuiuvue9ruS4uuS6hmZhbHNl77yM5omA5Lul6KaB5YGa5LiA5LiL5YW85a655aSE55CGXHJcbiAgICAgICAgICAgIGxldCBkZXRhaWxUcjogSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hdGl2ZUVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlUmVmLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKG5hdGl2ZUVsZW1lbnQucHJldmlvdXNTaWJsaW5nICYmIG5hdGl2ZUVsZW1lbnQucHJldmlvdXNTaWJsaW5nLmNsYXNzTGlzdCAmJlxyXG4gICAgICAgICAgICAgICAgbmF0aXZlRWxlbWVudC5wcmV2aW91c1NpYmxpbmcuY2xhc3NMaXN0LmNvbnRhaW5zKFRpRGV0YWlsc0ljb25Db21wb25lbnQuVEFCTEVfQ2xBU1NfREVUQUlMX0JBU0UpKSB7XHJcbiAgICAgICAgICAgICAgICBkZXRhaWxUciA9IG5hdGl2ZUVsZW1lbnQubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkZXRhaWxUciA9IG5hdGl2ZUVsZW1lbnQucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKGRldGFpbFRyLCAndGkzLWRldGFpbHMtdHInKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY2xlYXIoKTtcclxuICAgICAgICAgICAgLy8gIFRPRE86IOaWueahiOaYr+WQpuWPr+S8mOWMllxyXG4gICAgICAgICAgICAvLyDooajlpLTplIHlrprml7bvvIzlsZXlvIDml7blj6/lnKh0YWJsZeeahEFmdGVyVmlld0NoZWNrZWTkuK3ojrflj5bliLDooajmoLzlj5jljJblkI7nmoTpq5jluqbvvIxcclxuICAgICAgICAgICAgLy8g5L2G5piv5pS26LW35pe277yM5ZyodGFibGXnmoRBZnRlclZpZXdDaGVja2Vk5Lit6I635Y+W5LiN5Yiw6KGo5qC85Y+Y5YyW5ZCO55qE6auY5bqm77yM5LiN6IO95Y+K5pe25aSE55CG5rua5Yqo5p2h55qE5Y+Y5YyWXHJcbiAgICAgICAgICAgIC8vIOaJgOS7peatpOWkhOS9v+eUqHNldFRpbWVvdXTkvb/lhbblu7bml7bop6blj5F0YWJsZeeahEFmdGVyVmlld0NoZWNrZWTvvIzkvb/lhbbog73lpJ/lpITnkIbnlLHpq5jluqblj5jljJblvJXotbfnmoTmu5rliqjmnaHnirbmgIHnmoTmlLnlj5hcclxuICAgICAgICAgICAgLy8g5rOo77ya5L2/55SobmdJZuaMh+S7pOS5n+aYr+WmguatpOaViOaenFxyXG4gICAgICAgICAgICBpZiAodGhpcy50YWJsZS5pc0ZpeGVkSGVhZCkge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7fSwgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19