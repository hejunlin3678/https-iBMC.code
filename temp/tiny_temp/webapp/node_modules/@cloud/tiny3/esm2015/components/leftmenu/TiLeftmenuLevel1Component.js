import { ChangeDetectorRef, Component, ContentChild, ElementRef, Input, Optional, Renderer2, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { TiLeftmenuComponent } from './TiLeftmenuComponent';
import { TiLeftmenuGroupComponent } from './TiLeftmenuGroupComponent';
import { TiLeftmenuItemComponent } from './TiLeftmenuItemComponent';
import { Util } from '../../utils/Util';
import { TiBaseComponent } from '../base/TiBaseModule';
/**
 * TiLeftmenuLevel1Component 是一级菜单组件，嵌在 TiLeftmenu 中使用
 *
 */
export class TiLeftmenuLevel1Component extends TiBaseComponent {
    constructor(leftmenu, elementRef, renderer2, changeRef, leftmenuGroup, domSanitizer) {
        super(elementRef, renderer2);
        this.elementRef = elementRef;
        this.changeRef = changeRef;
        this.leftmenuGroup = leftmenuGroup;
        this.domSanitizer = domSanitizer;
        /**
         * @ignore
         * 当前 TiLeftmenuLevel1下所有的 TiLeftmenuLevel2 的集合
         */
        this.children = [];
        /**
         * @ignore
         * 模板中使用，二级菜单是否展开
         */
        this.showChildren = false;
        /**
         * @ignore
         * 模板中使用，是否是激活状态
         */
        this.isActived = false;
        this.element = this.elementRef.nativeElement;
        this.leftmenu = leftmenu;
    }
    ngOnInit() {
        if (this.leftmenuGroup) {
            this.leftmenuGroup.children.push(this);
        }
    }
    ngAfterViewInit() {
        this.setShowChildren();
        this.setActiveState();
        this.leftmenu.level1Items.push(this);
        this.changeRef.detectChanges();
    }
    ngOnDestroy() {
        const index = this.leftmenu.level1Items.indexOf(this);
        if (this.leftmenuGroup) {
            const groupIndex = this.leftmenuGroup.children.indexOf(this);
            if (groupIndex !== -1) {
                this.leftmenuGroup.children.splice(groupIndex, 1);
            }
        }
        if (index !== -1) {
            this.leftmenu.level1Items.splice(index, 1);
        }
    }
    /**
     * @ignore
     * 模板中使用，点击一级菜单项时调用
     */
    selectFn() {
        if (this.item.href) {
            this.openHref(this.item.href);
            this.element.querySelector('.ti3-leftmenu-level1-item')
                .blur();
            return;
        }
        const oldactive = this.leftmenu.active;
        if (this.hasChildren()) {
            this.showChildren = !this.showChildren;
            this.isActived = !this.showChildren && this.hasActivedChildren();
            if (this.showChildren) {
                for (const level1Items of this.leftmenu.level1Items) {
                    if (level1Items === this) {
                        continue;
                    }
                    if (level1Items.showChildren) {
                        level1Items.showChildren = false;
                        if (level1Items.hasActivedChildren()) {
                            level1Items.isActived = true;
                        }
                        break;
                    }
                }
            }
        }
        else {
            if (this.leftmenu.routable) {
                // 点击当前已经激活的item时，刷新对应路由
                if (this.item === oldactive) {
                    this.leftmenu.triggerReload(this.item);
                }
                else {
                    // 点击其他项需要进行跳转，来触发路由守卫，实际是否跳转取决于路由守卫返回值。
                    this.leftmenu.navigate(this.item);
                }
            }
            else {
                if (this.item !== oldactive) {
                    this.leftmenu.active = this.item;
                    this.leftmenu.activeChange.emit(this.item);
                    this.isActived = true;
                }
            }
        }
    }
    /**
     * @ignore
     * 在 TiLeftmenuComponent.ts 中调用了
     */
    setShowChildren() {
        // 初始化时，子菜单中有当前选中状态时，显示子菜单
        this.showChildren = this.hasActivedChildren();
    }
    /**
     * @ignore
     * 在模板上使用
     */
    hasChildren() {
        return this.children && this.children.length > 0;
    }
    /**
     * @ignore
     * 在模板上使用
     */
    hasActivedChildren() {
        if (!this.hasChildren()) {
            return false;
        }
        const result = this.children.filter((level2) => {
            return level2.item === this.leftmenu.active;
        });
        return result.length > 0;
    }
    /**
     * @ignore
     * 设置当前菜单是否处于激活状态，下边两种情况下将当前菜单设置为激活状态：
     *
     * 有子菜单时，当子菜单有有激活状态项并且子菜单关闭状态情况下；
     *
     * 没有子菜单时，当前菜单就是激活菜单项。
     */
    setActiveState() {
        this.isActived = (this.hasActivedChildren() && !this.showChildren)
            || this.item === this.leftmenu.active;
    }
    /**
     * @ignore
     */
    onStateIconClick() {
        Util.trigger(this.leftmenuItem.element, 'click');
    }
    /**
     * @ignore
     * 如果有链接，跳转新页面
     */
    openHref(href) {
        const newTab = window.open(this.domSanitizer.sanitize(SecurityContext.URL, href), '_blank');
        // IE 下有时 newTab 不存在
        if (newTab) {
            newTab.opener = null;
        }
    }
}
TiLeftmenuLevel1Component.decorators = [
    { type: Component, args: [{
                selector: 'ti-leftmenu-level1',
                template: "<div [ngClass]=\"{'ti3-leftmenu-level1-active-item' : isActived ,\r\n                 'ti3-leftmenu-level1-open-item' : showChildren}\"\r\n     class=\"ti3-leftmenu-level1-item\"\r\n     tabindex=\"0\"\r\n     tiOutline\r\n     (click)=\"selectFn()\"\r\n     (keyup.enter)=\"selectFn()\"\r\n     [id]=\"appendId('leftmenu_level1')\">\r\n\r\n        <ng-content select=\"ti-leftmenu-item\"></ng-content>\r\n        <!-- \u5C0F\u4E09\u89D2 -->\r\n        <span class=\"ti3-leftmenu-triangle\"\r\n              [ngClass]=\"{'ti3-leftmenu-triangle-up' : showChildren,\r\n                          'ti3-leftmenu-triangle-down' : !showChildren}\"\r\n              *ngIf=\"hasChildren() && !item.href\"\r\n              (click)=\"onStateIconClick()\"></span>\r\n        <!-- \u94FE\u63A5\u56FE\u6807 -->\r\n        <span *ngIf=\"item.href\" class=\"ti3-icon-action-binding ti3-icon ti3-leftmenu-href\"></span>\r\n</div>\r\n<div [hidden]=\"!showChildren\" [ngClass]=\"{'ti3-leftmenu-level2-container': showChildren}\">\r\n    <ng-content></ng-content>\r\n</div>\r\n",
                host: {
                    '[class.ti3-leftmenu-level1]': 'true',
                    '[class.ti3-leftmenu-level1-dividing]': 'item.showDividingLine'
                }
            },] }
];
TiLeftmenuLevel1Component.ctorParameters = () => [
    { type: TiLeftmenuComponent },
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: TiLeftmenuGroupComponent, decorators: [{ type: Optional }] },
    { type: DomSanitizer }
];
TiLeftmenuLevel1Component.propDecorators = {
    item: [{ type: Input }],
    leftmenuItem: [{ type: ContentChild, args: [TiLeftmenuItemComponent, /* TODO: add static flag */ { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,