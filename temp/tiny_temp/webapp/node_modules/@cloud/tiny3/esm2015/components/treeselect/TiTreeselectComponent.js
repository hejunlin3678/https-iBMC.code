import { Component, ElementRef, Input, ViewChild } from '@angular/core';
import { TiFormComponent } from '../base/TiBaseModule';
import { TiTreeUtil } from '../tree/TiTreeModule';
import { TiDominatorComponent } from '../dominator/TiDominatorModule';
import { TiDropComponent } from '../drop/TiDropModule';
import { TiSearchboxNotsearchComponent } from '../searchbox/TiSearchboxModule';
import { TiLocale } from '../../locale/TiLocaleModule';
import { Util } from '../../utils/Util';
import { TiSelectComponent } from '../select/TiSelectModule';
/**
 * Treeselect树选择下拉组件
 *
 * 支持单选/多选，全选，搜索，懒加载。
 *
 * 单选主要功能为从Tree组件数据中选择某一条数据，单选与Tree功能相同，只是视觉呈现不同。
 *
 * 多选主要功能是从Tree组件数据中任意选择多条数据，多选与Tree功能相同，只是视觉呈现不同。
 *
 * 该组件继承自TiSelectComponent，其中
 *
 * 输入属性：clearable、labelKey、searchKeys、tipPosition、panelMaxHeight和valueKey暂不支持；
 *
 * 输出属性：clear不支持（单选和多选都采用标签方式展示，所以不支持单选情况下的clear事件）
 *
 * <example-url>../tiny3demo/#/treeselect/treeselect-all</example-url>
 */
export class TiTreeselectComponent extends TiSelectComponent {
    constructor() {
        super(...arguments);
        /**
         * 下拉面板的高度，默认展示8条
         */
        this.dropMaxHeight = (30 + 1) * 8;
        /**
         * @ignore 全选框的半选中状态
         */
        this.indeterminate = false;
        /**
         * @ignore 全选中
         */
        this.isAllSelected = false;
        /**
         * @ignore 搜索提示文本
         */
        this.searchPlaceholder = TiLocale.getLocaleWords().tiSelect.search;
        /**
         * @ignore 搜索内容
         */
        this.searchText = '';
        /**
         * @ignore 是否处于搜索状态
         */
        this.isInSearch = false;
    }
    // 主干深拷贝，叶子浅拷贝
    // 因为搜索结果里，叶子节点的勾选效果，需要保留在原始数据。
    static leafShallowClone(arr) {
        if (typeof (arr) !== 'object' || arr === null || (arr.label !== undefined && arr.children === undefined)) {
            return arr;
        }
        const clone = Array.isArray(arr) ? arr.slice() : Object.assign({}, arr);
        const keys = Object.keys(clone);
        for (const key of keys) {
            clone[key] = TiTreeselectComponent.leafShallowClone(clone[key]);
        }
        return clone;
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngOnInit() {
        super.ngOnInit();
        // 强制装换，方便调用super.xxx
        this.dropsearchCom = this.dropCom;
        // 记录传入的数据，浅拷贝
        this.oldOptions = this.options;
    }
    ngOnChanges(changes) {
        // 解决延迟或者动态设置options，树组件未渲染的问题
        if (changes['options'] && !changes['options'].firstChange) {
            // 重新记录传入的数据
            this.oldOptions = changes['options'].currentValue;
        }
    }
    // tslint:disable-next-line: use-life-cycle-interface
    ngAfterViewChecked() {
        if (this.searchable !== this.oldSearchable) {
            this.oldSearchable = this.searchable;
            if (this.searchable) {
                this.setFocusableElems(this.dominatorCom.getFocusableElems()
                    .concat(this.searchboxCom.getFocusableElems())
                    .concat(this.dropCom.nativeElement));
            }
            else {
                this.setFocusableElems(this.dominatorCom.getFocusableElems()
                    .concat(this.dropCom.nativeElement));
            }
        }
        // 调用父类逻辑afterViewChecked才去设置autofocs
        super.ngAfterViewChecked();
    }
    /**
     * @ignore drop高度被压缩时，重新设置下拉面板的高度
     */
    restyleDropMaxHeight() {
        let dropCurMaxHeight = parseInt(this.dropCom.nativeElement.style.maxHeight, 10);
        let dropMaxHeightAdapted = this.dropMaxHeight;
        if (!isNaN(dropCurMaxHeight)) {
            // 减去搜索框高度和间距的和
            if (this.searchable) {
                dropCurMaxHeight -= TiTreeselectComponent.SEARCHBOX_HEIGHT;
            }
            if (dropCurMaxHeight < this.dropMaxHeight) {
                dropMaxHeightAdapted = dropCurMaxHeight;
            }
        }
        this.renderer.setStyle(this.dataTemplate.nativeElement, 'max-height', dropMaxHeightAdapted + 'px');
    }
    ngOnModelChange() {
        if (this.multiple) {
            // 多选时，重新设置下拉面板定位
            this.setPosition();
            if (this.selectAll) {
                // 允许全选时，设置全选框状态
                this.setAllSelectCheckboxState();
            }
        }
    }
    /**
     * @ignore 设置下拉面板定位
     */
    setPosition(optionsChange) {
        setTimeout(() => {
            if (optionsChange) {
                this.dropCom.resetPosition();
            }
            else {
                this.dropCom.setPosition();
            }
            this.restyleDropMaxHeight();
        }, 0);
    }
    /**
     * @ignore 关闭下拉面板并转移焦点
     */
    close() {
        this.dropCom.hide();
        // 焦点转移至dominator
        if (this.searchable) {
            this.dominatorCom.focus();
        }
    }
    /**
     * @ignore 仅仅关闭下拉面板
     */
    closeWithoutFocus() {
        this.dropCom.hide();
    }
    /**
     * @ignore 打开下拉面板
     */
    open() {
        // 初始化最大高度
        this.renderer.setStyle(this.dataTemplate.nativeElement, 'max-height', this.dropMaxHeight + 'px');
        this.dropCom.show();
        this.restyleDropMaxHeight();
        // 焦点转移至搜索框
        if (this.searchable) {
            this.searchboxCom.focus();
        }
    }
    /**
     * 尝试打开下拉面板
     */
    wantOpen() {
        super.wantOpen();
    }
    /**
     * @ignore 点击ti-dominator触发的事件
     * 点击下拉面板，展开或者关闭面板
     */
    onClickDominator() {
        if (this.disabled) {
            return;
        }
        if (!this.dropCom.isShow) {
            // 清空搜索内容
            this.searchText = '';
            this.searchTextChange(this.searchText);
            this.wantOpen();
        }
        else {
            this.close();
        }
    }
    /**
     * @ignore 删除ti-dominator选中项时触发的事件
     * 需要取消树节点的选中
     */
    onDeleteDominatorTag(item) {
        const deletedItem = item.item;
        // 1.取消选中当前节点、设置子节点及祖先节点的选中情况。从model中删除时，item.item.checked还是为true，要设置为false
        this.setSelectState(deletedItem, !deletedItem.checked);
        // 2.设置为非全选
        this.isAllSelected = false;
        // 3.设置全选框状态
        if (this.multiple && this.selectAll) {
            item.model.length === 0 ? this.indeterminate = false : this.indeterminate = true;
        }
    }
    /**
     * @ignore ti-searchbox-notsearch搜索框内容变化时触发的事件
     */
    searchTextChange(searchText) {
        if (Util.isEmptyString(searchText)) {
            this.options = this.oldOptions;
            this.isInSearch = false;
        }
        else {
            // this.oldOptions 叶子浅拷贝
            const searchResult = TiTreeselectComponent.leafShallowClone(this.oldOptions);
            TiTreeUtil.search(searchResult, (cnode) => {
                return (cnode.label.indexOf(this.searchText) >= 0);
            });
            // 展开整个树
            TiTreeUtil.traverse(searchResult, (node) => {
                node.expanded = true;
            });
            this.options = searchResult;
            this.isInSearch = true;
        }
        if (this.multiple && this.selectAll) {
            this.setAllSelectCheckboxState();
        }
        // 重新设置面板定位
        this.setPosition(true);
    }
    /**
     * @ignore 从model中获取option所在的索引
     */
    getItemIndexFromModel(option) {
        let index = -1;
        index = this.model.findIndex((item) => {
            // 判断item和option的引用是否相同即可
            return (item === option);
        });
        return index;
    }
    /**
     * @ignore 获取需要放到model中的节点，根据规范，如果子节点全部选中了，需要在model中放入父节点或者祖先节点。找到第一个checked为true的节点即可
     * node: 树组件select事件中的参数
     */
    getRealSelectedNode(node) {
        // tslint:disable-next-line: no-null-keyword
        let selectedNode = null;
        const parentNode = TiTreeUtil.getParentNode(this.oldOptions, node);
        (parentNode && parentNode.checked === true) ? selectedNode = this.getRealSelectedNode(parentNode) : selectedNode = node;
        return selectedNode;
    }
    /**
     * @ignore 获取需要从model移除的节点，根据规范，如果某个子节点取消选中了，那么可能是它的父节点或祖先节点或所有子节点从model中被移除
     * node：树组件select事件的参数
     */
    getRealUnselectedNode(node) {
        // tslint:disable-next-line: no-null-keyword
        let unselectedNode = null;
        let parentNode = TiTreeUtil.getParentNode(this.oldOptions, node);
        if (this.getItemIndexFromModel(node) !== -1) {
            // 需要从model中移除的节点是node本身
            unselectedNode = node;
        }
        else {
            // 需要从model中移除的节点是node父节点或祖先节点
            // 当节点处于半选状态时,点击节点的复选框,节点状态为选中,否则为非选中,所以要先判断parentNode是否存在
            while (parentNode && this.getItemIndexFromModel(parentNode) === -1) {
                parentNode = TiTreeUtil.getParentNode(this.oldOptions, parentNode);
            }
            // parentNode可能为undefined
            unselectedNode = parentNode;
        }
        return unselectedNode;
    }
    /**
     * @ignore 取消选中时，获取被选中的子节点，根据规范，父节点或祖先节点被选中之后，如果取消了某个子节点的选中，那么需要把它的所有选中的子节点加入model中
     * unselectedNode：需要从model中移除的节点
     */
    // tslint:disable-next-line: prefer-function-over-method
    getSelectedChildren(unselectedNode) {
        let selectedChildren = [];
        if (unselectedNode.children) {
            unselectedNode.children.forEach((child) => {
                if (child.checked === true) {
                    selectedChildren.push(child);
                }
                else {
                    selectedChildren = selectedChildren.concat(this.getSelectedChildren(child));
                }
            });
        }
        return selectedChildren;
    }
    /**
     * @ignore 根据checked的值，设置option节点及其子节点和祖先节点的选中状态
     * option: 选中的节点；checked：option.checked属性，true/false
     */
    setSelectState(option, checked) {
        // 对oldOptions进行操作，将搜索时的结果映射回来
        TiTreeUtil.traverse(this.oldOptions, (node) => {
            if (node === option) {
                node.checked = checked;
                if (checked === true) {
                    TiTreeUtil.selectAllChildren(node);
                    TiTreeUtil.selectParents(node, this.oldOptions, true);
                }
                else {
                    TiTreeUtil.deSelectAllChildren(node);
                    TiTreeUtil.deSelectParents(node, this.oldOptions);
                }
            }
        });
    }
    /**
     * @ignore 选中某个节点后，更新this.model
     * option: 选中的节点
     */
    setModelWhenSelected(option) {
        // 1.获取option最后一个被选中的祖先节点
        const selectedNode = this.getRealSelectedNode(option);
        // 2.从model中删除selectNode的所有子节点，一直到叶子节点
        TiTreeUtil.traverse([selectedNode], (node) => {
            let deleteIndex = this.getItemIndexFromModel(node);
            while (deleteIndex !== -1) {
                this.model.splice(deleteIndex, 1);
                deleteIndex = this.getItemIndexFromModel(node);
            }
        });
        // 3.将selectedNode加入到this.model中
        if (this.getItemIndexFromModel(selectedNode) === -1) {
            this.model.push(selectedNode);
        }
    }
    /**
     * @ignore 取消选中某个节点后，更新this.model
     * option: 被取消选中的节点
     */
    setModelWhenUnselected(option) {
        // 1.获取需要从model中删除的节点
        const unselectedNode = this.getRealUnselectedNode(option);
        // 2.更新model
        if (unselectedNode) {
            // 2.1unselectedNode为option或option的祖先节点
            const deleteIndex = this.getItemIndexFromModel(unselectedNode);
            this.model.splice(deleteIndex, 1);
            // 将option所有选中的子节点存放到this.model中
            if (unselectedNode !== option) {
                const selectedChildren = this.getSelectedChildren(unselectedNode);
                this.model = this.model.concat(selectedChildren);
            }
        }
        else {
            // 2.2unselectedNode为undefined，这种情况下，只需从model中删除option所有选中的子节点
            TiTreeUtil.traverse([option], (node) => {
                const deleteIndex = this.getItemIndexFromModel(node);
                if (deleteIndex !== -1) {
                    this.model.splice(deleteIndex, 1);
                }
            });
        }
    }
    /**
     * @ignore 处于搜索状态下，更新model
     */
    setModelWhenSearch(data, checked) {
        // 或者所有处于checked状态的叶子节点
        let selectedLeafNodes = [];
        selectedLeafNodes = this.getLeafNodes(data, checked);
        // 根据每个叶子节点更新model
        for (const leafNode of selectedLeafNodes) {
            // 设置oldOptions各节点状态
            this.setSelectState(leafNode, checked);
            checked ? this.setModelWhenSelected(leafNode) : this.setModelWhenUnselected(leafNode);
        }
    }
    /**
     * @ignore 获取data里面选中或者未选中的全部叶子节点
     * data：搜索范围，checked：true/false
     */
    // tslint:disable-next-line: prefer-function-over-method
    getLeafNodes(data, checked) {
        const leafNodes = [];
        TiTreeUtil.traverse(data, (node) => {
            if (TiTreeUtil.isLeaf(node) && node.checked === checked) {
                leafNodes.push(node);
            }
        });
        return leafNodes;
    }
    /**
     * @ignore 设置全选checkbox的状态
     */
    setAllSelectCheckboxState() {
        // 1.假设节点都被选中或都没被选中
        let isAllSelected = true;
        let isAllUnSelected = true;
        // 2.判断是否所有节点都被选中或都没被选中，disabled状态下的节点不用统计
        TiTreeUtil.traverse(this.options, (node) => {
            // 2.1 有节点没被选中
            if (!node.disabled && node.checked !== true) {
                isAllSelected = false;
            }
            // 2.2 有节点被选中或半选中
            if (!node.disabled && (node.checked === true || node.checked === 'indeterminate')) {
                isAllUnSelected = false;
            }
        });
        // 3.设置checkbox状态
        this.isAllSelected = isAllSelected;
        this.indeterminate = !isAllSelected && !isAllUnSelected;
    }
    /**
     * @ignore ti-tree的select事件
     */
    onTreeSelect(option) {
        // 节点被禁用，不做操作，直接返回
        if (option.disabled === true) {
            return;
        }
        // 1.触发select事件
        this.select.emit(option);
        if (!this.multiple) {
            // 2.1单选，直接替换model
            TiTreeUtil.traverse(this.oldOptions, (node) => {
                if (node === option) {
                    node.checked = true;
                    this.model = [option];
                }
                else {
                    node.checked = false;
                }
            });
            // 关闭下拉面板
            this.close();
        }
        else {
            // 2.2多选
            if (!this.isInSearch) {
                // 2.2.1非搜索状态
                // 设置oldOptions各节点状态
                this.setSelectState(option, option.checked);
                if (option.checked === true) {
                    this.setModelWhenSelected(option);
                }
                else {
                    this.setModelWhenUnselected(option);
                }
            }
            else {
                // 2.2.2搜索状态
                this.setModelWhenSearch([option], option.checked);
            }
            // 2.3手动触发ngModelChange事件，splice和push无法触发
            this.model = this.model.concat();
            // 2.4设置全选状态
            if (this.selectAll) {
                this.setAllSelectCheckboxState();
            }
        }
        // 3.重新设置ti-dominator高度
        this.setPosition();
    }
    /**
     * @ignore 全选复选框的按钮事件
     */
    onSelectAllChange(isAllSelected) {
        // 1.将当前tree节点全部选中 或 不选中
        TiTreeUtil.traverse(this.options, (node) => {
            if (!node.disabled) {
                node.checked = isAllSelected;
            }
        });
        // 2.设置model
        if (!this.isInSearch) {
            // 2.1 未处于搜索状态下，使用concat进行单层深拷贝
            (!this.isAllSelected) ? this.model = this.options.concat() : this.model = [];
        }
        else {
            // 2.2  处于搜索状态下
            this.setModelWhenSearch(this.options, isAllSelected);
            // 手动触发ngModelChange事件
            this.model = this.model.concat();
        }
    }
    /**
     * @ignore 全选复选框的点击事件
     */
    onClickSelectAll(event) {
        // 点击时，this.isAllSelected为false，所以要取反
        this.onSelectAllChange(!this.isAllSelected);
        event.preventDefault();
    }
    /**
     * @ignore
     * 失焦情况下，仅关闭面板，不做聚焦等处理
     */
    onBlur() {
        this.closeWithoutFocus();
    }
    /**
     * @ignore
     * 鼠标点击到空白，原本会失焦，此处通过阻止默认事件的方式进行了处理
     */
    onMouseDownDropOuter(event) {
        event.preventDefault();
    }
    /**
     * @ignore
     * #datatemplate内部滚动条会引起外部滚动条事件触发，引起弹框内的树下拉组件无法使用鼠标拖动滚动条，因此此处阻止事件冒泡
     */
    onMouseWheel(event) {
        event.stopPropagation();
    }
}
// 搜索框的高度
TiTreeselectComponent.SEARCHBOX_HEIGHT = 30;
TiTreeselectComponent.decorators = [
    { type: Component, args: [{
                selector: 'ti-treeselect',
                template: "<ti-dominator\r\n        [dropshow]=\"dropCom.isShow\"\r\n        [multiple]='true'\r\n        [placeholder]='placeholder'\r\n        [disabled]=\"disabled\"\r\n        [labelKey]=\"labelKey\"\r\n        [maxLine]=\"maxLine\"\r\n        [selectedTipPosition]='selectedTipPosition'\r\n        [id]=\"appendId('dominator')\"\r\n        [(ngModel)]=\"model\"\r\n        (click)=\"onClickDominator()\"\r\n        (delete)=\"onDeleteDominatorTag($event)\">\r\n</ti-dominator>\r\n\r\n<ti-drop\r\n        [dominatorElem]='dominatorCom.nativeElement'\r\n        [dominatorSpace]=\"dominatorSpace\"\r\n        [panelWidth]=\"panelWidth\"\r\n        [id]=\"appendId('drop')\">\r\n        <!-- \u641C\u7D22 -->\r\n        <ti-searchbox-notsearch #searchboxCom *ngIf='searchable' noBorder\r\n                class=\"ti3-treeselect-searchbox\"\r\n                [placeholder]='searchPlaceholder'\r\n                [(ngModel)]='searchText'\r\n                [id]=\"appendId('searchbox')\"\r\n                (ngModelChange)=\"searchTextChange($event)\">\r\n        </ti-searchbox-notsearch>\r\n        <section #datatemplate class='ti3-treeselect-datacontainer'\r\n                (mousedown)=\"onMouseDownDropOuter($event)\"\r\n                (mousewheel)=\"onMouseWheel($event)\"\r\n                (DOMMouseScroll)=\"onMouseWheel($event)\">\r\n                <ng-container *ngIf='(options && options.length > 0) else nodatatemplate'>\r\n                        <!-- \u5168\u9009 -->\r\n                        <li *ngIf='multiple && selectAll'\r\n                                class=\"ti3-treeselect-selectall-option\"\r\n                                (click)=\"onClickSelectAll($event)\"\r\n                                [id]=\"appendId('selectAll')\">\r\n                                <input type=\"checkbox\" tiCheckbox [indeterminate]=\"indeterminate\" [(ngModel)]=\"isAllSelected\" (ngModelChange)=\"onSelectAllChange($event)\" label=\"\u5168\u9009\">\r\n                        </li>\r\n                        <ti-tree\r\n                                [id]=\"appendId('tree')\"\r\n                                [data]='options'\r\n                                [parentCheckable]='true'\r\n                                [multiple]='multiple'\r\n                                (select)='onTreeSelect($event)'\r\n                                [changedByCheckbox]=\"false\">\r\n                        </ti-tree>\r\n                </ng-container>\r\n        </section>\r\n</ti-drop>\r\n\r\n<!-- no data\u6A21\u677F -->\r\n<ng-template #nodatatemplate>\r\n        <div class=\"ti3-treeselect-dropdown-no-data\" [innerHtml]=\"noDataText\"></div>\r\n</ng-template>\r\n",
                providers: [TiFormComponent.getValueAccessor(TiTreeselectComponent)],
                host: {
                    '(blur)': 'onBlur()'
                },
                styles: [".ti3-compnent-container-border,:host{-ms-box-sizing:border-box;border:1px solid;border-radius:var(--ti-input-border-radius);box-sizing:border-box;display:inline-block}.ti3-compnent-container-border:not([disabled]),:host:not([disabled]){background-color:var(--ti-input-bg-color);border-color:var(--ti-input-border-color)}.ti3-compnent-container-border:not([disabled]):hover,:host:not([disabled]):hover{border-color:var(--ti-input-border-color-hover)}.ti3-compnent-container-border:not([disabled])[tiFocused],:host:not([disabled])[tiFocused]{border-color:var(--ti-input-border-color-focus)}.ti3-compnent-container-border[disabled],:host[disabled]{background-color:var(--ti-input-bg-color-disabled);border-color:var(--ti-input-border-color-disabled);cursor:not-allowed!important}::ng-deep :root{--ti-treeselect-selectall-width:100%}:host{width:280px}ti-drop{outline:none}.ti3-treeselect-selectall-option{background-color:var(--ti-common-color-bg-white-normal);color:inherit;cursor:pointer;line-height:var(--ti-common-line-height-number);list-style:none;padding:var(--ti-common-space-6) var(--ti-common-space-2x);text-align:left}.ti3-treeselect-selectall-option:hover{background-color:var(--ti-common-color-bg-white-emphasize);color:var(--ti-common-color-text-highlight)}.ti3-treeselect-searchbox{width:var(--ti-treeselect-selectall-width)!important}.ti3-treeselect-datacontainer{box-sizing:border-box;max-height:inherit;overflow-x:hidden;overflow-y:auto;padding:var(--ti-common-space-base) 0}.ti3-treeselect-dropdown-no-data{color:var(--ti-common-color-text-disabled);cursor:not-allowed;line-height:var(--ti-common-line-height-number);padding:var(--ti-common-space-6) var(--ti-input-padding-horizontal)}"]
            },] }
];
TiTreeselectComponent.propDecorators = {
    dropMaxHeight: [{ type: Input }],
    dropCom: [{ type: ViewChild, args: [TiDropComponent, { static: true },] }],
    dominatorCom: [{ type: ViewChild, args: [TiDominatorComponent, { static: true },] }],
    searchboxCom: [{ type: ViewChild, args: ['searchboxCom',] }],
    dataTemplate: [{ type: ViewChild, args: ['datatemplate',] }]
};
//# sourceMappingURL=data:application/json;base64,