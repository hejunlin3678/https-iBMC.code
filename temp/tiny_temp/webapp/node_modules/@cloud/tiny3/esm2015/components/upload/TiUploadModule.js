import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TiFileSelectDirective } from './TiFileSelectDirective';
import { TiUploadComponent } from './TiUploadComponent';
import { TiDisabledDirective } from './TiDisabledDirective';
import { TiTipModule } from '../../directives/tip/TiTipModule';
import { TiProgresspieModule } from '../progresspie/TiProgresspieModule';
import { TiUploadServiceModule } from '../../services/upload/TiUploadServiceModule';
import { TiIconModule } from '../icon/TiIconModule';
import { TiOverflowModule } from '../../directives/overflow/TiOverflowModule';
import { TiValidationModule } from '../../directives/validation/TiValidationModule';
import { TiProgressbarModule } from '../progressbar/TiProgressbarModule';
import { TiUploadbaseComponent } from './TiUploadbaseComponent';
import { TiUploadimageComponent } from './TiUploadimageComponent';
import { TiModalModule } from '../../services/modal/TiModalModule';
import { TiImagepreviewModule } from '../imagepreview/TiImagepreviewModule';
import { TiButtonModule } from '../button/TiButtonModule';
import { TiOutlineModule } from '../../directives/outline/TiOutlineModule';
export class TiUploadModule {
}
TiUploadModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    TiIconModule,
                    TiTipModule,
                    TiProgresspieModule,
                    TiUploadServiceModule,
                    TiOverflowModule,
                    TiValidationModule,
                    TiProgressbarModule,
                    TiModalModule,
                    TiImagepreviewModule,
                    TiButtonModule,
                    TiOutlineModule
                ],
                exports: [TiFileSelectDirective, TiUploadComponent, TiDisabledDirective, TiUploadbaseComponent, TiUploadimageComponent],
                declarations: [TiFileSelectDirective, TiUploadComponent, TiDisabledDirective, TiUploadbaseComponent, TiUploadimageComponent]
            },] }
];
export { TiUploadComponent } from './TiUploadComponent';
export { TiFileSelectDirective } from './TiFileSelectDirective';
export { TiDisabledDirective } from './TiDisabledDirective';
export { TiUploadbaseComponent } from './TiUploadbaseComponent';
export { TiUploadimageComponent } from './TiUploadimageComponent';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGlVcGxvYWRNb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9AY2xvdWQvdGlueTMvY29tcG9uZW50cy91cGxvYWQvVGlVcGxvYWRNb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQy9ELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ3BGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUM5RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNwRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUN6RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDbkUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDNUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzFELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQW9CM0UsTUFBTSxPQUFPLGNBQWM7OztZQWxCMUIsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRTtvQkFDUCxZQUFZO29CQUNaLFlBQVk7b0JBQ1osV0FBVztvQkFDWCxtQkFBbUI7b0JBQ25CLHFCQUFxQjtvQkFDckIsZ0JBQWdCO29CQUNoQixrQkFBa0I7b0JBQ2xCLG1CQUFtQjtvQkFDbkIsYUFBYTtvQkFDYixvQkFBb0I7b0JBQ3BCLGNBQWM7b0JBQ2QsZUFBZTtpQkFDaEI7Z0JBQ0QsT0FBTyxFQUFFLENBQUMscUJBQXFCLEVBQUUsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUUscUJBQXFCLEVBQUUsc0JBQXNCLENBQUM7Z0JBQ3ZILFlBQVksRUFBRSxDQUFDLHFCQUFxQixFQUFFLGlCQUFpQixFQUFFLG1CQUFtQixFQUFFLHFCQUFxQixFQUFFLHNCQUFzQixDQUFDO2FBQzdIOztBQUdELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzVELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgVGlGaWxlU2VsZWN0RGlyZWN0aXZlIH0gZnJvbSAnLi9UaUZpbGVTZWxlY3REaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBUaVVwbG9hZENvbXBvbmVudCB9IGZyb20gJy4vVGlVcGxvYWRDb21wb25lbnQnO1xyXG5pbXBvcnQgeyBUaURpc2FibGVkRGlyZWN0aXZlIH0gZnJvbSAnLi9UaURpc2FibGVkRGlyZWN0aXZlJztcclxuaW1wb3J0IHsgVGlUaXBNb2R1bGUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL3RpcC9UaVRpcE1vZHVsZSc7XHJcbmltcG9ydCB7IFRpUHJvZ3Jlc3NwaWVNb2R1bGUgfSBmcm9tICcuLi9wcm9ncmVzc3BpZS9UaVByb2dyZXNzcGllTW9kdWxlJztcclxuaW1wb3J0IHsgVGlVcGxvYWRTZXJ2aWNlTW9kdWxlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvdXBsb2FkL1RpVXBsb2FkU2VydmljZU1vZHVsZSc7XHJcbmltcG9ydCB7IFRpSWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vVGlJY29uTW9kdWxlJztcclxuaW1wb3J0IHsgVGlPdmVyZmxvd01vZHVsZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvb3ZlcmZsb3cvVGlPdmVyZmxvd01vZHVsZSc7XHJcbmltcG9ydCB7IFRpVmFsaWRhdGlvbk1vZHVsZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvdmFsaWRhdGlvbi9UaVZhbGlkYXRpb25Nb2R1bGUnO1xyXG5pbXBvcnQgeyBUaVByb2dyZXNzYmFyTW9kdWxlIH0gZnJvbSAnLi4vcHJvZ3Jlc3NiYXIvVGlQcm9ncmVzc2Jhck1vZHVsZSc7XHJcbmltcG9ydCB7IFRpVXBsb2FkYmFzZUNvbXBvbmVudCB9IGZyb20gJy4vVGlVcGxvYWRiYXNlQ29tcG9uZW50JztcclxuaW1wb3J0IHsgVGlVcGxvYWRpbWFnZUNvbXBvbmVudCB9IGZyb20gJy4vVGlVcGxvYWRpbWFnZUNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFRpTW9kYWxNb2R1bGUgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9tb2RhbC9UaU1vZGFsTW9kdWxlJztcclxuaW1wb3J0IHsgVGlJbWFnZXByZXZpZXdNb2R1bGUgfSBmcm9tICcuLi9pbWFnZXByZXZpZXcvVGlJbWFnZXByZXZpZXdNb2R1bGUnO1xyXG5pbXBvcnQgeyBUaUJ1dHRvbk1vZHVsZSB9IGZyb20gJy4uL2J1dHRvbi9UaUJ1dHRvbk1vZHVsZSc7XHJcbmltcG9ydCB7IFRpT3V0bGluZU1vZHVsZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvb3V0bGluZS9UaU91dGxpbmVNb2R1bGUnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBpbXBvcnRzOiBbXHJcbiAgICBDb21tb25Nb2R1bGUsXHJcbiAgICBUaUljb25Nb2R1bGUsXHJcbiAgICBUaVRpcE1vZHVsZSxcclxuICAgIFRpUHJvZ3Jlc3NwaWVNb2R1bGUsXHJcbiAgICBUaVVwbG9hZFNlcnZpY2VNb2R1bGUsXHJcbiAgICBUaU92ZXJmbG93TW9kdWxlLFxyXG4gICAgVGlWYWxpZGF0aW9uTW9kdWxlLFxyXG4gICAgVGlQcm9ncmVzc2Jhck1vZHVsZSxcclxuICAgIFRpTW9kYWxNb2R1bGUsXHJcbiAgICBUaUltYWdlcHJldmlld01vZHVsZSxcclxuICAgIFRpQnV0dG9uTW9kdWxlLFxyXG4gICAgVGlPdXRsaW5lTW9kdWxlXHJcbiAgXSxcclxuICBleHBvcnRzOiBbVGlGaWxlU2VsZWN0RGlyZWN0aXZlLCBUaVVwbG9hZENvbXBvbmVudCwgVGlEaXNhYmxlZERpcmVjdGl2ZSwgVGlVcGxvYWRiYXNlQ29tcG9uZW50LCBUaVVwbG9hZGltYWdlQ29tcG9uZW50XSxcclxuICBkZWNsYXJhdGlvbnM6IFtUaUZpbGVTZWxlY3REaXJlY3RpdmUsIFRpVXBsb2FkQ29tcG9uZW50LCBUaURpc2FibGVkRGlyZWN0aXZlLCBUaVVwbG9hZGJhc2VDb21wb25lbnQsIFRpVXBsb2FkaW1hZ2VDb21wb25lbnRdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUaVVwbG9hZE1vZHVsZSB7XHJcbn1cclxuZXhwb3J0IHsgVGlVcGxvYWRDb21wb25lbnQgfSBmcm9tICcuL1RpVXBsb2FkQ29tcG9uZW50JztcclxuZXhwb3J0IHsgVGlGaWxlU2VsZWN0RGlyZWN0aXZlIH0gZnJvbSAnLi9UaUZpbGVTZWxlY3REaXJlY3RpdmUnO1xyXG5leHBvcnQgeyBUaURpc2FibGVkRGlyZWN0aXZlIH0gZnJvbSAnLi9UaURpc2FibGVkRGlyZWN0aXZlJztcclxuZXhwb3J0IHsgVGlVcGxvYWRiYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9UaVVwbG9hZGJhc2VDb21wb25lbnQnO1xyXG5leHBvcnQgeyBUaVVwbG9hZGltYWdlQ29tcG9uZW50IH0gZnJvbSAnLi9UaVVwbG9hZGltYWdlQ29tcG9uZW50JztcclxuIl19