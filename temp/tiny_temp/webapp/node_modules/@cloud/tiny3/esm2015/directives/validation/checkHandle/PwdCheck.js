import { Util } from '../../../utils/Util';
import { TiPwdMsgComponent } from '../TiPwdMsgComponent';
import { BlurCheck } from './BlurCheck';
import { TiValidationDefaultConfig } from '../TiValidationConfig';
/**
 * @ignore
 */
export class PwdCheck extends BlurCheck {
    constructor(config, common) {
        super(config, common);
        this.config = config;
        this.common = common;
        const pwdConfig = this.config && this.config.passwordConfig;
        // 设置参数，用于规则提示组件数据组装
        this._setValidator(pwdConfig);
        this._setMsgItems();
        this._setLevelFn(pwdConfig);
    }
    onFocus(ele, formControl) {
        // 由于密码组件需要依赖于其他输入框，因此在focus时需要更新其状态
        formControl.control.updateValueAndValidity();
        super.onFocus(ele, formControl);
    }
    // 设置validator params和msg
    _setValidator(pwdConfig) {
        let pwdValidator = TiValidationDefaultConfig.pwdValidator;
        if (pwdConfig && pwdConfig.validator) { // validator定义情况下,处理validator
            const pwdValidatorConfig = pwdConfig.validator;
            if (Util.isUndefined(pwdValidatorConfig.rule) ||
                pwdValidatorConfig.rule === pwdValidator.rule) { // 依然使用默认规则情况下,只做参数合并
                pwdValidator = {
                    params: Object.assign(Object.assign({}, pwdValidator.params), pwdValidatorConfig.params),
                    message: Object.assign(Object.assign({}, pwdValidator.message), pwdValidatorConfig.message)
                };
            }
            else {
                pwdValidator = {
                    params: pwdValidatorConfig.params,
                    message: pwdValidatorConfig.message
                };
            }
        }
        this.validator = pwdValidator;
    }
    // 设置msgItems,msgItems数据格式为:{ruleKey: msgStr,...}
    // 其中msgStr为格式化后的页面可显示字串
    _setMsgItems() {
        const validatorConfig = this.validator;
        const msgConfig = validatorConfig.message;
        const paramsConfig = validatorConfig.params;
        let msgStr;
        const msgItems = {};
        // msgConfig中定义的规则提示才会在页面中显示
        for (const key in msgConfig) {
            if (msgConfig.hasOwnProperty(key)) {
                // 规则提示优先从config中读取,如果读取到的是无效字串,则从国际化默认配置中读取
                msgStr = msgConfig[key] || this.common.getMsg(key);
                // 如果对应的规则有参数的情况下,则根据参数做字串格式化
                if (paramsConfig && paramsConfig.hasOwnProperty(key)) {
                    msgStr = Util.formatEntry(msgStr, paramsConfig[key]);
                }
                msgItems[key] = msgStr;
            }
        }
        this.msgItems = msgItems;
    }
    // 设置levelFn:levelFn支持业务自定义
    _setLevelFn(pwdConfig) {
        let levelFn = TiValidationDefaultConfig.pwdLevelFn;
        if (pwdConfig && Util.isFunction(pwdConfig.levelFn)) {
            levelFn = pwdConfig.levelFn;
        }
        this.levelFn = levelFn;
    }
    addTip(ele, validationConf, formControl) {
        this.commonHandle.destroyTip(ele); // 清除先前提示信息
        const inputsObj = {
            msgItems: this.msgItems,
            validator: this.validator,
            control: formControl,
            levelFn: this.levelFn
        };
        // tip默认值设置
        const configAssigned = Object.assign({ tipPosition: TiValidationDefaultConfig.pwdTipPostion, tipMaxWidth: TiValidationDefaultConfig.pwdTipMaxWidth }, validationConf);
        this.common.generateTip(ele, TiPwdMsgComponent, configAssigned, inputsObj);
    }
}
//# sourceMappingURL=data:application/json;base64,