import { Directive, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';
import { animate, AnimationBuilder, style } from '@angular/animations';
import { TiBrowser } from '../../utils/Util';
/**
 * TiCollapseDirective指令主要功能为动态控制某一DOM节点的显示(展开)与隐藏(收起)
 *
 * <p><span style="color: red">使用此组件时需要开发者在项目模块(建议在根模块)
 * 中引入BrowserAnimationsModule。</span>这是因为此组件中使用了Angular动画，需要引入BrowserAnimationsModule，
 * 但是 BrowserAnimationsModule 不能在懒加载模块被重复引入，所以需要开发者来引入BrowserAnimationsModule，保证其引入一次。</p>
 *
 * <example-url>../tiny3demo/#/collapse/collapse-all</example-url>
 */
export class TiCollapseDirective {
    constructor(elementRef, renderer, builder) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.builder = builder;
        /**
         * 控制折叠面板的收起/展开
         */
        this.isCollapse = true; // 是否收起
        /**
         * 折叠面板在收起/展开结束后(即收起/展开动画结束后)的回调；
         * 回调的参数为布尔值，true: 收起结束后, false: 展开结束后
         */
        this.toggleDone = new EventEmitter();
        this.element = this.elementRef.nativeElement;
    }
    ngOnInit() {
        if (!TiBrowser.isIE() || TiBrowser.version() > 9) {
            // 创建展开时动效的实例
            this.expandPlayer = this.builder.build([
                style({ 'max-height': '0px', overflow: 'hidden' }),
                animate(TiCollapseDirective.ANIMATE_IN, style({ 'max-height': '2999px', overflow: 'visible' }))
            ])
                .create(this.element);
            // 创建收起时动效的实例
            this.collapsePlayer = this.builder.build([
                style({ 'max-height': '2999px', overflow: 'visible' }),
                animate(TiCollapseDirective.ANIMATE_OUT, style({ 'max-height': '0px', overflow: 'hidden' }))
            ])
                .create(this.element);
            // 初始没有动画效果
            if (this.isCollapse) {
                this.collapsePlayer.finish();
            }
            else {
                this.expandPlayer.finish();
            }
        }
        if (this.isCollapse) {
            this.collapse();
        }
        else {
            this.expand();
        }
    }
    ngOnChanges(changes) {
        const isCollapseObj = changes['isCollapse'];
        if (!isCollapseObj || isCollapseObj.firstChange) {
            return;
        }
        if (TiBrowser.isIE() && (TiBrowser.version() === 9)) {
            if (isCollapseObj.currentValue) {
                this.collapse();
            }
            else {
                this.expand();
            }
            this.toggleDone.emit(isCollapseObj.currentValue);
            return;
        }
        if (isCollapseObj.currentValue) {
            // 执行收起动画前一定要重置展开动画，否则会影响收起动画
            this.expandPlayer.reset();
            // 执行收起动画
            this.collapsePlayer.play();
            // 收起动画结束后，设置元素display:none
            this.collapsePlayer.onDone(() => {
                // 设置元素display:none必须在收起动画结束后，否则没有动画效果
                this.collapse();
                this.toggleDone.emit(true);
            });
        }
        else {
            // 执行展开动画前一定要重置收起动画，否则会影响展开动画
            this.collapsePlayer.reset();
            // 设置元素display:block
            this.expand();
            // 执行展开动画
            this.expandPlayer.play();
            this.expandPlayer.onDone(() => {
                this.toggleDone.emit(false);
            });
        }
    }
    expand() {
        this.renderer.setStyle(this.element, 'display', 'block');
    }
    collapse() {
        this.renderer.setStyle(this.element, 'display', 'none');
    }
}
TiCollapseDirective.ANIMATE_IN = '600ms cubic-bezier(0.755, 0.05, 0.855, 0.06)'; // easeInQuint
TiCollapseDirective.ANIMATE_OUT = '600ms cubic-bezier(0.23, 1, 0.32, 1)'; // easeOutQuint
TiCollapseDirective.decorators = [
    { type: Directive, args: [{
                selector: '[tiCollapse]'
            },] }
];
TiCollapseDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: AnimationBuilder }
];
TiCollapseDirective.propDecorators = {
    isCollapse: [{ type: Input, args: ['tiCollapse',] }],
    toggleDone: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,