import { Directive, ElementRef, forwardRef, Input, Renderer2 } from '@angular/core';
import { DefaultValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';
import { TiBrowser, Util } from '../../utils/Util';
/**
 * TiMask 格式化数字指令
 *
 * 该指令主要用于输入框中，限制用户只能输入数字，可以通过设置tiMask属性接口设置其数字的格式：身份证，手机号码等形式输入。
 *
 * 输入框中呈现的是格式化后的数字，但是通过ngModel取得的值为纯数字的值，如输入框中呈现的值为'123 456 789'，通过ngModel取得的值为'123456789'
 *
 * <example-url>../tiny3demo/#/maskinput/maskinput-all</example-url>
 */
export class TiMaskDirective extends DefaultValueAccessor {
    constructor(renderer, elementRef) {
        // super中第三个参数是DefaultValueAccessor中对文本段落(例如中文)输入的处理的一个标志位,
        // 表示是否为非安卓系统，在PC端此参数为true。后续如果要处理移动端，则可能需要动态根据此参数对
        // 文本段落(例如中文)输入做处理。
        super(renderer, elementRef, true);
        this.renderer = renderer;
        this.elementRef = elementRef;
        /**
         * 设置其数字的格式：身份证，手机号码等形式输入，例如手机号格式：'000 0000 0000'，
         * 其中 '0' 代表数字。
         */
        this.format = '000 0000 0000';
        this.composing = false; // 是否正在拼写拼音
        this.element = this.elementRef.nativeElement;
    }
    // 获取在format范围内的有效字符串
    static getClearValue(value, format) {
        const formatNumLen = format.replace(/[^0]/g, '').length;
        let clearValue = value.replace(/\D/g, '');
        clearValue = clearValue.slice(0, formatNumLen);
        return clearValue;
    }
    static formatValue(value, format) {
        if (!value) {
            return '';
        }
        const clearValue = TiMaskDirective.getClearValue(value, format);
        const clearValueLen = clearValue.length; // value长度
        let valueCharPosOffset = 0; // value字符位置增量
        let valueCharPos; // 循环中的value字符位置
        let newValue = '';
        let formatChar;
        for (let i = 0, len = format.length; i < len; i++) {
            valueCharPos = i - valueCharPosOffset;
            if (valueCharPos >= clearValueLen) { // value内容循环完成情况下,不进行处理
                break;
            }
            formatChar = format[i];
            if (formatChar === TiMaskDirective.NUM_SIGN) { // format字符为数字情况下的处理
                newValue += clearValue[valueCharPos];
            }
            else {
                // format字符非数字情况下的处理,此时value字段中增加format字符
                valueCharPosOffset++;
                newValue += formatChar;
            }
        }
        return newValue;
    }
    // model => view
    /**
     * @ignore
     */
    writeValue(value) {
        // 使用ngModel时，初始赋值第一次传入的value为null
        if (value === null) {
            return;
        }
        // format modelValue
        const formatValue = TiMaskDirective.formatValue(value, this.format);
        // Write formatted modelValue to view
        super.writeValue(formatValue);
        // 格式化后也需要通知修改模型值
        this.modelValue = this.getAntiFormatValue(formatValue);
        if (this.modelValue !== value) {
            if (Util.isUndefined(this.onChangeFn)) {
                // 在reactive-form中使用，初始化赋值调用writeValue时，
                // 此时registerOnChange还未被调用，onChangeFn还未被赋值，
                // 所以要使用setTimeout等onChangeFn被赋值后再调用
                setTimeout(() => {
                    this.onChangeFn(this.modelValue);
                }, 0);
            }
            else {
                this.onChangeFn(this.modelValue);
            }
        }
    }
    /**
     * @ignore
     */
    registerOnChange(fn) { this.onChangeFn = fn; }
    /**
     * @ignore
     * view => model
     */
    handleInput(value) {
        if (!this.composing) {
            // 在parser()中对view值进行格式化处理，再重写view的值；
            this.parser(value);
        }
    }
    /**
     * @ignore
     * 中文输入之前(在输入拼音前)
     */
    handleCompositionStart() {
        // 在IE和FF下中文输入法下，输入拼音时不会触发input事件，
        // 但是在Chrome下，输入拼音时会触发input事件，所以针对Chrome要做特殊处理，
        // 使其在输入拼音时不做格式化处理
        if (TiBrowser.isChrome()) {
            this.composing = true;
        }
    }
    /**
     * @ignore
     * 文本段完成输入或取消输入
     */
    handleCompositionEnd(value) {
        if (TiBrowser.isChrome()) {
            this.composing = false;
            // 在Chrome下compositionend比input执行滞后，
            this.parser(value);
        }
    }
    /**
     * @ignore
     */
    blur() {
        // 此处的onTouched继承于DefaultValueAccessor
        this.onTouched();
    }
    parser(value) {
        const formattedValue = TiMaskDirective.formatValue(value, this.format);
        this.setCtxPos(value, this.format);
        const ctxPos = this.ctxPos;
        // 设置viewValue及光标位置
        if (value !== formattedValue) {
            this.renderer.setProperty(this.element, 'value', formattedValue);
            // 设置光标位置：value非法及输入数字后需要变换位置情况下，需要设置光标位置
            if (this.element === document.activeElement) {
                this.element.setSelectionRange(ctxPos, ctxPos);
            }
        }
        const modelValue = this.getAntiFormatValue(formattedValue);
        if (modelValue !== this.modelValue) {
            this.onChangeFn(modelValue);
            this.modelValue = modelValue;
        }
    }
    // 获取反格式化后的value
    getAntiFormatValue(formattedValue) {
        return formattedValue.replace(/\D/g, '');
    }
    setCtxPos(value, format) {
        // 元素有光标情况下，设置元素光标位置
        this.initCtxPos();
        if (!value) {
            return;
        }
        // value非空情况下的处理
        this.valueCharPosOffset = 0; // value字符位置增量
        const ctxPos = this.ctxPos; // 初始化ctxPos，后续循环中会以此为光标位置作为对比值
        for (let i = 0, len = format.length; i < len; i++) {
            if (i - this.valueCharPosOffset >= value.length) { // value字符循环完成情况下,不进行后续处理
                break;
            }
            this.setCharPos(i, value, format, ctxPos);
        }
    }
    setCharPos(pos, value, format, ctxPos) {
        const valueCharPos = pos - this.valueCharPosOffset; // 循环中的value字符位置
        const valueChar = value[valueCharPos]; // 当前value字符
        const formatChar = format[pos]; // 当前format字符
        if (formatChar === TiMaskDirective.NUM_SIGN) { // format为数字情况下的处理
            this.setPosWithNum(value, valueChar, valueCharPos, ctxPos);
        }
        else { // format非数字情况处理
            this.setPosWithoutNum(valueChar, valueCharPos, formatChar, ctxPos);
        }
    }
    setPosWithNum(value, valueChar, valueCharPos, ctxPos) {
        if (valueChar.match(/\d/)) { // value字符相匹配情况下,不做处理
            return;
        }
        // value字符不匹配情况下,光标前移，直到找到下一个数字为止
        let valueCharNew;
        for (let j = valueCharPos, valueLen = value.length; j < valueLen; j++) {
            valueCharNew = value[j];
            if (valueCharNew.match(/\d/)) { // 找到value字符为数字的情况下，结束循环
                return;
            }
            // 找到value字符非数字情况下，过滤掉该字符，光标前移，value偏移量后移，下次循环跳过该字符的检索
            if (ctxPos && ctxPos >= j + 1) {
                this.ctxPos--;
            }
            this.valueCharPosOffset--;
        }
    }
    setPosWithoutNum(valueChar, valueCharPos, formatChar, ctxPos) {
        // value为数字情况下,value偏移量前移,确保下次循环依然为该value字符
        if (valueChar.match(/\d/)) {
            this.valueCharPosOffset++;
            if (ctxPos && ctxPos >= valueCharPos + 1) {
                this.ctxPos++;
            }
            return;
        }
        // value非数字且不匹配format字符情况下,过滤掉该字符,下次继续循环下个value字符
        if ((valueChar !== formatChar) &&
            (ctxPos && ctxPos >= valueCharPos + 1)) {
            this.ctxPos--;
        }
    }
    initCtxPos() {
        let ctxPositon;
        if (this.element === document.activeElement) {
            ctxPositon = this.element.selectionStart;
        }
        this.ctxPos = ctxPositon;
    }
}
TiMaskDirective.NUM_SIGN = '0';
TiMaskDirective.decorators = [
    { type: Directive, args: [{
                selector: '[tiMask]',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        // tslint:disable-next-line:no-forward-ref
                        useExisting: forwardRef(() => TiMaskDirective),
                        multi: true
                    }
                ],
                host: {
                    '(input)': 'handleInput($event.target.value)',
                    '(compositionstart)': 'handleCompositionStart()',
                    '(compositionend)': 'handleCompositionEnd($event.target.value)',
                    '(blur)': 'blur()'
                }
            },] }
];
TiMaskDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
TiMaskDirective.propDecorators = {
    format: [{ type: Input, args: ['tiMask',] }]
};
//# sourceMappingURL=data:application/json;base64,