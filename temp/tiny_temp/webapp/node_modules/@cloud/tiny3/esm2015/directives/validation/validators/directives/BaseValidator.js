import { Directive, forwardRef } from '@angular/core';
/* tslint:disable:no-implicit-dependencies */
import { NG_VALIDATORS, Validators } from '@angular/forms';
import { TiValidators } from '../TiValidators';
import { Util } from '../../../../utils/Util';
// 下面注释，是为了避免lib编译错误。具体原理未知，副作用未知。
// @dynamic
/**
 * @ignore
 */
export class BaseValidator {
    constructor() {
        this.enabled = true; // 无需传参的校验规则是否开启校验
        this._validator = Validators.nullValidator;
    }
    /**
     * 获取各directive中的参数配置
     * @param validatorClass 校验实现类
     * @param name 校验指令名：由于该方法在类外部调用，无法使用BaseValidator中的参数，因此需要传入
     */
    static getDirectiveConfig(validatorClass, name) {
        return {
            selector: `[${name}][formControlName],[${name}][formControl],[${name}][ngModel]`,
            providers: [{
                    provide: NG_VALIDATORS,
                    /* tslint:disable:no-forward-ref */
                    useExisting: forwardRef(() => validatorClass),
                    multi: true
                }]
        };
    }
    static getValidatorStr(name) {
        return name.replace(new RegExp('ti'), '')
            .replace(new RegExp('^\\S'), (s) => {
            return s.toLowerCase();
        });
    }
    ngOnChanges(changes) {
        if (changes['baseValue'] || changes['enabled']) {
            this._createValidator();
            if (this._onChange) {
                this._onChange();
            }
        }
    }
    validate(c) {
        return (this.enabled === false || this.enabled === 'false') ? null : this._validator(c);
    }
    registerOnValidatorChange(fn) {
        this._onChange = fn;
    }
    _createValidator() {
        const validatorStr = this.validatorStr;
        const validatorParam = this.baseValue;
        /* tslint:disable:prefer-conditional-expression */
        if (Util.isArray(validatorParam)) {
            /* tslint:disable:no-null-keyword */
            this._validator = TiValidators[validatorStr].apply(null, validatorParam);
        }
        else if (!Util.isUndefined(validatorParam)) {
            this._validator = TiValidators[validatorStr](validatorParam);
        }
        else {
            this._validator = TiValidators[validatorStr];
        }
    }
}
BaseValidator.decorators = [
    { type: Directive, args: [{ selector: '[BaseValidator]' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZVZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL0BjbG91ZC90aW55My9kaXJlY3RpdmVzL3ZhbGlkYXRpb24vdmFsaWRhdG9ycy9kaXJlY3RpdmVzL0Jhc2VWYWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQWtDLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLDZDQUE2QztBQUM3QyxPQUFPLEVBQW1CLGFBQWEsRUFBNEMsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM5QyxrQ0FBa0M7QUFDbEMsV0FBVztBQUNYOztHQUVHO0FBRUgsTUFBTSxPQUFPLGFBQWE7SUFEMUI7UUFJUyxZQUFPLEdBQVksSUFBSSxDQUFDLENBQUMsa0JBQWtCO1FBQzFDLGVBQVUsR0FBZ0IsVUFBVSxDQUFDLGFBQWEsQ0FBQztJQXdEN0QsQ0FBQztJQXJEQzs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLGtCQUFrQixDQUFDLGNBQXlCLEVBQUUsSUFBWTtRQUN0RSxPQUFPO1lBQ0gsUUFBUSxFQUFFLElBQUksSUFBSSx1QkFBdUIsSUFBSSxtQkFBbUIsSUFBSSxZQUFZO1lBQ2hGLFNBQVMsRUFBRSxDQUFDO29CQUNSLE9BQU8sRUFBRSxhQUFhO29CQUN0QixtQ0FBbUM7b0JBQ25DLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDO29CQUM3QyxLQUFLLEVBQUUsSUFBSTtpQkFDZCxDQUFDO1NBQ0wsQ0FBQztJQUNKLENBQUM7SUFDTSxNQUFNLENBQUMsZUFBZSxDQUFDLElBQVk7UUFDeEMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQzthQUN4QyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFTLEVBQUUsRUFBRTtZQUN6QyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzlDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ3hCLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO2FBQ2xCO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsUUFBUSxDQUFDLENBQWtCO1FBQ3pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLEtBQUssSUFBSSxJQUFJLENBQUMsT0FBYyxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVELHlCQUF5QixDQUFDLEVBQWM7UUFDdEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVPLGdCQUFnQjtRQUN0QixNQUFNLFlBQVksR0FBVyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQy9DLE1BQU0sY0FBYyxHQUFXLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDOUMsa0RBQWtEO1FBQ2xELElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUNoQyxvQ0FBb0M7WUFDcEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsQ0FBQztTQUMxRTthQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQzVDLElBQUksQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQzlEO2FBQU07WUFDTCxJQUFJLENBQUMsVUFBVSxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUM5QztJQUNILENBQUM7OztZQTVERixTQUFTLFNBQUMsRUFBQyxRQUFRLEVBQUUsaUJBQWlCLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIGZvcndhcmRSZWYsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby1pbXBsaWNpdC1kZXBlbmRlbmNpZXMgKi9cclxuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBOR19WQUxJREFUT1JTLCBWYWxpZGF0aW9uRXJyb3JzLCBWYWxpZGF0b3IsIFZhbGlkYXRvckZuLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBUaVZhbGlkYXRvcnMgfSBmcm9tICcuLi9UaVZhbGlkYXRvcnMnO1xyXG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvVXRpbCc7XHJcbi8vIOS4i+mdouazqOmHiu+8jOaYr+S4uuS6humBv+WFjWxpYue8luivkemUmeivr+OAguWFt+S9k+WOn+eQhuacquefpe+8jOWJr+S9nOeUqOacquefpeOAglxyXG4vLyBAZHluYW1pY1xyXG4vKipcclxuICogQGlnbm9yZVxyXG4gKi9cclxuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdbQmFzZVZhbGlkYXRvcl0nfSlcclxuZXhwb3J0IGNsYXNzIEJhc2VWYWxpZGF0b3IgaW1wbGVtZW50cyBWYWxpZGF0b3IsIE9uQ2hhbmdlcyB7XHJcbiAgcHVibGljIHZhbGlkYXRvclN0cjogc3RyaW5nO1xyXG4gIHB1YmxpYyBiYXNlVmFsdWU6IHN0cmluZzsgLy8g6ZyA6KaB5Lyg5Y+C55qE5qCh6aqM6KeE5YiZ55qE5Y+C5pWwXHJcbiAgcHVibGljIGVuYWJsZWQ6IGJvb2xlYW4gPSB0cnVlOyAvLyDml6DpnIDkvKDlj4LnmoTmoKHpqozop4TliJnmmK/lkKblvIDlkK/moKHpqoxcclxuICBwcml2YXRlIF92YWxpZGF0b3I6IFZhbGlkYXRvckZuID0gVmFsaWRhdG9ycy5udWxsVmFsaWRhdG9yO1xyXG4gIHByaXZhdGUgX29uQ2hhbmdlPzogKCkgPT4gdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5ZCEZGlyZWN0aXZl5Lit55qE5Y+C5pWw6YWN572uXHJcbiAgICogQHBhcmFtIHZhbGlkYXRvckNsYXNzIOagoemqjOWunueOsOexu1xyXG4gICAqIEBwYXJhbSBuYW1lIOagoemqjOaMh+S7pOWQje+8mueUseS6juivpeaWueazleWcqOexu+WklumDqOiwg+eUqO+8jOaXoOazleS9v+eUqEJhc2VWYWxpZGF0b3LkuK3nmoTlj4LmlbDvvIzlm6DmraTpnIDopoHkvKDlhaVcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldERpcmVjdGl2ZUNvbmZpZyh2YWxpZGF0b3JDbGFzczogVHlwZTxhbnk+LCBuYW1lOiBzdHJpbmcpOiBEaXJlY3RpdmUge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzZWxlY3RvcjogYFske25hbWV9XVtmb3JtQ29udHJvbE5hbWVdLFske25hbWV9XVtmb3JtQ29udHJvbF0sWyR7bmFtZX1dW25nTW9kZWxdYCxcclxuICAgICAgICBwcm92aWRlcnM6IFt7XHJcbiAgICAgICAgICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXHJcbiAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWZvcndhcmQtcmVmICovXHJcbiAgICAgICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IHZhbGlkYXRvckNsYXNzKSxcclxuICAgICAgICAgICAgbXVsdGk6IHRydWVcclxuICAgICAgICB9XVxyXG4gICAgfTtcclxuICB9XHJcbiAgcHVibGljIHN0YXRpYyBnZXRWYWxpZGF0b3JTdHIobmFtZTogc3RyaW5nKTogYW55IHtcclxuICAgIHJldHVybiBuYW1lLnJlcGxhY2UobmV3IFJlZ0V4cCgndGknKSwgJycpXHJcbiAgICAucmVwbGFjZShuZXcgUmVnRXhwKCdeXFxcXFMnKSwgKHM6IHN0cmluZykgPT4ge1xyXG4gICAgICByZXR1cm4gcy50b0xvd2VyQ2FzZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICBpZiAoY2hhbmdlc1snYmFzZVZhbHVlJ10gfHwgY2hhbmdlc1snZW5hYmxlZCddKSB7XHJcbiAgICAgIHRoaXMuX2NyZWF0ZVZhbGlkYXRvcigpO1xyXG4gICAgICBpZiAodGhpcy5fb25DaGFuZ2UpIHtcclxuICAgICAgICB0aGlzLl9vbkNoYW5nZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2YWxpZGF0ZShjOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzfG51bGwge1xyXG4gICAgcmV0dXJuICh0aGlzLmVuYWJsZWQgPT09IGZhbHNlIHx8IHRoaXMuZW5hYmxlZCBhcyBhbnkgPT09ICdmYWxzZScpID8gbnVsbCA6IHRoaXMuX3ZhbGlkYXRvcihjKTtcclxuICB9XHJcblxyXG4gIHJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2UoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMuX29uQ2hhbmdlID0gZm47XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9jcmVhdGVWYWxpZGF0b3IoKTogdm9pZCB7XHJcbiAgICBjb25zdCB2YWxpZGF0b3JTdHI6IHN0cmluZyA9IHRoaXMudmFsaWRhdG9yU3RyO1xyXG4gICAgY29uc3QgdmFsaWRhdG9yUGFyYW06IHN0cmluZyA9IHRoaXMuYmFzZVZhbHVlO1xyXG4gICAgLyogdHNsaW50OmRpc2FibGU6cHJlZmVyLWNvbmRpdGlvbmFsLWV4cHJlc3Npb24gKi9cclxuICAgIGlmIChVdGlsLmlzQXJyYXkodmFsaWRhdG9yUGFyYW0pKSB7XHJcbiAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLW51bGwta2V5d29yZCAqL1xyXG4gICAgICB0aGlzLl92YWxpZGF0b3IgPSBUaVZhbGlkYXRvcnNbdmFsaWRhdG9yU3RyXS5hcHBseShudWxsLCB2YWxpZGF0b3JQYXJhbSk7XHJcbiAgICB9IGVsc2UgaWYgKCFVdGlsLmlzVW5kZWZpbmVkKHZhbGlkYXRvclBhcmFtKSkge1xyXG4gICAgICB0aGlzLl92YWxpZGF0b3IgPSBUaVZhbGlkYXRvcnNbdmFsaWRhdG9yU3RyXSh2YWxpZGF0b3JQYXJhbSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl92YWxpZGF0b3IgPSBUaVZhbGlkYXRvcnNbdmFsaWRhdG9yU3RyXTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19