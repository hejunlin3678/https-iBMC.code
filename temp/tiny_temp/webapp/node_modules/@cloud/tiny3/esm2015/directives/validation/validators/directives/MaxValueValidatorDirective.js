import { Directive, Input, forwardRef } from '@angular/core';
import { BaseValidator } from './BaseValidator';
import { NG_VALIDATORS } from '@angular/forms';
// @Directive(BaseValidator.getDirectiveConfig(MaxValueValidatorDirective, MaxValueValidatorDirective.NAME))
export class MaxValueValidatorDirective extends BaseValidator {
    constructor() {
        super(...arguments);
        this.validatorStr = BaseValidator.getValidatorStr(MaxValueValidatorDirective.NAME);
    }
}
MaxValueValidatorDirective.NAME = 'tiMaxValue';
MaxValueValidatorDirective.decorators = [
    { type: Directive, args: [{
                selector: `[tiMaxValue][formControlName],[tiMaxValue][formControl],[tiMaxValue][ngModel]`,
                providers: [{
                        provide: NG_VALIDATORS,
                        // tslint:disable-next-line: no-forward-ref
                        useExisting: forwardRef(() => MaxValueValidatorDirective),
                        multi: true
                    }]
            },] }
];
MaxValueValidatorDirective.propDecorators = {
    baseValue: [{ type: Input, args: [MaxValueValidatorDirective.NAME,] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWF4VmFsdWVWYWxpZGF0b3JEaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9AY2xvdWQvdGlueTMvZGlyZWN0aXZlcy92YWxpZGF0aW9uL3ZhbGlkYXRvcnMvZGlyZWN0aXZlcy9NYXhWYWx1ZVZhbGlkYXRvckRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBZ0QsYUFBYSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0YsNEdBQTRHO0FBVTVHLE1BQU0sT0FBTywwQkFBMkIsU0FBUSxhQUFhO0lBVDdEOztRQVlFLGlCQUFZLEdBQVcsYUFBYSxDQUFDLGVBQWUsQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4RixDQUFDOztBQUhpQiwrQkFBSSxHQUFXLFlBQVksQ0FBQzs7WUFWN0MsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSwrRUFBK0U7Z0JBQ3pGLFNBQVMsRUFBRSxDQUFDO3dCQUNSLE9BQU8sRUFBRSxhQUFhO3dCQUN0QiwyQ0FBMkM7d0JBQzNDLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsMEJBQTBCLENBQUM7d0JBQ3pELEtBQUssRUFBRSxJQUFJO3FCQUNkLENBQUM7YUFDSDs7O3dCQUdFLEtBQUssU0FBQywwQkFBMEIsQ0FBQyxJQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgZm9yd2FyZFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCYXNlVmFsaWRhdG9yIH0gZnJvbSAnLi9CYXNlVmFsaWRhdG9yJztcclxuaW1wb3J0IHsgVmFsaWRhdG9yLCBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRpb25FcnJvcnMsIE5HX1ZBTElEQVRPUlMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbi8vIEBEaXJlY3RpdmUoQmFzZVZhbGlkYXRvci5nZXREaXJlY3RpdmVDb25maWcoTWF4VmFsdWVWYWxpZGF0b3JEaXJlY3RpdmUsIE1heFZhbHVlVmFsaWRhdG9yRGlyZWN0aXZlLk5BTUUpKVxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogYFt0aU1heFZhbHVlXVtmb3JtQ29udHJvbE5hbWVdLFt0aU1heFZhbHVlXVtmb3JtQ29udHJvbF0sW3RpTWF4VmFsdWVdW25nTW9kZWxdYCxcclxuICBwcm92aWRlcnM6IFt7XHJcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXHJcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tZm9yd2FyZC1yZWZcclxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTWF4VmFsdWVWYWxpZGF0b3JEaXJlY3RpdmUpLFxyXG4gICAgICBtdWx0aTogdHJ1ZVxyXG4gIH1dXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBNYXhWYWx1ZVZhbGlkYXRvckRpcmVjdGl2ZSBleHRlbmRzIEJhc2VWYWxpZGF0b3Ige1xyXG4gIHN0YXRpYyByZWFkb25seSBOQU1FOiBzdHJpbmcgPSAndGlNYXhWYWx1ZSc7XHJcbiAgQElucHV0KE1heFZhbHVlVmFsaWRhdG9yRGlyZWN0aXZlLk5BTUUpIGJhc2VWYWx1ZTogYW55O1xyXG4gIHZhbGlkYXRvclN0cjogc3RyaW5nID0gQmFzZVZhbGlkYXRvci5nZXRWYWxpZGF0b3JTdHIoTWF4VmFsdWVWYWxpZGF0b3JEaXJlY3RpdmUuTkFNRSk7XHJcbn1cclxuIl19