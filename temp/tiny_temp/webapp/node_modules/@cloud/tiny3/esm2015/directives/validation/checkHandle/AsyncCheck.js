import { Util } from '../../../utils/Util';
import { CheckHandle } from './CheckHandle';
import { TiPendingStateComponent } from '../TiPendingStateComponent';
/**
 * @ignore
 *
 * 10.1.0新增
 */
export class AsyncCheck extends CheckHandle {
    // 处理异步校验错误提示信息
    onStatusChange(ele, formControl) {
        // 清除先前校验信息
        this.commonHandle.clearValidMsg(ele);
        const errors = formControl.control.errors;
        if (!errors) {
            return;
        }
        const ruleKey = Object.keys(errors)[0];
        const ruleErrors = errors[ruleKey];
        // 添加异步校验错误提示信息
        if (typeof ruleErrors === 'object' && Util.isString(ruleErrors.tiAsyncErrorMessage)) {
            this.commonHandle.addValidMsg(ele, this.validationConf, formControl, true);
        }
    }
    // 处理异步校验pending状态时的loading图标
    onAsyncStatusChange(ele, formControl) {
        if (formControl.pending) {
            this.addPendingIcon(ele, formControl);
        }
        else {
            this.clearPendingIcon(ele);
        }
    }
    addPendingIcon(ele, formControl) {
        if (ele.nativeElement.tiPendingStateRef) {
            return;
        }
        const pendingStateRef = this.getPendingStateRef(ele);
        const pendingDom = pendingStateRef.location.nativeElement;
        if (pendingDom === null || pendingDom.childNodes.length === 0) {
            return;
        }
        this.commonHandle._tiRenderer.insertAfter(pendingDom, ele.nativeElement);
        ele.nativeElement.tiPendingStateRef = pendingStateRef;
    }
    clearPendingIcon(ele) {
        const pendingStateRef = ele.nativeElement.tiPendingStateRef;
        if (pendingStateRef) {
            pendingStateRef.destroy();
            ele.nativeElement.tiPendingStateRef = undefined;
        }
    }
    getPendingStateRef(ele) {
        const pendignComponentRef = this.commonHandle._tiPopupService.createCompoentRef({
            componentType: TiPendingStateComponent,
            context: {
                validElement: ele.nativeElement
            }
        });
        return pendignComponentRef;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXN5bmNDaGVjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL0BjbG91ZC90aW55My9kaXJlY3RpdmVzL3ZhbGlkYXRpb24vY2hlY2tIYW5kbGUvQXN5bmNDaGVjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUc1QyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVyRTs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLFVBQVcsU0FBUSxXQUFXO0lBQ3ZDLGVBQWU7SUFDUixjQUFjLENBQUMsR0FBZSxFQUFFLFdBQXNCO1FBQ3pELFdBQVc7UUFDWCxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVyQyxNQUFNLE1BQU0sR0FBcUIsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDNUQsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNULE9BQU87U0FDVjtRQUVELE1BQU0sT0FBTyxHQUFXLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0MsTUFBTSxVQUFVLEdBQVEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hDLGVBQWU7UUFDZixJQUFJLE9BQU8sVUFBVSxLQUFLLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO1lBQ2pGLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUM5RTtJQUNMLENBQUM7SUFFRCw2QkFBNkI7SUFDdEIsbUJBQW1CLENBQUMsR0FBZSxFQUFFLFdBQXNCO1FBQzlELElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRTtZQUNyQixJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQztTQUN6QzthQUFNO1lBQ0gsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzlCO0lBQ0wsQ0FBQztJQUVNLGNBQWMsQ0FBQyxHQUFlLEVBQUUsV0FBc0I7UUFDekQsSUFBSSxHQUFHLENBQUMsYUFBYSxDQUFDLGlCQUFpQixFQUFFO1lBQ3JDLE9BQU87U0FDVjtRQUNELE1BQU0sZUFBZSxHQUFzQixJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEUsTUFBTSxVQUFVLEdBQVksZUFBZSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7UUFDbkUsSUFBSSxVQUFVLEtBQUssSUFBSSxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUMzRCxPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUV6RSxHQUFHLENBQUMsYUFBYSxDQUFDLGlCQUFpQixHQUFHLGVBQWUsQ0FBQztJQUMxRCxDQUFDO0lBRU0sZ0JBQWdCLENBQUMsR0FBZTtRQUNuQyxNQUFNLGVBQWUsR0FBdUIsR0FBRyxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQztRQUNoRixJQUFJLGVBQWUsRUFBRTtZQUNqQixlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDMUIsR0FBRyxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLENBQUM7U0FDbkQ7SUFDTCxDQUFDO0lBRU8sa0JBQWtCLENBQUMsR0FBZTtRQUN0QyxNQUFNLG1CQUFtQixHQUFzQixJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQztZQUMvRixhQUFhLEVBQUUsdUJBQXVCO1lBQ3RDLE9BQU8sRUFBRTtnQkFDTCxZQUFZLEVBQUUsR0FBRyxDQUFDLGFBQWE7YUFDbEM7U0FDSixDQUFDLENBQUM7UUFFSCxPQUFPLG1CQUFtQixDQUFDO0lBQy9CLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFV0aWwgfSBmcm9tICcuLi8uLi8uLi91dGlscy9VdGlsJztcclxuaW1wb3J0IHsgQ2hlY2tIYW5kbGUgfSBmcm9tICcuL0NoZWNrSGFuZGxlJztcclxuaW1wb3J0IHsgTmdDb250cm9sLCBWYWxpZGF0aW9uRXJyb3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBDb21wb25lbnRSZWYsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVGlQZW5kaW5nU3RhdGVDb21wb25lbnQgfSBmcm9tICcuLi9UaVBlbmRpbmdTdGF0ZUNvbXBvbmVudCc7XHJcblxyXG4vKipcclxuICogQGlnbm9yZVxyXG4gKlxyXG4gKiAxMC4xLjDmlrDlop5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBc3luY0NoZWNrIGV4dGVuZHMgQ2hlY2tIYW5kbGUge1xyXG4gICAgLy8g5aSE55CG5byC5q2l5qCh6aqM6ZSZ6K+v5o+Q56S65L+h5oGvXHJcbiAgICBwdWJsaWMgb25TdGF0dXNDaGFuZ2UoZWxlOiBFbGVtZW50UmVmLCBmb3JtQ29udHJvbDogTmdDb250cm9sKTogdm9pZCB7XHJcbiAgICAgICAgLy8g5riF6Zmk5YWI5YmN5qCh6aqM5L+h5oGvXHJcbiAgICAgICAgdGhpcy5jb21tb25IYW5kbGUuY2xlYXJWYWxpZE1zZyhlbGUpO1xyXG5cclxuICAgICAgICBjb25zdCBlcnJvcnM6IFZhbGlkYXRpb25FcnJvcnMgPSBmb3JtQ29udHJvbC5jb250cm9sLmVycm9ycztcclxuICAgICAgICBpZiAoIWVycm9ycykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBydWxlS2V5OiBzdHJpbmcgPSBPYmplY3Qua2V5cyhlcnJvcnMpWzBdO1xyXG4gICAgICAgIGNvbnN0IHJ1bGVFcnJvcnM6IGFueSA9IGVycm9yc1tydWxlS2V5XTtcclxuICAgICAgICAvLyDmt7vliqDlvILmraXmoKHpqozplJnor6/mj5DnpLrkv6Hmga9cclxuICAgICAgICBpZiAodHlwZW9mIHJ1bGVFcnJvcnMgPT09ICdvYmplY3QnICYmIFV0aWwuaXNTdHJpbmcocnVsZUVycm9ycy50aUFzeW5jRXJyb3JNZXNzYWdlKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbW1vbkhhbmRsZS5hZGRWYWxpZE1zZyhlbGUsIHRoaXMudmFsaWRhdGlvbkNvbmYsIGZvcm1Db250cm9sLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5aSE55CG5byC5q2l5qCh6aqMcGVuZGluZ+eKtuaAgeaXtueahGxvYWRpbmflm77moIdcclxuICAgIHB1YmxpYyBvbkFzeW5jU3RhdHVzQ2hhbmdlKGVsZTogRWxlbWVudFJlZiwgZm9ybUNvbnRyb2w6IE5nQ29udHJvbCk6IHZvaWQge1xyXG4gICAgICAgIGlmIChmb3JtQ29udHJvbC5wZW5kaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkUGVuZGluZ0ljb24oZWxlLCBmb3JtQ29udHJvbCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jbGVhclBlbmRpbmdJY29uKGVsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRQZW5kaW5nSWNvbihlbGU6IEVsZW1lbnRSZWYsIGZvcm1Db250cm9sOiBOZ0NvbnRyb2wpOiB2b2lkIHtcclxuICAgICAgICBpZiAoZWxlLm5hdGl2ZUVsZW1lbnQudGlQZW5kaW5nU3RhdGVSZWYpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwZW5kaW5nU3RhdGVSZWY6IENvbXBvbmVudFJlZjxhbnk+ID0gdGhpcy5nZXRQZW5kaW5nU3RhdGVSZWYoZWxlKTtcclxuICAgICAgICBjb25zdCBwZW5kaW5nRG9tOiBFbGVtZW50ID0gcGVuZGluZ1N0YXRlUmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKHBlbmRpbmdEb20gPT09IG51bGwgfHwgcGVuZGluZ0RvbS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29tbW9uSGFuZGxlLl90aVJlbmRlcmVyLmluc2VydEFmdGVyKHBlbmRpbmdEb20sIGVsZS5uYXRpdmVFbGVtZW50KTtcclxuXHJcbiAgICAgICAgZWxlLm5hdGl2ZUVsZW1lbnQudGlQZW5kaW5nU3RhdGVSZWYgPSBwZW5kaW5nU3RhdGVSZWY7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsZWFyUGVuZGluZ0ljb24oZWxlOiBFbGVtZW50UmVmKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgcGVuZGluZ1N0YXRlUmVmOiBDb21wb25lbnRSZWY8YW55PiAgPSBlbGUubmF0aXZlRWxlbWVudC50aVBlbmRpbmdTdGF0ZVJlZjtcclxuICAgICAgICBpZiAocGVuZGluZ1N0YXRlUmVmKSB7XHJcbiAgICAgICAgICAgIHBlbmRpbmdTdGF0ZVJlZi5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIGVsZS5uYXRpdmVFbGVtZW50LnRpUGVuZGluZ1N0YXRlUmVmID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFBlbmRpbmdTdGF0ZVJlZihlbGU6IEVsZW1lbnRSZWYpOiBDb21wb25lbnRSZWY8YW55PiB7XHJcbiAgICAgICAgY29uc3QgcGVuZGlnbkNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPGFueT4gPSB0aGlzLmNvbW1vbkhhbmRsZS5fdGlQb3B1cFNlcnZpY2UuY3JlYXRlQ29tcG9lbnRSZWYoe1xyXG4gICAgICAgICAgICBjb21wb25lbnRUeXBlOiBUaVBlbmRpbmdTdGF0ZUNvbXBvbmVudCxcclxuICAgICAgICAgICAgY29udGV4dDoge1xyXG4gICAgICAgICAgICAgICAgdmFsaWRFbGVtZW50OiBlbGUubmF0aXZlRWxlbWVudFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBwZW5kaWduQ29tcG9uZW50UmVmO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==