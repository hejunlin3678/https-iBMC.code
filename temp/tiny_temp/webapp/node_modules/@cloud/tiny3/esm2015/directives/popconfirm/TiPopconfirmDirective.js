import { Directive, ElementRef, Input, NgZone, Renderer2, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { TiTipService } from '../../services/tip/TiTipService';
import { TiTipDirective } from '../../directives/tip/TiTipDirective';
import { TiPopconfirmComponent } from './TiPopconfirmComponent';
import { Util, TiKeymap } from '../../utils/Util';
/**
 * TiPopconfirm 气泡确认框指令
 *
 * 一般用于操作执行后对用户业务不会有严重影响的轻量级场景。
 *
 * 10.0.3/9.0.7版本新增
 *
 * <example-url>../tiny3demo/#/popconfirm/popconfirm-all</example-url>
 */
export class TiPopconfirmDirective extends TiTipDirective {
    constructor(tiTipService, hostEleRef, zone, render, document) {
        super(tiTipService, hostEleRef);
        this.tiTipService = tiTipService;
        this.hostEleRef = hostEleRef;
        this.zone = zone;
        this.render = render;
        this.document = document;
        this.popoverComponentRef = null;
        // 可聚焦元素
        this.focusableElementsString = `a[href], area[href], input:not([disabled]):not([tabindex=\'-1\']),
     button:not([disabled]):not([tabindex=\'-1\']),select:not([disabled]):not([tabindex=\'-1\']),
     textarea:not([disabled]):not([tabindex=\'-1\']),
     iframe, object, embed, *[tabindex]:not([tabindex=\'-1\']), *[contenteditable=true]`;
        /**
         * tip组件配置
         */
        this.tipConfig = {
            trigger: 'manual',
            theme: 'white'
        };
    }
    ngOnInit() {
        if (!this.tiPopconfirm || !this.tiPopconfirm.content) {
            return;
        }
        this.hostElement = this.hostEleRef.nativeElement;
        // 创建实例
        this.tipInstance = this.tiTipService.create(this.hostElement, Object.assign(Object.assign({}, this.tipConfig), { position: this.tiPopconfirm.position, registerVisibilityChangeEvent: false }));
        this.addClickEvent();
    }
    ngOnDestroy() {
        if (this.tipInstance) {
            super.ngOnDestroy();
        }
        if (this.unlistenClick) {
            this.unlistenClick();
        }
        if (this.unListenDocumentKeydown) {
            this.unListenDocumentKeydown();
        }
    }
    addClickEvent() {
        this.zone.runOutsideAngular(() => {
            this.unlistenClick = this.render.listen(this.document, 'click', (event) => {
                if (this.hostElement.contains(event.target) && !this.popoverComponentRef) {
                    this.showPopandFocus();
                    return;
                }
                const tipElement = this.popoverComponentRef && this.popoverComponentRef.location.nativeElement;
                if (!(tipElement && tipElement.contains(event.target))) {
                    this.zone.run(() => {
                        this.hide();
                    });
                    this.popoverComponentRef = null;
                }
            });
            this.unListenDocumentKeydown = this.render.listen(document, 'keydown', (event) => {
                switch (event.which) {
                    case TiKeymap.KEY_TAB: // tab键用于处理在提示框内循环获取焦点
                        this.clickTab(event);
                        break;
                    case TiKeymap.KEY_ENTER:
                        if (this.hostElement.contains(event.target) && !this.popoverComponentRef) {
                            this.showPopandFocus();
                        }
                        break;
                    default:
                        break;
                }
            });
        });
    }
    clickTab(event) {
        const dialogModalEle = document.querySelector('.ti3-popconfirm-container');
        const focusableElements = dialogModalEle === null || dialogModalEle === void 0 ? void 0 : dialogModalEle.querySelectorAll(this.focusableElementsString);
        Util.focusInDialogOnTabchange(event, focusableElements);
    }
    /**
     * 打开气泡组件，并且把焦点转移到提示框内部，为后续把焦点限制在提示框内做准备。
     * @private
     */
    showPopandFocus() {
        this.zone.run(() => {
            this.popoverComponentRef = this.show();
            const popContainerEle = document.querySelector('.ti3-popconfirm-container');
            if (popContainerEle) {
                popContainerEle.focus();
            }
        });
    }
    /**
     * 显示气泡确认框
     * @ignore
     */
    show() {
        if (!this.tipInstance) {
            return;
        }
        const destroyPopover = (result) => {
            this.hide();
            if (result && Util.isFunction(this.tiPopconfirm.close)) {
                this.tiPopconfirm.close(this.data);
            }
            else if (!result && Util.isFunction(this.tiPopconfirm.dismiss)) {
                this.tiPopconfirm.dismiss(this.data);
            }
        };
        return this.tipInstance.show(TiPopconfirmComponent, {
            id: this.tiPopconfirm.id,
            config: this.tiPopconfirm,
            destroyPopover
        });
    }
}
TiPopconfirmDirective.decorators = [
    { type: Directive, args: [{
                selector: '[tiPopconfirm]'
            },] }
];
TiPopconfirmDirective.ctorParameters = () => [
    { type: TiTipService },
    { type: ElementRef },
    { type: NgZone },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
TiPopconfirmDirective.propDecorators = {
    tiPopconfirm: [{ type: Input }],
    data: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,