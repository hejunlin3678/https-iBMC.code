import { Directive, Input, forwardRef } from '@angular/core';
import { BaseValidator } from './BaseValidator';
import { NG_VALIDATORS } from '@angular/forms';
// @Directive(BaseValidator.getDirectiveConfig(RangeValueValidatorDirective, RangeValueValidatorDirective.NAME))
export class RangeValueValidatorDirective extends BaseValidator {
    constructor() {
        super(...arguments);
        this.validatorStr = BaseValidator.getValidatorStr(RangeValueValidatorDirective.NAME);
    }
}
RangeValueValidatorDirective.NAME = 'tiRangeValue';
RangeValueValidatorDirective.decorators = [
    { type: Directive, args: [{
                selector: `[tiRangeValue][formControlName],[tiRangeValue][formControl],[tiRangeValue][ngModel]`,
                providers: [{
                        provide: NG_VALIDATORS,
                        // tslint:disable-next-line: no-forward-ref
                        useExisting: forwardRef(() => RangeValueValidatorDirective),
                        multi: true
                    }]
            },] }
];
RangeValueValidatorDirective.propDecorators = {
    baseValue: [{ type: Input, args: [RangeValueValidatorDirective.NAME,] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFuZ2VWYWx1ZVZhbGlkYXRvckRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL0BjbG91ZC90aW55My9kaXJlY3RpdmVzL3ZhbGlkYXRpb24vdmFsaWRhdG9ycy9kaXJlY3RpdmVzL1JhbmdlVmFsdWVWYWxpZGF0b3JEaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQWdELGFBQWEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdGLGdIQUFnSDtBQVVoSCxNQUFNLE9BQU8sNEJBQTZCLFNBQVEsYUFBYTtJQVQvRDs7UUFZRSxpQkFBWSxHQUFXLGFBQWEsQ0FBQyxlQUFlLENBQUMsNEJBQTRCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUYsQ0FBQzs7QUFIaUIsaUNBQUksR0FBVyxjQUFjLENBQUM7O1lBVi9DLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUscUZBQXFGO2dCQUMvRixTQUFTLEVBQUUsQ0FBQzt3QkFDUixPQUFPLEVBQUUsYUFBYTt3QkFDdEIsMkNBQTJDO3dCQUMzQyxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLDRCQUE0QixDQUFDO3dCQUMzRCxLQUFLLEVBQUUsSUFBSTtxQkFDZCxDQUFDO2FBQ0g7Ozt3QkFHRSxLQUFLLFNBQUMsNEJBQTRCLENBQUMsSUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQmFzZVZhbGlkYXRvciB9IGZyb20gJy4vQmFzZVZhbGlkYXRvcic7XHJcbmltcG9ydCB7IFZhbGlkYXRvciwgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0aW9uRXJyb3JzLCBOR19WQUxJREFUT1JTIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG4vLyBARGlyZWN0aXZlKEJhc2VWYWxpZGF0b3IuZ2V0RGlyZWN0aXZlQ29uZmlnKFJhbmdlVmFsdWVWYWxpZGF0b3JEaXJlY3RpdmUsIFJhbmdlVmFsdWVWYWxpZGF0b3JEaXJlY3RpdmUuTkFNRSkpXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiBgW3RpUmFuZ2VWYWx1ZV1bZm9ybUNvbnRyb2xOYW1lXSxbdGlSYW5nZVZhbHVlXVtmb3JtQ29udHJvbF0sW3RpUmFuZ2VWYWx1ZV1bbmdNb2RlbF1gLFxyXG4gIHByb3ZpZGVyczogW3tcclxuICAgICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcclxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1mb3J3YXJkLXJlZlxyXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBSYW5nZVZhbHVlVmFsaWRhdG9yRGlyZWN0aXZlKSxcclxuICAgICAgbXVsdGk6IHRydWVcclxuICB9XVxyXG59KVxyXG5leHBvcnQgY2xhc3MgUmFuZ2VWYWx1ZVZhbGlkYXRvckRpcmVjdGl2ZSBleHRlbmRzIEJhc2VWYWxpZGF0b3Ige1xyXG4gIHN0YXRpYyByZWFkb25seSBOQU1FOiBzdHJpbmcgPSAndGlSYW5nZVZhbHVlJztcclxuICBASW5wdXQoUmFuZ2VWYWx1ZVZhbGlkYXRvckRpcmVjdGl2ZS5OQU1FKSBiYXNlVmFsdWU6IGFueTtcclxuICB2YWxpZGF0b3JTdHI6IHN0cmluZyA9IEJhc2VWYWxpZGF0b3IuZ2V0VmFsaWRhdG9yU3RyKFJhbmdlVmFsdWVWYWxpZGF0b3JEaXJlY3RpdmUuTkFNRSk7XHJcbn1cclxuIl19