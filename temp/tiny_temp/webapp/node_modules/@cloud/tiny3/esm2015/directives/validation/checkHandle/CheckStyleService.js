// 该功能类用于根据校验方式定义校验实体执行函数
import { Injectable } from '@angular/core';
import { ChangeCheck } from './ChangeCheck';
import { BlurCheck } from './BlurCheck';
import { PwdCheck } from './PwdCheck';
import { CommonService } from './CommonService';
import { TiValidationDefaultConfig } from '../TiValidationConfig';
import { Util } from '../../../utils/Util';
import { CheckStyleModule } from './CheckStyleModule';
import * as i0 from "@angular/core";
import * as i1 from "./CommonService";
import * as i2 from "./CheckStyleModule";
/**
 * @ignore
 */
export class CheckStyleService {
    constructor(commonService) {
        this.commonService = commonService;
    }
    createHandler(type, config) {
        let resultType = type;
        // 设置checkStyle默认值
        if (Util.isUndefined(type)) {
            resultType = TiValidationDefaultConfig.type;
            // 设置passwordConfig情况下，type默认为'password'
            if (!Util.isUndefined(config.passwordConfig)) {
                resultType = 'password';
            }
        }
        // 根据不同的配置，设置校验方式执行函数
        let handle;
        switch (resultType) {
            case 'blur':
                handle = new BlurCheck(config, this.commonService);
                break;
            case 'password':
                handle = new PwdCheck(config, this.commonService);
                break;
            default: // 定义为'change'及其他无效方式,均采用change校验方式
                handle = new ChangeCheck(config, this.commonService);
        }
        return handle;
    }
}
CheckStyleService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CheckStyleService_Factory() { return new CheckStyleService(i0.ɵɵinject(i1.CommonService)); }, token: CheckStyleService, providedIn: i2.CheckStyleModule });
CheckStyleService.decorators = [
    { type: Injectable, args: [{
                providedIn: CheckStyleModule
            },] }
];
CheckStyleService.ctorParameters = () => [
    { type: CommonService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hlY2tTdHlsZVNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9AY2xvdWQvdGlueTMvZGlyZWN0aXZlcy92YWxpZGF0aW9uL2NoZWNrSGFuZGxlL0NoZWNrU3R5bGVTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlCQUF5QjtBQUN6QixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7QUFFdEQ7O0dBRUc7QUFJSCxNQUFNLE9BQU8saUJBQWlCO0lBQzFCLFlBQW9CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBQ2hELENBQUM7SUFDTSxhQUFhLENBQUMsSUFBMkIsRUFBRSxNQUEwQjtRQUN4RSxJQUFJLFVBQVUsR0FBUSxJQUFJLENBQUM7UUFDM0Isa0JBQWtCO1FBQ2xCLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN4QixVQUFVLEdBQUcseUJBQXlCLENBQUMsSUFBSSxDQUFDO1lBQzVDLHdDQUF3QztZQUN4QyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUU7Z0JBQzFDLFVBQVUsR0FBRyxVQUFVLENBQUM7YUFDM0I7U0FDSjtRQUNELHFCQUFxQjtRQUNyQixJQUFJLE1BQVcsQ0FBQztRQUNoQixRQUFRLFVBQVUsRUFBRTtZQUNoQixLQUFLLE1BQU07Z0JBQ1AsTUFBTSxHQUFHLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQ25ELE1BQU07WUFDVixLQUFLLFVBQVU7Z0JBQ1gsTUFBTSxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQ2xELE1BQU07WUFDVixTQUFTLG1DQUFtQztnQkFDeEMsTUFBTSxHQUFHLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDNUQ7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDOzs7O1lBOUJKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsZ0JBQWdCO2FBQy9COzs7WUFYUSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiLy8g6K+l5Yqf6IO957G755So5LqO5qC55o2u5qCh6aqM5pa55byP5a6a5LmJ5qCh6aqM5a6e5L2T5omn6KGM5Ye95pWwXHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ2hhbmdlQ2hlY2sgfSBmcm9tICcuL0NoYW5nZUNoZWNrJztcclxuaW1wb3J0IHsgQmx1ckNoZWNrIH0gZnJvbSAnLi9CbHVyQ2hlY2snO1xyXG5pbXBvcnQgeyBQd2RDaGVjayB9IGZyb20gJy4vUHdkQ2hlY2snO1xyXG5pbXBvcnQgeyBDb21tb25TZXJ2aWNlIH0gZnJvbSAnLi9Db21tb25TZXJ2aWNlJztcclxuaW1wb3J0IHsgVGlWYWxpZGF0aW9uRGVmYXVsdENvbmZpZyB9IGZyb20gJy4uL1RpVmFsaWRhdGlvbkNvbmZpZyc7XHJcbmltcG9ydCB7IFV0aWwgfSBmcm9tICcuLi8uLi8uLi91dGlscy9VdGlsJztcclxuaW1wb3J0IHsgVGlWYWxpZGF0aW9uQ29uZmlnLCBUaVZhbGlkYXRpb25UeXBlIH0gZnJvbSAnLi4vVGlWYWxpZGF0aW9uSW50ZXJmYWNlJztcclxuaW1wb3J0IHsgQ2hlY2tTdHlsZU1vZHVsZSB9IGZyb20gJy4vQ2hlY2tTdHlsZU1vZHVsZSc7XHJcblxyXG4vKipcclxuICogQGlnbm9yZVxyXG4gKi9cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogQ2hlY2tTdHlsZU1vZHVsZVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2hlY2tTdHlsZVNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjb21tb25TZXJ2aWNlOiBDb21tb25TZXJ2aWNlKSB7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgY3JlYXRlSGFuZGxlcih0eXBlOiBUaVZhbGlkYXRpb25UeXBlIHwgJycsIGNvbmZpZzogVGlWYWxpZGF0aW9uQ29uZmlnKTogYW55IHtcclxuICAgICAgICBsZXQgcmVzdWx0VHlwZTogYW55ID0gdHlwZTtcclxuICAgICAgICAvLyDorr7nva5jaGVja1N0eWxl6buY6K6k5YC8XHJcbiAgICAgICAgaWYgKFV0aWwuaXNVbmRlZmluZWQodHlwZSkpIHtcclxuICAgICAgICAgICAgcmVzdWx0VHlwZSA9IFRpVmFsaWRhdGlvbkRlZmF1bHRDb25maWcudHlwZTtcclxuICAgICAgICAgICAgLy8g6K6+572ucGFzc3dvcmRDb25maWfmg4XlhrXkuIvvvIx0eXBl6buY6K6k5Li6J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBpZiAoIVV0aWwuaXNVbmRlZmluZWQoY29uZmlnLnBhc3N3b3JkQ29uZmlnKSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0VHlwZSA9ICdwYXNzd29yZCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5qC55o2u5LiN5ZCM55qE6YWN572u77yM6K6+572u5qCh6aqM5pa55byP5omn6KGM5Ye95pWwXHJcbiAgICAgICAgbGV0IGhhbmRsZTogYW55O1xyXG4gICAgICAgIHN3aXRjaCAocmVzdWx0VHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlICdibHVyJzpcclxuICAgICAgICAgICAgICAgIGhhbmRsZSA9IG5ldyBCbHVyQ2hlY2soY29uZmlnLCB0aGlzLmNvbW1vblNlcnZpY2UpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3Bhc3N3b3JkJzpcclxuICAgICAgICAgICAgICAgIGhhbmRsZSA9IG5ldyBQd2RDaGVjayhjb25maWcsIHRoaXMuY29tbW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDogLy8g5a6a5LmJ5Li6J2NoYW5nZSflj4rlhbbku5bml6DmlYjmlrnlvI8s5Z2H6YeH55SoY2hhbmdl5qCh6aqM5pa55byPXHJcbiAgICAgICAgICAgICAgICBoYW5kbGUgPSBuZXcgQ2hhbmdlQ2hlY2soY29uZmlnLCB0aGlzLmNvbW1vblNlcnZpY2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGhhbmRsZTtcclxuICAgIH1cclxufVxyXG4iXX0=