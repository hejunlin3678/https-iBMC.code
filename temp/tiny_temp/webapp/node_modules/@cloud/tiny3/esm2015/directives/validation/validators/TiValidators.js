/* eslint-disable no-eq-null */
/* eslint-disable eqeqeq */
/* tslint:disable:no-implicit-dependencies */
import { Validators } from '@angular/forms';
import { Util } from '../../../utils/Util';
import { TiPwdConfig } from '../checkHandle/TiPwdConfig';
// 下面注释，可以避免编译lib时正则报错。原理未知，副作用未知。
// @dynamic
/**
 * Tiny封装的常用校验规则及校验方法
 *
 * ### 规则使用
 * **提供了两种使用方式：**
 *
 * 1.静态方法：通过TiValidators.XXX（规则名）在JS中定义
 *
 * 2.指令方式：对应规则的指令名为tiXXX(规则名首字母大写)，如required规则的指令名为 tiRequired
 *
 * **支持的校验规则如下：**
 *
 * | 规则名称    |  配置参数意义/类型   |  规则描述  |
 * | --------   | :-----   | :---- |
 * | required   | 无       |  为空校验    |
 * | maxLength    | 最大字符长度/number      |  字符长度最大值校验    |
 * | minLength    | 最小字符长度/number      |   字符长度最小值校验    |
 * | rangeSize    | 最小长度限制/number <br/> 最大长度限制/number      |   字符长度大小区间校验    |
 * | maxValue    | 最大数值/number      |  数字最大数值校验    |
 * | minValue    | 最小数值/number      |   数字最小数值校验    |
 * | rangeValue    | 最小数值限制/number <br/> 最大数值限制/number    |   数字大小区间校验    |
 * | regExp   | 正则表达式参数/RegExp|string（不包括正则表达式头尾标识符'^(?:'、')$'）       |  正则校验    |
 * | email    | 无      |  邮箱校验    |
 * | contains    | 包含的内容/(string/number)     |   包含校验    |
 * | notContains    | 不包含的内容/(string/number)      |   不包含校验    |
 * | equal   | 相等的内容/(string/number)     |  相等校验    |
 * | notEqual    | 不相等的内容/(string/number)    |  不相等校验    |
 * | notScript    | 无      |   包含script标签校验    |
 * | port    |  无     |   端口号校验，范围为0~65535    |
 * | date    | 无      |   日期类型校验    |
 * | url    |  无     |   url校验    |
 * | integer    | 无      |   整数校验    |
 * | number    |  无     |   数字校验 |
 * | digits    | 无      |   正整数校验    |
 * | ipv4    |  无     |   ipv4校验    |
 * | ipv6    |  无     |   ipv6校验    |
 * | minCharType | 1. 符合要求的字符种类/number;<br/>2. 字符集对象类型（可选）/{string:RegExp}。<br/>默认的字符种类分别为：大写字母、小写字母、数字、特殊字符`~!@#$%^&*()-_=+\\\|[{}];:\'\",<.>/?  和空格 | 符合最小字符种类校验，默认情况为至少包含2种字符类型`。  |
 * | notEqualPosRev    |  需要比对的表单formControl对象获取函数/ () => AbstractControl     |   不能和表单对象的正序或倒序相同    |
 * | password    | 密码校验各项规则参数/对象形式 |   密码校验   |
 *
 *
 *  **password规则的参数类型**
 *
 *    {
 *        rangeSize?: [number, number],
 *        minCharType?: [bumber, {
 *            digitsCharReg: RegExp,
 *            specialCharReg: RegExp,
 *            lowerCharReg: RegExp,
 *            upperCharReg: RegExp}],
 *        notEqualPosRev: () => AbstractControl
 *    }
 */
export class TiValidators {
    static isEmptyInputValue(value) {
        // we don't check for string here so it also works with arrays
        // tslint:disable-next-line:no-null-keyword
        return value == null || value.length === 0;
    }
    /**
     * @ignore
     */
    static required(control) {
        return Validators.required(control);
    }
    /**
     * @ignore
     */
    static maxLength(maxLength) {
        return (control) => {
            const length = control.value ? control.value.length : 0;
            return length > maxLength ?
                { maxLength: { requiredLength: maxLength, actualLength: length } } :
                null;
        };
    }
    /**
     * @ignore
     */
    static minLength(minLength) {
        return (control) => {
            if (TiValidators.isEmptyInputValue(control.value)) {
                return null; // don't validate empty values to allow optional controls
            }
            const length = control.value ? control.value.length : 0;
            return length < minLength ?
                { minLength: { requiredLength: minLength, actualLength: length } } :
                null;
        };
    }
    /**
     * @ignore
     */
    static rangeSize(minLength, maxLength) {
        return (control) => {
            if (TiValidators.isEmptyInputValue(control.value)) {
                return null; // don't validate empty values to allow optional controls
            }
            const length = control.value ? control.value.length : 0;
            return length > maxLength || length < minLength ?
                { rangeSize: { requiredMinLength: minLength, requiredMaxLength: maxLength, actualLength: length } } :
                null;
        };
    }
    /**
     * @ignore
     */
    static maxValue(max) {
        return (control) => {
            if (TiValidators.isEmptyInputValue(control.value) || TiValidators.isEmptyInputValue(max)) {
                return null; // don't validate empty values to allow optional controls
            }
            const value = parseFloat(control.value);
            // Controls with NaN values after parsing should be treated as not having a
            // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max
            return !isNaN(value) && value > max ? { maxValue: { requiredMaxValue: max, actual: control.value } } : null;
        };
    }
    /**
     * @ignore
     */
    static minValue(min) {
        return (control) => {
            if (TiValidators.isEmptyInputValue(control.value) || TiValidators.isEmptyInputValue(min)) {
                return null; // don't validate empty values to allow optional controls
            }
            const value = parseFloat(control.value);
            // Controls with NaN values after parsing should be treated as not having a
            // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max
            return !isNaN(value) && value < min ? { minValue: { requiredMinValue: min, actual: control.value } } : null;
        };
    }
    /**
     * @ignore
     */
    static rangeValue(min, max) {
        return (control) => {
            if (TiValidators.isEmptyInputValue(control.value) || TiValidators.isEmptyInputValue(min) || TiValidators.isEmptyInputValue(max)) {
                return null; // don't validate empty values to allow optional controls
            }
            const value = parseFloat(control.value);
            // Controls with NaN values after parsing should be treated as not having a
            // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max
            return !isNaN(value) && (value < min || value > max) ? { rangeValue: { requiredMinValue: min,
                    requiredMaxValue: max, actual: control.value } } : null;
        };
    }
    /**
     * @ignore
     */
    static regExp(pattern) {
        if (!pattern) {
            return Validators.nullValidator;
        }
        let regex;
        let regexStr;
        if (typeof pattern === 'string') {
            regexStr = '';
            if (pattern.charAt(0) !== '^') {
                regexStr += '^';
            }
            regexStr += pattern;
            if (pattern.charAt(pattern.length - 1) !== '$') {
                regexStr += '$';
            }
            regex = new RegExp(regexStr);
        }
        else {
            regexStr = pattern.toString();
            regex = pattern;
        }
        return (control) => {
            if (TiValidators.isEmptyInputValue(control.value)) {
                return null; // don't validate empty values to allow optional controls
            }
            const value = control.value;
            return regex.test(value) ? null : { regExp: { requiredPattern: regexStr, actualValue: value } };
        };
    }
    /**
     * @ignore
     */
    static email(control) {
        if (TiValidators.isEmptyInputValue(control.value)) {
            return null; // don't validate empty values to allow optional controls
        }
        return TiValidators.EMAIL_REGEXP.test(control.value) ? null : { email: true };
    }
    /**
     * @ignore
     */
    static contains(contain) {
        return (control) => {
            if (TiValidators.isEmptyInputValue(control.value) || TiValidators.isEmptyInputValue(contain)) {
                return null; // don't validate empty values to allow optional controls
            }
            return control.value.indexOf(contain) === -1 ?
                { contains: { requiredContains: contain, actualValue: control.value } } : null;
        };
    }
    /**
     * @ignore
     */
    static notContains(contain) {
        return (control) => {
            if (TiValidators.isEmptyInputValue(control.value) || TiValidators.isEmptyInputValue(contain)) {
                return null; // don't validate empty values to allow optional controls
            }
            return control.value.indexOf(contain) !== -1 ?
                { notContains: { requiredNotContains: contain, actualValue: control.value } } : null;
        };
    }
    /**
     * @ignore
     */
    static equal(equal) {
        return (control) => {
            if (TiValidators.isEmptyInputValue(control.value) || TiValidators.isEmptyInputValue(equal)) {
                return null; // don't validate empty values to allow optional controls
            }
            return control.value !== equal ?
                { equal: { requiredEqual: equal, actualValue: control.value } } : null;
        };
    }
    /**
     * @ignore
     */
    static notEqual(equal) {
        return (control) => {
            if (TiValidators.isEmptyInputValue(control.value) || TiValidators.isEmptyInputValue(equal)) {
                return null; // don't validate empty values to allow optional controls
            }
            return control.value === equal ?
                { notEqual: { requiredNotEqual: equal, actualValue: control.value } } : null;
        };
    }
    /**
     * @ignore
     */
    static notScript(control) {
        if (TiValidators.isEmptyInputValue(control.value)) {
            return null; // don't validate empty values to allow optional controls
        }
        return TiValidators.SCRIPT_REGEXP.test(control.value) ? { notScript: true } : null;
    }
    /**
     * @ignore
     */
    static port(control) {
        if (TiValidators.isEmptyInputValue(control.value)) {
            return null; // don't validate empty values to allow optional controls
        }
        return TiValidators.DIGITS_REGEXP.test(control.value) && (control.value >= TiValidators.PORT_RANGE[0]) &&
            (control.value <= TiValidators.PORT_RANGE[1]) ?
            null : { port: { min: TiValidators.PORT_RANGE[0], max: TiValidators.PORT_RANGE[1] } };
    }
    /**
     * @ignore
     */
    static date(control) {
        if (TiValidators.isEmptyInputValue(control.value)) {
            return null; // don't validate empty values to allow optional controls
        }
        return !/Invalid|NaN/.test(new Date(control.value).toString()) ?
            null : { date: true };
    }
    /**
     * @ignore
     */
    static url(control) {
        if (TiValidators.isEmptyInputValue(control.value)) {
            return null; // don't validate empty values to allow optional controls
        }
        return TiValidators.URL_REGEXP.test(control.value) ?
            null : { url: true };
    }
    /**
     * @ignore
     */
    static integer(control) {
        if (TiValidators.isEmptyInputValue(control.value)) {
            return null; // don't validate empty values to allow optional controls
        }
        return TiValidators.INTEGER_REGEXP.test(control.value) ?
            null : { integer: true };
    }
    /**
     * @ignore
     */
    static number(control) {
        if (TiValidators.isEmptyInputValue(control.value)) {
            return null; // don't validate empty values to allow optional controls
        }
        return TiValidators.NUMBER_REGEXP.test(control.value) ?
            null : { number: true };
    }
    /**
     * @ignore
     */
    static digits(control) {
        if (TiValidators.isEmptyInputValue(control.value)) {
            return null; // don't validate empty values to allow optional controls
        }
        return TiValidators.DIGITS_REGEXP.test(control.value) ?
            null : { digits: true };
    }
    /**
     * @ignore
     */
    static ipv4(control) {
        if (TiValidators.isEmptyInputValue(control.value)) {
            return null; // don't validate empty values to allow optional controls
        }
        return TiValidators.IPV4_REGEXP.test(control.value) ?
            null : { ipv4: true };
    }
    /**
     * @ignore
     */
    static ipv6(control) {
        if (TiValidators.isEmptyInputValue(control.value)) {
            return null; // don't validate empty values to allow optional controls
        }
        return TiValidators.IPV6_REGEXP.test(control.value) ?
            null : { ipv6: true };
    }
    /**
     * @ignore
     * 密码字符类型最小种类校验
     * 用于密码校验，其规则如下：
     * 口令必须包含且只能包含如下至少两种字符的组合:
     * －至少一个小写字母；
     * －至少一个大写字母；
     * －至少一个数字；
     * －至少一个特殊字符：`~!@#$%^&*()-_=+\|[{}];:'",<.>/?和空格
     * @param  num 字符类型最小个数
     * @param  charTypeRegObj 字符类型校验正则表达式，涉及到强度计算，参考defaults中定义
     */
    static minCharType(num, charTypeRegObj) {
        /**
         * 正则表达式转为字符串并首尾去除“/”符号，为添加g修饰符做准备
         */
        function regExpToString(regExp) {
            if (typeof regExp !== 'object') {
                return '';
            }
            const regExpStr = String(regExp);
            return regExpStr.substring(1, regExpStr.length - 1);
        }
        return (control) => {
            if (TiValidators.isEmptyInputValue(control.value) || TiValidators.isEmptyInputValue(num) || num === 0) {
                return null; // don't validate empty values to allow optional controls
            }
            // 各类字符校验正则表达式集合,默认使用pwdConfig中的默认配置
            const charRegObj = typeof charTypeRegObj === 'object' ? charTypeRegObj :
                TiPwdConfig.pwdCharTypeRegObj;
            // 校验输入是否符合单条校验字符规则，并记录符合的单条规则个数
            let checkValidNum = 0; // 校验通过结果个数
            let checkResult; // 校验结果临时变量
            let replacedValue = control.value; // 正则替换后的value值
            for (const key in charRegObj) {
                if (charRegObj.hasOwnProperty(key)) {
                    const regExp = charRegObj[key];
                    checkResult = regExp.test(control.value);
                    if (checkResult) {
                        checkValidNum++;
                        // 使用全局替换方式，用于替换字串中所有符合正则规则的字符
                        replacedValue = regExp.global
                            ? replacedValue.replace(regExp, '')
                            : replacedValue.replace(new RegExp(regExpToString(regExp), 'g'), '');
                    }
                }
            }
            // 替换后的值非空情况:代表值中存在非法字符
            return replacedValue.length > 0 || checkValidNum < num ?
                { minCharType: true } : null;
        };
    }
    /**
     * @ignore
     * 用于密码校验：密码不能和用户名或其倒序相同
     * @param  getControlFn 获取对比的表单元素formControl函数
     */
    static notEqualPosRev(getControlFn) {
        return (control) => {
            if (TiValidators.isEmptyInputValue(control.value) || Util.isUndefined(getControlFn && getControlFn())) {
                return null; // don't validate empty values to allow optional controls
            }
            const value = control.value;
            const refreValue = getControlFn().value;
            // 使用如下方式会出现卡顿的情况：
            // 对比formControl value修改时，需要同步修改该表单的状态，否则会存在下次focus该元素或表单整体校验时
            // 该元素校验结果依然是上次的结果
            // getControlFn().valueChanges.subscribe(() => {
            //   control.updateValueAndValidity();
            // });
            return (value.toLowerCase() !== refreValue.split('')
                .reverse()
                .join('')
                .toLowerCase()) &&
                (value.toLowerCase() !== refreValue.toLowerCase()) ?
                null : { notEqualPosRev: true };
        };
    }
    /**
     * @ignore
     * 密码校验规则
     * @param pValue 规则参数:{ruleKey: param}
     */
    static password(pValue) {
        const rangeSizeParamArr = pValue.rangeSize || TiPwdConfig.pwdValidator.params.rangeSize;
        const minCharTypeParamArr = pValue.minCharType || TiPwdConfig.pwdValidator.params.minCharType;
        if (Util.isUndefined(minCharTypeParamArr[1])) {
            minCharTypeParamArr[1] = TiPwdConfig.pwdCharTypeRegObj;
        }
        const validatorComposeArr = [TiValidators.required,
            TiValidators.rangeSize(rangeSizeParamArr[0], rangeSizeParamArr[1]),
            TiValidators.minCharType(minCharTypeParamArr[0], minCharTypeParamArr[1]),
            TiValidators.notEqualPosRev(pValue.notEqualPosRev)];
        // 由于错误提示为password专有提示,需要自定义password error,而compose方法不能自定义,因此此处未使用compose
        // 此外,各子规则的错误依然需要保留,用于规则提示信息
        return (control) => {
            return _mergeErrorsPwd(_executeValidators(control, validatorComposeArr));
        };
        function _executeValidators(control, validators) {
            return validators.map((v) => v(control));
        }
        function _mergeErrorsPwd(arrayOfErrors) {
            const res = arrayOfErrors.reduce((resource, errors) => {
                return errors != null ? Object.assign(Object.assign({}, resource), errors) : resource;
            }, {});
            return Object.keys(res).length === 0 ? null : Object.assign({ password: true }, res);
        }
    }
    // 该方法用于整体校验:由于表单未foucs时,即使错误也不会显示红框,
    // 而整体校验时需要将错误的表单边框标红显示,因此需要显示调用整体校验方法
    /**
     * 该方法用于整体校验
     *
     * 参数form：需要校验的表单族
     *
     * 参数updateValueAndValidityConfig：可选，check方法内部使用的校验方法是AbstractControl的updateValueAndValidity方法，此处将方法参数开放给开发者，参数意义具体可参考https://angular.io/api/forms/AbstractControl#updatevalueandvalidity
     *
     * 返回：表单错误信息
     */
    static check(form, updateValueAndValidityConfig) {
        let errors = {};
        if (form.errors) {
            errors = Object.assign(Object.assign({}, errors), form.errors);
        }
        for (const key in form.controls) {
            if (form.controls.hasOwnProperty(key)) {
                const control = form.controls[key];
                if (control.controls) { // 嵌套的FormArray,FormGroup
                    const checkedErrors = TiValidators.check(control, updateValueAndValidityConfig);
                    if (checkedErrors !== null) {
                        errors[key] = checkedErrors;
                    }
                }
                else {
                    control.markAsTouched();
                    // 由于表单间可能有关联关系（如密码校验的notEqualPosRev，该关联关系需要对单个表单元素再次校验
                    control.updateValueAndValidity(updateValueAndValidityConfig);
                    // 读取errors信息
                    if (control.errors !== null) {
                        errors[key] = control.errors;
                    }
                }
            }
        }
        // 无errors信息时，设置为null，方便业务处理
        if (JSON.stringify(errors) === '{}') {
            errors = null;
        }
        return errors;
    }
}
/* tslint:disable:max-line-length */
TiValidators.EMAIL_REGEXP = /^((([A-Za-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([A-Za-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([A-Za-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([A-Za-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([A-Za-z]|\d|-|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([A-Za-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([A-Za-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([A-Za-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([A-Za-z]|\d|-|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([A-Za-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/;
TiValidators.SCRIPT_REGEXP = /<+\/?[Ss][Cc][Rr][Ii][Pp][Tt] *.*>*/;
TiValidators.DIGITS_REGEXP = /^\d+$/;
TiValidators.PORT_RANGE = [0, 65535];
// URL规则，其中IPv4部分，采用了下面华为自研的ipv4正则表达式
TiValidators.URL_REGEXP = /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))\.){3}((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5])))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i;
TiValidators.INTEGER_REGEXP = /^-?\d+$/;
TiValidators.NUMBER_REGEXP = /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/;
// 采用华为自研的ipv4正则表达式
TiValidators.IPV4_REGEXP = /^(((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))\.){3}((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))$/i;
// 采用华为自研的ipv6正则表达式
TiValidators.IPV6_REGEXP = /^(((([\da-f]{1,4}):){7}([\da-f]{1,4}))|(((([\da-f]{1,4}):){1,7}:)|((([\da-f]{1,4}):){6}:([\da-f]{1,4}))|((([\da-f]{1,4}):){5}:(([\da-f]{1,4}):)?([\da-f]{1,4}))|((([\da-f]{1,4}):){4}:(([\da-f]{1,4}):){0,2}([\da-f]{1,4}))|((([\da-f]{1,4}):){3}:(([\da-f]{1,4}):){0,3}([\da-f]{1,4}))|((([\da-f]{1,4}):){2}:(([\da-f]{1,4}):){0,4}([\da-f]{1,4}))|((([\da-f]{1,4}):){1}:(([\da-f]{1,4}):){0,5}([\da-f]{1,4}))|(::(([\da-f]{1,4}):){0,6}([\da-f]{1,4}))|(::([\da-f]{1,4})?))|(((([\da-f]{1,4}):){6}(((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))\.){3}((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5])))|((([\da-f]{1,4}):){5}:(((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))\.){3}((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5])))|((([\da-f]{1,4}):){4}:(([\da-f]{1,4}):)?(((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))\.){3}((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5])))|((([\da-f]{1,4}):){3}:(([\da-f]{1,4}):){0,2}(((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))\.){3}((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5])))|((([\da-f]{1,4}):){2}:(([\da-f]{1,4}):){0,3}(((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))\.){3}((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5])))|(([\da-f]{1,4})::(([\da-f]{1,4}):){0,4}(((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))\.){3}((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5])))|(::(([\da-f]{1,4}):){0,5}(((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5]))\.){3}((1?[1-9]?\d)|(10\d)|(2[0-4]\d)|(25[0-5])))))$/i;
//# sourceMappingURL=data:application/json;base64,