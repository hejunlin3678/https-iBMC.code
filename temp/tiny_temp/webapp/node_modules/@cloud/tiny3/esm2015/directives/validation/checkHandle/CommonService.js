import { Injectable, Renderer2 } from '@angular/core';
import { TiLocale } from '../../../locale/TiLocaleModule';
import { TiRenderer } from '../../../services/renderer/TiRenderer';
import { TiPopupService } from '../../../services/popup/TiPopupService';
import { Util } from '../../../utils/Util';
import { TiTipService } from '../../../services/tip/TiTipService';
import { TiValidationDefaultConfig } from '../TiValidationConfig';
import { TiErrorMsgComponent } from '../TiErrorMsgComponent';
import { CommonServiceModule } from './CommonServiceModule';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/renderer/TiRenderer";
import * as i2 from "../../../services/tip/TiTipService";
import * as i3 from "../../../services/popup/TiPopupService";
import * as i4 from "./CommonServiceModule";
/**
 * @ignore
 */
export class CommonService {
    constructor(_renderer, _tiRenderer, _tipService, _tiPopupService) {
        this._renderer = _renderer;
        this._tiRenderer = _tiRenderer;
        this._tipService = _tipService;
        this._tiPopupService = _tiPopupService;
    }
    // 获取错误信息源字串
    static _getSourceStr(ruleKey, ruleErrors, validationConf, isAsync) {
        // 优先使用tiValidation中的规则项配置errorMsg
        const errMsgConf = validationConf && validationConf.errorMessage;
        if (!Util.isUndefined(errMsgConf) && Util.isString(errMsgConf[ruleKey])) {
            return errMsgConf[ruleKey];
        }
        if (typeof ruleErrors === 'object') {
            // 获取自定义校验规则中的 tiErrorMsg
            if (!isAsync && Util.isString(ruleErrors.tiErrorMessage)) {
                return ruleErrors.tiErrorMessage;
            }
            // 获取自定义异步校验规则中的 tiAsyncErrorMessage
            if (isAsync && Util.isString(ruleErrors.tiAsyncErrorMessage)) {
                return ruleErrors.tiAsyncErrorMessage;
            }
        }
        // 获取到的tiValidation errorMsg无效情况下,使用默认规则提示
        return TiLocale.getLocaleWords().tiValid.errorMsg[ruleKey] || '';
    }
    // 获取错误提示字符串，思路是：
    // 1.先获取错误信息源字串（可能带params标识{0}/{1}等）;
    // 2.将获取的源字串中的参数替换为真实数据
    static _getErrorStr(errors, validationConf, isAsync) {
        const ruleKey = Object.keys(errors)[0];
        const ruleErrors = errors[ruleKey];
        const msgStr = CommonService._getSourceStr(ruleKey, ruleErrors, validationConf, isAsync);
        // 获取错误信息参数,无参数情况下,不需做格式匹配直接返回
        // errors格式示例：{required:true,{'maxlength': {'requiredLength': maxLength, 'actualLength': length}}}
        if ((typeof ruleErrors) !== 'object') {
            return msgStr;
        }
        const params = Object.values(ruleErrors); // 此处对错误信息定义有要求：要求错误返回对象与词条中的参数次序与一致
        return Util.formatEntry(msgStr, params);
    }
    isFocused(ele) {
        return ele.nativeElement.attributes.tiFocused !== undefined;
    }
    // 获取密码校验中校验规则信息
    getMsg(ruleKey, params) {
        const messageStr = TiLocale.getLocaleWords().tiValid.message[ruleKey];
        return Util.formatEntry(messageStr, params);
    }
    // 获取错误提示信息DOM文本，此处TiErrorMsgComponent组件处理的不仅是提示信息，还包括错误时的组件边框变红样式加载
    getErrorMsg(errors, validationConf, isAppendBody = false, isAsync) {
        const errorMsg = CommonService._getErrorStr(errors, validationConf, isAsync);
        if (!errorMsg) {
            return null;
        }
        const errorMsgComponentRef = this._tiPopupService.createCompoentRef({
            componentType: TiErrorMsgComponent,
            context: {
                errorMessage: errorMsg,
                isAppendBody
            }
        });
        return errorMsgComponentRef.location.nativeElement;
    }
    // 调用ti-Tip组件生成Tip提示,该公共方法中同时传递了tip的位置信息等
    generateTip(ele, tipContent, validationConf, context) {
        const tipInstance = this._tipService.create(ele.nativeElement, {
            position: validationConf.tipPosition || TiValidationDefaultConfig.tipPosition,
            maxWidth: validationConf.tipMaxWidth
        });
        tipInstance.show(tipContent, context);
        ele.nativeElement.tiValidTip = tipInstance;
        return tipInstance;
    }
    // 销毁Tip提示
    destroyTip(ele) {
        const tipEle = ele.nativeElement.tiValidTip;
        if (!Util.isUndefined(tipEle)) {
            tipEle.hide();
        }
    }
    // 根据errors结果生成可占位的错误提示信息(blurCheck和pwdCheck中使用)
    addValidMsg(ele, validationConf, formControl, isAsync) {
        const errors = formControl.control.errors;
        // 校验正确情况下不做处理
        if (errors === null) {
            return;
        }
        const errorDom = this.getErrorMsg(errors, validationConf, true, isAsync);
        if (errorDom === null || errorDom.childNodes.length === 0) {
            return;
        }
        // 添加错误信息
        if (validationConf && validationConf.errorMessageWrapper) {
            this._renderer.appendChild(validationConf.errorMessageWrapper, errorDom);
        }
        else if (ele.nativeElement.hasAttribute('tiTextarea')) {
            this._tiRenderer.insertAfter(errorDom, this._renderer.parentNode(ele.nativeElement));
        }
        else {
            this._tiRenderer.insertAfter(errorDom, ele.nativeElement);
        }
        ele.nativeElement.tiErrorMessage = errorDom;
    }
    // 销毁可占位的错误提示信息(blurCheck和pwdCheck中使用)
    clearValidMsg(ele) {
        const errMsgDom = ele.nativeElement.tiErrorMessage;
        if (!Util.isUndefined(errMsgDom)) {
            this._renderer.removeChild(errMsgDom.parentNode, errMsgDom);
        }
    }
}
CommonService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CommonService_Factory() { return new CommonService(i0.ɵɵinject(i0.Renderer2), i0.ɵɵinject(i1.TiRenderer), i0.ɵɵinject(i2.TiTipService), i0.ɵɵinject(i3.TiPopupService)); }, token: CommonService, providedIn: i4.CommonServiceModule });
CommonService.decorators = [
    { type: Injectable, args: [{
                providedIn: CommonServiceModule
            },] }
];
CommonService.ctorParameters = () => [
    { type: Renderer2 },
    { type: TiRenderer },
    { type: TiTipService },
    { type: TiPopupService }
];
//# sourceMappingURL=data:application/json;base64,