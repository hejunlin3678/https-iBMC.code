import { Directive, ElementRef, Input } from '@angular/core';
import { TiDragService } from '../../services/drag/TiDragService';
/**
 * 拖拽指令，除指令方式外，还提供了服务生成方式[TiDragService]{@link ../injectables/TiDragService.html}
 *
 * <example-url>../tiny3demo/#/drag/drag-all</example-url>
 */
export class TiDraggableDirective {
    constructor(hostEle, dragService) {
        this.hostEle = hostEle;
        this.dragService = dragService;
        /**
         * 拖拽是否灰化，可动态修改
         */
        this.tiDragDisabled = false;
    }
    ngOnInit() {
        this.options = Object.assign(Object.assign({}, this.tiDraggable), { helper: this.hostEle.nativeElement, disabled: this.tiDragDisabled });
        this.dragInstance = this.dragService.create(this.options);
    }
    ngOnChanges(changes) {
        // 通过直接修改options的方式修改disabled状态
        if (changes['tiDragDisabled'] && !changes['tiDragDisabled'].firstChange) {
            this.options.disabled = this.tiDragDisabled;
        }
    }
    ngOnDestroy() {
        // 修复SSR错误：TypeError: Cannot read property 'destroy' of undefined
        this.dragInstance && this.dragInstance.destroy();
    }
}
TiDraggableDirective.decorators = [
    { type: Directive, args: [{
                selector: '[tiDraggable]'
            },] }
];
TiDraggableDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: TiDragService }
];
TiDraggableDirective.propDecorators = {
    tiDraggable: [{ type: Input }],
    tiDragDisabled: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGlEcmFnZ2FibGVEaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9AY2xvdWQvdGlueTMvZGlyZWN0aXZlcy9kcmFnL1RpRHJhZ2dhYmxlRGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsVUFBVSxFQUNWLEtBQUssRUFLUixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQXFCLGFBQWEsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3JGOzs7O0dBSUc7QUFJSCxNQUFNLE9BQU8sb0JBQW9CO0lBYTdCLFlBQW9CLE9BQW1CLEVBQVUsV0FBMEI7UUFBdkQsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFVLGdCQUFXLEdBQVgsV0FBVyxDQUFlO1FBUjNFOztXQUVHO1FBQ00sbUJBQWMsR0FBWSxLQUFLLENBQUM7SUFLcUMsQ0FBQztJQUMvRSxRQUFRO1FBQ0osSUFBSSxDQUFDLE9BQU8sbUNBQ0wsSUFBSSxDQUFDLFdBQVcsS0FDbkIsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUNsQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGNBQWMsR0FDaEMsQ0FBQztRQUNGLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFDRCxXQUFXLENBQUMsT0FBc0I7UUFDOUIsK0JBQStCO1FBQy9CLElBQUksT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxXQUFXLEVBQUU7WUFDckUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztTQUMvQztJQUNMLENBQUM7SUFDRCxXQUFXO1FBQ1AsaUVBQWlFO1FBQ2pFLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNyRCxDQUFDOzs7WUFsQ0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxlQUFlO2FBQzVCOzs7WUFmRyxVQUFVO1lBT2MsYUFBYTs7OzBCQWFwQyxLQUFLOzZCQUlMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgRGlyZWN0aXZlLFxyXG4gICAgRWxlbWVudFJlZixcclxuICAgIElucHV0LFxyXG4gICAgT25DaGFuZ2VzLFxyXG4gICAgT25EZXN0cm95LFxyXG4gICAgT25Jbml0LFxyXG4gICAgU2ltcGxlQ2hhbmdlc1xyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUaURyYWdnYWJsZUNvbmZpZywgVGlEcmFnU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2RyYWcvVGlEcmFnU2VydmljZSc7XHJcbi8qKlxyXG4gKiDmi5bmi73mjIfku6TvvIzpmaTmjIfku6TmlrnlvI/lpJbvvIzov5jmj5DkvpvkuobmnI3liqHnlJ/miJDmlrnlvI9bVGlEcmFnU2VydmljZV17QGxpbmsgLi4vaW5qZWN0YWJsZXMvVGlEcmFnU2VydmljZS5odG1sfVxyXG4gKlxyXG4gKiA8ZXhhbXBsZS11cmw+Li4vdGlueTNkZW1vLyMvZHJhZy9kcmFnLWFsbDwvZXhhbXBsZS11cmw+XHJcbiAqL1xyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW3RpRHJhZ2dhYmxlXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFRpRHJhZ2dhYmxlRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcbiAgICAvKipcclxuICAgICAqIOaLluaLvemFjee9rumhuVxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSB0aURyYWdnYWJsZTogVGlEcmFnZ2FibGVDb25maWc7XHJcbiAgICAvKipcclxuICAgICAqIOaLluaLveaYr+WQpueBsOWMlu+8jOWPr+WKqOaAgeS/ruaUuVxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSB0aURyYWdEaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBkcmFnSW5zdGFuY2U6IHtcclxuICAgICAgICBkZXN0cm95KCk6IHZvaWRcclxuICAgIH07XHJcbiAgICBwcml2YXRlIG9wdGlvbnM6IFRpRHJhZ2dhYmxlQ29uZmlnO1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBob3N0RWxlOiBFbGVtZW50UmVmLCBwcml2YXRlIGRyYWdTZXJ2aWNlOiBUaURyYWdTZXJ2aWNlKSB7fVxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0ge1xyXG4gICAgICAgICAgICAuLi50aGlzLnRpRHJhZ2dhYmxlLFxyXG4gICAgICAgICAgICBoZWxwZXI6IHRoaXMuaG9zdEVsZS5uYXRpdmVFbGVtZW50LFxyXG4gICAgICAgICAgICBkaXNhYmxlZDogdGhpcy50aURyYWdEaXNhYmxlZFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5kcmFnSW5zdGFuY2UgPSB0aGlzLmRyYWdTZXJ2aWNlLmNyZWF0ZSh0aGlzLm9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgIC8vIOmAmui/h+ebtOaOpeS/ruaUuW9wdGlvbnPnmoTmlrnlvI/kv67mlLlkaXNhYmxlZOeKtuaAgVxyXG4gICAgICAgIGlmIChjaGFuZ2VzWyd0aURyYWdEaXNhYmxlZCddICYmICFjaGFuZ2VzWyd0aURyYWdEaXNhYmxlZCddLmZpcnN0Q2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5kaXNhYmxlZCA9IHRoaXMudGlEcmFnRGlzYWJsZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgLy8g5L+u5aSNU1NS6ZSZ6K+v77yaVHlwZUVycm9yOiBDYW5ub3QgcmVhZCBwcm9wZXJ0eSAnZGVzdHJveScgb2YgdW5kZWZpbmVkXHJcbiAgICAgICAgdGhpcy5kcmFnSW5zdGFuY2UgJiYgdGhpcy5kcmFnSW5zdGFuY2UuZGVzdHJveSgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==