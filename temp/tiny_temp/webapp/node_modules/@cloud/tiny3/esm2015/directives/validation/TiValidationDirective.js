import { Directive, ElementRef, Input, RendererFactory2 } from '@angular/core';
/* tslint:disable:no-implicit-dependencies */
import { NgControl } from '@angular/forms';
import { CheckStyleService } from './checkHandle/CheckStyleService';
import { CommonService } from './checkHandle/CommonService';
import { timer } from 'rxjs';
import { debounce } from 'rxjs/operators';
/**
 * Tiny校验是基于Angular提供的表单校验进行的封装，在使用Tiny组件前，请先了解[Angular表单校验]{@link https://angular.io/guide/form-validation}
 *
 * 组件支持的校验规则及方法见 [TiValidators]{@link ../classes/TiValidators.html}
 *
 * <example-url>../tiny3demo/#/validation/validation-all</example-url>
 */
export class TiValidationDirective {
    constructor(formControl, checkStyleFactory, element, rendererFactory) {
        this.formControl = formControl;
        this.checkStyleFactory = checkStyleFactory;
        this.element = element;
        this.eleNative = this.element.nativeElement;
        /* tslint:disable:no-null-keyword */
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    ngOnInit() {
        // 初始化handleFn,用于处理tiValidation指令声明但未定义值场景
        this._setHandleFn();
        // 订阅onStatusChange事件,传递校验时机
        this.formStatusSubscription = this.formControl.statusChanges.subscribe(() => {
            this._validationHandleFn.onStatusChange(this.element, this.formControl);
        });
        // 订阅onStatusChange事件来特别处理异步校验pending状态的loading图标
        if (this.formControl.control.asyncValidator) {
            this.asyncFormStatusSubscription = this.formControl.statusChanges
                .pipe(
            // 由于异步校验有防抖处理(输入停顿后再进行异步校验)，所以需要在异步校验开始时才能出现loading图标
            debounce(() => timer(Number(this.formControl.pending) * TiValidationDirective.ASYNC_DEBOUNCE_TIME)))
                .subscribe(() => {
                if (this._validationHandleFn.onAsyncStatusChange) {
                    this._validationHandleFn.onAsyncStatusChange(this.element, this.formControl);
                }
            });
        }
    }
    ngOnChanges(changes) {
        if (changes['tiValidation'] && !changes['tiValidation'].firstChange) { // validation动态修改支持,此处根据validation重新创建校验实体方法函数
            this._setHandleFn();
        }
    }
    ngOnDestroy() {
        // 宿主元素销毁时，销毁其附属tip
        this._validationHandleFn.destroy(this.element);
        // 取消formControl中statusChanges的订阅
        this.formStatusSubscription.unsubscribe();
        if (this.asyncFormStatusSubscription) {
            this.asyncFormStatusSubscription.unsubscribe();
        }
    }
    /**
     * @ignore
     */
    onFocus() {
        this._markAsFocus();
        this._validationHandleFn.onFocus(this.element, this.formControl);
    }
    /**
     * @ignore
     */
    onBlur() {
        this._markAsBlur();
        this._validationHandleFn.onBlur(this.element, this.formControl);
    }
    _setHandleFn() {
        // 将errorMessageWrapper和tiValidation属性合并，方便后续处理
        const validationConfig = Object.assign(Object.assign({}, this.tiValidation), { errorMessageWrapper: this.errorMessageWrapper });
        this._validationHandleFn = this.checkStyleFactory.
            createHandler(this.tiValidation && this.tiValidation.type, validationConfig);
        // 失焦校验时给宿主元素添加tiBlurCheck属性标识
        if (this.tiValidation && this.tiValidation.type === 'blur') {
            this.renderer.setAttribute(this.eleNative, 'tiBlurCheck', '');
        }
    }
    // 设置focus状态标志,标志包括两部分(如下markAsBlur逻辑类似)：
    // 1.样式类,用于根据focus/blur状态设置CSS中表单边框颜色;
    // 2.标志位,用于根据focus/blur判断是否显示提示信息
    _markAsFocus() {
        this.renderer.setAttribute(this.eleNative, 'tiFocused', 'tiFocused');
    }
    _markAsBlur() {
        this.renderer.removeAttribute(this.eleNative, 'tiFocused');
    }
}
TiValidationDirective.ASYNC_DEBOUNCE_TIME = 500; // 这个数值跟tiny2的异步校验一致
TiValidationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[tiValidation]',
                // 声明该组件定义时需要用到的服务
                providers: [CheckStyleService, CommonService],
                host: {
                    '(focus)': 'onFocus()',
                    '(blur)': 'onBlur()'
                }
            },] }
];
TiValidationDirective.ctorParameters = () => [
    { type: NgControl },
    { type: CheckStyleService },
    { type: ElementRef },
    { type: RendererFactory2 }
];
TiValidationDirective.propDecorators = {
    tiValidation: [{ type: Input }],
    errorMessageWrapper: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGlWYWxpZGF0aW9uRGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vQGNsb3VkL3RpbnkzL2RpcmVjdGl2ZXMvdmFsaWRhdGlvbi9UaVZhbGlkYXRpb25EaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUEyQyxnQkFBZ0IsRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDdkksNkNBQTZDO0FBQzdDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFNUQsT0FBTyxFQUFnQixLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTFDOzs7Ozs7R0FNRztBQVVILE1BQU0sT0FBTyxxQkFBcUI7SUFjaEMsWUFBb0IsV0FBc0IsRUFDdEIsaUJBQW9DLEVBQ3BDLE9BQW1CLEVBQzNCLGVBQWlDO1FBSHpCLGdCQUFXLEdBQVgsV0FBVyxDQUFXO1FBQ3RCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDcEMsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQU0vQixjQUFTLEdBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFKbEQsb0NBQW9DO1FBQ3BDLElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUdELFFBQVE7UUFDTiwwQ0FBMEM7UUFDMUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLDRCQUE0QjtRQUM1QixJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxD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QVMsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUNPLFdBQVc7UUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUM3RCxDQUFDOztBQTNGc0IseUNBQW1CLEdBQVcsR0FBRyxDQUFDLENBQUMsb0JBQW9COztZQVYvRSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsa0JBQWtCO2dCQUNsQixTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLENBQUM7Z0JBQzdDLElBQUksRUFBRTtvQkFDSixTQUFTLEVBQUUsV0FBVztvQkFDdEIsUUFBUSxFQUFFLFVBQVU7aUJBQ3JCO2FBQ0Y7OztZQXRCUSxTQUFTO1lBQ1QsaUJBQWlCO1lBSE4sVUFBVTtZQUFrRCxnQkFBZ0I7OzsyQkE4QjdGLEtBQUs7a0NBSUwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFJlbmRlcmVyMiwgUmVuZGVyZXJGYWN0b3J5MiwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby1pbXBsaWNpdC1kZXBlbmRlbmNpZXMgKi9cclxuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBDaGVja1N0eWxlU2VydmljZSB9IGZyb20gJy4vY2hlY2tIYW5kbGUvQ2hlY2tTdHlsZVNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDb21tb25TZXJ2aWNlIH0gZnJvbSAnLi9jaGVja0hhbmRsZS9Db21tb25TZXJ2aWNlJztcclxuaW1wb3J0IHsgVGlWYWxpZGF0aW9uQ29uZmlnIH0gZnJvbSAnLi9UaVZhbGlkYXRpb25JbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24sIHRpbWVyIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGRlYm91bmNlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuLyoqXHJcbiAqIFRpbnnmoKHpqozmmK/ln7rkuo5Bbmd1bGFy5o+Q5L6b55qE6KGo5Y2V5qCh6aqM6L+b6KGM55qE5bCB6KOF77yM5Zyo5L2/55SoVGlueee7hOS7tuWJje+8jOivt+WFiOS6huino1tBbmd1bGFy6KGo5Y2V5qCh6aqMXXtAbGluayBodHRwczovL2FuZ3VsYXIuaW8vZ3VpZGUvZm9ybS12YWxpZGF0aW9ufVxyXG4gKlxyXG4gKiDnu4Tku7bmlK/mjIHnmoTmoKHpqozop4TliJnlj4rmlrnms5Xop4EgW1RpVmFsaWRhdG9yc117QGxpbmsgLi4vY2xhc3Nlcy9UaVZhbGlkYXRvcnMuaHRtbH1cclxuICpcclxuICogPGV4YW1wbGUtdXJsPi4uL3RpbnkzZGVtby8jL3ZhbGlkYXRpb24vdmFsaWRhdGlvbi1hbGw8L2V4YW1wbGUtdXJsPlxyXG4gKi9cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbdGlWYWxpZGF0aW9uXScsXHJcbiAgLy8g5aOw5piO6K+l57uE5Lu25a6a5LmJ5pe26ZyA6KaB55So5Yiw55qE5pyN5YqhXHJcbiAgcHJvdmlkZXJzOiBbQ2hlY2tTdHlsZVNlcnZpY2UsIENvbW1vblNlcnZpY2VdLFxyXG4gIGhvc3Q6IHtcclxuICAgICcoZm9jdXMpJzogJ29uRm9jdXMoKScsXHJcbiAgICAnKGJsdXIpJzogJ29uQmx1cigpJ1xyXG4gIH1cclxufSlcclxuZXhwb3J0IGNsYXNzIFRpVmFsaWRhdGlvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQVNZTkNfREVCT1VOQ0VfVElNRTogbnVtYmVyID0gNTAwOyAvLyDov5nkuKrmlbDlgLzot590aW55MueahOW8guatpeagoemqjOS4gOiHtFxyXG4gIC8qKlxyXG4gICAqIOagoemqjOmFjee9ruS/oeaBr1xyXG4gICAqL1xyXG4gIEBJbnB1dCgpIHRpVmFsaWRhdGlvbjogVGlWYWxpZGF0aW9uQ29uZmlnO1xyXG4gIC8qKlxyXG4gICAqIOmUmeivr+aPkOekuuS/oeaBr+aYvuekuuWuueWZqO+8jOmAgueUqOS6jmJsdXIvcGFzc3dvcmTnsbvlnovmoKHpqozlvaLlvI/kuIvvvIzplJnor6/mj5DnpLrkv6Hmga/kvY3nva7oh6rlrprkuYnlnLrmma9cclxuICAgKi9cclxuICBASW5wdXQoKSBlcnJvck1lc3NhZ2VXcmFwcGVyOiBFbGVtZW50O1xyXG4gIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMjtcclxuICAvLyDlvZPliY1mb3JtQ29udHJvbOeahHN0YXR1c0NoYW5nZXPorqLpmIXvvIzlnKjmjIfku6TplIDmr4Hml7blj5bmtohcclxuICBwcml2YXRlIGZvcm1TdGF0dXNTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuICBwcml2YXRlIGFzeW5jRm9ybVN0YXR1c1N1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZm9ybUNvbnRyb2w6IE5nQ29udHJvbCxcclxuICAgICAgICAgICAgICBwcml2YXRlIGNoZWNrU3R5bGVGYWN0b3J5OiBDaGVja1N0eWxlU2VydmljZSxcclxuICAgICAgICAgICAgICBwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsXHJcbiAgICAgICAgICAgICAgcmVuZGVyZXJGYWN0b3J5OiBSZW5kZXJlckZhY3RvcnkyKSB7XHJcbiAgICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tbnVsbC1rZXl3b3JkICovXHJcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyRmFjdG9yeS5jcmVhdGVSZW5kZXJlcihudWxsLCBudWxsKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBfdmFsaWRhdGlvbkhhbmRsZUZuOiBhbnk7XHJcbiAgcHJpdmF0ZSBlbGVOYXRpdmU6IEVsZW1lbnQgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIC8vIOWIneWni+WMlmhhbmRsZUZuLOeUqOS6juWkhOeQhnRpVmFsaWRhdGlvbuaMh+S7pOWjsOaYjuS9huacquWumuS5ieWAvOWcuuaZr1xyXG4gICAgdGhpcy5fc2V0SGFuZGxlRm4oKTtcclxuICAgIC8vIOiuoumYhW9uU3RhdHVzQ2hhbmdl5LqL5Lu2LOS8oOmAkuagoemqjOaXtuaculxyXG4gICAgdGhpcy5mb3JtU3RhdHVzU3Vic2NyaXB0aW9uID0gdGhpcy5mb3JtQ29udHJvbC5zdGF0dXNDaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgIHRoaXMuX3ZhbGlkYXRpb25IYW5kbGVGbi5vblN0YXR1c0NoYW5nZSh0aGlzLmVsZW1lbnQsIHRoaXMuZm9ybUNvbnRyb2wpO1xyXG4gICAgfSk7XHJcbiAgICAvLyDorqLpmIVvblN0YXR1c0NoYW5nZeS6i+S7tuadpeeJueWIq+WkhOeQhuW8guatpeagoemqjHBlbmRpbmfnirbmgIHnmoRsb2FkaW5n5Zu+5qCHXHJcbiAgICBpZiAodGhpcy5mb3JtQ29udHJvbC5jb250cm9sLmFzeW5jVmFsaWRhdG9yKSB7XHJcbiAgICAgIHRoaXMuYXN5bmNGb3JtU3RhdHVzU3Vic2NyaXB0aW9uID0gIHRoaXMuZm9ybUNvbnRyb2wuc3RhdHVzQ2hhbmdlc1xyXG4gICAgICAgIC5waXBlKFxyXG4gICAgICAgICAgLy8g55Sx5LqO5byC5q2l5qCh6aqM5pyJ6Ziy5oqW5aSE55CGKOi+k+WFpeWBnOmhv+WQjuWGjei/m+ihjOW8guatpeagoemqjCnvvIzmiYDku6XpnIDopoHlnKjlvILmraXmoKHpqozlvIDlp4vml7bmiY3og73lh7rnjrBsb2FkaW5n5Zu+5qCHXHJcbiAgICAgICAgICBkZWJvdW5jZSgoKSA9PiB0aW1lcihOdW1iZXIodGhpcy5mb3JtQ29udHJvbC5wZW5kaW5nKSAqIFRpVmFsaWRhdGlvbkRpcmVjdGl2ZS5BU1lOQ19ERUJPVU5DRV9USU1FKSlcclxuICAgICAgICApXHJcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgICBpZiAodGhpcy5fdmFsaWRhdGlvbkhhbmRsZUZuLm9uQXN5bmNTdGF0dXNDaGFuZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsaWRhdGlvbkhhbmRsZUZuLm9uQXN5bmNTdGF0dXNDaGFuZ2UodGhpcy5lbGVtZW50LCB0aGlzLmZvcm1Db250cm9sKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgaWYgKGNoYW5nZXNbJ3RpVmFsaWRhdGlvbiddICYmICFjaGFuZ2VzWyd0aVZhbGlkYXRpb24nXS5maXJzdENoYW5nZSkgeyAvLyB2YWxpZGF0aW9u5Yqo5oCB5L+u5pS55pSv5oyBLOatpOWkhOagueaNrnZhbGlkYXRpb27ph43mlrDliJvlu7rmoKHpqozlrp7kvZPmlrnms5Xlh73mlbBcclxuICAgICAgdGhpcy5fc2V0SGFuZGxlRm4oKTtcclxuICAgIH1cclxuICB9XHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAvLyDlrr/kuLvlhYPntKDplIDmr4Hml7bvvIzplIDmr4HlhbbpmYTlsZ50aXBcclxuICAgIHRoaXMuX3ZhbGlkYXRpb25IYW5kbGVGbi5kZXN0cm95KHRoaXMuZWxlbWVudCk7XHJcbiAgICAvLyDlj5bmtohmb3JtQ29udHJvbOS4rXN0YXR1c0NoYW5nZXPnmoTorqLpmIVcclxuICAgIHRoaXMuZm9ybVN0YXR1c1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgaWYgKHRoaXMuYXN5bmNGb3JtU3RhdHVzU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgIHRoaXMuYXN5bmNGb3JtU3RhdHVzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEBpZ25vcmVcclxuICAgKi9cclxuICBvbkZvY3VzKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fbWFya0FzRm9jdXMoKTtcclxuICAgIHRoaXMuX3ZhbGlkYXRpb25IYW5kbGVGbi5vbkZvY3VzKHRoaXMuZWxlbWVudCwgdGhpcy5mb3JtQ29udHJvbCk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEBpZ25vcmVcclxuICAgKi9cclxuICBvbkJsdXIoKTogdm9pZCB7XHJcbiAgICB0aGlzLl9tYXJrQXNCbHVyKCk7XHJcbiAgICB0aGlzLl92YWxpZGF0aW9uSGFuZGxlRm4ub25CbHVyKHRoaXMuZWxlbWVudCwgdGhpcy5mb3JtQ29udHJvbCk7XHJcbiAgfVxyXG4gIHByaXZhdGUgX3NldEhhbmRsZUZuKCk6IHZvaWQge1xyXG4gICAgLy8g5bCGZXJyb3JNZXNzYWdlV3JhcHBlcuWSjHRpVmFsaWRhdGlvbuWxnuaAp+WQiOW5tu+8jOaWueS+v+WQjue7reWkhOeQhlxyXG4gICAgY29uc3QgdmFsaWRhdGlvbkNvbmZpZzogVGlWYWxpZGF0aW9uQ29uZmlnID0gey4uLnRoaXMudGlWYWxpZGF0aW9uLCBlcnJvck1lc3NhZ2VXcmFwcGVyOiB0aGlzLmVycm9yTWVzc2FnZVdyYXBwZXJ9O1xyXG4gICAgdGhpcy5fdmFsaWRhdGlvbkhhbmRsZUZuID0gdGhpcy5jaGVja1N0eWxlRmFjdG9yeS5cclxuICAgICAgICAgICAgY3JlYXRlSGFuZGxlcih0aGlzLnRpVmFsaWRhdGlvbiAmJiB0aGlzLnRpVmFsaWRhdGlvbi50eXBlLCB2YWxpZGF0aW9uQ29uZmlnKTtcclxuXHJcbiAgICAvLyDlpLHnhKbmoKHpqozml7bnu5nlrr/kuLvlhYPntKDmt7vliqB0aUJsdXJDaGVja+WxnuaAp+agh+ivhlxyXG4gICAgaWYgKHRoaXMudGlWYWxpZGF0aW9uICYmIHRoaXMudGlWYWxpZGF0aW9uLnR5cGUgPT09ICdibHVyJykge1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsZU5hdGl2ZSwgJ3RpQmx1ckNoZWNrJywgJycpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8g6K6+572uZm9jdXPnirbmgIHmoIflv5cs5qCH5b+X5YyF5ous5Lik6YOo5YiGKOWmguS4i21hcmtBc0JsdXLpgLvovpHnsbvkvLwp77yaXHJcbiAgLy8gMS7moLflvI/nsbss55So5LqO5qC55o2uZm9jdXMvYmx1cueKtuaAgeiuvue9rkNTU+S4reihqOWNlei+ueahhuminOiJsjtcclxuICAvLyAyLuagh+W/l+S9jSznlKjkuo7moLnmja5mb2N1cy9ibHVy5Yik5pat5piv5ZCm5pi+56S65o+Q56S65L+h5oGvXHJcbiAgcHJpdmF0ZSBfbWFya0FzRm9jdXMoKTogdm9pZCB7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsZU5hdGl2ZSwgJ3RpRm9jdXNlZCcsICd0aUZvY3VzZWQnKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBfbWFya0FzQmx1cigpOiB2b2lkIHtcclxuICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMuZWxlTmF0aXZlLCAndGlGb2N1c2VkJyk7XHJcbiAgfVxyXG59XHJcbiJdfQ==