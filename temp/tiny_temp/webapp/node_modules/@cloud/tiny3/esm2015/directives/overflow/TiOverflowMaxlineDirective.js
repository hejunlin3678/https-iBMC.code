import { Directive, ElementRef, EventEmitter, Input, NgZone, Output, Renderer2 } from '@angular/core';
import { TiTipService } from '../../services/tip/TiTipService';
import { Util, TiBrowser } from '../../utils/Util';
/**
 * 多行文本超出情况下文本处理出...并tip提示
 *
 */
export class TiOverflowMaxlineDirective {
    constructor(hostRef, renderer2, tipService, zone) {
        this.hostRef = hostRef;
        this.renderer2 = renderer2;
        this.tipService = tipService;
        this.zone = zone;
        /**
         * 文本最大行数，默认3行
         */
        this.maxLine = 3;
        /**
         * 配置文本过长时显示的tip的最大宽度。
         *
         * 3.0.9新增
         */
        this.tiTipMaxWidth = '276px';
        /**
         * 图标提示
         */
        this.iconTip = '';
        /**
         * @ignore
         * 文本被截断之后的末尾填充符号
         */
        this.character = '...'; // 暂不开放
        /**
         * @ignore
         * 图标是否可以聚焦，默认不可聚焦。
         */
        this.iconFocusable = false;
        /**
         * @ignore
         * 图标是否灰化，默认不灰化
         */
        this.iconDisabled = false;
        /**
         * @ignore
         * 文本被截断之后末尾图标点击事件
         */
        this.iconClick = new EventEmitter();
        this.shaveTextFn = () => {
            let fontHtml;
            if (Util.isEmptyString(this.iconName)) {
                fontHtml = '';
            }
            else {
                // 此处添加属性tiOverflowEndicon为了适配在plus3中定义末尾图标的样式
                // 在labelEditor组件中，需要可以聚焦。
                fontHtml = this.iconFocusable ? `<span style="display:inline-block;width:16px;line-height: 1"
                tabindex="${this.iconDisabled ? -1 : 0}" tiOverflowEndicon  class="ti3-icon-${this.iconName} ti3-icon"></span>`
                    : `<span style="display:inline-block;width:16px;line-height: 1"
                tiOverflowEndicon class="ti3-icon-${this.iconName} ti3-icon"></span>`;
            }
            // 修复SSR错误：ERROR ReferenceError: getComputedStyle is not defined
            if (typeof getComputedStyle === 'undefined') {
                return;
            }
            const lineHeight = parseFloat(getComputedStyle(this.nativeElement)
                .getPropertyValue('line-height'));
            const multiLineHeight = lineHeight * this.maxLine;
            this.nativeElement.textContent = this.text;
            // 如果该元素为inline元素时，宽度不生效会导致元素出...样式不生效，因此此处做处理
            if (getComputedStyle(this.nativeElement).display === 'inline') {
                this.renderer2.setStyle(this.nativeElement, 'display', 'inline-block');
            }
            this.nativeElement.insertAdjacentHTML('beforeend', fontHtml);
            if (this.text.length < 2 || this.nativeElement.offsetHeight <= multiLineHeight) {
                this.setEvents();
                this.isShave = false;
                return;
            }
            let charHtml = this.character;
            charHtml = charHtml.concat(fontHtml);
            // 以下使用二分算法计算文本截取位置
            let max = this.text.length - 1;
            let min = 0;
            let middle;
            while (min < max) {
                middle = (min + max + 1) / 2;
                this.nativeElement.textContent = this.text.slice(0, middle);
                this.nativeElement.insertAdjacentHTML('beforeend', charHtml);
                if (this.nativeElement.offsetHeight > multiLineHeight + 1) {
                    max = middle - 1; // 截取的内容少
                }
                else {
                    min = middle; // 截取的内容多
                }
            }
            this.nativeElement.textContent = this.text.slice(0, max);
            this.nativeElement.insertAdjacentHTML('beforeend', charHtml);
            this.setEvents();
            this.isShave = true;
        };
        this.nativeElement = this.hostRef.nativeElement;
    }
    ngOnChanges(changes) {
        this.text = this.textContent || this.nativeElement.innerHTML;
        if ((changes.maxLine && !changes.maxLine.firstChange)
            || (changes.textContent && !changes.textContent.firstChange)) {
            this.shaveTextFn();
        }
        if (this.iconFocusable && changes.iconDisabled && !changes.iconDisabled.firstChange) {
            const spanEle = this.nativeElement.querySelector('span[tiOverflowEndicon]');
            if (spanEle) {
                this.renderer2.setAttribute(spanEle, 'tabindex', this.iconDisabled ? '-1' : '0');
            }
        }
    }
    // tip配置
    ngAfterViewInit() {
        this.text = this.textContent || this.nativeElement.innerHTML; // 视图初始化完成后获取宿主元素文本
        if (TiBrowser.isIE()) {
            setTimeout(() => {
                this.shaveTextFn(); // IE下需延时处理，否则初始化获取到 offsetHeight 值与谷歌有差异
            }, 0);
        }
        else {
            this.shaveTextFn();
        }
        this.renderer2.listen(this.nativeElement, 'mouseenter', () => {
            if (this.isShave) {
                this.tipContent = this.tiTipContent || this.text;
                if (!this.tipInstance) {
                    this.tipInstance = this.tipService.create(this.nativeElement, {
                        position: this.tiTipPosition || 'right',
                        maxWidth: this.tiTipMaxWidth,
                        trigger: 'mouse'
                    });
                    this.tipInstance.show(this.tipContent);
                }
                else {
                    this.tipInstance.show(this.tipContent);
                }
            }
        });
        this.renderer2.listen(this.nativeElement, 'mouseleave', () => {
            if (this.tipInstance) {
                this.tipInstance.hide();
            }
        });
        // 修复SSR错误：ERROR ReferenceError: window is not defined
        if (typeof window === 'undefined') {
            return;
        }
        this.zone.runOutsideAngular(() => {
            this.windowResizeListener = this.renderer2.listen(window, 'resize', this.shaveTextFn);
        });
    }
    ngAfterContentChecked() {
        if (!this.nativeElement.children || this.nativeElement.children.length < 1) {
            return;
        }
        // 解绑原有监听
        if (this.listenFns) {
            this.listenFns.forEach((fn) => fn());
        }
        this.listenFns = new Array();
        this.listenFns.push(this.renderer2.listen(this.nativeElement.children[0], 'click', () => {
            this.iconClick.emit();
            if (this.icontipInstance) {
                this.icontipInstance.hide();
            }
        }));
        this.listenFns.push(this.renderer2.listen(this.nativeElement.children[0], 'mouseenter', () => {
            if (this.tipInstance) {
                this.tipInstance.hide();
            }
            this.icontipInstance = this.tipService.create(this.nativeElement.children[0], {
                position: 'top',
                maxWidth: this.tiTipMaxWidth,
                trigger: 'mouse'
            });
            this.icontipInstance.show(this.iconTip);
        }));
        this.listenFns.push(this.renderer2.listen(this.nativeElement.children[0], 'mouseleave', () => {
            if (this.tipInstance) {
                this.tipInstance.show(this.tipContent);
            }
            if (this.icontipInstance) {
                this.icontipInstance.hide();
            }
        }));
    }
    ngOnDestroy() {
        if (this.windowResizeListener) {
            this.windowResizeListener();
        }
        if (this.listenFns) {
            this.listenFns.forEach((fn) => fn());
        }
    }
    setEvents() {
        if (this.iconFocusable) {
            const clickIconEle = this.nativeElement.querySelector('span[tiOverflowEndicon]');
            if (!clickIconEle) {
                return;
            }
            this.zone.runOutsideAngular(() => {
                this.renderer2.listen(clickIconEle, 'mousedown', () => {
                    this.renderer2.setStyle(clickIconEle, 'outline', 'none');
                });
                this.renderer2.listen(clickIconEle, 'blur', () => {
                    this.renderer2.setStyle(clickIconEle, 'outline', '');
                });
            });
        }
    }
}
TiOverflowMaxlineDirective.decorators = [
    { type: Directive, args: [{
                selector: '[tiOverflow][maxLine]'
            },] }
];
TiOverflowMaxlineDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: TiTipService },
    { type: NgZone }
];
TiOverflowMaxlineDirective.propDecorators = {
    maxLine: [{ type: Input }],
    tiTipMaxWidth: [{ type: Input }],
    tiTipPosition: [{ type: Input }],
    tiTipContent: [{ type: Input }],
    iconName: [{ type: Input }],
    iconTip: [{ type: Input }],
    textContent: [{ type: Input }],
    character: [{ type: Input }],
    iconFocusable: [{ type: Input }],
    iconDisabled: [{ type: Input }],
    iconClick: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,