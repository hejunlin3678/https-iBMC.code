export declare class TiLocaleFormat {
    private static readonly TIME_FORMAT;
    private static readonly DATE_FORMAT;
    private static readonly DATETIME_FORMAT;
    private static readonly DEFAULT_LOCALE;
    /**
     * 获取语种关键字，默认为'en'
     * @return 语种关键字
     */
    private static getLocaleKey;
    /**
     * @description 对国际化数字进行处理(包含小数点)
     * @param: number 国际化数字
     * @param: isIntegerValid 只针对integer的情况
     * @return 返回数字信息
     */
    private static parseNumWithDecimal;
    /**
     * 获取数字规则信息
     * key 规则关键字
     */
    static getNumberSymbol(key: string): string;
    /**
     * @description 对数字进行国际化处理
     * @param: number 数字
     * @param: numberFormat 数字格式化形式
     * @return 返回格式化后的信息
     */
    static formatNumber(number: number, format: string): string;
    /**
     * @description 对国际化数字进行标准化处理
     * @param: number 国际化数字
     * @return 返回数字信息
     */
    static parseNumber(number: string): number;
    /**
     * @description 对时间进行国际化处理
     * @param: time 时间
     * @param: format 时间格式
     * @return 返回格式化后的信息
     */
    static formatTime(time: string | number | Date, format?: string, timezone?: string): string;
    /**
     * @description 对日期进行国际化处理
     * @param date 日期
     * @param format 日期格式
     * @return 返回格式化后的信息
     */
    static formatDate(date: Date, format?: string, timezone?: string): string;
    /**
     * @description 对时间日期进行国际化处理
     * @param: 时间日期
     * @param: 时间日期格式
     * @return 返回格式化后的信息
     */
    static formatDateTime(dateTime: Date, format?: string, timezone?: string): string;
    /**
     * 功能描述：去除千位分隔符，得到标准化数字
     * value: 带有千位分隔符的数据
     */
    static deleteGroupSep(value: any): string;
    /**
     * 检测format接口配置是否合法。目前spinner和inputnumber组件会用到
     */
    static isInvalidFormat(format: string): boolean;
}
