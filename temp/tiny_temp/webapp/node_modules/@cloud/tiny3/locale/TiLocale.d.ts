/**
 * Tiny组件中使用的国际化词条配置方法类
 *
 * 可通过在启动模块中通过配置具体的国际化语种的方式设置组件的国际化，使用方式如下：
 *
 *
 *      import {TiLocale} from '@cloud/tiny3';
 *
 *      export class AppModule {
 *
 *          constructor() {
 *              TiLocale.setLocale(TiLocale.EN_US);
 *          }
 *      }
 *
 * <h3>示例</h3>
 * <iframe src="../tiny3demo/#/locale/locale-basic" frameborder='0' width="100%" onload="this.height = document.documentElement.clientHeight"></iframe>
 */
export declare class TiLocale {
    /**
     * 英文语种关键字，关键字均使用中划线形式命名，确保和浏览器保持一致
     */
    static readonly EN_US: string;
    /**
     * 语种关键字
     */
    static readonly ZH_CN: string;
    /**
     * 语种关键字
     */
    static readonly DE_DE: string;
    /**
     * 语种关键字
     */
    static readonly ES_ES: string;
    /**
     * 语种关键字
     */
    static readonly ES_US: string;
    /**
     * 语种关键字
     */
    static readonly FR_FR: string;
    /**
     * 语种关键字
     */
    static readonly PT_BR: string;
    /**
     * Typescript没有静态代码段，所以这样代替静态代码段
     */
    protected static staticCode: void;
    /**
     * 静态代码段执行：如过word和locale未初始化，那么执行初始化。
     */
    private static initWordsAndLocale;
    /**
     * Sets words
     * @param Words 全量的语言包，由语言名称：语言词条包组成。
     *
     * @returns words
     */
    static setWords(words: any): void;
    static getWords(): any;
    /**
     * 设置组件国际化语种
     * @param locale 国际化字符，可通过TiLocale.ZH_CN/TiLocale.EN_US等语种关键字设置参数
     */
    static setLocale(locale: string): void;
    private static getLocale;
    /**
     * 设置组件国际化语种
     * @param localeKey 国际化字符，可通过TiLocale.ZH_CN/TiLocale.EN_US等语种关键字设置参数
     */
    /**
     * @ignore
     * 获取当前语言下，组件国际化语种对应的词条集合
     */
    static getLocaleWords(): any;
    /**
     * @ignore
     * 获取单个词条的国际化文本/对象
     * 参数：
     */
    static translate(keyValue: string, params?: Array<any>): any;
}
