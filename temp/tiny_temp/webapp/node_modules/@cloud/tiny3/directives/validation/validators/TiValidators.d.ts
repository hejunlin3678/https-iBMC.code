import { AbstractControl, FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';
/**
 * Tiny封装的常用校验规则及校验方法
 *
 * ### 规则使用
 * **提供了两种使用方式：**
 *
 * 1.静态方法：通过TiValidators.XXX（规则名）在JS中定义
 *
 * 2.指令方式：对应规则的指令名为tiXXX(规则名首字母大写)，如required规则的指令名为 tiRequired
 *
 * **支持的校验规则如下：**
 *
 * | 规则名称    |  配置参数意义/类型   |  规则描述  |
 * | --------   | :-----   | :---- |
 * | required   | 无       |  为空校验    |
 * | maxLength    | 最大字符长度/number      |  字符长度最大值校验    |
 * | minLength    | 最小字符长度/number      |   字符长度最小值校验    |
 * | rangeSize    | 最小长度限制/number <br/> 最大长度限制/number      |   字符长度大小区间校验    |
 * | maxValue    | 最大数值/number      |  数字最大数值校验    |
 * | minValue    | 最小数值/number      |   数字最小数值校验    |
 * | rangeValue    | 最小数值限制/number <br/> 最大数值限制/number    |   数字大小区间校验    |
 * | regExp   | 正则表达式参数/RegExp|string（不包括正则表达式头尾标识符'^(?:'、')$'）       |  正则校验    |
 * | email    | 无      |  邮箱校验    |
 * | contains    | 包含的内容/(string/number)     |   包含校验    |
 * | notContains    | 不包含的内容/(string/number)      |   不包含校验    |
 * | equal   | 相等的内容/(string/number)     |  相等校验    |
 * | notEqual    | 不相等的内容/(string/number)    |  不相等校验    |
 * | notScript    | 无      |   包含script标签校验    |
 * | port    |  无     |   端口号校验，范围为0~65535    |
 * | date    | 无      |   日期类型校验    |
 * | url    |  无     |   url校验    |
 * | integer    | 无      |   整数校验    |
 * | number    |  无     |   数字校验 |
 * | digits    | 无      |   正整数校验    |
 * | ipv4    |  无     |   ipv4校验    |
 * | ipv6    |  无     |   ipv6校验    |
 * | minCharType | 1. 符合要求的字符种类/number;<br/>2. 字符集对象类型（可选）/{string:RegExp}。<br/>默认的字符种类分别为：大写字母、小写字母、数字、特殊字符`~!@#$%^&*()-_=+\\\|[{}];:\'\",<.>/?  和空格 | 符合最小字符种类校验，默认情况为至少包含2种字符类型`。  |
 * | notEqualPosRev    |  需要比对的表单formControl对象获取函数/ () => AbstractControl     |   不能和表单对象的正序或倒序相同    |
 * | password    | 密码校验各项规则参数/对象形式 |   密码校验   |
 *
 *
 *  **password规则的参数类型**
 *
 *    {
 *        rangeSize?: [number, number],
 *        minCharType?: [bumber, {
 *            digitsCharReg: RegExp,
 *            specialCharReg: RegExp,
 *            lowerCharReg: RegExp,
 *            upperCharReg: RegExp}],
 *        notEqualPosRev: () => AbstractControl
 *    }
 */
export declare class TiValidators {
    private static readonly EMAIL_REGEXP;
    private static readonly SCRIPT_REGEXP;
    private static readonly DIGITS_REGEXP;
    private static readonly PORT_RANGE;
    private static readonly URL_REGEXP;
    private static readonly INTEGER_REGEXP;
    private static readonly NUMBER_REGEXP;
    private static readonly IPV4_REGEXP;
    private static readonly IPV6_REGEXP;
    private static isEmptyInputValue;
    /**
     * @ignore
     */
    static required(control: AbstractControl): ValidationErrors | null;
    /**
     * @ignore
     */
    static maxLength(maxLength: number): ValidatorFn;
    /**
     * @ignore
     */
    static minLength(minLength: number): ValidatorFn;
    /**
     * @ignore
     */
    static rangeSize(minLength: number, maxLength: number): ValidatorFn;
    /**
     * @ignore
     */
    static maxValue(max: number): ValidatorFn;
    /**
     * @ignore
     */
    static minValue(min: number): ValidatorFn;
    /**
     * @ignore
     */
    static rangeValue(min: number, max: number): ValidatorFn;
    /**
     * @ignore
     */
    static regExp(pattern: string | RegExp): ValidatorFn;
    /**
     * @ignore
     */
    static email(control: AbstractControl): ValidationErrors | null;
    /**
     * @ignore
     */
    static contains(contain: string | number): ValidatorFn;
    /**
     * @ignore
     */
    static notContains(contain: string | number): ValidatorFn;
    /**
     * @ignore
     */
    static equal(equal: string | number): ValidatorFn;
    /**
     * @ignore
     */
    static notEqual(equal: string | number): ValidatorFn;
    /**
     * @ignore
     */
    static notScript(control: AbstractControl): ValidationErrors | null;
    /**
     * @ignore
     */
    static port(control: AbstractControl): ValidationErrors | null;
    /**
     * @ignore
     */
    static date(control: AbstractControl): ValidationErrors | null;
    /**
     * @ignore
     */
    static url(control: AbstractControl): ValidationErrors | null;
    /**
     * @ignore
     */
    static integer(control: AbstractControl): ValidationErrors | null;
    /**
     * @ignore
     */
    static number(control: AbstractControl): ValidationErrors | null;
    /**
     * @ignore
     */
    static digits(control: AbstractControl): ValidationErrors | null;
    /**
     * @ignore
     */
    static ipv4(control: AbstractControl): ValidationErrors | null;
    /**
     * @ignore
     */
    static ipv6(control: AbstractControl): ValidationErrors | null;
    /**
     * @ignore
     * 密码字符类型最小种类校验
     * 用于密码校验，其规则如下：
     * 口令必须包含且只能包含如下至少两种字符的组合:
     * －至少一个小写字母；
     * －至少一个大写字母；
     * －至少一个数字；
     * －至少一个特殊字符：`~!@#$%^&*()-_=+\|[{}];:'",<.>/?和空格
     * @param  num 字符类型最小个数
     * @param  charTypeRegObj 字符类型校验正则表达式，涉及到强度计算，参考defaults中定义
     */
    static minCharType(num: number, charTypeRegObj?: any): ValidatorFn;
    /**
     * @ignore
     * 用于密码校验：密码不能和用户名或其倒序相同
     * @param  getControlFn 获取对比的表单元素formControl函数
     */
    static notEqualPosRev(getControlFn: () => AbstractControl): ValidatorFn;
    /**
     * @ignore
     * 密码校验规则
     * @param pValue 规则参数:{ruleKey: param}
     */
    static password(pValue: {
        rangeSize?: [number, number];
        minCharType?: [number, any];
        notEqualPosRev?(): AbstractControl;
    }): ValidatorFn;
    /**
     * 该方法用于整体校验
     *
     * 参数form：需要校验的表单族
     *
     * 参数updateValueAndValidityConfig：可选，check方法内部使用的校验方法是AbstractControl的updateValueAndValidity方法，此处将方法参数开放给开发者，参数意义具体可参考https://angular.io/api/forms/AbstractControl#updatevalueandvalidity
     *
     * 返回：表单错误信息
     */
    static check(form: FormGroup, updateValueAndValidityConfig?: {
        onlySelf?: boolean;
        emitEvent?: boolean;
    }): ValidationErrors | null;
}
