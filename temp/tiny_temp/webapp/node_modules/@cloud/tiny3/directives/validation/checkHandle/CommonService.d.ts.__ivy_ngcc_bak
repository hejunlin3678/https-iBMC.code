import { ElementRef, Renderer2 } from '@angular/core';
import { TiRenderer } from '../../../services/renderer/TiRenderer';
import { TiPopupService } from '../../../services/popup/TiPopupService';
import { TiTipService } from '../../../services/tip/TiTipService';
import { TiTipRef } from '../../../services/tip/TiTipInterface';
import { TiValidationConfig } from '../TiValidationInterface';
import { TiErrorMsgComponent } from '../TiErrorMsgComponent';
import { NgControl, ValidationErrors } from '@angular/forms';
/**
 * @ignore
 */
export declare class CommonService {
    private _renderer;
    private _tiRenderer;
    private _tipService;
    private _tiPopupService;
    constructor(_renderer: Renderer2, _tiRenderer: TiRenderer, _tipService: TiTipService, _tiPopupService: TiPopupService<TiErrorMsgComponent>);
    private static _getSourceStr;
    private static _getErrorStr;
    isFocused(ele: any): boolean;
    getMsg(ruleKey: string, params: any): string;
    getErrorMsg(errors: ValidationErrors, validationConf: TiValidationConfig, isAppendBody?: boolean, isAsync?: boolean): Element;
    generateTip(ele: ElementRef, tipContent: string, validationConf: TiValidationConfig, context?: any): TiTipRef;
    destroyTip(ele: ElementRef): void;
    addValidMsg(ele: ElementRef, validationConf: TiValidationConfig, formControl: NgControl, isAsync?: boolean): void;
    clearValidMsg(ele: ElementRef): void;
}
