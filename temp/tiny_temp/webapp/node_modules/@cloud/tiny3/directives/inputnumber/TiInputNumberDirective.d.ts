import { DefaultValueAccessor } from '@angular/forms';
import { ElementRef, Renderer2 } from '@angular/core';
/**
 * TiNumber 数字输入框指令
 *
 * 该指令主要作用于输入框上，限制只能输入数字。用户可以通过设置 数字保留精度、是否国际化 来设置数字显示格式
 *
 * 输入框处于焦点状态时，输入框中数字标准化显示。失去焦点时，根据用户配置是否支持国际化进行格式化显示
 *
 * 目前JS可以解析的范围是[-2^53, 2^53]，即16位数字。当超过16位整数时，此时数字范围已经超过JS解析方位，不能精确表示。
 *
 * <example-url>../tiny3demo/#/inputnumber/inputnumber-all</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class TiInputNumberDirective extends DefaultValueAccessor {
    private renderer;
    private elementRef;
    private document;
    /**
     * 设置数据是否支持国际化显示，默认支持国际化
     */
    localeable: boolean;
    /**
     * 设置数字精度。使用n+'小数保留位数'形式表示，例如：'n4',代表保留4位小数。
     *
     * 不设置时，自10.0.1版本起小数点后默认最少保留0位，最多保留3位；10.0.0及之前版本默认保留3位。
     */
    format: string;
    private numberFormat;
    private oldInputValue;
    private onChangeFn;
    private element;
    private oldModel;
    constructor(renderer: Renderer2, elementRef: ElementRef, document: any);
    ngOnInit(): void;
    private isValidInput;
    /**
     * 功能描述：当该值合法，直接返回. 如果不合法，则返回之前保存的有效值。
     * @memberOf TiInputNumberDirective
     */
    private getCorrectValue;
    private formatValue;
    private parseValue;
    private deleteGroupSepValue;
    /**
     * @ignore
     * 实现继承来自父类的方法
     * Sets the "value" property on the input element.
     * model->view
     */
    writeValue(value: any): void;
    /**
     * @ignore
     * Registers a function called when the control value changes
     * @param fn The callback function
     * 注册当控件接收到change事件之后，调用的函数fn
     * viewValue和model value值的同步
     */
    registerOnChange(fn: (value: any) => void): void;
    /**
     * @ignore
     * view -> model
     * 非法字符不能输入。如果是合法则更新，如果是非法，则设置为oldInputValue...
     */
    handleInput(value: string): void;
    private parser;
    /**
     * @ignore
     * 得到焦点数据标准化处理
     * @memberOf TiInputNumberDirective
     * renderer.setProperty: Implement this callback to set the value of a property of an element in the DOM.
     */
    focusFn(): void;
    /**
     * @ignore
     * 失去焦点数字国际化处理
     * @memberOf TiInputNumberDirective
     */
    blurFn(): void;
    private changeModel;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiInputNumberDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<TiInputNumberDirective, "[tiNumber]", never, { "localeable": "localeable"; "format": "format"; }, {}, never, never, false>;
}

//# sourceMappingURL=TiInputNumberDirective.d.ts.map