{"version":3,"file":"TiInputNumberDirective.d.ts","sources":["TiInputNumberDirective.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { DefaultValueAccessor } from '@angular/forms';\r\nimport { ElementRef, Renderer2 } from '@angular/core';\r\n/**\r\n * TiNumber 数字输入框指令\r\n *\r\n * 该指令主要作用于输入框上，限制只能输入数字。用户可以通过设置 数字保留精度、是否国际化 来设置数字显示格式\r\n *\r\n * 输入框处于焦点状态时，输入框中数字标准化显示。失去焦点时，根据用户配置是否支持国际化进行格式化显示\r\n *\r\n * 目前JS可以解析的范围是[-2^53, 2^53]，即16位数字。当超过16位整数时，此时数字范围已经超过JS解析方位，不能精确表示。\r\n *\r\n * <example-url>../tiny3demo/#/inputnumber/inputnumber-all</example-url>\r\n */\r\nexport declare class TiInputNumberDirective extends DefaultValueAccessor {\r\n    private renderer;\r\n    private elementRef;\r\n    private document;\r\n    /**\r\n     * 设置数据是否支持国际化显示，默认支持国际化\r\n     */\r\n    localeable: boolean;\r\n    /**\r\n     * 设置数字精度。使用n+'小数保留位数'形式表示，例如：'n4',代表保留4位小数。\r\n     *\r\n     * 不设置时，自10.0.1版本起小数点后默认最少保留0位，最多保留3位；10.0.0及之前版本默认保留3位。\r\n     */\r\n    format: string;\r\n    private numberFormat;\r\n    private oldInputValue;\r\n    private onChangeFn;\r\n    private element;\r\n    private oldModel;\r\n    constructor(renderer: Renderer2, elementRef: ElementRef, document: any);\r\n    ngOnInit(): void;\r\n    private isValidInput;\r\n    /**\r\n     * 功能描述：当该值合法，直接返回. 如果不合法，则返回之前保存的有效值。\r\n     * @memberOf TiInputNumberDirective\r\n     */\r\n    private getCorrectValue;\r\n    private formatValue;\r\n    private parseValue;\r\n    private deleteGroupSepValue;\r\n    /**\r\n     * @ignore\r\n     * 实现继承来自父类的方法\r\n     * Sets the \"value\" property on the input element.\r\n     * model->view\r\n     */\r\n    writeValue(value: any): void;\r\n    /**\r\n     * @ignore\r\n     * Registers a function called when the control value changes\r\n     * @param fn The callback function\r\n     * 注册当控件接收到change事件之后，调用的函数fn\r\n     * viewValue和model value值的同步\r\n     */\r\n    registerOnChange(fn: (value: any) => void): void;\r\n    /**\r\n     * @ignore\r\n     * view -> model\r\n     * 非法字符不能输入。如果是合法则更新，如果是非法，则设置为oldInputValue...\r\n     */\r\n    handleInput(value: string): void;\r\n    private parser;\r\n    /**\r\n     * @ignore\r\n     * 得到焦点数据标准化处理\r\n     * @memberOf TiInputNumberDirective\r\n     * renderer.setProperty: Implement this callback to set the value of a property of an element in the DOM.\r\n     */\r\n    focusFn(): void;\r\n    /**\r\n     * @ignore\r\n     * 失去焦点数字国际化处理\r\n     * @memberOf TiInputNumberDirective\r\n     */\r\n    blurFn(): void;\r\n    private changeModel;\r\n}\r\n"]}