import { AfterContentChecked, AfterViewInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { TiTipService } from '../../services/tip/TiTipService';
import { TiPositionType } from '../../utils/Position';
/**
 * 多行文本超出情况下文本处理出...并tip提示
 *
 */
export declare class TiOverflowMaxlineDirective implements AfterViewInit, AfterContentChecked, OnChanges, OnDestroy {
    private hostRef;
    private renderer2;
    private tipService;
    private zone;
    nativeElement: any;
    constructor(hostRef: ElementRef, renderer2: Renderer2, tipService: TiTipService, zone: NgZone);
    /**
     * 文本最大行数，默认3行
     */
    maxLine: number;
    /**
     * 配置文本过长时显示的tip的最大宽度。
     *
     * 3.0.9新增
     */
    tiTipMaxWidth: string;
    /**
     * 文本被截断之后的tip方向
     */
    tiTipPosition: TiPositionType;
    /**
     * 文本被截断之后的tip内容
     */
    tiTipContent: string;
    /**
     * @ignore
     * 文本被截断之后末尾图标展示
     */
    iconName: string;
    /**
     * 图标提示
     */
    iconTip: string;
    /**
     * 宿主文本
     */
    textContent: string;
    /**
     * @ignore
     * 文本被截断之后的末尾填充符号
     */
    character: string;
    /**
     * @ignore
     * 图标是否可以聚焦，默认不可聚焦。
     */
    iconFocusable: boolean;
    /**
     * @ignore
     * 图标是否灰化，默认不灰化
     */
    iconDisabled: boolean;
    /**
     * @ignore
     * 文本被截断之后末尾图标点击事件
     */
    readonly iconClick: EventEmitter<Event>;
    private text;
    private isShave;
    private tipInstance;
    private icontipInstance;
    private listenFns;
    private windowResizeListener;
    private tipContent;
    private shaveTextFn;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngAfterContentChecked(): void;
    ngOnDestroy(): void;
    setEvents(): void;
}
