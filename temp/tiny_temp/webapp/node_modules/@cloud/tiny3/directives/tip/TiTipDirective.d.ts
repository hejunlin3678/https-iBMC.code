import { ComponentRef, ElementRef, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { TiPositionType } from '../../utils/Position';
import { TiTipRef } from '../../services/tip/TiTipInterface';
import { TiTipService } from '../../services/tip/TiTipService';
/**
 * tip提供了两种使用方式:
 * 1.服务方式：[TiTipService]{@link ../injectables/TiTipService.html}
 *
 * 2.指令方式（见如下说明）
 *
 * <example-url>../tiny3demo/#/tip/tip-all</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class TiTipDirective implements OnInit, OnDestroy {
    private tipService;
    /**
     * Tip显示位置属性配置
     */
    tiTipPosition?: TiPositionType;
    /**
     * 最大宽度
     *
     */
    tiTipMaxWidth: string;
    /**
     * 是否带箭头
     */
    tiTipHasArrow?: boolean;
    /**
     * tip显示内容对应的上下文，tip内容类型为templateRef或Component形式时会用到该参数，参数为自定义对象形式
     *
     * 注意：指令形式时才会使用到该参数
     */
    tiTipContext?: any;
    /**
     * tip生成方式，默认支持鼠标移入移出时显示/隐藏
     *
     * 注意：指令形式时才会使用到该参数
     */
    tiTipTrigger?: 'mouse' | 'manual';
    /**
     * @ignore
     * 决定tip水平方向位置的宿主元素配置
     */
    tiTipHostEleX: Element;
    protected tipInstance: TiTipRef;
    private hostEle;
    private _tiTip;
    constructor(tipService: TiTipService, hostEleRef: ElementRef);
    private static isInValidValue;
    ngOnInit(): void;
    /**
     * tip显示内容配置
     *
     * 类型：string | TemplateRef<any> | any
     *
     * 传入string类型时，在v3.0.6及之前的版本存在XSS攻击风险；v3.0.7做了安全处理后不存在XSS风险了，把传入的字符串当做纯文本解析，传入什么显示什么；
     * v10.1.4版本支持html字符串片段，也已做安全处理。
     */
    set tiTip(value: string | TemplateRef<any>);
    /**
     * @ignore
     */
    get tiTip(): string | TemplateRef<any>;
    /**
     * 显示tip方法
     */
    show(): ComponentRef<any>;
    /**
     * 隐藏tip方法
     */
    hide(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiTipDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<TiTipDirective, "[tiTip]", ["tiTip"], { "tiTipPosition": "tiTipPosition"; "tiTipMaxWidth": "tiTipMaxWidth"; "tiTipHasArrow": "tiTipHasArrow"; "tiTipTrigger": "tiTipTrigger"; "tiTip": "tiTip"; "tiTipContext": "tiTipContext"; "tiTipHostEleX": "tiTipHostEleX"; }, {}, never, never, false>;
}

//# sourceMappingURL=TiTipDirective.d.ts.map