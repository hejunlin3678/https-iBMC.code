{"version":3,"file":"TiIpsectionComponent.d.ts","sources":["TiIpsectionComponent.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, Renderer2 } from '@angular/core';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiValidationConfig } from '../../directives/validation/TiValidationModule';\r\nimport { FormBuilder, FormGroup, ValidatorFn } from '@angular/forms';\r\nexport interface TiIpsectionConfig {\r\n    /**\r\n     * 标志各网段\r\n     */\r\n    section: number;\r\n    /**\r\n     * 网段为select类型时，下拉配置对象\r\n     */\r\n    options?: Array<any>;\r\n    /**\r\n     * 网段为input类型时，设置文本是否加粗\r\n     */\r\n    bold?: boolean;\r\n    /**\r\n     * 网段为input类型时，配置校验提示信息，可参考校验组件示例\r\n     */\r\n    validation?: TiValidationConfig;\r\n    /**\r\n     * 网段为input类型时，配置校验规则，可参考校验组件示例\r\n     */\r\n    validationRules?: Array<ValidatorFn>;\r\n    /**\r\n     * 设置各网段是否灰化\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * 允许有多余的属性字段\r\n     */\r\n    [propName: string]: any;\r\n}\r\n/**\r\n * Ipsection组件，Ip各网段分开处理，各网段有下拉类和输入类两种类型；\r\n *\r\n * 9.0.4新增\r\n *\r\n * <example-url>../tiny3demo/#/ipsection/ipsection-all</example-url>\r\n */\r\nexport declare class TiIpsectionComponent extends TiFormComponent {\r\n    protected hostRef: ElementRef;\r\n    protected renderer2: Renderer2;\r\n    private fb;\r\n    /**\r\n     * Ip网段配置数组对象，组件按该配置数组对象顺序渲染数据\r\n     */\r\n    configs: Array<TiIpsectionConfig>;\r\n    /**\r\n     * @ignore\r\n     * 存放 input 控件实例数组\r\n     */\r\n    private controls;\r\n    /**\r\n     * @ignore\r\n     * 格式化输入\r\n     */\r\n    maskInput: string;\r\n    /**\r\n     * @ignore\r\n     * 存放各网段 ip 值的数组\r\n     */\r\n    ipValues: Array<string>;\r\n    /**\r\n     * input控件 FormGroup 实例，服务可通过该实例动态更改某一FormControl实例相关属性（value，disabled，校验规则等）\r\n     */\r\n    formGroup: FormGroup;\r\n    constructor(hostRef: ElementRef, renderer2: Renderer2, fb: FormBuilder);\r\n    /**\r\n     * 将ip值分割为数组\r\n     */\r\n    private static splitToIPArray;\r\n    /**\r\n     * 将ip数组拼接为ip值\r\n     */\r\n    private static joinToIPValue;\r\n    ngOnInit(): void;\r\n    ngAfterViewInit(): void;\r\n    /**\r\n     * @ignore\r\n     * 获取model值，并进行初始化处理\r\n     */\r\n    writeValue(value: any): void;\r\n    /**\r\n     * @ignore\r\n     * 整体失焦触发事件\r\n     */\r\n    onBlur(event: any): void;\r\n    /**\r\n     * @ignore\r\n     * select类型网段值更改时触发事件\r\n     */\r\n    onChange(i: number, value: any): void;\r\n    /**\r\n     * 初始化ip值\r\n     */\r\n    private initIpValue;\r\n    /**\r\n     * 初始及失焦处理输入框值，清除Ip网段前面的0\r\n     */\r\n    private formatValue;\r\n    /**\r\n     * 更新model值\r\n     */\r\n    private updateIpValue;\r\n}\r\n"]}