import { ElementRef, EventEmitter, IterableDiffers, NgZone, QueryList, Renderer2 } from '@angular/core';
import { TiBaseComponent } from '../base/TiBaseModule';
/**
 * steps步骤组件
 *
 * 点击可跳转和不可跳转两种方式（默认点击不跳转）
 *
 * <example-url>../tiny3demo/#/steps/steps-all</example-url>
 */
export declare class TiStepsComponent extends TiBaseComponent {
    protected elementRef: ElementRef;
    protected renderer2: Renderer2;
    private iterableDiffers;
    private zone;
    /**
     * 设置步骤组件的每一步内容。
     * 数组的每个元素都是一个对象，对应每个步骤的一项。这个对象有2个可选属性：
     *
     * 1.steps[i].label（类型：String; 设置每个步骤对应的文本）。（非必选）
     *
     * 2.steps[i].disabled（类型：Boolean; 控制步骤是否灰化, 当clickable为true时才生效）。（非必选）
     *
     * 3.可扩展其他属性
     */
    steps: Array<any>;
    /**
     * 是否支持点击跳转功能，默认不支持
     */
    clickable: boolean;
    /**
     * 每个步骤的文本最大宽度
     */
    maxWidth: string;
    /**
     * 用户可指定要显示的属性值，默认显示label属性
     */
    labelKey: string;
    /**
     * 指定当前步骤
     */
    activeStep: any;
    /**
     * 宽度是否自动撑满父容器。
     *
     * 不设置时默认各步骤间线宽60px，步骤确定后整体宽度固定；设置为true时，整体宽度会自适应撑满父容器，适用于在弹窗中使用的场景。
     */
    adaptive: boolean;
    /**
     * 当前步骤改变时的事件
     */
    readonly activeStepChange: EventEmitter<any>;
    /**
     * 点击后用户可根据条件判断是否跳转:见测试用例
     */
    readonly beforeStep: EventEmitter<any>;
    /**
     * @ignore
     */
    stepsRef: ElementRef;
    /**
     * @ignore
     */
    lineRef: QueryList<ElementRef>;
    /**
     * @ignore
     */
    explainRef: QueryList<ElementRef>;
    private labelChange;
    private stepsDiffer;
    private isInitLabelChange;
    private explainTotalWidth;
    private windowResizeListener;
    constructor(elementRef: ElementRef, renderer2: Renderer2, iterableDiffers: IterableDiffers, zone: NgZone);
    ngOnInit(): void;
    ngDoCheck(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    /**
     * @ignore
     * 每步的点击事件处理
     */
    onClick(step: any): void;
    setLineWidth: (width?: number) => void;
    private getExplainTotalWidth;
    /**
     * @ignore
     * Diff监听steps中label值的改变
     */
    trackByLabelFn(index: number, item: any): string;
    /**
     * @ignore
     * ngFor 使用
     */
    trackByIndexFn(index: number): number;
    /**
     * @ignore
     * 判断当前项的状态
     */
    getStepState(index: number): string;
}
