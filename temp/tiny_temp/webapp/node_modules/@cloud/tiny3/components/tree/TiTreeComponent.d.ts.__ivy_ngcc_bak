import { ElementRef, EventEmitter, IterableDiffers, Renderer2, TemplateRef, QueryList, ChangeDetectorRef } from '@angular/core';
import { TiBaseComponent } from '../base/TiBaseModule';
import { TiRenderer } from '../../services/renderer/TiRenderer';
/**
 * 树组件中每个节点的配置
 */
export interface TiTreeNode {
    /**
     * 节点展示内容
     */
    label?: string;
    /**
     * 控制节点是否展开
     */
    expanded?: boolean;
    /**
     * 节点选中状态（多选场景）：选中，未选中，半选 true | false | 'indeterminate'
     */
    checked?: boolean | string;
    /**
     * 节点展开时的字体图标：节点图标的样式类名称
     *
     * 10.1.2版本之后可通过自定义模板添加图标及样式
     */
    expandIcon?: string;
    /**
     * 节点收起时的字体图标：节点图标的样式类名称
     *
     * 10.1.2版本之后可通过自定义模板添加图标及样式
     */
    collapseIcon?: string;
    /**
     * 控制多选的节点checkbox是否灰化
     */
    disabled?: boolean;
    /**
     * 子节点字段，一旦设置children: []，则认为该节点非叶子节点
     */
    children?: Array<TiTreeNode>;
    /**
     * 10.1.2 新增
     * 异步加载状态，loading正在加载，error加载失败，success加载成功
     */
    loadStatus?: 'loading' | 'error' | 'success';
    /**
     * 10.1.4 新增
     * 支持悬浮编辑功能
     */
    editable?: boolean;
    /**
     * 10.1.4 新增
     * 支持悬浮增加功能
     */
    addable?: boolean;
    /**
     * 10.1.4 新增
     * 支持悬浮删除功能
     */
    deleteable?: boolean;
    /**
     * 允许有多余的属性字段
     */
    [propName: string]: any;
}
/**
 * 10.1.4 新增
 * drag info
 */
export interface TiTreeDragNode {
    /**
     * 事件对象
     */
    event?: DragEvent;
    /**
     * 目标节点
     */
    targetNode?: TiTreeNode;
    /**
     * 被拖拽的节点
     */
    dragNode?: TiTreeNode;
    /**
     * 放置位置，-1代表当前节点前，0代表当前节点里面，1代表当前节点后
     */
    dropPosition?: number;
}
/**
 * Tree树组件
 *
 * 分类：支持单选、多选两种类型
 *
 * 公共方法：树组件提供 [TiTreeUtil]{@link ../classes/TiTreeUtil.html} 公共方法，包括增、删、改、查、选中、取消选中、遍历、筛选、获取选中项等操作
 *
 * <example-url>../tiny3demo/#/tree/tree-all</example-url>
 */
export declare class TiTreeComponent extends TiBaseComponent {
    protected elementRef: ElementRef;
    protected renderer2: Renderer2;
    protected iterableDiffers: IterableDiffers;
    private tiRenderer;
    private cdRef;
    /**
     * Tree组件使用的数据
     */
    data: Array<TiTreeNode>;
    /**
     * 设置多选树时，父节点是否可被点击选中，默认父节点子节点都显示复选框，都可被选中，设置false时，只有子节点前边显示复选框。
     */
    parentCheckable: boolean;
    /**
     * 设置是否为多选。
     */
    multiple: boolean;
    /**
     * 当为多选时该接口才生效。
     *
     * 默认为 false, 当设置为 true 时：
     *
     * 1.点击文本，复选框状态不会改变，只会触发select事件；
     *
     * 2.点击复选框只会触发change事件；
     *
     * 3.复选框disabled时，点击文本会触发select事件。
     *
     * Tiny3.1.1-alpha新增。
     */
    changedByCheckbox: boolean;
    /**
     * 10.1.2 新增
     * 搜索传入的值,对匹配的文本高亮显示
     */
    highlightWords: string;
    /**
     * 10.1.4 新增
     * 支持拖放
     */
    nodeDraggable: boolean;
    /**
     * 树节点展开前的事件回调，一般用于异步数据获取
     */
    readonly beforeExpand: EventEmitter<TiTreeComponent>;
    /**
     * 当用户点击某一节点时触发的事件
     */
    readonly select: EventEmitter<TiTreeNode>;
    /**
     * 当前选中项发生变化时，触发change事件
     */
    readonly change: EventEmitter<TiTreeNode>;
    /**
     * 10.1.4 新增
     * drop event
     */
    readonly nodeDrop: EventEmitter<TiTreeDragNode>;
    /**
     * 10.1.4 新增
     * 悬浮增加节点按钮回调
     */
    readonly nodeAdded: EventEmitter<TiTreeNode>;
    /**
     * 10.1.4 新增
     * 悬浮编辑节点按钮回调
     */
    readonly nodeEdited: EventEmitter<TiTreeNode>;
    /**
     * 10.1.4 新增
     * 悬浮删除节点按钮回调
     */
    readonly nodeDeleted: EventEmitter<TiTreeNode>;
    /**
     * 用于异步场景：当前点击需要展开的父节点
     */
    private beforeExpandNode;
    /**
     * 监听data改变
     */
    private dataDiffer;
    /**
     * @ignore
     * 获取到用户自定义的模板
     */
    itemTemplate: TemplateRef<any>;
    /**
     * @ignore
     * 获取文本区域dom集合
     */
    elems: QueryList<ElementRef>;
    /**
     * @ignore
     * 模板中使用，高亮的选中项
     */
    actived: TiTreeNode;
    /**
     * @ignore
     * 词条
     */
    treeLan: any;
    /**
     * 被拖拽节点
     */
    private dragNode;
    /**
     * 拖拽position
     */
    private dropPosition;
    /**
     * 拖放经过的节点
     */
    private overNode;
    constructor(elementRef: ElementRef, renderer2: Renderer2, iterableDiffers: IterableDiffers, tiRenderer: TiRenderer, cdRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngDoCheck(): void;
    /**
     * @ignore
     * @description 判断是否显示复选框
     * @param node 节点数据
     */
    showCheckboxFn(node: TiTreeNode): boolean;
    /**
     * @ignore
     * @description 点击父节点图标执行的逻辑
     * @param  node 当前节点数据
     */
    onClickPnodeIcon(node: TiTreeNode, event: MouseEvent): void;
    getBeforeExpandNode(): TiTreeNode;
    /**
     * @ignore
     * @description 根据item的isExpanded属性获取item图标
     * @param node 当前节点数据
     */
    getItemIcon(node: TiTreeNode): string;
    /**
     * @ignore
     * @description 点击复选框触发select、change事件
     * 需要注意：click事件中拿到的是操作前的选中状态，而change事件中拿到的是操作后的选中状态
     * @param node 当前节点数据
     */
    onInputChange(node: TiTreeNode, event: Event): void;
    /**
     * @ignore
     * 点击文本区域
     * @param node 当前节点数据
     * @param event 鼠标事件
     * @returns void
     */
    onItemWrapperClick(node: TiTreeNode): void;
    private setSeletedState;
    /**
     * 单选时，取消所有节点的选中状态
     * @param  allData 所有节点数据
     */
    private deSelectAllNode;
    /**
     * @ignore
     */
    trackByFn(index: number, node: any): any;
    /**
     * @ignore
     * 判断是否为叶子节点
     */
    isLeaf(node: TiTreeNode): boolean;
    private initActived;
    /**
     * @ignore
     * @param node 节点数据
     */
    onBlur(node: TiTreeNode): void;
    /**
     * @ignore
     * @param node 节点数据
     */
    onFocus(node: TiTreeNode): void;
    /**
     * @ignore
     * @param event 键盘事件
     * @param node 当前节点数据
     */
    onKeydown(event: KeyboardEvent, node: TiTreeNode): void;
    private setKeyDownUp;
    private setKeyleft;
    private setKeyright;
    private setFocusNode;
    private setFocusElem;
    /**
     * @ignore
     * @param startEvent 鼠标事件
     * @param node 当前节点数据
     * @description 拖拽开始时在被拖拽元素上触发此事件
     */
    onDragstart(event: DragEvent, node: TiTreeNode): void;
    /**
     * @ignore
     * @param enterEvent 鼠标事件
     * @param node 当前节点数据
     * @description 拖拽鼠标进入元素时在该元素上触发
     */
    onDragenter(event: DragEvent, node: TiTreeNode): void;
    /**
     * @ignore
     * @param overEvent 鼠标事件
     * @param node 当前节点数据
     * @description 拖拽时鼠标在目标元素上移动时触发
     */
    onDragover(event: DragEvent, node: TiTreeNode): void;
    /**
     * @ignore
     * @param leaveEvent 鼠标事件
     * @param node 当前节点数据
     * @description 拖拽时鼠标在离开目标元素时触发
     */
    onDragleave(event: DragEvent, node: TiTreeNode): void;
    /**
     * @ignore
     * @param dropEvent 鼠标事件
     * @param node 当前节点数据
     * @description 鼠标在拖放目标上释放时,在拖放目标上触发
     */
    onDrop(event: DragEvent, node: TiTreeNode): void;
    /**
     * @ignore
     * @param endEvent 鼠标事件
     * @param node 当前节点数据
     * @description 鼠标在拖放目标上释放时,在拖拽元素上触发
     */
    onDragend(event: DragEvent, node: TiTreeNode): void;
    private calcDropPosition;
    private clearDragClass;
    private setDragOverClass;
    /**
     * @ignore
     * @param node 节点
     * @param type hover标志
     */
    onMousenode(node: TiTreeNode, type: string): void;
    /**
     * @ignore
     * @param node 节点
     */
    onBlurEdit(node: TiTreeNode): void;
    /**
      * @ignore
      * @param deleteEvent 删除事件
      * @param node 节点
      */
    deleteNode(event: Event, node: TiTreeNode): void;
    /**
     * @ignore
     * @param editEvent 编辑事件
     * @param node 节点
     */
    editNode(event: Event, node: TiTreeNode): void;
    /**
     * @ignore
     * @param addEvent 增加事件
     * @param node 节点
     */
    addNode(event: Event, node: TiTreeNode): void;
}
