{"version":3,"file":"TiTreeComponent.d.ts","sources":["TiTreeComponent.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, IterableDiffers, Renderer2, TemplateRef, QueryList, ChangeDetectorRef } from '@angular/core';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\nimport { TiRenderer } from '../../services/renderer/TiRenderer';\r\n/**\r\n * 树组件中每个节点的配置\r\n */\r\nexport interface TiTreeNode {\r\n    /**\r\n     * 节点展示内容\r\n     */\r\n    label?: string;\r\n    /**\r\n     * 控制节点是否展开\r\n     */\r\n    expanded?: boolean;\r\n    /**\r\n     * 节点选中状态（多选场景）：选中，未选中，半选 true | false | 'indeterminate'\r\n     */\r\n    checked?: boolean | string;\r\n    /**\r\n     * 节点展开时的字体图标：节点图标的样式类名称\r\n     *\r\n     * 10.1.2版本之后可通过自定义模板添加图标及样式\r\n     */\r\n    expandIcon?: string;\r\n    /**\r\n     * 节点收起时的字体图标：节点图标的样式类名称\r\n     *\r\n     * 10.1.2版本之后可通过自定义模板添加图标及样式\r\n     */\r\n    collapseIcon?: string;\r\n    /**\r\n     * 控制多选的节点checkbox是否灰化\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * 子节点字段，一旦设置children: []，则认为该节点非叶子节点\r\n     */\r\n    children?: Array<TiTreeNode>;\r\n    /**\r\n     * 10.1.2 新增\r\n     * 异步加载状态，loading正在加载，error加载失败，success加载成功\r\n     */\r\n    loadStatus?: 'loading' | 'error' | 'success';\r\n    /**\r\n     * 10.1.4 新增\r\n     * 支持悬浮编辑功能\r\n     */\r\n    editable?: boolean;\r\n    /**\r\n     * 10.1.4 新增\r\n     * 支持悬浮增加功能\r\n     */\r\n    addable?: boolean;\r\n    /**\r\n     * 10.1.4 新增\r\n     * 支持悬浮删除功能\r\n     */\r\n    deleteable?: boolean;\r\n    /**\r\n     * 允许有多余的属性字段\r\n     */\r\n    [propName: string]: any;\r\n}\r\n/**\r\n * 10.1.4 新增\r\n * drag info\r\n */\r\nexport interface TiTreeDragNode {\r\n    /**\r\n     * 事件对象\r\n     */\r\n    event?: DragEvent;\r\n    /**\r\n     * 目标节点\r\n     */\r\n    targetNode?: TiTreeNode;\r\n    /**\r\n     * 被拖拽的节点\r\n     */\r\n    dragNode?: TiTreeNode;\r\n    /**\r\n     * 放置位置，-1代表当前节点前，0代表当前节点里面，1代表当前节点后\r\n     */\r\n    dropPosition?: number;\r\n}\r\n/**\r\n * Tree树组件\r\n *\r\n * 分类：支持单选、多选两种类型\r\n *\r\n * 公共方法：树组件提供 [TiTreeUtil]{@link ../classes/TiTreeUtil.html} 公共方法，包括增、删、改、查、选中、取消选中、遍历、筛选、获取选中项等操作\r\n *\r\n * <example-url>../tiny3demo/#/tree/tree-all</example-url>\r\n */\r\nexport declare class TiTreeComponent extends TiBaseComponent {\r\n    protected elementRef: ElementRef;\r\n    protected renderer2: Renderer2;\r\n    protected iterableDiffers: IterableDiffers;\r\n    private tiRenderer;\r\n    private cdRef;\r\n    /**\r\n     * Tree组件使用的数据\r\n     */\r\n    data: Array<TiTreeNode>;\r\n    /**\r\n     * 设置多选树时，父节点是否可被点击选中，默认父节点子节点都显示复选框，都可被选中，设置false时，只有子节点前边显示复选框。\r\n     */\r\n    parentCheckable: boolean;\r\n    /**\r\n     * 设置是否为多选。\r\n     */\r\n    multiple: boolean;\r\n    /**\r\n     * 当为多选时该接口才生效。\r\n     *\r\n     * 默认为 false, 当设置为 true 时：\r\n     *\r\n     * 1.点击文本，复选框状态不会改变，只会触发select事件；\r\n     *\r\n     * 2.点击复选框只会触发change事件；\r\n     *\r\n     * 3.复选框disabled时，点击文本会触发select事件。\r\n     *\r\n     * Tiny3.1.1-alpha新增。\r\n     */\r\n    changedByCheckbox: boolean;\r\n    /**\r\n     * 10.1.2 新增\r\n     * 搜索传入的值,对匹配的文本高亮显示\r\n     */\r\n    highlightWords: string;\r\n    /**\r\n     * 10.1.4 新增\r\n     * 支持拖放\r\n     */\r\n    nodeDraggable: boolean;\r\n    /**\r\n     * 树节点展开前的事件回调，一般用于异步数据获取\r\n     */\r\n    readonly beforeExpand: EventEmitter<TiTreeComponent>;\r\n    /**\r\n     * 当用户点击某一节点时触发的事件\r\n     */\r\n    readonly select: EventEmitter<TiTreeNode>;\r\n    /**\r\n     * 当前选中项发生变化时，触发change事件\r\n     */\r\n    readonly change: EventEmitter<TiTreeNode>;\r\n    /**\r\n     * 10.1.4 新增\r\n     * drop event\r\n     */\r\n    readonly nodeDrop: EventEmitter<TiTreeDragNode>;\r\n    /**\r\n     * 10.1.4 新增\r\n     * 悬浮增加节点按钮回调\r\n     */\r\n    readonly nodeAdded: EventEmitter<TiTreeNode>;\r\n    /**\r\n     * 10.1.4 新增\r\n     * 悬浮编辑节点按钮回调\r\n     */\r\n    readonly nodeEdited: EventEmitter<TiTreeNode>;\r\n    /**\r\n     * 10.1.4 新增\r\n     * 悬浮删除节点按钮回调\r\n     */\r\n    readonly nodeDeleted: EventEmitter<TiTreeNode>;\r\n    /**\r\n     * 用于异步场景：当前点击需要展开的父节点\r\n     */\r\n    private beforeExpandNode;\r\n    /**\r\n     * 监听data改变\r\n     */\r\n    private dataDiffer;\r\n    /**\r\n     * @ignore\r\n     * 获取到用户自定义的模板\r\n     */\r\n    itemTemplate: TemplateRef<any>;\r\n    /**\r\n     * @ignore\r\n     * 获取文本区域dom集合\r\n     */\r\n    elems: QueryList<ElementRef>;\r\n    /**\r\n     * @ignore\r\n     * 模板中使用，高亮的选中项\r\n     */\r\n    actived: TiTreeNode;\r\n    /**\r\n     * @ignore\r\n     * 词条\r\n     */\r\n    treeLan: any;\r\n    /**\r\n     * 被拖拽节点\r\n     */\r\n    private dragNode;\r\n    /**\r\n     * 拖拽position\r\n     */\r\n    private dropPosition;\r\n    /**\r\n     * 拖放经过的节点\r\n     */\r\n    private overNode;\r\n    constructor(elementRef: ElementRef, renderer2: Renderer2, iterableDiffers: IterableDiffers, tiRenderer: TiRenderer, cdRef: ChangeDetectorRef);\r\n    ngOnInit(): void;\r\n    ngDoCheck(): void;\r\n    /**\r\n     * @ignore\r\n     * @description 判断是否显示复选框\r\n     * @param node 节点数据\r\n     */\r\n    showCheckboxFn(node: TiTreeNode): boolean;\r\n    /**\r\n     * @ignore\r\n     * @description 点击父节点图标执行的逻辑\r\n     * @param  node 当前节点数据\r\n     */\r\n    onClickPnodeIcon(node: TiTreeNode, event: MouseEvent): void;\r\n    getBeforeExpandNode(): TiTreeNode;\r\n    /**\r\n     * @ignore\r\n     * @description 根据item的isExpanded属性获取item图标\r\n     * @param node 当前节点数据\r\n     */\r\n    getItemIcon(node: TiTreeNode): string;\r\n    /**\r\n     * @ignore\r\n     * @description 点击复选框触发select、change事件\r\n     * 需要注意：click事件中拿到的是操作前的选中状态，而change事件中拿到的是操作后的选中状态\r\n     * @param node 当前节点数据\r\n     */\r\n    onInputChange(node: TiTreeNode, event: Event): void;\r\n    /**\r\n     * @ignore\r\n     * 点击文本区域\r\n     * @param node 当前节点数据\r\n     * @param event 鼠标事件\r\n     * @returns void\r\n     */\r\n    onItemWrapperClick(node: TiTreeNode): void;\r\n    private setSeletedState;\r\n    /**\r\n     * 单选时，取消所有节点的选中状态\r\n     * @param  allData 所有节点数据\r\n     */\r\n    private deSelectAllNode;\r\n    /**\r\n     * @ignore\r\n     */\r\n    trackByFn(index: number, node: any): any;\r\n    /**\r\n     * @ignore\r\n     * 判断是否为叶子节点\r\n     */\r\n    isLeaf(node: TiTreeNode): boolean;\r\n    private initActived;\r\n    /**\r\n     * @ignore\r\n     * @param node 节点数据\r\n     */\r\n    onBlur(node: TiTreeNode): void;\r\n    /**\r\n     * @ignore\r\n     * @param node 节点数据\r\n     */\r\n    onFocus(node: TiTreeNode): void;\r\n    /**\r\n     * @ignore\r\n     * @param event 键盘事件\r\n     * @param node 当前节点数据\r\n     */\r\n    onKeydown(event: KeyboardEvent, node: TiTreeNode): void;\r\n    private setKeyDownUp;\r\n    private setKeyleft;\r\n    private setKeyright;\r\n    private setFocusNode;\r\n    private setFocusElem;\r\n    /**\r\n     * @ignore\r\n     * @param startEvent 鼠标事件\r\n     * @param node 当前节点数据\r\n     * @description 拖拽开始时在被拖拽元素上触发此事件\r\n     */\r\n    onDragstart(event: DragEvent, node: TiTreeNode): void;\r\n    /**\r\n     * @ignore\r\n     * @param enterEvent 鼠标事件\r\n     * @param node 当前节点数据\r\n     * @description 拖拽鼠标进入元素时在该元素上触发\r\n     */\r\n    onDragenter(event: DragEvent, node: TiTreeNode): void;\r\n    /**\r\n     * @ignore\r\n     * @param overEvent 鼠标事件\r\n     * @param node 当前节点数据\r\n     * @description 拖拽时鼠标在目标元素上移动时触发\r\n     */\r\n    onDragover(event: DragEvent, node: TiTreeNode): void;\r\n    /**\r\n     * @ignore\r\n     * @param leaveEvent 鼠标事件\r\n     * @param node 当前节点数据\r\n     * @description 拖拽时鼠标在离开目标元素时触发\r\n     */\r\n    onDragleave(event: DragEvent, node: TiTreeNode): void;\r\n    /**\r\n     * @ignore\r\n     * @param dropEvent 鼠标事件\r\n     * @param node 当前节点数据\r\n     * @description 鼠标在拖放目标上释放时,在拖放目标上触发\r\n     */\r\n    onDrop(event: DragEvent, node: TiTreeNode): void;\r\n    /**\r\n     * @ignore\r\n     * @param endEvent 鼠标事件\r\n     * @param node 当前节点数据\r\n     * @description 鼠标在拖放目标上释放时,在拖拽元素上触发\r\n     */\r\n    onDragend(event: DragEvent, node: TiTreeNode): void;\r\n    private calcDropPosition;\r\n    private clearDragClass;\r\n    private setDragOverClass;\r\n    /**\r\n     * @ignore\r\n     * @param node 节点\r\n     * @param type hover标志\r\n     */\r\n    onMousenode(node: TiTreeNode, type: string): void;\r\n    /**\r\n     * @ignore\r\n     * @param node 节点\r\n     */\r\n    onBlurEdit(node: TiTreeNode): void;\r\n    /**\r\n      * @ignore\r\n      * @param deleteEvent 删除事件\r\n      * @param node 节点\r\n      */\r\n    deleteNode(event: Event, node: TiTreeNode): void;\r\n    /**\r\n     * @ignore\r\n     * @param editEvent 编辑事件\r\n     * @param node 节点\r\n     */\r\n    editNode(event: Event, node: TiTreeNode): void;\r\n    /**\r\n     * @ignore\r\n     * @param addEvent 增加事件\r\n     * @param node 节点\r\n     */\r\n    addNode(event: Event, node: TiTreeNode): void;\r\n}\r\n"]}