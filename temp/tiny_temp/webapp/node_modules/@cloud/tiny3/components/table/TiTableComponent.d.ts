import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, IterableDiffers, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { TiRenderer } from '../../services/renderer/TiRenderer';
import { Subject } from 'rxjs';
import { TiTableFixedHeadService } from './TiTableFixedHeadService';
import { TiBaseComponent } from '../base/TiBaseModule';
/**
 * TiTable 组件上 srcData 输入接口中 state 属性值的类型接口
 */
import * as ɵngcc0 from '@angular/core';
export interface TiTableSrcState {
    /**
     * 传给组件的表格源数据是否已经过搜索处理
     */
    searched: boolean;
    /**
     * 传给组件的表格源数据是否已经过排序处理
     */
    sorted: boolean;
    /**
     * 传给组件的表格源数据是否已经过分页处理
     */
    paginated: boolean;
}
/**
 * 表格当前数据的搜索、排序、分页状态值接口
 */
export interface TiTableDataState {
    /**
     * 搜索状态，其包含两个属性：
     *
     * searchWords：类型为Array<string>，搜索字符串集合
     *
     * searchKeys：类型为Array，搜索指定的字段范围
     *
     */
    search: {
        searchWords: Array<string>;
        searchKeys?: Array<string>;
    };
    /**
     * 排序状态，其包含两个属性：
     *
     * sortKey：类型为 String，进行排序的数据属性
     *
     * asc：类型为 Boolean，是否为升序
     *
     */
    sort: {
        sortKey: string;
        asc: boolean;
    };
    /**
     * 分页状态，其包含两个属性：
     *
     * currentPage：类型Number，表示当前页
     *
     * itemsPerPage：类型为Number，每页显示条数
     *
     */
    pagination: {
        currentPage: number;
        itemsPerPage: number;
    };
}
/**
 * 表格行数据类型接口
 */
export interface TiTableRowData {
    /**
     * 控制当前详情行是否展开
     *
     */
    showDetails?: boolean;
    /**
     * 允许有多余的属性字段
     *
     */
    [propName: string]: any;
}
/**
 * TiTable 组件上 srcData 输入接口的数据类型接口
 */
export interface TiTableSrcData {
    state: TiTableSrcState;
    /**
     * 表格源数据
     *
     */
    data: Array<TiTableRowData>;
}
/**
 * 表格的各列信息
 *
 */
export interface TiTableColumns {
    /**
     * 表头列文本内容。当某一列的title为空字符串时，当前列一直在表格中显示，但是不出现在控制列动态
     * 隐藏/显示 设置面板中，例如单选列、多选列、详情展开图标列;
     *
     */
    title?: string;
    /**
     * 设置列宽，支持百分比和px值;
     */
    width?: string;
    /**
     * 此属性只有在表格具有列动态 显示/隐藏 功能时才需要设置，show可以分别设置如下值：
     *
     *  true： 表示该列默认显示，用户可以通过面板操作切换其 显示/隐藏 状态。
     *
     *  false : 表示该列默认隐藏，用户可以通过面板操作切换其 显示/隐藏 状态。
     *
     *  undefined : 表示该列不具备动态 显示/隐藏 功能，固定显示。
     *
     * 注意：设置show属性值时，title为空字符串时，该列固定显示，但不出现在列操作面板中。
     */
    show?: boolean;
    /**
     * 允许有多余的属性字段
     */
    [propName: string]: any;
}
/**
 * 表格当前页、每页个数记忆开关
 * 10.1.2版本新增
 */
export interface TiPaginationStorageConfig {
    currentPage?: boolean;
    itemsPerPage?: boolean;
}
/**
 * 表格记忆各项开关
 * 10.0.4 新增
 */
export interface TiTableStorageConfig {
    /**
     * 排序
     */
    sort: boolean;
    /**
     * 分页
     */
    pagination: boolean | TiPaginationStorageConfig;
    /**
     * 列宽
     */
    colsWidth: boolean;
    /**
     * 允许有多余的属性字段
     */
    [propName: string]: any;
}
/**
 * TiTable 表格组件
 *
 * 支持以表格的形式展示多条数据
 *
 * 支持前后台分页、搜索、排序、详情展开、列拖动（调整列宽）、控制列动态隐藏/显示、行复选、行单选、
 * 表格单元格(th, td)智能tip、树表、列文本对齐方式、表头固定等功能
 *
 * <example-url>../tiny3demo/#/table/table-all</example-url>
 */
export declare class TiTableComponent extends TiBaseComponent implements OnInit, AfterViewChecked, AfterViewInit, OnDestroy {
    private iterableDiffers;
    private fixedHeadService;
    private zone;
    private tiRenderer;
    private static DEFAULT_SRC_DATA;
    /**
     * 设置表格源数据及其处理数据状态
     *
     * data: 表格源数据。一般情况下，前台分页时传入表格全部数据，后台分页时传入当前页数据。
     *
     * state: 用来标识传入的表格源数据是否已经经过排序(sorted)、过滤(searched)、分页(paginated)等处理。
     *
     * 应用举例：后台分页场景下，传入的data为当前页数据（即已经进行了分页），因此应将paginated设置为true；
     *          如果传入的数据已经进行了排序（如后台排序场景），则应将sorted设置为true。
     */
    srcData: TiTableSrcData;
    /**
     * 设置表格实时呈现的数据。表格源数据经过排序、搜索、分页处理之后即为displayedData
     *
     * 注意：
     *
     * 1. 产品在开发中，只需在初始化时将其设置为 [ ] 即可，组件内部将自动完成对其赋值和更新;
     *
     * 2. 开发者应该在 tbody>tr 中完成对 displayedData 的遍历和显示（如通过ngFor）。
     */
    displayedData: Array<TiTableRowData>;
    /**
     * 表格记忆，既是开关，又是存储id, 所以每一个表格需要设置唯一值。
     * 10.0.4 新增
     */
    storageId: string;
    /**
     * 表格记忆各项开关配置
     * 10.0.4 新增
     */
    storageConfig: TiTableStorageConfig;
    /**
     * 表格实时呈现的数据改变时向外通知
     */
    readonly displayedDataChange: EventEmitter<Array<TiTableRowData>>;
    /**
     * 设置表格的各列信息。开发者可以使用该接口的值在 thead>tr>th 中完成对表头内容的设置；
     *
     * 控件内部根据columns设置完成必要的逻辑处理。 建议对columns数组中的对象设置如下属性：
     *
     * title: 表头列文本内容。当某一列的title为空字符串时，当前列一直在表格中显示，但是不出现在控制列动态
     *         隐藏/显示 设置面板中，例如单选列、多选列、详情展开图标列;
     *
     * width: 设置列宽，支持百分比和px值;
     *
     * show: 此属性只有在表格具有列动态 显示/隐藏 功能时才需要设置，show可以分别设置如下值：
     *
     *       true： 表示该列默认显示，用户可以通过面板操作切换其 显示/隐藏 状态。
     *
     *       false : 表示该列默认隐藏，用户可以通过面板操作切换其 显示/隐藏 状态。
     *
     *       undefined : 表示该列不具备动态 显示/隐藏 功能，固定显示。
     *
     *       注意：设置show属性值时，title为空字符串时，该列固定显示，但不出现在列操作面板中。
     */
    columns: Array<TiTableColumns>;
    /**
     * 设置表格搜索功能的需被检索的字符串的集合。
     *
     * 此接口需配合searchKeys使用。
     *
     *  1. searchWords长度为1时，在searchKeys指定的字段下搜索searchWords[0]指定的字符串,
     *     在指定字段中的任一字段中搜索到时即满足条件(并集)。如：searchWords: ['b'],
     *     searchKeys: ['firstName', 'lastName']，则在firstName字段包含‘b’，
     *     或在lastName字段包含‘b’时本行数据即满足搜索条件;
     *
     * 2. searchWords长度大于1且searchKeys与searchWords长度相等时，在searchKeys指定的字段下搜索searchWords对应(按顺序)元素指定的字符串,
     *    在指定字段中的所有字段搜索到对应字符串时才满足条件(交集)。如：searchWords: ['b', '18'],
     *    searchKeys: ['firstName', 'age']，则在firstName字段包含‘b’且
     *    在age字段包含‘18’时本行数据才满足搜索条件。
     */
    searchWords: Array<string>;
    /**
     * 为表格搜索功能指定搜索的字段范围。
     *
     * 此接口需配合searchWords使用。
     */
    searchKeys: Array<string>;
    /**
     * 有详情功能时，设置组件是否开启当前页只显示一行详情的功能。
     *
     * 设置为true，表示表格中当前页只展示一行的详情，不设置或设为false时，可展开多行的详情。
     */
    closeOtherDetails: boolean;
    /**
     * 当表格数据状态变化时向外通知
     *
     * 1.功能描述：
     *
     * 状态变化指的是表格的排序、搜索、分页参数发生了变化，触发变化的原因可能是用户操作，也可能是开发者设置。
     * 该回调为后台分页、后台排序和后台过滤提供了处理时机，例如，用户点击第2页时，由于页码的变化，必定会触发本回调函数，
     * 进而开发者可以在该回调中向后台发请求获取第2页的数据，并赋给表格。
     *
     * 注意事项：初始化时不会触发该回调，只有表格状态动态改变时才会触发该回调，所以需要用户自己在初始时向后端发送请求获取表格初始化数据。
     *
     * 2.函数入参：TiTableComponent 组件实例
     *
     */
    readonly stateUpdate: EventEmitter<TiTableComponent>;
    /**
     * @ignore
     */
    hostEle: Element;
    private srcDataDiffer;
    private data;
    private promise;
    /**
     * @ignore 判断是否使用了ti-head-sort组件
     */
    enableSort: boolean;
    /**
     * @ignore
     */
    paginationSubject: Subject<any>;
    /**
     * @ignore
     */
    viewInitSubject: Subject<any>;
    /**
    * @ignore
    */
    containerScrollXChangeSubject: Subject<any>;
    /**
     * @ignore
     */
    thResizeSubject: Subject<any>;
    /**
     * @ignore
     */
    updateFixedThLeftSubject: Subject<any>;
    /**
     * @ignore
     */
    updateFixedTdLeftSubject: Subject<any>;
    /**
     * @ignore
     */
    updateColumnsSubject: Subject<Array<TiTableColumns>>;
    /**
     * @ignore
     * 其中包含了sort、search、pagination三个属性，每个属性都描述了当前表格数据的参数状态:
     *
     * sort：object类型，包含了sortKey（类型为string，进行排序的数据属性）、asc（类型为Boolean，是否为升序）属性；
     *
     * search: object类型，包含了searchWords（类型为array<string>，搜索字符串集合）、searchKeys（类型为Array，搜索指定的字段范围）属性；
     *
     * pagination: object类型，包含了currentPage（类型number，表示当前页）、itemsPerPage（类型为Number，每页显示条数）属性。
     */
    dataState: TiTableDataState;
    /**
     * @ignore 子元素需要访问，所以public
     */
    localStorageState: {
        [propName: string]: any;
    };
    /**
     * @ignore 子元素需要访问，所以public
     */
    sessionStorageState: {
        [propName: string]: any;
    };
    private isDataStateChange;
    private oldSearchWords;
    private oldSearchKeys;
    private oldPagination;
    private oldSort;
    /**
     * 触发 stateUpdate 的事件(即引起表格数据状态改变的起因事件)，其有"search", "sort", "pagination"这三个值
     */
    private triggerEvent;
    private searchedResult;
    private customCompareFn;
    /**
     * @ignore
     * 表格是否为表头锁定
     */
    isFixedHead: boolean;
    /**
     * @ignore
     */
    theadContainer: Element;
    /**
     * @ignore
     */
    tbodyContainer: Element;
    private oldTbodyHeight;
    private unlistenFixedHeadWindowResize;
    private unlistenFixedColumnWindowResize;
    private unlistenWindowBeforeunload;
    /**
     * @ignore
     */
    processYScrollStateChangeWithColsResizable: () => void;
    /**
     * @ignore
     */
    fixedColumnInfo: {
        hasFixedColumn?: boolean;
        container?: any;
        thFixedRight?: any;
        containerWidth?: number;
        fixedColumnLeftValues?: Array<number>;
        columnFixedLeftLastIndex?: number;
    };
    constructor(iterableDiffers: IterableDiffers, elementRef: ElementRef, fixedHeadService: TiTableFixedHeadService, renderer: Renderer2, zone: NgZone, tiRenderer: TiRenderer);
    /**
     * 测试某一字串(testStr)中是否存在子串(key)
     * @param testStr 待检索的字符串或数值
     * @param key 检索的子串
     */
    private static isMatched;
    private static searchByOneWord;
    private static searchByMoreThanOneWord;
    private static getSearchedData;
    private static doCompare;
    private static getPredicateValue;
    private static getPredicateValueObj;
    private static safeCopy;
    private static isValueEqual;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    private initStorageDataState;
    private updateStorageDataState;
    /**
     * @ignore
     */
    updatePagination(currentPage: number, itemsPerPage: number): void;
    /**
     * @ignore
     * 排序状态更新及处理
     *
     * @param sortKey - 进行排序的数据属性（如对数据的name属性值进行排序，则传入"name"）
     * @param reverse - 是否为降序，true表示降序，false表示升序，null表示无序
     * @param isDefaultSort - 是否为默认排序
     */
    updateSort(sortKey: string, reverse: boolean, isDefaultSort: boolean, compareFn: (a: TiTableRowData, b: TiTableRowData, sortKey?: string) => number): void;
    /**
     * 获取表格当前的数据状态(sort、search、pagination)
     * @return TiTableDataState
     */
    getDataState(): TiTableDataState;
    /**
     * 获取当前触发 stateUpdate 的事件(即引起表格数据状态改变的起因事件)
     * @return 有"search", "sort", "pagination"这三个值
     */
    getTriggerEvent(): string;
    /**
     * 如果使用到了表格组件搜索功能，可通过此方法获取到搜索的数据结果。
     * @return 搜索到的数据集合
     *
     * 3.0.9新增
     */
    getSearchedResult(): Array<TiTableRowData>;
    private updateTable;
    /**
     * 根据数据状态(search,sort,pagination)处理数据
     */
    private dataProcessor;
    /**
     * data => displayedData，处理分3步：
     * 1. 复制data数据
     * 2. 根据 分页、过滤、排序 处理数据
     * 3. 通过displayedDataChange 事件更新到displayedData
     */
    private data2displayed;
    private isFrontSearch;
    private isFrontSort;
    private isFrontPagination;
    private getSortedData;
    private compareTo;
    private updateSafeCopy;
    private getSrcState;
    /**
     * @ignore
     */
    closeOtherDetailsFn(currentRow: TiTableRowData): void;
    private initFixedHead;
    private getTbodyHeight;
    private addFixedColumnBehavior;
    /**
     * @ignore
     */
    processFixedColumn(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiTableComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TiTableComponent, "ti-table", never, { "srcData": "srcData"; "storageConfig": "storageConfig"; "columns": "columns"; "searchWords": "searchWords"; "searchKeys": "searchKeys"; "closeOtherDetails": "closeOtherDetails"; "displayedData": "displayedData"; "storageId": "storageId"; }, { "displayedDataChange": "displayedDataChange"; "stateUpdate": "stateUpdate"; }, never, ["*"], false>;
}

//# sourceMappingURL=TiTableComponent.d.ts.map