{"version":3,"file":"TiTableComponent.d.ts","sources":["TiTableComponent.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, IterableDiffers, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';\r\nimport { TiRenderer } from '../../services/renderer/TiRenderer';\r\nimport { Subject } from 'rxjs';\r\nimport { TiTableFixedHeadService } from './TiTableFixedHeadService';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\n/**\r\n * TiTable 组件上 srcData 输入接口中 state 属性值的类型接口\r\n */\r\nexport interface TiTableSrcState {\r\n    /**\r\n     * 传给组件的表格源数据是否已经过搜索处理\r\n     */\r\n    searched: boolean;\r\n    /**\r\n     * 传给组件的表格源数据是否已经过排序处理\r\n     */\r\n    sorted: boolean;\r\n    /**\r\n     * 传给组件的表格源数据是否已经过分页处理\r\n     */\r\n    paginated: boolean;\r\n}\r\n/**\r\n * 表格当前数据的搜索、排序、分页状态值接口\r\n */\r\nexport interface TiTableDataState {\r\n    /**\r\n     * 搜索状态，其包含两个属性：\r\n     *\r\n     * searchWords：类型为Array<string>，搜索字符串集合\r\n     *\r\n     * searchKeys：类型为Array，搜索指定的字段范围\r\n     *\r\n     */\r\n    search: {\r\n        searchWords: Array<string>;\r\n        searchKeys?: Array<string>;\r\n    };\r\n    /**\r\n     * 排序状态，其包含两个属性：\r\n     *\r\n     * sortKey：类型为 String，进行排序的数据属性\r\n     *\r\n     * asc：类型为 Boolean，是否为升序\r\n     *\r\n     */\r\n    sort: {\r\n        sortKey: string;\r\n        asc: boolean;\r\n    };\r\n    /**\r\n     * 分页状态，其包含两个属性：\r\n     *\r\n     * currentPage：类型Number，表示当前页\r\n     *\r\n     * itemsPerPage：类型为Number，每页显示条数\r\n     *\r\n     */\r\n    pagination: {\r\n        currentPage: number;\r\n        itemsPerPage: number;\r\n    };\r\n}\r\n/**\r\n * 表格行数据类型接口\r\n */\r\nexport interface TiTableRowData {\r\n    /**\r\n     * 控制当前详情行是否展开\r\n     *\r\n     */\r\n    showDetails?: boolean;\r\n    /**\r\n     * 允许有多余的属性字段\r\n     *\r\n     */\r\n    [propName: string]: any;\r\n}\r\n/**\r\n * TiTable 组件上 srcData 输入接口的数据类型接口\r\n */\r\nexport interface TiTableSrcData {\r\n    state: TiTableSrcState;\r\n    /**\r\n     * 表格源数据\r\n     *\r\n     */\r\n    data: Array<TiTableRowData>;\r\n}\r\n/**\r\n * 表格的各列信息\r\n *\r\n */\r\nexport interface TiTableColumns {\r\n    /**\r\n     * 表头列文本内容。当某一列的title为空字符串时，当前列一直在表格中显示，但是不出现在控制列动态\r\n     * 隐藏/显示 设置面板中，例如单选列、多选列、详情展开图标列;\r\n     *\r\n     */\r\n    title?: string;\r\n    /**\r\n     * 设置列宽，支持百分比和px值;\r\n     */\r\n    width?: string;\r\n    /**\r\n     * 此属性只有在表格具有列动态 显示/隐藏 功能时才需要设置，show可以分别设置如下值：\r\n     *\r\n     *  true： 表示该列默认显示，用户可以通过面板操作切换其 显示/隐藏 状态。\r\n     *\r\n     *  false : 表示该列默认隐藏，用户可以通过面板操作切换其 显示/隐藏 状态。\r\n     *\r\n     *  undefined : 表示该列不具备动态 显示/隐藏 功能，固定显示。\r\n     *\r\n     * 注意：设置show属性值时，title为空字符串时，该列固定显示，但不出现在列操作面板中。\r\n     */\r\n    show?: boolean;\r\n    /**\r\n     * 允许有多余的属性字段\r\n     */\r\n    [propName: string]: any;\r\n}\r\n/**\r\n * 表格当前页、每页个数记忆开关\r\n * 10.1.2版本新增\r\n */\r\nexport interface TiPaginationStorageConfig {\r\n    currentPage?: boolean;\r\n    itemsPerPage?: boolean;\r\n}\r\n/**\r\n * 表格记忆各项开关\r\n * 10.0.4 新增\r\n */\r\nexport interface TiTableStorageConfig {\r\n    /**\r\n     * 排序\r\n     */\r\n    sort: boolean;\r\n    /**\r\n     * 分页\r\n     */\r\n    pagination: boolean | TiPaginationStorageConfig;\r\n    /**\r\n     * 列宽\r\n     */\r\n    colsWidth: boolean;\r\n    /**\r\n     * 允许有多余的属性字段\r\n     */\r\n    [propName: string]: any;\r\n}\r\n/**\r\n * TiTable 表格组件\r\n *\r\n * 支持以表格的形式展示多条数据\r\n *\r\n * 支持前后台分页、搜索、排序、详情展开、列拖动（调整列宽）、控制列动态隐藏/显示、行复选、行单选、\r\n * 表格单元格(th, td)智能tip、树表、列文本对齐方式、表头固定等功能\r\n *\r\n * <example-url>../tiny3demo/#/table/table-all</example-url>\r\n */\r\nexport declare class TiTableComponent extends TiBaseComponent implements OnInit, AfterViewChecked, AfterViewInit, OnDestroy {\r\n    private iterableDiffers;\r\n    private fixedHeadService;\r\n    private zone;\r\n    private tiRenderer;\r\n    private static DEFAULT_SRC_DATA;\r\n    /**\r\n     * 设置表格源数据及其处理数据状态\r\n     *\r\n     * data: 表格源数据。一般情况下，前台分页时传入表格全部数据，后台分页时传入当前页数据。\r\n     *\r\n     * state: 用来标识传入的表格源数据是否已经经过排序(sorted)、过滤(searched)、分页(paginated)等处理。\r\n     *\r\n     * 应用举例：后台分页场景下，传入的data为当前页数据（即已经进行了分页），因此应将paginated设置为true；\r\n     *          如果传入的数据已经进行了排序（如后台排序场景），则应将sorted设置为true。\r\n     */\r\n    srcData: TiTableSrcData;\r\n    /**\r\n     * 设置表格实时呈现的数据。表格源数据经过排序、搜索、分页处理之后即为displayedData\r\n     *\r\n     * 注意：\r\n     *\r\n     * 1. 产品在开发中，只需在初始化时将其设置为 [ ] 即可，组件内部将自动完成对其赋值和更新;\r\n     *\r\n     * 2. 开发者应该在 tbody>tr 中完成对 displayedData 的遍历和显示（如通过ngFor）。\r\n     */\r\n    displayedData: Array<TiTableRowData>;\r\n    /**\r\n     * 表格记忆，既是开关，又是存储id, 所以每一个表格需要设置唯一值。\r\n     * 10.0.4 新增\r\n     */\r\n    storageId: string;\r\n    /**\r\n     * 表格记忆各项开关配置\r\n     * 10.0.4 新增\r\n     */\r\n    storageConfig: TiTableStorageConfig;\r\n    /**\r\n     * 表格实时呈现的数据改变时向外通知\r\n     */\r\n    readonly displayedDataChange: EventEmitter<Array<TiTableRowData>>;\r\n    /**\r\n     * 设置表格的各列信息。开发者可以使用该接口的值在 thead>tr>th 中完成对表头内容的设置；\r\n     *\r\n     * 控件内部根据columns设置完成必要的逻辑处理。 建议对columns数组中的对象设置如下属性：\r\n     *\r\n     * title: 表头列文本内容。当某一列的title为空字符串时，当前列一直在表格中显示，但是不出现在控制列动态\r\n     *         隐藏/显示 设置面板中，例如单选列、多选列、详情展开图标列;\r\n     *\r\n     * width: 设置列宽，支持百分比和px值;\r\n     *\r\n     * show: 此属性只有在表格具有列动态 显示/隐藏 功能时才需要设置，show可以分别设置如下值：\r\n     *\r\n     *       true： 表示该列默认显示，用户可以通过面板操作切换其 显示/隐藏 状态。\r\n     *\r\n     *       false : 表示该列默认隐藏，用户可以通过面板操作切换其 显示/隐藏 状态。\r\n     *\r\n     *       undefined : 表示该列不具备动态 显示/隐藏 功能，固定显示。\r\n     *\r\n     *       注意：设置show属性值时，title为空字符串时，该列固定显示，但不出现在列操作面板中。\r\n     */\r\n    columns: Array<TiTableColumns>;\r\n    /**\r\n     * 设置表格搜索功能的需被检索的字符串的集合。\r\n     *\r\n     * 此接口需配合searchKeys使用。\r\n     *\r\n     *  1. searchWords长度为1时，在searchKeys指定的字段下搜索searchWords[0]指定的字符串,\r\n     *     在指定字段中的任一字段中搜索到时即满足条件(并集)。如：searchWords: ['b'],\r\n     *     searchKeys: ['firstName', 'lastName']，则在firstName字段包含‘b’，\r\n     *     或在lastName字段包含‘b’时本行数据即满足搜索条件;\r\n     *\r\n     * 2. searchWords长度大于1且searchKeys与searchWords长度相等时，在searchKeys指定的字段下搜索searchWords对应(按顺序)元素指定的字符串,\r\n     *    在指定字段中的所有字段搜索到对应字符串时才满足条件(交集)。如：searchWords: ['b', '18'],\r\n     *    searchKeys: ['firstName', 'age']，则在firstName字段包含‘b’且\r\n     *    在age字段包含‘18’时本行数据才满足搜索条件。\r\n     */\r\n    searchWords: Array<string>;\r\n    /**\r\n     * 为表格搜索功能指定搜索的字段范围。\r\n     *\r\n     * 此接口需配合searchWords使用。\r\n     */\r\n    searchKeys: Array<string>;\r\n    /**\r\n     * 有详情功能时，设置组件是否开启当前页只显示一行详情的功能。\r\n     *\r\n     * 设置为true，表示表格中当前页只展示一行的详情，不设置或设为false时，可展开多行的详情。\r\n     */\r\n    closeOtherDetails: boolean;\r\n    /**\r\n     * 当表格数据状态变化时向外通知\r\n     *\r\n     * 1.功能描述：\r\n     *\r\n     * 状态变化指的是表格的排序、搜索、分页参数发生了变化，触发变化的原因可能是用户操作，也可能是开发者设置。\r\n     * 该回调为后台分页、后台排序和后台过滤提供了处理时机，例如，用户点击第2页时，由于页码的变化，必定会触发本回调函数，\r\n     * 进而开发者可以在该回调中向后台发请求获取第2页的数据，并赋给表格。\r\n     *\r\n     * 注意事项：初始化时不会触发该回调，只有表格状态动态改变时才会触发该回调，所以需要用户自己在初始时向后端发送请求获取表格初始化数据。\r\n     *\r\n     * 2.函数入参：TiTableComponent 组件实例\r\n     *\r\n     */\r\n    readonly stateUpdate: EventEmitter<TiTableComponent>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    hostEle: Element;\r\n    private srcDataDiffer;\r\n    private data;\r\n    private promise;\r\n    /**\r\n     * @ignore 判断是否使用了ti-head-sort组件\r\n     */\r\n    enableSort: boolean;\r\n    /**\r\n     * @ignore\r\n     */\r\n    paginationSubject: Subject<any>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    viewInitSubject: Subject<any>;\r\n    /**\r\n    * @ignore\r\n    */\r\n    containerScrollXChangeSubject: Subject<any>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    thResizeSubject: Subject<any>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    updateFixedThLeftSubject: Subject<any>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    updateFixedTdLeftSubject: Subject<any>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    updateColumnsSubject: Subject<Array<TiTableColumns>>;\r\n    /**\r\n     * @ignore\r\n     * 其中包含了sort、search、pagination三个属性，每个属性都描述了当前表格数据的参数状态:\r\n     *\r\n     * sort：object类型，包含了sortKey（类型为string，进行排序的数据属性）、asc（类型为Boolean，是否为升序）属性；\r\n     *\r\n     * search: object类型，包含了searchWords（类型为array<string>，搜索字符串集合）、searchKeys（类型为Array，搜索指定的字段范围）属性；\r\n     *\r\n     * pagination: object类型，包含了currentPage（类型number，表示当前页）、itemsPerPage（类型为Number，每页显示条数）属性。\r\n     */\r\n    dataState: TiTableDataState;\r\n    /**\r\n     * @ignore 子元素需要访问，所以public\r\n     */\r\n    localStorageState: {\r\n        [propName: string]: any;\r\n    };\r\n    /**\r\n     * @ignore 子元素需要访问，所以public\r\n     */\r\n    sessionStorageState: {\r\n        [propName: string]: any;\r\n    };\r\n    private isDataStateChange;\r\n    private oldSearchWords;\r\n    private oldSearchKeys;\r\n    private oldPagination;\r\n    private oldSort;\r\n    /**\r\n     * 触发 stateUpdate 的事件(即引起表格数据状态改变的起因事件)，其有\"search\", \"sort\", \"pagination\"这三个值\r\n     */\r\n    private triggerEvent;\r\n    private searchedResult;\r\n    private customCompareFn;\r\n    /**\r\n     * @ignore\r\n     * 表格是否为表头锁定\r\n     */\r\n    isFixedHead: boolean;\r\n    /**\r\n     * @ignore\r\n     */\r\n    theadContainer: Element;\r\n    /**\r\n     * @ignore\r\n     */\r\n    tbodyContainer: Element;\r\n    private oldTbodyHeight;\r\n    private unlistenFixedHeadWindowResize;\r\n    private unlistenFixedColumnWindowResize;\r\n    private unlistenWindowBeforeunload;\r\n    /**\r\n     * @ignore\r\n     */\r\n    processYScrollStateChangeWithColsResizable: () => void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    fixedColumnInfo: {\r\n        hasFixedColumn?: boolean;\r\n        container?: any;\r\n        thFixedRight?: any;\r\n        containerWidth?: number;\r\n        fixedColumnLeftValues?: Array<number>;\r\n        columnFixedLeftLastIndex?: number;\r\n    };\r\n    constructor(iterableDiffers: IterableDiffers, elementRef: ElementRef, fixedHeadService: TiTableFixedHeadService, renderer: Renderer2, zone: NgZone, tiRenderer: TiRenderer);\r\n    /**\r\n     * 测试某一字串(testStr)中是否存在子串(key)\r\n     * @param testStr 待检索的字符串或数值\r\n     * @param key 检索的子串\r\n     */\r\n    private static isMatched;\r\n    private static searchByOneWord;\r\n    private static searchByMoreThanOneWord;\r\n    private static getSearchedData;\r\n    private static doCompare;\r\n    private static getPredicateValue;\r\n    private static getPredicateValueObj;\r\n    private static safeCopy;\r\n    private static isValueEqual;\r\n    ngOnInit(): void;\r\n    ngAfterViewInit(): void;\r\n    ngAfterViewChecked(): void;\r\n    ngOnDestroy(): void;\r\n    private initStorageDataState;\r\n    private updateStorageDataState;\r\n    /**\r\n     * @ignore\r\n     */\r\n    updatePagination(currentPage: number, itemsPerPage: number): void;\r\n    /**\r\n     * @ignore\r\n     * 排序状态更新及处理\r\n     *\r\n     * @param sortKey - 进行排序的数据属性（如对数据的name属性值进行排序，则传入\"name\"）\r\n     * @param reverse - 是否为降序，true表示降序，false表示升序，null表示无序\r\n     * @param isDefaultSort - 是否为默认排序\r\n     */\r\n    updateSort(sortKey: string, reverse: boolean, isDefaultSort: boolean, compareFn: (a: TiTableRowData, b: TiTableRowData, sortKey?: string) => number): void;\r\n    /**\r\n     * 获取表格当前的数据状态(sort、search、pagination)\r\n     * @return TiTableDataState\r\n     */\r\n    getDataState(): TiTableDataState;\r\n    /**\r\n     * 获取当前触发 stateUpdate 的事件(即引起表格数据状态改变的起因事件)\r\n     * @return 有\"search\", \"sort\", \"pagination\"这三个值\r\n     */\r\n    getTriggerEvent(): string;\r\n    /**\r\n     * 如果使用到了表格组件搜索功能，可通过此方法获取到搜索的数据结果。\r\n     * @return 搜索到的数据集合\r\n     *\r\n     * 3.0.9新增\r\n     */\r\n    getSearchedResult(): Array<TiTableRowData>;\r\n    private updateTable;\r\n    /**\r\n     * 根据数据状态(search,sort,pagination)处理数据\r\n     */\r\n    private dataProcessor;\r\n    /**\r\n     * data => displayedData，处理分3步：\r\n     * 1. 复制data数据\r\n     * 2. 根据 分页、过滤、排序 处理数据\r\n     * 3. 通过displayedDataChange 事件更新到displayedData\r\n     */\r\n    private data2displayed;\r\n    private isFrontSearch;\r\n    private isFrontSort;\r\n    private isFrontPagination;\r\n    private getSortedData;\r\n    private compareTo;\r\n    private updateSafeCopy;\r\n    private getSrcState;\r\n    /**\r\n     * @ignore\r\n     */\r\n    closeOtherDetailsFn(currentRow: TiTableRowData): void;\r\n    private initFixedHead;\r\n    private getTbodyHeight;\r\n    private addFixedColumnBehavior;\r\n    /**\r\n     * @ignore\r\n     */\r\n    processFixedColumn(): void;\r\n}\r\n"]}