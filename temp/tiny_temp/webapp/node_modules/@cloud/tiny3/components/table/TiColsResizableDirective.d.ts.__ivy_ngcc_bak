import { DoCheck, ElementRef, IterableDiffers, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { TiTableComponent } from './TiTableComponent';
import { TiRenderer } from '../../services/renderer/TiRenderer';
import { TiTableFixedHeadService } from './TiTableFixedHeadService';
/**
 * @ignore
 */
export interface ResizableOpts {
    table: any;
    ths: Array<any>;
    wrap: any;
    mouseXPosition: number;
    target: any;
    storedSizes: Array<number>;
    storedSortEleSizes: Array<number>;
    storeTableWidthChange: number;
    secondTable?: any;
    secondThs?: Array<any>;
    xScrollState?: boolean;
    yScrollState?: boolean;
    isYOverflowedWithX?: boolean;
}
/**
 * TiColsResizable 表格列拖动指令
 *
 * 支持拖动表格列来调整各列宽度。
 *
 * 在ti-table标签上加了tiColsResizable属性，则表格自动具有列拖动功能；
 * 同时还需要对table元素包裹父容器div，并对父容器设置 ti3-resize-wrapper样式类。
 */
export declare class TiColsResizableDirective implements OnInit, DoCheck, OnDestroy {
    private renderer;
    private elementRef;
    private zone;
    private tiRenderer;
    private iterableDiffers;
    private fixedHeadService;
    private document;
    /**
     * @ignore
     */
    static readonly UNSELECTABLE_CLASS: string;
    /**
     * @ignore
     * 移到表头能够显示拖动线的感应范围
     */
    static readonly COL_BORDER_RANGE: number;
    /**
     * @ignore
     */
    readonly notResizableAttr: string;
    /**
     * @ignore
     */
    resizableOpts: ResizableOpts;
    private hostEle;
    private documentMouseMoveListener;
    private documentMouseUpListener;
    private windowResizeListener;
    private isDragStart;
    private columsDiffer;
    private subscription;
    private isColumnsInit;
    /**
     * @ignore
     */
    isfirstYScrollStateChange: boolean;
    /**
     * @ignore
     */
    tableCom: TiTableComponent;
    constructor(tableCom: TiTableComponent, renderer: Renderer2, elementRef: ElementRef, zone: NgZone, tiRenderer: TiRenderer, iterableDiffers: IterableDiffers, fixedHeadService: TiTableFixedHeadService, document: any);
    private static getThs;
    private static getWidth;
    private static trackByFn;
    ngOnInit(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    private processColsResizable;
    private mouseMove;
    private getColMinWidth;
    private setTableWidthChange;
    private stopResize;
    private getTable;
    /**
     * @ignore
     */
    isLastColumn(th: any): boolean;
    private createDividingLine;
    private removeDividingLine;
    private updateTableInfo;
    private initStorageColsWidth;
    /**
     * @ignore
     * 将当前表格各列的宽度更新到到resizableOpts.storedSizes中
     */
    updateStoredSizes: () => void;
    private setComputedWidth;
    /**
     * @ignore
     */
    setWidth: (element: any, width: number) => void;
    private setDefaultWidth;
    private toggleTextSelection;
    private needDividingLine;
    private getSecondTable;
    private overflowedX;
    private overflowedY;
}
