import { AfterViewChecked, AfterViewInit, DoCheck, ElementRef, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { TiAutofocusComponent } from '../base/TiBaseModule';
import { NgControl } from '@angular/forms';
/**
 * Textarea文本框组件
 *
 * 文本框组件基于原生textarea标签进行扩展，原生textarea加tiTextarea属性指令即为textarea组件。
 *
 * <example-url>../tiny3demo/#/textarea/textarea-all</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class TiTextareaComponent extends TiAutofocusComponent implements OnInit, AfterViewChecked, AfterViewInit, DoCheck, OnDestroy {
    private zone;
    private formControl;
    private document;
    /**
     * 用来调整文本框大小，该属性提供了四个属性值:
     *
     * none(不可调整组件大小):
     *
     * vertical(仅可调整垂直方向的大小，即调整组件的高度)
     *
     * horizontal(仅可调节水平方向的大小，即调整组件的宽度)
     *
     * both(水平和垂直方向均可调节，宽高都可调节)
     */
    resize: 'none' | 'vertical' | 'horizontal' | 'both';
    /**
     * @ignore
     */
    private resizeIconRef;
    /**
     * @ignore
     */
    private eleCharacterRef;
    /**
     * @ignore
     */
    private charactersCountRef;
    /**
     * @ignore
     * 是否设置maxlength属性
     */
    hasMaxlength: boolean;
    /**
     * @ignore
     * 用户设置的最大值
     */
    maxLength: number;
    /**
     * @ignore
     * 当前输入内容的长度
     */
    countLength: number;
    private options;
    private defaultStyle;
    private element;
    private attrs;
    private container;
    private textAreaMinWidth;
    private textAreaMinHeight;
    private textAreaMaxWidth;
    private textAreaMaxHeight;
    private isVisibleInit;
    private isFirstFocus;
    private documentMouseMoveListener;
    private documentMouseUpListener;
    constructor(elementRef: ElementRef, renderer: Renderer2, zone: NgZone, formControl: NgControl, document: any);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    /**
     * @ignore
     */
    onFocus(): void;
    private setContainerSize;
    private setContainerClass;
    private initFn;
    private moveNode;
    private setMaxLengthFn;
    private resizeFn;
    private setCountLength;
    private mouseMove;
    private stopResize;
    private getSizeNumber;
    private updateTextAreaSize;
    private toggleTextSelection;
    /**
     * @ignore
     * 绑定在document上的mouseMove事件
     */
    mouseMoveHandlerFn: ($event: MouseEvent) => void;
    /**
     * @ignore
     * 绑定在document上的mouseUp事件
     */
    mouseUpHandlerFn: () => void;
    private isResizing;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiTextareaComponent, [null, null, null, { optional: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TiTextareaComponent, "[tiTextarea]", never, { "resize": "resize"; }, {}, never, never, false>;
}

//# sourceMappingURL=TiTextareaComponent.d.ts.map