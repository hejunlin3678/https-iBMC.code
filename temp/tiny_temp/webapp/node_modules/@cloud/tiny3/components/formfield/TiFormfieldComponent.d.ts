import { ChangeDetectorRef, ElementRef, Renderer2 } from '@angular/core';
import { TiItemComponent } from './TiItemComponent';
import { TiButtonItemComponent } from './TiButtonItemComponent';
import { TiBaseComponent } from '../base/TiBaseModule';
/**
 * 本组件实现对多个表单元素的布局，支持单列和多列布局。
 * 其中包含了tiFormfield、tiItem、tiItemLabel和tiButtonItem几个组件。
 *
 * <example-url>../tiny3demo/#/formfield/formfield-all</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class TiFormfieldComponent extends TiBaseComponent {
    protected hostRef: ElementRef;
    protected renderer: Renderer2;
    private changeDetector;
    /**
     * 默认两列的间距
     */
    private static readonly COLS_GAP;
    /**
     * 设置表单类型，不设置时默认为带输入控件类表单;当为 text 时，为纯文本描述类表单
     *
     * 带输入控件类表单：各个表单条目的内容区主要为输入框、下拉框、按钮组等输入组件；
     *
     * 纯文本描述类表单：各个表单条目的内容区为纯文本。
     */
    type: 'default' | 'text';
    /**
     * 设置表单的标题
     */
    title: string;
    /**
     * 统一设置表单条目的 label 所占宽度。例如："100px"
     */
    labelWidth: string;
    /**
     * 设置表单布局的列数
     */
    colsNumber: number;
    /**
     * 设置列与列之间的间隔，只有多列（colsNumber >= 2）时该属性配置才生效。
     */
    colsGap: Array<string>;
    /**
     * 统一设置表单条目的垂直对齐方式（上下布局表单不支持该属性）。
     */
    verticalAlign: 'top' | 'middle' | 'bottom';
    /**
     * 统一设置纯文本描述类表单的每个表单条目的行高。
     *
     * 纯文本描述类表单不设置时，行高默认为40px；设置值时，例如：'30px',则的行高为30px。
     *
     * 目前纯文本描述类表单有三种应用场景：表格下展表单，行高值40px（默认）；购买页配置信息汇总，行高30PX；订单详情确认，行高22px。
     */
    textLineHeight: string;
    /**
     * 设置各列宽度（IE不支持，行合并列合并暂不支持）
     *
     * 设置该接口后，colsGap第一个值表示各列间距
     *
     * 10.1.1 新增
     */
    colsWidth: Array<string>;
    /**
     * @ignore
     * 纯文本描述类表单的type的值
     */
    readonly textType: string;
    /**
     * @ignore
     * ti-formfield中包含的所有ti-item的集合
     */
    items: Array<TiItemComponent>;
    /**
     * @ignore
     * ti-formfield中包含的所有ti-btn-item的集合
     */
    btnItems: Array<TiButtonItemComponent>;
    /**
     * @ignore
     * 根据colsNum对 items 分组后的数据
     */
    groupedItems: Array<any>;
    /**
     * @ignore
     * 表单的列数
     */
    colsNum: number;
    /**
     * @ignore
     */
    containterObj: {
        'vertical-align': string;
        'grid-template-columns'?: string;
        'grid-column-gap'?: string;
    };
    /**
     * @ignore
     * 当前formfield下ti-item的总个数
     */
    itemTotal: number;
    /**
     * @ignore
     * 表单是否为上下布局
     */
    isVertical: boolean;
    /**
     * @ignore
     * button样式
     */
    buttonStyle: {
        'margin-left'?: string;
    };
    /**
     * @ignore
     * 表单是否使用grid布局
     */
    useGrid: boolean;
    constructor(hostRef: ElementRef, renderer: Renderer2, changeDetector: ChangeDetectorRef);
    ngOnInit(): void;
    private setColsNumber;
    private setFieldStyle;
    /**
     * @ignore
     * 需要在TiItemComponent.ts中调用
     */
    addCntItem(item: TiItemComponent): void;
    /**
     * @ignore
     * 需要在 TiItemComponent.ts 中调用
     */
    removeCntItem(item: TiItemComponent): void;
    /**
     * @ignore
     * 需要在 TiButtonItemComponent.ts 中调用
     */
    addBtnItem(item: TiButtonItemComponent): void;
    /**
     * @ignore
     * 需要在 TiButtonItemComponent.ts 中调用
     */
    removeBtnItem(item: TiButtonItemComponent): void;
    private chunkArray;
    /**
     * @ignore
     * 需要在html模板中使用
     */
    trackByFn(index: number, item: TiItemComponent): number;
    /**
     * @ignore
     * 每项图标是否占位，设置按钮及content样式
     */
    getRequire(item: TiItemComponent, index: number): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiFormfieldComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TiFormfieldComponent, "ti-formfield", never, { "type": "type"; "colsNumber": "colsNumber"; "colsGap": "colsGap"; "verticalAlign": "verticalAlign"; "colsWidth": "colsWidth"; "labelWidth": "labelWidth"; "title": "title"; "textLineHeight": "textLineHeight"; }, {}, never, never, false>;
}

//# sourceMappingURL=TiFormfieldComponent.d.ts.map