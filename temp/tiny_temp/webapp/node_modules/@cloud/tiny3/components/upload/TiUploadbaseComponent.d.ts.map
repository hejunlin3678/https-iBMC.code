{"version":3,"file":"TiUploadbaseComponent.d.ts","sources":["TiUploadbaseComponent.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, OnInit, Renderer2 } from '@angular/core';\r\nimport { TiFileInfo, TiFileItem, TiFilter, TiUploadConfig, TiUploadRef } from '../../services/upload/TiFileInterface';\r\nimport { TiBaseComponent } from '../base/TiBaseModule';\r\n/**\r\n * 10.0.2版本抽取\r\n *\r\n * upload基类，继承于TiBaseComponent组件\r\n */\r\nexport declare class TiUploadbaseComponent extends TiBaseComponent implements OnInit {\r\n    protected hostRef: ElementRef;\r\n    protected renderer: Renderer2;\r\n    /**\r\n     * 文件上传地址配置\r\n     */\r\n    url: string;\r\n    /**\r\n     * 上传方式，可选值为：get/post(其他方式IE9不支持，因此暂不开放)\r\n     */\r\n    method: 'get' | 'post';\r\n    /**\r\n     * 文件有效性判断条件数组\r\n     */\r\n    filters: Array<TiFilter>;\r\n    /**\r\n     * 向后台发送请求时对应的文件对象name属性，该name属性是后台读取文件的入口值\r\n     */\r\n    alias: string;\r\n    /**\r\n     * 上传文件附带信息，数据类型为对象形式\r\n     */\r\n    formData: object;\r\n    /**\r\n     * 上传对象信息中，formData是否先于file对象，适用于后台传输时，formData数据先于file对象的场景\r\n     */\r\n    formDataFirst: boolean;\r\n    /**\r\n     * 文件选中后是否自动上传\r\n     */\r\n    autoUpload: boolean;\r\n    /**\r\n     * 文件上传是否 是否一次请求传输多个文件，默认情况下一次请求上传一个文件\r\n     */\r\n    batchSend: boolean;\r\n    /**\r\n     * 上传文件请求头配置，自定义为对象形式\r\n     */\r\n    headers: object;\r\n    /**\r\n     * 文件类型过滤配置，适用于IE10+浏览器，能做到文件弹窗中不出现非法类型的文件，主要适用于两种场景：\r\n     *\r\n     * 1.过滤规则中带类型过滤，但是想要去掉文件选择框中文件过滤的场景（设置accept为空字符串即可）：此种场景应用于浏览器设置accept后导致文件窗打开很慢的情况\r\n     *\r\n     * 2.不需要定义文件类型过滤条件，但是通过accept能精确的确保文件类型的场景\r\n     */\r\n    accept: string;\r\n    /**\r\n     * 是否禁用\r\n     */\r\n    disabled: boolean;\r\n    /**\r\n     * @ignore\r\n     */\r\n    title: string;\r\n    /**\r\n     * 文件添加失败回调，可使用该回调定义上传错误提示\r\n     *\r\n     * 参数为对象形式，结构如下：\r\n     *\r\n     * {\r\n     *\r\n     * file: [TiFileInfo]{@link ../interfaces/TiFileInfo.html}, // 上传文件信息\r\n     *\r\n     * validResults: Array&lt;string&gt;  // 校验不合法的规则name数组\r\n     *\r\n     * }\r\n     */\r\n    readonly addItemFailed: EventEmitter<{\r\n        file: TiFileInfo;\r\n        validResults: Array<string>;\r\n    }>;\r\n    /**\r\n     * 文件添加成功回调\r\n     *\r\n     * 参数：文件对象\r\n     */\r\n    readonly addItemSuccess: EventEmitter<TiFileItem>;\r\n    /**\r\n     * 上传文件前回调，可在该回调中动态设置formData\r\n     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理\r\n     *\r\n     * 参数为数组形式，代表上传的文件对象\r\n     */\r\n    readonly beforeSendItems: EventEmitter<Array<TiFileItem>>;\r\n    /**\r\n     * 上传文件进度改变回调\r\n     *\r\n     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理\r\n     *\r\n     * 参数为对象形式，结构如下：\r\n     *\r\n     * {\r\n     *\r\n     * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组\r\n     *\r\n     * progress: number  // 进度信息\r\n     *\r\n     * }\r\n     */\r\n    readonly progressItems: EventEmitter<{\r\n        fileItems: Array<TiFileItem>;\r\n        progress: number;\r\n    }>;\r\n    /**\r\n     * 文件上传完成回调，成功/失败都会触发\r\n     *\r\n     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理\r\n     *\r\n     * 参数为对象形式，结构如下：\r\n     *\r\n     * {\r\n     *\r\n     * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组\r\n     *\r\n     * response: string  // 文件上传响应信息\r\n     *\r\n     * status: number 文件上传响应状态码\r\n     *\r\n     * }\r\n     */\r\n    readonly completeItems: EventEmitter<{\r\n        fileItems: Array<TiFileItem>;\r\n        response: string;\r\n        status: number;\r\n    }>;\r\n    /**\r\n     * 文件上传成功回调\r\n     *\r\n     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理\r\n     *\r\n     * 参数为对象形式，结构如下：\r\n     *\r\n     * {\r\n     *\r\n     * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组\r\n     *\r\n     * response: string  // 文件上传响应信息\r\n     *\r\n     * status: number 文件上传响应状态码\r\n     *\r\n     * }\r\n     */\r\n    readonly successItems: EventEmitter<{\r\n        fileItems: Array<TiFileItem>;\r\n        response: string;\r\n        status: number;\r\n    }>;\r\n    /**\r\n     * 文件上传失败回调\r\n     *\r\n     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理\r\n     *\r\n     * 参数为对象形式，结构如下：\r\n     *\r\n     * {\r\n     *\r\n     * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组\r\n     *\r\n     * response: string  // 文件上传响应信息\r\n     *\r\n     * status: number 文件上传响应状态码\r\n     *\r\n     * }\r\n     */\r\n    readonly errorItems: EventEmitter<{\r\n        fileItems: Array<TiFileItem>;\r\n        response: string;\r\n        status: number;\r\n    }>;\r\n    /**\r\n     * 文件上传取消回调\r\n     *\r\n     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理\r\n     *\r\n     * 参数为对象形式，结构如下：\r\n     *\r\n     * {\r\n     *\r\n     * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组\r\n     *\r\n     * response: string  // 文件上传响应信息\r\n     *\r\n     * status: number 文件上传响应状态码\r\n     *\r\n     * }\r\n     */\r\n    readonly cancelItems: EventEmitter<{\r\n        fileItems: Array<TiFileItem>;\r\n        response: string;\r\n        status: number;\r\n    }>;\r\n    /**\r\n     * 上传删除回调\r\n     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理\r\n     *\r\n     * 参数为数组形式，代表在操作的文件对象\r\n     */\r\n    readonly removeItems: EventEmitter<Array<TiFileItem>>;\r\n    /**\r\n     * 所有文件上传完成回调\r\n     *\r\n     * 参数为数组形式，代表在操作的文件对象\r\n     */\r\n    readonly completeAllItems: EventEmitter<Array<TiFileItem>>;\r\n    /**\r\n     * 上传文件删除前的回调\r\n     *\r\n     * 参数为数组形式，代表在操作的文件对象\r\n     */\r\n    readonly beforeRemoveItems: EventEmitter<Array<TiFileItem>>;\r\n    /**\r\n     * 上传实例的配置信息\r\n     */\r\n    uploadConfig: TiUploadConfig;\r\n    /**\r\n     * @ignore 生成的上传文件实例\r\n     */\r\n    uploadInst: TiUploadRef;\r\n    /**\r\n     * @ignore 词条\r\n     */\r\n    uploadLan: {\r\n        addFile: string;\r\n        error: string; /**\r\n         * 文件类型过滤配置，适用于IE10+浏览器，能做到文件弹窗中不出现非法类型的文件，主要适用于两种场景：\r\n         *\r\n         * 1.过滤规则中带类型过滤，但是想要去掉文件选择框中文件过滤的场景（设置accept为空字符串即可）：此种场景应用于浏览器设置accept后导致文件窗打开很慢的情况\r\n         *\r\n         * 2.不需要定义文件类型过滤条件，但是通过accept能精确的确保文件类型的场景\r\n         */\r\n        successInfo: string;\r\n        uploadingSingleInfo: string;\r\n        errorSingleInfo: string;\r\n        addSuccessMutiInfo: string;\r\n        uploadingMutiInfo: string;\r\n        errorMultiInfo: string;\r\n        clearAll: string;\r\n        upload: string;\r\n        cancel: string;\r\n        reload: string;\r\n        autoUploadFilePlaceholder: string;\r\n        autoUploadFilesPlaceholder: string;\r\n        notAutoUploadFilePlaceholder: string;\r\n        notAutoUploadFilesPlaceholder: string;\r\n    };\r\n    constructor(hostRef: ElementRef, renderer: Renderer2);\r\n    ngOnInit(): void;\r\n    /**\r\n     * 手动上传，可以通过组件调用\r\n     */\r\n    upload(): void;\r\n}\r\n"]}