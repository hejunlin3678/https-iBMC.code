import { ElementRef, EventEmitter, OnInit, Renderer2 } from '@angular/core';
import { TiFileInfo, TiFileItem, TiFilter, TiUploadConfig, TiUploadRef } from '../../services/upload/TiFileInterface';
import { TiBaseComponent } from '../base/TiBaseModule';
/**
 * 10.0.2版本抽取
 *
 * upload基类，继承于TiBaseComponent组件
 */
export declare class TiUploadbaseComponent extends TiBaseComponent implements OnInit {
    protected hostRef: ElementRef;
    protected renderer: Renderer2;
    /**
     * 文件上传地址配置
     */
    url: string;
    /**
     * 上传方式，可选值为：get/post(其他方式IE9不支持，因此暂不开放)
     */
    method: 'get' | 'post';
    /**
     * 文件有效性判断条件数组
     */
    filters: Array<TiFilter>;
    /**
     * 向后台发送请求时对应的文件对象name属性，该name属性是后台读取文件的入口值
     */
    alias: string;
    /**
     * 上传文件附带信息，数据类型为对象形式
     */
    formData: object;
    /**
     * 上传对象信息中，formData是否先于file对象，适用于后台传输时，formData数据先于file对象的场景
     */
    formDataFirst: boolean;
    /**
     * 文件选中后是否自动上传
     */
    autoUpload: boolean;
    /**
     * 文件上传是否 是否一次请求传输多个文件，默认情况下一次请求上传一个文件
     */
    batchSend: boolean;
    /**
     * 上传文件请求头配置，自定义为对象形式
     */
    headers: object;
    /**
     * 文件类型过滤配置，适用于IE10+浏览器，能做到文件弹窗中不出现非法类型的文件，主要适用于两种场景：
     *
     * 1.过滤规则中带类型过滤，但是想要去掉文件选择框中文件过滤的场景（设置accept为空字符串即可）：此种场景应用于浏览器设置accept后导致文件窗打开很慢的情况
     *
     * 2.不需要定义文件类型过滤条件，但是通过accept能精确的确保文件类型的场景
     */
    accept: string;
    /**
     * 是否禁用
     */
    disabled: boolean;
    /**
     * @ignore
     */
    title: string;
    /**
     * 文件添加失败回调，可使用该回调定义上传错误提示
     *
     * 参数为对象形式，结构如下：
     *
     * {
     *
     * file: [TiFileInfo]{@link ../interfaces/TiFileInfo.html}, // 上传文件信息
     *
     * validResults: Array&lt;string&gt;  // 校验不合法的规则name数组
     *
     * }
     */
    readonly addItemFailed: EventEmitter<{
        file: TiFileInfo;
        validResults: Array<string>;
    }>;
    /**
     * 文件添加成功回调
     *
     * 参数：文件对象
     */
    readonly addItemSuccess: EventEmitter<TiFileItem>;
    /**
     * 上传文件前回调，可在该回调中动态设置formData
     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理
     *
     * 参数为数组形式，代表上传的文件对象
     */
    readonly beforeSendItems: EventEmitter<Array<TiFileItem>>;
    /**
     * 上传文件进度改变回调
     *
     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理
     *
     * 参数为对象形式，结构如下：
     *
     * {
     *
     * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组
     *
     * progress: number  // 进度信息
     *
     * }
     */
    readonly progressItems: EventEmitter<{
        fileItems: Array<TiFileItem>;
        progress: number;
    }>;
    /**
     * 文件上传完成回调，成功/失败都会触发
     *
     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理
     *
     * 参数为对象形式，结构如下：
     *
     * {
     *
     * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组
     *
     * response: string  // 文件上传响应信息
     *
     * status: number 文件上传响应状态码
     *
     * }
     */
    readonly completeItems: EventEmitter<{
        fileItems: Array<TiFileItem>;
        response: string;
        status: number;
    }>;
    /**
     * 文件上传成功回调
     *
     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理
     *
     * 参数为对象形式，结构如下：
     *
     * {
     *
     * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组
     *
     * response: string  // 文件上传响应信息
     *
     * status: number 文件上传响应状态码
     *
     * }
     */
    readonly successItems: EventEmitter<{
        fileItems: Array<TiFileItem>;
        response: string;
        status: number;
    }>;
    /**
     * 文件上传失败回调
     *
     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理
     *
     * 参数为对象形式，结构如下：
     *
     * {
     *
     * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组
     *
     * response: string  // 文件上传响应信息
     *
     * status: number 文件上传响应状态码
     *
     * }
     */
    readonly errorItems: EventEmitter<{
        fileItems: Array<TiFileItem>;
        response: string;
        status: number;
    }>;
    /**
     * 文件上传取消回调
     *
     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理
     *
     * 参数为对象形式，结构如下：
     *
     * {
     *
     * fileItems: Array<[TiFileItem]{@link ../interfaces/TiFileItem.html}>, // 上传文件对象数组
     *
     * response: string  // 文件上传响应信息
     *
     * status: number 文件上传响应状态码
     *
     * }
     */
    readonly cancelItems: EventEmitter<{
        fileItems: Array<TiFileItem>;
        response: string;
        status: number;
    }>;
    /**
     * 上传删除回调
     * 该回调对单个或多个文件在同一url同时上传有效，可使用其进行文件上传过程中的业务处理
     *
     * 参数为数组形式，代表在操作的文件对象
     */
    readonly removeItems: EventEmitter<Array<TiFileItem>>;
    /**
     * 所有文件上传完成回调
     *
     * 参数为数组形式，代表在操作的文件对象
     */
    readonly completeAllItems: EventEmitter<Array<TiFileItem>>;
    /**
     * 上传文件删除前的回调
     *
     * 参数为数组形式，代表在操作的文件对象
     */
    readonly beforeRemoveItems: EventEmitter<Array<TiFileItem>>;
    /**
     * 上传实例的配置信息
     */
    uploadConfig: TiUploadConfig;
    /**
     * @ignore 生成的上传文件实例
     */
    uploadInst: TiUploadRef;
    /**
     * @ignore 词条
     */
    uploadLan: {
        addFile: string;
        error: string; /**
         * 文件类型过滤配置，适用于IE10+浏览器，能做到文件弹窗中不出现非法类型的文件，主要适用于两种场景：
         *
         * 1.过滤规则中带类型过滤，但是想要去掉文件选择框中文件过滤的场景（设置accept为空字符串即可）：此种场景应用于浏览器设置accept后导致文件窗打开很慢的情况
         *
         * 2.不需要定义文件类型过滤条件，但是通过accept能精确的确保文件类型的场景
         */
        successInfo: string;
        uploadingSingleInfo: string;
        errorSingleInfo: string;
        addSuccessMutiInfo: string;
        uploadingMutiInfo: string;
        errorMultiInfo: string;
        clearAll: string;
        upload: string;
        cancel: string;
        reload: string;
        autoUploadFilePlaceholder: string;
        autoUploadFilesPlaceholder: string;
        notAutoUploadFilePlaceholder: string;
        notAutoUploadFilesPlaceholder: string;
    };
    constructor(hostRef: ElementRef, renderer: Renderer2);
    ngOnInit(): void;
    /**
     * 手动上传，可以通过组件调用
     */
    upload(): void;
}
