import { ElementRef, SimpleChanges } from '@angular/core';
import { TiDominatorComponent } from '../dominator/TiDominatorModule';
import { TiDropComponent } from '../drop/TiDropModule';
import { TiSearchboxNotsearchComponent } from '../searchbox/TiSearchboxModule';
import { TiSelectComponent } from '../select/TiSelectModule';
/**
 * Treeselect树选择下拉组件
 *
 * 支持单选/多选，全选，搜索，懒加载。
 *
 * 单选主要功能为从Tree组件数据中选择某一条数据，单选与Tree功能相同，只是视觉呈现不同。
 *
 * 多选主要功能是从Tree组件数据中任意选择多条数据，多选与Tree功能相同，只是视觉呈现不同。
 *
 * 该组件继承自TiSelectComponent，其中
 *
 * 输入属性：clearable、labelKey、searchKeys、tipPosition、panelMaxHeight和valueKey暂不支持；
 *
 * 输出属性：clear不支持（单选和多选都采用标签方式展示，所以不支持单选情况下的clear事件）
 *
 * <example-url>../tiny3demo/#/treeselect/treeselect-all</example-url>
 */
export declare class TiTreeselectComponent extends TiSelectComponent {
    private static readonly SEARCHBOX_HEIGHT;
    /**
     * 下拉面板的高度，默认展示8条
     */
    dropMaxHeight: number;
    /**
     * @ignore 搜索结果
     */
    oldOptions: Array<any>;
    /**
     * @ignore 内部标签
     */
    dropCom: TiDropComponent;
    /**
     * @ignore 内部标签
     */
    dominatorCom: TiDominatorComponent;
    /**
     * @ignore 内部标签
     */
    searchboxCom: TiSearchboxNotsearchComponent;
    /**
     * @ignore 内部标签
     */
    dataTemplate: ElementRef;
    /**
     * @ignore 全选框的半选中状态
     */
    indeterminate: boolean;
    /**
     * @ignore 全选中
     */
    isAllSelected: boolean;
    /**
     * @ignore 搜索提示文本
     */
    searchPlaceholder: string;
    /**
     * @ignore 搜索内容
     */
    searchText: string;
    /**
     * @ignore 是否处于搜索状态
     */
    private isInSearch;
    private static leafShallowClone;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewChecked(): void;
    /**
     * @ignore drop高度被压缩时，重新设置下拉面板的高度
     */
    private restyleDropMaxHeight;
    ngOnModelChange(): void;
    /**
     * @ignore 设置下拉面板定位
     */
    setPosition(optionsChange?: boolean): void;
    /**
     * @ignore 关闭下拉面板并转移焦点
     */
    close(): void;
    /**
     * @ignore 仅仅关闭下拉面板
     */
    private closeWithoutFocus;
    /**
     * @ignore 打开下拉面板
     */
    open(): void;
    /**
     * 尝试打开下拉面板
     */
    wantOpen(): void;
    /**
     * @ignore 点击ti-dominator触发的事件
     * 点击下拉面板，展开或者关闭面板
     */
    onClickDominator(): void;
    /**
     * @ignore 删除ti-dominator选中项时触发的事件
     * 需要取消树节点的选中
     */
    onDeleteDominatorTag(item: any): void;
    /**
     * @ignore ti-searchbox-notsearch搜索框内容变化时触发的事件
     */
    searchTextChange(searchText: string): void;
    /**
     * @ignore 从model中获取option所在的索引
     */
    private getItemIndexFromModel;
    /**
     * @ignore 获取需要放到model中的节点，根据规范，如果子节点全部选中了，需要在model中放入父节点或者祖先节点。找到第一个checked为true的节点即可
     * node: 树组件select事件中的参数
     */
    private getRealSelectedNode;
    /**
     * @ignore 获取需要从model移除的节点，根据规范，如果某个子节点取消选中了，那么可能是它的父节点或祖先节点或所有子节点从model中被移除
     * node：树组件select事件的参数
     */
    private getRealUnselectedNode;
    /**
     * @ignore 取消选中时，获取被选中的子节点，根据规范，父节点或祖先节点被选中之后，如果取消了某个子节点的选中，那么需要把它的所有选中的子节点加入model中
     * unselectedNode：需要从model中移除的节点
     */
    private getSelectedChildren;
    /**
     * @ignore 根据checked的值，设置option节点及其子节点和祖先节点的选中状态
     * option: 选中的节点；checked：option.checked属性，true/false
     */
    private setSelectState;
    /**
     * @ignore 选中某个节点后，更新this.model
     * option: 选中的节点
     */
    private setModelWhenSelected;
    /**
     * @ignore 取消选中某个节点后，更新this.model
     * option: 被取消选中的节点
     */
    private setModelWhenUnselected;
    /**
     * @ignore 处于搜索状态下，更新model
     */
    private setModelWhenSearch;
    /**
     * @ignore 获取data里面选中或者未选中的全部叶子节点
     * data：搜索范围，checked：true/false
     */
    private getLeafNodes;
    /**
     * @ignore 设置全选checkbox的状态
     */
    private setAllSelectCheckboxState;
    /**
     * @ignore ti-tree的select事件
     */
    onTreeSelect(option: any): void;
    /**
     * @ignore 全选复选框的按钮事件
     */
    onSelectAllChange(isAllSelected: any): void;
    /**
     * @ignore 全选复选框的点击事件
     */
    onClickSelectAll(event: any): void;
    /**
     * @ignore
     * 失焦情况下，仅关闭面板，不做聚焦等处理
     */
    onBlur(): void;
    /**
     * @ignore
     * 鼠标点击到空白，原本会失焦，此处通过阻止默认事件的方式进行了处理
     */
    onMouseDownDropOuter(event: any): void;
    /**
     * @ignore
     * #datatemplate内部滚动条会引起外部滚动条事件触发，引起弹框内的树下拉组件无法使用鼠标拖动滚动条，因此此处阻止事件冒泡
     */
    onMouseWheel(event: any): void;
}
