import { TiFormComponent } from './TiFormComponent';
/**
 * 单选/多选共同的基类。单选多选唯一的差异：单选只有在未选状态才接受空格键改变状态。
 */
import * as ɵngcc0 from '@angular/core';
export declare class TiRadioBaseComponent extends TiFormComponent {
    /**
     * 绑定的可点击文字。
     */
    label: string;
    /**
     * @ignore
     */
    private labelRef;
    /**
     * @ignore
     */
    private proxyRef;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * 将input子元素label，调整为兄弟元素。
     */
    private moveNode;
    /**
     * @ignore
     * 点选元素后，聚集到对应的checkbox-skin
     * 经赵梦测试，这段逻辑，是为了解决radio火狐下tab键只聚焦不选中。
     * @param event 鼠标点击事件
     */
    onHostClick(event: MouseEvent): void;
    onHostChange(event: Event): void;
    /**
     * @ignore
     * 阻止checkbox-skin和checkbox-label的事件冒泡，防止上层dom绑定的事件被多次触发
     * 原因：span和label使用for和input关联，input上的click等事件也会触发span/label的事件处理，
     * 如果不做处理，上层dom绑定的事件会被触发两次
     * @param event 鼠标点击事件
     */
    onLabelClick(event: MouseEvent): void;
    /**
     * @ignore
     * 快捷键的处理(Enter和Space)：考虑到交互的友好性及与原生的一致性，
     * 在keyup中做相应的事件处理(keydown和keypress会存在一次点击，多次触发的情况);
     * 此外，需要阻止浏览器默认事件（空格键会触发页面滚动条滚到底部的行为，
     * 默认事件的阻止需要在keyup之前，因此此处在keydown中阻止）
     * @param event 键盘按键事件
     */
    onSpaceKeydown(event: KeyboardEvent): void;
    /**
     * @ignore
     * @param event 键盘按键事件
     */
    onSpaceKeyup(event: KeyboardEvent): void;
    /**
     * @ignore
     * 这是单选多选唯一的差异：单选只有在未选状态才接受空格键改变状态。
     * @returns 默认返回true，多选框会继承这个方法。单选框重写这个方法。
     */
    protected canChange(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiRadioBaseComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TiRadioBaseComponent, "ti-radiobase", never, { "label": "label"; }, {}, never, never, false>;
}

//# sourceMappingURL=TiRadioBaseComponent.d.ts.map