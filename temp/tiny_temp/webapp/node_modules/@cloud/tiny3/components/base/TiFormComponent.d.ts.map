{"version":3,"file":"TiFormComponent.d.ts","sources":["TiFormComponent.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { EventEmitter, SimpleChanges, Type } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { TiBaseComponent } from './TiBaseComponent';\r\n/**\r\n * 表单基类，已实现autofocus tabindex disabled focus() blur() focus/blur/change事件 ControlValueAccessor\r\n */\r\nexport declare class TiFormComponent extends TiBaseComponent implements ControlValueAccessor {\r\n    /**\r\n     * HTML属性tabindex\r\n     */\r\n    tabindex: string;\r\n    /**\r\n     * 是否禁用\r\n     */\r\n    disabled: boolean;\r\n    /**\r\n     * HTML事件focus\r\n     */\r\n    readonly focusEvent: EventEmitter<FocusEvent>;\r\n    /**\r\n     * HTML事件blur\r\n     */\r\n    readonly blurEvent: EventEmitter<FocusEvent>;\r\n    /**\r\n     * @ignore\r\n     * HTML事件change\r\n     */\r\n    readonly changeEvent: EventEmitter<any>;\r\n    private focusCancelFns;\r\n    private blurCancelFns;\r\n    private mousedownCancelFns;\r\n    private focusModel;\r\n    protected focusElem: any;\r\n    /**\r\n     * 整体focus/blur事件参与的元素，和disabled设置。\r\n     * 组件具有多个input输入框:\r\n     * 1)无元素聚焦->任一元素聚焦=整体聚焦事件。\r\n     * 2)任一元素失焦->其他元素无焦点=整体失焦事件。\r\n     */\r\n    private focusableElems;\r\n    private _model;\r\n    private ngAfterViewCheckedFirst;\r\n    protected onModelChange: (model: any) => void;\r\n    protected onModelTouched: () => void;\r\n    protected focusedElem: any;\r\n    /**\r\n     * @ignore\r\n     * 实现表单注册接口\r\n     * @param type 类型\r\n     * @returns 对象\r\n     */\r\n    static getValueAccessor(type: Type<any>): any;\r\n    /**\r\n     * 是否组件整体聚焦\r\n     */\r\n    get focused(): boolean;\r\n    /**\r\n     * 为Dom元素添加/移除属性，此处用于disabled和focused属性的操作\r\n     * @param  element 需要操作的Dom元素\r\n     * @param  attr 操作的属性\r\n     * @param  value 属性值，为true时属性值即为属性值,为false时，移除属性\r\n     */\r\n    protected setAttr(element: any, attr: string, value: boolean): void;\r\n    ngOnInit(): void;\r\n    /**\r\n     * 监听disabled变化\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    /**\r\n     * 注意：子类继承自Form基类，如果有this.setFocusableElems([xxx]), 那么要更晚调用super.ngAfterViewChecked()。\r\n     * 子类ngAfterViewChecked(): void {\r\n     *      this.setFocusableElems([xxx]);\r\n     *      // 更晚调用super\r\n     *      super.ngAfterViewChecked();\r\n     * }\r\n     */\r\n    ngAfterViewChecked(): void;\r\n    /**\r\n     * 当做生命周期用吧，监听模型值变化。包括writeValue和this.model=赋值 这两个时刻。\r\n     * @param model 模型值\r\n     */\r\n    protected ngOnModelChange(model: any): void;\r\n    /**\r\n     * 设置tab键/点击时的聚焦元素，会顺便设置组件focus()聚焦时可聚焦元素（第一个非disabled的可聚焦元素）。\r\n     * 当可聚焦元素变动，或者单一元素disabled状态变动，都要重新调用此方法设置。\r\n     * 建议一般在ngOnInit生命周期调用，如果ngFor/ngIf内元素在ngOnInit找不到那么可在ngAfterViewInit生命周期调用。\r\n     * 注意：所有生命周期，都要调用类似super.ngOnInit()\r\n     *\r\n     * @param elems 可聚焦元素数组Array<Element>，第一个非disabled元素为整个组件的可聚焦元素。\r\n     *\r\n     * 目前使用分为几种情况：\r\n     * 1）一般表单组件，含有可聚焦子元素。\r\n     * 组件主动设置可聚焦元素数组this.setFocusableElems([xxxElement, yyyElement]);\r\n     * 2）有的表单组件，永远不聚焦。\r\n     * slider/list/menulist/droplist，统一不调用此接口。\r\n     * a.不调用接口时，@Input() tabindex: string = '0';未生效。但用户在html标签上设置的属性tabindex=\"0\"等，会生效。\r\n     * b.调用了this.setFocusableElems([]);时，强制清除了标签属性tabindex。用户设置的属性tabindex=\"1\"，会无效，不出现在标签上。\r\n     * 3）少量组件，内部没有可聚焦元素。但是皮儿需要聚焦，ti-dominator。\r\n     * 需要设置this.setFocusableElems([this.nativeElement]);\r\n     */\r\n    protected setFocusableElems(elems: Array<any>): void;\r\n    /**\r\n     *  调用focus()函数，会触发组件整体聚焦，此时焦点元素。\r\n     */\r\n    private setFocusElem;\r\n    /**\r\n     * 去除皮上的tabindex，给内部可聚焦子元素添加tabindex\r\n     * 当然，特殊情况：this.setFocusableElems([this.nativeElement]);时，又会给皮上补上tabindex\r\n     * 本来此方法，可以合入setFocusEvents()，减少遍历循环。但为了清晰，依然单独为函数。\r\n     */\r\n    private setElemsTabindex;\r\n    /**\r\n     * @ignore\r\n     */\r\n    getFocusableElems(): Array<any>;\r\n    /**\r\n     * 宿主元素标签上添加类似原生focus()方法。\r\n     * 用户调用方法: document.getElementById('ti-xxx').focus();\r\n     * 其实，更推荐调用组件实例上的方法tiXxxComp.focus();\r\n     */\r\n    private setNativeElementFocusFn;\r\n    /**\r\n     * 设置组件中的可聚焦元素并监听事件\r\n     */\r\n    private setFocusEvents;\r\n    /**\r\n     * focus回调函数\r\n     */\r\n    private focusCallbackFn;\r\n    /**\r\n     * blur 回调函数\r\n     */\r\n    private blurCallbackFn;\r\n    /**\r\n     * 聚焦方法。类似HTML DOM节点方法focus\r\n     */\r\n    focus(): void;\r\n    /**\r\n     * 失焦方法。类似HTML DOM节点方法blur\r\n     */\r\n    blur(): void;\r\n    /**\r\n     * Tiny组件各种行为，尽量和原生一致。 autofocus也许可以做成一个指令\r\n     * Tiny3新增：增加初始化焦点autofocus支持。IE9本来不支持autofocus，这时也支持了\r\n     */\r\n    private autoFocus;\r\n    /**\r\n     * 实现类表单组件的set和get方法\r\n     */\r\n    get model(): any;\r\n    /**\r\n     * 设置model值，如果有变化，则触发ngModelChange\r\n     */\r\n    set model(model: any);\r\n    /**\r\n     * @ignore\r\n     * 如果用户改变了[ngModel]绑定的变量，那么Angular会通知到这里\r\n     * 子类如果没有特殊需求，都需要首行调用super.writeValue（xxx）\r\n     *\r\n     * super.writeValue 和 this.model=xxx的区别：\r\n     * super.writeValue不会触发ngModelChange\r\n     * this.model=xxx会触发ngModelChange\r\n     * @param model any类型\r\n     */\r\n    writeValue(model: any): void;\r\n    /**\r\n     * @ignore\r\n     * Angular将(ngModelChange)绑定的函数，通知到这里。\r\n     * 当组件内部model值改变，需要调用这个函数向外通知。\r\n     * @param fn 回调函数\r\n     */\r\n    registerOnChange(fn: (model: any) => void): void;\r\n    /**\r\n     * @ignore\r\n     * Blur时，或者需要校验时，需要调用此函数。（可能描述不准确，需要再查资料）\r\n     * @param fn 回调函数\r\n     */\r\n    registerOnTouched(fn: () => void): void;\r\n    /**\r\n     * @ignore\r\n     * 用户绑定在[disabled]上的变量变化，会通知到这里。\r\n     * ti-xxx组件皮上设置[disabled]，会给皮上设置disabled属性，也会给所有可聚焦元素设置disabled属性。\r\n     * 如有特殊需求，子类可以不使用super.setDisabledState(), 而是直接覆盖。\r\n     * Angular原生[disabled]机制：checkbox/radio走不进原生setDisabledState()。原生[disabled][id]等取值也很晚。\r\n     * 注意: Form基类@Input() disabled已经接管了Angular原生[disabled]机制。\r\n     * ngOnChanges监听到disabled值（第一次和后续改变），会通知到这里。\r\n     * @param isDisabled 是否禁用\r\n     */\r\n    setDisabledState?(isDisabled: boolean): void;\r\n    /**\r\n     * 设置tabindex\r\n     * @param element 原生标签元素\r\n     */\r\n    private setTabindex;\r\n}\r\n/**\r\n * tabindex相关知识：\r\n * 所有已设置tabindex的元素，都会点击聚焦。哪怕<div tabindex=\"-1\">test</div>也会点击聚焦。\r\n * Tab键，会按照顺序聚焦：1,2,3,4，...0，按照此顺序聚焦。\r\n * tabindex='-1'不参与Tab键, 但是可以点击聚焦。\r\n * A标签不设置tabindex效果：Chrome浏览器点击时无蓝框，tab时有蓝框。其他浏览器有差异。\r\n * A标签禁用时想要点击和tab都不落焦点，唯一方法是去除href\r\n * input标签不设置tabindex效果：Chrome浏览器点击时/tab时都有蓝框。\r\n * 如果设置tabindex='',或者tabindex='tabindex'，这样非法设置，Chrome相当于没有设置。其他浏览器有差异\r\n */\r\n"]}