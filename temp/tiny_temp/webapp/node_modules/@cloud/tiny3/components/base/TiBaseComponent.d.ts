import { AfterContentChecked, AfterContentInit, AfterViewChecked, AfterViewInit, DoCheck, ElementRef, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';
/**
 * 基类，已实现[id]，子类也可以使用hostRef, nativeElement, renderer
 */
import * as ɵngcc0 from '@angular/core';
export declare class TiBaseComponent implements OnChanges, OnInit, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {
    protected hostRef: ElementRef;
    protected renderer: Renderer2;
    /**
     * HTML属性id，自动化测试要求必须给id赋值
     */
    id: string;
    /**
     * @ignore
     * 这里用any，原因HTMLElement->Element->Node, attributes定义的格式太死，不能有多余字段，可能是类型定义bug
     * interface Node extends EventTarget {readonly attributes: NamedNodeMap;
     */
    nativeElement: any;
    constructor(hostRef: ElementRef, renderer: Renderer2);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngDoCheck(): void;
    ngAfterContentInit(): void;
    ngAfterContentChecked(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    private setId;
    /**
     * 生成宿主Id：如果组件必须要有Id，那么调用此方法，无ID时会自动生成一个ID。
     */
    protected creatId(): void;
    /**
     * @ignore
     * 供内部子元素使用
     * @example
     * <span  [id]='appendId("label_span")'>{{label}}</span>
     * @param suffix 传入的字符串
     * @returns 返回的字符串this.id + '_' + suffix
     */
    appendId(suffix: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiBaseComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TiBaseComponent, "ti-base", never, { "id": "id"; }, {}, never, never, false>;
}

//# sourceMappingURL=TiBaseComponent.d.ts.map