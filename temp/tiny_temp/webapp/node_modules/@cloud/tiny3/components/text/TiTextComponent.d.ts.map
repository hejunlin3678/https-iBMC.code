{"version":3,"file":"TiTextComponent.d.ts","sources":["TiTextComponent.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { DoCheck, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';\r\nimport { NgControl } from '@angular/forms';\r\nimport { TiRenderer } from '../../services/renderer/TiRenderer';\r\nimport { TiAutofocusComponent } from '../base/TiBaseModule';\r\n/**\r\n * 本组件基于原生input标签进行扩展，原生input加 tiText 属性即为text组件,\r\n * 原生input的所有属性以及 Angular 的各种属性指令都可以使用。\r\n *\r\n * <example-url>../tiny3demo/#/text/text-all</example-url>\r\n */\r\nexport declare class TiTextComponent extends TiAutofocusComponent implements OnInit, DoCheck, OnDestroy {\r\n    private tiRenderer;\r\n    private formControl;\r\n    private zone;\r\n    private static readonly CLEAR_WIDTH;\r\n    private static readonly PASSWORD_WIDTH;\r\n    /**\r\n     * clear事件：当开启清除功能时(使用clearable属性)，点击删除按钮触发\r\n     */\r\n    readonly clear: EventEmitter<MouseEvent>;\r\n    /**\r\n     * @ignore\r\n     *\r\n     * autoComplete 也使用了该变量\r\n     */\r\n    isClearActive: boolean;\r\n    /**\r\n     * @ignore\r\n     *\r\n     * autoComplete 也使用了该变量\r\n     */\r\n    isShowClear: boolean;\r\n    /**\r\n     * @ignore\r\n     */\r\n    isNoBorder: boolean;\r\n    /**\r\n     * @ignore\r\n     *\r\n     * 初始获取文本框类型\r\n     */\r\n    isPassword: boolean;\r\n    private isFirstFocus;\r\n    private hasClear;\r\n    private pwdHackEle;\r\n    private lastIsHover;\r\n    private lastDisabled;\r\n    private isVisible;\r\n    private isNoEye;\r\n    constructor(elementRef: ElementRef, renderer: Renderer2, tiRenderer: TiRenderer, formControl: NgControl, zone: NgZone);\r\n    ngOnInit(): void;\r\n    ngDoCheck(): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    handleFocus(): void;\r\n    private initFn;\r\n    /**\r\n     * @ignore\r\n     * 鼠标移入清除按钮区域时，给宿主元素添加ti-text-clear-active样式\r\n     */\r\n    handleMousemove: (event: MouseEvent) => void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    handleMouseout: (event: MouseEvent) => void;\r\n    /**\r\n     * @ignore\r\n     * 切换密码可见不可见时，输入框需处于失焦状态\r\n     */\r\n    handleMousedown: (event: MouseEvent) => void;\r\n    /**\r\n     *\r\n     * @param isHover true标示悬浮，false标示非悬浮，null标示禁用，undefinded标示不画叉号。\r\n     * @returns\r\n     */\r\n    setClearBackgroud(isHover: boolean): void;\r\n    /**\r\n     *  @ignore\r\n     * 当在清除按钮区域点击时，清空输入框内容\r\n     */\r\n    handleClick: (event: MouseEvent) => void;\r\n    private handlePassword;\r\n    private controlClearShow;\r\n    private controlEyeShow;\r\n    private isIconField;\r\n}\r\n"]}