import { ElementRef, EventEmitter, NgZone, Renderer2, TemplateRef, SimpleChanges } from '@angular/core';
import { TiFormComponent } from '../base/TiBaseModule';
import { TiDropComponent } from '../drop/TiDropModule';
import { TiListComponent } from '../list/TiListModule';
import { TiPositionType } from '../../utils/Position';
/**
 * @ignore
 * 下拉面板带有数组列表组件，用于aucomplete等。它有子类TiDropsearchComponent
 */
export declare class TiDroplistComponent extends TiFormComponent {
    protected render: Renderer2;
    private zone;
    /**
     * 带搜索框情况下需要去除的高度
     */
    protected static readonly SEARCHBOX_EXCLUDE_HEIGHT: number;
    /**
     * 默认高度8条 DEFAULT_LIST_MAX_HEIGHT
     */
    protected defaultListMaxHeight: number;
    /**
     * 面板中，除去list外，其它元素的占位高度
     */
    protected heightExcludeList: number;
    /**
     * drop面板最大高度
     */
    private dropMaxHeight;
    /**
     * drop面板自定义底部高度
     */
    private footerHeight;
    /**
     * droplist依附的元素，需要使用该元素进行droplist的定位处理
     */
    dominatorElem: HTMLElement;
    /**
     * 是否多选
     */
    multiple: boolean;
    /**
     * 下拉面板的最大显示宽度，该变量与下拉类组件保持一致
     *
     * 1."justified"(默认): 下拉框的宽度与Select组件的宽度保持一致；
     *
     * 2."auto": 下拉框的宽度根据下拉选项的内容自动撑开；
     *
     * 3.表示宽度的字符串: 设置固定的下拉框宽度(不小于Select组件的宽度)。例如："200px"
     */
    panelWidth: 'justified' | 'auto' | string;
    /**
     * 下拉面板的最大显示高度，溢出时则出滚动条,该变量名与下拉类组件保持一致
     */
    panelMaxHeight: string;
    options: Array<any>;
    labelKey: string;
    noDataText: string;
    tipPosition: TiPositionType;
    dominatorSpace: string;
    panelAlign: 'left' | 'right';
    /**
     * 内部接口，用作suggestion时type传入suggestion，默认值default
     */
    type: 'default' | 'suggestion';
    /**
     * 大小样式，default/small. 默认值default
     */
    size: 'default' | 'small';
    /**
     * 选中选项后面板是否保持显示， 默认值false
     */
    isShowAfterSelect: boolean;
    /**
     * 选中事件，向外通知option数据
     */
    readonly select: EventEmitter<any>;
    dropCom: TiDropComponent;
    listCom: TiListComponent;
    footerElemRef: ElementRef;
    /**
     * 自定义list中的item的模板
     */
    itemTemplate: TemplateRef<any>;
    /**
     * 储存donimator bottom旧值
     */
    private dominatorLastBottom;
    /**
     * 储存donimator left旧值
     */
    private dominatorLastLeft;
    private unlistenKeydownFn;
    constructor(render: Renderer2, hostRef: ElementRef, zone: NgZone);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * 当做生命周期用吧，监听模型值变化。包括writeValue和this.model=赋值 这两个时刻。
     * @param model ngModel值
     */
    protected ngOnModelChange(model: any): void;
    /**
     *  监听keydown
     * @param focusElem 焦点元素
     */
    protected listenKeydown(focusElem: HTMLElement): void;
    protected unlistenKendown(): void;
    /**
     * 外部接口: 获取当前状态, 只读不写
     */
    get isShow(): boolean;
    /**
     * 打开面板
     */
    show(): void;
    /**
     * 关闭面板的处理
     */
    hide(): void;
    /**
     * 重新设置元素位置
     */
    rePosition(optionsChange?: boolean): void;
    /**
     * 根据drop的压缩情况，设置list的max-height
     */
    restyleListMaxHeight(): void;
    private initListMaxHeight;
    onSelect(option: any): void;
}
