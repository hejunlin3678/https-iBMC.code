import { TiRadioBaseComponent } from '../base/TiBaseModule';
/**
 * Checkbox组件，尽管这是一个组件，但使用方法有点像属性指令。主要功能为设置某一条件是否被选中。
 *
 * Checkbox组件完全基于原生input checkbox实现，
 *
 * 可以使用Angular针对原生Checkbox提供的所有指令，包括：disabled, model, click等，
 *
 * 但是要记得在input中添加TinyUI提供的tiCheckbox属性。
 *
 * <example-url>../tiny3demo/#/checkbox/checkbox-all</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class TiCheckboxComponent extends TiRadioBaseComponent {
    /**
     * 问题一：浏览器兼容性问题：用angular提供的indeterminate属性设置半选，在谷歌下全部正常显示。
     * 在火狐和IE下，checked=true 和indeterminate=true同时存在时，半选样式存在问题，不知道是否和tiny组件的css样式写法有关。
     * 为了统一逻辑和预测，checkgroup和tree组件内部本应该这样使用：置indeterminate=true时，同时会置checked = false
     * 但是，暂时tree组件没有这样做，由TiCheckboxComponent来纠错。
     * TiCheckboxComponent补充效果：tree组件/业务用户，置indeterminate=true时，组件自身会置checked = false
     * 问题二：浏览器兼容性问题：Chrome/Firefox半选点击后变为全选，checked状态改变。IE半选点击后变为不选，checked状态未改变，所以没有通知change事件。
     * 但checkgroup需要change事件去维护子选项
     * TiCheckboxComponent IE补充效果：监听IE的click，当indeterminate从true变为false时，组件会置checked = false，并通知change事件。
     */
    private lastIndeterminate;
    ngAfterViewChecked(): void;
    /**
     * @ignore
     * IE补充效果：监听IE的click，当indeterminate从true变为false时，组件会置checked = false，并通知change事件。
     */
    onHostClick(event: MouseEvent): void;
    /**
     * @ignore
     * 设置checked属性，indeterminate，同时可能触发change事件。
     * 以后可以考虑开放这个接口，给用户调用
     * @protected
     * @param checked true/false/半选   半选用'indeterminate'或null
     */
    protected checked(checked: boolean | 'indeterminate'): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiCheckboxComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TiCheckboxComponent, "[tiCheckbox]", never, {}, {}, never, never, false>;
}

//# sourceMappingURL=TiCheckboxComponent.d.ts.map