import { ElementRef, EventEmitter, Renderer2, SimpleChanges } from '@angular/core';
import { TiBaseComponent } from '../base/TiBaseModule';
import { TiDateValue, TimeOptions } from '../datebase/TiDateBaseModule';
import { TiDropComponent } from './../drop/TiDropModule';
import { TiListComponent } from '../list/TiListModule';
/**
 * @ignore
 * 面板内部年月日
 */
export interface TiDatePanel {
    year: number;
    month: number;
    day: number;
}
/**
 * @ignore
 * 面板头部显示文本接口
 */
export interface TiPickerHeadText {
    year?: string;
    month?: string;
    yearRange?: string;
    endpanelYearRange?: string;
    onlyYear?: string;
}
/**
 * @ignore
 * 年月日数据的接口：state状态；value年月日值
 */
export interface TiDateValueAndState {
    state: string;
    value: number | string;
    isToday?: boolean;
    isMonth?: boolean;
    isYear?: boolean;
}
/**
 * @ignore
 * 最大年最小年范围
 */
export interface TiYearRange {
    min: number;
    max: number;
}
/**
 * @ignore
 */
export declare class TiDatePanelComponent extends TiBaseComponent {
    protected render: Renderer2;
    protected hostRef: ElementRef;
    drop: TiDropComponent;
    value: TiDateValue;
    readonly valueChange: EventEmitter<TiDateValue>;
    picker: string;
    readonly pickerChange: EventEmitter<string>;
    nowDateTime: Date;
    max: Date;
    min: Date;
    format: string;
    disabledDays: Array<Date>;
    endTimeDisabled: boolean;
    beginTimeDisabled: boolean;
    /**
     * @ignore
     * 面板内部焦点位置标志量
     */
    focusedPosition: string;
    /**
     * @ignore
     * 面板呈现选择时间或者选择日期 标志量
     */
    selectTime: boolean;
    /**
     * @ignore
     * 开始时间
     */
    beginTime: TimeOptions;
    /**
     * @ignore
     * 结束时间
     */
    endTime: TimeOptions;
    /**
     * @ignore
     * 判断是单日期（时间）还是日期（时间）段
     */
    isRange: boolean;
    /**
     * 开始日期是否禁用
     */
    isBeginFixed: boolean;
    /**
     * 结束日期是否禁用
     */
    isEndFixed: boolean;
    readonly select: EventEmitter<any>;
    readonly selectTimeFn: EventEmitter<any>;
    nextRef: ElementRef;
    private beginHourContainerRef;
    private beginMinuteContainerRef;
    private beginSecondContainerRef;
    private endHourContainerRef;
    private endMinuteContainerRef;
    private endSecondContainerRef;
    private date;
    dayArr: Array<Array<TiDateValueAndState>>;
    nextdayArr: Array<Array<TiDateValueAndState>>;
    monthArr: Array<Array<TiDateValueAndState>>;
    endpanelMonthArr: Array<Array<TiDateValueAndState>>;
    yearArr: Array<Array<TiDateValueAndState>>;
    endpanelYearArr: Array<Array<TiDateValueAndState>>;
    pickerValue: TiPickerHeadText;
    nextPickerValue: TiPickerHeadText;
    isMaxMonth: boolean;
    isMinMonth: boolean;
    private isMaxYear;
    private isMinYear;
    private isMaxYearRange;
    private isMinYearRange;
    private oldValue;
    hourOptions: Array<any>;
    minuteOptions: Array<any>;
    secondOptions: Array<any>;
    endHourOptions: Array<any>;
    endMinuteOptions: Array<any>;
    endSecondOptions: Array<any>;
    beginHour: any;
    beginMinute: any;
    beginSecond: any;
    endHour: any;
    endMinute: any;
    endSecond: any;
    isChinese: boolean;
    local: {
        weekArr: Array<string>;
        weekTitleArr: Array<string>;
        monthArr: Array<string>;
        yearText: string;
    };
    constructor(render: Renderer2, hostRef: ElementRef, drop: TiDropComponent);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private timeHandleFn;
    ngDoCheck(): void;
    onPreYearClick(event: MouseEvent): void;
    onPreMonthClick(event: MouseEvent): void;
    onNextMonthClick(event: MouseEvent): void;
    onNextYearClick(event: MouseEvent): void;
    onHeadTextClick(picker: string): void;
    onDayClick(isNext: boolean, day: TiDateValueAndState, event: MouseEvent): void;
    onMonthClick(month: TiDateValueAndState, event: MouseEvent, isEndClick?: boolean): void;
    onYearClick(year: TiDateValueAndState, event: MouseEvent): void;
    onSelect(val: any, timeOption: string): void;
    private setDatePanel;
    /**
     * @description 设置展示的日期
     */
    private setValue;
    /**
     * @description 判断参数传来的日期是否大于最大日期：大于返回true，小于返回false
     * @param year 年份
     * @param month 月份
     * @param day 日
     */
    private isBiggerThanMaxDay;
    /**
     * @description 判断参数传来的日期是否小于最小日期：小于返回true，大于返回false
     * @param year 年份
     * @param month 月份
     * @param day 日
     */
    private isSmallerThanMinDay;
    private isDisabledDay;
    private isFixedWithDisabled;
    /**
     * @description 设置下拉面板中年月文本
     */
    private setYearMonthText;
    /**
     * @description 设置上月、下月按钮状态：已经是最大、最小月时，将对应的按钮置灰
     * @param year 年份
     * @param month 月份
     */
    private setPreNextState;
    /**
     * @description 判断参数传来的年月是否等于最大月份：等于返回true，不等于返回false
     * @param year 年份
     * @param month 月份
     */
    private isEqualToMaxMonth;
    /**
     * @description 判断参数传来的年月是否等于最小月份：等于返回true，不等于返回false
     * @param year 年份
     * @param month 月份
     */
    private isEqualToMinMonth;
    /**
     * @description 根据面板设置 dayArr或monthArr
     *
     */
    private setDayMonthArr;
    /**
     * @description 根据当前年月值，设置下拉面板中显示的日数据
     */
    private setDayArr;
    /**
      * @description 根据当前年月值，设置下拉面板中显示的日数据
      */
    private setNextDayArr;
    /**
     * @description 判断参数传来的日期是否begin值小于end的值，end值大于begion值
     * @param year 年份
     * @param month 月份
     * @param day 日
     */
    private isOutInRange;
    /**
     * @description 判断参数传来的日期是否等于当前选中的日期：等于返回true，不等于返回false
     * @param year 年份
     * @param month 月份
     * @param day 日
     */
    private isEqualToValue;
    /**
     * @description 判断参数传来的日期是否在当前选中日期的范围内,并且不等于当前选中的值：符合返回true，不符合返回false
     * @param year 年份
     * @param month 月份
     * @param day 日
     */
    private isBetweenInRange;
    /**
     * @description 判断参数传来的日期是否等于当前日期时间
     * @param year 年份
     * @param month 月份
     * @param day 日
     */
    private isEqualToToday;
    private isEqualValue;
    /**
     * @description 根据当前年份和最大最小值，设置下拉面板中显示的月份状态
     */
    private setMonthArr;
    /**
     * @description 根据当前年份和最大最小值，设置下拉面板中显示的月份状态
     */
    private setEndpanelMonthArr;
    /**
     * @description 判断参数传来的年月是否小于最小月份：小于返回true，大于返回false
     * @param year 年份
     * @param month 月份
     */
    private isSmallerThanMinMonth;
    /**
     * @description 判断参数传来的年月是否大于最大月份：大于返回true，小于返回false
     * @param year 年份
     * @param month 月份
     */
    private isBiggerThanMaxMonth;
    /**
     * @description 设置按钮状态：
     */
    private setYearRangePreNextState;
    private getYearRange;
    /**
     * @description 根据当前年份和最大最小值，设置下拉面板中显示的年份状态
     */
    private setYearArr;
    /**
     * @description 根据当前年份和最大最小值，设置下拉面板中显示的年份状态
     */
    private setEndpanelYearArr;
    isPickerYearMinValue(): boolean;
    isPickerYearMaxValue(): boolean;
    trackByFn(index: number, item: any): number;
    private setOptions;
    /**
    * @ignore
    * 时间选择框部分鼠标移出时去除hover样式
    */
    onMouseleave(listCom: TiListComponent): void;
}
