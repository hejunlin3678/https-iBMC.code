import { ChangeDetectorRef, ElementRef, EventEmitter, IterableDiffers, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { TiRenderer } from '../../services/renderer/TiRenderer';
import { TiFormComponent } from '../base/TiBaseModule';
/**
 * @ignore
 */
import * as ɵngcc0 from '@angular/core';
export interface TiDragConfig {
    helper: any;
    position: {
        left: number;
        top: number;
    };
}
/**
 * Slider滑块组件
 *
 * 滑块组件，通过操作组件选择指示范围
 *
 * <example-url>../tiny3demo/#/slider/slider-all</example-url>
 */
export declare class TiSliderComponent extends TiFormComponent {
    private tiRenderer;
    private iterableDiffers;
    protected hostRef: ElementRef;
    protected renderer2: Renderer2;
    private changeDetectorRef;
    private domSanitizer;
    /**
     * 最小范围值
     */
    min: number;
    /**
     * 最大范围值
     */
    max: number;
    /**
     * 滑动步长，滑块每次跳变的步长（若要实现只在刻度上跳变的效果，step需严格和刻度间距一致）
     */
    step: number;
    /**
     * 设置刻度
     * 1.不同类型的使用：
     *
     * 1.1 Array情况下：数组中各元素依次对应各刻度显示值；
     *
     * 1.2 Function情况下：返回值为刻度显示值，根据返回值设置各step对应的刻度显示值，
     * 函数的参数依次为：value(step对应的值),max(最大值),min(最小值)。
     *
     * 2.不同形式的刻度显示值对应各自的显示方式：
     *
     * 2.1 空字符串 --- 只打点不显示label；
     *
     * 2.2 undefined/null ---不打点不显示label；
     *
     * 2.3 其它情况 --- 打点且显示值为配置值。
     */
    scales: Array<any> | Function;
    /**
     * 设置滑块的tip显示方式：取值"always"，"auto"（默认值）
     *
     * always：tip一直显示
     *
     * auto：鼠标移到滑块上出tip
     */
    tipMode: 'auto' | 'always';
    /**
     * tip提示内容格式函数：返回值是string类型，为tip中显示的文本。
     *
     * 返回值在 v10.1.3 及之前的版本存在XSS攻击(html类型)风险, v10.1.4 版本做了安全处理，已不存在XSS攻击风险。
     */
    tipFormatterFn: (value: any) => string;
    /**
     * 跟scales接口搭配使用，依次设置scales中两个相邻刻度每之间长度占总长的比例，
     * 数组所有项总和为1，数组长度比scales长度小1。
     */
    ratios: Array<number>;
    /**
     * 滑块停止后值发生改变时触发的事件
     *
     * 3.1.0新增
     */
    readonly changeStop: EventEmitter<any>;
    /**
     * @ignore
     * 获取到用户自定义的刻度
     */
    labelTemplate: TemplateRef<any>;
    /**
     * @ignore
     * 存放用户传入的刻度值
     */
    ticks: Array<any>;
    /**
     * @ignore
     * 对于双滑块，左滑块是否处于变化状态
     */
    isMinPointerActive: boolean;
    /**
     * @ignore
     * 拖动配置参数
     */
    dragOptions: any;
    private ticksArr;
    private isDouble;
    private isTipAutoShow;
    private decimalDigit;
    private scalesDiffer;
    private dragStartModel;
    private pointerMaxEleWidth;
    private trackRef;
    private selectionRef;
    private pointerMinRef;
    private pointerMaxRef;
    private tipMinRef;
    private tipMaxRef;
    private trackELe;
    private selectionEle;
    private pointerMinEle;
    private pointerMaxEle;
    private tipMinEle;
    private tipMaxEle;
    private isVisibleInit;
    /**
     * @description: 将value值处理成数组
     * @param: value 需要切割的数组
     */
    private static splitValueToArray;
    /**
     * @description: value值是否超限制
     * @param: value: 判断的value值
     * @param: minValue: 最大值
     * @param: maxValue: 最小值
     */
    private static isLimitExceed;
    /**
     * @description: 当this.scales为函数情况下，转换为ticks数组
     * @param: scaleFormat 被转换的函数
     * @param: minValue 刻度限制的最大值
     * @param: maxValue 刻度限制的最小值
     * @param: step 刻度步长
     */
    private static translateScales;
    /**
     * @description: 在范围内限制value数值
     * @param: value 校验的value值
     * @param: min 最小值
     * @param: max 最大值
     * @return: 有效value值
     */
    private static limitValue;
    /**
     * @description: 将样式数值转化为calc形式的css样式（设置为百分比形式，确保缩放的支持）
     * @param: percent calc百分比
     * @param: subValue calc减去值
     */
    private static parseToCalcStyle;
    constructor(tiRenderer: TiRenderer, iterableDiffers: IterableDiffers, hostRef: ElementRef, renderer2: Renderer2, changeDetectorRef: ChangeDetectorRef, domSanitizer: DomSanitizer);
    onResize(): void;
    ngOnInit(): void;
    /**
     * @ignore
     */
    initDom(): void;
    /**
     * @ignore
     */
    initVars(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngDoCheck(): void;
    /**
     * @ignore
     */
    writeValue(value: any): void;
    private writeValueHandle;
    /**
     * @ignore
     * Tiny3中不存在下面的问题，用click和mousedown事件都可以（统一使用mousedown事件）
     * 使用mousedown替代click，用于防止拖拽过程中触发click事件导致的滑块滑动
     * 问题场景：min滑块拖动与max滑块重合后，鼠标继续向右移动，此时鼠标抬起，触发click事件，导致max发生移动
     */
    hostMousedownEvent: (event: MouseEvent) => void;
    /**
     * @description: 添加tip的事件监听
     */
    private addTipEvent;
    /**
     * @description: 滑块元素的mouseover事件处理函数
     */
    private tipMouseoverHandle;
    /**
     * @description: 滑块元素的mouseleave事件处理函数
     */
    private tipMouseleaveHandle;
    /**
     * @description: 宿主元素的mousedown事件处理函数
     */
    private stepSliderFromClick;
    /**
     * @description 拖拽开始执行的事件
     * @param: ui 拖拽助手 {helper：表示被拖拽的助手（helper）, position: 助手（helper）的当前 CSS 位置}
     */
    private dragStartHandle;
    /**
     * @description 根据拖拽位置更新value值并改变位置呈现
     * @param: ui 拖拽助手 {helper：表示被拖拽的助手（helper）, position: 助手（helper）的当前 CSS 位置}
     */
    private dragHandle;
    /**
     * @description: 鼠标弹起之后：根据拖拽位置跳至step对应的值并设置slider
     * @param: ui 拖拽助手 {helper：表示被拖拽的助手（helper）, position: 助手（helper）的当前 CSS 位置}
     */
    private dragStopHandle;
    /**
     * @description: 拖拽公共处理
     * @param: ui 拖拽助手 {helper：表示被拖拽的助手（helper）, position: 助手（helper）的当前 CSS 位置}
     */
    private dragCommonHandle;
    /**
     * @description: 限制滑块移动位置并设置对应的选择区域宽度
     * @param: pointerX 鼠标点击位置（x方向）
     */
    private limitDragPosition;
    /**
     * @description: 根据滑块位置获取value值(和step对应) (拖拽公共函数中用)
     * @param: pointerX 鼠标点击位置（x方向）
     */
    private positionToStepValue;
    /**
     * @description: 获取位置对应的value值
     * @param: pointerX 鼠标点击位置（x方向）
     */
    private positionToValue;
    /**
     * @description: 设置组件的model值，用于向外通知
     * @param: value 当前指针的值
     */
    private setValue;
    /**
     * @description: 获取对应的step值(根据step修正value值)
     * @param: value 当前点击的绝对值
     */
    private getStepValue;
    /**
     * @description: 在不等分条件下获取位置对应的value值
     * @param: pointerX 鼠标点击位置（x方向）
     * @param: barWidth 指针宽度
     * @param: percent pointerX占滑动轴百分比
     */
    private unequalPositionToValue;
    /**
     * @description: 当前组件写入新值 || min || max || scales发生变化 时更新value对应的位置
     * @param: newValue 需要处理的value的值
     */
    private updateValuePosition;
    /**
     * @description: 限定双滑块value的值
     * @param: value 需要处理的value的值
     */
    private restrictDoubleValue;
    /**
     * @description: 限定单滑块value的值
     * @param: value 需要处理的value的值
     */
    private restrictSingleValue;
    /**
     * @description: 处理tip
     */
    private setTipConfig;
    /**
     * @description: 处理限制
     */
    private setMinMax;
    /**
     * @description: 处理刻度
     */
    private setScales;
    /**
     * @description: 非均匀情况下确定打点的位置
     * @param: arr 由ratiosSum组成的数组
     * @param: num ratios中最大的小数位数
     */
    private getTicks;
    /**
     * @description: 显示隐藏的元素
     * @param: ele: 要显示的DOM对象
     */
    private show;
    /**
     * @description: 隐藏显示的元素
     * @param: ele: 要隐藏的DOM对象
     */
    private hide;
    /**
     * @ignore
     * @description: 获取ticks的最大显示宽度，一行显示不下情况下，换行显示
     * @param: index 刻度下标
     */
    calcTickMaxWidth(index: number): string;
    /**
     * @ignore
     * @description: 获取 ticks 的left位置
     * @param: index 刻度下标
     */
    calcTickLeftPosition(index: number): string;
    /**
     * @ignore
     * @description: 确定滑动轴打点是否为选中点，根据函数返回值设置选中样式 (是否是selection区域的点)
     * @param: index 刻度下标
     */
    isSelectTick(index: number): boolean;
    /**
     * @description:  获取滑动轴的宽度(涉及到屏幕缩放，所以需要实时获取)
     */
    private getBarWidth;
    /**
     * @description: 获取ratios中最大的小数位数
     */
    private getDecimalDigit;
    /**
     * @description: 获取当前value所在的区域以及当前value对应的长度占总长的百分比(小数)
     * @param: value 指针对应的value值
     * @param: paragraph 当前打点的段数
     */
    private getValuePercent;
    /**
     * @description: 设置pointerDOM位置
     * @param: value 指针对应的value值
     * @param: pointer 被设置的DOM对象
     */
    private setPointerPos;
    /**
     * @description: 改变某一指针value值对应的指示位置
     * @param: value 指针对应的value值
     * @param: pointer 被设置的DOM对象
     */
    private valueToPosition;
    /**
     * @description:设置Tip提示内容及位置
     * @param: curTipEle 要设置tip的元素
     * @param: value 设置tip内容对应的value值
     */
    private setTip;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiSliderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TiSliderComponent, "ti-slider", never, { "min": "min"; "max": "max"; "step": "step"; "tipMode": "tipMode"; "tipFormatterFn": "tipFormatterFn"; "scales": "scales"; "ratios": "ratios"; }, { "changeStop": "changeStop"; }, ["labelTemplate"], never, false>;
}

//# sourceMappingURL=TiSliderComponent.d.ts.map