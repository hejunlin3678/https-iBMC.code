{"version":3,"file":"TiSliderComponent.d.ts","sources":["TiSliderComponent.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, IterableDiffers, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { TiRenderer } from '../../services/renderer/TiRenderer';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\n/**\r\n * @ignore\r\n */\r\nexport interface TiDragConfig {\r\n    helper: any;\r\n    position: {\r\n        left: number;\r\n        top: number;\r\n    };\r\n}\r\n/**\r\n * Slider滑块组件\r\n *\r\n * 滑块组件，通过操作组件选择指示范围\r\n *\r\n * <example-url>../tiny3demo/#/slider/slider-all</example-url>\r\n */\r\nexport declare class TiSliderComponent extends TiFormComponent {\r\n    private tiRenderer;\r\n    private iterableDiffers;\r\n    protected hostRef: ElementRef;\r\n    protected renderer2: Renderer2;\r\n    private changeDetectorRef;\r\n    private domSanitizer;\r\n    /**\r\n     * 最小范围值\r\n     */\r\n    min: number;\r\n    /**\r\n     * 最大范围值\r\n     */\r\n    max: number;\r\n    /**\r\n     * 滑动步长，滑块每次跳变的步长（若要实现只在刻度上跳变的效果，step需严格和刻度间距一致）\r\n     */\r\n    step: number;\r\n    /**\r\n     * 设置刻度\r\n     * 1.不同类型的使用：\r\n     *\r\n     * 1.1 Array情况下：数组中各元素依次对应各刻度显示值；\r\n     *\r\n     * 1.2 Function情况下：返回值为刻度显示值，根据返回值设置各step对应的刻度显示值，\r\n     * 函数的参数依次为：value(step对应的值),max(最大值),min(最小值)。\r\n     *\r\n     * 2.不同形式的刻度显示值对应各自的显示方式：\r\n     *\r\n     * 2.1 空字符串 --- 只打点不显示label；\r\n     *\r\n     * 2.2 undefined/null ---不打点不显示label；\r\n     *\r\n     * 2.3 其它情况 --- 打点且显示值为配置值。\r\n     */\r\n    scales: Array<any> | Function;\r\n    /**\r\n     * 设置滑块的tip显示方式：取值\"always\"，\"auto\"（默认值）\r\n     *\r\n     * always：tip一直显示\r\n     *\r\n     * auto：鼠标移到滑块上出tip\r\n     */\r\n    tipMode: 'auto' | 'always';\r\n    /**\r\n     * tip提示内容格式函数：返回值是string类型，为tip中显示的文本。\r\n     *\r\n     * 返回值在 v10.1.3 及之前的版本存在XSS攻击(html类型)风险, v10.1.4 版本做了安全处理，已不存在XSS攻击风险。\r\n     */\r\n    tipFormatterFn: (value: any) => string;\r\n    /**\r\n     * 跟scales接口搭配使用，依次设置scales中两个相邻刻度每之间长度占总长的比例，\r\n     * 数组所有项总和为1，数组长度比scales长度小1。\r\n     */\r\n    ratios: Array<number>;\r\n    /**\r\n     * 滑块停止后值发生改变时触发的事件\r\n     *\r\n     * 3.1.0新增\r\n     */\r\n    readonly changeStop: EventEmitter<any>;\r\n    /**\r\n     * @ignore\r\n     * 获取到用户自定义的刻度\r\n     */\r\n    labelTemplate: TemplateRef<any>;\r\n    /**\r\n     * @ignore\r\n     * 存放用户传入的刻度值\r\n     */\r\n    ticks: Array<any>;\r\n    /**\r\n     * @ignore\r\n     * 对于双滑块，左滑块是否处于变化状态\r\n     */\r\n    isMinPointerActive: boolean;\r\n    /**\r\n     * @ignore\r\n     * 拖动配置参数\r\n     */\r\n    dragOptions: any;\r\n    private ticksArr;\r\n    private isDouble;\r\n    private isTipAutoShow;\r\n    private decimalDigit;\r\n    private scalesDiffer;\r\n    private dragStartModel;\r\n    private pointerMaxEleWidth;\r\n    private trackRef;\r\n    private selectionRef;\r\n    private pointerMinRef;\r\n    private pointerMaxRef;\r\n    private tipMinRef;\r\n    private tipMaxRef;\r\n    private trackELe;\r\n    private selectionEle;\r\n    private pointerMinEle;\r\n    private pointerMaxEle;\r\n    private tipMinEle;\r\n    private tipMaxEle;\r\n    private isVisibleInit;\r\n    /**\r\n     * @description: 将value值处理成数组\r\n     * @param: value 需要切割的数组\r\n     */\r\n    private static splitValueToArray;\r\n    /**\r\n     * @description: value值是否超限制\r\n     * @param: value: 判断的value值\r\n     * @param: minValue: 最大值\r\n     * @param: maxValue: 最小值\r\n     */\r\n    private static isLimitExceed;\r\n    /**\r\n     * @description: 当this.scales为函数情况下，转换为ticks数组\r\n     * @param: scaleFormat 被转换的函数\r\n     * @param: minValue 刻度限制的最大值\r\n     * @param: maxValue 刻度限制的最小值\r\n     * @param: step 刻度步长\r\n     */\r\n    private static translateScales;\r\n    /**\r\n     * @description: 在范围内限制value数值\r\n     * @param: value 校验的value值\r\n     * @param: min 最小值\r\n     * @param: max 最大值\r\n     * @return: 有效value值\r\n     */\r\n    private static limitValue;\r\n    /**\r\n     * @description: 将样式数值转化为calc形式的css样式（设置为百分比形式，确保缩放的支持）\r\n     * @param: percent calc百分比\r\n     * @param: subValue calc减去值\r\n     */\r\n    private static parseToCalcStyle;\r\n    constructor(tiRenderer: TiRenderer, iterableDiffers: IterableDiffers, hostRef: ElementRef, renderer2: Renderer2, changeDetectorRef: ChangeDetectorRef, domSanitizer: DomSanitizer);\r\n    onResize(): void;\r\n    ngOnInit(): void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    initDom(): void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    initVars(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngAfterViewInit(): void;\r\n    ngAfterViewChecked(): void;\r\n    ngDoCheck(): void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    writeValue(value: any): void;\r\n    private writeValueHandle;\r\n    /**\r\n     * @ignore\r\n     * Tiny3中不存在下面的问题，用click和mousedown事件都可以（统一使用mousedown事件）\r\n     * 使用mousedown替代click，用于防止拖拽过程中触发click事件导致的滑块滑动\r\n     * 问题场景：min滑块拖动与max滑块重合后，鼠标继续向右移动，此时鼠标抬起，触发click事件，导致max发生移动\r\n     */\r\n    hostMousedownEvent: (event: MouseEvent) => void;\r\n    /**\r\n     * @description: 添加tip的事件监听\r\n     */\r\n    private addTipEvent;\r\n    /**\r\n     * @description: 滑块元素的mouseover事件处理函数\r\n     */\r\n    private tipMouseoverHandle;\r\n    /**\r\n     * @description: 滑块元素的mouseleave事件处理函数\r\n     */\r\n    private tipMouseleaveHandle;\r\n    /**\r\n     * @description: 宿主元素的mousedown事件处理函数\r\n     */\r\n    private stepSliderFromClick;\r\n    /**\r\n     * @description 拖拽开始执行的事件\r\n     * @param: ui 拖拽助手 {helper：表示被拖拽的助手（helper）, position: 助手（helper）的当前 CSS 位置}\r\n     */\r\n    private dragStartHandle;\r\n    /**\r\n     * @description 根据拖拽位置更新value值并改变位置呈现\r\n     * @param: ui 拖拽助手 {helper：表示被拖拽的助手（helper）, position: 助手（helper）的当前 CSS 位置}\r\n     */\r\n    private dragHandle;\r\n    /**\r\n     * @description: 鼠标弹起之后：根据拖拽位置跳至step对应的值并设置slider\r\n     * @param: ui 拖拽助手 {helper：表示被拖拽的助手（helper）, position: 助手（helper）的当前 CSS 位置}\r\n     */\r\n    private dragStopHandle;\r\n    /**\r\n     * @description: 拖拽公共处理\r\n     * @param: ui 拖拽助手 {helper：表示被拖拽的助手（helper）, position: 助手（helper）的当前 CSS 位置}\r\n     */\r\n    private dragCommonHandle;\r\n    /**\r\n     * @description: 限制滑块移动位置并设置对应的选择区域宽度\r\n     * @param: pointerX 鼠标点击位置（x方向）\r\n     */\r\n    private limitDragPosition;\r\n    /**\r\n     * @description: 根据滑块位置获取value值(和step对应) (拖拽公共函数中用)\r\n     * @param: pointerX 鼠标点击位置（x方向）\r\n     */\r\n    private positionToStepValue;\r\n    /**\r\n     * @description: 获取位置对应的value值\r\n     * @param: pointerX 鼠标点击位置（x方向）\r\n     */\r\n    private positionToValue;\r\n    /**\r\n     * @description: 设置组件的model值，用于向外通知\r\n     * @param: value 当前指针的值\r\n     */\r\n    private setValue;\r\n    /**\r\n     * @description: 获取对应的step值(根据step修正value值)\r\n     * @param: value 当前点击的绝对值\r\n     */\r\n    private getStepValue;\r\n    /**\r\n     * @description: 在不等分条件下获取位置对应的value值\r\n     * @param: pointerX 鼠标点击位置（x方向）\r\n     * @param: barWidth 指针宽度\r\n     * @param: percent pointerX占滑动轴百分比\r\n     */\r\n    private unequalPositionToValue;\r\n    /**\r\n     * @description: 当前组件写入新值 || min || max || scales发生变化 时更新value对应的位置\r\n     * @param: newValue 需要处理的value的值\r\n     */\r\n    private updateValuePosition;\r\n    /**\r\n     * @description: 限定双滑块value的值\r\n     * @param: value 需要处理的value的值\r\n     */\r\n    private restrictDoubleValue;\r\n    /**\r\n     * @description: 限定单滑块value的值\r\n     * @param: value 需要处理的value的值\r\n     */\r\n    private restrictSingleValue;\r\n    /**\r\n     * @description: 处理tip\r\n     */\r\n    private setTipConfig;\r\n    /**\r\n     * @description: 处理限制\r\n     */\r\n    private setMinMax;\r\n    /**\r\n     * @description: 处理刻度\r\n     */\r\n    private setScales;\r\n    /**\r\n     * @description: 非均匀情况下确定打点的位置\r\n     * @param: arr 由ratiosSum组成的数组\r\n     * @param: num ratios中最大的小数位数\r\n     */\r\n    private getTicks;\r\n    /**\r\n     * @description: 显示隐藏的元素\r\n     * @param: ele: 要显示的DOM对象\r\n     */\r\n    private show;\r\n    /**\r\n     * @description: 隐藏显示的元素\r\n     * @param: ele: 要隐藏的DOM对象\r\n     */\r\n    private hide;\r\n    /**\r\n     * @ignore\r\n     * @description: 获取ticks的最大显示宽度，一行显示不下情况下，换行显示\r\n     * @param: index 刻度下标\r\n     */\r\n    calcTickMaxWidth(index: number): string;\r\n    /**\r\n     * @ignore\r\n     * @description: 获取 ticks 的left位置\r\n     * @param: index 刻度下标\r\n     */\r\n    calcTickLeftPosition(index: number): string;\r\n    /**\r\n     * @ignore\r\n     * @description: 确定滑动轴打点是否为选中点，根据函数返回值设置选中样式 (是否是selection区域的点)\r\n     * @param: index 刻度下标\r\n     */\r\n    isSelectTick(index: number): boolean;\r\n    /**\r\n     * @description:  获取滑动轴的宽度(涉及到屏幕缩放，所以需要实时获取)\r\n     */\r\n    private getBarWidth;\r\n    /**\r\n     * @description: 获取ratios中最大的小数位数\r\n     */\r\n    private getDecimalDigit;\r\n    /**\r\n     * @description: 获取当前value所在的区域以及当前value对应的长度占总长的百分比(小数)\r\n     * @param: value 指针对应的value值\r\n     * @param: paragraph 当前打点的段数\r\n     */\r\n    private getValuePercent;\r\n    /**\r\n     * @description: 设置pointerDOM位置\r\n     * @param: value 指针对应的value值\r\n     * @param: pointer 被设置的DOM对象\r\n     */\r\n    private setPointerPos;\r\n    /**\r\n     * @description: 改变某一指针value值对应的指示位置\r\n     * @param: value 指针对应的value值\r\n     * @param: pointer 被设置的DOM对象\r\n     */\r\n    private valueToPosition;\r\n    /**\r\n     * @description:设置Tip提示内容及位置\r\n     * @param: curTipEle 要设置tip的元素\r\n     * @param: value 设置tip内容对应的value值\r\n     */\r\n    private setTip;\r\n}\r\n"]}