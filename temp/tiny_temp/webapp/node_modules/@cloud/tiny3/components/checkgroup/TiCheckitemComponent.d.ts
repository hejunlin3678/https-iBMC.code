import { ElementRef, IterableDiffers, Renderer2, SimpleChanges } from '@angular/core';
import { TiCheckboxComponent } from '../checkbox/TiCheckboxModule';
import { ObservableMap, ObservableSet } from '../../utils/Util';
/**
 * Checkitem多选选项组件，尽管这是一个组件，使用时像属性指令。
 *
 */
import * as ɵngcc0 from '@angular/core';
export declare class TiCheckitemComponent extends TiCheckboxComponent {
    protected hostRef: ElementRef;
    protected renderer: Renderer2;
    protected iterableDiffers: IterableDiffers;
    /**
     * @ignore
     * 全局item数据(多个group的item都在这里)
     */
    static globeCheckedMap: ObservableMap;
    /**
     * @ignore
     * 全局灰化禁用数据(多个group的item都在这里)
     */
    static globeDisabledSet: ObservableSet;
    /**
     * 选择框item数据，item引用也是身份标示。
     */
    item: any;
    /**
     * 当存在valueKey时，选中值基于valueKey
     * 10.0.4版本新增
     */
    valueKey: string;
    /**
     * 可选属性，当没有全选按钮，也要获得一组选中项时, 用来绑定已选中数据集。
     */
    beCheckeds: Set<any> | Array<any>;
    private beCheckedSet;
    private beCheckedsDiffer;
    constructor(hostRef: ElementRef, renderer: Renderer2, iterableDiffers: IterableDiffers);
    /**
     * @ignore
     * 监听change事件，会多触发一次DoCheck。 //TODO: 不让这条HostListener('change', ['$event'])在文档显示
     * @param checked
     * @returns
     */
    onHostChange(checked: any): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private deleteGlobeRef;
    ngDoCheck(): void;
    private initBeCheckedSet;
    /**
     * globeCheckedSet同步到item checked
     */
    private initGlobeCheckedSetItem;
    private globeCheckedMapObserverItemFn;
    private setCheckedItem;
    /**
     * @ignore
     */
    setDisabledState?(isDisabled: boolean): void;
    private setDisabledStateGlobe;
    /**
     * 输入：某个数据项
     * 输出：当有valueKey,返回值基于valueKey；当没有valueKey时，返回输入值
     */
    protected getValue(item: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiCheckitemComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TiCheckitemComponent, "[tiCheckitem]", never, { "item": "item"; "valueKey": "valueKey"; "beCheckeds": "beCheckeds"; }, {}, never, never, false>;
}

//# sourceMappingURL=TiCheckitemComponent.d.ts.map