{"version":3,"file":"TiCheckitemComponent.d.ts","sources":["TiCheckitemComponent.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, IterableDiffers, Renderer2, SimpleChanges } from '@angular/core';\r\nimport { TiCheckboxComponent } from '../checkbox/TiCheckboxModule';\r\nimport { ObservableMap, ObservableSet } from '../../utils/Util';\r\n/**\r\n * Checkitem多选选项组件，尽管这是一个组件，使用时像属性指令。\r\n *\r\n */\r\nexport declare class TiCheckitemComponent extends TiCheckboxComponent {\r\n    protected hostRef: ElementRef;\r\n    protected renderer: Renderer2;\r\n    protected iterableDiffers: IterableDiffers;\r\n    /**\r\n     * @ignore\r\n     * 全局item数据(多个group的item都在这里)\r\n     */\r\n    static globeCheckedMap: ObservableMap;\r\n    /**\r\n     * @ignore\r\n     * 全局灰化禁用数据(多个group的item都在这里)\r\n     */\r\n    static globeDisabledSet: ObservableSet;\r\n    /**\r\n     * 选择框item数据，item引用也是身份标示。\r\n     */\r\n    item: any;\r\n    /**\r\n     * 当存在valueKey时，选中值基于valueKey\r\n     * 10.0.4版本新增\r\n     */\r\n    valueKey: string;\r\n    /**\r\n     * 可选属性，当没有全选按钮，也要获得一组选中项时, 用来绑定已选中数据集。\r\n     */\r\n    beCheckeds: Set<any> | Array<any>;\r\n    private beCheckedSet;\r\n    private beCheckedsDiffer;\r\n    constructor(hostRef: ElementRef, renderer: Renderer2, iterableDiffers: IterableDiffers);\r\n    /**\r\n     * @ignore\r\n     * 监听change事件，会多触发一次DoCheck。 //TODO: 不让这条HostListener('change', ['$event'])在文档显示\r\n     * @param checked\r\n     * @returns\r\n     */\r\n    onHostChange(checked: any): void;\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    private deleteGlobeRef;\r\n    ngDoCheck(): void;\r\n    private initBeCheckedSet;\r\n    /**\r\n     * globeCheckedSet同步到item checked\r\n     */\r\n    private initGlobeCheckedSetItem;\r\n    private globeCheckedMapObserverItemFn;\r\n    private setCheckedItem;\r\n    /**\r\n     * @ignore\r\n     */\r\n    setDisabledState?(isDisabled: boolean): void;\r\n    private setDisabledStateGlobe;\r\n    /**\r\n     * 输入：某个数据项\r\n     * 输出：当有valueKey,返回值基于valueKey；当没有valueKey时，返回输入值\r\n     */\r\n    protected getValue(item: any): any;\r\n}\r\n"]}