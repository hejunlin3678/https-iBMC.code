import { ElementRef, EventEmitter, Renderer2 } from '@angular/core';
import { TiAccordionComponent } from './TiAccordionComponent';
import { TiBaseComponent } from '../base/TiBaseModule';
/**
 * 定义手风琴组件单个折叠面板，该组件包含在ti-accordion标签中
 * <example-url>../tiny3demo/#/accordion/acc-all</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class TiAccordionItemComponent extends TiBaseComponent {
    private accordion;
    /**
     * 单个折叠面板项是否灰化
     */
    disabled: boolean;
    /**
     * 设置用户点击某一折叠面板的head时是否自动实现内容体展示状态切换
     *
     * 头部局部点击可切换场景，需要通过设置该变量实现
     */
    clickToggle: boolean;
    /**
     * 某一折叠面板的头部点击回调
     */
    readonly headClick: EventEmitter<Event>;
    /**
     * @ignore
     * 头部class,需要显示声明，否则ngClass会报错
     */
    headClass: string;
    /**
     * @ignore
     * body class,需要显示声明，否则ngClass会报错
     */
    bodyClass: string;
    /**
     * @ignore
     * 依赖注入tiAccordion（后续使用其方法）
     */
    constructor(accordion: TiAccordionComponent, hostRef: ElementRef, renderer: Renderer2);
    private isOpen;
    /**
     * 单个折叠面板是否处于展开状态，用于初始化设置，默认值为false
     *
     */
    get open(): boolean;
    /**
     * @ignore
     */
    set open(value: boolean);
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * @ignore
     * item头部点击事件逻辑处理
     */
    toggleOpen($event: Event): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiAccordionItemComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TiAccordionItemComponent, "ti-accordion-item", never, { "disabled": "disabled"; "clickToggle": "clickToggle"; "open": "open"; }, { "headClick": "headClick"; }, never, ["ti-accordion-head", "*"], false>;
}

//# sourceMappingURL=TiAccordionItemComponent.d.ts.map