import { ElementRef, EventEmitter, QueryList, SimpleChanges, TemplateRef } from '@angular/core';
import { TiFormComponent } from '../base/TiBaseModule';
import { TiDropComponent } from '../drop/TiDropModule';
import { TiMenuListComponent } from './TiMenuListComponent';
import { TiPositionType } from '../../utils/Position';
/**
 * MenuItem是item项的数据接口
 */
import * as ɵngcc0 from '@angular/core';
export interface TiMenuItem {
    /**
     * 设置当前菜单项文本内容;
     */
    label?: string;
    /**
     * 设置当前菜单项tip提示内容
     */
    tip?: string;
    /**
     * 设置当前菜单项tip提示位置，默认值为：right；
     */
    tipPosition?: TiPositionType;
    /**
     * 设置当前菜单项是否置灰；
     */
    disabled?: boolean;
    /**
     * 设置当前菜单项的子菜单项，该数组的每个元素都是一个对象，对应子菜单项的一项，
     */
    children?: Array<TiMenuItem>;
    /**
     * 设置下拉面板不同组之间增加分割线，实现分组的效果。其属性也是title、tip、disable、click和childrens。注意：menu组件最多支持3级菜单。 查看示例
     */
    groupId?: string;
    /**
     * 允许有多余的属性字段
     */
    [propName: string]: any;
}
/**
 * Menu菜单组件
 *
 * 提供了一种方便的生成菜单下拉列表的方式，提供分组、自定义内容等功能。
 *
 * <example-url>../tiny3demo/#/menu/menu-all</example-url>
 */
export declare class TiMenuComponent extends TiFormComponent {
    /**
     * 下拉菜单面板与按钮对齐方式。
     */
    panelAlign: 'left' | 'right';
    /**
     * 下拉面板内容
     */
    items: Array<TiMenuItem>;
    /**
     * 下拉面板最大宽度，超过时换行，对所有子菜单都生效。
     */
    panelMaxWidth: string;
    /**
     * 下拉面板最大高度，超过时出现竖向滚动条，对所有子菜单都生效。
     */
    panelMaxHeight: string;
    /**
     * 要显示文字的键值
     */
    labelKey: string;
    /**
     * @ignore
     */
    mytoggleRef: ElementRef;
    /**
     * @ignore
     */
    dropComs: QueryList<TiDropComponent>;
    /**
     * @ignore
     */
    listComs: QueryList<TiMenuListComponent>;
    /**
     * @ignore
     */
    firstTemplate: TemplateRef<any>;
    itemTemplate: TemplateRef<any>;
    tipTemplate: TemplateRef<any>;
    /**
     * 选中菜单项事件
     */
    readonly select: EventEmitter<TiMenuItem>;
    /**
     * 打开面板之前，通知事件。完全交给业务用户处理。
     */
    readonly beforeOpen: EventEmitter<TiMenuComponent>;
    /**
     * @ignore
     * itemsArr[0]存放根面板内容，itemArr[1]存放次级面板内容，itemArr[2]存放次次级面板内容
     */
    itemsArr: Array<Array<TiMenuItem>>;
    /**
     * @ignore
     *  与开关距离
     */
    dominatorSpace: string;
    /**
     *  为true时为buttonselect组件
     */
    hasBorder: boolean;
    /**
     * menulist最大高度
     */
    menulistMaxHeight: number;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * 兼容旧版：
     * 10.0.3 版本之前只能内嵌一个模板，无命名。
     * 新版可以内嵌两个模板，示例书写要求都命名（#item，#tip）。
     * 但需要兼容旧版无命名测试用例。
     */
    ngAfterContentInit(): void;
    /**
     * 打开面板
     */
    open(): void;
    /**
     * 关闭面板
     */
    close(): void;
    /**
     * 切换面板状态：打开/关闭
     */
    toggle(): void;
    /**
     * @ignore
     */
    onKeydown(event: KeyboardEvent): void;
    private onKeydownLastHoverList;
    /**
     * @ignore
     */
    onMousedown(event: MouseEvent): void;
    /**
     * @ignore
     */
    onSelect(panelIndex: number): void;
    /**
     * @ignore
     */
    onBlur(): void;
    /**
     * @ignore
     */
    onHover(item: any, panelIndex: number): void;
    /**
     * @ignore
     */
    onMouseoutDrop(event: MouseEvent, panelIndex: number): void;
    initListMaxHeight(): void;
    restyleListMaxHeight(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiMenuComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TiMenuComponent, "ti-menu", never, { "panelAlign": "panelAlign"; "panelMaxWidth": "panelMaxWidth"; "panelMaxHeight": "panelMaxHeight"; "labelKey": "labelKey"; "items": "items"; }, { "select": "select"; "beforeOpen": "beforeOpen"; }, ["itemTemplate", "firstTemplate", "tipTemplate"], ["*"], false>;
}

//# sourceMappingURL=TiMenuComponent.d.ts.map