import { SimpleChanges } from '@angular/core';
import { TiDateBaseComponent, TiDatetimeFormat, TiDateValue, TimeOptions } from '../datebase/TiDateBaseModule';
/**
 * DatetimeRange日期时间范围组件
 *
 * Datetime组件提供了一种方便的显示和设置日期时间范围的方式。
 *
 * <example-url>../tiny3demo/#/datetimerange/datetimerange-all</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class TiDatetimeRangeComponent extends TiDateBaseComponent {
    /**
     * @ignore
     * 保存model值
     */
    oldModel: TiDateValue;
    /**
     * @ignore
     * 对应Time组件的接口属性
     */
    beginTime: TimeOptions;
    /**
     * @ignore
     * 对应Time组件的接口属性
     */
    endTime: TimeOptions;
    /**
     * @ignore
     */
    beginTimeDisabled: boolean;
    /**
     * @ignore
     */
    endTimeDisabled: boolean;
    /**
     * @ignore
     * 时间日期的format
     */
    dominatorFormat: string;
    /**
     * @ignore
     * 日期显示格式: Datetime组件的format为DatetimeFormat类型
     */
    format: TiDatetimeFormat;
    /**
     * @ignore
     * 标记date/datetime的类型
     */
    isDatetime: boolean;
    /**
     * @ignore
     * 用于标记是不是range
     */
    isRange: boolean;
    /**
     * @ignore
     */
    oldBegintimeValue: any;
    /**
     * @ignore
     */
    oldEndtimeValue: any;
    /**
     * @ignore
     * placeholder提示文本
     */
    placeholder: string;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    /**
     * @ignore
     * 确认按钮事件处理
     */
    onOkClick(): void;
    /**
     * @ignore
     * model值的合法性判断
     */
    isValidValue(value: TiDateValue): boolean;
    /**
     * @ignore
     * 将value转换成format接口格式的字符串
     */
    formatValue(): void;
    /**
     * @ignore
     * 配置时间日期面板接口
     */
    setPickerDate(): void;
    private setDatePanelOptions;
    private validTime;
    /**
     * @ignore
     *  时间框失焦事件
     */
    timeBlur(pos: string, val: string): void;
    /**
     * @ignore
     * 时间框enter事件
     */
    timeKeydown(pos: string, val: string, event: KeyboardEvent): void;
    /**
     * @ignore
     */
    dateEditBlur(val: any, pos: string): void;
    /**
     * @ignore
     */
    onKeydownFn(event: KeyboardEvent, val: any, pos: string): void;
    private setTimeOptions;
    private setBeginTimeOptions;
    private setBeginTimeValue;
    /**
     * @ignore
     * time指令的起始面板的max接口设置
     */
    setBeginTimeMaxValue(): void;
    /**
     * @ignore
     * time指令的起始面板的min接口设置
     */
    setBeginTimeMinValue(): void;
    private setEndTimeOptions;
    private setEndTimeValue;
    /**
     * @ignore
     * time指令的结束面板的max接口设置
     */
    setEndTimeMaxValue(): void;
    /**
     * @ignore
     * time指令的结束面板的min接口设置
     */
    setEndTimeMinValue(): void;
    /**
     * @ignore
     * 设置确认按钮的状态
     */
    setOkBtnState(): void;
    private isValidRange;
    private isBeginSmallerThanEnd;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiDatetimeRangeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TiDatetimeRangeComponent, "ti-datetime-range", never, {}, {}, never, never, false>;
}

//# sourceMappingURL=TiDatetimeRangeComponent.d.ts.map