import { ElementRef, EventEmitter, NgZone, QueryList, Renderer2 } from '@angular/core';
import { TiFormComponent } from '../base/TiBaseModule';
import { TiDateDominatorComponent } from '../datedominator/TiDateDominatorModule';
import { TiDropComponent } from '../drop/TiDropModule';
import { TiDateEditComponent } from '../dateedit/TiDateEditModule';
import { TiButtonComponent } from '../button/TiButtonModule';
import { TiTextComponent } from '../text/TiTextModule';
/**
 * 时间日期范围类组件value接口
 */
export interface TiDateValue {
    /**
     * 起始时间： Date类型，在最大值最小值范围内
     */
    begin?: Date;
    /**
     * 结束时间： Date类型，在最大值最小值范围内
     */
    end?: Date;
}
export interface TiDateCustomizeOptions {
    /**
     * 自定义时间文本
     */
    label: string;
    /**
     * 自定义时间值
     */
    value: TiDateValue;
}
/**
 * 时间日期格式化配置
 */
export interface TiDatetimeFormat {
    /**
     * 日期格式化配置，默认配置'yyyy/MM/dd'
     *
     * 1. 年可以设置为：'yyyy' —— 四位数字表示年：例如：'2016'；
     *
     * 2. 月可以设置为：'MMMM'——月份英文全称(January-December)；
     * 'MMM'——月份英文简称 (Jan-Dec)；
     * 'MM'——两位数字表示月份 (01-12)；
     * 'M'——开头不补零方式表示月份 (1-12).
     *
     * 3. 日可以设置为：
     * dd——两位数字表示日期(01-31);
     * d——开头不补零数字表示日期 (1-31).
     */
    date: string;
    /**
     * 时间格式化配置，默认配置'HH:mm:ss'
     *
     * 1.小时可以设置为：
     *
     * HH —— 24小时制,两位数字表示小时(00-23)
     *
     * H —— 24小时制，开头不补零数字表示小时(0-23)
     *
     * 2.分钟可以设置为：
     *
     * mm —— 两位数字表示分钟值（00-59）
     *
     * m —— 开头不补零数字表示分钟值（0-59）
     *
     * 3.秒可以设置为：
     *
     * ss —— 两位数字表示秒值(00-59)
     *
     * s —— 开头不补零数字表示秒值(0-59)
     *
     * 说明：开头补零是指当前时间是个位数字时，前边补零，始终保持两位数字
     */
    time: string;
}
/**
 * @ignore
 * dateRange以及datetimeRange组件适配datepanel的接口类型
 */
export interface TiPicker {
    value?: TiDateValue;
    type?: string;
    picker?: string;
    min?: Date;
    max?: Date;
    nowDateTime?: Date;
    format?: string | TiDatetimeFormat;
    select?(): void;
    selectTimeFn?(val: any): void;
}
/**
 * @ignore
 * 配置time组件的接口
 */
export interface TimeOptions {
    value?: string;
    min?: string;
    max?: string;
}
export declare class TiDateBaseComponent extends TiFormComponent {
    protected hostRef: ElementRef;
    protected render: Renderer2;
    private zone;
    private document;
    /**
     * @ignore
     * 下拉距离选择框0px
     */
    private static readonly DOMINATOR_SPACE;
    /**
     * 日期/日期时间下拉选择框距离浏览器上下边沿的距离为5px，开发者可在项目中整体配置
     */
    static BROWSER_SPACE: number;
    /**
     * 设置最小值
     */
    min: Date;
    /**
     * 设置最大值
     */
    max: Date;
    /**
     * 设置日期显示格式；详见测试用例
     *
     * date和dateRange组件中类型为string，默认配置为：'yyyy/MM/dd'；
     *
     * datetime和datatimerange组件中类型为TiDatetimeFormat，默认配置：{data: 'yyyy/MM/dd', time: 'HH:mm:ss'}
     *
     */
    format: string | TiDatetimeFormat;
    /**
     * 由用户自定义现在时间，如果不设置该属性值，则默认为当前系统时间
     */
    nowDateTime: Date;
    /**
     * 控制时间日期类组件是否展示清除日期图标（默认显示）
     */
    clearIcon: boolean;
    /**
     * 面板对齐方式
     */
    panelAlign: 'left' | 'right';
    /**
     * 配置自定义时间
     */
    customizeOptions: TiDateCustomizeOptions;
    /**
     * 自定义禁用日期
     */
    disabledDays: Array<Date>;
    /**
     * 开始值固定不可选
     */
    isBeginFixed: boolean;
    /**
     * 结束值固定不可选
     */
    isEndFixed: boolean;
    /**
     * 此接口只适用于dateRange组件，是否允许结束日期和开始日期为同一天
     */
    isAllowBeginEqualEnd: boolean;
    /**
     * （date组件无该接口）点击时间日期面板上的确认按钮触发的事件
     */
    readonly okClick: EventEmitter<any>;
    /**
     * 点击日期面板上的日期触发的事件
     */
    readonly dayClick: EventEmitter<any>;
    /**
     * @ignore
     * dominator组件
     */
    dominatorCom: TiDateDominatorComponent;
    /**
     * @ignore
     * drop下拉组件
     */
    dropCom: TiDropComponent;
    /**
     * @ignore
     *
     * 配合tab快捷键操作的过度Dom
     */
    inputRef: ElementRef;
    /**
     * @ignore
     * dateEdit组件
     */
    dateEditComs: QueryList<TiDateEditComponent>;
    /**
     * @ignore
     * 时间编辑框
     */
    textComs: QueryList<TiTextComponent>;
    /**
     * @ignore
     * button组件
     */
    buttonComs: QueryList<TiButtonComponent>;
    private readonly localeWords;
    /**
     * @ignore
     * 保存旧日期显示格式
     */
    oldFormat: string | TiDatetimeFormat;
    /**
     * @ignore
     * 保存旧开始日期
     */
    oldBeginValue: Date;
    /**
     * @ignore
     * 保存旧结束日期
     */
    oldEndValue: Date;
    /**
     * @ignore
     * 保存旧model值：date类型或者datevalue类型
     */
    oldModel: Date | TiDateValue;
    /**
     * @ignore
     * 判断当前value值是不是合法的，不合法则确认按钮灰化
     */
    inValidValue: boolean;
    /**
     * @ignore
     * 标记点击叉号
     */
    isClearClick: boolean;
    /**
     * @ignore
     * 标志是日期还是时间日期
     */
    isDatetime: boolean;
    /**
     * @ignore
     * 标志是时间日期还是时间日期段
     */
    isRange: boolean;
    /**
     * @ignore
     * 标志是时间选择面板还是日期选择面板
     */
    selectTime: boolean;
    /**
     * @ignore
     * 对应每个时间日期组件的最大最小值的配置
     */
    config: {
        min: Date;
        max: Date;
    };
    /**
     * @ignore
     * model默认值
     */
    defaultValue: TiDateValue;
    /**
     * @ignore
     * 模板初始化
     */
    datePanel: TiPicker;
    /**
     * @ignore
     * date/datetime 面板宽度
     */
    datePanelWidth: string;
    /**
     * @ignore
     * daterange/datetimerange 面板宽度
     */
    daterangePanelWidth: string;
    /**
     * @ignore
     * 日期显示字符串
     */
    inputValue: string;
    private documentKeydownListener;
    /**
     * @ignore
     * 模板中使用
     */
    browserSpace: string;
    /**
     * @ignore 面板与dominator的距离
     */
    dominatorSpace: string;
    /**
     * @ignore
     * 记录当前面板内部编辑区域焦点位置
     */
    focusedPosition: string;
    /**
     * @ignore
     * 时间编辑框placehoder
     */
    timeplaceholder: string;
    /**
     * @ignore
     * 底部选择时间按钮禁用标志
     */
    timeEditDisabled: boolean;
    /**
     * @ignore
     * 标志是否存在左侧自定义时间区域
     */
    hasCustomizeTime: boolean;
    /**
     * @ignore
     * 可聚焦元素集合
     */
    focusElementsArr: Array<any>;
    constructor(hostRef: ElementRef, render: Renderer2, zone: NgZone, document: any);
    private static getFocusElements;
    /**
     * 组件快捷键处理tab键 enter键
     */
    onKeydown(event: KeyboardEvent): void;
    /**
     * @ignore
     * writeValue区分是不是range组件：
     */
    writeValue(value: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    protected keydownHandlerFn: (event: KeyboardEvent) => void;
    /**
     * 实现按tab键时，focus在下拉面板中循环
     */
    private tabKeydown;
    /**
     * @ignore
     * 点击面板展开收起函数
     */
    onShowClick(): void;
    /**
     * @ignore
     * 左侧自定义时间文本点击事件
     */
    customizeTimeClickFn(val: TiDateValue): void;
    /**
     * @ignore
     * 点击选择时间，根据初始传入值设定下拉选择项
     */
    selectTimeFn(): void;
    /**
     * @ignore
     */
    selectDateFn(): void;
    /**
     * @ignore
     */
    dateEditClick(val: string): void;
    /**
     * @ignore
     */
    dateEditFocus(val: string): void;
    /**
     * @ignore
     * 时间框聚焦
     */
    timeFocus(val: string): void;
    /**
     * @ignore
     */
    setTimeFn(obj: any, beginTime: TimeOptions, endTime?: TimeOptions): void;
    /**
     * @ignore
     * 点击删除按钮
     */
    onIconClearClick(event: MouseEvent): void;
    /**
     * @ignore
     * 隐藏drop, 适用于drop中用户点击引起drop隐藏，阻止了整体失焦。
     */
    hideDrop(): void;
    /**
     * @ignore
     * 隐藏面板
     */
    hidePanel(): void;
    /**
     * @ignore
     * enter键的功能：如果面板展开不处理，面板收起则展开，设置datePanel指令的接口值
     */
    responseEnter(): void;
    /**
     * @ignore
     *
     * 设置按钮禁用场景下 过度input的样式（适配tab快捷键场景）
     */
    setInputStyle(val: boolean): void;
    /**
     * @ignore
     * 判断是不是合法的DatetimeFormat: format为对象 {date:'', time: ''}
     */
    isValidDatetimeFormat(): boolean;
    /**
     * @ignore
     * 最大值最小值校验:和date组件不同，此处不需要做最大最小时分秒处理
     */
    validateMinAndMax(dateCofig: {
        min: Date;
        max: Date;
    }, isDatetime: boolean): void;
    /**
     * @ignore
     * 校验format接口
     */
    validateFormat(isDatetime: boolean): void;
    /**
     * @ignore
     * 校验format: string类型，
     */
    validateDateFormat(): void;
    /**
     * @ignore
     * 校验format: 对象类型{date:'', time:''}
     */
    validateDatetimeFormat(): void;
    /**
     * @ignore
     * 判断range类型的model是否变化：比较起始时间和结束时间
     */
    rangeValueIsEqual(newValue: TiDateValue, oldValue: TiDateValue, isDatetime: boolean): boolean;
    /**
     * @ignore
     * model值动态变更：支持仅修改begin或end值
     */
    setModel(isDatetime: boolean): void;
    /**
     * @ignore
     * datetime与datetimeRange组件format动态变更
     */
    setFormat(): void;
    private show;
    /**
     * @ignore
     * 决定上下位置的函数
     */
    determinPositionFn: (layout: any) => string;
    /**
     * @ignore
     * 0.判断是不是合法的model
     */
    protected isValidValue(value: any): boolean;
    /**
     * @ignore
     * 1.配置时间日期面板接口
     */
    protected setPickerDate(): void;
    /**
     * @ignore
     * 2.根据format格式model值
     */
    protected formatValue(): void;
    /**
     * @ignore
     * 3.根据当前值设置确认按钮的状态
     */
    protected setOkBtnState(): void;
    /**
     * @ignore
     * 起始面板日期有变化时，要重新设置其time组件对应最大值 datetimeRange组件中实现此方法
     */
    protected setBeginTimeMaxValue(): void;
    /**
     * @ignore
     * 起始面板日期有变化时，要重新设置其time组件对应最小值 datetimeRange组件中实现此方法
     */
    protected setBeginTimeMinValue(): void;
    /**
     * @ignore
     * 结束日期有变化时，要重新设置其time组件对应最大值 datetimeRange组件中实现此方法
     */
    protected setEndTimeMaxValue(): void;
    /**
     * @ignore
     * 结束日期有变化时，要重新设置其time组件对应最小值 datetimeRange组件中实现此方法
     */
    protected setEndTimeMinValue(): void;
}
