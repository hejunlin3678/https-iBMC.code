{"version":3,"file":"TiDateBaseComponent.d.ts","sources":["TiDateBaseComponent.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, NgZone, QueryList, Renderer2 } from '@angular/core';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\nimport { TiDateDominatorComponent } from '../datedominator/TiDateDominatorModule';\r\nimport { TiDropComponent } from '../drop/TiDropModule';\r\nimport { TiDateEditComponent } from '../dateedit/TiDateEditModule';\r\nimport { TiButtonComponent } from '../button/TiButtonModule';\r\nimport { TiTextComponent } from '../text/TiTextModule';\r\n/**\r\n * 时间日期范围类组件value接口\r\n */\r\nexport interface TiDateValue {\r\n    /**\r\n     * 起始时间： Date类型，在最大值最小值范围内\r\n     */\r\n    begin?: Date;\r\n    /**\r\n     * 结束时间： Date类型，在最大值最小值范围内\r\n     */\r\n    end?: Date;\r\n}\r\nexport interface TiDateCustomizeOptions {\r\n    /**\r\n     * 自定义时间文本\r\n     */\r\n    label: string;\r\n    /**\r\n     * 自定义时间值\r\n     */\r\n    value: TiDateValue;\r\n}\r\n/**\r\n * 时间日期格式化配置\r\n */\r\nexport interface TiDatetimeFormat {\r\n    /**\r\n     * 日期格式化配置，默认配置'yyyy/MM/dd'\r\n     *\r\n     * 1. 年可以设置为：'yyyy' —— 四位数字表示年：例如：'2016'；\r\n     *\r\n     * 2. 月可以设置为：'MMMM'——月份英文全称(January-December)；\r\n     * 'MMM'——月份英文简称 (Jan-Dec)；\r\n     * 'MM'——两位数字表示月份 (01-12)；\r\n     * 'M'——开头不补零方式表示月份 (1-12).\r\n     *\r\n     * 3. 日可以设置为：\r\n     * dd——两位数字表示日期(01-31);\r\n     * d——开头不补零数字表示日期 (1-31).\r\n     */\r\n    date: string;\r\n    /**\r\n     * 时间格式化配置，默认配置'HH:mm:ss'\r\n     *\r\n     * 1.小时可以设置为：\r\n     *\r\n     * HH —— 24小时制,两位数字表示小时(00-23)\r\n     *\r\n     * H —— 24小时制，开头不补零数字表示小时(0-23)\r\n     *\r\n     * 2.分钟可以设置为：\r\n     *\r\n     * mm —— 两位数字表示分钟值（00-59）\r\n     *\r\n     * m —— 开头不补零数字表示分钟值（0-59）\r\n     *\r\n     * 3.秒可以设置为：\r\n     *\r\n     * ss —— 两位数字表示秒值(00-59)\r\n     *\r\n     * s —— 开头不补零数字表示秒值(0-59)\r\n     *\r\n     * 说明：开头补零是指当前时间是个位数字时，前边补零，始终保持两位数字\r\n     */\r\n    time: string;\r\n}\r\n/**\r\n * @ignore\r\n * dateRange以及datetimeRange组件适配datepanel的接口类型\r\n */\r\nexport interface TiPicker {\r\n    value?: TiDateValue;\r\n    type?: string;\r\n    picker?: string;\r\n    min?: Date;\r\n    max?: Date;\r\n    nowDateTime?: Date;\r\n    format?: string | TiDatetimeFormat;\r\n    select?(): void;\r\n    selectTimeFn?(val: any): void;\r\n}\r\n/**\r\n * @ignore\r\n * 配置time组件的接口\r\n */\r\nexport interface TimeOptions {\r\n    value?: string;\r\n    min?: string;\r\n    max?: string;\r\n}\r\nexport declare class TiDateBaseComponent extends TiFormComponent {\r\n    protected hostRef: ElementRef;\r\n    protected render: Renderer2;\r\n    private zone;\r\n    private document;\r\n    /**\r\n     * @ignore\r\n     * 下拉距离选择框0px\r\n     */\r\n    private static readonly DOMINATOR_SPACE;\r\n    /**\r\n     * 日期/日期时间下拉选择框距离浏览器上下边沿的距离为5px，开发者可在项目中整体配置\r\n     */\r\n    static BROWSER_SPACE: number;\r\n    /**\r\n     * 设置最小值\r\n     */\r\n    min: Date;\r\n    /**\r\n     * 设置最大值\r\n     */\r\n    max: Date;\r\n    /**\r\n     * 设置日期显示格式；详见测试用例\r\n     *\r\n     * date和dateRange组件中类型为string，默认配置为：'yyyy/MM/dd'；\r\n     *\r\n     * datetime和datatimerange组件中类型为TiDatetimeFormat，默认配置：{data: 'yyyy/MM/dd', time: 'HH:mm:ss'}\r\n     *\r\n     */\r\n    format: string | TiDatetimeFormat;\r\n    /**\r\n     * 由用户自定义现在时间，如果不设置该属性值，则默认为当前系统时间\r\n     */\r\n    nowDateTime: Date;\r\n    /**\r\n     * 控制时间日期类组件是否展示清除日期图标（默认显示）\r\n     */\r\n    clearIcon: boolean;\r\n    /**\r\n     * 面板对齐方式\r\n     */\r\n    panelAlign: 'left' | 'right';\r\n    /**\r\n     * 配置自定义时间\r\n     */\r\n    customizeOptions: TiDateCustomizeOptions;\r\n    /**\r\n     * 自定义禁用日期\r\n     */\r\n    disabledDays: Array<Date>;\r\n    /**\r\n     * 开始值固定不可选\r\n     */\r\n    isBeginFixed: boolean;\r\n    /**\r\n     * 结束值固定不可选\r\n     */\r\n    isEndFixed: boolean;\r\n    /**\r\n     * 此接口只适用于dateRange组件，是否允许结束日期和开始日期为同一天\r\n     */\r\n    isAllowBeginEqualEnd: boolean;\r\n    /**\r\n     * （date组件无该接口）点击时间日期面板上的确认按钮触发的事件\r\n     */\r\n    readonly okClick: EventEmitter<any>;\r\n    /**\r\n     * 点击日期面板上的日期触发的事件\r\n     */\r\n    readonly dayClick: EventEmitter<any>;\r\n    /**\r\n     * @ignore\r\n     * dominator组件\r\n     */\r\n    dominatorCom: TiDateDominatorComponent;\r\n    /**\r\n     * @ignore\r\n     * drop下拉组件\r\n     */\r\n    dropCom: TiDropComponent;\r\n    /**\r\n     * @ignore\r\n     *\r\n     * 配合tab快捷键操作的过度Dom\r\n     */\r\n    inputRef: ElementRef;\r\n    /**\r\n     * @ignore\r\n     * dateEdit组件\r\n     */\r\n    dateEditComs: QueryList<TiDateEditComponent>;\r\n    /**\r\n     * @ignore\r\n     * 时间编辑框\r\n     */\r\n    textComs: QueryList<TiTextComponent>;\r\n    /**\r\n     * @ignore\r\n     * button组件\r\n     */\r\n    buttonComs: QueryList<TiButtonComponent>;\r\n    private readonly localeWords;\r\n    /**\r\n     * @ignore\r\n     * 保存旧日期显示格式\r\n     */\r\n    oldFormat: string | TiDatetimeFormat;\r\n    /**\r\n     * @ignore\r\n     * 保存旧开始日期\r\n     */\r\n    oldBeginValue: Date;\r\n    /**\r\n     * @ignore\r\n     * 保存旧结束日期\r\n     */\r\n    oldEndValue: Date;\r\n    /**\r\n     * @ignore\r\n     * 保存旧model值：date类型或者datevalue类型\r\n     */\r\n    oldModel: Date | TiDateValue;\r\n    /**\r\n     * @ignore\r\n     * 判断当前value值是不是合法的，不合法则确认按钮灰化\r\n     */\r\n    inValidValue: boolean;\r\n    /**\r\n     * @ignore\r\n     * 标记点击叉号\r\n     */\r\n    isClearClick: boolean;\r\n    /**\r\n     * @ignore\r\n     * 标志是日期还是时间日期\r\n     */\r\n    isDatetime: boolean;\r\n    /**\r\n     * @ignore\r\n     * 标志是时间日期还是时间日期段\r\n     */\r\n    isRange: boolean;\r\n    /**\r\n     * @ignore\r\n     * 标志是时间选择面板还是日期选择面板\r\n     */\r\n    selectTime: boolean;\r\n    /**\r\n     * @ignore\r\n     * 对应每个时间日期组件的最大最小值的配置\r\n     */\r\n    config: {\r\n        min: Date;\r\n        max: Date;\r\n    };\r\n    /**\r\n     * @ignore\r\n     * model默认值\r\n     */\r\n    defaultValue: TiDateValue;\r\n    /**\r\n     * @ignore\r\n     * 模板初始化\r\n     */\r\n    datePanel: TiPicker;\r\n    /**\r\n     * @ignore\r\n     * date/datetime 面板宽度\r\n     */\r\n    datePanelWidth: string;\r\n    /**\r\n     * @ignore\r\n     * daterange/datetimerange 面板宽度\r\n     */\r\n    daterangePanelWidth: string;\r\n    /**\r\n     * @ignore\r\n     * 日期显示字符串\r\n     */\r\n    inputValue: string;\r\n    private documentKeydownListener;\r\n    /**\r\n     * @ignore\r\n     * 模板中使用\r\n     */\r\n    browserSpace: string;\r\n    /**\r\n     * @ignore 面板与dominator的距离\r\n     */\r\n    dominatorSpace: string;\r\n    /**\r\n     * @ignore\r\n     * 记录当前面板内部编辑区域焦点位置\r\n     */\r\n    focusedPosition: string;\r\n    /**\r\n     * @ignore\r\n     * 时间编辑框placehoder\r\n     */\r\n    timeplaceholder: string;\r\n    /**\r\n     * @ignore\r\n     * 底部选择时间按钮禁用标志\r\n     */\r\n    timeEditDisabled: boolean;\r\n    /**\r\n     * @ignore\r\n     * 标志是否存在左侧自定义时间区域\r\n     */\r\n    hasCustomizeTime: boolean;\r\n    /**\r\n     * @ignore\r\n     * 可聚焦元素集合\r\n     */\r\n    focusElementsArr: Array<any>;\r\n    constructor(hostRef: ElementRef, render: Renderer2, zone: NgZone, document: any);\r\n    private static getFocusElements;\r\n    /**\r\n     * 组件快捷键处理tab键 enter键\r\n     */\r\n    onKeydown(event: KeyboardEvent): void;\r\n    /**\r\n     * @ignore\r\n     * writeValue区分是不是range组件：\r\n     */\r\n    writeValue(value: any): void;\r\n    ngOnInit(): void;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    protected keydownHandlerFn: (event: KeyboardEvent) => void;\r\n    /**\r\n     * 实现按tab键时，focus在下拉面板中循环\r\n     */\r\n    private tabKeydown;\r\n    /**\r\n     * @ignore\r\n     * 点击面板展开收起函数\r\n     */\r\n    onShowClick(): void;\r\n    /**\r\n     * @ignore\r\n     * 左侧自定义时间文本点击事件\r\n     */\r\n    customizeTimeClickFn(val: TiDateValue): void;\r\n    /**\r\n     * @ignore\r\n     * 点击选择时间，根据初始传入值设定下拉选择项\r\n     */\r\n    selectTimeFn(): void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    selectDateFn(): void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    dateEditClick(val: string): void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    dateEditFocus(val: string): void;\r\n    /**\r\n     * @ignore\r\n     * 时间框聚焦\r\n     */\r\n    timeFocus(val: string): void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    setTimeFn(obj: any, beginTime: TimeOptions, endTime?: TimeOptions): void;\r\n    /**\r\n     * @ignore\r\n     * 点击删除按钮\r\n     */\r\n    onIconClearClick(event: MouseEvent): void;\r\n    /**\r\n     * @ignore\r\n     * 隐藏drop, 适用于drop中用户点击引起drop隐藏，阻止了整体失焦。\r\n     */\r\n    hideDrop(): void;\r\n    /**\r\n     * @ignore\r\n     * 隐藏面板\r\n     */\r\n    hidePanel(): void;\r\n    /**\r\n     * @ignore\r\n     * enter键的功能：如果面板展开不处理，面板收起则展开，设置datePanel指令的接口值\r\n     */\r\n    responseEnter(): void;\r\n    /**\r\n     * @ignore\r\n     *\r\n     * 设置按钮禁用场景下 过度input的样式（适配tab快捷键场景）\r\n     */\r\n    setInputStyle(val: boolean): void;\r\n    /**\r\n     * @ignore\r\n     * 判断是不是合法的DatetimeFormat: format为对象 {date:'', time: ''}\r\n     */\r\n    isValidDatetimeFormat(): boolean;\r\n    /**\r\n     * @ignore\r\n     * 最大值最小值校验:和date组件不同，此处不需要做最大最小时分秒处理\r\n     */\r\n    validateMinAndMax(dateCofig: {\r\n        min: Date;\r\n        max: Date;\r\n    }, isDatetime: boolean): void;\r\n    /**\r\n     * @ignore\r\n     * 校验format接口\r\n     */\r\n    validateFormat(isDatetime: boolean): void;\r\n    /**\r\n     * @ignore\r\n     * 校验format: string类型，\r\n     */\r\n    validateDateFormat(): void;\r\n    /**\r\n     * @ignore\r\n     * 校验format: 对象类型{date:'', time:''}\r\n     */\r\n    validateDatetimeFormat(): void;\r\n    /**\r\n     * @ignore\r\n     * 判断range类型的model是否变化：比较起始时间和结束时间\r\n     */\r\n    rangeValueIsEqual(newValue: TiDateValue, oldValue: TiDateValue, isDatetime: boolean): boolean;\r\n    /**\r\n     * @ignore\r\n     * model值动态变更：支持仅修改begin或end值\r\n     */\r\n    setModel(isDatetime: boolean): void;\r\n    /**\r\n     * @ignore\r\n     * datetime与datetimeRange组件format动态变更\r\n     */\r\n    setFormat(): void;\r\n    private show;\r\n    /**\r\n     * @ignore\r\n     * 决定上下位置的函数\r\n     */\r\n    determinPositionFn: (layout: any) => string;\r\n    /**\r\n     * @ignore\r\n     * 0.判断是不是合法的model\r\n     */\r\n    protected isValidValue(value: any): boolean;\r\n    /**\r\n     * @ignore\r\n     * 1.配置时间日期面板接口\r\n     */\r\n    protected setPickerDate(): void;\r\n    /**\r\n     * @ignore\r\n     * 2.根据format格式model值\r\n     */\r\n    protected formatValue(): void;\r\n    /**\r\n     * @ignore\r\n     * 3.根据当前值设置确认按钮的状态\r\n     */\r\n    protected setOkBtnState(): void;\r\n    /**\r\n     * @ignore\r\n     * 起始面板日期有变化时，要重新设置其time组件对应最大值 datetimeRange组件中实现此方法\r\n     */\r\n    protected setBeginTimeMaxValue(): void;\r\n    /**\r\n     * @ignore\r\n     * 起始面板日期有变化时，要重新设置其time组件对应最小值 datetimeRange组件中实现此方法\r\n     */\r\n    protected setBeginTimeMinValue(): void;\r\n    /**\r\n     * @ignore\r\n     * 结束日期有变化时，要重新设置其time组件对应最大值 datetimeRange组件中实现此方法\r\n     */\r\n    protected setEndTimeMaxValue(): void;\r\n    /**\r\n     * @ignore\r\n     * 结束日期有变化时，要重新设置其time组件对应最小值 datetimeRange组件中实现此方法\r\n     */\r\n    protected setEndTimeMinValue(): void;\r\n}\r\n"]}