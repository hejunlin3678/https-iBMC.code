import { ElementRef, EventEmitter, Renderer2, SimpleChanges } from '@angular/core';
import { TiFormComponent } from '../base/TiBaseModule';
/**
 * 数字微调组件
 *
 * <example-url>../tiny3demo/#/spinner/spinner-all</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class TiSpinnerComponent extends TiFormComponent {
    protected hostRef: ElementRef;
    protected renderer2: Renderer2;
    /**
     * @ignore
     */
    method: any;
    /**
     * 数字小数位数格式，使用n+'小数保留位数'形式表示，例如：'n4'或'N4',代表保留4位小数。
     *
     * 自10.0.1版本起不设置时，小数点后默认最少保留0位，最多保留3位；10.0.0及之前版本默认保留3位。
     */
    format: string;
    /**
     * 最大值，JS中能表示的整数范围是53位的，如果超过了这个范围的整数，进行一些运算时会出现错误，因此最大值为2^53
     */
    max: number;
    /**
     * 最小值，JS中能表示的整数范围是53位的，如果超过了这个范围的整数，进行一些运算时会出现错误，因此最小值为-2^53
     */
    min: number;
    /**
     * 微调器的步长
     */
    step: number;
    /**
     * 占位提示信息
     */
    placeholder: string;
    /**
     * @ignore
     *
     * 从10.0.1版本开始该接口不再开放。如果不想要组件根据最大最小值进行强制转换，那么不要设置最大最小值即可。
     *
     * 失去焦点是否支持根据最大最小值进行强制转换（默认值为true, 支持强转; 当用户配置为false时，不支持强制转换）
     */
    correctable: boolean;
    /**
     * 是否开启国际化。默认值为true,开启国际化功能; 当用户配置为false时，不支持国际化)
     */
    localeable: boolean;
    /**
     * 输入文本的最大长度， 默认值为20.
     */
    maxlength: number;
    /**
     * @ignore
     * 当数据发生改变时，触发change事件
     */
    readonly stepChange: EventEmitter<string>;
    private inputEle;
    private numberFormat;
    /**
     * @ignore
     */
    inputValue: number;
    constructor(hostRef: ElementRef, renderer2: Renderer2);
    ngOnInit(): void;
    private init;
    ngOnChanges(changes: SimpleChanges): void;
    private setChanges;
    /**
     * @ignore
     * model --> view
     */
    writeValue(value: any): void;
    /**
     * @ignore
     */
    blurFn(): void;
    /**
     * @ignore
     * description: Event emitter for producting the `ngModelChange` event after the view model updates.
     * ngModelChange 是ngModel指令的@Output.
     * 它在viewToModelUpdate函数中触发
     *
     */
    inputChange(value: number): void;
    /**
     * 键盘上下键操作
     * @ignore
     */
    keydownFn(event: any): void;
    /**
     * @ignore
     */
    stepNumberMousedown(e: any, method: string): void;
    private stepNumber;
    private getModelByMinMax;
    private formatValue;
    private accOperate;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiSpinnerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TiSpinnerComponent, "ti-spinner", never, { "max": "max"; "min": "min"; "step": "step"; "placeholder": "placeholder"; "correctable": "correctable"; "localeable": "localeable"; "maxlength": "maxlength"; "format": "format"; }, { "stepChange": "stepChange"; }, never, never, false>;
}

//# sourceMappingURL=TiSpinnerComponent.d.ts.map