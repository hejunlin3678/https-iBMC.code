{"version":3,"file":"TiSpinnerComponent.d.ts","sources":["TiSpinnerComponent.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, Renderer2, SimpleChanges } from '@angular/core';\r\nimport { TiFormComponent } from '../base/TiBaseModule';\r\n/**\r\n * 数字微调组件\r\n *\r\n * <example-url>../tiny3demo/#/spinner/spinner-all</example-url>\r\n */\r\nexport declare class TiSpinnerComponent extends TiFormComponent {\r\n    protected hostRef: ElementRef;\r\n    protected renderer2: Renderer2;\r\n    /**\r\n     * @ignore\r\n     */\r\n    method: any;\r\n    /**\r\n     * 数字小数位数格式，使用n+'小数保留位数'形式表示，例如：'n4'或'N4',代表保留4位小数。\r\n     *\r\n     * 自10.0.1版本起不设置时，小数点后默认最少保留0位，最多保留3位；10.0.0及之前版本默认保留3位。\r\n     */\r\n    format: string;\r\n    /**\r\n     * 最大值，JS中能表示的整数范围是53位的，如果超过了这个范围的整数，进行一些运算时会出现错误，因此最大值为2^53\r\n     */\r\n    max: number;\r\n    /**\r\n     * 最小值，JS中能表示的整数范围是53位的，如果超过了这个范围的整数，进行一些运算时会出现错误，因此最小值为-2^53\r\n     */\r\n    min: number;\r\n    /**\r\n     * 微调器的步长\r\n     */\r\n    step: number;\r\n    /**\r\n     * 占位提示信息\r\n     */\r\n    placeholder: string;\r\n    /**\r\n     * @ignore\r\n     *\r\n     * 从10.0.1版本开始该接口不再开放。如果不想要组件根据最大最小值进行强制转换，那么不要设置最大最小值即可。\r\n     *\r\n     * 失去焦点是否支持根据最大最小值进行强制转换（默认值为true, 支持强转; 当用户配置为false时，不支持强制转换）\r\n     */\r\n    correctable: boolean;\r\n    /**\r\n     * 是否开启国际化。默认值为true,开启国际化功能; 当用户配置为false时，不支持国际化)\r\n     */\r\n    localeable: boolean;\r\n    /**\r\n     * 输入文本的最大长度， 默认值为20.\r\n     */\r\n    maxlength: number;\r\n    /**\r\n     * @ignore\r\n     * 当数据发生改变时，触发change事件\r\n     */\r\n    readonly stepChange: EventEmitter<string>;\r\n    private inputEle;\r\n    private numberFormat;\r\n    /**\r\n     * @ignore\r\n     */\r\n    inputValue: number;\r\n    constructor(hostRef: ElementRef, renderer2: Renderer2);\r\n    ngOnInit(): void;\r\n    private init;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    private setChanges;\r\n    /**\r\n     * @ignore\r\n     * model --> view\r\n     */\r\n    writeValue(value: any): void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    blurFn(): void;\r\n    /**\r\n     * @ignore\r\n     * description: Event emitter for producting the `ngModelChange` event after the view model updates.\r\n     * ngModelChange 是ngModel指令的@Output.\r\n     * 它在viewToModelUpdate函数中触发\r\n     *\r\n     */\r\n    inputChange(value: number): void;\r\n    /**\r\n     * 键盘上下键操作\r\n     * @ignore\r\n     */\r\n    keydownFn(event: any): void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    stepNumberMousedown(e: any, method: string): void;\r\n    private stepNumber;\r\n    private getModelByMinMax;\r\n    private formatValue;\r\n    private accOperate;\r\n}\r\n"]}