import { ElementRef, EventEmitter, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';
import { TiFormComponent } from '../base/TiBaseModule';
import { TiTableComponent } from '../table/TiTableModule';
import { TiSelectComponent } from '../select/TiSelectModule';
/**
 * 实现每页显示条数的相关配置的数据类型
 */
import * as ɵngcc0 from '@angular/core';
export interface TiPageSizeConfig {
    /**
     * 组件每页显示条数选项列表：下拉列表
     */
    options?: Array<number>;
    /**
     * 当前每页显示条数配置，注意: 该值应该属于options数组中的一个元素
     */
    size?: number;
    /**
     * 设置每页显示条数选项元素(页面上是一个select组件)的宽度
     */
    width?: string;
    /**
     * 设置是否在页面上隐藏每页显示条数选项元素。
     */
    hide?: boolean;
}
/**
 * 当分页更新时触发事件通知出去的参数
 *
 * 更新场景包括：1.当前页码改变，2.每页显示条数改变，3.总条数改变。
 */
export interface TiPaginationEvent {
    currentPage: number;
    size: number;
    totalNumber: number;
}
/**
 * @ignore
 * 页码的数据类型
 */
export interface TiPageItem {
    id: string;
    label: any;
}
/**
 * Pagination分页组件
 *
 * 分页组件一般情况下与表格组件配合使用，实现对表格数据的分页显示。
 *
 * <example-url>../tiny3demo/#/pagination/pagination-all</example-url>
 */
export declare class TiPaginationComponent extends TiFormComponent {
    protected render: Renderer2;
    protected hostRef: ElementRef;
    private table;
    private select;
    private static readonly MIN_PAGE;
    /**
     * 设置组件的类型：三种类型default(默认)、simple、mini
     */
    type: 'default' | 'simple' | 'mini';
    /**
     * 设置当前数据总条数
     */
    totalNumber: number;
    /**
     * 组件内部改变总条数时会触发该事件，向外通知当前总条数。
     */
    readonly totalNumberChange: EventEmitter<number>;
    /**
     * 设置当前页码
     */
    currentPage: number;
    /**
     * 组件内部改变当前页码时会触发该事件，向外通知当前页码数。
     */
    readonly currentPageChange: EventEmitter<number>;
    /**
     * 实现每页显示条数的相关配置，包括如下属性
     *
     * options:组件每页显示条数选项列表，默认配置：[10, 20, 50]
     *
     * size:每页显示条数配置，注意: 该值应该属于options数组中的一个元素，默认：10
     *
     * width:设置每页显示条数选项元素(页面上是一个select组件)的宽度，默认：'50px'
     *
     * hide:设置是否在页面上隐藏每页显示条数选项元素，默认：false
     */
    pageSize: TiPageSizeConfig;
    /**
     * 设置是否总条数的显示与隐藏
     */
    showTotalNumber: boolean;
    /**
     * 设置是否显示页码跳转按钮（默认不显示)
     */
    showGotoLink: boolean;
    /**
     * 组件是否开启自动隐藏功能。开启后，当总条数totalNumber小于每页显示条数选项列表中的最小值时，隐藏分页
     */
    autoHide: boolean;
    /**
     * 组件是否禁用状态
     */
    disabled: boolean;
    /**
     * 设置最后一页的显示与隐藏（一般数据量比较大的场景隐藏最后一页）：默认显示
     */
    showLastPage: boolean;
    /**
     * 当操作选择框改变每页显示条数时会触发该事件，向外通知当前页码、每页显示条数和总条数。
     */
    readonly pageNumChange: EventEmitter<TiPaginationEvent>;
    /**
     * 当操作选择框改变每页显示条数或操作页码改变当前页码时会触发该事件，向外通知当前页码、每页显示条数和总条数。
     */
    readonly pageUpdate: EventEmitter<TiPaginationEvent>;
    /**
     * @ignore
     */
    mini: TemplateRef<any>;
    /**
     * @ignore
     */
    inputRef: ElementRef;
    /**
     * @ignore
     * 非mini类型：select下拉组件
     */
    itemsPerPage: any;
    /**
     * @ignore
     * mini类型：select下拉组件
     */
    itemsMini: any;
    /**
     * @ignore
     * 用户输入即将跳转的页码
     */
    gotoPage: {
        page?: any;
    };
    /**
     * @ignore
     * 页码列表
     */
    pages: Array<{
        key: any;
        active: boolean;
    }>;
    private hidePage;
    private totalPageNum;
    private oldCurrentPage;
    private oldTotalNumber;
    private oldSelected;
    private oldSize;
    private subscription;
    private updateFocusableElems;
    private defaultPageSize;
    constructor(render: Renderer2, hostRef: ElementRef, table: TiTableComponent, select: TiSelectComponent);
    /**
     * @description 创建每一个页码对应的数据
     * @params key 页码显示，为数字或者是"···"
     * @params isActive 是否为当前激活页
     */
    private static makePage;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    private initData;
    private isStorageCurrentPage;
    private isStorageItemsPerPage;
    private updateFromStorage;
    /**
     * 根据接口配置来渲染页面
     */
    private renderPage;
    /**
     * @ignore
     * 对总页数进行数字国际化处理
     */
    setTotalNumberFormat(): string;
    private getFormatedSize;
    /**
     * 同步变化开发者的pageSize数据
     */
    private syncPageSize;
    /**
     * @ignore
     * 当前页码是否为最小页码
     */
    noPrevious(): boolean;
    /**
     * @ignore
     * 当前页码是否为最大页码
     */
    noNext(): boolean;
    /**
     * @ignore
     * 当前页码是否为'···' 不可被聚焦
     */
    isEllipse(page: any): boolean;
    /**
     * @ignore
     * 操作pageSize选择框,每页显示条数改变时触发
     */
    onSizeChange(pageSizeNum: number): void;
    private selectPage;
    /**
     * 计算总页数
     */
    private calculateTotalPages;
    /**
     * 组装mini类型时模板需要的数据
     */
    private configMini;
    /**
     * @description 根据每页显示条数及数据总条数获取页码列表
     */
    private getPages;
    /**
     * @description 根据当前页码和要显示的数目，计算分页链接的起始页
     */
    private getInterval;
    /**
     * 设置合法的新页码
     */
    private verifyCurrentPage;
    /**
     * @ignore
     * 输入跳转页码enter快捷键处理
     */
    enterPageHandler(e: KeyboardEvent): void;
    /**
     * @ignore
     * 根据要跳转的页码，同步修改当前页码
     */
    gotoPageHandler(event: KeyboardEvent): void;
    /**
     * @ignore
     * 上一页按钮的点击事件
     */
    onPrevClick(event: Event): any;
    /**
     * @ignore
     * 页码点击事件
     */
    onPageClick(page: any, event: Event): any;
    /**
     * @ignore
     * 下一页按钮的点击事件
     */
    onNextClick(event: Event): any;
    /**
     * @ignore
     * input输入框modelchange事件
     */
    ngModelChange(value: any): void;
    /**
     * @ignore
     */
    trackByFn(index: number, item: any): number;
    private isWithTable;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiPaginationComponent, [null, null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TiPaginationComponent, "ti-pagination", never, { "type": "type"; "currentPage": "currentPage"; "showTotalNumber": "showTotalNumber"; "showGotoLink": "showGotoLink"; "autoHide": "autoHide"; "disabled": "disabled"; "showLastPage": "showLastPage"; "totalNumber": "totalNumber"; "pageSize": "pageSize"; }, { "totalNumberChange": "totalNumberChange"; "currentPageChange": "currentPageChange"; "pageNumChange": "pageNumChange"; "pageUpdate": "pageUpdate"; }, never, never, false>;
}

//# sourceMappingURL=TiPaginationComponent.d.ts.map