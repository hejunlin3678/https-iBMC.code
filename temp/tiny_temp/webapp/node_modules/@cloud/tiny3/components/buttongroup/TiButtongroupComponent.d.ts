import { ChangeDetectorRef, ElementRef, IterableDiffers, QueryList, Renderer2, TemplateRef } from '@angular/core';
import { TiWholeComponent } from '../base/TiBaseModule';
/**
 * 按钮组组件：每个按钮的属性配置
 */
import * as ɵngcc0 from '@angular/core';
export interface TiButtonItem {
    /**
     * 按钮文本显示
     */
    text?: string;
    /**
     * 设置按钮状态
     */
    disabled?: boolean;
    /**
     * 设置tip内容，类型为文本、TemplateRef或组件
     */
    tipContent?: string | TemplateRef<any> | any;
    /**
     * 设置tip显示方向，
     */
    tipPosition?: string;
    /**
     * 设置按钮标志类型：
     *
     * 对象类型，包含两个属性:1.text: 显示的文本；2.class:标志的样式；eg:{text: string; class: string}
     *
     * 10.1.2版本之后可自定义模板，设置按钮标志样式
     */
    sup?: {
        text?: string;
        class?: string;
        /**
         * 允许有多余的属性字段
         */
        [propName: string]: any;
    };
    /**
     * 允许有多余的属性字段
     */
    [propName: string]: any;
}
/**
 * buttonGroup选择按钮组组件
 *
 * 该组件支持单选、多选两种形式，显示内容支持用户自定义
 *
 * 单选块：用户要从一个数据集中选择单个选项。
 * 分大尺寸，小尺寸，无边框三种类型。
 * 支持可取消选中，默认选中时再次点击不取消当前选中项；
 *
 * 多选块：允许用户从一个数据集中选择多个选项。
 * 分大尺寸，小尺寸两种类型。
 *
 * <example-url>../tiny3demo/#/buttongroup/buttongroup-all</example-url>
 */
export declare class TiButtongroupComponent extends TiWholeComponent {
    protected elementRef: ElementRef;
    protected renderer2: Renderer2;
    protected changeDetectorRef: ChangeDetectorRef;
    private iterableDiffers;
    /**
     * 按钮组属性配置，为数组形式，数组中每一项为一个按钮的属性配置，为对象形式：
     */
    items: Array<TiButtonItem>;
    /**
     * 激活状态项样式类定义
     */
    activeClass: string;
    /**
     * 设置单个按钮最小宽度
     */
    minWidth: string;
    /**
     * 用来控制按钮的尺寸大小:默认是large
     *
     * 单选按钮有大小尺寸、无边框之分：取值 'large','small','noBorder'
     *
     * 多选按钮有空间充足，空间不足之分：取值 'large','small',
     */
    type: string;
    /**
     * 设置是否为多选按钮组
     */
    multiple: boolean;
    /**
     * 设置单选按钮组是否可以取消选中
     */
    deselectable: boolean;
    /**
     * 10.0.2新增
     *
     * 按钮是否为多行，设置为多行时，按钮块有下边距，否则没有。
     */
    /**
     * 用于取代公共样式类ti3-button-group-bottom-space
     * <ti-button-group class="ti3-button-group-bottom-space"></ti-button-group>
     */
    multiline: boolean;
    /**
     * @ignore
     * 获取到用户自定义的模板
     */
    firstTemplate: TemplateRef<any>;
    itemTemplate: TemplateRef<any>;
    supTemplate: TemplateRef<any>;
    /**
     * @ignore
     * 获取每个按钮
     */
    btns: QueryList<ElementRef>;
    /**
     * @ignore
     * 绑在模板上用户自定义激活样式
     */
    actClass: string;
    private itemsDiffer;
    constructor(elementRef: ElementRef, renderer2: Renderer2, changeDetectorRef: ChangeDetectorRef, iterableDiffers: IterableDiffers);
    ngOnInit(): void;
    ngAfterViewChecked(): void;
    /**
     * 兼容旧版：
     * 10.1.2 版本之前只能内嵌一个模板，无命名。
     * 新版可以内嵌两个模板，示例书写要求都命名（#item，#sup）。
     * 但需要兼容旧版无命名测试用例。
     */
    ngAfterContentInit(): void;
    /**
     * @ignore
     * sup属性存在class类或text存在且有效
     */
    isSuperScript(item: TiButtonItem): boolean;
    /**
     * @ignore
     * @description 根据selectedId来设置每个按钮的样式
     * @param: item
     */
    setActiveClass(item: string): string;
    /**
     * @ignore
     * 每个item上的点击事件
     */
    onClick(item: TiButtonItem): void;
    /**
     * @ignore
     * 每个item上的点击事件
     */
    private selectItem;
    /**
     * @ignore
     * 判断是不是选中项
     */
    private hasSelected;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiButtongroupComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TiButtongroupComponent, "ti-button-group", never, { "type": "type"; "multiple": "multiple"; "deselectable": "deselectable"; "multiline": "multiline"; "items": "items"; "activeClass": "activeClass"; "minWidth": "minWidth"; }, {}, ["itemTemplate", "firstTemplate", "supTemplate"], never, false>;
}

//# sourceMappingURL=TiButtongroupComponent.d.ts.map