import { SimpleChanges } from '@angular/core';
import { TiDateBaseComponent, TiDatetimeFormat, TimeOptions } from '../datebase/TiDateBaseModule';
/**
 * Datetime日期时间组件
 *
 * Datetime组件提供了一种方便的显示和设置日期时间的方式。
 *
 * <example-url>../tiny3demo/#/datetime/datetime-all</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class TiDatetimeComponent extends TiDateBaseComponent {
    /**
     * @ignore
     * 配置time组件的接口
     */
    beginTime: TimeOptions;
    /**
     * @ignore
     * 日期显示格式: Datetime组件的format为DatetimeFormat类型
     */
    format: TiDatetimeFormat;
    /**
     * @ignore
     * 标记date/datetime的类型
     */
    isDatetime: boolean;
    /**
     * @ignore
     * 用于标记是不是range
     */
    isRange: boolean;
    /**
     * @ignore
     * placeholder提示文本
     */
    placeholder: string;
    /**
     * @ignore
     * 旧时间值
     */
    oldValue: any;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    /**
     * @ignore
     * model值变化时的回调
     */
    ngOnModelChange(): void;
    /**
     * @ignore
     * 确认按钮的点击事件处理
     */
    onOkClick(): void;
    /**
     * @ignore
     * 设置下拉面板中datePanel组件接口
     */
    private setDatePanel;
    private setBeginTime;
    /**
     * @ignore
     * @param event
     * @param val
     */
    onKeydownFn(event: KeyboardEvent, val: any): void;
    /**
     * @ignore
     */
    editBlur(val: any): void;
    private setTime;
    private setTimeValue;
    private setTimeMaxValue;
    private setTimeMinValue;
    /**
     * @ignore
     */
    isValidValue(value: Date): boolean;
    /**
     * @ignore
     */
    setPickerDate(): void;
    /**
     * @ignore
     * 设置确认按钮的状态
     */
    setOkBtnState(): void;
    /**
     * @ignore
     * 将value转换为format接口格式的字符串
     */
    formatValue(): void;
    /**
     * @ignore
     * 时间框失焦事件
     */
    timeBlur(): void;
    /**
     * @ignore
     * 时间框enter事件
     */
    timeKeydown(event: KeyboardEvent): void;
    /**
     * @ignore
     * time时间框输入内容处理
     */
    handleTimeValue(): void;
    /**
     * @description 判读字符串是否是合法的时间
     * @param: time: 校验的时间
     */
    private isValidTime;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TiDatetimeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TiDatetimeComponent, "ti-datetime", never, {}, {}, never, never, false>;
}

//# sourceMappingURL=TiDatetimeComponent.d.ts.map