<?xml version="1.0" encoding="UTF-8"?>
<CLASSTREE>
    <QUALIFIER NAME="Description" TYPE="string">
        <VALUE>本文件描述系统中所有的类、属性和方法。</VALUE>
    </QUALIFIER>
    <CLASS NAME="Redfish">
        <PROPERTY NAME="Version" TYPE="i"></PROPERTY>
	<PROPERTY NAME="SessionTimeout" TYPE="u"></PROPERTY>
    <!-- Redfish加密密钥 -->
    <PROPERTY NAME="RedfishWorkKey" TYPE="s" >  </PROPERTY>
    <!-- Redfish根密钥组件 -->
    <PROPERTY NAME="RedfishComponent" TYPE='ay'> </PROPERTY>
    <!-- Redfish加密主密钥Id -->
    <PROPERTY NAME="RedfishMasterKeyId" TYPE='u' >  </PROPERTY>
	<PROPERTY NAME="OdataVersion" TYPE="s"></PROPERTY>
	<!-- 是否已解压缩配置文件 -->
	<PROPERTY NAME="CfgFileDecompressed" TYPE="y"></PROPERTY>
    <METHOD NAME="ProcessHttpRequest">
        <PARAMETER TYPE="s" NAME="Request" DIR="in"/>
		<PARAMETER TYPE="i" NAME="RequestLength" DIR="in"/>
        <PARAMETER TYPE="s" NAME="ResponseBody" DIR="out"/>
		<PARAMETER TYPE="s" NAME="ResponseHeaders" DIR="out"/>
		<PARAMETER TYPE="s" NAME="ResponseStatus" DIR="out"/>
    </METHOD>
    <METHOD NAME="RedirectHttpRequest">
        <PARAMETER TYPE="s" NAME="Request" DIR="in"/>
		<PARAMETER TYPE="i" NAME="RequestLength" DIR="in"/>
        <PARAMETER TYPE="s" NAME="ResponseBody" DIR="out"/>
		<PARAMETER TYPE="s" NAME="ResponseHeaders" DIR="out"/>
		<PARAMETER TYPE="s" NAME="ResponseStatus" DIR="out"/>
    </METHOD>
	<METHOD NAME="CopySpSchema">
    </METHOD>
    <!-- 启动sp固件升级监控task -->
    <METHOD NAME="StartSPFirmwareUpgradeMonitor">			
    </METHOD>
    <METHOD NAME="UpdateRedfishCiphertext">
        <PARAMETER DIR="in" NAME="NewKeyId" TYPE="u"/>
    </METHOD>
    </CLASS>
		<!-- 
	描述：MCTP配置文件信息
	所属模块：MCTP模块-->
	<CLASS NAME="MctpCtrl">
		<PROPERTY NAME="MctpID" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="MeEid" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="MePhy" TYPE="q">		</PROPERTY>
		<PROPERTY NAME="BmcEid" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="BmcPhy" TYPE="q">		</PROPERTY>
		<PROPERTY NAME="TableStatus" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="DiscoverFlag" TYPE="y">		</PROPERTY>
        <PROPERTY NAME="BmcSMBusEid" TYPE="y">		</PROPERTY>
        <PROPERTY NAME="BmcSMBusPhyAddr" TYPE="y">		</PROPERTY>
		<METHOD NAME="ChangeRouteTable">
			<PARAMETER TYPE="i" NAME="Status" DIR="out"/>
        </METHOD>
	</CLASS>
    <!-- MCTP Over SMBus EP类 -->
    <CLASS NAME="MCTPEndpoint">
        <!-- 参见DSP0239, 0x02-SMBus, 0x0F-PCIe VDM, 0x80-天池+网迅网卡,私有Binding -->
		<PROPERTY NAME="Medium" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="Chip" TYPE="ro">		</PROPERTY>
		<PROPERTY NAME="EID" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="PhyAddr" TYPE="u">		</PROPERTY>
        <!-- 0:状态正常, 1:状态异常, 0xff:无效值 -->
		<PROPERTY NAME="CommState" TYPE="y">		</PROPERTY>
        <!-- 0:未分配EID, 1:已分配EID -->
		<PROPERTY NAME="IsDiscovered" TYPE="y">		</PROPERTY>
	</CLASS>
	<!-- Redfish事件订阅服务类 -->
	<CLASS NAME="RedfishEventService" ID="99">
		<!-- 对外消息上报使能开关 -->
        <PROPERTY NAME="ServiceEnabled" TYPE="y" ID="1" EXPORT="17"></PROPERTY>
		<!-- 上报失败尝试次数 -->
		<PROPERTY NAME="DeliveryRetryAttempts" TYPE="i"></PROPERTY>
		<!-- 事件上报失败尝试间隔，以秒为单位 -->
		<PROPERTY NAME="DeliveryRetryIntervalSeconds" TYPE="i"></PROPERTY>
		<!-- 事件主机标识源：0,单板名称;1,产品资产标签;2,主机名 -->
		<PROPERTY NAME="ServerIdentitySource" TYPE="y" ID="2" EXPORT="17"></PROPERTY>
		<!-- 事件详细信息中客户自定义字段显示选项：0, 不显示, 1: 显示CMCC定制字段. 默认不显示 -->	        
		<PROPERTY NAME="EventDetailCustomizedID" TYPE="y" ID="3" EXPORT="17"></PROPERTY>
		<!-- 当前已分配的事件编号：0，表示无效值 -->
		<PROPERTY NAME="EventRecordID" TYPE="u"></PROPERTY>
		<!-- 告警产生的告警项编号，格式monitor_name;is_simulate:编号:，单个示例如： NandLifeMntr;1:112-->
		<PROPERTY NAME="EventRecords" TYPE="as"></PROPERTY>
		<!-- 上报事件资源id，匹配客户订阅侧流水号id，超过最大之后重新从1开始，复位持久化 -->
		<PROPERTY NAME="EventResourceID" TYPE="u"></PROPERTY>
		<!-- 上次告警事件的资源id，复位持久化 -->
		<PROPERTY NAME="EventLastAlertID" TYPE="u"></PROPERTY>
		<!-- 设置主机标识源 -->
		<METHOD NAME="SetServerIdentitySource" ID="2">
			<!-- 事件主机标识源：0,单板名称;1,产品资产标签;2,主机名 -->
			<PARAMETER TYPE="y" NAME="IdentitySource" DIR="in"/>			
        </METHOD>
		<!-- 设置事件上报开关状态 -->
		<METHOD NAME="SetServiceEnabled" ID="1">
			<!-- 设置上报使能开关：0,关闭;1,打开 -->
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>			
		</METHOD>
		<!-- 设置事件详细信息字段对外显示开关状态 -->
		<METHOD NAME="SetEventDetailCustomizedID" ID="3">
			<!-- 事件详细信息中客户自定义字段显示选项：0, 不显示, 1: 显示CMCC定制字段. -->
			<PARAMETER TYPE="y" NAME="CustomizedID" DIR="in"/>			
		</METHOD>
		<METHOD NAME="PostRedfishEventMsg">
			<!-- 事件消息类型:0,测试事件;1,正常事件 -->
			<PARAMETER TYPE="y" NAME="MsgType" DIR="in"/>	
			<!-- 事件消息内容 -->
			<PARAMETER TYPE="s" NAME="EventMsgContent" DIR="in"/>
            <!-- 是否忽略对接收方的ssl证书校验 :0,校验;1,不校验 -->
			<PARAMETER TYPE="y" NAME="IgnoreSslVerify" DIR="in"/>
        </METHOD>
		<!-- 事件消息生成方法 -->
		<METHOD NAME="GenRedfishEventMsg">
			<!-- 事件消息Id -->
			<PARAMETER TYPE="s" NAME="MsgId" DIR="in"/>
			<!-- 消息参数拼接字符串，如:"1;;2" -->
			<PARAMETER TYPE="s" NAME="MsgArgs" DIR="in"/>
			<!-- 
			Redfish事件类型: 
			"StatusChange",
			"ResourceUpdated",
			"ResourceAdded",
			"ResourceRemoved",
			"Alert"
			-->
			<PARAMETER TYPE="s" NAME="EventType" DIR="in"/>
			<!-- 事件产生事件戳 -->
			<PARAMETER TYPE="s" NAME="EventTimeStamp" DIR="in"/>
			<!-- 事件码 -->
			<PARAMETER TYPE="u" NAME="EventId" DIR="in"/>
			<!-- 事件源 -->
			<PARAMETER TYPE="s" NAME="OriginRscURI" DIR="in"/>
			<!-- 事件主体 -->
			<PARAMETER TYPE="s" NAME="EventSubject" DIR="in"/>
			<!-- 事件触发类型-->
			<PARAMETER TYPE="y" NAME="TriggerMode" DIR="in"/>
			<!-- 事件来源 1表示来源于Hmm备板-->
			<PARAMETER TYPE="y" NAME="EventRscType" DIR="in"/>
                        <!-- 事件主体对应的部件序列号-->
			<PARAMETER TYPE="s" NAME="sn" DIR="in"/>
                        <!-- 事件主体对应的部件号-->
			<PARAMETER TYPE="s" NAME="pn" DIR="in"/>
			<!-- 事件部件类型-->
			<PARAMETER TYPE="y" NAME="SubjectType" DIR="in"/>
			<!-- 事件部件名称-->
			<PARAMETER TYPE="s" NAME="SubjectName" DIR="in"/>
			<!-- 事件产生位置-->
			<PARAMETER TYPE="s" NAME="SubjectLocation" DIR="in"/>		
			<!-- 事件状态 产生/消除 -->
			<PARAMETER TYPE="y" NAME="EventState" DIR="in"/>
			<!-- 事件监控对象名 -->
			<PARAMETER TYPE="s" NAME="EventMonitorName" DIR="in"/>
			<!-- 事件告警级别 -->
			<PARAMETER TYPE="y" NAME="EventSeverity" DIR="in"/>
			<!-- 生成的事件消息字符串 -->
			<PARAMETER TYPE="s" NAME="EventMsgContent" DIR="out"/>
        </METHOD>
		<!-- 告警类事件源生成方法 -->
		<METHOD NAME="GenAlertOriginRscURI">
			<!-- 事件监控对象名 -->
			<PARAMETER TYPE="s" NAME="EventMonitorName" DIR="in"/>
			<!-- 事件源URI -->
			<PARAMETER TYPE="s" NAME="OriginRscURI" DIR="out"/>
        </METHOD>
		<!-- 属性同步方法,data_sync2调用 -->
		<METHOD  NAME="DataSyncMethod" >
			<PARAMETER DIR="in" NAME="Data" TYPE="*"/>
		</METHOD>
    </CLASS>
	
	<!-- Redfish事件订阅类 -->
	<CLASS NAME="RedfishEvtSubscription">
		<!-- 事件订阅对象Id，和SMTP配置一致，最大4个，取值0-3 -->
		<PROPERTY NAME="Id" TYPE="y"></PROPERTY>
		<!-- 事件订阅接收地址，如https://192.168.30.193/iBMCRedfishEvents/iBMCEventReceiver.php -->
        <PROPERTY NAME="Destination" TYPE="s"></PROPERTY>
		<!-- 当前订阅关心的事件类型 -->
		<PROPERTY NAME="EventTypes" TYPE="as"></PROPERTY>
		<!-- 订阅者保存的上下文信息，可读写 -->
		<PROPERTY NAME="Context" TYPE="s" ID="1"></PROPERTY>
		<!-- 事件上报重试策略，可读写 -->
		<PROPERTY NAME="DeliveryRetryPolicy" TYPE="s"></PROPERTY>
        <!-- 事件订阅状态，可读写 -->
		<PROPERTY NAME="State" TYPE="s"></PROPERTY>
		<!-- 事件连接的协议，当前只支持Redfish -->
		<PROPERTY NAME="Protocol" TYPE="s"></PROPERTY>
		<!-- 创建事件订阅时指定的HTTP头部信息，需进行加密保存
		-->
		<PROPERTY NAME="HttpHeaders" TYPE="s" ></PROPERTY>
        <!-- 进行加密保存HTTP头部信息，后续HttpHeaders属性废弃，使用本属性
		-->
		<PROPERTY NAME="EncryptedHttpHeaders" TYPE="as" ></PROPERTY>
		<!-- 上报过滤项:事件源对象 -->
		<PROPERTY NAME="OriginResources" TYPE="as"></PROPERTY>
		<!-- 上报过滤项:消息Id -->
		<PROPERTY NAME="MessageIds" TYPE="as"></PROPERTY>
		<!-- 订阅者类型 0:BMA, 1:其他 -->
		<PROPERTY NAME="SubscriberType" TYPE="y"></PROPERTY>

		<!-- 设置事件订阅上下文信息 -->
		<METHOD  NAME="SetEventSubscriptionContext" >
			<PARAMETER DIR="in" NAME="ContextStr" TYPE="s"/>
		</METHOD> 
		
		<!-- 设置事件订阅HTTP头信息 -->
		<METHOD  NAME="SetEvtSubscriptionHttpHeaders" >
			<PARAMETER DIR="in" NAME="HttpHeadersStr" TYPE="s"/>
		</METHOD> 
		
		<!-- 属性同步方法,data_sync2调用 -->
		<METHOD  NAME="DataSyncMethod" >
			<PARAMETER DIR="in" NAME="Data" TYPE="*"/>
		</METHOD>
    </CLASS>
	
    <!--FUNCTION:BoardPower-->
    <!-- 
	描述：单板功率类, -->
    <CLASS ID="41" NAME="MassStorage">
        <PROPERTY NAME="Id" TYPE='y' ID="5">		</PROPERTY>
		<PROPERTY NAME="PreChip" TYPE='ro'>	</PROPERTY>
		<PROPERTY NAME="Presence" TYPE="y" ID="1">	</PROPERTY>
		<PROPERTY NAME="Health" TYPE="y" ID="2">	</PROPERTY>
		<PROPERTY NAME="Volume" TYPE='u' ID="3">	</PROPERTY>
        <PROPERTY NAME="IsPrimary" TYPE='y'></PROPERTY>
		<PROPERTY NAME="FailedArray" TYPE='y'></PROPERTY>
		<PROPERTY NAME="RebuildState" TYPE='y'></PROPERTY>
		<PROPERTY NAME="RebuildAborted" TYPE='y'></PROPERTY>
		<PROPERTY NAME="Manufacturer" TYPE="s" ID="4"></PROPERTY>
		<PROPERTY NAME="SN" TYPE="s"></PROPERTY>
		<!--升级完SD控制器后是否完成重启标志
		0：升级完未重启BMC
		1：升级完已重启BMC
		标志：默认值为1
		-->
		<PROPERTY NAME="IsFinishUpgrade" TYPE="y"></PROPERTY>
		<METHOD  NAME="SetFinishUpgradeFlag">
			<PARAMETER DIR="in" NAME="IsFinishUpgrade" TYPE="y"/>
		</METHOD> 
    </CLASS>
    <CLASS NAME="RaidChip" ID="98">
        <PROPERTY NAME="PartNum" TYPE='y'>	</PROPERTY>
		<PROPERTY NAME="PartSize" TYPE='ay'> </PROPERTY>
        <PROPERTY NAME="PartEn" TYPE='ay'>	</PROPERTY>
        <PROPERTY NAME="PartWriteEn" TYPE='ay'>		</PROPERTY>
        <PROPERTY NAME="PartAccessDev" TYPE='ay'>	</PROPERTY>        
		<PROPERTY NAME="SdRwCtrl" TYPE='y'>		</PROPERTY>
		<PROPERTY NAME="ReadThre" TYPE='y'>		</PROPERTY>
		<PROPERTY NAME="WriteThre" TYPE='y'>	</PROPERTY>		
		<PROPERTY NAME="Version" TYPE='s' ID="1">	</PROPERTY>		
		<PROPERTY NAME="Name" TYPE='s' ID="2">	</PROPERTY>		
		<PROPERTY NAME="Unit" TYPE='s'>	</PROPERTY>	
		<PROPERTY NAME="Presence" TYPE='y' ID="3">   </PROPERTY>	
		
		<PROPERTY NAME="SDRAIDLogicDir" TYPE='y'>   </PROPERTY>
		<PROPERTY NAME="SDRAIDHealth" TYPE='y' ID="4">   </PROPERTY>
		<PROPERTY NAME="SDRAIDRebuildState" TYPE='y'>   </PROPERTY>
    </CLASS>
	
	<!-- 
	描述：产品使用的处理器型号相关的信息，包括CPU代号，内存控制器数目(integrated Memory Controller)
	所属模块：diagnose模块(frudata)-->	
	<CLASS NAME="ProcessorFamily">
		<!-- 处理器支持的IMC个数，Ivy Brige EX和HasWell支持两个IMC -->
		<PROPERTY NAME="IMCNum" TYPE='y'> </PROPERTY>
		<!-- 处理器平台信息，1表示Sandy Brige， 2表示Ivy Brige，3表示HasWell，0表示Unknown -->
		 <PROPERTY NAME="CPUCode" TYPE='y'>	</PROPERTY>
		<!-- 处理器平台代号，0x0B02表示ROMLEY，0x0B03表示DENLOW，0x0B04表示BRICKLAND，0x0B05表示GRANTLEY -->
		<PROPERTY NAME="PlatformID" TYPE='q'>	</PROPERTY>
	</CLASS>
	
	<!-- 
	描述：Fault Diagnose Module类, 包含FDM的使能信息, 其他模式的使能信息，目前这些属性都是设置的掉电持久化
	所属模块：diagnose模块-->
	<CLASS ID="54" NAME="FdmConfig">
		 <!-- FDM使能信息，0表示不使能，1表示使能 -->
		 <PROPERTY NAME="FdmEnable" TYPE='y'  ID='1'>	</PROPERTY>
		 <!-- PFA使能信息，0表示不使能，1表示使能 -->
		 <PROPERTY NAME="PFAEnable" TYPE='y'  ID='2'>	</PROPERTY>
		 <!-- EMCA模式使能信息，0表示不使能，1表示使能 -->
		 <PROPERTY NAME="EMCA" TYPE='y'>	</PROPERTY>
		 <!-- IOMCA模式使能信息，0表示不使能，1表示使能 -->
		 <PROPERTY NAME="IOMCA" TYPE='y'>	</PROPERTY>
		 <!-- Viral模式使能信息，0表示不使能，1表示使能 -->
		 <PROPERTY NAME="Viral" TYPE='y'>	</PROPERTY>
		 <!-- CDC模式使能信息，0表示不使能，1表示使能 -->
		 <PROPERTY NAME="CDC" TYPE='y'>	</PROPERTY>
		 <!-- IERR收集失败时热复位使能属性已扩展为处理策略属性，考虑兼容性不做名称修改 0表示不做任何处理，1表示热复位业务侧，2表示诊断后下电 -->
		 <PROPERTY NAME="IErrWarmResetEnable" TYPE='y' EXPORT="17" ID='4'>	</PROPERTY>
         <!-- IERR诊断成功处理策略，0表示不处理，1表示热复位-->
		 <PROPERTY NAME="IErrDiagSuccessPolicy" TYPE='y'>	</PROPERTY>
		 <!-- haswell处理器中用于恢复被BIOS关闭的SMI中断 -->
		 <PROPERTY NAME="SMIRevocer" TYPE='y'>	</PROPERTY>
		 <!-- WEB 端显示的进度条信息 -->
		 <PROPERTY NAME="FdmProcessbar" TYPE='y'>	</PROPERTY>
		 <!-- FDM版本主版本号，1: FDM1.0，2: FDM2.0，以此类推-->
		 <PROPERTY NAME="FdmMajorVersion" TYPE='y'> </PROPERTY>
		 <!--FDM版本次版本号，从0开始 -->
		 <PROPERTY NAME="FdmMinorVersion" TYPE='y'> </PROPERTY>
		 <!-- 信息收集失败，需要热重启系统进行收集 -->
		 <PROPERTY NAME="FDMGatherFail" TYPE='y'>	</PROPERTY>
		 <!-- 已产生CATERR或无法定位到具体故障部件的MCE，需要提示客户查看后台日志分析定位 -->
		 <PROPERTY NAME="FDMUnknownFault" TYPE='y'>	</PROPERTY>
         <!-- FPC功能开关 -->
		 <PROPERTY NAME="MSPEnable" TYPE='y'>	    </PROPERTY>
         <!-- IFMM新旧模型区分，0表示决策树故障概率预测，1表示SiteAi模型预测，新模型仅支持ARM1711使用 -->
		 <PROPERTY NAME="MemForecastAlgorithm" TYPE='y'>	    </PROPERTY>
         <!-- 内存动态巡检功能开关 -->
         <PROPERTY NAME="DPSEnable" TYPE='y'>	    </PROPERTY>
		 <!-- 巡检和重映射开关 -->
		 <PROPERTY NAME="MemoryDynamicRemappingEnabled" TYPE='y'>	</PROPERTY>
		<METHOD NAME="SetMemDynamicRemappingEnabled">
		    <PARAMETER TYPE="y" NAME="state" DIR="in"/>
		</METHOD>
	     <!-- 内存DQ线接触不良(poor contact)告警功能开关, 默认为1 打开 -->
	     <PROPERTY NAME="MemPoorContactAlarmEnabled" TYPE='y'>	    </PROPERTY>
		<METHOD NAME="FruHotPlugCallback">
				<PARAMETER TYPE="s" NAME="Classname" DIR="in"/>
				<PARAMETER TYPE="y" NAME="AliasPart1" DIR="in"/>
				<PARAMETER TYPE="y" NAME="AliasPart2" DIR="in"/>
				<PARAMETER TYPE="y" NAME="AliasPart3" DIR="in"/>
				<PARAMETER TYPE="y" NAME="AliasPart4" DIR="in"/>
		</METHOD> 
		<METHOD NAME="FdmConfigSetFdmFault">
				<PARAMETER TYPE="y" NAME="ComponentType" DIR="in"/>
				<PARAMETER TYPE="y" NAME="FaultState" DIR="in"/>
				<PARAMETER TYPE="ay" NAME="AliasPart" DIR="in"/>
		</METHOD> 
		<!-- 其他模块写入fdmbin日志文件的方法-->
		<METHOD NAME="FDMWriteBinLog">
				<PARAMETER TYPE="y" NAME="LogType" DIR="in"/>
				<PARAMETER TYPE="y" NAME="EventCode" DIR="in"/>
				<PARAMETER TYPE="s" NAME="ExtString1" DIR="in"/>
				<PARAMETER TYPE="s" NAME="ExtString2" DIR="in"/>
				<PARAMETER TYPE="y" NAME="RawDataLenth" DIR="in"/>
				<PARAMETER TYPE="ay" NAME="RawData" DIR="in"/>
		</METHOD> 		
		<METHOD NAME="SetIErrWarmResetEnable" ID='4'>
				<PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
		</METHOD>
        <METHOD NAME="SetIErrDiagSuccessPolicy">
		    <PARAMETER TYPE="y" NAME="diags_success_policy" DIR="in"/>
		</METHOD>
        <METHOD NAME="SetMemPoorContactAlarmEnabled">
		    <PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>
		<METHOD NAME="FDMResetIFMM">
				<PARAMETER TYPE="y" NAME="cpu_id" DIR="in"/>
				<PARAMETER TYPE="y" NAME="channel_id" DIR="in"/>
				<PARAMETER TYPE="y" NAME="dimm_id" DIR="in"/>
		</METHOD>
		<METHOD NAME="InferenceAsyncDimmCallback">
				<PARAMETER TYPE="i" NAME="Ret" DIR="in"/>
				<PARAMETER TYPE="ay" NAME="Ctx" DIR="in"/>
				<PARAMETER TYPE="ai" NAME="Label" DIR="in"/>
				<PARAMETER TYPE="ad" NAME="Prob" DIR="in"/>
				<PARAMETER TYPE="ad" NAME="Value" DIR="in"/>
				<PARAMETER TYPE="u" NAME="Sample" DIR="in"/>
				<PARAMETER TYPE="u" NAME="Classes" DIR="in"/>
				<PARAMETER TYPE="u" NAME="Target" DIR="in"/>
		</METHOD>
	</CLASS>
	<!-- 
	描述：ARMFdmConfig类, 用于配置ARM服务器的系列类型和使能等配置信息
	所属模块：arm_diagnose模块-->
	<CLASS NAME="ARMFdmConfig">
		 <!-- FDM使能信息，0表示不使能，1表示使能 -->
		 <PROPERTY NAME="FdmEnable" TYPE='y' > </PROPERTY>
		 <!-- ServerType用于区分ARM服务器不同系列，不同系列的丝印不同；1表示2280/5280系列，2表示X600系列 -->
		 <PROPERTY NAME="ServerType" TYPE='y' > </PROPERTY>
	</CLASS>
	<!-- 
	描述：FdmWebConfig类, 包含FDM web界面的使能信息，目前这些属性都是设置的掉电持久化
	所属模块：diagnose模块-->
	<CLASS NAME="FdmWebConfig">
		<!-- 默认FDM Pfae运行标志 -->
		<PROPERTY NAME="FdmPfaeEnable" TYPE='y'>	</PROPERTY>
		<!-- 默认FDM Web自动更新使能信息，0表示不使能，1表示使能 -->
		<PROPERTY NAME="FdmAutoUpEnable" TYPE='y'  ID='2'>	</PROPERTY>
		<!-- 默认自动更新时间,0表示每天，1表示每小时，2表示每周-->
		<PROPERTY NAME="FdmAutoUpCycle" TYPE='y'  ID='3'>	</PROPERTY>
		<!-- 默认诊断数据时间段,0表示近1个月，1表示最近1天，2最近1周，3最近3月，4最近半年-->
		<PROPERTY NAME="FdmTimeQuant" TYPE='y'  ID='4'>	</PROPERTY>
		<!-- 默认文件锁路径，该锁作用于多个用户同时生成健康报告功能时-->
		<PROPERTY NAME="FdmWebSyncName" TYPE='s'  ID='5'>	</PROPERTY>
		<!-- 默认FDM Pfae分析结果是否对外显示，0表示不使能，1表示使能 -->
		<PROPERTY NAME="FdmPfaeResultDisplay" TYPE='y'>	</PROPERTY>
		<!-- Pfae分析结果是否通知带内系统的标志，0不通知，1通知-->
		<PROPERTY NAME="FdmPfaeNotifySystemEnable" TYPE='y'>	</PROPERTY>
		<!-- web获取设备树的方法-->
		<METHOD NAME="FDMFruTree">
				<!-- 传递自动或手动生成 自动为0，手动为1-->
				<PARAMETER TYPE="y" NAME="FruParam" DIR="in"/>
				<!-- 返回json文件路径-->
				<PARAMETER TYPE="s" NAME="FruInfo" DIR="out"/>
				<!-- 返回错误码 0表示成功，1表示失败-->
				<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD> 
		<!-- web删除树节点的方法-->
		<METHOD NAME="SetFDMFruTree">
				<!-- 1表示删除所有故障节点-->
				<PARAMETER TYPE="y" NAME="DelAllNode" DIR="in"/>
				<!-- 传递丝印类型，删除此故障节点-->
				<PARAMETER TYPE="y" NAME="DelNodeType" DIR="in"/>
				<!-- 传递丝印别名，删除此故障节点-->
				<PARAMETER TYPE="u" NAME="DelNodeAlias" DIR="in"/>
				<!-- 返回错误码 0表示成功，1表示失败-->
				<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD> 
		<!-- 设置设备树自动更新参数的方法-->
		<METHOD NAME="SetAotuUpdateEnable">
				<!-- 设置1表示自动更新开启，0表示关闭-->
				<PARAMETER TYPE="y" NAME="AotuUpdate" DIR="in"/>
				<!-- 返回错误码 0表示成功，1表示失败-->
				<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD> 		
		<METHOD NAME="SetRefreshInterval">
				<!-- 设置自动更新时间,0表示每天，1表示每小时，2表示每周-->
				<PARAMETER TYPE="y" NAME="UpdateCycle" DIR="in"/>
				<!-- 返回错误码 0表示成功，1表示失败-->
				<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD> 
		<METHOD NAME="SetPfaeTimes">
				<!-- 设置诊断数据时间段,0表示近1个月，1表示最近1天，2最近1周，3最近3月，4最近半年-->
				<PARAMETER TYPE="y" NAME="TimeQuant" DIR="in"/>
				<!-- 返回错误码 0表示成功，1表示失败-->
				<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD> 	
		<METHOD NAME="PostSelToFdm">
				<!-- SEL事件的系统时间戳-->
				<PARAMETER TYPE="u" NAME="TimeStamp" DIR="in"/>
				<!-- SEL事件码-->
				<PARAMETER TYPE="u" NAME="EventCode" DIR="in"/>
				<!-- SEL事件对应主体名字-->
				<PARAMETER TYPE="s" NAME="SubjectOjbName" DIR="in"/>
				<!-- 事件描述参数数组，包含特殊字符，需要用字符方式传递-->
				<PARAMETER TYPE="ay" NAME="DescParaArray" DIR="in"/>
		</METHOD>
		<METHOD NAME="PostSysEventToFdm">
				<!-- 带内事件的系统时间戳-->
				<PARAMETER TYPE="u" NAME="TimeStamp" DIR="in"/>
				<!-- 带内事件主体所在DeviceId-->
				<PARAMETER TYPE="u" NAME="DeviceId" DIR="in"/>
				<!-- 带内事件主体所在SubDeviceId-->
				<PARAMETER TYPE="u" NAME="SubDeviceId" DIR="in"/>
				<!-- 带内事件数量-->
				<PARAMETER TYPE="u" NAME="EventCodeNum" DIR="in"/>
				<!-- 带内事件事件码列表-->
				<PARAMETER TYPE="au" NAME="EventCodeList" DIR="in"/>
		</METHOD>
		<!-- 设置健康分析结果通知带内标志的方法-->
		<METHOD NAME="SetPfaeNotifySystemEnable">
				<PARAMETER TYPE="y" NAME="NotifyEnable" DIR="in"/>
				<!-- 返回错误码 0表示成功，1表示失败-->
				<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>
		<METHOD NAME="ClearTable">	
		</METHOD> 		
	</CLASS>
	<!-- 
	描述：bank与IMC，内存通道映射 类, 包含CPU bank与imc和channel的对应关系
	所属模块：diagnose模块-->
	<CLASS NAME="BankMemMap">
		<!-- bank号，属于CPU内部属性，取值范围为[7:16] -->
		<PROPERTY NAME="Bank" TYPE="ay">          </PROPERTY>
		<!-- IMCId， Integreted Memory Controller，内存控制器索引号，取值范围为[0:1] -->        
		<PROPERTY NAME="IMCId" TYPE="ay">         </PROPERTY>
		<!-- ChannelId， 内存通道号，取值范围为[0:3] -->  
		<PROPERTY NAME="ChannelId" TYPE="ay">     </PROPERTY>
	</CLASS>
	
	<!-- 
	描述： 描述IO板上槽位与 socket bdf 的对应关系
	所属模块：diagnose模块-->
	<CLASS ID="70" NAME="PcieAddrInfo">   
		<!-- 表明本对象是否挂在Switch下，若是，用于rootport比较及替换操作  -->
		<PROPERTY NAME="DynamicBDF" TYPE="y">	</PROPERTY>
		<!-- 9032等8路以上产品时需要区分不同的4P，1 based，8100及以下填0表示不涉及 -->
		<PROPERTY NAME="Segment" TYPE="y">	</PROPERTY>
		<!--  逻辑组ID，按的Devic照丝印命名分组，便于丝印相同时区分，对应Component 类的GroupID属性，从1开始编号 -->
		<PROPERTY NAME="GroupId" TYPE="y" ID="10"> 	</PROPERTY>
		<!-- 部件类型，对应Component类的DeviceType属性-->
		<PROPERTY NAME="ComponentType" TYPE="y" ID="2"> </PROPERTY>
		<!-- 槽位号，从1开始编号，对应Component类DeviceNum属性-->
		<PROPERTY NAME="SlotId" TYPE="y" ID="3">       </PROPERTY>	
		<!-- 槽位所挂载的CPU编号，逻辑号，从0开始编号-->
		<PROPERTY NAME="SocketId" TYPE="y" ID="1">	 	</PROPERTY>
		<!-- BDF序号，一个部件可能存在多个BDF，如MEZZ卡，从0开始编号 -->
		<PROPERTY NAME="BDFNo" TYPE="y" ID="6">	  	</PROPERTY>
		<!-- PCIe控制器类型，0:PCIeCore，1:NIC，2:SAS，3:SATA，4:ZIP，5:SEC，ARM机型使用 -->
		<PROPERTY NAME="ControllerType" TYPE="y">	  	</PROPERTY>
		<!-- PCIe控制器索引值，CPU内部相同ControllerType的个数索引，从0开始，ARM机型使用 -->
		<PROPERTY NAME="ControllerIndex" TYPE="y">		</PROPERTY>
		<!-- root port BDF，pcie总线号 -->
		<PROPERTY NAME="Bus" TYPE="y" ID="7">	  	</PROPERTY>
		<!--  pcie设备号 -->
		<PROPERTY NAME="Device" TYPE="y" ID="8">		</PROPERTY>
		<!--  pcie功能号 -->
		<PROPERTY NAME="Function" TYPE="y" ID="9">	  	</PROPERTY>
		<!--  pcie VID -->
		<PROPERTY NAME="VendorId" TYPE="q">	  	</PROPERTY>
		<!--  pcie DID -->
		<PROPERTY NAME="DeviceId" TYPE="q">	  	</PROPERTY>
		<!--  second bus  MMCFG bus值的下限 -->
		<PROPERTY NAME="SecBus" TYPE="y" ID="4">	  	</PROPERTY>
		<!--  sub bus     MMCFG bus值的上限-->
		<PROPERTY NAME="SubBus" TYPE="y" ID="5">	  	</PROPERTY>
		<!--  sub bus     MMCFG bus值的上限-->
		<PROPERTY NAME="PciCfgLowBase" TYPE="u">	  	</PROPERTY>
		<!--  sub bus     MMCFG bus值的上限-->
		<PROPERTY NAME="PciCfgLowLimit" TYPE="u">	  	</PROPERTY>
		<!--  sub bus     MMCFG bus值的上限-->
		<PROPERTY NAME="PciCfgHiBaseL" TYPE="u">        </PROPERTY>
		<!--  sub bus     MMCFG bus值的上限-->
		<PROPERTY NAME="PciCfgHiBaseH" TYPE="u">	  	</PROPERTY>
		<!--  sub bus     MMCFG bus值的上限-->
		<PROPERTY NAME="PciCfgHiLimitL" TYPE="u">   	</PROPERTY>
		<!--  sub bus     MMCFG bus值的上限-->
		<PROPERTY NAME="PciCfgHiLimitH" TYPE="u">	  	</PROPERTY>
		<!--  MMIO地址范围个数-->
		<PROPERTY NAME="MmioRangeCount" TYPE="y" >   <VALUE/> </PROPERTY>
		<!--  MMIO地址范围起始地址的低4字节数组 -->
		<PROPERTY NAME="MmioRangeBaseL" TYPE="au">    <VALUE/>  </PROPERTY>
		<!--  MMIO地址范围起始地址高4字节数组 -->
		<PROPERTY NAME="MmioRangeBaseH" TYPE="au">    <VALUE/>  </PROPERTY>
		<!--  MMIO地址范围长度低4字节数组-->
		<PROPERTY NAME="MmioRangeLimitL" TYPE="au">     <VALUE/>   </PROPERTY>
		<!--  MMIO地址范围长度高4字节数组-->
		<PROPERTY NAME="MmioRangeLimitH" TYPE="au">     <VALUE/>  </PROPERTY>
		<!-- pcie stack号 V3平台没有作用,v5平台需要配置 -->
		<PROPERTY NAME="Stack" TYPE="y">     <VALUE/>  </PROPERTY>
		<METHOD NAME="SetBusInfo">
			<PARAMETER DIR="in" NAME="Bus" TYPE="y"/>
			<PARAMETER DIR="in" NAME="SecBus" TYPE="y"/>
			<PARAMETER DIR="in" NAME="SubBus" TYPE="y"/>
		</METHOD>
		<!-- PcieAddrInfo同步类 -->
		<CLASS NAME="AgentPcieAddrInfo"> </CLASS>
	</CLASS>
	
    
	<CLASS NAME="BoardPower">
		<PROPERTY NAME="Name" TYPE="s"></PROPERTY>
        	<PROPERTY NAME="Power" TYPE="q"></PROPERTY>
		<PROPERTY NAME="Position" TYPE="u"></PROPERTY>
		<PROPERTY NAME="Addr" TYPE="y"></PROPERTY>
		<PROPERTY NAME="Chan" TYPE="y"></PROPERTY>
		<PROPERTY NAME="Calibration" TYPE="q"></PROPERTY>
		<PROPERTY NAME="IsContainPca9545" TYPE="y"></PROPERTY>
		<PROPERTY NAME="Pca9545Addr" TYPE="y"></PROPERTY>
		<PROPERTY NAME="Pca9545Chan" TYPE="y"></PROPERTY>
		<PROPERTY NAME="SensorMulti" TYPE="y"></PROPERTY>
		<PROPERTY NAME="IsPollByC51" TYPE="y"></PROPERTY>
		<PROPERTY NAME="Slot" TYPE="y"></PROPERTY>
		<PROPERTY NAME="ChipHealth" TYPE="y"></PROPERTY>
		<METHOD NAME="GetPowerByC51">
			<PARAMETER DIR="out" NAME="PowerValue" TYPE="q"/>
		</METHOD>
    </CLASS>
    
	<!--FUNCTION:Frudata-->
	<!-- 
	描述：Fru统计类, 包含FRU的最大支持个数, getpowerinfo命令的相关参数
	所属模块：Frudata模块(frudata)-->
	<CLASS NAME="FruStatics">  
        <!-- Version Change事件监听的属性, 不需要进行特殊的配置 -->
		<PROPERTY NAME="VerChange" TYPE="u" />
        <!-- 最大支持的Fru个数, 按照Connector的个数来计算, 通常配置一个默认值为10 -->
		<PROPERTY NAME="MaxSupportFru" TYPE="y" />
        <!-- 刀片上电后功率稳定所需的时间, 用于刀片式服务器, 作为get power level命令的一个参数 -->
		<PROPERTY NAME="StableTime" TYPE="y" />
        <!-- 功率因素因子, 用于刀片式服务器, 作为get power level命令的一个参数 -->
		<PROPERTY NAME="PowerMul" TYPE="y" />
        <!-- 单板支持的功率级别, 以数组的形式配置, 功率级别按照从小到大的方式排列, 用于刀片式服务器, 作为get power level命令的一个参数 -->
		<PROPERTY NAME="PowerDraw" TYPE="ay" />     
        <!-- SetVersionChange -->        
 		<METHOD NAME="SetVersionChange">
            <!-- 产生VersionChange的原因 -->
			<PARAMETER DIR="in" NAME="Cause" TYPE="y"/>
		</METHOD>
        <METHOD NAME="UpdateMainboardSlotID">
			<PARAMETER DIR="in" NAME="SlotID" TYPE="y"/>
		</METHOD>       
    </CLASS> 
    
	<!-- 
	描述：Fru信息存储的介质类型、大小以及访问的方式
	所属模块：Frudata模块(frudata)-->	
    <CLASS NAME="FruDev">  	
        <!-- 存储介质的类型:
            (0: 文件系统中的某个文件, 此时StorageLoc为文件名, 类型为s)
            (1: EEPROM, 此时StorageLoc关联到访问EEPROM的accessor, 类型为y)
            (2: FLASH未定义分区, 保留)
            (3: 智能设备,但是上面的FRU保存在PME的文件系统中, 与类型0一致)
            (4: 智能设备的FRU类型, 例如MMC, AMC, 此时StorageLoc为目的IPMB地址, 类型为y)
            (5: 电源的FRU信息保存在51共享内存中, 此时StorageLoc为电源的id号, 类型为y)
        -->
		<PROPERTY NAME="StorageType" TYPE="y" />
        <!-- FRU信息的大小, 通常为2048, 电源的为256 -->
		<PROPERTY NAME="Size" TYPE="q" />
        <!-- 存储介质的访问方式, 存储介质不同时访问方式不一样, 类型也不一样 -->
		<PROPERTY NAME="StorageLoc" TYPE="*" />
        <!-- 存储介质的健康状态 -->
		<PROPERTY NAME="Health" TYPE="y" />
		<!-- 存储介质为eeprom时, 是否有写保护机制  -->
		<PROPERTY NAME="IsWP" TYPE="y" /> 
		<!-- 存储介质为eeprom时, 有写保护机制时的硬件对象  -->
		<PROPERTY NAME="EepromWp" TYPE="y" />
		<!-- 存储介质为eeprom时, 有写保护机制时的配置管脚  -->
		<PROPERTY NAME="WPCfg" TYPE="y" />
		<!-- 存储介质为eeprom时, 有写保护机制时的配置掩码,要求硬件0为打开写保护（不可写），1为关闭写保护（可写）-->
		<PROPERTY NAME="CfgMask" TYPE="y" />
        <CLASS NAME="CafeDev"> 
            <!-- EEPROM描述 -->
            <PROPERTY NAME="CafeDescription"  TYPE="s">	</PROPERTY>
            <!-- 超级块起始偏移 -->
            <PROPERTY NAME="SuperBlockOffset"  TYPE="u">	</PROPERTY>
            <!-- cafe分区大小 -->
            <PROPERTY NAME="CafeBlockSize"  TYPE="u">	</PROPERTY>
            <!-- 格式校验失败动作, 0:不做处理，1:重新格式化 -->
            <PROPERTY NAME="ChkFailAction"  TYPE="y">	</PROPERTY>
            <!-- Cafe分区版本 -->
            <PROPERTY NAME="CafeVer"  TYPE="y">	</PROPERTY>
            <!-- Cafe Accessor 可用于心跳检测-->
            <PROPERTY NAME="CafeAccessor"  TYPE="*">	</PROPERTY>
            <!-- Cafe读写模式,0:正常2字节寻址，不分页;1:1字节寻址，如Atmel AT24C08C，需要分页 -->
            <PROPERTY NAME="CafeRWMode"  TYPE="y">	</PROPERTY>
            <!-- 分页寄存器，默认配置为CafeAccessor关联的Chip -->
            <PROPERTY NAME="CafePageChips"  TYPE="roa">	</PROPERTY>
            <METHOD NAME="ReadCafeRecord">
                <!-- Cafe设备关联的FruId -->
                <PARAMETER TYPE="y" NAME="FruId" DIR="in"/>   
                <!-- Cafe存储信息的键值 -->
				<PARAMETER TYPE="s" NAME="CafeKey" DIR="in"/>      
                <!-- 指定键值对应的Cafe数据 -->
                <PARAMETER TYPE="ay" NAME="CafeData" DIR="out"/>
            </METHOD>	
            <METHOD NAME="WriteCafeRecord">
                <!-- Cafe设备关联的FruId -->
                <PARAMETER TYPE="y" NAME="FruId" DIR="in"/>   
                <!-- Cafe存储信息的键值 -->
				<PARAMETER TYPE="s" NAME="CafeKey" DIR="in"/>      
                <!-- 写入指定键值对应的Cafe数据 -->
                <PARAMETER TYPE="ay" NAME="CafeData" DIR="in"/>
            </METHOD>	
        </CLASS>
		<!-- 多节点共享的FRU -->
		<CLASS NAME="ShareFruDev"> 
			<!-- 关联访问FRU设备时设置锁的寄存器 -->
			<PROPERTY NAME="I2CLockAccessor" TYPE="y"></PROPERTY>
			<!-- 关联访问FRU设备时设置锁的寄存器的超时时间,单位为秒 -->
			<PROPERTY NAME="WaitLockTimeOut" TYPE="y"></PROPERTY>	
			<!-- 关联访问FRU设备锁的状态寄 -->			
			<PROPERTY NAME="LockStatusAccessor" TYPE="y"></PROPERTY>
			<!-- 关联访问FRU设备锁的状态寄存有效值 -->		
			<PROPERTY NAME="LockStatusExpectValue" TYPE="y"></PROPERTY>
		</CLASS>	
	<CLASS NAME="RawEepromFruDev">
		<!-- Eeprom页面chip对象 -->
		<PROPERTY NAME="RawEepromPages" TYPE="roa" />
		<!-- 用于心跳检测 -->
		<PROPERTY NAME="RawEepromAccessor" TYPE="s" />
		<!-- 页面大小 -->
		<PROPERTY NAME="PageSize" TYPE="i"/>
		<!-- 读写块大小 -->
		<PROPERTY NAME="BlockSize" TYPE="i"/>
    </CLASS>

	<!-- PANGEA背板双EEPROM设备 -->
	<CLASS NAME="DoubleEepFruDev">
		<!-- 备用EERPOM -->
		<PROPERTY NAME="BackStorageLoc" TYPE="y" />
		<!-- 备用EERPOM写保护硬件对象 -->
		<PROPERTY NAME="BackEepromWp" TYPE="y" />
	</CLASS>
    </CLASS>

    <!-- 
	描述：解析之后的电子标签信息
	所属模块：Frudata模块(frudata)-->	    
    <CLASS NAME="Elabel">
        <!-- 机框类型, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="ChassisType" TYPE="s" />
        <!-- 机框部件号, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="ChassisPartNumber" TYPE="s" />
        <!-- 机框序列号, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="ChassisSerialNumber" TYPE="s" />
        <!-- 单板生产时间, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="MfgDateTime" TYPE="s" />
        <!-- 单板生产厂商, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="BoardManufacturer" TYPE="s" />
        <!-- 单板产品名称, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="BoardProductName" TYPE="s" />
        <!-- 单板产品名称, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="BoardSerialNumber" TYPE="s" />
        <!-- 单板部件号, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="BoardPartNumber" TYPE="s" />
        <!-- 单板域的版本, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="BoardFileId" TYPE="s" />
        <!-- 单板扩展电子标签信息, 装备写入, 动态生成, 不需要配置 -->        
		<PROPERTY NAME="ExtendLabel" TYPE="s" />
        <!-- 产品序列号, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="ProductSerialNumber" TYPE="s" ID="34" />
        <!-- 产品名称, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="ProductName" TYPE="s" />
        <!-- 产品厂家, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="ProductManufacturer" TYPE="s" />
        <!-- 产品部件号, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="ProductPartNumber" TYPE="s" />
        <!-- 产品版本, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="ProductVersion" TYPE="s" />
        <!-- 产品资产标签, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="ProductAssetTag" TYPE="s" ID="35" />
        <!-- 产品域版本信息, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="ProductFileId" TYPE="s" />
        <!-- 系统序列号, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="SysSerialNum" TYPE="s" />
        <!-- 系统名称, 装备写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="SysName" TYPE="s" />
		<PROPERTY NAME="SystemAreaAccessor" TYPE="s" />
		<!-- 标识此FRU是否支持装备, 如果支持装备, 可以通过IPMI命令更改电子标签信息 -->
		<PROPERTY NAME="IsSupportDft" TYPE="y" />
		<!-- 标识此FRU是否包含系统域, 只有主板的FRU需要使能. -->
		<PROPERTY NAME="IsContainSystemArea" TYPE="y" />
		<!-- 标识此FRU是否支持配置域，配置域会覆盖掉扩展域，0表示不支持配置域，1表示支持配置域 -->
		<PROPERTY NAME="IsSupportConfigArea" TYPE="y" />
		<!-- 电源模块的额定功率, 由电源厂家写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="PsRate" TYPE="q" />
		<!-- 电源模块的模式(DC/AC), 由电源厂家写入, 动态生成, 不需要配置 -->
		<PROPERTY NAME="PsInputMode" TYPE="y" />	
		<!-- 电子标签解析协议, 机架需要配置为0, OSCA配置为1 -->
		<PROPERTY NAME="ParserProcotol" TYPE="y" />			
		<!-- 产品扩展电子标签信息, 装备写入, 动态生成, 不需要配置 -->        
		<PROPERTY NAME="ProductExtendLabel" TYPE="s" />		
		<!-- 产品扩展电子标签信息, 装备写入, 动态生成, 不需要配置 -->        
		<PROPERTY NAME="ChassisExtendLabel" TYPE="s" />		
		<METHOD NAME="SetProductAssetTag">
				<PARAMETER TYPE="s" NAME="assettag" DIR="in"/>                   
                <PARAMETER TYPE="y" NAME="FruId" DIR="in"/>
		</METHOD>		
		<METHOD NAME="ElabelPropertySync">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>		
		<CLASS NAME="AgentElabel"> </CLASS>
		<CLASS ID="56" NAME="PeripheralElabel">
			<PROPERTY NAME="Target" TYPE='ro'>                      </PROPERTY>
			<!-- 电子标签修改通用接口，包括写电子标签和更新电子标签等，frudata模块将电子标签操作命令参数直接作为data数组参数传入和输出 -->
			<METHOD NAME="SetElabel">
				<PARAMETER TYPE="ay" NAME="inputdata" DIR="in"/>
				<PARAMETER TYPE="ay" NAME="outputdata" DIR="out"/>                    
			</METHOD>             
		</CLASS>
    </CLASS>
    
    <!-- 
	描述：现场可替换单元类, 例如: 主板, Raid卡, Riser卡, Mezz卡, 硬盘背板等
	所属模块：Frudata模块(frudata)-->	
	<CLASS ID="43" NAME="Fru">
        <!-- 是否允许访问，用于判断是否可以在本控访问电子标签等数据，可通过表达式灵活配置 -->
        <PROPERTY NAME="IsAllowAccess" TYPE="y"/>
        <!-- PcbId, 需要关联到硬件, 从硬件读取Id. ocp3.0卡由于pcb版本机制改变，需从电子标签读取，外购卡配置0xfe可不去读取-->
        <PROPERTY NAME="PcbId" TYPE="y"/>     
        <!-- PCB版本, 根据PcbId的值进行计算得出, PcbId为1时, 显示.A , 为2时显示.B, 依次类推. -->
		<PROPERTY NAME="PcbVersion" TYPE="s" ID="20"/>
        <!-- 单板ID, 表示单板的类型, 加载xml时会根据boardid加载, 所以该值可以根据xml的名称来确定该值. -->
		<PROPERTY NAME="BoardId" TYPE="q" ID="21"/>
        <!-- FruId, 会根据现有加载的Connector Position的大小来动态生成. -->
		<PROPERTY NAME="FruId" TYPE="y" ID="1"/>
        <!-- Fru名称. -->
		<PROPERTY NAME="Name" TYPE="s" />
        <!-- 引用到Elabel对象, 如果Fru没有电子标签信息可以为空. -->
		<PROPERTY NAME="Elabel" TYPE="ro" />
        <!-- 引用到FruDev对象, 如果Fru没有电子标签信息可以为空. -->
		<PROPERTY NAME="FruDev" TYPE="ro" />
        <!-- Fru的热插拔状态, 引用到对应FRU的HotSwap对象的CurrentHotswapState属性. -->
		<PROPERTY NAME="HotSwapState" TYPE="y" />
        <!-- Fru的热插拔状态, 引用到对应FRU的ChassisPayload对象的PowerStatus属性. -->
		<PROPERTY NAME="PowerOnState" TYPE="y" />		
        <!-- Site地址, 保留. -->
		<PROPERTY NAME="SiteAddr" TYPE="y" />
        <!-- Site类型, 保留. -->
		<PROPERTY NAME="SiteType" TYPE="y" />	
        <!-- 标识一个FRU是否可管理的, payload模块会根据这个属性值来决定是否开启热插拔状态机. -->
		<PROPERTY NAME="IsManaged" TYPE="y"/>
        <!-- FRU类型, TYPE值请参照 IT产品线单板IPMI OEM命令列表.xlsx -->
		<PROPERTY NAME="Type" TYPE="y"/>
        <!-- 转发IPMI的target, 保留. -->
		<PROPERTY NAME="Target" TYPE="y"/>	
        <!-- 健康状态. -->
        <PROPERTY NAME="State" TYPE="y"/>
        <!-- FRU的位置信息, 通常引用到Anchor的Position属性, 该属性用于确定FruId. -->
		<PROPERTY NAME="Position" TYPE="u"/>
        <!-- Cpld状态, 传感器模块侦听该属性用于告警, 根据Cpld测试寄存器的情况进行设置, 默认配置成0, 表示没有告警. -->
		<PROPERTY NAME="CpldStatus" TYPE="y"/>
        <!-- Cpld测试寄存器访问属性, 当此属性关联到Accessor时, Frudata模块会启动任务进行Cpld的监控. -->
		<PROPERTY NAME="CpldTestReg" TYPE="y"/>
	<!-- Cpld2状态, 传感器模块侦听该属性用于告警, 根据Cpld2测试寄存器的情况进行设置, 默认配置成0, 表示没有告警. -->
		<PROPERTY NAME="Cpld2Status" TYPE="y"/>
        <!-- Cpld2测试寄存器访问属性, 当此属性关联到Accessor时, Frudata模块会启动任务进行Cpld的监控. -->
		<PROPERTY NAME="Cpld2TestReg" TYPE="y"/>
		<!-- Cpld3状态, 传感器模块侦听该属性用于告警, 根据Cpld3测试寄存器的情况进行设置, 默认配置成0, 表示没有告警. -->
		<PROPERTY NAME="Cpld3Status" TYPE="y"/>
        <!-- Cpld3测试寄存器访问属性, 当此属性关联到Accessor时, Frudata模块会启动任务进行Cpld的监控. -->
		<PROPERTY NAME="Cpld3TestReg" TYPE="y"/>
        <!-- EEPROM状态, 当此属性关联到Accessor时, Frudata模块会启动任务进行EEPROM的监控. -->
		<PROPERTY NAME="EepStatus" TYPE="y"/>
        <!-- FRU数据有效性判断, Frudata模块会启动任务进行FRU数据的监控. -->
		<PROPERTY NAME="DataValidState" TYPE="y"/>
		<!-- 标记Fru电子标签的Product域是否需要关联其他Fru,不关联了为空 -->
		<PROPERTY NAME="ElabelProductRef" TYPE="ro"/>
		<PROPERTY NAME="RimmObj" TYPE="ro"/>
		<!-- BMC初始化电子标签完成的最大超时时间，提供给装备使用，默认配置为60s -->
		<PROPERTY NAME="InitTimeoutInSec" TYPE="q">		</PROPERTY>
		<!-- 组件唯一标识 -->
		<PROPERTY NAME="ComponentUniqueID" TYPE="s">		</PROPERTY>
		<METHOD NAME="SetMezzMacAddr"></METHOD>
		<METHOD NAME="SetEepromData">
			<PARAMETER TYPE="u" NAME="Offset" DIR="in"/>
			<PARAMETER TYPE="ay" NAME="Data" DIR="in"/>
		</METHOD>
		<METHOD NAME="GetEepromData">
			<PARAMETER TYPE="u" NAME="Offset" DIR="in"/>
			<PARAMETER TYPE="u" NAME="Length" DIR="in"/>
			<PARAMETER TYPE="ay" NAME="Data" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetCanbusDevEepromData">
			<PARAMETER TYPE="u" NAME="Offset" DIR="in"/>
			<PARAMETER TYPE="ay" NAME="Data" DIR="in"/>
		</METHOD>
		<METHOD NAME="GetCanbusDevEepromData">
			<PARAMETER TYPE="u" NAME="Offset" DIR="in"/>
			<PARAMETER TYPE="u" NAME="Length" DIR="in"/>
			<PARAMETER TYPE="ay" NAME="Data" DIR="out"/>
		</METHOD>
		<METHOD NAME="UpdateFruInfo"></METHOD>
		<METHOD NAME="InitFruInfoFromMcu"></METHOD>
		<METHOD NAME="PropertySyncMethod">
			<PARAMETER DIR="in" TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
		</METHOD>
		<METHOD NAME="UpdatePcbVer"></METHOD>
		<METHOD NAME="SetEepromRawData">
            <PARAMETER TYPE="*" NAME="Data" DIR="in"/>
			<PARAMETER TYPE="u" NAME="DataLength" DIR="in"/>
            <PARAMETER TYPE="u" NAME="DefineLength" DIR="in"/>
			<PARAMETER TYPE="i" NAME="Offset" DIR="in"/>
			<PARAMETER TYPE="u" NAME="BlockSize" DIR="in"/>
		</METHOD>

        <METHOD NAME="StopSharedCpldScan">
            <PARAMETER TYPE="y" NAME="StopFlag"      DIR="in"/>
        </METHOD>

        <METHOD NAME="StopEepRoutine">
            <PARAMETER TYPE="y" NAME="RoutineFlag" DIR="in"/>
        </METHOD>

        <!-- 让Fru的cpldstatus快速置起 -->
        <METHOD NAME="SetCpldStatusFail">
        </METHOD>
		<CLASS NAME="AgentFru"> </CLASS>
    </CLASS>
    
	<!-- 
	描述：计算表达式, 常见于根据槽位号计算I2C地址.
	所属模块：主框架 -->	
	<CLASS NAME="Expression">  	
        <!--Value为表达式的输出值，根据实际情况确定数据类型，若不使用，默认修改为d表示double型-->
	     <PROPERTY NAME="Value" TYPE="*" />
	     <!--X为表达式的输入值1，根据实际情况确定数据类型-->
	     <PROPERTY NAME="X" TYPE="*" />
	     <!--Y为表达式的输入值2，根据实际情况确定数据类型-->
	     <PROPERTY NAME="Y" TYPE="*" />
	     <!--Z为表达式的输入值3，根据实际情况确定数据类型-->
	     <PROPERTY NAME="Z" TYPE="*" />
	     <!--Formula为以X、Y、Z组成的三元表达式, 不支持16进制写法，即常数不能以0x开头，常数以10进制形式书写-->
	     <PROPERTY NAME="Formula" TYPE="s" />
    </CLASS>
    
	<!--设备芯片:用于装备命令进行读写操作-->
	<CLASS NAME="DeviceChip"> 
	     <!--设备操作芯片，使用RELATION_ACCESSOR关联-->
	     <PROPERTY NAME="Chip" TYPE="*"></PROPERTY>  
	     <!--设备类型，参见部件类型定义表-->    
	     <PROPERTY NAME="DeviceType" TYPE="y"></PROPERTY>
	     <!--设备槽位，用于查找设备-->
	     <PROPERTY NAME="Slot" TYPE="y"></PROPERTY>
	</CLASS>
    
	<CLASS NAME="Accessor">
        <PROPERTY NAME="Chip" TYPE="ro"></PROPERTY>       
		<PROPERTY NAME="Offset" TYPE="u"></PROPERTY>
		<PROPERTY NAME="Size" TYPE="y"></PROPERTY>
		<PROPERTY NAME="Mask" TYPE="u"></PROPERTY>
		<PROPERTY NAME="Type" TYPE="y"></PROPERTY>
    </CLASS>
	<!-- Chip基类含有WriteTmout和ReadTmout两个属性，但具体对象在配置时可以没有（PME对没有配置的属性使用默认加载），
    因此xml检测对没有配置这两个属性的情况使用白名单（内容为Chip类及其派生类）跳过告警，后续增加派生类要到profile_check.py的
    check_object函数更新白名单 -->
	<CLASS NAME="Chip">
	    <PROPERTY NAME="Addr" TYPE="u"></PROPERTY>
		<PROPERTY NAME="AddrWidth" TYPE="y"></PROPERTY>
		<PROPERTY NAME="OffsetWidth" TYPE="y"></PROPERTY>
        <PROPERTY NAME="PrevChip" TYPE="ro"></PROPERTY>
		<PROPERTY NAME="Index" TYPE="u"></PROPERTY>
		<PROPERTY NAME="Level" TYPE="y"></PROPERTY>
		<PROPERTY NAME="LBusType" TYPE="y"></PROPERTY>
		<PROPERTY NAME="RBusType" TYPE="y"></PROPERTY>
		<PROPERTY NAME="LBus" TYPE="ro"></PROPERTY>
		<PROPERTY NAME="WriteTmout" TYPE="u"></PROPERTY>
		<PROPERTY NAME="ReadTmout" TYPE="u"></PROPERTY>
		<CLASS NAME="Eeprom">
			<PROPERTY NAME="WriteDivTime" TYPE="q"></PROPERTY>
			<PROPERTY NAME="RwBlockNum" TYPE="q"></PROPERTY>		
			<PROPERTY NAME="EepStatus" TYPE="y"></PROPERTY>
            <PROPERTY NAME="WriteCount" TYPE="u"></PROPERTY>
            <METHOD NAME="SetEepromStatus">
                <PARAMETER TYPE="y" NAME="State" DIR="in"/>
            </METHOD>
            <METHOD NAME="E2pSyncSaveTemporary">
                <PARAMETER TYPE="*" NAME="*" DIR="in"/>
            </METHOD>
	    </CLASS>
        <!-- begin: add by h00471421, 新增器件 -->
        <!-- 通用前级芯片-->
        <CLASS NAME="CommPrevChip">
            <!-- Host Bus芯片侧的控制信号，可以是GPIO，CPLD等,访问LBus前，先通过HBus选定扩展的通道 -->
            <PROPERTY NAME="HBus" TYPE="ro"> </PROPERTY>
            <!-- 器件选通道命令时延，用于器件选通消耗时长，避免软件比硬件跑的快。单位:ms -->
            <PROPERTY NAME="Delay" TYPE="u"> </PROPERTY>
        </CLASS>
        <!-- end: add by h00471421, 新增器件 -->
        <!-- begin: add by h00371221, 新增器件 -->	        
        <CLASS NAME="Ina220">
			<PROPERTY NAME="ConfigReg" TYPE="q"></PROPERTY>  <!-- 0x7ff -->
			<!-- Calibration = 4096/（5*R），其中: R为硬件输入监测电阻值的毫欧值-->	
            <PROPERTY NAME="Calibration" TYPE="q"></PROPERTY>
            <PROPERTY NAME="PowerInMultiplier" TYPE="q"></PROPERTY>
	        <PROPERTY NAME="PowerInDivisor" TYPE="q"></PROPERTY>
	    </CLASS>	
        <!-- end: add by h00371221, 新增器件 -->        
	    <!-- begin: add by c00186385, 新增器件 -->
	    <CLASS NAME="FanChip">
			<PROPERTY NAME="MaxSpeed" TYPE="q"></PROPERTY>
			<PROPERTY NAME="HighTempAlarm" TYPE="q"></PROPERTY>		
			<PROPERTY NAME="LowTempAlarm" TYPE="q"></PROPERTY>	
			<PROPERTY NAME="Factor" TYPE="q"></PROPERTY>
			<!-- 升级MCU时，写数据前预留给MCU清空flash的时间(单位：0.1ms) -->
			<PROPERTY NAME="DelayWrite" TYPE="u"></PROPERTY>
			<!-- 升级MCU时，写每一帧后进行读校验的间隔时间(单位：0.1ms) -->
			<PROPERTY NAME="DelayWR" TYPE="u"></PROPERTY>
			<!-- 升级MCU时，校验每一帧的间隔(单位：0.1ms) -->
			<PROPERTY NAME="DelayRead" TYPE="u"></PROPERTY>
			<!-- 升级MCU时，单帧数据长度 -->
			<PROPERTY NAME="FrameLength" TYPE="u"></PROPERTY>
	    </CLASS>
		<!-- begin: add by c00186385, 新增器件 -->	
		<!-- begin: add by hejun, 新增器件 -->
		<CLASS NAME="Pca9555">
			<PROPERTY NAME="ResetChip" TYPE="ro"></PROPERTY>
		</CLASS>	
		<!-- begin: add by xwx388597, 新增器件 -->
		<CLASS NAME="Vrd">
			<PROPERTY NAME="DelayInOp" TYPE="u"></PROPERTY>
		</CLASS>
		<!-- end: add by xwx388597, 新增器件 -->
		<CLASS NAME="Pca9541"/>
		<CLASS NAME="Pca9545">
			<PROPERTY NAME="ResetChip" TYPE="ro"></PROPERTY>
		</CLASS>
		<CLASS NAME="Lm75Select">
			<PROPERTY NAME="ResetChip" TYPE="ro"></PROPERTY>
		</CLASS>
		<!-- 按照协议规则，若要用81写命令，需要在accesor信号offset的前面加上 01 , 原因为pme会取高16bit作为80命令的偏移-->
		<CLASS NAME="Energy_Canchip">
			<PROPERTY NAME="Speed" TYPE="u"></PROPERTY>
			<PROPERTY NAME="Protocol" TYPE="y"></PROPERTY>
		</CLASS>
		<CLASS NAME="Pca9544">
			<PROPERTY NAME="ResetChip" TYPE="ro"></PROPERTY>
		</CLASS>
		<CLASS NAME="Vddq"/>
		<CLASS NAME="Lm75">
			<PROPERTY NAME="ResetChip" TYPE="ro"></PROPERTY>
		</CLASS>
		<CLASS NAME="Adt7481">
			<PROPERTY NAME="ResetChip" TYPE="ro"></PROPERTY>
		</CLASS>
		<CLASS NAME="Lm96080"/>	
		<CLASS NAME="Ads78"/>
		<CLASS NAME="Rtc"/>		
		<CLASS NAME="Pt7c4388"/>		
		<CLASS NAME="Wave">
            <PROPERTY NAME="HighLevelDuration" TYPE="q"> </PROPERTY>
            <PROPERTY NAME="LowLevelDuration" TYPE="q"> </PROPERTY>	
			<PROPERTY NAME="Offset" TYPE="u"> </PROPERTY>	
			<PROPERTY NAME="Mask" TYPE="u"> </PROPERTY>	
			<PROPERTY NAME="Type" TYPE="y"> </PROPERTY>	
        </CLASS>	
	    <CLASS NAME="xeonphi_chip">	
	    </CLASS>
		<!-- end: add by hejun, 新增器件 -->
		<!-- begin: add by z00403145, 9032 IO框CPLD读写风扇PWM大于255时使用 -->
		<CLASS NAME="FanCpld"/>
		<!-- end: add by z00403145, 9032 IO框CPLD读写风扇PWM大于255时使用 -->
        <CLASS NAME="CpldChip"/>    <!-- 支持位操作. 通过Type区分位还是块操作, 0: bit, 1: block -->
		<CLASS NAME="Pex8796"/>	
		<CLASS NAME="Pex8725"/>
		<CLASS NAME="Pex9765"/>	
		<!-- Beging ADD by z00382105 -->
		<CLASS NAME="Idt0832"/>		
		<!-- End ADD by z00382105 -->	
		<CLASS NAME="PswCpld">
		    <PROPERTY NAME="EEPNum" TYPE="y"> </PROPERTY>	
		</CLASS>		
		<CLASS NAME="FtCpuTemp">
			<PROPERTY NAME="RefCpuObj" TYPE="ro"> </PROPERTY>
		</CLASS>
        <CLASS NAME="SMC"/>
        <CLASS NAME="SMBusChip"/>
    </CLASS>
	
	
	<CLASS NAME="Bus">
        <PROPERTY NAME="Id" TYPE="y"/>
		<PROPERTY NAME="Type" TYPE="y"/>
		<PROPERTY NAME="LChip" TYPE="ro"/>
		<CLASS NAME="HisportI2c"/>
		<CLASS NAME="I2cOverLan">
			<!-- 目的单板IP地址 -->
			<PROPERTY NAME="TargetIP" TYPE="s"/>
			<!-- 端口号 -->
			<PROPERTY NAME="TargetPort" TYPE="q"/>
		</CLASS>
		<CLASS NAME="I2c">     
			<PROPERTY NAME="Speed" TYPE="y"/>
			<PROPERTY NAME="Mode" TYPE="y"/>
			<PROPERTY NAME="SlaveAddr" TYPE="y"/>
            <PROPERTY NAME="UseSmbus" TYPE="y"> </PROPERTY>
			<CLASS NAME="SwitchI2c">  
                <!-- 切换到本端的指示寄存器偏移地址 -->
                <PROPERTY NAME="NodeBusyByte" TYPE="y"> </PROPERTY>
                <!-- 切换到本端的指示寄存器位掩码 -->
                <PROPERTY NAME="NodeBusyMask" TYPE="y"> </PROPERTY>
                <!-- 切换到对端的指示寄存器偏移地址 -->
                <PROPERTY NAME="PeerBusyByte" TYPE="y"> </PROPERTY>
                <!-- 切换到对端的指示寄存器位掩码 -->
                <PROPERTY NAME="PeerBusyMask" TYPE="y"> </PROPERTY>
                <!-- 切换控制器对象引用 -->				
                <PROPERTY NAME="Switch" TYPE="ro"> </PROPERTY>
		    </CLASS>
        </CLASS>
		<CLASS NAME="TwinsI2c">     
			<PROPERTY NAME="Speed" TYPE="y"/>
			<PROPERTY NAME="Mode" TYPE="y"/>
			<PROPERTY NAME="SlaveAddr" TYPE="y"/>
			<PROPERTY NAME="NodeBusy" TYPE="ro"/>
			<PROPERTY NAME="PeerBusy" TYPE="ro"/>
        </CLASS>
		<CLASS NAME="Gpio">
            <!-- GPIO模式 0:input 读取, 1:output 写入 -->
			<PROPERTY NAME="GpioDirection" TYPE="y"/>
            <!-- 取反标志：bit0=1 读取反; bit1=1 写取反 -->
			<PROPERTY NAME="ReverseBit" TYPE="y"/>
			<PROPERTY NAME="Bit0GpioNum" TYPE="y"/>
			<PROPERTY NAME="Bit1GpioNum" TYPE="y"/>
			<PROPERTY NAME="Bit2GpioNum" TYPE="y"/>
			<PROPERTY NAME="Bit3GpioNum" TYPE="y"/>
			<PROPERTY NAME="Bit4GpioNum" TYPE="y"/>
			<PROPERTY NAME="Bit5GpioNum" TYPE="y"/>
			<PROPERTY NAME="Bit6GpioNum" TYPE="y"/>
			<PROPERTY NAME="Bit7GpioNum" TYPE="y"/>
	    </CLASS>
	    <CLASS NAME="LocalBusMmap">
	    	<!-- 1711芯片默认值是1，1710不可配置 -->
	    	<PROPERTY NAME="Addr2Data_Num" TYPE="y"/>
	    </CLASS>
	    <!-- 解决CPLD共享内存被踩问题,增加LocalBusMix类,读cpld通过共享内存,写cpld通过IOCTROL -->
	    <CLASS NAME="LocalBusMix">
		<!-- 1711芯片默认值是1，1710不可配置 -->
		<PROPERTY NAME="Addr2Data_Num" TYPE="y"/>
	    </CLASS>
		<CLASS NAME="CpldI2c"/>
        <CLASS NAME="VirtualI2c">
            <PROPERTY NAME="CmdReady" TYPE="u"/>           <!-- 软件先写0，再写1，触发一次命令准备ok。 -->
            <PROPERTY NAME="RepairSet" TYPE="u"/>          <!-- 1表示需要逻辑下发repair命令(9个时钟) -->
                                <!-- 备注：该寄存器为1表示当前软件下发的CPLD的命令为repair命令，具体的repair命令使能，还需配置I2C命令准备ok寄存器(0x200等)和对应I2C CARD ID寄存器(0x202等)。 -->
            <PROPERTY NAME="ChannelId" TYPE="u"/>          <!-- IIC通道ID,1个IP对应10个通道 -->
            <PROPERTY NAME="FirstWrNumLow" TYPE="u"/>   <!-- bit [7:0]  bit [10:0]表示第一次连续送给I2C总线上的所有字节数，包含I2C设备号、寄存器、待写入I2C设备的数据等之和； -->
            <PROPERTY NAME="FirstWrNumHi" TYPE="u"/>    <!-- bit [2:0]  对应 bit [10:8]； -->
            <PROPERTY NAME="RestarCmdNum" TYPE="u"/>    <!-- bit [4:0]为Restart后需要再次连续送给I2C总线上的所有字节数，包含I2C设备号、寄存器、待写入I2C设备的数据等之和。 -->
                                                        <!-- 该寄存器可能为0（非Restart模式时）。该寄存器最大支持5bit； -->
            <PROPERTY NAME="RestarReadNum" TYPE="u"/>      <!-- bit [5:0] 寄存器为需要从I2C Slave设备读取的字节数。该寄存器最大为6bit，支持63Bytes。如果非读命令时，该寄存器为0； -->
            <PROPERTY NAME="Status" TYPE="u"/>          
            <PROPERTY NAME="ExcuMask" TYPE="y"/>          <!-- bit 5 1表示当前命令执行完成。软件发现bit5为1后，再依次判断bit4/bit3的情况，来得出该条I2C命令执行状态； -->
            <PROPERTY NAME="AckMask" TYPE="y"/>          <!-- bit 4 0表示正常执行完成;1表示NAK； -->
            <PROPERTY NAME="OutMask" TYPE="y"/>         <!-- bit 3 0表示无超时，1表示超时； -->
            <PROPERTY NAME="RamAddrLow" TYPE="u"/>         <!-- bit [7:0] BMC访问的RAM空间的地址指定寄存器，整个访问地址为10位，这个寄存器对应低8位。 -->
            <PROPERTY NAME="RamAddrHi" TYPE="u"/>          <!-- bit [2:0] BMC访问的RAM空间的地址指定寄存器，整个访问地址为10位，这个寄存器对应高8位。 -->
            <PROPERTY NAME="RamData" TYPE="u"/>            <!-- bit [7:0] 8位数据，RAM中对应地址位的数据输出。 -->
                                <!-- 使用说明：读出的方式如下：先往0x208和0x209写地址，共11位，再读0x20a，读出的数据即是0x208和0x209指定的地址的数据。-->
                                <!-- 当需要将数据写入RAM时，先往0x208和0x209写地址，共11位，再将要写入的数据写入此寄存器。-->
                                <!-- 从I2C设备中读取的数据也存在该SRAM中，该SRAM为2048Bytes，前面1.5KBytes为小系统操作I2C对应的数据空间(0x600~0x7ff)，后面0.5K字节为I2C读命令从slave设备获取的数据。-->
                                <!-- 比如从I2C设备读取2字节，则该2字节的第一字节存放在该SRAM的地址为0x600(1024*1.5)中，第2字节存放在0x601地址中。-->
                                <!-- 因此软件下发一个读取2字节的命令后，查询逻辑状态0x207确认完成后，就可以开始写0x208/0x209写入0x600，然后读取0x20a获取第一个字节。-->
                                <!-- 再向写0x208/0x209写入0x601获取第二个字节；如果更多的字节，依次类推。-->
            <PROPERTY NAME="TimeFlagAddr" TYPE="u"/>       <!-- bit0 为1，本控时隙，表示正在运行,不能发start，bit0 为0，非本控时隙，可以发start -->
            <PROPERTY NAME="ReadOffset" TYPE="u"/>
            <PROPERTY NAME="WriteOffset" TYPE="u"/>	
            <PROPERTY NAME="StopPollSet" TYPE="y"/>        <!-- 1:表示本框存在控制器升级某接口卡；此时逻辑不轮询I2C时隙，由BMC保证互斥，禁止BSP/IMU的I2C命令执行。 -->
                                                            <!-- 0：不存在接口卡升级，逻辑进行多控直接的时隙切换。 -->
            <PROPERTY NAME="TimeoutSet" TYPE="y"/>         <!-- bit 0设置i2c访问超时时间，单位10ms -->		
            <PROPERTY NAME="CpldCoreRepair" TYPE="y"/>     <!-- 复位cpld core的寄存器地址 -->		
            <!--  设置CPLD-ii2C的超时时间-->
            <METHOD NAME="SetTimeOutValue">
                <PARAMETER TYPE="y" NAME="TimeOutVal" DIR="in"/>
            </METHOD>	
            <!--  复位CPLD-ii2C的IP核-->
            <METHOD NAME="ResetCpldCore">
                <PARAMETER TYPE="y" NAME="ResetVal1" DIR="in"/>
                <PARAMETER TYPE="y" NAME="ResetVal2" DIR="in"/>
            </METHOD>
        </CLASS>
        <CLASS NAME="CpldSpi">
            <PROPERTY NAME="CtrlID" TYPE="y"></PROPERTY>
            <PROPERTY NAME="ChipSelId" TYPE="y"></PROPERTY>
            <PROPERTY NAME="ProType" TYPE="y"></PROPERTY>
            <PROPERTY NAME="Baud" TYPE="u"></PROPERTY>
            <PROPERTY NAME="FrameLen" TYPE="y"></PROPERTY>
            <PROPERTY NAME="ClockEdge" TYPE="y"></PROPERTY>
            <PROPERTY NAME="IdleClockPol" TYPE="y"></PROPERTY>
        </CLASS>
		<CLASS NAME="InnerBus"/>
		<CLASS NAME="Pwm" />
	    <CLASS NAME="Fantech">
			<PROPERTY NAME="Coefficient" TYPE="y"/>
		</CLASS>
        <CLASS NAME="Jtag">
			<!-- 生效动作完成后,延迟时间,毫秒 -->
			<!-- 升级CPLD时,会先加载固件文件,然后加载激活文件,激活文件通过JTAG传输给CPLD后,CPLD需要时间(百毫秒级)来生效固件文件 -->
			<!-- 如果不预留生效时间,会导致生效时间内针对CPLD寄存器的读写操作不可预知 -->
			<PROPERTY NAME="ValidateTime" TYPE="u">		</PROPERTY>
			<PROPERTY NAME="ChipRstGpioNum" TYPE="y">		</PROPERTY>
			<PROPERTY NAME="JtagCpldReset" TYPE="ay">		</PROPERTY>
            <PROPERTY NAME="JtagCpldOffset" TYPE="ay">		</PROPERTY>
            <PROPERTY NAME="jtpg_tck_bit" TYPE="ay">		</PROPERTY>
            <PROPERTY NAME="jtpg_tms_bit" TYPE="ay">		</PROPERTY>
            <PROPERTY NAME="jtpg_tdo_bit" TYPE="ay">		</PROPERTY>
            <PROPERTY NAME="jtpg_tdi_bit" TYPE="ay">		</PROPERTY>
            <PROPERTY NAME="TckGpioNum" TYPE="y">		</PROPERTY>
            <PROPERTY NAME="TmsGpioNum" TYPE="y">		</PROPERTY>
            <PROPERTY NAME="TdoGpioNum" TYPE="y">		</PROPERTY>
            <PROPERTY NAME="TdiGpioNum" TYPE="y">		</PROPERTY>
        </CLASS>
		<CLASS NAME="Mdio">
			<PROPERTY NAME="ClauseType" TYPE="s"/>
			<CLASS NAME="Mdio45">
				<PROPERTY NAME="CpldCs" TYPE="u"/>
				<PROPERTY NAME="BaseAddr" TYPE="u"/>
			</CLASS>
		</CLASS>
		<CLASS NAME="Canbus">
		</CLASS>
	 </CLASS>		

	<CLASS NAME="BlockStorage">
	    <PROPERTY NAME="Device" TYPE="ay"></PROPERTY>
		<PROPERTY NAME="Offset" TYPE="u"></PROPERTY>
		<PROPERTY NAME="Size" TYPE="u"></PROPERTY>
	</CLASS>
	<CLASS NAME="Connector">
	    <!-- 连接的部件的识别id（如boardid)，关联id检测accessor -->
        <PROPERTY NAME="Id" TYPE="u">		</PROPERTY>
		<PROPERTY NAME="AuxId" TYPE="u">		</PROPERTY>
		<!-- 连接的部件的在位，关联在位检测accessor -->
		<PROPERTY NAME="Present" TYPE="y">		</PROPERTY>
		<!-- 连接的部件的槽位号，同类部件中的编号 -->
		<PROPERTY NAME="Slot" TYPE="y">		</PROPERTY>
		<!-- 连接的部件类型，MEZZ卡、PCI-E标卡 -->
		<PROPERTY NAME="Type" TYPE="s">		</PROPERTY>
		<!-- 连接的部件的位置号，所有部件的统一编号 -->
		<PROPERTY NAME="Position" TYPE="u">		</PROPERTY>		
		<!-- 连接的BOM编码，硬件全局归一 -->
		<PROPERTY NAME="Bom" TYPE="s">		</PROPERTY>
        <!-- 连接器丝印位号文本，如J1，J2-J5等-->
		<PROPERTY NAME="SilkText" TYPE="s">		</PROPERTY>		
		<PROPERTY NAME="Bus" TYPE="roa">	</PROPERTY>
		<PROPERTY NAME="Chip" TYPE="roa">	</PROPERTY>
		<!-- 父节点传给子节点的属性或名字 -->
		<PROPERTY NAME="Legacy" TYPE="roa">	</PROPERTY>
		<PROPERTY NAME="Lib" TYPE="s">		</PROPERTY>
		<PROPERTY NAME="ProductId" TYPE="y">		</PROPERTY>
		
		<!-- Connecter同步类 -->
		<CLASS NAME="AgentConnector"> </CLASS>
    </CLASS>
	<CLASS NAME="Anchor">
	   <PROPERTY NAME="Slot" TYPE="y">			</PROPERTY>
       <PROPERTY NAME="Position" TYPE="u">  	</PROPERTY>
	   <PROPERTY NAME="SilkText" TYPE="s">		</PROPERTY>
	   <PROPERTY NAME="Bus" TYPE="roa">       	</PROPERTY>
	   <PROPERTY NAME="Chip" TYPE="roa">       	</PROPERTY>
	   <!-- 子节点继承父节点的属性或名字 -->
	   <PROPERTY NAME="Legacy" TYPE="roa">	</PROPERTY>
    </CLASS>
    
	<!--FUNCTION:snmp-->
	<!-- 
	描述：Snmp配置信息类
	所属模块：snmp管理模块(snmp_manage_app)-->
	<CLASS NAME="Snmp" ID="1">
		<!--
		带有EXPORT字段的属性表示在配置导入导出功能中可导出的属性。EXPORT字段是一个byte类型(8bit)的整数。
		其中高4bit为Component Id，表示导出属性到哪个Component。
		当前支持的Component有BMC和RAID两个：Component Id分别为0x1和0x2。
		低4bit表示导出的类型(目前支持的导出类型有三种):
		1.正常导出属性值，0x01
		2.导出但在导出的文件中被注释掉，0x02
		3.导出但在导出的文件中被注释掉，0x03
		例如：
		EXPORT="17" 表示当前属性可导出到BMC，因为0x11=17；
		EXPORT="18" 表示当前属性导出到BMC但在导出的文件中被注释掉，因为0x12=18；
		EXPORT="19" 表示当前属性导出BMC但在导出的文件中被注释掉，且属性值显示为“******”隐藏起来，因为0x13=19。
		EXPORT="33" 表示当前属性可导出到RAID，因为0x21=33；
		-->
		<!-- 只读团体名 -->
		<PROPERTY NAME="ROCommunity" TYPE="s" ID="1">		</PROPERTY>
		<!-- 只读团体名 -->
		<PROPERTY NAME="RWCommunity" TYPE="s" ID="2">		</PROPERTY>
		<!-- snmp服务使能状态，0：禁止使能；1：使能-->
		<PROPERTY NAME="State"       TYPE="y" ID="3" EXPORT="17">		</PROPERTY>
		<!-- snmp服务V1版本使能状态，0：禁止使能；1：使能-->
		<PROPERTY NAME="V1State"     TYPE="y" ID="4" EXPORT="17">		</PROPERTY>
		<!-- snmp服务V2C版本使能状态，0：禁止使能；1：使能-->
		<PROPERTY NAME="V2CState"    TYPE="y" ID="5" EXPORT="17">		</PROPERTY>
		<!-- 新版本该属性废弃, 使用V3Status以解决版本回退兼容新问题, 0：禁止使能；1：使能 -->
		<PROPERTY NAME="V3State"     TYPE="y">		</PROPERTY>
		<!-- 新版本SNMPv3使能状态使用该属性, 以解决版本回退兼容性问题,
			导出的属性在老版本不可使能，暂注释掉 0：禁止使能；1：使能-->
		<PROPERTY NAME="V3Status"     TYPE="y" ID="6" EXPORT="18">		</PROPERTY>
		<!-- snmp服务端口号 -->
		<PROPERTY NAME="PortID"      TYPE="i" ID="7" EXPORT="17">		</PROPERTY>
		<!-- snmp鉴权算法， 0：MD5; 1:SHA; 2:SHA1(注：SHA1和SHA在处理上完全相同) 3:SHA256 4:SHA384 5:SHA512-->
		<PROPERTY NAME="AuthProtocol"      TYPE="y">		</PROPERTY>	
		<!-- snmp加密算法，0：无；1：DES；2：AES 3：AES256-->
		<PROPERTY NAME="PrivProtocol"      TYPE="y">		</PROPERTY>
		<!-- snmp索引id, 用于定制化索引 -->
		<PROPERTY NAME="ServiceID" TYPE="u" ID="10">		</PROPERTY>
		<!-- snmpV1V2C登规则 -->
		<PROPERTY NAME="SNMPV1V2CPermitRuleIds"    TYPE="y" ID="11" EXPORT="17">		</PROPERTY>
		<!-- snmp超长口令使能状态，0：禁用；1：启用-->
		<PROPERTY NAME="LongPasswordEnable"       TYPE="y" ID="12" EXPORT="17">		</PROPERTY>
		<!-- snmp开关snmp V2C的写团体名 0：禁止使能；1：使能-->
		<PROPERTY NAME="RWCommunityState"     TYPE="y" ID="13" EXPORT="17">		</PROPERTY>
		<!-- snmp.sysName同步HostName开关 0：禁用；1：使能-->
		<PROPERTY NAME="IsSyncHostName"     TYPE="y" ID="14" EXPORT="17">		</PROPERTY>
		<!-- snmp V3 引擎ID的MAC与外出网口MAC不一致时，是否更新引擎ID：0：不更新；1：mac已变更 -->
		<PROPERTY NAME="IsUpdateEngineID" TYPE="y" ID="15" EXPORT="17">		</PROPERTY>
		<!-- snmp引擎id -->
		<PROPERTY NAME="OldEngineID" TYPE="s">		</PROPERTY>
		<!-- snmp团体名加密密钥 -->
		<PROPERTY NAME="SnmpCommWorkKey" TYPE="s" >  </PROPERTY>
		<!-- snmp团体名根密钥组件 -->
		<PROPERTY NAME="SnmpCommComponent" TYPE='ay'> </PROPERTY>
        <!-- snmp团体名主密钥Id -->
        <PROPERTY NAME="SnmpCommMasterKeyId" TYPE='u'> </PROPERTY>
		<!-- snmp mgmt.mib-2.system.sysContact -->
		<PROPERTY NAME="sysContact" TYPE="s" ID="16" EXPORT="17">  </PROPERTY>
		<!-- snmp mgmt.mib-2.system.sysName -->
		<PROPERTY NAME="sysName" TYPE="s" >  </PROPERTY>
		<!-- snmp mgmt.mib-2.system.sysLocation -->
		<PROPERTY NAME="sysLocation" TYPE="s" ID="17" EXPORT="17">  </PROPERTY>
		<!-- 方法：设置snmp服务只读团体名 -->
		<METHOD NAME="SetSnmpROCommunity" ID="1">
			<PARAMETER TYPE="s" NAME="ROCommunity" DIR="in"/>
		</METHOD>
		<!-- 方法：设置snmp服务读写团体名 -->
		<METHOD NAME="SetSnmpRWCommunity" ID="2">
			<PARAMETER TYPE="s" NAME="RWCommunity" DIR="in"/>
		</METHOD>
		<!-- 方法：设置snmp服务使能状态 -->
		<METHOD NAME="SetSnmpState" ID="3">
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>
		<!-- 方法：设置snmp服务V1、V2C、V3使能状态 -->
		<METHOD NAME="SetSnmpVersionState">
			<PARAMETER TYPE="y" NAME="Version" DIR="in"/>
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>
		<!-- 方法：设置snmp服务V1使能状态 -->
		<METHOD NAME="SetSnmpV1VersionState" ID="4">
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>
		<!-- 方法：设置snmp服务V2C使能状态 -->
		<METHOD NAME="SetSnmpV2CVersionState" ID="5">
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>
		<!-- 方法：设置snmp服务V3使能状态 -->
		<METHOD NAME="SetSnmpV3VersionState" ID="6">
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>
		<!-- 方法：设置snmp服务端口号 -->
		<METHOD NAME="SetSnmpPortID" ID="7">
			<PARAMETER TYPE="i" NAME="PortID" DIR="in"/>
		</METHOD>
		<!-- 方法：添加snmp用户名 -->
		<METHOD NAME="AddSnmpUserName">
			<PARAMETER TYPE="s" NAME="user_name" DIR="in"/>
		</METHOD>
		<!-- 方法：删除snmp用户名 -->
		<METHOD NAME="DelSnmpUserName">
			<PARAMETER TYPE="s" NAME="user_name" DIR="in"/>
		</METHOD>
		<!-- 方法：修改snmp用户密码 -->
		<METHOD NAME="SetSnmpUserPassword">
			<PARAMETER TYPE="s" NAME="user_name" DIR="in"/>
			<PARAMETER TYPE="s" NAME="user_password" DIR="in"/>
			<!-- V3产品传入鉴权密码，V5产品传入加密密码 -->
			<PARAMETER TYPE="s" NAME="privacy_password" DIR="in"/>
		</METHOD>
		<!-- 方法：添加snmp用户密码 -->
		<METHOD NAME="AddSnmpUserPassword">
			<PARAMETER TYPE="s" NAME="user_name" DIR="in"/>
			<PARAMETER TYPE="s" NAME="user_password" DIR="in"/>
			<PARAMETER TYPE="s" NAME="privacy_password" DIR="in"/>			
		</METHOD>
		<!-- 方法：删除snmp用户密码 -->
		<METHOD NAME="DelSnmpUserPassword">
			<PARAMETER TYPE="s" NAME="user_name" DIR="in"/>
		</METHOD>
		<!-- 方法：校验snmp用户信息 -->
		<METHOD NAME="CompareSnmpUserPassword">
			<PARAMETER TYPE="s" NAME="user_name" DIR="in"/>
			<PARAMETER TYPE="s" NAME="user_password" DIR="in"/>
			<!-- V3产品传入鉴权密码，V5产品传入加密密码-->
			<PARAMETER TYPE="s" NAME="privacy_password" DIR="in"/>
		</METHOD>
		<!-- 方法：获取snmp用户信息 -->
		<METHOD NAME="GetSnmpUserInfo">
			<PARAMETER TYPE="ay" NAME="user_info" DIR="out"/>
			<PARAMETER TYPE="i" NAME="user_num" DIR="out"/>
		</METHOD>
		<!-- 方法：获取snmp用户信息（HEX） -->
		<METHOD NAME="GetSnmpUserHexInfo">
			<PARAMETER TYPE="ay" NAME="user_info" DIR="out"/>
			<PARAMETER TYPE="i" NAME="user_num" DIR="out"/>
		</METHOD>
		<!-- 方法：重启snmp服务 -->
		<METHOD NAME="RebootSnmp">
		</METHOD>	
		<!-- 方法：设置snmp鉴权算法 -->
		<METHOD NAME="SetSnmpAuthProtocol">
			<PARAMETER TYPE="y" NAME="auth_protocol" DIR="in"/>
		</METHOD>		
		<!-- 方法：设置snmp加密算法 -->
		<METHOD NAME="SetSnmpPrivProtocol">
			<PARAMETER TYPE="y" NAME="priv_protocol" DIR="in"/>
		</METHOD>
		<!-- 方法：设置snmp超长口令 -->
		<METHOD NAME="SetLongPasswordEnable" ID="12">
			<PARAMETER TYPE="y" NAME="long_password_enable" DIR="in"/>
		</METHOD>
		<!-- 方法：设置开关snmp V2C的写团体名 -->
		<METHOD NAME="SetRWCommunityState" ID="13">
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>			
		<!-- 方法：从配置文件删除NoAccess用户信息 -->
		<METHOD NAME="DeleteNoAccessSnmpUser">
			<PARAMETER TYPE="s" NAME="user_name" DIR="in"/>
		</METHOD>
		<!-- 方法：设置Snmp用户权限 -->
		<METHOD NAME="SetSnmpUserPrivilege">
			<!-- 参数1：用户名 -->
			<PARAMETER TYPE="s" NAME="user_name" DIR="in"/>
			<!-- 参数2：权限，2：普通用户；3：操作员；4：管理员；15：无权限 -->
			<PARAMETER TYPE="y" NAME="user_priv" DIR="in"/>
		</METHOD>
		<!-- 方法：设置启用的登录规则编号，启用则对应比特位置1 -->
		<METHOD NAME="SetSNMPV1V2CPermitRuleIds" ID="11">
			<PARAMETER TYPE="y" NAME="permit_rule_ids" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>
		<!-- 方法：设置 mgmt.mib-2.system.sysContact -->
		<METHOD NAME="SetsysContact" ID="16">
			<PARAMETER TYPE="s" NAME="sysContact" DIR="in"/>
		</METHOD>
		<!-- 方法：设置 mgmt.mib-2.system.sysName -->
		<METHOD NAME="SetsysName">
			<PARAMETER TYPE="s" NAME="sysName" DIR="in"/>
		</METHOD>
		<!-- 方法：设置 mgmt.mib-2.system.sysLocation -->
		<METHOD NAME="SetsysLocation" ID="17">
			<PARAMETER TYPE="s" NAME="sysLocation" DIR="in"/>
		</METHOD>
        <METHOD NAME="PropertySyncMethod">
            <PARAMETER DIR="in" TYPE="*" NAME="*" />
            <PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
		<METHOD NAME="SetHostNameSyncFlag" ID="14">
			<PARAMETER TYPE="y" NAME="Flag" DIR="in"/>
		</METHOD>	
		<!-- 方法：设置引擎ID的MAC与外出网口MAC不一致时，是否更新引擎ID -->
		<METHOD NAME="SetIsUpdateEngineID" ID="15">
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>
		<METHOD NAME="UpdateSnmpCommCiphertext">
			<PARAMETER DIR="in" NAME="NewKeyId" TYPE="u"/>
        </METHOD>
        <METHOD NAME="UpdateSnmpPasswordByRename">
            <PARAMETER TYPE="s" NAME="old_user_name" DIR="in"/>
            <PARAMETER TYPE="s" NAME="user_name" DIR="in"/>
        </METHOD>
        <!-- 方法：获取snmp服务只读团体名 -->
		<METHOD NAME="GetSnmpROCommunity" ID="20">
			<PARAMETER TYPE="s" NAME="ROCommunity" DIR="out"/>
		</METHOD>
		<!-- 方法：获取snmp服务读写团体名 -->
		<METHOD NAME="GetSnmpRWCommunity" ID="21">
			<PARAMETER TYPE="s" NAME="RWCommunity" DIR="out"/>
		</METHOD>
    </CLASS>
	
	<!-- 
	描述：PrivilegeAgent权限代理类
	所属模块：ui_manage模块(ui_manage)-->	
    <CLASS NAME="PrivilegeAgent">
		<!-- 待拷贝文件路径链表 -->
		<PROPERTY NAME="PathList" TYPE="as">  </PROPERTY>
		<!-- 方法：拷贝文件 -->
		<METHOD NAME="CopyFile">
		<PARAMETER TYPE="s" NAME="source_file" DIR="in"/>
		<PARAMETER TYPE="s" NAME="destination_file" DIR="in"/>
		<PARAMETER TYPE="u" NAME="own_uid" DIR="in"/>
		<PARAMETER TYPE="u" NAME="own_gid" DIR="in"/>
		<PARAMETER TYPE="u" NAME="delete_flag" DIR="in"/>
        </METHOD>
        <!-- 方法：检测指定的目录是否存，如果不存则在创建 -->
        <METHOD NAME="CheckDir">
		<PARAMETER TYPE="s" NAME="destination_file" DIR="in"/>
        </METHOD>
		<!-- 方法：修改文件属主 -->
        <METHOD NAME="ModifyFileOwn">
			<PARAMETER TYPE="s" NAME="destination_file" DIR="in"/>
			<PARAMETER TYPE="u" NAME="own_uid" DIR="in"/>
			<PARAMETER TYPE="u" NAME="own_gid" DIR="in"/>
        </METHOD>
		<!-- 方法：修改文件权限 -->
        <METHOD NAME="ModifyFileMode">
			<PARAMETER TYPE="s" NAME="destination_file" DIR="in"/>
			<PARAMETER TYPE="u" NAME="file_mode" DIR="in"/>
        </METHOD>
        <!-- 方法：还原文件属主, APP退出时设置指定文件权限 -->
        <METHOD NAME="RevertFileOwn">
			<PARAMETER TYPE="s" NAME="destination_file" DIR="in"/>
			<PARAMETER TYPE="u" NAME="own_uid" DIR="in"/>
			<PARAMETER TYPE="u" NAME="own_gid" DIR="in"/>
        </METHOD>
		<!-- 方法：删除文件 -->
        <METHOD NAME="DeleteFile">
			<PARAMETER TYPE="s" NAME="destination_file" DIR="in"/>
        </METHOD>
		<!-- 方法：检查指定的文件是否存在，如果不存在则创建 代理接口使用-->
        <METHOD NAME="CreateFile">
			<PARAMETER TYPE="s" NAME="destination_file" DIR="in"/>
			<PARAMETER TYPE="s" NAME="create_flag" DIR="in"/>
			<PARAMETER TYPE="u" NAME="file_mode" DIR="in"/>
			<PARAMETER TYPE="u" NAME="own_uid" DIR="in"/>
			<PARAMETER TYPE="u" NAME="own_gid" DIR="in"/>
        </METHOD>
        <!-- 方法：检查app权限，如果不是root权限，则调用方法-->
        <METHOD NAME="SendRecvMsgWithM3"> 
            <PARAMETER TYPE="ay" NAME="input_data" DIR="in"/>
            <PARAMETER TYPE="q" NAME="exp_resp_len" DIR="in"/>
            <PARAMETER TYPE="ay" NAME="output_data" DIR="out"/>
        </METHOD>
    </CLASS>
	
	<!--FUNCTION:User-->
	<!-- 
	描述：User用户配置信息类
	所属模块：用户管理模块(user)-->
	<CLASS NAME="User" ID="52"> 
		<!-- 用户ID --> 	
		<PROPERTY NAME="UserId" TYPE="y" ID="1" KEY="1">			</PROPERTY>
		<!-- 用户名 -->
		<PROPERTY NAME="UserName" TYPE="s" ID="4" EXPORT="17">			</PROPERTY>
		<!-- 默认用户名 -->
		<PROPERTY NAME="d:UserName" TYPE="s" >			</PROPERTY>
		<!-- 用户密码 -->
		<PROPERTY NAME="PassWord" TYPE="s" ID="5">			</PROPERTY>
		<PROPERTY NAME="d:PassWord" TYPE="s" >			</PROPERTY>
		<!-- 用户权限 -->
		<PROPERTY NAME="Privilege" TYPE="y" ID="6" EXPORT="17">			</PROPERTY>
		<!-- 用户角色 -->
		<PROPERTY NAME="UserRoleId" TYPE="y" ID="7" EXPORT="17">			</PROPERTY>
		<!-- 用户使能状态，0：禁止使能；1：使能 -->
		<PROPERTY NAME="IsUserEnable" TYPE="y" ID="8" EXPORT="18">	</PROPERTY>
		<!-- 用户锁定状态，0：用户未被锁定；1：用户已被锁定 -->
		<PROPERTY NAME="IsUserLocked" TYPE="y" ID="9" EXPORT="18">	</PROPERTY>		
		<!-- 用户剩余有效期 -->
		<PROPERTY NAME="PwdValidDays" TYPE="u" >	</PROPERTY>
		<!-- 用户密码最短使用期限剩余时间 -->
		<PROPERTY NAME="MinimumPwdAgeRemainTime" TYPE="u" >	</PROPERTY>
		<!-- 启用的登录规则 -->
		<PROPERTY NAME="PermitRuleIds" TYPE="y" ID="2" EXPORT="17">	</PROPERTY>
		<!-- 可以登录的接口状况 -->
		<PROPERTY NAME="LoginInterface" EXPORT="17" TYPE="u" ID="3">	</PROPERTY>
		<!-- 密码初始状态，0：非初始密码；1：初始密码 -->
		<PROPERTY NAME="InitialState" TYPE="y">	</PROPERTY>
		<!-- 公钥HASH值 -->
		<PROPERTY NAME="PublickeyHash" TYPE="s">	</PROPERTY>
		<!-- 1:加密密码为初始状态（与鉴权密码保持一致），0:加密密码为非初始状态-->
		<PROPERTY NAME="SnmpPrivacyPwdInitialState" TYPE="y" ID="10" EXPORT="17" > </PROPERTY>
		<!-- 用户不活动剩余期限，超过期限将禁用该用户 -->
		<PROPERTY NAME="InactUserRemainDays" TYPE="u" >	</PROPERTY>
        <!-- 用户上次登录时间 -->
        <PROPERTY NAME="LastLoginTime" TYPE="u" >	</PROPERTY>
        <!-- 用户上次登录IP -->
        <PROPERTY NAME="LastLoginIP" TYPE="s" >	</PROPERTY>
		<!-- 用户账户人机接口首次登陆口令修改策略：0，未配置时的无效值；1，仅提示修改；2，强制修改 -->
		<PROPERTY NAME="FirstLoginPolicy" TYPE="y" ID="11">	</PROPERTY>
		<!-- 用户账户机机接口首次登陆口令修改策略：0，未配置时的无效值；1，仅提示修改；2，强制修改 -->
		<PROPERTY NAME="M2MFirstLoginPolicy" TYPE="y" ID="12">	</PROPERTY>
		<!-- snmp鉴权算法， 0：MD5; 1:SHA; 2:SHA1(注：SHA1和SHA在处理上完全相同) 3:SHA256 4:SHA384 5:SHA512 0xff:未配置-->
		<PROPERTY NAME="SnmpAuthProtocol"      TYPE="y">		</PROPERTY>	
		<!-- snmp鉴权算法状态，0：安全；1：不安全 -->
        <PROPERTY NAME="SnmpAuthProtocolStatus"      TYPE="y">		</PROPERTY>
		<!-- snmp鉴权算法不安全算法告警内容 -->
        <PROPERTY NAME="SnmpAuthProtocolAlarmList"      TYPE="s">		</PROPERTY>
		<!-- snmp加密算法，0：无；1：DES；2：AES 3:AES256 0xff:未配置-->
		<PROPERTY NAME="SnmpPrivProtocol"      TYPE="y">		</PROPERTY>
		<!-- snmp加密算法状态，0：安全；1：不安全 -->
        <PROPERTY NAME="SnmpPrivProtocolStatus"      TYPE="y">		</PROPERTY>
		<!-- snmp加密算法不安全算法告警内容 -->
        <PROPERTY NAME="SnmpPrivProtocolAlarmList"      TYPE="s">		</PROPERTY>
        <!-- snmp鉴权密码调用generate_Ku的中间结果-->
        <PROPERTY NAME="AuthKu"      TYPE="ay">        </PROPERTY>	
        <!-- snmp鉴权密码调用generate_Ku的中间结果数据长度-->
        <PROPERTY NAME="AuthKulen"      TYPE="u">        </PROPERTY>	
        <!-- snmp加密密码调用generate_Ku的中间结果 -->
        <PROPERTY NAME="PrivKu"      TYPE="ay">        </PROPERTY>
        <!-- snmp加密密码调用generate_Ku的中间结果数据长度 -->
        <PROPERTY NAME="PrivKulen"      TYPE="u">        </PROPERTY>
        <!-- 方法：设置snmp鉴权算法 -->
		<METHOD NAME="SetSnmpAuthKu">
			<PARAMETER TYPE="s" NAME="AuthPassword" DIR="in"/>
		</METHOD>		
		<!-- 方法：设置snmp加密算法 -->
		<METHOD NAME="SetSnmpPrivKu">
			<PARAMETER TYPE="s" NAME="PrivPassword" DIR="in"/>
		</METHOD>
        <!-- 方法：设置加密密码状态-->
		<METHOD NAME="SetSnmpPrivacyPwdInitialState" ID="10">
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>
		<!-- 方法：设置启用的登录规则编号，启用则对应比特位置1 -->
		<METHOD NAME="SetUserPermitRuleIds" ID="2">
            <PARAMETER TYPE="y" NAME="permit_rule_ids" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
        </METHOD>
		<!-- 方法：设置用户名 -->
		<METHOD NAME="SetUserName" ID="4">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
        </METHOD>
		<!-- 方法：设置用户密码、使能状态 -->
		<METHOD NAME="SetPasswd">
            <PARAMETER TYPE="y" NAME="UserId" DIR="in"/>
			<PARAMETER TYPE="s" NAME="PassWord" DIR="in"/>
			<PARAMETER TYPE="y" NAME="PassWord_Length" DIR="in"/>
			<PARAMETER TYPE="y" NAME="operation" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
        </METHOD>
		<!-- 方法：设置用户锁定状态 -->
		<METHOD NAME="SetUserLockState" ID="9">
            <PARAMETER TYPE="y" NAME="LockState" DIR="in"/>
        </METHOD>		
		<!-- 方法：设置用户的首次登录策略 -->
		<METHOD NAME="SetUserFirstLoginPolicy" ID="11">
			<PARAMETER TYPE="y" NAME="FirstLoginPolicy" DIR="in"/>
		</METHOD>
		<!-- 方法：仅设置用户密码 -->
		<METHOD NAME="SetPasswdOnly" ID="5">
			<PARAMETER TYPE="s" NAME="PassWord" DIR="in"/>
        </METHOD>
		
		<!-- 方法：重置root用户密码 -->
		<METHOD NAME="ResetRoot">
        </METHOD>
		<!-- 方法：设置用户权限 -->
		<METHOD NAME="SetPrivilege" ID="6">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>
		<!-- 方法：用户登入认证 -->
		<METHOD NAME="AuthUser">
            <PARAMETER TYPE="s" NAME="UserName" DIR="in"/>
			<PARAMETER TYPE="s" NAME="PassWord" DIR="in"/>
			<PARAMETER TYPE="y" NAME="LogType" DIR="in"/>
			<PARAMETER TYPE="s" NAME="IpAddress" DIR="in"/>
			<PARAMETER TYPE="*" NAME="*" DIR="out"/>
		</METHOD>
		<!-- 方法：用户通过客户端证书认证登入 -->
		<METHOD NAME="AuthAndLoginByCert">
            <PARAMETER DIR="in" NAME="Serial" TYPE="s"/>
			<PARAMETER DIR="in" NAME="issuer" TYPE="s"/>
			<PARAMETER DIR="in" NAME="subject" TYPE="s"/>
			<PARAMETER DIR="in" NAME="IpAddress" TYPE="s"/>
			<PARAMETER DIR="in" NAME="BrowserType" TYPE="y"/>
			<PARAMETER TYPE="s" NAME="session" DIR="out"/>
		</METHOD>
		<!-- 方法：用户锁定状态检测 -->
		<METHOD NAME="AuthUserLockState">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>
		<!-- 方法：判断用户是否被锁定 -->
		<METHOD NAME="IsUserLocked">
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>
		<!-- 方法：重设失败次数 -->
		<METHOD NAME="ResetUserFailures">
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>
		<!-- 方法：增加失败次数 -->
		<METHOD NAME="IncreaseUserFailures">
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>        
		<!-- 方法：检查用户密码是否正确 -->
		<METHOD NAME="CheckPassword">
			<PARAMETER TYPE="s" NAME="PassWord" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>
		<!-- 方法：获取用户明文密码 -->
		<METHOD NAME="GetPtPassword">
			<PARAMETER TYPE="s" NAME="PassWord" DIR="out"/>
			<PARAMETER TYPE="s" NAME="SnmpPrivacyPassWord" DIR="out"/>
		</METHOD>
		<!-- 方法：设置用户角色 -->
		<METHOD NAME="SetUserRoleId" ID="7">
			<PARAMETER TYPE="y" NAME="RoleId" DIR="in"/>
		</METHOD>
		<!-- 方法：设置初始密码标识 -->
		<METHOD NAME="SetInitialState">
			<PARAMETER TYPE="y" NAME="InitialState" DIR="in"/>
		</METHOD>
		
		<!-- 方法：设置用户使能和关闭 -->
		<METHOD NAME="SetUserEnable" ID="8">
			<PARAMETER TYPE="y" NAME="EnableState" DIR="in"/>
		</METHOD>
		
		<!-- 方法：设置可以登录的接口，启用则对应比特位置1 -->
		<METHOD NAME="SetUserLoginInterface" ID="3">
			<PARAMETER TYPE="u" NAME="LoginInterface" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetPublicKey">
			<PARAMETER TYPE="y" NAME="UserId" DIR="in"/>
			<PARAMETER TYPE="y" NAME="KeyType" DIR="in"/>
			<PARAMETER TYPE="s" NAME="PublicKey" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>
		<!-- 方法: 设置SNMP加密密码 -->
		<METHOD NAME="SetSnmpPrivacyPassword">
			<PARAMETER TYPE="y" NAME="user_id" DIR="in"/>
			<PARAMETER TYPE="s" NAME="privacy_password" DIR="in"/>
		</METHOD>
		<!-- 方法: 设置SNMP鉴权算法 -->
		<METHOD NAME="SetSnmpAuthProtocol">
			<PARAMETER TYPE="y" NAME="user_id" DIR="in"/>
			<PARAMETER TYPE="y" NAME="auth_protocol" DIR="in"/>
			<PARAMETER TYPE="s" NAME="auth_password" DIR="in"/>
			<PARAMETER TYPE="s" NAME="privacy_password" DIR="in"/>
			<PARAMETER TYPE="i" NAME="auth_protocol_ret" DIR="out"/>
			<PARAMETER TYPE="i" NAME="auth_password_ret" DIR="out"/>
			<PARAMETER TYPE="i" NAME="privacy_password_ret" DIR="out"/>
		</METHOD>
		<!-- 方法: 设置SNMP加密算法 -->
		<METHOD NAME="SetSnmpPrivacyProtocol">
			<PARAMETER TYPE="y" NAME="user_id" DIR="in"/>
			<PARAMETER TYPE="y" NAME="privacy_protocol" DIR="in"/>
		</METHOD>
		<!-- 方法：设置用户认证相关的配置属性 : 用户名、密码、权限、角色 -->
		<METHOD NAME="SetUserAuthConfig">
			<PARAMETER TYPE="y" NAME="user_id" DIR="in"/>
			<PARAMETER TYPE="s" NAME="user_name" DIR="in"/>
			<PARAMETER TYPE="s" NAME="PassWord" DIR="in"/>
			<PARAMETER TYPE="y" NAME="PassWord_Length" DIR="in"/>
			<PARAMETER TYPE="y" NAME="role_id" DIR="in"/>
			<PARAMETER TYPE="y" NAME="user_state" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>
		<!-- 方法：由用户名查询uid,gid -->
		<METHOD NAME="GetUidGidByUsername">
			<PARAMETER TYPE="s" NAME="user_name" DIR="in"/>
			<PARAMETER TYPE="u" NAME="uid" DIR="out"/>
			<PARAMETER TYPE="u" NAME="gid" DIR="out"/>
		</METHOD>
		<!-- 方法：设置禁用长时间不活动用户的时间周期-->
		<METHOD NAME="UpdateUserInactStartTime">
		</METHOD>
        <METHOD NAME="PropertySyncMethod">
        	<PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
		</METHOD>
        <METHOD NAME="FileSyncMethod">
        	<PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
		</METHOD>
		<METHOD NAME="CheckUserNameSyncState">
			<PARAMETER TYPE="s" NAME="user_name" DIR="in"/>			
		</METHOD>
        <!-- 方法：同步OS下发用户-->
        <METHOD NAME="SyncStorageUser">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>
    </CLASS>  

	<!-- 
	描述：用户角色信息类
	所属模块：用户管理模块(user)-->
	<CLASS NAME="UserRole" ID="85">
		<!-- 角色Id -->
		<PROPERTY NAME="RoleId" TYPE="y" ID="1" KEY="1">					</PROPERTY>
		<!-- 角色Name -->
		<PROPERTY NAME="RoleName" TYPE="s" ID="2">					</PROPERTY>
		<!-- 用户管理权限，0：无权限；1：有权限 -->
		<PROPERTY NAME="UserMgnt" TYPE="y" ID="3" EXPORT="17" >				</PROPERTY>
		<!-- 基本设置功能权限，0：无权限；1：有权限 -->
		<PROPERTY NAME="BasicSetting" TYPE="y" ID="4" EXPORT="17" >				</PROPERTY>
		<!-- KVM使用权限，0：无权限；1：有权限 -->
		<PROPERTY NAME="KVMMgnt" TYPE="y" ID="5" EXPORT="17">			</PROPERTY>
		<!-- 只读功能权限，0：无权限；1：有权限 -->
		<PROPERTY NAME="ReadOnly" TYPE="y" ID="6" EXPORT="17" >				</PROPERTY>
		<PROPERTY NAME="VMMMgnt" 	TYPE="y" ID="7" EXPORT="17" >			</PROPERTY>
		<PROPERTY NAME="SecurityMgnt" 	TYPE="y" ID="8" EXPORT="17" >		 </PROPERTY>
		<PROPERTY NAME="PowerMgnt" 	TYPE="y" ID="9" EXPORT="17" >			</PROPERTY>
		<PROPERTY NAME="DiagnoseMgnt" 	TYPE="y" ID="10" EXPORT="17" >		</PROPERTY>
		<!-- 配置自身权限：无配置自身权限用户不能更改密码及配置SSH公钥 -->
		<PROPERTY NAME="ConfigureSelf" 	TYPE="y" ID="11" EXPORT="17" >		</PROPERTY>
		<!-- 方法：设置KVM使用权限状态 -->
		<METHOD NAME="SetKVMMgnt"  ID="5">
			<PARAMETER TYPE="y" NAME="state" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetVMMMgnt"  ID="7">
			<PARAMETER TYPE="y" NAME="state" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetBasicSetting"  ID="4">
			<PARAMETER TYPE="y" NAME="state" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetUserMgnt" ID="3">
			<PARAMETER TYPE="y" NAME="state" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetReadOnlyMgnt"  ID="6">
			<PARAMETER TYPE="y" NAME="state" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetPowerMgnt" ID="9">
			<PARAMETER TYPE="y" NAME="state" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetDiagnoseMgnt" ID="10">
			<PARAMETER TYPE="y" NAME="state" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetSecurityMgnt" ID="8">
			<PARAMETER TYPE="y" NAME="state" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetConfigureSelf" ID="11">
			<PARAMETER TYPE="y" NAME="state" DIR="in"/>
        </METHOD>
        <METHOD NAME="PropertySyncMethod">
            	<PARAMETER DIR="in"  TYPE="*" NAME="*" />
	    		<PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
    </CLASS>
	
	<!-- 
	描述：WEB会话配置信息类
	所属模块：用户管理模块(user)-->
	<CLASS NAME="Session" ID="51">
		<!-- 超时时间 -->	
		<PROPERTY NAME="Timeout" TYPE="i" ID="1" EXPORT="17">	 </PROPERTY>
		<!-- web会话模式，0：共享模式，1：独占模式 -->	
		<PROPERTY NAME="Mode" TYPE="y" ID="2" EXPORT="17">	 </PROPERTY>
		<!-- 方法：添加WEB会话 -->
        <METHOD NAME="AddSession">
	        <PARAMETER TYPE="y" NAME="authenticateType" DIR="in"/>
			<PARAMETER TYPE="y" NAME="privilege" DIR="in"/>
			<PARAMETER TYPE="s" NAME="ip_addr" DIR="in"/>
			<PARAMETER TYPE="s" NAME="user_name" DIR="in"/>
			<PARAMETER TYPE="y" NAME="user_id" DIR="in"/>
			<PARAMETER TYPE="y" NAME="brwer_type" DIR="in"/>
			<!-- 参数：用户角色ID,可以多个，如“3”或“3,4” -->
			<PARAMETER TYPE="s" NAME="role_id" DIR="in"/>
			<PARAMETER TYPE="s" NAME="session" DIR="out"/>
        </METHOD>
		<!-- 方法：删除WEB会话 -->
		<METHOD NAME="DelSession">
            <PARAMETER TYPE="s" NAME="session" DIR="in"/>
        </METHOD>
	<METHOD NAME="DestoryUserCliSession">
		<PARAMETER TYPE="s" NAME="user_name" DIR="in"/>
        </METHOD>
		<!-- 方法：获取在线用户信息 -->
		<METHOD NAME="GetOnlineUser">
			<PARAMETER TYPE="s" NAME="session" DIR="in"/>
			<PARAMETER TYPE="s" NAME="user_info" DIR="out"/>
        </METHOD>
		<!-- 方法：获取在线用户信息(Redfish) -->
		<METHOD NAME="GetSessionInfo">
			<PARAMETER TYPE="s" NAME="session" DIR="in"/>
			<PARAMETER TYPE="s" NAME="session_info" DIR="out"/>
        </METHOD>
		<!-- 方法：获取在线用户列表(Redfish) -->
		<METHOD NAME="GetSessionList">
			<PARAMETER TYPE="s" NAME="session" DIR="in"/>
			<PARAMETER TYPE="s" NAME="session_list" DIR="out"/>
        </METHOD>
		<!-- 方法：剔除在线用户 -->
		<METHOD NAME="LogoutUser">
		    <PARAMETER TYPE="s" NAME="session" DIR="in"/>
			<PARAMETER TYPE="s" NAME="log_type" DIR="in"/>
			<PARAMETER TYPE="s" NAME="user_name" DIR="in"/>
			<PARAMETER TYPE="s" NAME="ip_addr" DIR="in"/>			
        </METHOD>
		<!-- 方法：用户会话在线超时检测 -->
		<METHOD NAME="IsSessionTimeout">
		    <PARAMETER TYPE="s" NAME="session" DIR="in"/>	
			<PARAMETER TYPE="y" NAME="result" DIR="out"/>
        </METHOD>
		<!-- 方法：设置用户会话超时时间 -->
		<METHOD NAME="SetSessionTimeout" ID="1">
		    <PARAMETER TYPE="i" NAME="Timeout" DIR="in"/>	
        </METHOD>
		<!-- 方法：设置web会话模式 -->
		<METHOD NAME="SetSessionMode" ID="2">
		    <PARAMETER TYPE="y" NAME="Mode" DIR="in"/>	
        </METHOD>
		<METHOD NAME="SessionHeartBeat">
			<PARAMETER TYPE="s" NAME="session" DIR="in"/>	
			<PARAMETER TYPE="i" NAME="flag" DIR="in"/>
		    <PARAMETER TYPE="y" NAME="result" DIR="out"/>	
        </METHOD>
		<!-- 方法：获取在线用户个数 -->
		<METHOD NAME="GetOnlineUserNum">
		    <PARAMETER TYPE="y" NAME="web_onlineuser_num" DIR="out"/>
			<PARAMETER TYPE="y" NAME="cli_onlineuser_num" DIR="out"/>	
			<PARAMETER TYPE="y" NAME="redfish_onlineuser_num" DIR="out"/>			
        </METHOD>		
		<!-- 方法：获取Token -->
		<METHOD NAME="GetToken">
		    <PARAMETER TYPE="s" NAME="session" DIR="in"/>
			<PARAMETER TYPE="s" NAME="token" DIR="out"/>			
        </METHOD>
		<!-- 方法：获取会话登出原因 -->
		<METHOD NAME="GetSessionLogoutType">
		    <PARAMETER TYPE="s" NAME="session" DIR="in"/>
			<PARAMETER TYPE="y" NAME="type" DIR="out"/>
        </METHOD>
        <!-- 方法：获取具有远程控制权限的在线用户数 -->
        <METHOD NAME="GetOnlineKvmPriUserNum">
            <PARAMETER TYPE="y" NAME="num" DIR="out"/>
        </METHOD>
		
	<!-- 方法：获取单点登录临时 session_id -->
	<METHOD NAME="GetSSOSessionID">
		<PARAMETER TYPE="y" NAME="authenticatetype" DIR="in"/>
		<PARAMETER TYPE="s" NAME="ipaddr" DIR="in"/>
		<PARAMETER TYPE="s" NAME="username" DIR="in"/>
		<PARAMETER TYPE="y" NAME="userid" DIR="in"/>
		<PARAMETER TYPE="y" NAME="browsertype" DIR="in"/>
		<!-- 参数：用户角色ID,可以多个，如“3”或“3,4” -->
		<PARAMETER TYPE="s" NAME="roleid" DIR="in"/>
		<PARAMETER TYPE="s" NAME="sessionid" DIR="out"/>
	</METHOD>
			
	<!--方法：通过临时session的Web登录 -->
	<METHOD NAME="AddSSOSessionID">
		<PARAMETER TYPE="s" NAME="ipaddr" DIR="in"/>
		<PARAMETER TYPE="s" NAME="sessionid" DIR="in"/>
		<PARAMETER TYPE="s" NAME="session" DIR="out"/>
	</METHOD>
			
	<!--方法：供kvm模块调用鉴权单点登录session_id -->
	<METHOD NAME="CheckSSOSessionID">
		<PARAMETER TYPE="s" NAME="sessionid" DIR="in"/>
		<PARAMETER TYPE="s" NAME="ipaddr" DIR="in"/>
		<PARAMETER TYPE="*" NAME="*" DIR="out"/>
	</METHOD>
    <METHOD NAME="IsRedfishInnerSession">
        <PARAMETER TYPE="s" NAME="SessionId" DIR="in"/>
    </METHOD>  
	<!--销毁单点登录session 的方法-->
	<METHOD NAME="DestroySsoSession">
		<PARAMETER TYPE="s" NAME="token" DIR="in"/>
	    </METHOD>
        <!-- SMM主备同步方法 -->
        <METHOD NAME="PropertySyncMethod">
            <PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
	</METHOD>
		<!-- 根据组ID删除所属该组的所有用户会话 -->
        <METHOD NAME="DelSessionByGroupID">
            <PARAMETER DIR="in"  TYPE="y" NAME="group_server_id" />
		</METHOD>
    </CLASS>
	
	<!-- 
	描述：User用户密码复杂度配置信息类
	所属模块：用户管理模块(user)-->	
    <CLASS NAME="PasswdSetting" ID="89">
		<!-- 用户密码复杂度检查使能状态，0：禁止使能；1：使能 -->
		<PROPERTY NAME="EnableStrongPassword" TYPE="y" ID="1" EXPORT="17">					</PROPERTY>
        <!-- 用户密码最小长度，范围8-20 -->
		<PROPERTY NAME="MinPasswordLength" TYPE="y" ID="2" EXPORT="17">					</PROPERTY>
		<!-- 方法：设置用户密码复杂度检查使能状态 -->
		<METHOD NAME="SetEnablePwdComplexity" ID="1">
            <PARAMETER TYPE="y" NAME="complcontrol" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
        </METHOD>
        <!-- 方法：设置用户密码最小长度 -->
		<METHOD NAME="SetMinPasswordLength" ID="2">
            <PARAMETER TYPE="y" NAME="length" DIR="in"/>
        </METHOD>
        <!-- SMM主备同步方法 -->
        <METHOD NAME="PropertySyncMethod">
            <PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
    </CLASS>
	
	<!-- 
	描述：User用户安全加固配置信息类
	所属模块：用户管理模块(user)-->	
    <CLASS NAME="SecurityEnhance" ID="2">
		<!-- 用户锁定时长 deprecated-->
		<PROPERTY NAME="AuthFailLockTime" TYPE="q" EXPORT="17">					</PROPERTY>
		<!-- 用户连续认证失败最大次数 deprecated-->
		<PROPERTY NAME="AuthFailMax" TYPE="q" EXPORT="17">							</PROPERTY>
		<!-- 用户连续认证失败锁定时间扩展 -->
		<PROPERTY NAME="AuthFailLockTimeExtension" TYPE="q" ID="1" EXPORT="17">					</PROPERTY>
		<!-- 用户连续认证失败最大次数扩展 -->
		<PROPERTY NAME="AuthFailMaxExtension" TYPE="q" ID="2" EXPORT="17">							</PROPERTY>
		<!-- 用户连续认证失败锁定时间扩展，兼容旧web连续性白牌 -->
		<PROPERTY NAME="AuthFailLockTimeExCustom" TYPE="q" ID="27" EXPORT="17">	</PROPERTY>
		<!-- 用户连续认证失败最大次数扩展，兼容旧web连续性白牌 -->
		<PROPERTY NAME="AuthFailMaxExCustom" TYPE="q" ID="28" EXPORT="17">	</PROPERTY>
		<!-- 密码有效期长度 -->
		<PROPERTY NAME="PwdExpiredTime" TYPE="u" ID="3" EXPORT="17">						</PROPERTY>
		<!-- 特殊用户 -->
		<PROPERTY NAME="ExcludeUser" TYPE="y" ID="4" EXPORT="17">			     			</PROPERTY>
		<!-- 历史密码数 -->
		<PROPERTY NAME="OldPwdCount" TYPE="y" ID="5" EXPORT="17">			     			</PROPERTY>
		<!-- 启用的登录规则 -->
		<PROPERTY NAME="PermitRuleIds" TYPE="y" ID="6" EXPORT="17">	</PROPERTY>	
		<!-- 用户管理操作使能标志 -->
		<PROPERTY NAME="EnableUserMgnt" TYPE="y" ID="7" EXPORT="17">	</PROPERTY>		
		<!-- 用户加密类索引, 用于定制化索引 -->
		<PROPERTY NAME="ServiceID" TYPE="u" ID="8">	</PROPERTY>	
		<!-- BIT 0：TLS1.0; BIT 1：TLS1.1; BIT 2：TLS1.2(默认启用，不可关闭);(其他位保留；1：启用，0：关闭) -->
		<PROPERTY NAME="TLSVersion" TYPE="q" ID="9" EXPORT="17">	</PROPERTY>	
		<!-- IPMI用户密码的加密密钥 -->
		<PROPERTY NAME="IpmiPwdWorkKey" TYPE="s" > </PROPERTY>
		<!-- IPMI用户密码的加密根密钥组件 -->
		<PROPERTY NAME="IpmiPwdComponent" TYPE='ay'> </PROPERTY>
        <!-- IPMI用户密码的加密主密钥Id -->
        <PROPERTY NAME="IpmiMasterKeyId" TYPE='u'> </PROPERTY>
		<!-- SNMP加密密码的加密密钥 -->
		<PROPERTY NAME="SnmpPrivacyPwdWorkKey" TYPE="s" > </PROPERTY>
		<!-- SNMP加密密码的加密根密钥组件 -->
		<PROPERTY NAME="SnmpPrivacyPwdComponent" TYPE='ay'> </PROPERTY>		
        <!-- SNMP加密密码的加密主密钥Id -->
        <PROPERTY NAME="SnmpPrivacyPwdMasterKeyId" TYPE='u'> </PROPERTY>
		<!-- 警示信息显示开关: 1表示显示，0表示不显示，默认值为1 -->
		<PROPERTY NAME="BannerState" TYPE="y" ID="12" EXPORT="17">	</PROPERTY>
		<!-- 警示信息显示内容-->
		<PROPERTY NAME="BannerContent" TYPE="s" ID="13" EXPORT="17" >	</PROPERTY>
		<!-- 警示信息默认内容-->
		<PROPERTY NAME="d:BannerContent" TYPE="s" >	</PROPERTY>
		<!-- 初始密码提示: 1表示提示，0表示不提示，默认值为1 -->
		<PROPERTY NAME="InitialPwdPrompt" TYPE="y" ID="16" EXPORT="17">	</PROPERTY>
		<!-- 密码最短修改期限 -->
		<PROPERTY NAME="MinimumPwdAge" TYPE="u" ID="10" EXPORT="17">						</PROPERTY>
		<!-- SSH密码认证方式使能状态 -->
		<PROPERTY NAME="SSHPasswordAuthentication" TYPE="y" ID="11" EXPORT="17">	</PROPERTY>
		<!-- 二次认证使能状态使能状态 -->
		<PROPERTY NAME="DoubleCertificationEnable" TYPE="y" ID="14" EXPORT="17" >	</PROPERTY>	
		<!-- 标识弱口令字典检查开关状态的属性, 0：不进行弱口令字典检查；1：在设置或修改用户名密码时，需要进行弱口令字典检查；-->
		<PROPERTY NAME="WeakPwdDictEnable" TYPE="y" ID="15" EXPORT="17" >	</PROPERTY>
		<!-- AES算法的填充方式，0：No padding，1：CMS padding -->
		<PROPERTY NAME="AESPadding" TYPE="y">	</PROPERTY>			
		<!-- 禁用长时间不活动用户的时间周期-->
		<PROPERTY NAME="UserInactTimeLimit" TYPE="u" ID="17" EXPORT="17">	</PROPERTY>
		<!-- 更新各有效期信息的StartTime时的标志，1表示StartTime为NTP的时间戳，0表示StartTime为非NTP（其他时间源）的时间戳，持久化保存，默认值为0 -->
		<PROPERTY NAME="RenewStartTimeFlag" TYPE="y">	</PROPERTY>
		<!-- SSH的加密算法 -->
		<PROPERTY NAME="SSHCiphers" TYPE="as" ID="18" EXPORT="17"> </PROPERTY>
		<!-- SSH的加密算法默认配置，默认配置全部是安全算法；
			此处不采用d:格式命名，是因为d:格式的属性在设置还原点时，会被当时不带d:格式的属性覆盖和持久化，导致默认配置被改写 -->
        <PROPERTY NAME="DefaultSSHCiphers" TYPE="as"> </PROPERTY>
        <!-- SSH的加密算法状态，0：安全；1：不安全 -->
        <PROPERTY NAME="SSHCiphersStatus" TYPE="y">	</PROPERTY>
        <!-- SSH的加密算法不安全算法告警内容，使用,隔开 -->
        <PROPERTY NAME="SSHCiphersAlarmList" TYPE="s">	</PROPERTY>
		<!-- SSH的密钥交换算法 -->
		<PROPERTY NAME="SSHKexs" TYPE="as" ID="19" EXPORT="17"> </PROPERTY>
		<!-- SSH的密钥交换算法默认配置，默认配置全部是安全算法；
			此处不采用d:格式命名，是因为d:格式的属性在设置还原点时，会被当时不带d:格式的属性覆盖和持久化，导致默认配置被改写 -->
        <PROPERTY NAME="DefaultSSHKexs" TYPE="as"> </PROPERTY>
        <!-- SSH的密钥交换算法状态，0：安全；1：不安全 -->
        <PROPERTY NAME="SSHKexsStatus" TYPE="y">	</PROPERTY>
        <!-- SSH的密钥交换算法不安全算法告警内容，使用,隔开 -->
        <PROPERTY NAME="SSHKexsAlarmList" TYPE="s">	</PROPERTY>
		<!-- SSH的消息认证算法 -->
		<PROPERTY NAME="SSHMACs" TYPE="as" ID="20" EXPORT="17"> </PROPERTY>
		<!-- SSH的消息认证算法默认配置，默认配置全部是安全算法；
			此处不采用d:格式命名，是因为d:格式的属性在设置还原点时，会被当时不带d:格式的属性覆盖和持久化，导致默认配置被改写 -->
        <PROPERTY NAME="DefaultSSHMACs" TYPE="as"> </PROPERTY>
        <!-- SSH的消息认证算法状态，0：安全；1：不安全 -->
        <PROPERTY NAME="SSHMACsStatus" TYPE="y">	</PROPERTY>
        <!-- SSH的消息认证算法不安全算法告警内容，使用,隔开 -->
        <PROPERTY NAME="SSHMACsAlarmList" TYPE="s">	</PROPERTY>
		<!-- SSH的公钥算法 -->
		<PROPERTY NAME="SSHHostKeys" TYPE="as" ID="21" EXPORT="17"> </PROPERTY>
		<!-- SSH的公钥算法默认配置，默认配置全部是安全算法；
			此处不采用d:格式命名，是因为d:格式的属性在设置还原点时，会被当时不带d:格式的属性覆盖和持久化，导致默认配置被改写 -->
        <PROPERTY NAME="DefaultSSHHostKeys" TYPE="as"> </PROPERTY>
        <!-- SSH的公钥算法状态，0：安全；1：不安全 -->
        <PROPERTY NAME="SSHHostKeysStatus" TYPE="y">	</PROPERTY>
        <!-- SSH的公钥算法不安全算法告警内容，使用,隔开 -->
        <PROPERTY NAME="SSHHostKeysAlarmList" TYPE="s">	</PROPERTY>
		<!-- SSL的加密套件 -->
		<PROPERTY NAME="SSLCipherSuites" TYPE="as" ID="22" EXPORT="17"> </PROPERTY>
		<!-- SSL的加密套件默认配置，默认配置全部是安全算法；
			此处不采用d:格式命名，是因为d:格式的属性在设置还原点时，会被当时不带d:格式的属性覆盖和持久化，导致默认配置被改写 -->
        <PROPERTY NAME="DefaultSSLCipherSuites" TYPE="as"> </PROPERTY>
        <!-- SSL的加密套件状态，0：安全；1：不安全 -->
        <PROPERTY NAME="SSLCipherSuitesStatus" TYPE="y">	</PROPERTY>
        <!-- SSH的加密套件不安全算法告警内容，使用,隔开 -->
        <PROPERTY NAME="SSLCipherSuitesAlarmList" TYPE="s">	</PROPERTY>
		<!-- Snmp鉴权算法 -->
        <PROPERTY NAME="SnmpAuthProtocolCipherSuites" TYPE="as"> </PROPERTY>
		<!-- Snmp鉴权算法默认配置，默认配置全部是安全算法；
			此处不采用d:格式命名，是因为d:格式的属性在设置还原点时，会被当时不带d:格式的属性覆盖和持久化，导致默认配置被改写 -->
        <PROPERTY NAME="DefaultSnmpAuthCipherSuites" TYPE="as"> </PROPERTY>
		<!-- Snmp加密算法 -->
        <PROPERTY NAME="SnmpPrivProtocolCipherSuites" TYPE="as"> </PROPERTY>
		<!-- Snmp加密算法默认配置，默认配置全部是安全算法；
			此处不采用d:格式命名，是因为d:格式的属性在设置还原点时，会被当时不带d:格式的属性覆盖和持久化，导致默认配置被改写 -->
        <PROPERTY NAME="DefaultSnmpPrivCipherSuites" TYPE="as"> </PROPERTY>
		<!-- RMCP加密套件的使能状态，BIT0~BIT19分别表示ID为0~19加密套件的使能状态，置位表示使能 -->
		<PROPERTY NAME="RMCPCipherSuites" TYPE="u" ID="23" EXPORT="17"> </PROPERTY>
        <!-- RMCP的加密套件状态，0：安全；1：不安全 -->
        <PROPERTY NAME="RMCPCipherSuitesStatus" TYPE="y">	</PROPERTY>
        <!-- RMCP的加密套件不安全算法告警内容，使用,隔开 -->
        <PROPERTY NAME="RMCPCipherSuitesAlarmList" TYPE="s">	</PROPERTY>
		<!-- 证书过期提前告警时间，单位为（天）-->
		<PROPERTY NAME="CertOverdueWarnTime" TYPE="u" ID="25" EXPORT="17"> </PROPERTY>
		<!-- 系统锁定开关状态, 0:关闭  1:打开 -->
		<PROPERTY NAME="SystemLockDownStatus" TYPE="y" ID="24" EXPORT="17">	</PROPERTY>
		<!-- 主密钥更新间隔, 0:关闭  1~365:更新间隔 -->			
		<PROPERTY NAME="MKUpdateInterval" TYPE="u" ID="26" EXPORT="17">	</PROPERTY>
		<!-- 主密钥上次更新时间 -->	
        <PROPERTY NAME="MKLastUpdateTime" TYPE="u">	</PROPERTY>
        <!-- 防DNS重绑定功能使能状态, 0:关闭  1:打开, 默认关闭 -->
        <PROPERTY NAME="AntiDNSRebindStatus" TYPE="y" ID="29" EXPORT="17"> </PROPERTY>
		<!-- 预置账户IPMI接口首次登陆时的命令白名单：用户管理相关 -->	
		<PROPERTY NAME="IpmiFirstLoginWhiteList" TYPE="roa">	</PROPERTY>
		<!-- 密钥材料更新标识，0：未更新 1：更新中 2：已更新 -->
		<PROPERTY NAME="EncryptComponentUpdateFlag" TYPE="y">	</PROPERTY>
		<!-- 方法：登陆规则认证 -->
		<METHOD NAME="CheckUserLimitStatus">
			<PARAMETER TYPE="y" NAME="type" DIR="in"/>
            <PARAMETER TYPE="s" NAME="UserName" DIR="in"/>
			<PARAMETER TYPE="s" NAME="IpAddress" DIR="in"/>
			<PARAMETER TYPE="*" NAME="*" DIR="out"/>
		</METHOD>
		<!-- 方法：设置用户锁定时长 -->		
		<METHOD NAME="SetAuthFailLockTime">
			<PARAMETER TYPE="q" NAME="authfaillocktime" DIR="in"/>
		</METHOD>
		<!-- 方法：设置用户连续认证失败最大次数 -->
		<METHOD NAME="SetAuthFailMax">
            <PARAMETER TYPE="q" NAME="authfailmax" DIR="in"/>
        </METHOD>
		<!-- 方法：设置用户锁定时长扩展 -->		
		<METHOD NAME="SetAuthFailLockTimeExtension" ID="1">
            <PARAMETER TYPE="q" NAME="authfaillocktimeextension" DIR="in"/>
        </METHOD>
		<!-- 方法：设置用户连续认证失败最大次数扩展 -->
		<METHOD NAME="SetAuthFailMaxExtension" ID="2">
            <PARAMETER TYPE="q" NAME="authfailmaxextension" DIR="in"/>
        </METHOD>
		<!-- 方法：设置用户锁定时长扩展，兼容旧web连续性白牌 -->		
		<METHOD NAME="SetAuthFailLockTimeExCustom" ID="27">
            <PARAMETER TYPE="q" NAME="authfaillocktimeexcutom" DIR="in"/>
        </METHOD>
		<!-- 方法：设置用户连续认证失败最大次数扩展,兼容旧web连续性白牌 -->
		<METHOD NAME="SetAuthFailMaxExCustom" ID="28">
            <PARAMETER TYPE="q" NAME="authfailmaxexcutom" DIR="in"/>
        </METHOD>
		<!-- 方法：设置密码有效期长度 -->
		<METHOD NAME="SetPwdExpiredTime" ID="3">
			<PARAMETER TYPE="u" NAME="pwdexpiredtime" DIR="in"/>
		</METHOD>
		<!-- 方法：设置特殊用户 -->
		<METHOD NAME="SetExcludeUser" ID="4">
			<PARAMETER TYPE="y" NAME="excludeuser" DIR="in"/>
		</METHOD>
		<!-- 方法：设置历史密码数 -->
		<METHOD NAME="SetOldPwdCount" ID="5">
			<PARAMETER TYPE="y" NAME="oldpwdcount" DIR="in"/>
		</METHOD>
		<!-- 方法：设置启用的登录规则编号，启用则对应比特位置1 -->
		<METHOD NAME="SetPermitRuleIds" ID="6">
			<PARAMETER TYPE="y" NAME="permitruleids" DIR="in"/>
		</METHOD>
		<!-- 方法：设置用户管理操作使能标志 -->
		<METHOD NAME="SetEnableUserMgnt" ID="7">
			<PARAMETER TYPE="y" NAME="enableusermgnt" DIR="in"/>
		</METHOD>
		<!-- 方法：设置TLS协议使能配置 -->
		<METHOD NAME="SetTLSVersion" ID="9">
			<PARAMETER TYPE="q" NAME="tlsversion" DIR="in"/>
		</METHOD>
		<!--方法：设置警示信息状态-->
		<METHOD NAME="SetBannerState" ID="12">
			<!--参数：1表示显示警示信息，0表示不显示警示信息-->
			<PARAMETER TYPE="y" NAME="BannerState" DIR="in"/>
		</METHOD>
		<!--方法：设置警示信息内容-->
		<METHOD NAME="SetBannerContent" ID="13">
			<PARAMETER TYPE="s" NAME="BannerInfo" DIR="in"/>
		</METHOD>
		<!--方法：设置默认警示信息内容-->
		<METHOD NAME="SetDBannerContent">
			<PARAMETER TYPE="s" NAME="DBannerInfo" DIR="in"/>
		</METHOD>
		<!-- 方法：设置密码最短修改期限 -->
		<METHOD NAME="SetMinimumPwdAge" ID="10">
			<PARAMETER TYPE="u" NAME="minimumpwdage" DIR="in"/>
		</METHOD>
		<!-- 方法：设置SSH密码认证方式使能状态 1：开启　0：关闭 -->
		<METHOD NAME="SetSSHPasswordAuthentication" ID="11">
			<PARAMETER TYPE="y" NAME="status" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>
		<!-- 方法：设置SSH加密算法使能状态 -->
		<METHOD NAME="SetSSHCiphers" ID="18">
			<PARAMETER TYPE="as" NAME="Ciphers" DIR="in"/>
		</METHOD>
		<!-- 方法：设置SSH密钥交换算法使能状态 -->
		<METHOD NAME="SetSSHKexs" ID="19">
			<PARAMETER TYPE="as" NAME="Kexs" DIR="in"/>
		</METHOD>
		<!-- 方法：设置SSH消息认证算法使能状态 -->
		<METHOD NAME="SetSSHMACs" ID="20">
			<PARAMETER TYPE="as" NAME="MACs" DIR="in"/>
		</METHOD>
		<!-- 方法：设置SSH公钥算法使能状态 -->
		<METHOD NAME="SetSSHHostKeys" ID="21">
			<PARAMETER TYPE="as" NAME="HostKeys" DIR="in"/>
		</METHOD>
		<!-- 方法：设置SSL加密套件使能状态 -->
		<METHOD NAME="SetSSLCipherSuites" ID="22">
			<PARAMETER TYPE="as" NAME="cipher_suites" DIR="in"/>
		</METHOD>	
		<!-- 方法：设置RMCP加密套件使能状态 -->
		<METHOD NAME="SetRMCPCipherSuites" ID="23">
			<PARAMETER TYPE="u" NAME="enabled_flag" DIR="in"/>
		</METHOD>
		<!-- 方法：设置二次认证使能状态 1：开启　0：关闭 -->
		<METHOD NAME="SetDoubleCertificationEnable" ID="14">
			<PARAMETER TYPE="y" NAME="status" DIR="in"/>
		</METHOD>
		<!-- 方法：实现WEB设置密码有效期、最短使用期， DTS2016051106875 -->
		<METHOD NAME="WebSetPwdExpiredAndMinimumTime">
			<PARAMETER TYPE="u" NAME="minimumpwdage" DIR="in"/>
			<PARAMETER TYPE="u" NAME="validtime" DIR="in"/>
		</METHOD>
		<!-- 设置弱口令字典检查开关状态的方法 -->
		<METHOD NAME="SetWeakPwdDictEnableState" ID="15">
			<PARAMETER TYPE="y" NAME="EnableState" DIR="in"/>
		</METHOD>
		<!-- 导入弱口令字典的方法 -->
		<METHOD NAME="ImportWeakPwdDict">
			<PARAMETER TYPE="s" NAME="File" DIR="in"/>
		</METHOD>
		<!-- 导出弱口令字典的方法 -->
		<METHOD NAME="ExportWeakPwdDict">
			<PARAMETER TYPE="s" NAME="OutPath" DIR="in"/>
		</METHOD>
		<!-- 查询弱口令字典的方法 -->
		<METHOD NAME="SearchWeakPwdDict">
			<PARAMETER TYPE="s" NAME="Password" DIR="in"/>
		</METHOD>
		<!--方法：设置初始密码提示-->
		<METHOD NAME="SetInitialPwdPrompt" ID="16">
			<!--参数：1表示显示初始密码提示，0表示不显示初始密码提示-->
			<PARAMETER TYPE="y" NAME="InitialPwdPrompt" DIR="in"/>
		</METHOD>
		<!-- 检查登录规则 -->
		<METHOD NAME="CheckFiltrateStatus">
			<PARAMETER TYPE="y" NAME="rulestatus" DIR="in"/>
			<PARAMETER TYPE="s" NAME="ipinfo" DIR="in"/>
        	</METHOD>
		<!-- 方法：设置禁用长时间不活动用户的时间周期-->
		<METHOD NAME="SetUserInactTimeLimit" ID="17">
			<PARAMETER TYPE="u" NAME="UserInactTimeLimit" DIR="in"/>
		</METHOD>
		<!-- SMM主备同步方法 -->
		<METHOD NAME="PropertySyncMethod">
			<PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
		</METHOD>
		<!-- SMM文件同步回调方法 -->
		<METHOD NAME="FileSyncMethod">
			<PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
		</METHOD>
	    <!-- SMM文件同步回调方法 -->
		<METHOD NAME="GetSecurityInfoMethod">
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
		</METHOD>
		<!-- 设置证书过期提前告警时间方法 -->
		<METHOD NAME="SetCertOverdueWarnTime" ID="25">
			<PARAMETER TYPE="u" NAME="CertOverdueWarnTime" DIR="in"/>
		</METHOD>
		<!-- 方法: 设置系统锁定-->
		<METHOD NAME="SetSystemLockDownStatus" ID="24">
			<PARAMETER TYPE="y" NAME="LockDownStatus" DIR="in"/>
		</METHOD>
		<!-- 方法: 设置主密钥更新间隔-->
		<METHOD NAME="SetMasterkeyUpdateInterval" ID="26">
			<PARAMETER TYPE="u" NAME="Interval" DIR="in"/>
		</METHOD>
		<!-- 方法: 更新主密钥-->
		<METHOD NAME="UpdateMasterKey">
		</METHOD>
		<!-- 方法: 获取主密钥更新状态-->
		<METHOD NAME="GetUpdateStatus">
			<PARAMETER TYPE="y" NAME="UpdateStatus" DIR="out"/>
			<PARAMETER TYPE="y" NAME="UpdateProgress" DIR="out"/>
        </METHOD>
        <!-- 方法: 设置防DNS重绑定功能使能状态-->
		<METHOD NAME="SetAntiDNSRebindStatus" ID="29">
			<PARAMETER TYPE="y" NAME="AntiDNSRebindStatus" DIR="in"/>
		</METHOD>
		<!-- 方法：修改/opt/pme/pram/User_sshd_config文件-->
		<METHOD NAME="ModifySshdConfigFile">
			<PARAMETER TYPE="s" NAME="key" DIR="in"/>
			<PARAMETER TYPE="s" NAME="value" DIR="in"/>
		</METHOD>
    </CLASS>
	
	<!-- 
	描述：用户登录规则信息类
	所属模块：用户管理模块(user)-->	
    <CLASS NAME="PermitRule" ID="86">
		<!-- 规则ID -->
		<PROPERTY NAME="RuleId" TYPE="y" ID="1" KEY="1">						</PROPERTY>
		<!-- IP登录规则 -->
		<PROPERTY NAME="IpRuleInfo" TYPE="s" ID="2" EXPORT="17">					</PROPERTY>
		<!-- MAC登录规则 -->
		<PROPERTY NAME="MacRuleInfo" TYPE="s" ID="3"  EXPORT="17">					</PROPERTY>
		<!-- 时间登录规则 -->
		<PROPERTY NAME="TimeRuleInfo" TYPE="s" ID="4" EXPORT="17">				</PROPERTY>	
		<!-- 方法：设置IP登录规则内容 -->
		<METHOD NAME="SetIpRuleInfo"  ID="2">
			<PARAMETER TYPE="s" NAME="ipinfo" DIR="in"/>
        </METHOD>
		<!-- 方法：设置时间登录规则内容 -->
		<METHOD NAME="SetTimeRuleInfo" ID="4">
			<PARAMETER TYPE="s" NAME="timeinfo" DIR="in"/>
        </METHOD>
		<!-- 方法：设置MAC登录规则内容 -->
		<METHOD NAME="SetMacRuleInfo" ID="3">
			<PARAMETER TYPE="s" NAME="macinfo" DIR="in"/>
        </METHOD>		
        <!-- SMM主备同步方法 -->
        <METHOD NAME="PropertySyncMethod">
            <PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
	</CLASS>
	
	<CLASS NAME="EncryptKey">
		<!--属性 ：密钥名称 -->
		<PROPERTY NAME="Name" TYPE='s'>			</PROPERTY>
		<!--属性 ：密钥类型，0 : 根密钥; 1 : 工作密钥 -->
		<PROPERTY NAME="Type" TYPE='y'>			</PROPERTY>
		<!--属性 ：根密钥组件长度，16 ：128bit; 24 : 192bit; 32 : 256 bit -->
		<PROPERTY NAME="ComponentLen" TYPE='y'>	</PROPERTY>
		<!--属性 ：根密钥组件2，与根密钥组件1（硬编码）和根密钥组件3（硬编码）生成根密钥 -->
        <PROPERTY NAME="Component" TYPE='ay'>	</PROPERTY>
		<!--属性 ：工作密钥密文 -->
		<PROPERTY NAME="WorkKey" TYPE='s'> 		</PROPERTY>		
        <!--属性 ：KMC域Id -->
        <PROPERTY NAME="DomainId" TYPE='u'>    </PROPERTY>
        <!--属性 ：KMC当前激活主密钥的ID -->
        <PROPERTY NAME="MasterKeyId" TYPE='u'>    </PROPERTY>
		<!--方法 ：更新工作密钥-->
		<METHOD NAME="UpdateWorkKey">
		</METHOD>
		<!--方法 ：更新根密钥组件2 -->
		<METHOD NAME="UpdateComponent">
		</METHOD>
        <!-- SMM主备同步方法 -->
        <METHOD NAME="PropertySyncMethod">
            <PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
		</METHOD>
		<CLASS NAME="SSLEncryptKey"> </CLASS>
    </CLASS>
	<!--FUNCTION:DDNS-->
	<!-- 
	描述：DDNS配置信息类
	所属模块：DDNS管理模块(ddns)-->	
	<CLASS NAME="DNSSetting" ID="3">
		<!-- DDNS域名服务器名称 -->
		<PROPERTY NAME="DomainName" TYPE='s' ID="1" EXPORT="17">						</PROPERTY>
		<!-- 首选DDNS域名服务器IP -->
		<PROPERTY NAME="PrimaryDomain" TYPE='s' ID="2" EXPORT="17">					</PROPERTY>
		<!-- 备选DDNS域名服务器IP -->
		<PROPERTY NAME="BackupDomain" TYPE='s' ID="3" EXPORT="17">						</PROPERTY>
		<!-- 第二备选DDNS域名服务器IP -->
		<PROPERTY NAME="TertiaryDomain" TYPE='s' ID="10" EXPORT="17">						</PROPERTY>
		<!-- DDNS服务绑定网口组信息 -->
		<PROPERTY NAME="EthGroup" TYPE='y' ID="4">							</PROPERTY>
		<!-- DDNS服务IP版本信息，0：IPV4；1：IPV6 -->
		<PROPERTY NAME="IPVer" TYPE='y' ID="5" EXPORT="17">							</PROPERTY>
		<!-- DDNS服务模式信息，0：手动；1：自动 -->
		<PROPERTY NAME="Mode" TYPE='y' ID="6" EXPORT="17">								</PROPERTY>
		<!-- DDNS服务模式变化标志信息 -->
		<PROPERTY NAME="DHCPFlag" TYPE='y' ID="7">							</PROPERTY>
		<!-- DDNS服务租赁时间 -->
		<PROPERTY NAME="LeaseTime" TYPE='u' ID="8">						</PROPERTY>
		<!-- DDNS信息更新时间间隔 -->
		<PROPERTY NAME="Interval" TYPE='u' ID="9">							</PROPERTY>  	
		<!-- 方法：设置首选DDNS域名服务器IP -->
		<METHOD NAME="SetPrimaryDomain" ID="2">
            <PARAMETER TYPE="s" NAME="DomainServer" DIR="in"/>
        </METHOD>
		<!-- 方法：设置DDNS服务绑定网口组 -->
		<METHOD NAME="SetDdnsEthGroup" ID="4">
            <PARAMETER TYPE="y" NAME="EthGroup" DIR="in"/>
        </METHOD>
		<!-- 方法：设置备选DDNS域名服务器IP -->
		<METHOD NAME="SetBackupDomain" ID="3">
            <PARAMETER TYPE="s" NAME="BackupServer" DIR="in"/>
		</METHOD>
		<!-- 方法：设置第二备选DDNS域名服务器IP -->
		<METHOD NAME="SetTertiaryDomain" ID="10">
            <PARAMETER TYPE="s" NAME="TertiaryServer" DIR="in"/>
		</METHOD>
		<!-- 方法：设置DDNS服务模式 -->
		<METHOD NAME="SetDdnsMode" ID="6">
            <PARAMETER TYPE="y" NAME="Mode" DIR="in"/>
		</METHOD>
		<!-- 方法：设置DDNS IP版本 -->
		<METHOD NAME="SetDdnsIPVer" ID="5">
            <PARAMETER TYPE="y" NAME="IPVer" DIR="in"/>
		</METHOD>
		<!-- 方法：设置DDNS域名服务器名称 -->
		<METHOD NAME="SetDomainName" ID="1">
            <PARAMETER TYPE="s" NAME="DomainName" DIR="in"/>
		</METHOD>
		<!-- 方法：设置DDNS服务模式变化标志 -->
		<METHOD NAME="SetDdnsDHCPFlag" ID="7">
            <PARAMETER TYPE="y" NAME="DHCPFlag" DIR="in"/>
		</METHOD>
        <!-- SMM主备同步方法 -->
        <METHOD NAME="PropertySyncMethod">
            <PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
    </CLASS>
	
	<!--传感器与事件相关类，begin added by zhenggenqiang-->
	<!-- 
	描述：向其他模块提供各项系统当前告警，各项属性保留默认配置即可，
	所属模块：传感器(sensor_alarm)-->
	<CLASS ID="46" NAME="Warning">
		<!-- 当前非告警事件个数 -->
		<PROPERTY NAME="NormalAlarmNum"     TYPE="u">	</PROPERTY>
		<!-- 轻微告警个数 -->
		<PROPERTY NAME="MinorAlarmNum" TYPE="u" ID="3">	</PROPERTY>
		<!-- 严重告警个数 -->
		<PROPERTY NAME="MajorAlarmNum" TYPE="u" ID="2">	</PROPERTY>
		<!-- 紧急告警个数 -->
		<PROPERTY NAME="CriticalAlarmNum" TYPE="u" ID="1">	</PROPERTY>
		<!-- 当前健康状态 -->
		<PROPERTY NAME="HealthStatus"  	TYPE="y">	</PROPERTY>
		<!-- 当前健康分数 -->
		<PROPERTY NAME="HealthScore"  	TYPE="y">	</PROPERTY>
		<!-- 当前告警是否支持立即上报 -->
		<PROPERTY NAME="ImmediatelyReport" EXPORT="17" TYPE="y" ID="4">	</PROPERTY>
		<!-- PCIe槽位总体健康状态 -->
		<PROPERTY NAME="PcieSlotAlarmState"  TYPE="y">		</PROPERTY>
		<!-- 最近更新告警时的时间戳 -->
		<PROPERTY NAME="AlarmUpdateTimestamp"  TYPE="u">		</PROPERTY>
		<!-- 方法：获取当前告警事件 -->
		<METHOD NAME="GetEventItem">
			<PARAMETER TYPE="q" NAME="RecordId" DIR="in"/>
			<PARAMETER TYPE="q" NAME="NextRecordId" DIR="out"/>
			<PARAMETER TYPE="s" NAME="EventEntityName" DIR="out"/>
			<PARAMETER TYPE="s" NAME="EventSensorName" DIR="out"/>
			<PARAMETER TYPE="u" NAME="EventAssertTime" DIR="out"/>	
			<PARAMETER TYPE="y" NAME="AlarmLevel" DIR="out"/>
			<PARAMETER TYPE="u" NAME="EventCode" DIR="out"/>
			<PARAMETER TYPE="s" NAME="EventDescp" DIR="out"/>
			<PARAMETER TYPE="s" NAME="EventSugg" DIR="out"/>	
			<PARAMETER TYPE="s" NAME="EventArgs" DIR="out"/>
			<PARAMETER TYPE="s" NAME="EventSource" DIR="out"/>
			<PARAMETER TYPE="u" NAME="TrapEventCode" DIR="out"/>
			<PARAMETER TYPE="s" NAME="TrapEventOid" DIR="out"/>
			<PARAMETER TYPE="s" NAME="TrapEventName" DIR="out"/>
			<PARAMETER TYPE="s" NAME="SubjectLocation" DIR="out"/>
			<PARAMETER TYPE="y" NAME="EventFruType" DIR="out"/>
			<PARAMETER TYPE="q" NAME="SubjectId" DIR="out"/>
			<PARAMETER TYPE="u" NAME="TrapNewEventCode" DIR="out"/>
			<PARAMETER TYPE="s" NAME="TrapNewEventOid" DIR="out"/>
            <PARAMETER TYPE="y" NAME="EventSensorType" DIR="out"/>
		</METHOD>
		
		<METHOD NAME="SetImmediatelyReport" ID="4">
			<PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
		</METHOD>
		<!-- 方法：获取告警事件对应事件详细描述 -->
		<METHOD NAME="GetEventDescInfo">
			<PARAMETER TYPE="ay" NAME="DescParaArray" DIR="in"/>
			<PARAMETER TYPE="s" NAME="EventDescInfoStr" DIR="out"/>
		</METHOD>
		
		 <!-- PCIe槽位总体健康状态 FaultState：0表示不告警，1表示告警 告警级别严重 -->
        <METHOD NAME="SetPcieSlotAlarmState">		
            <PARAMETER TYPE="y" NAME="PcieSlotAlarmState" DIR="in"/>
        </METHOD>
	</CLASS>

	<!-- FRU健康状态对象描述，当前存储产品上控制器告警灯，只能够是单板上的故障才点，而CPU/MEM等组件都属于
		控制器上的器件，不能够直接使用主板的Comopnent的健康状态点灯，因此是用该类做汇聚 -->
	<CLASS NAME="FruWarning">
        <!-- FRU类型，0:控制器, 1:框, 2:内置FRU   其余需依次递增定义 -->
        <PROPERTY NAME="FruType"             TYPE="y">  </PROPERTY>
        <!-- FRU健康状态 -->
        <PROPERTY NAME="HealthStatus"  	     TYPE="y">  </PROPERTY>
        <!-- 此FRU上包含的Component组件类型列表 -->
        <PROPERTY NAME="ComponentTypeList"   TYPE="ay"> </PROPERTY>
        <!-- 参与健康状态判断的告警类型：0x0表示Fru上的所有告警，0x1表示温度类型告警，0x2表示内置FRU故障类型告警 -->
        <PROPERTY NAME="AlarmType"           TYPE="y">  </PROPERTY>
        <!-- 整框温度健康状态，用于主从BMC之间同步 -->
        <PROPERTY NAME="ChassisHealthStatus" TYPE="y">  </PROPERTY>
		<!-- 对板获取健康状态 -->
		<METHOD NAME="GetHealthStatus">
			<PARAMETER TYPE="y" NAME="Health" DIR="out"/>
		</METHOD>
		<!-- 同步chassis健康状态 -->
		<METHOD NAME="SyncChassisHealthStatus">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
	</CLASS>
	
    <!-- 描述：用于集合所有特定类型的告警
         所属模块：sensor_alarm -->
    <CLASS NAME="DeviceFaultInfoAdpt">
        <!-- 关联到FruWarning的告警类型 -->	
        <PROPERTY NAME="AlarmType" TYPE='y'>  </PROPERTY>
		<!-- 关联到EventMonitor的告警状态 -->	
        <PROPERTY NAME="Health" TYPE='y'>    </PROPERTY>
    </CLASS>
	
	<!--
	描述：lcd类
	-->
	<CLASS NAME="Lcd">
	    <!-- 用于查询lcd的在为信息 -->
		<PROPERTY NAME="Presence" TYPE="y"></PROPERTY>
		<!-- 用于查询lcd的健康信息 -->
		<PROPERTY NAME="Health" TYPE="y"></PROPERTY>
		<!-- 8100使用，用于lcd在主从之间切换时清空cpld相应的位 -->
		<PROPERTY NAME="Clear"  	TYPE="y">	</PROPERTY>
		<!-- 8100使用，用于lcd在主从之间切换时修改cpld相应的位 -->
		<PROPERTY NAME="Status"  	TYPE="y">	</PROPERTY>
		<!-- 8100使用，用于VGA在主从之间切换时清空cpld相应的位 -->
		<PROPERTY NAME="VGASwitchClear"  	TYPE="y">	</PROPERTY>
		<!-- 8100使用，用于VGA在主从之间切换时修改cpld相应的位 -->
		<PROPERTY NAME="VGASwitchStatus"  	TYPE="y">	</PROPERTY>
		<!-- lcd位置号信息 -->
        <PROPERTY NAME="LcdUnitNum" 	TYPE="u">	</PROPERTY>		
		<!-- lcd当前版本信息 -->
        <PROPERTY NAME="LcdVer" 	TYPE="s">	</PROPERTY>		
		<!-- lcd板名 -->
		<PROPERTY NAME="Name" 	TYPE="s">	</PROPERTY>	
	    <!-- 8100使用，lcd主从之间切换的方法 -->
		<METHOD NAME="SwitchLcd">
				<PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>
		<!-- lcd升级时由升级模块调用，用于启停lcd进程占用uart -->
		<METHOD NAME="StartStopLcd">
				<PARAMETER TYPE="u" NAME="flag" DIR="in"/>
		</METHOD>
		<METHOD NAME="PropertySyncMethod">
			<PARAMETER DIR="in" TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
		</METHOD>
	</CLASS>
		
	<CLASS NAME="Entity">
		<!-- Id/Instance 请参考IPMI规范43.13 Entity IDs -->
		<PROPERTY NAME="Id"     	TYPE="y">	</PROPERTY>
		<PROPERTY NAME="Instance"  	TYPE="y">	</PROPERTY>
		<!-- 槽位号，配置为0xFF时，程序运行时根据加载槽位自动更新 -->
		<PROPERTY NAME="AnchorSlot" TYPE="y">	</PROPERTY>
		<!-- 实体类型描述 -->
		<PROPERTY NAME="EntityType" TYPE="s">	</PROPERTY>
		<!-- 实体名称 -->
		<PROPERTY NAME="EntityName" TYPE="s">	</PROPERTY>
		<!-- 实体健康状态 -->
		<PROPERTY NAME="Health"  	TYPE="y">	</PROPERTY>
		<!-- 实体使能状态，使能时实体的传感器可以扫描 -->
		<PROPERTY NAME="EnableState"  	TYPE="y">	</PROPERTY>
		<!-- 实体上电状态 -->
		<PROPERTY NAME="PowerState"  	TYPE="y">	</PROPERTY>
		<!-- 实体在位状态，仅当实体上电且在位的时候实体上的传感器才启动扫描 -->
		<PROPERTY NAME="PresentState"  	TYPE="y">	</PROPERTY>
		<!-- 实体轻微告警时扣分 -->
		<PROPERTY NAME="MinorScore"  	TYPE="y">	</PROPERTY>
		<!-- 实体严重告警时扣分 -->
		<PROPERTY NAME="MajorScore"  	TYPE="y">	</PROPERTY>
		<!-- 实体紧急告警时扣分 -->
		<PROPERTY NAME="CriticalScore"  TYPE="y">	</PROPERTY>
		<!-- 实体当前分数 -->
		<PROPERTY NAME="CurrentScore"  	TYPE="y">	</PROPERTY>
		<!-- 方法：获取实体告警事件 -->
		<METHOD NAME="GetEventItem">
			<PARAMETER TYPE="q" NAME="RecordId" DIR="in"/>
			<PARAMETER TYPE="q" NAME="NextRecordId" DIR="out"/>
			<PARAMETER TYPE="s" NAME="EventSensorName" DIR="out"/>
			<PARAMETER TYPE="u" NAME="EventAssertTime" DIR="out"/>	
			<PARAMETER TYPE="y" NAME="AlarmLevel" DIR="out"/>
			<PARAMETER TYPE="u" NAME="EventCode" DIR="out"/>
			<PARAMETER TYPE="s" NAME="EventDescp" DIR="out"/>
        </METHOD>
		<CLASS NAME="AgentEntity"> </CLASS>
	</CLASS>	
	
	<!--
	描述：离散传感器
	所属模块：传感器模块(sensor_alarm)-->
	<CLASS NAME="ThresholdSensor">
    	<!-- 传感器内部名称，最大32 bytes -->
        <PROPERTY NAME="InnerName" TYPE='s'>			</PROPERTY>
		<!-- 以下属性请参考IPMI规范 43.1 SDR Type 01h Full Sensor Record -->
		<PROPERTY NAME="OwnerId" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="OwnerLun" TYPE='y'>			</PROPERTY>
		<!-- 配置为0xFF则自动分配 -->
		<PROPERTY NAME="Number" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="EntityId" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="EntityInstance" TYPE='y'>	</PROPERTY>
		<PROPERTY NAME="Initialization" TYPE='y'>	</PROPERTY>
		<PROPERTY NAME="Capabilities" TYPE='y'>		</PROPERTY>
		<PROPERTY NAME="SensorType" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="SensorTypeStr" TYPE='s'>		</PROPERTY>
		<PROPERTY NAME="EventReadingType" TYPE='y'>		</PROPERTY>
		<PROPERTY NAME="AssertionMask" TYPE='q'>		</PROPERTY>
		<PROPERTY NAME="DeassertionMask" TYPE='q'>		</PROPERTY>		
		<PROPERTY NAME="DiscreteReadingMask" TYPE='q'>	</PROPERTY>		
		<PROPERTY NAME="SensorUnit" TYPE='y'>			</PROPERTY>		
		<PROPERTY NAME="BaseUnit" TYPE='y'>				</PROPERTY>		
		<PROPERTY NAME="ModifierUnit" TYPE='y'>			</PROPERTY>		
		<PROPERTY NAME="Function" TYPE='y'>				</PROPERTY>		
		<PROPERTY NAME="M" TYPE='y'>					</PROPERTY>		
		<PROPERTY NAME="Tolerance" TYPE='y'>			</PROPERTY>		
		<PROPERTY NAME="B" TYPE='y'>					</PROPERTY>		
		<PROPERTY NAME="Accuracy" TYPE='y'>				</PROPERTY>		
		<PROPERTY NAME="AccuracyExp" TYPE='y'>			</PROPERTY>		
		<PROPERTY NAME="RBExp" TYPE='y'>				</PROPERTY>		
		<PROPERTY NAME="AnalogFlags" TYPE='y'>			</PROPERTY>		
		<PROPERTY NAME="NominalReading" TYPE='y'>		</PROPERTY>		
		<PROPERTY NAME="NormalMax" TYPE='y'>			</PROPERTY>		
		<PROPERTY NAME="NormalMin" TYPE='y'>			</PROPERTY>		
		<PROPERTY NAME="MaxReading" TYPE='y'>			</PROPERTY>		
		<PROPERTY NAME="MinReading" TYPE='y'>				</PROPERTY>		
		<PROPERTY NAME="UpperNonrecoverable" TYPE='y'>		</PROPERTY>		
		<PROPERTY NAME="UpperCritical" TYPE='y'>			</PROPERTY>		
		<PROPERTY NAME="UpperNoncritical" TYPE='y'>			</PROPERTY>		
		<PROPERTY NAME="LowerNonrecoverable" TYPE='y'>		</PROPERTY>		
		<PROPERTY NAME="LowerCritical" TYPE='y'>			</PROPERTY>		
		<PROPERTY NAME="LowerNoncritical" TYPE='y'>			</PROPERTY>		
		<PROPERTY NAME="PositiveHysteresis" TYPE='y'>		</PROPERTY>		
		<PROPERTY NAME="NegativeHysteresis" TYPE='y'>		</PROPERTY>		
		<PROPERTY NAME="TypeLengthCode" TYPE='y'>			</PROPERTY>		
		<PROPERTY NAME="SensorName" TYPE='s'>				</PROPERTY>	
		<PROPERTY NAME="SensorUnitStr" TYPE='s'>			</PROPERTY>
		<PROPERTY NAME="ReadingRaw" TYPE='q'>				</PROPERTY>
		<!-- 以下属性不需要配置，保持默认即可，由程序自动更新 -->
		<!-- 根据配置转换后的读数及阈值 -->
		<PROPERTY NAME="ReaddingConvert" TYPE='d'>			</PROPERTY>	
		<PROPERTY NAME="UpperNonrecoverableConvert" TYPE='d'>	</PROPERTY>		
		<PROPERTY NAME="UpperCriticalConvert" TYPE='d'>			</PROPERTY>		
		<PROPERTY NAME="UpperNoncriticalConvert" TYPE='d'>		</PROPERTY>		
		<PROPERTY NAME="LowerNonrecoverableConvert" TYPE='d'>	</PROPERTY>		
		<PROPERTY NAME="LowerCriticalConvert" TYPE='d'>			</PROPERTY>		
		<PROPERTY NAME="LowerNoncriticalConvert" TYPE='d'>		</PROPERTY>		
		<PROPERTY NAME="PositiveHysteresisConvert" TYPE='d'>	</PROPERTY>		
		<PROPERTY NAME="NegativeHysteresisConvert" TYPE='d'>	</PROPERTY>		
		<!-- 传感器健康状态 -->
		<PROPERTY NAME="Health" TYPE="y">						</PROPERTY>
		<!-- 传感器数据可读状态 -->
		<PROPERTY NAME="ReadingStatus" TYPE='y'>				</PROPERTY>
		<!-- 传感器Assert状态 -->
		<PROPERTY NAME="AssertStatus" TYPE='q'>					</PROPERTY>
		<!-- 传感器Deassert状态 -->
		<PROPERTY NAME="DeassertStatus" TYPE='q'>				</PROPERTY>
		<!-- 方法：获取传感器的告警事件 -->
		<METHOD NAME="GetEventItem">
            <PARAMETER TYPE="q" NAME="RecordId" DIR="in"/>
			<PARAMETER TYPE="q" NAME="NextRecordId" DIR="out"/>
			<PARAMETER TYPE="u" NAME="EventAssertTime" DIR="out"/>	
			<PARAMETER TYPE="y" NAME="AlarmLevel" DIR="out"/>
			<PARAMETER TYPE="u" NAME="EventCode" DIR="out"/>
			<PARAMETER TYPE="s" NAME="EventDescp" DIR="out"/>
        </METHOD>
		<!-- 方法：传感器测试 -->
		<METHOD NAME="Test">
			<!-- enable：1 enable; 0 disable 启动/停止测试-->
			<PARAMETER TYPE="u" NAME="enable" DIR="in"/>
			<!-- 测试值 浮点数-->
			<PARAMETER TYPE="d" NAME="value" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetSensorThreshold">
			<!-- 设置门限方法-->
			<PARAMETER TYPE="y" NAME="Mask" DIR="in"/>
			<PARAMETER TYPE="y" NAME="LowerNoncritical" DIR="in"/> 
			<PARAMETER TYPE="y" NAME="LowerCritical" DIR="in"/>
			<PARAMETER TYPE="y" NAME="LowerNonrecoverable" DIR="in"/>
			<PARAMETER TYPE="y" NAME="UpperNoncritical" DIR="in"/>
			<PARAMETER TYPE="y" NAME="UpperCritical" DIR="in"/>
			<PARAMETER TYPE="y" NAME="UpperNonrecoverable" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetThresholdParam">
			<!-- 设置传感器参数方法-->
			<PARAMETER TYPE="y" NAME="M" DIR="in"/>
			<PARAMETER TYPE="y" NAME="B" DIR="in"/> 
			<PARAMETER TYPE="y" NAME="RBExp" DIR="in"/>
		</METHOD>		
	</CLASS>
	
	<!-- 
	描述：离散传感器
	所属模块：传感器模块(sensor_alarm)-->
	<CLASS NAME="DiscreteSensor">
    	<!-- 传感器内部名称，最大32 bytes -->    
        <PROPERTY NAME="InnerName" TYPE='s'>			</PROPERTY>    
		<!-- 以下属性请参考IPMI规范 43.1 SDR Type 01h Full Sensor Record -->
		<PROPERTY NAME="OwnerId" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="OwnerLun" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="Number" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="EntityId" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="EntityInstance" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="Initialization" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="Capabilities" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="SensorType" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="SensorTypeStr" TYPE='s'>			</PROPERTY>
		<PROPERTY NAME="EventReadingType" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="AssertionMask" TYPE='q'>			</PROPERTY>
		<PROPERTY NAME="DeassertionMask" TYPE='q'>			</PROPERTY>		
		<PROPERTY NAME="DiscreteReadingMask" TYPE='q'>		</PROPERTY>		
		<PROPERTY NAME="SensorUnit" TYPE='y'>				</PROPERTY>		
		<PROPERTY NAME="BaseUnit" TYPE='y'>					</PROPERTY>		
		<PROPERTY NAME="ModifierUnit" TYPE='y'>				</PROPERTY>		
		<PROPERTY NAME="RecordSharing" TYPE='q'>			</PROPERTY>		
		<PROPERTY NAME="PositiveHysteresis" TYPE='y'>		</PROPERTY>		
		<PROPERTY NAME="NegativeHysteresis" TYPE='y'>		</PROPERTY>		
		<PROPERTY NAME="TypeLengthCode" TYPE='y'>			</PROPERTY>		
		<PROPERTY NAME="SensorName" TYPE='s'>				</PROPERTY>
		<PROPERTY NAME="ReadingRaw" TYPE='q'>				</PROPERTY>
		<!-- 离散传感器类型 0为普通离散 1为数字离散
		具体区别参考IPMI规范 42.1 EventReading Type Codes -->
		<PROPERTY NAME="DiscreteType" TYPE="y">				</PROPERTY>
		<!-- 以下属性不需要配置，保持默认即可，由程序自动更新 -->
		<PROPERTY NAME="Health" TYPE="y">					</PROPERTY>
		<PROPERTY NAME="ReadingStatus" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="AssertStatus" TYPE='q'>				</PROPERTY>
		<PROPERTY NAME="DeassertStatus" TYPE='q'>			</PROPERTY>
		<!-- 方法：获取传感器的告警事件 -->
		<METHOD NAME="GetEventItem">
            <PARAMETER TYPE="q" NAME="RecordId" DIR="in"/>
			<PARAMETER TYPE="q" NAME="NextRecordId" DIR="out"/>
			<PARAMETER TYPE="u" NAME="EventAssertTime" DIR="out"/>	
			<PARAMETER TYPE="y" NAME="AlarmLevel" DIR="out"/>
			<PARAMETER TYPE="u" NAME="EventCode" DIR="out"/>
			<PARAMETER TYPE="s" NAME="EventDescp" DIR="out"/>
        </METHOD>
		<!-- 方法：传感器测试 -->
		<METHOD NAME="Test">
			<!-- enable：1 enable; 0 disable 启动/停止测试-->
			<PARAMETER TYPE="u" NAME="enable" DIR="in"/>
			<!-- 测试值 uint16-->
			<PARAMETER TYPE="q" NAME="value" DIR="in"/>
		</METHOD>
		<!-- 方法：传感器使能 -->
		<METHOD NAME="State">
			<!-- enable：1 enable; 0 disable 启动/停止测试-->
			<PARAMETER TYPE="y" NAME="enable" DIR="in"/>
		</METHOD>
	</CLASS>
	
	<CLASS NAME="DeaSdr">
		<PROPERTY NAME="ContainerEntityId" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="ContainerEntityInstance" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="ContainerEntityAddress" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="ContainerEntityChannel" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="Flags" TYPE='y'>							</PROPERTY>
		<PROPERTY NAME="ContainedEntity1Address" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="ContainedEntity1Channel" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="ContainedEntity1Id" TYPE='y'>				</PROPERTY>		
		<PROPERTY NAME="ContainedEntity1Instance" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="ContainedEntity2Address" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="ContainedEntity2Channel" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="ContainedEntity2Id" TYPE='y'>				</PROPERTY>		
		<PROPERTY NAME="ContainedEntity2Instance" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="ContainedEntity3Address" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="ContainedEntity3Channel" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="ContainedEntity3Id" TYPE='y'>				</PROPERTY>		
		<PROPERTY NAME="ContainedEntity3Instance" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="ContainedEntity4Address" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="ContainedEntity4Channel" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="ContainedEntity4Id" TYPE='y'>				</PROPERTY>		
		<PROPERTY NAME="ContainedEntity4Instance" TYPE='y'>			</PROPERTY>
	</CLASS>
	<CLASS NAME="McdlSdr">
		<PROPERTY NAME="DeviceSlaveAddr" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="ChannelNum" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="PowerStateGlobalInit" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="DeviceCap" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="EntityId" TYPE='y'>						</PROPERTY>
		<PROPERTY NAME="EntityInstance" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="DeviceIdTypeLen" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="DeviceIdString" TYPE='s'>				</PROPERTY>		
	</CLASS>
	<CLASS NAME="OemSdr">
		<PROPERTY NAME="ManufacturerID" TYPE='ay'>				</PROPERTY>
		<PROPERTY NAME="OemData" TYPE='ay'>					    </PROPERTY>	
	</CLASS>
	
	<!-- 
	描述：事件监听类，指定属性变化时改变对应离散传感器的状态
	所属模块：传感器模块(sensor_alarm) -->
	<CLASS NAME="DiscreteEvent">
		<!-- 指定监听的属性，可使用y或者u两种类型 -->
		<PROPERTY NAME="PropertyRef" TYPE='*'>		</PROPERTY>
		<!-- 监听类型， 默认为0，非侦听模式，实时扫描，data0/1/2/dir取值从本对象属性获取
			配置为1时，表示监听PropertyRef属性，data0/1/2/dir取值均从PropertyRef（组合属性）中获取
			配置为2时，表示该事件为立即上报，即每次轮询间隔为50ms
			配置为3时，表示监听PropertyRef属性，data0/1/2/dir取值从本对象属性获取
		-->
		<PROPERTY NAME="ListenType" TYPE='y'>		</PROPERTY>
		<!-- Data0/1/2定义请参考IPMI规范 42 Sensor and Event Code Tables -->
		<!-- 传感器事件的data0，可使用rp或者y两种类型-->
		<PROPERTY NAME="Data0Ref" TYPE="y">			</PROPERTY>
		<!-- 传感器事件的data1，可使用rp或者y两种类型-->
		<PROPERTY NAME="Data1Ref" TYPE="y">			</PROPERTY>
		<!-- 传感器事件的data2，可使用rp或者y两种类型-->
		<PROPERTY NAME="Data2Ref" TYPE="y">			</PROPERTY>
		<!-- 事件产生方向，可使用rp或者y两种类型
			当conversion为0时，dir=0表示deassert，dir=1表示assert
			当conversion为1时，dir=0表示assert，dir=1表示deassert -->
		<PROPERTY NAME="DirectionRef" TYPE="*">		</PROPERTY>
		<!-- 是否翻转 -->
		<PROPERTY NAME="conversion" TYPE="y">		</PROPERTY>
		<!-- 关联的传感器，可使用ro类型 -->
		<PROPERTY NAME="SensorName" TYPE='*'>		</PROPERTY>
	</CLASS>
	
	<!-- 
	描述：事件描述信息，用来匹配事件码与事件的字符串描述
	所属模块：传感器模块(sensor_alarm) -->
	<CLASS NAME="EventDescp">
		<!-- 传感器类型 -->
		<PROPERTY NAME="SensorType" TYPE='y'>		</PROPERTY>
		<!-- 事件读取类型 -->
		<PROPERTY NAME="EventReadType" TYPE='y'>	</PROPERTY>
		<!-- Data0/1/2事件码 -->
		<PROPERTY NAME="EventData0" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="EventData1" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="EventData2" TYPE="y">		</PROPERTY>
		<!-- 标识Data1/2不同时事件是否不同 -->
		<PROPERTY NAME="DescValidFlag" TYPE="y">	</PROPERTY>
		<!-- 事件告警等级 -->
		<PROPERTY NAME="AlarmLevel" TYPE="y">		</PROPERTY>
		<!-- 不需要配置，保持默认0xFFFFFFFF即可，由程序根据事件自动生成供其他模块获取 -->
		<PROPERTY NAME="EventCode" TYPE="u">		</PROPERTY>
		<!-- 传感器描述 -->
		<PROPERTY NAME="SensorDesc" TYPE='s'>		</PROPERTY>
		<!-- 告警事件描述 -->
		<PROPERTY NAME="EventDesc" TYPE='s'>		</PROPERTY>
		<!-- 方法：获取当前告警事件 -->
		<METHOD NAME="GetEventItem">
			<PARAMETER TYPE="ay" NAME="EventMsgData" DIR="in"/>
			<PARAMETER TYPE="y" NAME="AlarmLevel" DIR="out"/>
			<PARAMETER TYPE="u" NAME="EventCode" DIR="out"/>
			<PARAMETER TYPE="s" NAME="EventDescp" DIR="out"/>
        </METHOD>
	</CLASS>
	
	<!-- 
	描述：Sdr类
	所属模块：传感器模块(sensor_alarm)-->
	<CLASS NAME="SdrDev" ID="68">
		<!-- sdr数量 -->
		<PROPERTY NAME="SdrNum" TYPE='y'>			</PROPERTY>
		<!-- sdr版本 -->
		<PROPERTY NAME="SdrVer" TYPE='s'>			</PROPERTY>
		<!-- sdr_type12的Record Id -->
		<PROPERTY NAME="SdrType12RecId" TYPE='q'>	</PROPERTY>
		<!-- sdr版本是否变化，程序维护，配置为0即可 -->
		<PROPERTY NAME="VersionChange" TYPE="y">	</PROPERTY>	
		<!-- 传感器异常信息组合属性，程序维护，配置为0即可 -->
		<PROPERTY NAME="SensorErrorMix" TYPE='u'>	</PROPERTY>
		<!-- 传感器访问状态，程序维护，配置为0即可 -->
		<PROPERTY NAME="SensorStatus" TYPE='y'>		</PROPERTY>
		<!-- 异常传感器编号，程序维护，配置为0即可 -->
		<PROPERTY NAME="SensorErrIndex" TYPE='y'>	</PROPERTY >
		
		<!-- 动态分配传感器号的起始传感器号，用于百度等客户传感器定制化特性，
		用于预留给华为自定义传感器(客户定义的传感器之外的所有传感器)编号的起始编号，该属性默认值为1，
		在生产定制化根据客户要求定制，但只在检测到有SensorOemConfig类的对象后才生效，否则未生效时该属性值为1；
		SensorOemConfig类的对象在升级传感器定制化包时加载。 -->
		<PROPERTY NAME="DynamicSensorNumBase" TYPE='y' ID="1" EXPORT="17">	</PROPERTY>
		<METHOD NAME="SetDynamicSensorNumBase" ID="1">
            <PARAMETER TYPE="y" NAME="BaseNum" DIR="in"/>
        </METHOD>
		<!-- 设置SdrDev数量变化标志，会重新初始化sdrdev_init，处理Fru设备热拔插场景合入 -->
		<METHOD NAME="SetSdrVerChangeFlag">
        </METHOD>
	</CLASS>
	
	<!-- 
	描述：Sel过滤配置，当匹配成功时才记录sel
	所属模块：传感器模块(sensor_alarm)-->
	<CLASS NAME="SelFilter">
		<!-- 传感器类型，当事件的SensorType、EventReadingType匹配
		时使用Mask1/2/3与事件的Data0/1/2进行匹配 -->
		<PROPERTY NAME="SensorType" TYPE='y'>			</PROPERTY>
		<!-- 事件读取类型 -->
		<PROPERTY NAME="EventReadingType" TYPE="y">		</PROPERTY>
		<!-- 事件掩码，属性Mask1/2/3与事件的Data0/1/2相与为非零，则匹配成功 -->
		<PROPERTY NAME="Mask1" TYPE="q">				</PROPERTY>
		<PROPERTY NAME="Mask2" TYPE="q">				</PROPERTY>
		<PROPERTY NAME="Mask3" TYPE="q">				</PROPERTY>
    </CLASS>
	<CLASS NAME="PefFilter">
        <PROPERTY NAME="Configuration" TYPE='y'>		</PROPERTY>
		<PROPERTY NAME="Action" TYPE="y">				</PROPERTY>
		<PROPERTY NAME="PolicyNumber" TYPE="y">			</PROPERTY>
		<PROPERTY NAME="Severity" TYPE="y">				</PROPERTY>
		<PROPERTY NAME="GeneratorId1" TYPE="y">			</PROPERTY>
		<PROPERTY NAME="GeneratorId2" TYPE="y">			</PROPERTY>
		<PROPERTY NAME="SensorType" TYPE="y">			</PROPERTY>
		<PROPERTY NAME="SensorNumber" TYPE="y">			</PROPERTY>
		<PROPERTY NAME="EventTrigger" TYPE="y">			</PROPERTY>
		<PROPERTY NAME="OffsetMask" TYPE="q">			</PROPERTY>
		<PROPERTY NAME="Event1AndMask" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="Event1Compare1" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="Event1Compare2" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="Event2AndMask" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="Event2Compare1" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="Event2Compare2" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="Event3AndMask" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="Event3Compare1" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="Event3Compare2" TYPE="y">		</PROPERTY>
    </CLASS>
	<CLASS NAME="AlertFilter">
        <PROPERTY NAME="PolicyNum" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="Destination" TYPE="y">			</PROPERTY>
		<PROPERTY NAME="AlertString" TYPE="y">			</PROPERTY>
    </CLASS>
	<CLASS NAME="AlertString">
        <PROPERTY NAME="FilterNumber" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="StringSet" TYPE="y">			</PROPERTY>
		<PROPERTY NAME="AltString" TYPE="s">			</PROPERTY>
    </CLASS>
	<CLASS NAME="SmtpConfig" ID="65">
        <PROPERTY NAME="SmtpEnable" TYPE='y' ID="1" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="SendSeverity" TYPE="y" ID="2" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="TlsSendMode" TYPE="y" ID="3" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="AnonymousMode" TYPE="y" ID="4" EXPORT="17">	</PROPERTY>
		<PROPERTY NAME="LoginName" TYPE="s" ID="5" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="LoginPasswd" TYPE="s" ID="6">		</PROPERTY>
		<!-- 根证书校验使能 -->
		<PROPERTY NAME="CertVerificationEnabled" TYPE="y">		</PROPERTY>
		<!-- 起始时间 -->
		<PROPERTY NAME="RootStartTime" TYPE="s">		</PROPERTY>	
		<!-- 过期时间 -->
		<PROPERTY NAME="RootExpirTime" TYPE="s">		</PROPERTY>
		<PROPERTY NAME="SmtpServer" TYPE="s" ID="7" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="SenderName" TYPE='s' ID="8" EXPORT="19">		</PROPERTY>
		<PROPERTY NAME="TempletTopic" TYPE='s' ID="9" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="TempletIpaddr" TYPE='y' ID="10" EXPORT="17">	</PROPERTY>
		<PROPERTY NAME="TempletBoardSn" TYPE='y' ID="11" EXPORT="17">	</PROPERTY>
		<PROPERTY NAME="TempletAsset" TYPE='y' ID="12" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="TempletChassisName" TYPE='y' ID="13" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="TempletChassisLocation" TYPE='y' ID="14" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="TempletChassisSerialNumber" TYPE='y' ID="15" EXPORT="17">		</PROPERTY>
		<!-- SMTP登录密码加密密钥 -->
		<PROPERTY NAME="LoginPasswdWorkKey" TYPE='s'> </PROPERTY>
		<!-- SMTP登录密码根密钥组件 -->
		<PROPERTY NAME="LoginPasswdComponent" TYPE='ay'> </PROPERTY>
        <!-- SMTP登录密码加密主密钥Id -->
        <PROPERTY NAME="LoginPasswdMasterKeyId" TYPE='u'> </PROPERTY>
		<PROPERTY NAME="ServerPort" TYPE="i">		</PROPERTY>
		<METHOD NAME="SetSmtpEnable" ID="1">
            <PARAMETER TYPE="y" NAME="SmtpEnable" DIR="in"/>			
        </METHOD>
	<METHOD NAME="SetSendSeverity" ID="2">
            <PARAMETER TYPE="y" NAME="Severity" DIR="in"/>			
        </METHOD>
	<METHOD NAME="SetTlsSendMode" ID="3">
            <PARAMETER TYPE="y" NAME="TlsSendMode" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetAnonymousMode" ID="4">
            <PARAMETER TYPE="y" NAME="AnonymousMode" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetCertVerificationEnabled">
            <PARAMETER TYPE="y" NAME="CertVerificationEnabled" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetLoginName" ID="5">
            <PARAMETER TYPE="s" NAME="LoginName" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetLoginPasswd" ID="6">
            <PARAMETER TYPE="s" NAME="LoginPasswd" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetSmtpServer" ID="7">
            <PARAMETER TYPE="s" NAME="SmtpServer" DIR="in"/>			
        </METHOD>
	    <METHOD NAME="SetServerPort">
            <PARAMETER TYPE="i" NAME="ServerPort" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetSenderName" ID="8">
            <PARAMETER TYPE="s" NAME="SenderName" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetTempletTopic" ID="9">
            <PARAMETER TYPE="s" NAME="TempletTopic" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetTempletIpaddr" ID="10">
            <PARAMETER TYPE="y" NAME="IpaddrEnable" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetTempletBoardSn" ID="11">
            <PARAMETER TYPE="y" NAME="BoardSnEnable" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetTempletAsset" ID="12">
            <PARAMETER TYPE="y" NAME="AssetEnable" DIR="in"/>			
        </METHOD>
        <METHOD NAME="SetTempletChassisName" ID="13">
            <PARAMETER TYPE="y" NAME="ChassisNameEnable" DIR="in"/>			
        </METHOD>
        <METHOD NAME="SetTempletChassisLocation" ID="14">
            <PARAMETER TYPE="y" NAME="ChassisLocationEnable" DIR="in"/>			
        </METHOD>
        <METHOD NAME="SetTempletChassisSerialNumber" ID="15">
            <PARAMETER TYPE="y" NAME="ChassisSerialNumberEnable" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SendTest">
            <PARAMETER TYPE="y" NAME="DestIndex" DIR="in"/>			
        </METHOD>
        <METHOD NAME="ImportCert">
			      <PARAMETER DIR="in"  NAME="CertPath"   TYPE="s"/>
        </METHOD>
        <METHOD NAME="GetCertInfo">
			<PARAMETER DIR="out" NAME="IssueBy" TYPE="s"/>
			<PARAMETER DIR="out" NAME="IssueTo" TYPE="s"/>
			<PARAMETER DIR="out" NAME="StartTime" TYPE="s"/>
			<PARAMETER DIR="out" NAME="EndTime" TYPE="s"/>
			<PARAMETER DIR="out" NAME="Serial" TYPE="s"/>
			<PARAMETER DIR="out" NAME="SigAlgo" TYPE="s"/>
			<PARAMETER DIR="out" NAME="KeyUsage" TYPE="s"/>
			<PARAMETER DIR="out" NAME="KenLen" TYPE="u"/>									
        </METHOD>
        <METHOD NAME="PropertySyncMethod">
            <PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
        <METHOD NAME="UpdateSmtpCiphertext">
			<PARAMETER DIR="in" NAME="NewKeyId" TYPE="u"/>
        </METHOD>
    </CLASS>
	<CLASS NAME="SmtpItemCfg" ID="66">
        <PROPERTY NAME="IndexNum" TYPE='y' ID="1" KEY="1">			</PROPERTY>
		<PROPERTY NAME="ItemEnable" TYPE='y' ID="2" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="EmailName" TYPE="s" ID="3" EXPORT="19">		</PROPERTY>
		<PROPERTY NAME="EmailDesc" TYPE="s" ID="4" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="Separator" TYPE="y" ID="5" EXPORT="17">		</PROPERTY>		
		<PROPERTY NAME="ShowKeyWord" TYPE="y" ID="6">		</PROPERTY>
		<PROPERTY NAME="Time" TYPE="y" ID="7" EXPORT="17">				</PROPERTY>		
		<PROPERTY NAME="Severity" TYPE="y" ID="8" EXPORT="17">			</PROPERTY>		
		<PROPERTY NAME="SensorName" TYPE="y" ID="9" EXPORT="17">		</PROPERTY>		
		<PROPERTY NAME="EventCode" TYPE="y" ID="10" EXPORT="17">		</PROPERTY>		
		<PROPERTY NAME="EventDesc" TYPE="y" ID="11" EXPORT="17">		</PROPERTY>
		<METHOD NAME="SetItemEnable" ID="2">
            <PARAMETER TYPE="y" NAME="ItemEnable" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetEmailName" ID="3">
            <PARAMETER TYPE="s" NAME="EmailName" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetEmailDesc" ID="4">
            <PARAMETER TYPE="s" NAME="EmailDesc" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetSeparator" ID="5">
            <PARAMETER TYPE="y" NAME="Separator" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetShowKeyWord" ID="6">
            <PARAMETER TYPE="y" NAME="ShowKeyWord" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetTimeSend" ID="7">
            <PARAMETER TYPE="y" NAME="TimeSend" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetSeveritySend" ID="8">
            <PARAMETER TYPE="y" NAME="SeveritySend" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetSensorNameSend" ID="9">
            <PARAMETER TYPE="y" NAME="SensorNameSend" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetEventCodeSend" ID="10">
            <PARAMETER TYPE="y" NAME="EventCodeSend" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetEventDescSend" ID="11">
            <PARAMETER TYPE="y" NAME="EventDescSend" DIR="in"/>			
        </METHOD>
        <METHOD NAME="PropertySyncMethod">
            <PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
	</CLASS>	
	<CLASS NAME="TrapConfig" ID="67">
        <PROPERTY NAME="TrapEnable" TYPE='y' ID="1" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="TrapVersion" TYPE="y" ID="2" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="TrapMode" TYPE="y" ID="3" EXPORT="17">		</PROPERTY>
		<!-- Trap消息定制：0:默认 1:腾讯定制 -->
		<PROPERTY NAME="CustomizeTrapMode" TYPE="y">	</PROPERTY>
		<PROPERTY NAME="TrapIdentity" TYPE="y" ID="4" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="Trapv3Userid" TYPE="y" ID="5" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="Trapv3AuthProtocol" TYPE="y"></PROPERTY>
		<PROPERTY NAME="Trapv3PrivProtocol" TYPE="y"></PROPERTY>
		<PROPERTY NAME="SendSeverity" TYPE="y" ID="6" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="CommunityName" TYPE="s" ID="7">	</PROPERTY>
		<!-- Trap团体名加密密钥 -->
		<PROPERTY NAME="CommunityWorkKey" TYPE="s">	</PROPERTY>
		<!-- Trap团体名根密钥组件 -->
		<PROPERTY NAME="CommunityComponent" TYPE="ay"> </PROPERTY>
        <!-- Trap团体名加密主密钥Id -->
        <PROPERTY NAME="CommunityMasterKeyId" TYPE="u">	</PROPERTY>
	<METHOD NAME="SetTrapEnable" ID="1">
		<PARAMETER TYPE="y" NAME="TrapEnable" DIR="in"/>			
        </METHOD>
	<METHOD NAME="SetVersion" ID="2">
		<PARAMETER TYPE="y" NAME="Version" DIR="in"/>			
        </METHOD>
	<METHOD NAME="SetTrapMode" ID="3">
		<PARAMETER TYPE="y" NAME="Mode" DIR="in"/>			
        </METHOD>
	<METHOD NAME="SetTrapIdentity" ID="4">
		<PARAMETER TYPE="y" NAME="Identity" DIR="in"/>			
        </METHOD>
	<METHOD NAME="SetTrapv3Userid" ID="5">
		<PARAMETER TYPE="y" NAME="Trapv3Userid" DIR="in"/>			
        </METHOD>
	<METHOD NAME="SetSendSeverity" ID="6">
		<PARAMETER TYPE="y" NAME="Severity" DIR="in"/>			
        </METHOD>
	<METHOD NAME="SetCommunityName" ID="7">
		<PARAMETER TYPE="s" NAME="CommunityName" DIR="in"/>			
        </METHOD>
    <METHOD NAME="GetCommunityName" ID="8">
		<PARAMETER TYPE="s" NAME="CommunityName" DIR="out"/>			
        </METHOD>
	<METHOD NAME="SendTest">
		<PARAMETER TYPE="y" NAME="DestIndex" DIR="in"/>			
        </METHOD>
        <METHOD NAME="PropertySyncMethod">
            <PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
        <METHOD NAME="UpdateTrapCiphertext">
			<PARAMETER DIR="in" NAME="NewKeyId" TYPE="u"/>
        </METHOD>
	</CLASS>	
	<CLASS NAME="TrapItemCfg" ID="4">
        <PROPERTY NAME="IndexNum" TYPE='y' ID="1" KEY="1">			</PROPERTY>
		<PROPERTY NAME="ItemEnable" TYPE='y' ID="2" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="DestIpAddr" TYPE="s" ID="3" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="DestIpPort" TYPE="u" ID="4" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="Separator" TYPE="y" ID="5" EXPORT="17">		</PROPERTY>		
		<PROPERTY NAME="ShowKeyWord" TYPE="y" ID="6" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="Time" TYPE="y" ID="7" EXPORT="17">				</PROPERTY>		
		<PROPERTY NAME="Severity" TYPE="y" ID="8" EXPORT="17">			</PROPERTY>		
		<PROPERTY NAME="SensorName" TYPE="y" ID="9" EXPORT="17">		</PROPERTY>		
		<PROPERTY NAME="EventCode" TYPE="y" ID="10" EXPORT="17">		</PROPERTY>		
		<PROPERTY NAME="EventDesc" TYPE="y" ID="11" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="BobEnable" TYPE="y" ID="12" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="BmaVethIpAddr" TYPE="s" ID="13">    </PROPERTY>	
		<PROPERTY NAME="BmaVethIpPort" TYPE="u" ID="14" EXPORT="17">	</PROPERTY>
		<METHOD NAME="SetItemEnable" ID="2">
            <PARAMETER TYPE="y" NAME="ItemEnable" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetDestIpAddr" ID="3">
            <PARAMETER TYPE="s" NAME="IpAddr" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetDestIpPort" ID="4">
            <PARAMETER TYPE="u" NAME="IpPort" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetSeparator" ID="5">
            <PARAMETER TYPE="y" NAME="Separator" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetShowKeyWord" ID="6">
            <PARAMETER TYPE="y" NAME="ShowKeyWord" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetTimeSend" ID="7">
            <PARAMETER TYPE="y" NAME="TimeSend" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetSeveritySend" ID="8">
            <PARAMETER TYPE="y" NAME="SeveritySend" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetSensorNameSend" ID="9">
            <PARAMETER TYPE="y" NAME="SensorNameSend" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetEventCodeSend" ID="10">
            <PARAMETER TYPE="y" NAME="EventCodeSend" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetEventDescSend" ID="11">
            <PARAMETER TYPE="y" NAME="EventDescSend" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetBobEnable" ID="12">
            <PARAMETER TYPE="y" NAME="BobEnable" DIR="in"/>			
        </METHOD>
		<METHOD NAME="SetBmaVethPort" ID="14">
            <PARAMETER TYPE="u" NAME="BmaVethIpPort" DIR="in"/>			
        </METHOD>
        <METHOD NAME="PropertySyncMethod">
            <PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
	</CLASS>
	<CLASS NAME="Sel" ID="132">
		<PROPERTY NAME="Enable" TYPE='y'>			</PROPERTY>
        <PROPERTY NAME="Version" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="SelCurNum" TYPE="q">		</PROPERTY>
		<PROPERTY NAME="SelMaxNum" TYPE="q">		</PROPERTY>
		<PROPERTY NAME="AddTime" TYPE="u">			</PROPERTY>		
		<PROPERTY NAME="DelTime" TYPE="u">			</PROPERTY>		
		<PROPERTY NAME="UnitSize" TYPE="y">			</PROPERTY>
        <!-- SEL被清除, 代码内部使用, 不需要配置  1: 被清除;   0: 正常 -->
        <PROPERTY NAME="SELCleared" TYPE="u">		</PROPERTY>
		<PROPERTY NAME="QuerySelMaxNum" TYPE="q" ID="1" EXPORT="17"> </PROPERTY>
		<METHOD NAME="SetSelEnable">
            <PARAMETER TYPE="y" NAME="SelEnable" DIR="in"/>			
        </METHOD>
		<METHOD NAME="ClearSel">
        </METHOD>
		<METHOD NAME="GetEventInfo">
            <PARAMETER TYPE="u" NAME="SensorNumType" DIR="in"/>
			<PARAMETER TYPE="u" NAME="SelEventData" DIR="in"/>
			<PARAMETER TYPE="s" NAME="EventObjName" DIR="out"/>
			<PARAMETER TYPE="s" NAME="EventSensorName" DIR="out"/>
			<PARAMETER TYPE="s" NAME="EventEntityName" DIR="out"/>
        </METHOD>
	    <METHOD NAME="CollectSel">
		    <PARAMETER TYPE="s" NAME="DestFilePath" DIR="in"/>
       	</METHOD>
		<!-- 上报当前事件 -->
		<METHOD NAME="RearmEvents">
			<!-- 上报指定序号的事件，seq为0时全部上报 -->
			<PARAMETER TYPE="u" NAME="Seq" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetQuerySelMaxNum" ID="1">
			<!--设置支持ipmitool sel list 查询的iBMC的SEL条数支持可配置: 1~2000条(2000默认) -->
            <PARAMETER TYPE="q" NAME="QuerySelMaxNum" DIR="in"/>
		</METHOD>
		<METHOD NAME="QueryEventListByDate">
			<PARAMETER TYPE="u" NAME="start" DIR="in"/>
			<PARAMETER TYPE="u" NAME="end" DIR="in"/>
            <PARAMETER TYPE="i" NAME="subscriptionId" DIR="in"/>
            <PARAMETER TYPE="i" NAME="type" DIR="in"/>
			<PARAMETER TYPE="s" NAME="events" DIR="out"/>
		</METHOD>
        <METHOD NAME="SaveEventInfo">
			<PARAMETER TYPE="y" NAME="subscriptionId" DIR="in"/>
			<PARAMETER TYPE="u" NAME="datetime" DIR="in"/>
			<PARAMETER TYPE="s" NAME="jsonData" DIR="in"/>
            <PARAMETER TYPE="i" NAME="type" DIR="in"/>
		</METHOD>
        <METHOD NAME="DeleteEventList">
			<PARAMETER TYPE="i" NAME="subscriptionId" DIR="in"/>
			<PARAMETER TYPE="u" NAME="startTime" DIR="in"/>
			<PARAMETER TYPE="u" NAME="endData" DIR="in"/>
            <PARAMETER TYPE="i" NAME="type" DIR="in"/>
		</METHOD>
		<METHOD NAME="QuerySelLog">
			<PARAMETER TYPE="i" NAME="limit" DIR="in"/>
			<PARAMETER TYPE="i" NAME="lastid" DIR="in"/>
			<PARAMETER TYPE="s" NAME="langType" DIR="in"/>
			<PARAMETER TYPE="s" NAME="search_data" DIR="in"/>
			<PARAMETER TYPE="i" NAME="level" DIR="in"/>
			<PARAMETER TYPE="s" NAME="subject_type" DIR="in"/>
			<PARAMETER TYPE="i" NAME="begin_time" DIR="in"/>
			<PARAMETER TYPE="i" NAME="end_time" DIR="in"/>
			<PARAMETER TYPE="*" NAME="*" DIR="out"/>
		</METHOD>
	</CLASS>	
	<!--传感器与事件相关类，end added by zhenggenqiang-->

	<!--PCI-E卡管理模块相关类，begin added by zhenggenqiang-->
	<CLASS NAME="OscaPcieCard">
		<PROPERTY NAME="Name" TYPE='s'>						</PROPERTY>
		<PROPERTY NAME="I2CValue" TYPE='q'>						</PROPERTY>
		<PROPERTY NAME="WidthType" TYPE='y'>						</PROPERTY>
	</CLASS>	
	
	<!-- 
	描述：PCIE卡配置信息类
	所属模块：扣卡管理模块(pcie_card) -->
	<CLASS ID="40" NAME="PcieCard">
		<!-- PCIE卡槽位信息 -->
		<PROPERTY NAME="PcieCardSlot" TYPE="y" ID="1" >			</PROPERTY>
        <!-- PCIe卡逻辑槽位号（和丝印对应），如果丝印与PcieCardSlot不一致时，配置此属性为硬件给出的实际丝印值；如果丝印与PcieCardSlot一致时，此属性配置为0xff -->
        <PROPERTY NAME="LogicSlot" TYPE='y'>                    </PROPERTY>
		<!-- PCIE卡厂商ID -->
		<PROPERTY NAME="VenderId" TYPE="q" ID="5" >			</PROPERTY>
		<!-- PCIE卡设备ID -->
		<PROPERTY NAME="DeviceId" TYPE="q" ID="6" >			</PROPERTY>
		<!-- PCIE卡厂商Sub ID -->
		<PROPERTY NAME="SubVenderId" TYPE="q" ID="11">			</PROPERTY>
		<!-- PCIE卡设备Sub ID -->
		<PROPERTY NAME="SubDeviceId" TYPE="q" ID="12">			</PROPERTY>
		<!-- PCIE卡在位信号 -->
		<PROPERTY NAME="Presence" TYPE="y" ID="2" >			</PROPERTY>
        <!-- PCIE卡健康状态 -->
        <PROPERTY NAME="Health" TYPE="y" ID="7">          </PROPERTY>
		<!-- PCIE卡功能分类 0:未知  1:RAID 2:网卡（以太网、FC卡、FcOE卡等） 3:GPU卡 4:存储卡（SSD卡/M.2卡）5:SDI卡 6:加速卡 7:扩展卡（PCIe Riser）8:FPGA卡 9:NPU卡 -->
		<PROPERTY NAME="FunctionClass" TYPE="y">          </PROPERTY>
		<!-- PCIE卡描述信息 -->
		<PROPERTY NAME="CardDesc" TYPE="s" ID="4" >			</PROPERTY>
		<PROPERTY NAME="EventDevice" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="EventDirection" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="DeviceStatus1" TYPE='y'>			</PROPERTY>
        <PROPERTY NAME="Segment" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="BusNum" TYPE='y' ID="8">			</PROPERTY>
		<PROPERTY NAME="DeviceNum" TYPE='y' ID="9">			</PROPERTY>
		<PROPERTY NAME="FunctionNum" TYPE='y' ID="10">			</PROPERTY>
		<PROPERTY NAME="Type" TYPE='s'>						</PROPERTY>
		<PROPERTY NAME="Manufacturer" TYPE="s" ID="3" >						</PROPERTY>
		<PROPERTY NAME="FatalError" TYPE='y'>						</PROPERTY>
		<!-- 表示部件是否故障诊断定位的故障源，1表示是故障源，0表示不是 -->
		<PROPERTY NAME="FDMFault" TYPE='y'>  </PROPERTY>
		<!-- PCIE Raid卡故障信号，从BIOS上报 -->
		<PROPERTY NAME="FaultByBIOS" TYPE="y">			</PROPERTY>
		<!-- 表示卡的下一级抽象，配置类名称，而非对象名；没有的话不配置
		     下一级对象的槽位号要跟Pcie卡的槽位号一致   -->
		<PROPERTY NAME="SlaveCard" TYPE="s"></PROPERTY>
		<!-- PcbIdReg引用硬件寄存器，然后转换为字符串更新到PcbVer属性 -->
		<PROPERTY NAME="PcbIdReg" TYPE="y" >			</PROPERTY>
		<PROPERTY NAME="PcbVer" TYPE="s" >			</PROPERTY>
		<PROPERTY NAME="BoardId" TYPE="q" > 		</PROPERTY>
		<PROPERTY NAME="BomId" TYPE="y" > 		</PROPERTY>
		<!-- 关联的固件类，没有的话为空 -->
		<PROPERTY NAME="Firmware" TYPE="ro" > 		</PROPERTY>
		<!-- 对外显示名称 -->
		<PROPERTY NAME="Name" TYPE='s' > 		</PROPERTY>
		<!-- 表示当前卡的资源归属  起始值1，表示当前挂在的CPU， 其中0xff：PCieSwitch  0xfe:PCH  --> 
		<PROPERTY NAME="ResId" TYPE="y"></PROPERTY>
		<!-- 卡单板名称信息 -->
		<PROPERTY NAME="BoardName" TYPE="s"></PROPERTY>
		<!-- 关联部件 -->
		<PROPERTY NAME="RefComponent" TYPE="ro">		      	</PROPERTY>
		<!--支持规范,不支持为0xff-->
		<PROPERTY NAME="Protocol" TYPE="y">	<VALUE></VALUE>	</PROPERTY>
		<!-- 支持单帧返回长度 -->
		<PROPERTY NAME="MaxFrameLen" TYPE="u">	<VALUE></VALUE>	</PROPERTY>
        <!-- 用于带外管理通信的关联芯片，一般是I2C器件 -->
        <PROPERTY NAME="RefChip" TYPE="ro">  <VALUE></VALUE> </PROPERTY>
        <!-- 主控芯片个数，单芯片或者不区分时配置1，多芯片时根据实际个数配置，芯片索引范围是1~ChipNumber -->
        <PROPERTY NAME="ChipNumber" TYPE='y'>    <VALUE></VALUE> </PROPERTY>		
        <!-- 主控芯片温度，多芯片时表示最高温度 -->
        <PROPERTY NAME="ChipTemp" TYPE='q'>    <VALUE></VALUE> </PROPERTY>
		<!-- 故障码 表示不同PCIe标卡的故障码-->
		<PROPERTY NAME="FaultCode" TYPE="s">	<VALUE></VALUE>	</PROPERTY>
		<!-- 故障状态 按位表示不同的故障状态，与故障码相对应-->
		<PROPERTY NAME="FaultState" TYPE="*">	<VALUE></VALUE>	</PROPERTY>
		<!-- PFA Event -->
		<PROPERTY NAME="PFAEvent" TYPE='y'>  </PROPERTY>
		<!-- PCIe BandWidth Decreased Event -->
		<PROPERTY NAME="DecreasedBandWidth" TYPE='y'>  </PROPERTY>
		<!-- 含义与SlaveCard一致，用于表示多芯片的PCIE卡 -->
		<PROPERTY NAME="SlaveCardArr" TYPE="as">  </PROPERTY>
		<!-- PCIe卡启动过程中 ID 发生变化，	需要重新加载， 配置为1， 否则为0	-->
		<PROPERTY NAME="ReloadXml" TYPE='y'>  </PROPERTY>		
		<PROPERTY NAME="LinkWidthAbility" TYPE="s">  </PROPERTY>
		<PROPERTY NAME="LinkSpeedAbility" TYPE="s">  </PROPERTY>
		<PROPERTY NAME="LinkWidth" TYPE="s">  </PROPERTY>
		<PROPERTY NAME="LinkSpeed" TYPE="s">  </PROPERTY>
		<PROPERTY NAME="PartNum" TYPE='s'>	</PROPERTY>
        <!-- 更换后SN -->    
        <PROPERTY NAME="SerialNumber" TYPE="s" ></PROPERTY>
        <!-- 更换前SN -->   
        <PROPERTY NAME="PreviousSN" TYPE="s" ></PROPERTY> 
        <!-- 部件是否发生了更换，用于产生SEL日志 -->
        <PROPERTY NAME="ReplaceFlag" TYPE="y" >	</PROPERTY>  
		<!-- PCIe卡描述是否支持从pci.ids中获取	-->
		<PROPERTY NAME="IndentifyInIDS" TYPE='y'>  </PROPERTY>
		<!-- BMC芯片直连的PCIe设备 -->
		<CLASS NAME="LocalPcieCard"></CLASS>
		<CLASS NAME="OCPCard"></CLASS>
		<!-- 扩展PCIe卡类 -->
		<CLASS NAME="ExtendPcieCard"> 
			<!-- 扩展卡的基卡 -->
			<PROPERTY NAME="BaseCard" TYPE="ro"></PROPERTY>
			<!-- 扩展卡是否需要查询PF信息 ,1为需要查询pf，0为不需要查询pf-->
			<PROPERTY NAME="SyncPfInfo" TYPE="y"></PROPERTY>
			<!-- 提供给redfish获取扩展卡pf信息函数-->
			<METHOD NAME="GetPfInfo">
		            <PARAMETER TYPE="ay" NAME="Pfinfo" DIR="out"/>
		    </METHOD>
		</CLASS>
		<!-- PCIe 共享卡类 -->
		<CLASS ID="146" NAME="PangeaPcieCard"> 
			<!-- 描述共享卡的MCU版本信息-->
			<PROPERTY NAME="MCUVer"        TYPE="s">   </PROPERTY>
			<!-- 描述共享卡的MCU的升级状态 -->
			<PROPERTY NAME="MCUUpgradeStatus" TYPE="y">    </PROPERTY>
			<!-- 描述共享卡的MCU 温度-->
			<PROPERTY NAME="MCUTemp"         TYPE="q">    </PROPERTY>
			<!-- 描述共享卡的逻辑类型 -->
			<PROPERTY NAME="LogicType" TYPE="q">    </PROPERTY>
			<!-- 描述共享卡一卡多用多丝印多功能的配置信息 -->
			<PROPERTY NAME="Workmode"       TYPE='ay'>   </PROPERTY>
			<!-- 描述共享卡的HOST数量 -->
			<PROPERTY NAME="PCIeLinkHostCnt"    TYPE="q">    </PROPERTY>
			<!-- 共享卡产品管理数据，在企业存储节点由带内DMI管理进程使用 -->
			<PROPERTY NAME="ProductConfData"   TYPE="s">    </PROPERTY>
			<!-- 共享卡扩展数据，在企业存储节点由带内DMI管理进程和BMC配合使用 -->
			<PROPERTY NAME="ExtentConfData"     TYPE='ay'>   </PROPERTY>
			<!-- 关联芯片 -->
			<PROPERTY NAME="McuChip" TYPE="ro">  </PROPERTY>
			<!-- 共享卡insertok -->
			<PROPERTY NAME="InsertOK" TYPE="y">  </PROPERTY>
			<!-- 共享卡insertok的写保护 -->
			<PROPERTY NAME="InsertOkWp" TYPE="y"> </PROPERTY>
			<PROPERTY NAME="SfpTemp"    TYPE="q">    </PROPERTY>
			<PROPERTY NAME="CardPGStatus" TYPE="y">  </PROPERTY>
		</CLASS>
		<METHOD NAME="ReadDataFromMCU">
			<!-- 下发给MCU的命令字 -->
			<PARAMETER TYPE="q"  NAME="Opcode" DIR="in"/>
			<PARAMETER TYPE="y"  NAME="DataLen" DIR="in"/>
		    <PARAMETER TYPE="s"  NAME="Data" DIR="out"/>
		</METHOD>
		<!--  设置MCU版本号 -->
		<METHOD NAME="UpdateMCUVer">
		</METHOD>
		<!--  写电子标签-->
		<METHOD NAME="PangeaCardSetElable">
			<PARAMETER TYPE="ay" NAME="FruData" DIR="in"/>
		</METHOD>
		<!--  读电子标签 -->
		<METHOD NAME="PangeaCardGetElable">
		    <PARAMETER TYPE="ay" NAME="FruData" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetPcieAlarmLedState">
			<PARAMETER TYPE="ay" NAME="LedState" DIR="in"/>
		</METHOD>
		<METHOD NAME="GetPcieAlarmLedState">
			<PARAMETER TYPE="y" NAME="LedState" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetFDMFault">
			<PARAMETER TYPE="y" NAME="FDMFault" DIR="in"/>
		</METHOD>
		<!--  设置PFAEvent -->
		<METHOD NAME="SetPFAEvent">
			<PARAMETER TYPE="y" NAME="PFAEvent" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetPcieLinkAbility">
			<PARAMETER TYPE="s" NAME="LinkWidthAbility" DIR="in"/>
			<PARAMETER TYPE="s" NAME="LinkSpeedAbility" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetPcieLinkInfo">
			<PARAMETER TYPE="s" NAME="LinkWidth" DIR="in"/>
			<PARAMETER TYPE="s" NAME="LinkSpeed" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetPcieTemp">
			<PARAMETER TYPE="q" NAME="ChipTemp" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetPcieErrorInfo">
			<PARAMETER TYPE="y" NAME="FaultState" DIR="in"/>
			<PARAMETER TYPE="s" NAME="FaultCode" DIR="in"/>
		</METHOD>
		
		<!-- 读取MCU数据通用接口 供其他模块调用 -->
		<METHOD NAME="MCUReadData">
			<PARAMETER TYPE="q" NAME="Opcode" DIR="in"/>
			<!-- 值的有效范围为[0,15] 具体详见《PCIE设备带外管理接口规范》 -->
			<PARAMETER TYPE="y" NAME="TargetLun" DIR="in"/>
			<PARAMETER TYPE="y" NAME="CmgArg" DIR="in"/>	
			<PARAMETER TYPE="ay" NAME="RequestData" DIR="in"/>
			<PARAMETER TYPE="ay" NAME="ResponseData" DIR="out"/>			
		</METHOD>
		
		<!-- 写MCU数据通用接口 供其他模块调用 -->
		<METHOD NAME="MCUWriteData">
			<PARAMETER TYPE="q" NAME="Opcode" DIR="in"/>
			<!-- 值的有效范围为[0,15] 具体详见《PCIE设备带外管理接口规范》 -->
			<PARAMETER TYPE="y" NAME="TargetLun" DIR="in"/>
			<PARAMETER TYPE="y" NAME="CmgArg" DIR="in"/>	
			<PARAMETER TYPE="ay" NAME="RequestData" DIR="in"/>		
		</METHOD>
		<METHOD NAME="SetPcieCardDesc" ID="4">
			<PARAMETER TYPE="s" NAME="PcieCardDesc" DIR="in"/>
		</METHOD>	
		<METHOD NAME="SetAgentProperty">
			<PARAMETER TYPE="s" NAME="PropertyName" DIR="in"/>
			<PARAMETER TYPE="*" NAME="PropertyVal" DIR="in"/>
			<PARAMETER TYPE="u" NAME="SaveOption" DIR="in"/>
		</METHOD>
	</CLASS>	
	
	<!--ipmi相关类，begin added by zongmingli-->
	<!-- 
	描述：描述IPMI通道信息，请参照IPMI规范
	IPMI模块(ipmi_app)-->
	<CLASS NAME="IPMIChannel">
		 <!-- 通道类型 -->
		<PROPERTY NAME="ChanType" TYPE='y'>		</PROPERTY>
		 <!-- 通道实例 -->
		<PROPERTY NAME="Instance" TYPE='y'>		</PROPERTY>
		 <!-- 通道协议 1:IPMB -->
		<PROPERTY NAME="ChanPro"  TYPE="y">		</PROPERTY>
		 <!-- 通道ID -->
		<PROPERTY NAME="ChannelID"  TYPE="y">		</PROPERTY>
		 <!-- 目的地址 -->
		<PROPERTY NAME="DestAddr" TYPE="y">		</PROPERTY>
	     <!-- 源地址 -->		
		<PROPERTY NAME="SrcAddr"  TYPE="y">		</PROPERTY>
		<!-- 媒介类型 1:IPMB 2:ICMB 1.0 3:ICMB 0.9 4:802.3 LAN 5:RS232 6:Other LAN 0C:sys -->
		<PROPERTY NAME="MedType"  TYPE='y'>		</PROPERTY>
		<!-- 获取dest ipmb address对应port id方法 -->
		<METHOD NAME="GetPortId">
			<PARAMETER TYPE="y" NAME="PortId" DIR="out"/>
		</METHOD>
	</CLASS>
	
	<!-- 
	描述：描述RMCP端口信息
	IPMI模块(ipmi_app)-->
	<CLASS NAME="RmcpConfig" ID="5">
		<!-- RMCP服务主用端口 -->
		<PROPERTY NAME="Port1" TYPE="q" ID="1" EXPORT="17">		</PROPERTY>
		<!--  RMCP服务备用端口 -->
		<PROPERTY NAME="Port2"  TYPE="q" ID="2" EXPORT="17">		</PROPERTY>
	    <!--  RMCP服务是否启用： 0 禁用，1启用 -->
		<PROPERTY NAME="ServiceFlag"  TYPE="y" ID="3" EXPORT="17">	</PROPERTY>
		<!--  RMCP协议使能： 0 禁用，1使能-->
		<PROPERTY NAME="LanState"  TYPE="y" ID="4" EXPORT="17">	</PROPERTY>
		<!--  RMCP+协议使能： 0 禁用，1使能-->
		<PROPERTY NAME="LanPlusState"  TYPE="y" ID="5" EXPORT="17">	</PROPERTY>
		<!--  用于定制化索引-->
		<PROPERTY NAME="ServiceID"  TYPE="u" ID="6">	</PROPERTY>
		
	    <!-- 对外方法：设置RMCP端口 -->
		<METHOD NAME="SetRmcpPort">
        <PARAMETER TYPE="y" NAME="state" DIR="in"/>
		<PARAMETER TYPE="q" NAME="port1" DIR="in"/>
		<PARAMETER TYPE="q" NAME="port2" DIR="in"/>
		<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
        </METHOD>
		<!-- 对外方法：设置IPMILAN协议使能状态 -->
		<METHOD NAME="SetIPMILanProtocolState">
        <PARAMETER TYPE="y" NAME="protocol_type" DIR="in"/>
		<PARAMETER TYPE="y" NAME="state" DIR="in"/>
		<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
        </METHOD>
		<!-- 以下是供定制化服务调用 -->
		<!-- 对外方法：设置RMCP服务使能 -->
		<METHOD NAME="SetServiceState" ID="3">
        <PARAMETER TYPE="y" NAME="state" DIR="in"/>
		<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
        </METHOD>
		<!-- 对外方法：设置LAN1.5协议使能 -->
		<METHOD NAME="SetLanState" ID="4">
        <PARAMETER TYPE="y" NAME="state" DIR="in"/>
		<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
        </METHOD>
		<!-- 对外方法：设置LAN2.0协议使能 -->
		<METHOD NAME="SetLanlusState" ID="5">
        <PARAMETER TYPE="y" NAME="state" DIR="in"/>
		<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
        </METHOD>
		<!-- 获取session权限 -->
		<METHOD NAME="GetSessionPrivilege">
        <PARAMETER TYPE="u" NAME="session_id" DIR="in"/>
		<PARAMETER TYPE="y" NAME="privilege" DIR="out"/>
        </METHOD>
		
		<METHOD NAME="TestIpmiRpcReady"> 
		</METHOD>
		<METHOD NAME="PropertySyncMethod">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		    <PARAMETER TYPE="*" NAME="*" DIR="out"/>
		</METHOD>
	</CLASS>	
	
	<!-- 
	描述：描述串口信息
	IPMI模块(ipmi_app)-->
	<CLASS NAME="Com" ID="76">
		<!-- 串口序号1：sys 2：bmc 3：expander -->
		<PROPERTY NAME="ComIndex" TYPE='y'>		</PROPERTY>
		<!-- 串口ID -->
		<PROPERTY NAME="ComId" TYPE='y' ID="1">		</PROPERTY>
		<!-- 串口名称 -->
		<PROPERTY NAME="ComName"  TYPE="s">		</PROPERTY>
		<!-- 串口支持类型,是否支持SOL -->
		<PROPERTY NAME="ComSupport"  TYPE="y">	</PROPERTY>
		<!-- 串口支持类型,是否支持命令行SOL -->
		<PROPERTY NAME="CliSupport" TYPE="y">	</PROPERTY>
		<!-- 串口波特率是否自适应, -->
		<PROPERTY NAME="AdaptiveFlag"  TYPE="y">	</PROPERTY>
		<!-- 串口波特率 -->
		<PROPERTY NAME="BaudRate"  TYPE="i">	</PROPERTY>
        <!-- 串口环回标识 -->
		<PROPERTY NAME="LoopbackFlag" TYPE="y" ID="2">	</PROPERTY>		
		<!-- 串口通道 默认为0xff -->
		<PROPERTY NAME="ComChannel"  TYPE="y">	</PROPERTY>
		<!-- 串口日志大小，以KB为单位-->
		<PROPERTY NAME="MaxLogSize"  TYPE="q">	</PROPERTY>		
		<!--串口日志配置-->
		<!--串口日志导出使能-->
		<PROPERTY NAME="SolEnable" TYPE="y"></PROPERTY>
		<!--TX,RX日志大小，范围0~7，分别对应0.25M/0.5M/1M/2M/4M/8M/16M/32M。-->
		<!--串口日志TX大小-->
		<PROPERTY NAME="TxSize"  TYPE="y"></PROPERTY>
		<!--串口日志RX大小-->
		<PROPERTY NAME="RxSize"  TYPE="y"></PROPERTY>
		<!--sol index, 取值范围0~3, 0->UART1, 1->UART2, 2->UART3, 3->UART4-->
		<PROPERTY NAME="SOLIndex"  TYPE="y"></PROPERTY>
		<!-- 支持SOL日志记录中，UART需要互联的PORT口，默认0xff表示不需要互联，否则将（SOLIndex+1）的UART与该PORT进行互联-->
		<PROPERTY NAME="SOLConnectedPort"  TYPE="y"></PROPERTY>
		<!--0是获取TX。1是获取RX-->
		<PROPERTY NAME="SolDataDirection"  TYPE="y"></PROPERTY>
		<!--是否是系统串口，1代表是0代表不是-->
		<PROPERTY NAME="IsSyscom"  TYPE="y"></PROPERTY>
		<!--该串口的日志是否开启自动收集。默认关闭-->
		<PROPERTY NAME="SolAutoCollectEnable" TYPE="y"></PROPERTY>
		<!--该串口日志如果开启了自动收集，这个值有效：代表最大收集日志个数-->
		<PROPERTY NAME="AllSolVolumeSize" TYPE="y"></PROPERTY>
		<!-- 切换通道方法 -->
		<METHOD NAME="SwitchComChannel">		
        	<PARAMETER TYPE="y" NAME="channel" DIR="in"/>
        </METHOD>
		<METHOD NAME="RestartSolServer">
        </METHOD>
		<METHOD NAME="GetLoopbackConfirmedFlg">
		<PARAMETER TYPE="i" NAME="ConfirmedFlg" DIR="out"/>
		</METHOD>
	</CLASS>	

	<!-- 
	描述：IPMI消息过滤类，用于需要在ipmi消息接受后过滤出指定消息的场景
	IPMI模块(ipmi_app)-->
	<CLASS ID="134" NAME="IPMIMessageFilter">
		<!-- IPMI消息过滤总开关: 0 开关关闭; 1 开关开启 -->
		<PROPERTY NAME="FireWallStatus" TYPE='y' ID="1" EXPORT="17">    </PROPERTY>
		<!-- IPMI消息过滤总开关开启时,启动的黑白名单模式：0 黑名单模式; 1 白名单模式 -->
		<PROPERTY NAME="FireWallMode" TYPE='y'  ID="2" EXPORT="17">		</PROPERTY>
		<!-- 设置或清除过滤条件方法 -->
		<METHOD NAME="SetFilterCondition">
			<!-- 操作类型： 0清除过滤条件    1 设置过滤条件 -->
			<PARAMETER TYPE="y" NAME="Operator" DIR="in"/>
			<!-- 过滤条件 -->
			<PARAMETER TYPE="ay" NAME="FilterCondition" DIR="in"/>
		</METHOD>
		<!-- 获取过滤出的IPMI消息方法 -->
		<METHOD NAME="GetFilteredMessage">
			<!-- 过滤条件 -->
			<PARAMETER TYPE="ay" NAME="FilterCondition" DIR="in"/>
			<!-- 过滤出的IPMI消息 -->
			<PARAMETER TYPE="ay" NAME="FilteredMessage" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetFireWallStatus" ID="1">
			<!--设置IPMI消息过滤总开关: 0 开关关闭; 1 开关开启 -->
          	<PARAMETER TYPE="y" NAME="FireWallStatus" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetFireWallMode" ID="2">
			<!--
			IPMI消息过滤总开关开启时,启动的黑白名单模式：0 黑名单模式; 1 白名单模式;
			IPMI消息过滤总开关关闭时，该属性值为0xff;
			-->
        	<PARAMETER TYPE="y" NAME="FireWallMode" DIR="in"/>
		</METHOD>
	</CLASS>
	
	<!-- 允许读的硬件信息，其属性和ipmi命令0x30/0x92/0x22对应 -->
	<CLASS NAME="HardwardInfoReadCmd">
	    <!-- 硬件协议类型 1: CPLD 2: GPIO 3: I2C 4: EDMA Other: reserved -->
	    <PROPERTY NAME="Type" TYPE="y">   </PROPERTY>
		<!-- Chip ID(芯片ID)
             Type为1（CPLD）时，默认为1，当存在多个CPLD时可以根据情况改变；
             Type为2（GPIO）时，默认为1；
             Type为3（I2C）时，表示bus id，即I2C_1则填充1；
             Type为4（EDMA）时，此字段填0，-->
		<PROPERTY NAME="ChipId" TYPE="y">   </PROPERTY>
		<!-- Type为3时该字段有效，其余默认为0 -->
		<PROPERTY NAME="Addr" TYPE="q">   </PROPERTY>
		<!-- reg读偏移 -->
		<PROPERTY NAME="Offset" TYPE="q">   </PROPERTY>
		<!-- 读数据长度，1~32字节 -->
		<PROPERTY NAME="Length" TYPE="y">   </PROPERTY>
		<!-- PCA9545 Bus id -->
		<PROPERTY NAME="Pca9545BusId" TYPE="ay">   </PROPERTY>
		<PROPERTY NAME="Pca9545Addr"  TYPE="aq">   </PROPERTY>
		<PROPERTY NAME="RefChip" TYPE="ro"> </PROPERTY>
	</CLASS>
	
	<!--ipmi相关类，end added by zongmingli-->
			
	<!--begin modified by qichengming at 2013.9.23-->	
	
	<!--FUNCTION:WidthBitMap-->
	<!-- 
	描述：单板所占位图查询表
	所属模块：Global模块(Global)-->
	<CLASS NAME="WidthBitMap">	
		<!-- 槽位宽度类型:
            (0: 半宽)
            (1: 全宽)
            (2: DOUBLE)
        -->
		<PROPERTY NAME="WidthType"  TYPE="y">		</PROPERTY>
		<!-- 计算槽位宽度的基本位图值 -->
		<PROPERTY NAME="BitMapValue"  TYPE="u">		</PROPERTY>
	</CLASS>	
	
	<!--FUNCTION:PRODUCT-->
	<!-- 
	描述：产品信息
	所属模块：Global模块(Global)-->
	<CLASS ID="48" NAME="PRODUCT">
        <!-- 主备同步使能，0 表示不支持主备同步升级; 1 表示支持主备同步升级 -->
		<PROPERTY NAME="SyncUpgradeEnable" TYPE="y"> </PROPERTY>
		<!-- 判断是否为白牌机，1:是白牌机，0:不是白牌机；默认值为0，构建时转售包修改为1 -->
		<PROPERTY NAME="IsCustomBrand" TYPE="y">	</PROPERTY>
		<!-- BMC升级生效分离模式使能开关，0 表示支持BMC升级生效分离功能; 1 表示不支持BMC升级生效分离功能 -->
		<PROPERTY NAME="BMCValidMode" TYPE="y"> </PROPERTY>	    
		<PROPERTY NAME="ResoureNotEnough" TYPE="u"> </PROPERTY>
		<!-- 产品名称，根据产品实际名称配置 -->
		<PROPERTY NAME="ProductName"  TYPE="s">		</PROPERTY>
		<!-- 新产品名称，根据产品实际名称配置 -->
		<PROPERTY NAME="NewProductName"  TYPE="s">		</PROPERTY>
		<!-- 产品别名，根据产品别名配置 -->
		<PROPERTY NAME="ProductAlias" TYPE="s" ID="8">		</PROPERTY>
		<PROPERTY NAME="DefaultProductAlias"  TYPE="s" ID="12">		</PROPERTY>
		<!-- 产品上BMC最大启动时间 -->
		<PROPERTY NAME="MaxStartUpTime"  TYPE="q">		</PROPERTY>
		<!-- 产品版本，根据产品实际版本配置 -->
		<PROPERTY NAME="ProductVersion"  TYPE="s">		</PROPERTY>		
		<!-- 产品管理软件平台版本，根据产品实际版本配置，值为数字 -->
		<PROPERTY NAME="ProductVersionNum" TYPE="y" ID="7">	</PROPERTY>
		<!-- 产品X86平台版本，根据产品实际版本配置，值为数字 -->
		<PROPERTY NAME="X86PlatformVersionNum" TYPE="y">	</PROPERTY>
		
		<!-- NVMe VMD热插拔功能使能  0：不支持  1：支持 -->
		<PROPERTY NAME="NVMeVMDEnable" TYPE="y">	</PROPERTY>		
		<!-- 产品ID:
			1 RH服务器
			2 Atlas平台
			3 X系列服务器
			4 OSCA平台
			5 盘古平台
			6 TCE平台
			7 MCCA平台
			8 高性能服务器平台
			9 路由器产品
        -->
		
		<PROPERTY NAME="ProductId"  TYPE="u">		</PROPERTY>
		<!-- 白牌产品ID:
			(40: 白牌后的2/4路机架系列)
			(41: 白牌后的高性能系列（8100，90XX）)
			(默认值和ProductId相同，构建时设置为对应转售ID)
		-->
		<PROPERTY NAME="CBProductID" TYPE="u">	</PROPERTY>
		<!-- PME时间配置源:
            (0: 1710_RTC)
            (1: ME)
            (2: SMM)
	    (3: NTP)
	    (4: board_RTC)
        -->
		<!-- 当前背板升级完成后是否生效标志:
		(0: 没有生效)
		(1: 已经生效)
        -->
		<PROPERTY NAME="BpCpldValidFlag" TYPE="y" ID="4">		</PROPERTY>
		<!-- 0：BMC_TIME_SRC_RTC  1711芯片内部RTC
             1: BMC_TIME_SRC_ME   从带内同步时间
             2: BMC_TIME_SRC_SHMC 计算板默认从SMM板同步时间 
             3: BMC_TIME_SRC_NTP  从NTP服务器获取时间
             4：BMC_TIME_SRC_BOARD_RTC  从本板的RTC时钟芯片获取时间
             5：BMC_TIME_SRC_BOARD_RTC_RO  从本板的RTC时钟芯片获取时间, 只读
             6: BMC_TIME_SRC_BOARD_RTC_RW  对于刀片单板带有本板RTC的机框式设备
             7: BMC_TIME_SRC_IMU   对于存储三大洋ARM CPU系列从IMU读取
             8: BMC_TIME_SRC_NODE  对于存储三大洋直通板从节点获取
             9: BMC_TIME_SRC_BOARD_RTC_POWER_OFF  对于Atlas 1951高密服务器，只有系统下电时才能从板上RTC时钟芯片同步或设置时间 -->
			 -->
		<PROPERTY NAME="TimeSrc"  TYPE="y">		</PROPERTY>
		<!-- 单板所在机框号 -->
		<PROPERTY NAME="ChassisNum" TYPE="u">        </PROPERTY>
		<!-- 当期PME是否支持BIOS全打印开关功能 -->
		<PROPERTY NAME="BiosPrintEnable"  TYPE="y">		</PROPERTY>
		<PROPERTY NAME="OtmDisplayEnable"  TYPE="y">		</PROPERTY>
		<!-- 单板命令行模块是否支持机箱管理，即命令行中有-l location参数,0表示不支持，1表示支持 -->
		<PROPERTY NAME="ShelfCliEnable"  TYPE="y">		</PROPERTY>
		<!-- 机箱管理软件单个命令屏蔽属性,0表示不支持，1表示支持 -->
		<PROPERTY NAME="ShelfCliShield"  TYPE="y">		</PROPERTY>
		<!-- 屏蔽原因:
           	 	(0: 不屏蔽)
            		(1: 主备板中，备板屏蔽)
			(后续字段根据需要扩展)
        	-->		
		<!-- 当期PME是否支持KVM功能 -->
		<PROPERTY NAME="KVMEnable"  TYPE="y">		</PROPERTY>
		<!-- 当期PME是否支持SOL功能 -->
		<PROPERTY NAME="SOLEnable"  TYPE="y">		</PROPERTY>
		<!-- 单板支持软raid的类型 -->
		<PROPERTY NAME="SWRaidType" EXPORT="17" TYPE="y"  ID="2">		</PROPERTY>
		<!-- 当期PME是否支持节能特性 -->
		<PROPERTY NAME="APSEnable"  TYPE="y">		</PROPERTY>
		<!-- 当期PME是否支持离线配置 -->
		<PROPERTY NAME="CAREnable"  TYPE="y">		</PROPERTY>
		<!-- 当期PME是否支持文件加载 -->
		<PROPERTY NAME="FWTEnable"  TYPE="y">		</PROPERTY>
		<!-- 当期PME是否支持MAC配置功能 -->
		<PROPERTY NAME="MACEnable"  TYPE="y">		</PROPERTY>
		<!-- 当期PME是否支持版本查询功能 -->
		<PROPERTY NAME="VEREnable"  TYPE="y">		</PROPERTY>
		<!-- PECI接口是否使能 0表示disable，1表示Enable，0xf0表示smbios协议转发peci-->
		<PROPERTY NAME="PeciEnable" TYPE="y">		</PROPERTY>
		<!-- 产品是否支持SSH公钥认证功能 -->
		<PROPERTY NAME="SSHPublicKeyEnable"  TYPE="y">	</PROPERTY>
        <!-- 产品是否支持捕获串口输入内容以切换的功能 1表示Enable, 0表示Disable -->
		<PROPERTY NAME="SerialListenSwitchEnable" TYPE="y">	</PROPERTY>
		<!-- 产品对应的图片类型 -->
		<PROPERTY NAME="ProductPic" TYPE="s">        </PROPERTY>
		<!-- 当前产品的服务器类型:
            (0: 机架)
            (1: 刀片)
            此属性已用新的属性MgmtSoftWareType取代，后续开发判断处理用MgmtSoftWareType.
        -->
		<PROPERTY NAME="ServerType"  TYPE="y">	    	</PROPERTY>
		<!-- 当前管理软件类型:
        高四位
            (0: 机架管理，bmc)
            (1: 高密计算节点管理，bmc)
            (2: 刀片计算节点管理，bmc)
            (3: 交换节点管理，bmc，交换板的管理)
            (4: 机框/柜外围部件管理，MMC/MM/RMC,负责管理电源节点的外围部件，如电源、风扇)
            (5: 机框/柜集中管理，SMM/CMC等，整框集中管理，节点信息汇总展示)
            (6: 机柜管理，包括柜内节点设备和柜上外接设备的管理)
        低四位    
            机架BMC：0-单BMC，1-多BMC；
            高密节点BMC：0；
            刀片计算BMC：0-刀片，1-组合刀片；
            交换BMC:低四位为0；
            外围部件管理：0-机框外围管理，1-机柜外围管理；
            集中管理：0-SMM，1-CMC，2-SMM扣卡BMC；
            机柜管理：0-RM110/RM210 RMM;
        -->
		<PROPERTY NAME="MgmtSoftWareType"  TYPE="y">	    	</PROPERTY>        
		<!-- CPLD所在的位置号 -->
		<PROPERTY NAME="CpldUnitNum"  TYPE="u">		</PROPERTY>
		<!-- PME所在的位置号 -->
		<PROPERTY NAME="FlashUnitNum" TYPE="u">		</PROPERTY>	
		<!-- 当前单板槽位宽度类型:
            (0: 半宽)
            (1: 全宽)
            (2: DOUBLE)			
        -->
		<PROPERTY NAME="BoardWidthType"  TYPE="y" ID="11">	    	</PROPERTY>
		<!-- OSCA 前插板slot基准id，半宽为1， 全宽如连接器在左边为1，连接器在右边应设为9，如果不关心设为0xff -->
		<PROPERTY NAME="BoardSlotBase"  TYPE="y">	    	</PROPERTY>
		<!-- 开箱事件 -->
		<PROPERTY NAME="OpenBoxEvent"  TYPE="u">	    	</PROPERTY>
		<PROPERTY NAME="BiosValid"  TYPE="y">	    	</PROPERTY>
		<!-- CPLD升级后是否自动生效
			(0: 不自动)
            (1: 自动)
		-->
		<PROPERTY NAME="CpldValid"  TYPE="y">	    	</PROPERTY>
		<!-- CPLD生效方式 0：BMC重启 1：AC掉电-->
		<PROPERTY NAME="CpldValidMode"  TYPE="y">	    	</PROPERTY>
		<!-- BIOS flash 大小配置,单位MB -->
		<PROPERTY NAME="BIOSFlashSize" TYPE="y">	 </PROPERTY>
		<!-- PCIE标卡NCSI线缆在位标志, PCIe标卡的NCSI通道硬件上提供了GPIO管脚判断NCSI线缆是否在位 -->
		<!--0: 可用, 1: 不可用 -->
		<PROPERTY NAME="PcieNcsiValid" TYPE="y" ID="1"> 		</PROPERTY>	
		<!--PCIe NCSI线缆接的PCIe卡在哪个槽位，默认配置0xff，表示未知，如果能获取到槽位就更新为实际接的卡槽位-->
		<PROPERTY NAME="PcieNcsiSlotId" TYPE="y"></PROPERTY>
		<!-- 方法: PcieNcsiSlotId-->
		<METHOD NAME="SetPcieNcsiSlotId" >
			<PARAMETER TYPE="y" NAME="SlotId" DIR="in"/>
		</METHOD>
		<!-- 用于生产查询主板对PCIE标卡NCSI功能支持能力（不管是否接NCSI线缆）; -->
		<!-- 0: 不支持； 1:支持 -->
		<PROPERTY NAME="PcieNcsiCapability" TYPE="y" ID="13"> 		</PROPERTY>	
		<PROPERTY NAME="RaidIntPin"  TYPE="s">		</PROPERTY>
		<PROPERTY NAME="NOSdCardState" TYPE="y">	 </PROPERTY>
		<!-- 底板PCH Board_Version -->
		<PROPERTY NAME="PCHBoardVersion" TYPE="y" ID="3"> 		</PROPERTY>
		<!-- 是否支持硬盘温度参与调速 1：不区分硬盘类型，硬盘温度最大值调速 2：SSD和Hdd硬盘独立调速 -->
		<PROPERTY NAME="DiskTempForThermalSupport" TYPE="y">	 </PROPERTY>
		<!-- 系统中所有硬盘的最高温度 -->
		<PROPERTY NAME="DisksMaxTemp" TYPE="q" >		</PROPERTY>
		<!-- 系统中所有SSD硬盘的最高温度 -->
		<PROPERTY NAME="SSDMaxTemp" TYPE="q" >		</PROPERTY>
		<!-- 系统中所有M.2硬盘的最高温度(ibmc不能独立获取从bma获取场景使用) -->
		<PROPERTY NAME="M2MaxTemp" TYPE="q" >		</PROPERTY>
		<!-- 系统中所有Nvme硬盘的最高温度(ibmc不能独立获取从bma获取场景使用) -->
		<PROPERTY NAME="NvmeMaxTemp" TYPE="q" >		</PROPERTY>
		<!-- 是否有硬盘温度获取不到 0：硬盘温度都能获取到 1：有硬盘温度获取不到 -->
		<PROPERTY NAME="ObtainDisksTempFailed" TYPE="y" >		</PROPERTY>
		<!-- 升级包填充方式 1:PKCS1 2：sslv23 3:NO_PADDING 4:PKCS1_OAEP 5:RSA_X931 -->
		<PROPERTY NAME="UpgradeRSAPaddingMode" TYPE="y" >		</PROPERTY>
        <!-- 产品厂商ID 0xffffffff 表示无效厂商-->
        <PROPERTY NAME="ProductVendorID"  TYPE="u">		</PROPERTY>
		<!-- 产品唯一识别ID -->
		<!-- 最高一个字节为保留字节，给区分V3，V5平台扩展用，默认为 0x00；接着是 PRODUCT.ProductId，BOARD.BoardId
             和连接到子 xml 的 Connector ID(如果没有为 00)，从高到低组装成一个4字节的无符号整数-->
		<PROPERTY NAME="ProductUniqueID"  TYPE="u">		</PROPERTY>
		<!-- 白牌机产品唯一识别ID -->
		<!-- 和ProductUniqueID的字节代表的含义保持一致，只是ProductId不同，示例 : 0x01401700。
		默认值保持和ProductUniqueID一致，构建转售包时设置为对应转售ID -->
		<PROPERTY NAME="CBProductUniqueID" TYPE="u">	</PROPERTY>
		<!-- 产品是否支持双向认证功能 -->
		<PROPERTY NAME="MutualAuthenticationEnable"  TYPE="y">	</PROPERTY>
		<!-- wake on lan(网络唤醒)功能是否开启，1:开启，0:关闭 -->
		<PROPERTY NAME="WOLState"  TYPE="y" ID="5" EXPORT="17">	</PROPERTY>
		<!-- wake on lan需要操作的CPLD寄存器 -->
		<PROPERTY NAME="WOLAccessor"  TYPE="y">	</PROPERTY>
		<!-- 标志RAID控制器配置导出条件是否满足，0表示不满足，1表示满足 -->
		<PROPERTY NAME="StorageConfigReady"  TYPE="y">	</PROPERTY>
		<!-- V5的CPLD提供寄存器，判断是否需要对NCSI的端口做初始化 -->
		<PROPERTY NAME="PchNcsiInitFlag" TYPE="y" >		</PROPERTY>
		<!-- 标识产品是否支持弱口令字典检查的属性, 0：不支持弱口令字典检查；1：支持弱口令字典检查；-->
		<PROPERTY NAME="WeakPwdDictSupport" EXPORT="18" TYPE="y" ID="9">	</PROPERTY>
		<PROPERTY NAME="ProcessorPlatform"  TYPE="y" ID="6">	</PROPERTY>
		<!-- VMD开关状态，关联CPLD寄存器 -->
		<PROPERTY NAME="VMDState" TYPE="y" ID="10" >	</PROPERTY>
		<!-- HotplugSurprise开关状态，关联CPLD寄存器 -->
		<PROPERTY NAME="HotplugSurprise" TYPE="y">	</PROPERTY>
		<!-- 单板命令行模块是否支持机箱管理，即命令行中有-l location参数 -->
		<!-- CMS数字签名使能，正常是V5产品要添加CMS数字签名，V3产品不添加，但是G2500是V3产品，安全SE要求也要添加CMS签名
		     0：不需要数字签名，1：需要数字签名 -->
		<PROPERTY NAME="CMSSignEnable" TYPE="y" >	 </PROPERTY>
	       <!-- 1:支持监控CPU额定功耗 -->		
		<PROPERTY NAME="PowerProtectionSupport" TYPE="y" >	 </PROPERTY>	
		<PROPERTY NAME="SyncUIDStateEnable"  TYPE="y">		</PROPERTY>		
		<!-- 使能cachefs机制 -->
		<PROPERTY NAME="CachefsEnable"  TYPE="y">		</PROPERTY>
		<PROPERTY NAME="WhiteIPMIListSupport" TYPE="y">	   </PROPERTY>
		<!-- 只连接前VGA，值为0->前VGA，值为1->前VGA。只连接后VGA，值为0->后VGA，值为1->前VGA。前后均连接VGA，亮后置VGA，值为0->后VGA，值为1->前VGA。-->
		<!-- 只有前后均连接VGA时，装备状态下设置VGA显示标志位才有意义 -->
		<PROPERTY NAME="VGASwitch" EXPORT="17" TYPE="y" ID="14">	</PROPERTY>
		<!-- 单板是否支持显示内存当前运行频率 1：显示  0； 不显示 -->
		<PROPERTY NAME="CfgMemClkSpeedEnable" TYPE="y">	   </PROPERTY>
		<PROPERTY NAME="SFPMaxTemp"  TYPE="q">		</PROPERTY>
		<PROPERTY NAME="CdrMaxTemp"  TYPE="q">		</PROPERTY>
		<!-- 背景：Hi1710只有UART1支持串口日志自动记录功能，而Hi1711芯片UART1~4共4路支持串口的收发数据循环记录功能。 -->
		<!-- 修改：为充分使用此日志记录功能，调整SOL串口编号为充分使用此日志记录功能，调整SOL串口编号 -->
		<!--       SOL串口的uart编号，在基于Hi1710开发的单板统一使用Uart3作为SOL，Hi1711支持单板差异化使用 -->
		<!--       具体编号，Hi1711支持UART0~UART7，共7路uart设备，对应编号值0~7 -->
		<PROPERTY NAME="SOLUartIndex" TYPE="y">	   </PROPERTY>
		<!-- 
			DHCP模式下，支持创建虚拟网口对外连接 
			0：不支持 1：支持创建 
		-->
		<PROPERTY NAME="VirtualNetEnable"  TYPE="y">		</PROPERTY>
		<!-- AC Cycle实现类型，0不支持；1通过写CPLD实现，2通过写电源OnePower的属性PowerSupplyCycle实现  -->
		<PROPERTY NAME="ACCycleAchievedType" TYPE="y">	</PROPERTY>
		<PROPERTY NAME="LeakDetectSupport" TYPE="y">    </PROPERTY>
        <!-- Https传输证书校验使能 -->	
		<PROPERTY NAME="HttpsTransferCertVerification" TYPE="y" ID="16" EXPORT="17">	</PROPERTY>
		<!-- 会话token长度,新增产品配置32 -->
		<PROPERTY NAME="SessionTokenLength" TYPE="u"> </PROPERTY>
		<!-- 使能KVM Caps同步机制，默认1，不支持 -->
		<PROPERTY NAME="KVMCapsSyncEnable" TYPE="y">    </PROPERTY>
		<!-- 读写测试使能 -->
		<PROPERTY NAME="FlashRwTestSupport"  TYPE="y">		</PROPERTY>
		<!-- 服务起始时间 -->
		<PROPERTY NAME="StartPoint" TYPE="s"> </PROPERTY>
		<!-- 服务年限 -->
		<PROPERTY NAME="Lifespan" TYPE="y"> </PROPERTY>
		<!-- 用户密码加密盐值长度,新增产品配置16 -->
		<PROPERTY NAME="UserPwdCryptSaltLen" TYPE="u"> </PROPERTY>
		<!-- 承载系统域的FRU ID -->
		<PROPERTY NAME="SystemAreaFruId" TYPE="y">	   </PROPERTY>
        <!-- 服务器首次上电时间, 格式为: YYYY-MM-DD -->
        <PROPERTY NAME="FirstPowerOnTime" TYPE="s"> </PROPERTY>
		<!-- 产品发货目的地 0：国内，1：国外， 0xff：初始值 -->
		<PROPERTY NAME="SoldPlace" TYPE="y"> </PROPERTY>
		<!-- 方法: 设置服务起始时间-->
		<METHOD NAME="SetStartPoint" >
			<PARAMETER TYPE="s" NAME="StartPointValue" DIR="in"/>
		</METHOD>
		<!-- 方法: 设置服务年限-->
		<METHOD NAME="SetLifespan" >
			<PARAMETER TYPE="y" NAME="LifespanValue" DIR="in"/>
		</METHOD>
        <!-- 方法: 设置Https传输证书校验使能开关-->
		<METHOD NAME="SetHttpsCertVerification" ID="16">
			<PARAMETER TYPE="y" NAME="EnabledStatus" DIR="in"/>
		</METHOD>
		<!-- 机箱高度，单位为U，例：服务器DA120 V2（1U高度服务器） 取值为1， 取值为0表示不支持该属性 -->
		<PROPERTY NAME="HeightU" TYPE="d"></PROPERTY>
		<PROPERTY NAME="CardMgntByNcsiSupport" TYPE="y"></PROPERTY>
		<!--  服务器是否支持PCIE设备的热拔插1，支持，0不支持，具体是否支持热拔插还要看对应板卡是否支持-->
		<PROPERTY NAME="SupportPcieHotPlug" TYPE="y"> </PROPERTY>
		<!-- 客户定制化内容，表示服务器配置类型，格式由客户定制，比如中国移动定制格式为年份+编号，其内容为“2020C1” -->
		<PROPERTY NAME="ConfigurationModel" TYPE="s">	</PROPERTY>
		<!-- 移动版本信息字段, 年份+版本号 -->
		<PROPERTY NAME="CmccVersion" TYPE="s">	</PROPERTY>
        <!-- 联通版本信息字段, 年份+版本号 -->
		<PROPERTY NAME="CuccVersion" TYPE="s">	</PROPERTY>
        <!-- 支持的级联模块类型，关联accessor-->
        <PROPERTY NAME="ExpansionModuleTypeSupport" TYPE="y">	</PROPERTY>
		<METHOD NAME="SetBoardVersion" ID="3">
			<PARAMETER TYPE="y" NAME="BoardVersion" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetSWRaidType" ID="2">
        <PARAMETER TYPE="y" NAME="RaidType" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetNOSdCardState">
        	<PARAMETER TYPE="y" NAME="state" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetBladeBpCpldValidFlag" ID="4">
			<PARAMETER TYPE="y" NAME="Flag" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetWOLState" ID="5">
        	<PARAMETER TYPE="y" NAME="state" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetStorageConfigReady">
        	<PARAMETER TYPE="y" NAME="val" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetPchNcsiInitFlag">
        	<PARAMETER TYPE="y" NAME="state" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetProductAlias" ID="8">
        	<PARAMETER TYPE="s" NAME="alias" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetProductAliasNoPersistence">
        	<PARAMETER TYPE="s" NAME="alias" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetProductDefaultAlias">
        	<PARAMETER TYPE="s" NAME="alias" DIR="in"/>
        </METHOD>
        <METHOD NAME="SetVMDState" ID="10">
        	<PARAMETER TYPE="y" NAME="state" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetSysResourceState">
        	<PARAMETER TYPE="u" NAME="state" DIR="in"/>
        </METHOD>
		<METHOD NAME="UpdateAliasByCoolingMedium">
        	<PARAMETER TYPE="y" NAME="OldMedium" DIR="in"/>
			<PARAMETER TYPE="y" NAME="NewMedium" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetSessionTokenLength">
        	<PARAMETER TYPE="u" NAME="SessionTokenLen" DIR="in"/>
        </METHOD>
		<!-- 装备状态下设置VGA显示标志位 -->
	<METHOD NAME="SetVGASwitch" ID="14">
		<PARAMETER TYPE="y" NAME="state" DIR="in"/>
	</METHOD>
	<METHOD NAME="SetSFPMaxTemp">
		<PARAMETER TYPE="q" NAME="SFPMaxTemp" DIR="in"/>
	</METHOD>
	<METHOD NAME="SetCdrMaxTemp">
		<PARAMETER TYPE="q" NAME="CdrMaxTemp" DIR="in"/>
	</METHOD>
	<METHOD NAME="SetDisksMaxTemp">
		<PARAMETER TYPE="q" NAME="MaxTemp" DIR="in"/>
		<PARAMETER TYPE="y" NAME="MaxTempType" DIR="in"/>
		<PARAMETER TYPE="b" NAME="IsGetTempFromBMA" DIR="in"/>
	</METHOD>
	<!-- EM属性同步方法 -->
	<METHOD NAME="PropertySyncMethod">
        <PARAMETER DIR="in"  TYPE="*" NAME="*" />
		<PARAMETER DIR="out" TYPE="*" NAME="*" />
	</METHOD>
	<!-- 方法: 设置产品名称-->
	<METHOD NAME="SetProductName" >
		<PARAMETER TYPE="s" NAME="ProductName" DIR="in"/>
	</METHOD>
	<!-- 方法: 设置产品uid-->
	<METHOD NAME="SetProductUniqueId" >
		<PARAMETER TYPE="u" NAME="ProductUniqueID" DIR="in"/>
	</METHOD>
	<!-- 方法: 设置新产品名称-->
	<METHOD NAME="SetNewProductName" >
		<PARAMETER TYPE="s" NAME="NewProductName" DIR="in"/>
	</METHOD>
	<!-- 方法: 设置产品唯一标识码-->
	<METHOD NAME="SetProductUniqueId" >
		<PARAMETER TYPE="u" NAME="ProductUniqueID" DIR="in"/>
	</METHOD>
	<!-- 方法: 设置产品版本-->
	<METHOD NAME="SetProductVersion" >
		<PARAMETER TYPE="s" NAME="ProductVersion" DIR="in"/>
	</METHOD>	
        <METHOD NAME="SetConfigurationModel">
            <PARAMETER TYPE="s" NAME="ConfigurationModel" DIR="in"/>
        </METHOD>
        <METHOD NAME="SetCmccVersion">
            <PARAMETER TYPE="s" NAME="CmccVersion" DIR="in"/>
        </METHOD>
        <METHOD NAME="SetCuccVersion">
            <PARAMETER TYPE="s" NAME="CuccVersion" DIR="in"/>
        </METHOD>
	</CLASS>
	
	<!--FUNCTION:ProductComponent-->
	<!-- 
	描述：产品各个部件的最大个数信息
	所属模块：Global模块(Global)-->
	<CLASS ID="47" NAME="ProductComponent">
		<!-- MEZZ卡位置，0xff:不涉及；0-半宽刀片；1-全宽左边；2-全宽右边；3-全宽左右 -->
		<PROPERTY NAME="MezzLocation"  TYPE="y">		</PROPERTY>
		<!-- 电源最大个数 -->
		<PROPERTY NAME="PsNum"  TYPE="y">		</PROPERTY>
		<!-- 风扇最大个数 -->
		<PROPERTY NAME="FanNum" TYPE="y" ID="1">		</PROPERTY>
		<!-- CPU最大个数 -->
		<PROPERTY NAME="CpuNum" TYPE="y" ID="2">		</PROPERTY>
		<!-- MEMORY最大个数 -->
		<PROPERTY NAME="MemoryNum" TYPE="y" ID="3">	</PROPERTY>
		<!-- 硬盘最大个数 -->
		<PROPERTY NAME="DiskNum" TYPE="y" ID="4">		</PROPERTY>
		<!-- Riser卡最大个数 -->
		<PROPERTY NAME="RiserCardNum"  TYPE="y" ID="15">	</PROPERTY>
		<!-- PCIE卡最大个数 -->
		<PROPERTY NAME="PcieCardNum" TYPE="y" ID="5">		</PROPERTY>
		<!-- RAID卡最大个数 -->
		<PROPERTY NAME="RaidCardNum" TYPE="y" ID="6">		</PROPERTY>
		<!-- MEZZ卡最大个数 -->
		<PROPERTY NAME="MezzCardNum"  TYPE="y">		</PROPERTY>
		<!-- 硬盘背板最大个数 -->
		<PROPERTY NAME="HddBackCardNum" TYPE="y" ID="7">	</PROPERTY>
		<!-- 网卡最大个数 -->
		<PROPERTY NAME="NetCardNum" TYPE="y" ID="8">		</PROPERTY>		
		<!-- 内存板最大个数 -->
		<PROPERTY NAME="MemoryCardNum" TYPE="y" ID="9">		</PROPERTY>	
		<!-- IO板最大个数 -->
		<PROPERTY NAME="IOCardNum" TYPE="y" ID="10">		</PROPERTY>	
		<!-- CPU板最大个数 -->
		<PROPERTY NAME="CpuBoardNum" TYPE="y" ID="11">		</PROPERTY>	
		<!-- SD卡最大个数 -->
		<PROPERTY NAME="SDCardNum" TYPE="y" ID="12">		</PROPERTY>	
		<PROPERTY NAME="NodeNum" TYPE="y" >		</PROPERTY>	
		<PROPERTY NAME="MMNum" TYPE="y" >		</PROPERTY>	
		<!-- SD卡转接板最大个数 -->
		<PROPERTY NAME="SDCardControllerNum" TYPE="y" ID="13">		</PROPERTY>	
		<!-- 安全模块最大个数 -->
		<PROPERTY NAME="SecurityModuleNum" TYPE="y" ID="14">		</PROPERTY>	
		<PROPERTY NAME="GPUBoardNum" TYPE="y">		</PROPERTY>		
		<PROPERTY NAME="HorizConnBoardNum" TYPE="y">	</PROPERTY>
		<!-- U位管理模块最大个数 -->
		<PROPERTY NAME="UnitNum" TYPE="y">	</PROPERTY>
		<PROPERTY NAME="BBUModuleNum" TYPE="y">	    </PROPERTY>
		<!-- M.2转接卡最大个数，0xff为非法，不在web上显示 -->
		<PROPERTY NAME="M2AdpterCardNum" TYPE="y">  </PROPERTY>
		<!-- 漏液检测卡的最大个数 -->
		<PROPERTY NAME="LeakDetCardNum" TYPE="y">  </PROPERTY>
		<!-- OCP卡最大个数 -->
		<PROPERTY NAME="OCPNum" TYPE="y">	</PROPERTY>
		<!-- Expander 板最大个数 -->
		<PROPERTY NAME="ExpBoardNum" TYPE="y">  </PROPERTY>
		<!-- CIC卡最大个数 -->
		<PROPERTY NAME="CICCardNum" TYPE="y">	</PROPERTY>
		<!-- SoC主板最大个数 -->
		<PROPERTY NAME="SoCBoardNum" TYPE="y">	</PROPERTY>
		<!-- Host最大个数，配置大于1的时候cpu_mem进行Multihost管理，不配置或者配0，1按通用服务器管理 -->
		<PROPERTY NAME="HostNum" TYPE="y">	</PROPERTY>
        <!-- 级联模块 ExpansionModule 最大个数 -->
		<PROPERTY NAME="ExpansionModuleNum" TYPE="y">  </PROPERTY>
        <!-- 风扇模块 FanModule 最大个数 -->
		<PROPERTY NAME="FanModuleNum" TYPE="y">  </PROPERTY>
        <!-- AR卡 最大个数 -->
		<PROPERTY NAME="ARCardNum" TYPE="y">  </PROPERTY>
		<!-- 方法：更新产品部件信息服务 -->
		<METHOD NAME="update_product_component_info"> </METHOD>
	</CLASS>
	
	<!-- 框信息 -->
	<CLASS NAME="Chassis" ID="19" >	
		<!-- 整框总功耗值，在Atals用于展示整框的总功耗值，默认为0xffff，表示不支持展示整框总功耗 -->
		<PROPERTY NAME="ChassisTotalPower" TYPE="q">	<VALUE></VALUE>	</PROPERTY>
		<!-- 类型 -->
		<PROPERTY NAME="ChassisType"  TYPE="y" ID="1">		</PROPERTY>
		<!-- 地址位置 -->
		<PROPERTY NAME="Location"  TYPE="s" ID="2">		</PROPERTY>
		<!-- 框号 -->
		<PROPERTY NAME="ChassisNum"  TYPE="u" ID="3"></PROPERTY>
		<!-- 框名 -->
		<PROPERTY NAME="ChassisName"  TYPE="s"></PROPERTY>
		<!--节点归属标识 -->
		<PROPERTY NAME="OwnerID" TYPE="s" ID="4">	    	</PROPERTY>
		<!-- 框内的最大节点索引值 -->
		<PROPERTY NAME="MaxNodeIndex" EXPORT="17" TYPE="y" ID="5">		</PROPERTY>
		<!-- 节点在框内的索引 -->
		<PROPERTY NAME="NodeIndex" EXPORT="17" TYPE="y" ID="6">			</PROPERTY>
		<!--机框各节点在位标志，其中bit0表示节点1的是否在位，依次类推，0：不在位， 1：在位 -->
		<PROPERTY NAME="ChassisNodePresent" TYPE="u">			</PROPERTY>
		<!--机框各节点可用性，其中bit0表示节点1的active标志，依次类推, 0: 不正常， 1：正常 -->
		<PROPERTY NAME="ChassisNodeActive" TYPE="u">			</PROPERTY>
		<!-- 节点是否同步机框product SN、 product AssetTag电子标签 -->
		<PROPERTY NAME="SyncElabel" EXPORT="17" TYPE="y" ID="7">			</PROPERTY>
		<!-- 节点在框内的后缀 -->
		<PROPERTY NAME="NodeIndexSuffix" TYPE="as" ID="8">		</PROPERTY>	
		<!--机框(SMM)的统一升级大包版本信息，BMC只做存储，需要持久化，不解析 -->
		<PROPERTY NAME="VersionData" TYPE="s" ID="9">		</PROPERTY>
        <!--机框(SMM)自定义数据1，BMC只做存储，需要持久化，不解析，暂预留 -->
		<PROPERTY NAME="CustomData1" TYPE="s" ID="10">		</PROPERTY>
		<!--机框(SMM)自定义数据2，BMC只做存储，需要持久化，不解析，暂预留-->
		<PROPERTY NAME="CustomData2" TYPE="s" ID="11">		</PROPERTY>
		<!--x6800mm是否对所有节点板上报告警的属性 0：所有节点上报；1只上报一个节点 -->
		<PROPERTY NAME="AlarmPolicy" TYPE="y" ID="12" EXPORT="17">		</PROPERTY>
		<!--进风口温度 -->
		<PROPERTY NAME="InletTemp" TYPE="roa">	</PROPERTY>
		<!--出风口温度 -->
		<PROPERTY NAME="OutletTemp" TYPE="roa">	</PROPERTY>
		<!-- 用于表示是否支持AC掉电下开盖检测功能。1:支持AC掉电下开盖检测功能 0：不支持-->
		<PROPERTY NAME="ChassisIntrusionInPowerOff" TYPE="y">		</PROPERTY>
		<!-- 用于清理开盖检测标志。1：清除 0：不清除-->
		<PROPERTY NAME="ChassisIntrusionStatusClear" TYPE="y">		</PROPERTY>
		<!-- 开箱事件，通过从CPLD寄存器获取实时开箱状态，用于装备检测。1表示开箱；0表示没有开箱 -->
		<PROPERTY NAME="ChassisIntrusion" TYPE="y">		</PROPERTY>
		<!-- 开箱事件锁存信号，从CPLD寄存器读取，BMC要写0进行清除 -->
		<PROPERTY NAME="ChassisIntrusionLock" TYPE="y">		</PROPERTY>
		<!-- 开箱事件锁存信号，用于传感器监听属性，只要BIOS上报的（见属性OpenBoxEvent）和CPLD读到的任意一个产生，就要设置成0x01ffff00 -->
		<PROPERTY NAME="ChassisIntrusionEvent" TYPE="u">		</PROPERTY>
        <!--UID灯位置，UID灯在单板上时适配为0，在机框适配为1 ，都存在适配为2（计算型存储xpu上有UID，框上也有UID）-->
		<PROPERTY NAME="UIDLocation" TYPE="y">		</PROPERTY>
        <!-- 左挂耳所切节点号（x6000v6特有），左挂耳上powerbutton按钮和指示灯只能同时显示一个节点，可通过按钮切换节点 -->
        <PROPERTY NAME="LeftEarSwitchSlotId" TYPE="y">		</PROPERTY>
		<!-- 机框主节点的槽位号 -->
		<PROPERTY NAME="MasterNodeSlotId" TYPE="y">		</PROPERTY>
		<!-- 是否支持将面板串口切换到指定节点  1：支持 0：不支持-->
		<PROPERTY NAME="PanelSerialSwNodeSupp" TYPE="y">		</PROPERTY>
		<!-- 面板串口所在的节点号 0:表示管理板 1 表示节点板1 以此类推-->
		<PROPERTY NAME="PanelSerialSwNodeId" TYPE="y">		</PROPERTY>
		<!-- x6000 机框各节点对外的管理口的link status，其中bit0表示节点1的link status，依次类推-->
		<PROPERTY NAME="MgntPortsLinkStatus" TYPE="u">	</PROPERTY>
		<!-- 设置机框名，字符最大长度20 -->
		<METHOD NAME="SetChassisName">
	            <PARAMETER TYPE="s" NAME="ChassisName" DIR="in"/>
                <PARAMETER TYPE="y" NAME="SetMemoryOnly" DIR="in"/>
		</METHOD>
		<!-- 设置机框号，输入范围0~999999 ，1000000为出错值-->
		<METHOD NAME="SetChassisNumber">
	            <PARAMETER TYPE="u" NAME="ChassisNum" DIR="in"/>
                <PARAMETER TYPE="y" NAME="SetMemoryOnly" DIR="in"/>
		</METHOD>
        <METHOD NAME="SetChassisInfo">
	            <PARAMETER TYPE="s" NAME="Location" DIR="in"/>
                <PARAMETER TYPE="u" NAME="ChassisNum" DIR="in"/>
                <PARAMETER TYPE="s" NAME="ChassisName" DIR="in"/>
		</METHOD>
		<!-- 设置机框位置，字符最大长度20-->
		<METHOD NAME="SetChassisLocation">
	            <PARAMETER TYPE="s" NAME="Location" DIR="in"/>
                <PARAMETER TYPE="y" NAME="WriteEepromFlag" DIR="in"/>
                <PARAMETER TYPE="y" NAME="BroadcastFlag" DIR="in"/>
		</METHOD>
		<!-- 由datasync2模块调用，用于主备同步机框名、机框号、机框位置 -->
		<METHOD NAME="ChassisInfoSyncMethod">
	            <PARAMETER TYPE="*" NAME="data" DIR="in"/>
	        </METHOD>
		<METHOD NAME="SetOwnerID" ID="4">
			<PARAMETER TYPE="s" NAME="OwnerID" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetNodeIndex" ID="6">
			<PARAMETER TYPE="y" NAME="NodeIndex" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetSyncElabel" ID="7">
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetNodeIndexSuffix" ID="8">
			<PARAMETER TYPE="s" NAME="Suffix" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetVersionData" ID="9">
			<PARAMETER TYPE="s" NAME=" VersionData" DIR="in"/>
		</METHOD>
        <METHOD NAME="SetCustomData1" ID="10">
			<PARAMETER TYPE="s" NAME=" CustomData" DIR="in"/>
		</METHOD>
        <METHOD NAME="SetCustomData2" ID="11">
			<PARAMETER TYPE="s" NAME=" CustomData" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetAlarmPolicy" ID="12">
			<PARAMETER TYPE="y" NAME=" AlarmPolicy" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetPanelSerialSwNodeId" ID="6">
			<PARAMETER TYPE="y" NAME="NodeId" DIR="in"/>
			<PARAMETER TYPE="u" NAME="SaveOptions" DIR="in"/>
		</METHOD>
		<CLASS NAME="AgentChassis"> </CLASS>
	</CLASS>
	
	<!--FUNCTION:BOARD-->
	<!-- 
	描述：单板信息
	所属模块：Global模块(Global)-->
	<CLASS NAME="BOARD">		
		<!-- 槽位号配置源 -->
		<PROPERTY NAME="SlotIdSrc"  TYPE="y">		</PROPERTY>
		<!-- 单板所在的槽位号 -->
		<PROPERTY NAME="SlotId"  TYPE="y">		</PROPERTY>
		<!-- 单板所在的位号 -->
		<PROPERTY NAME="LocationId"  TYPE="s">		</PROPERTY>		
		<!-- 当前单板的硬件地址 -->
		<PROPERTY NAME="HardAddress" TYPE="y" />
		<!-- 单板硬件地址是否故障 -->
		<PROPERTY NAME="HwAddrFault"  TYPE="y">		</PROPERTY>
		<!-- 单板名称 -->
		<PROPERTY NAME="Name" TYPE="s" />
		<!-- 单板槽位号是否故障 -->
		<PROPERTY NAME="SlotIdFault"  TYPE="y">		</PROPERTY>
		<!-- 单板ID号配置源-->
		<PROPERTY NAME="BoardIdSrc"  TYPE="y">		</PROPERTY>
		<!-- 单板ID号 -->
		<PROPERTY NAME="BoardId"  TYPE="y">		</PROPERTY>
		<!-- 单板ID号是否故障 -->
		<PROPERTY NAME="BoardIdFault"  TYPE="y">		</PROPERTY>
		<!-- 单板驱动调整 -->
		<PROPERTY NAME="IoDriver"  TYPE="aq">		</PROPERTY>
		<!-- 恢复BMC默认密码和IP的GPIO口信号状态 -->
		<PROPERTY NAME="BmcClearPwInStatus"  TYPE="y">		</PROPERTY>
		<!-- 恢复BMC默认密码和IP标记 -->
		<PROPERTY NAME="BmcClearPwFlag"  TYPE="y">		</PROPERTY>
		<!-- 单板是否支持奇偶校验, 0：不校验，1：奇校验，2：偶校验 -->
		<PROPERTY NAME="VerifyType"  TYPE="y">		 </PROPERTY>
		<!-- 方法：设置槽位号 -->
		<METHOD NAME="SetSlotId">
		    <PARAMETER TYPE="y" NAME="SlotId" DIR="in"/>
		</METHOD>
	</CLASS>
	
	<!--FUNCTION:SMM-->
	<!-- 
	描述：SMM板信息
	所属模块：Global模块(Global)-->
	<CLASS NAME="SMM">
		<!-- SMM板编号，0开始 -->
		<PROPERTY NAME="Index"  TYPE="y">       </PROPERTY>   
		<!-- SMM板状态，主还是备 -->
		<PROPERTY NAME="Status"  TYPE="y">       </PROPERTY> 		
		<!-- SMM板IP地址 -->
		<PROPERTY NAME="FixedIP" TYPE="s">        </PROPERTY>
		<!-- SMM板IPMB地址 -->
		<PROPERTY NAME="IpmbAddr" TYPE="y">        </PROPERTY>    	
		<!-- 方法：重启对板 -->
		<METHOD NAME="ResetOtherSMM">
		</METHOD>
	</CLASS>  
	
	<!--FUNCTION:MasterSMM-->
	<!-- 
	描述：主SMM板信息
	所属模块：Global模块(Global)-->
	<CLASS NAME="MasterSMM">
		<!-- SMM板编号，0开始 -->
		<PROPERTY NAME="MasterSMMID"  TYPE="y">       </PROPERTY>        
		<!-- 主SMM板IP地址 -->
		<PROPERTY NAME="MasterSMMIP" TYPE="s">        </PROPERTY>
		<!-- 主SMM板IPMB地址 -->
		<PROPERTY NAME="IpmbAddr" TYPE="s">        </PROPERTY>    
	</CLASS>
	
	<!--FUNCTION:BMC-->
	<!-- 
	描述：Global模块信息
	所属模块：Global模块(Global)-->
	<CLASS ID="13" NAME="BMC">
		<PROPERTY NAME="IpmiQueryClassID" TYPE="ay" ></PROPERTY>
		<PROPERTY NAME="IpmiQueryMaxPropertyID" TYPE="ay"></PROPERTY>
		<PROPERTY NAME="IpmiQueryMinPropertyID" TYPE="ay"></PROPERTY>
		<!-- OSCA单板管理模式:1 OSCA单板的HMM管理模式, 2 OSCA单板的esight扁平化管理模式,不持久化 -->
		<PROPERTY NAME="BladeManageMode"  TYPE="y" ID="7" EXPORT="17">		</PROPERTY>
		<!-- CPU型号 -->
		<PROPERTY NAME="CpuType" TYPE="s">		</PROPERTY>
		<!-- IPMI版本 -->
		<PROPERTY NAME="IpmiVersion" TYPE="s">		</PROPERTY>
		<!-- CPLD版本，格式x.xx -->
		<PROPERTY NAME="CpldVersion" TYPE="s">		</PROPERTY>
		<!-- CPLD位号，关联到PRODUCT.CpldUnitNum -->
		<PROPERTY NAME="CpldUnitNum"  TYPE="u">		</PROPERTY>
		<!-- PME位号，关联到PRODUCT.FlashUnitNum -->
		<PROPERTY NAME="FlashUnitNum" TYPE="u">		</PROPERTY>	
		<!-- PME备份版本信息 -->
		<PROPERTY NAME="PMEBackupVer"  TYPE="s">		</PROPERTY>	
		<!-- PME编译时间 -->
		<PROPERTY NAME="PMEBuilt" TYPE="s">		</PROPERTY>
		<!-- PME主用版本信息 -->
		<PROPERTY NAME="PMEVer" TYPE="s">		</PROPERTY>
		<!-- BMC可用版本信息 -->
		<PROPERTY NAME="BMCAvailableVer" TYPE="s">	</PROPERTY>
		<!-- BMC可用版本构建编译版本号 -->
		<PROPERTY NAME="AvailableVerBuildNumber"  TYPE="y">		</PROPERTY>
		<!-- L0 FW版本信息 -->
		<PROPERTY NAME="L0FWVersion" TYPE="s">		</PROPERTY>
		<!-- L0 FW备份版本信息 -->
		<PROPERTY NAME="L0FWBackupVer" TYPE="s">		</PROPERTY>
		<!-- L0 备区FW编译时间 -->
		<PROPERTY NAME="L0FWBuilt"  TYPE="s">			</PROPERTY>
		<!-- L0 备区FW编译时间 -->
		<PROPERTY NAME="L0FWBackupVerBuilt"  TYPE="s">	</PROPERTY>
		<!-- L1 FW版本信息 -->
		<PROPERTY NAME="L1FWVersion" TYPE="s">		</PROPERTY>
		<!-- L1 FW备份版本信息 -->
		<PROPERTY NAME="L1FWBackupVer" TYPE="s">		</PROPERTY>
		<!-- L1 FW编译时间 -->
		<PROPERTY NAME="L1FWBuilt"  TYPE="s">			</PROPERTY>
		<!-- L1 备区FW编译时间 -->
		<PROPERTY NAME="L1FWBackupVerBuilt"  TYPE="s">	</PROPERTY>
		<!-- PME主用版本主版本号 -->
		<PROPERTY NAME="PMEMajorVer" TYPE="y">		</PROPERTY>
		<!-- PME主用版本次版本号 -->
		<PROPERTY NAME="PMEMinorVer"  TYPE="y">		</PROPERTY>
		<!-- BMC主用版本扩展主版本号，1711四段版本号使用，为release分支号，取值0-99，master上为0 -->
		<PROPERTY NAME="ReleaseMajorVer" TYPE="y">		</PROPERTY>
		<!-- BMC主用版本扩展次版本号，1711四段版本号使用，为release版本号，取值0-99，master上为0 -->
		<PROPERTY NAME="ReleaseMinorVer"  TYPE="y">		</PROPERTY>
		<!-- BMC版本构建编译版本号.001～255,每次主+次版本号变更的时候需要重新从1开始编码 -->
		<PROPERTY NAME="BuildNumber"  TYPE="y">		</PROPERTY>
        <!-- BMC版本是否支持ECO_FT标示，不支持为0，支持为1，构建打包时，如果是打支持ECO_FT的包，更改该值 -->
        <PROPERTY NAME="AuxVersion"  TYPE="y">		</PROPERTY>
		<!-- 判断是否为转售机型BMC固件，1:是转售机型BMC固件，0:是华为BMC固件；默认值为0，白牌转售机型构建时修改为1 -->
		<PROPERTY NAME="IsCustomBrandFW"  TYPE="y">	</PROPERTY>
		<!-- 驱动版本信息 -->
		<PROPERTY NAME="DriverVersion"  TYPE="s">		</PROPERTY>
		<!-- 驱动编译时间 -->
		<PROPERTY NAME="DriverBuilt"  TYPE="s">			</PROPERTY>
		<!-- Uboot版本信息 -->
		<PROPERTY NAME="UbootVersion" TYPE="s">		</PROPERTY>
		<!-- Uboot备份版本信息 -->
		<PROPERTY NAME="UbootBackupVer" TYPE="s">		</PROPERTY>
		<!-- 主机名 -->
		<PROPERTY NAME="HostName"  TYPE="s" ID="3" EXPORT="18">		</PROPERTY>
		<!-- 系统名，关联到Fru0Elabel.SysName -->
		<PROPERTY NAME="SystemName"  TYPE="s">		</PROPERTY>
		<!-- 设备序列号，关联到Fru0Elabel.SysSerialNum -->
		<PROPERTY NAME="DeviceSerialNumber" TYPE="s"> </PROPERTY>		
		<!-- 设备GUID，16字节 -->
		<PROPERTY NAME="DeviceGuid" TYPE="ay">		</PROPERTY>
		<!-- 系统GUID，16字节  -->
		<PROPERTY NAME="SystemGuid" TYPE="ay">		</PROPERTY>
		<!-- 设备ID，当前值为1 -->
		<PROPERTY NAME="DeviceId"  TYPE="y">		</PROPERTY>
		<!-- 设备版本，当前值为0x81 -->
		<PROPERTY NAME="DeviceRevision"  TYPE="y">		</PROPERTY>
		<!-- 厂商ID，当前值0xdb0700 -->
		<PROPERTY NAME="ManufactureId" TYPE="u">		</PROPERTY>		
        <!-- 定制化厂商ID  -->
        <PROPERTY NAME="CustomManufactureId" TYPE="u">        </PROPERTY>
		<!-- 时区 -->		
		<PROPERTY NAME="TimeZone"  TYPE="n" ID="4">		</PROPERTY>	
		<!-- 以地区命名的时区 -->
		<PROPERTY NAME="TimeZoneStr"  TYPE="s" ID="9" EXPORT="17">		</PROPERTY>
		<!-- 夏令时使能, 0：禁用；1：使能 -->
		<PROPERTY NAME="DSTEnable" TYPE="y" ID="11" EXPORT="17">		</PROPERTY>
		<!-- 重启原因 -->	
		<PROPERTY NAME="ResetCause"  TYPE="i">		</PROPERTY>
		<!-- 热复位标志，1: BMC系统复位；0: AC/整机上电，默认值为0. -->
        <PROPERTY NAME="SoftResetFlag" TYPE="y">         </PROPERTY>
		<!-- CPLD版本寄存器 -->	
		<PROPERTY NAME="CpldVerReg"  TYPE="y">		</PROPERTY>
		<!-- FLASH告警门限值，当前值为85% -->	
		<PROPERTY NAME="WarnPercent"  TYPE="u">		</PROPERTY>
		<!-- FLASH使用比 -->	
		<PROPERTY NAME="FlashUseWarn"  TYPE="y">		</PROPERTY>
		<!-- PME启动标志 -->	
		<PROPERTY NAME="BmcStartFlag"  TYPE="y">		</PROPERTY>	
		<!-- 位置信息 -->	
		<PROPERTY NAME="LocationInfo"  TYPE="s" ID="1" EXPORT="18">		</PROPERTY>
		<!-- 第三方预置信息 -->	
		<PROPERTY NAME="RemoteOEMInfo"  TYPE="ay" ID="5" EXPORT="17">		</PROPERTY>	
		<!-- 共享数据信息 -->	
		<PROPERTY NAME="ShareDataInfo"  TYPE="ay" ID="6">		</PROPERTY>	
		<!-- 时间同步成功标记 -->	
		<PROPERTY NAME="TimeSyncSuccess"  TYPE="y">		</PROPERTY>	
		<!-- BMC复位次数 -->
		<PROPERTY NAME="RestCnt"  TYPE="u" ID="2">		</PROPERTY>
		<!-- Hi1710 DIEID -->
		<PROPERTY NAME="DIEID"  TYPE="s">		</PROPERTY>
		<!-- Hi1710 芯片名称 -->
		<PROPERTY NAME="ChipName"  TYPE="s">		</PROPERTY>
		<!-- Hi1710 芯片版本 -->
		<PROPERTY NAME="ChipVersion"  TYPE="s">		</PROPERTY>
		<!-- 1711安全使能:0表示不使能,1表示使能 -->
		<PROPERTY NAME="SecurityEnable" TYPE="y">		</PROPERTY>
		<!-- 所有证书过期状态值或的结果 -->
		<PROPERTY NAME="CertOverDueStatus"  TYPE="y">		</PROPERTY>
		<!-- 界面显示所支持的语言集合，默认支持中英文,可设置"en,zh,ja,fr" -->
		<PROPERTY NAME="LanguageSet" TYPE="s" ID="8" EXPORT="17">			</PROPERTY>	
		<!-- 界面显示扩展支持的语言集合，默认支持中英文,可设置"ru,de,xx" -->
		<PROPERTY NAME="LanguageSetExtend" TYPE="s">			</PROPERTY>	
		<!-- 当前版本支持的所有语言集合，"en,zh,ja,fr,ru" -->
		<PROPERTY NAME="LanguageSetSupport" TYPE="s">			</PROPERTY>	
        <!-- 默认证书算法 0:RSA 1:ECC others:invalid -->
		<PROPERTY NAME="CertAlgorithm"  TYPE="y" ID="10" EXPORT="17">		</PROPERTY>
		<!-- 升级包解密私钥首次更新标志位 -->
		<PROPERTY NAME="FirstUpdateMasterKeyFlag" TYPE='y'>		</PROPERTY>
		<!-- 软件名称 -->
		<PROPERTY NAME="SoftwareName"  TYPE="s">	</PROPERTY>
		<!-- Redfish OEM厂商 -->
		<PROPERTY NAME="CustomManufacturer"  TYPE="s">		</PROPERTY>
		<!-- 事件告警中的iBMC -->
		<PROPERTY NAME="CustomAlarmName"  TYPE="s"> </PROPERTY>
		<!-- 操作、维护和安全日志中的iBMA -->
		<PROPERTY NAME="CustomLogIbmaName"  TYPE="s"> </PROPERTY>
		<!-- 操作、维护和安全日志中的iBMC -->
		<PROPERTY NAME="CustomLogIbmcName"  TYPE="s"> </PROPERTY>		
		<!-- BMC Support发布包名称 -->
		<PROPERTY NAME="BMCPackageName"  TYPE="s">		</PROPERTY>
		<!-- 用户CLI超时时间，单位为分 -->	
		<PROPERTY NAME="CLISessionTimeOut" TYPE="u" ID="12" EXPORT="17">	</PROPERTY>
		<!-- 定制化告警使能 (若之前经过定制并持久化该属性，新增比特位表示时可能会引起兼容问题，
		后续不再推荐此方案，推荐使用ipmi命令：设置系统事件相关配置) -->
		<PROPERTY NAME="CustomAlarm" TYPE="u" ID="13" EXPORT="17">	</PROPERTY>
		<!-- V5产品的Uboot Flash ID， AC上电的时候获取一次并做掉电持久化 -->
		<PROPERTY NAME="SPIFlashId"  TYPE="ay"> </PROPERTY>
        <!-- V5产品的PHY ID， AC上电的时候获取一次并做AC重启持久化 -->
		<PROPERTY NAME="PHYId"  TYPE="ay"> </PROPERTY>
    	<!-- Hi1711设备解复位 -->
		<PROPERTY NAME="DeviceUnlockReset" TYPE="y">		</PROPERTY>
        <!-- 0代表Fru生产日期时间戳为3字节，1代表4字节，根据字节数从E2P读取，通过ipmi命令设置 -->
		<PROPERTY NAME="ElabelManuFormat" TYPE="y">		</PROPERTY>
        <!-- 方法：设置默认证书算法 -->
		<METHOD NAME="SetCertAlgorithm" ID="10">
			<PARAMETER TYPE="y" NAME="CertAlgorithm" DIR="in"/>
        </METHOD>
		<!-- 方法：设置语言集合 -->
		<METHOD NAME="SetLanguageSet" ID="8">
			<PARAMETER DIR="in" NAME="string" TYPE="s"/>
        </METHOD>
        <!-- 方法：设置Fru生产日期时间戳格式 -->	
		<METHOD NAME="SetMfgFormat">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
        </METHOD>
		<!-- 方法：设置时区 -->	
		<METHOD NAME="SetTimeZoneStr" ID="9">
			<PARAMETER TYPE="s" NAME="TimeZoneStr" DIR="in"/>
        </METHOD>
		<!-- 方法：设置夏令时 -->
		<METHOD NAME="SetDSTEnable" ID="11">
			<PARAMETER TYPE="y" NAME="DSTEnable" DIR="in"/>
		</METHOD>
		<!-- 方法：设置时间 -->
		<METHOD NAME="SetTime">
			<PARAMETER TYPE="u" NAME="Time" DIR="in"/>
        </METHOD>
		<!-- 方法：获取时间 -->
		<METHOD NAME="GetTime">
			<PARAMETER TYPE="u" NAME="Time" DIR="out"/>
        </METHOD>
		<!-- 方法：设置位置ID -->
		<METHOD NAME="SetLocationID">
			<PARAMETER TYPE="s" NAME="LocationID" DIR="in"/>
        </METHOD>
		<!-- 方法：设置主机名 -->
		<METHOD NAME="SetHostName" ID="3">
			<PARAMETER TYPE="s" NAME="HostName" DIR="in"/>
        </METHOD>
		<!-- 方法：重启PME -->
		<METHOD NAME="RebootPme">
        </METHOD>
		<!-- 方法：清空TMP目录文件 -->
		<METHOD NAME="ClearTmpFile">
        </METHOD>
		<!-- 方法：设置PME备份版本 -->
		<METHOD NAME="SetPmeBackupVer">
			<PARAMETER TYPE="s" NAME="PmeBackupVer" DIR="in"/>
        </METHOD>
		<!-- 方法：设置位置信息 -->
		<METHOD NAME="SetLocationInfo" ID="1">
			<PARAMETER TYPE="s" NAME="Info" DIR="in"/>
        </METHOD>
		<!-- 方法：设置第三方预置信息 -->
		<METHOD NAME="SetRemoteOEMInfo" ID="5">
			<PARAMETER TYPE="ay" NAME="RemoteOEMInfo" DIR="in"/>
        </METHOD>
		<!-- 方法：开关notimeout -->
		<METHOD NAME="SetNotimeout" ID="12">
			<PARAMETER TYPE="u" NAME="time" DIR="in"/>
        </METHOD>

		<!-- 方法：设置CustomAlarm -->
		<METHOD NAME="SetCustomAlarm" ID="13">
			<PARAMETER TYPE="u" NAME="CustomAlarm" DIR="in"/>
        </METHOD>	
		
		<!-- 方法：开始导出配置 -->
		<METHOD NAME="ExportConfig">
			<PARAMETER TYPE="s" NAME="filepathin" DIR="in"/>
        </METHOD>
		
		<!-- 方法：开始导入配置 -->
		<METHOD NAME="ImportConfig">
			<PARAMETER TYPE="s" NAME="filename" DIR="in"/>
	    </METHOD>
		
		<!-- 方法：获取导入导出进度 -->
		<METHOD NAME="GetImportExportStatus">
			<PARAMETER TYPE="i" NAME="Status" DIR="out"/>
			<PARAMETER TYPE="s" NAME="returnstring" DIR="out"/>
        </METHOD>
		
		<!-- 方法：设置DIEID -->
		<METHOD NAME="SetDIEID">
			<PARAMETER TYPE="s" NAME="dieid" DIR="in"/>
        </METHOD>
		<METHOD NAME="MountCommand">
			<PARAMETER TYPE="s" NAME="srcfile" DIR="in"/>
			<PARAMETER TYPE="s" NAME="dest" DIR="in"/>
			<!-- flag的低4位：0表示只读挂载，1表示读写挂载；flag高4位：0表示不启用cachefs机制，1表示启用cachefs机制 -->
			<PARAMETER TYPE="y" NAME="flag" DIR="in"/>
	    </METHOD>

		<METHOD NAME="UmountCommand">
			<PARAMETER TYPE="s" NAME="dest" DIR="in"/>
	    </METHOD>
		<!-- 设置单板管理模式，1 OSCA单板的HMM管理模式, 2 OSCA单板的esight扁平化管理模式,不持久化,OSCA专用 -->
		<METHOD NAME="SetBladeManageMode" ID="7">
        	<PARAMETER TYPE="y" NAME="BladeManageMode" DIR="in"/>
        </METHOD>	
		<!-- 用于卸载iBMC Web界面可切换的语言（中文，英文不能被卸载） -->
	<METHOD NAME="UninstallLanguageResource">
        	<PARAMETER TYPE="s" NAME="LanguageTypeString" DIR="in"/>
        </METHOD>	
		<!-- 获取时区列表 -->
		<METHOD NAME="GetTimeZoneList">
        	<PARAMETER TYPE="ay" NAME="TimeZoneList" DIR="out"/>
        </METHOD>
		<!-- 获取当前设置的时区偏移 -->
		<METHOD NAME="GetCurTimeOffset">
        	<PARAMETER TYPE="n" NAME="TimeOffset" DIR="out"/>
        </METHOD>
        <!-- 获取某个区域的城市列表 -->
        <METHOD NAME="GetAreaTimeZoneList">
            <PARAMETER TYPE="s" NAME="Area" DIR="in"/>
            <PARAMETER TYPE="as" NAME="AreaTimeZoneList" DIR="out"/>
        </METHOD>		
		<!-- 拷贝文件，解决非常驻进程中拷贝文件权限不足问题 -->
		<METHOD NAME="CopyFile">
        	<PARAMETER TYPE="s" NAME="src_file" DIR="in"/>
			<PARAMETER TYPE="s" NAME="dest_file" DIR="in"/>
        </METHOD>
		<!-- 提供方法实现对备板时钟同步 -->
		<METHOD NAME="SyncSetTimeZone">
        	<PARAMETER TYPE="*" NAME="*" DIR="in"/>
        </METHOD>
		<!-- 提供方法同步备板属性-->
		<METHOD NAME="SyncPropertyBMC">
        	<PARAMETER TYPE="*" NAME="*" DIR="in"/>
        </METHOD>
		<!-- 提供方法设置UUID -->
		<METHOD NAME="SetUUID">
        	<PARAMETER TYPE="s" NAME="uuid" DIR="in"/>
        </METHOD>
		<CLASS NAME="AgentBMC"> </CLASS>
        <!-- 方法：导出DICE CSR -->
        <METHOD NAME="ExportDiceCSR">
            <PARAMETER DIR="in"  TYPE="s" NAME="FileName" />
        </METHOD>
        <!-- 方法：导入DICE CERT0证书 -->
        <METHOD NAME="ImportDiceCert">
            <PARAMETER DIR="in"  TYPE="s" NAME="FileName" />
        </METHOD>
        <!-- 方法：导出DICE证书链 -->
        <METHOD NAME="ExportDiceCertChain">
            <PARAMETER DIR="in"  TYPE="s" NAME="NonceData" />
            <PARAMETER DIR="in"  TYPE="s" NAME="FileName" />
            <PARAMETER DIR="in"  TYPE="y" NAME="AuthType" />
        </METHOD>
        <!-- 方法：获取证书链导出状态 -->
        <METHOD NAME="GetDiceCertChainExportState">
            <PARAMETER DIR="out" TYPE="y" NAME="State"/>
        </METHOD>
		<!-- 方法：获取伙伴根公钥hash -->
        <METHOD NAME="GetPartnerCertHash"> 
            <!-- 伙伴根公钥哈希填充算法，pkcs 或 pss -->
            <PARAMETER DIR="in"  TYPE="s" NAME="SignMode" />
            <PARAMETER DIR="out" TYPE="s" NAME="HashValue"/>
        </METHOD>
		<!-- 方法：获取伙伴模式使能 -->
        <METHOD NAME="GetPartnerModeEnable">
            <PARAMETER DIR="out" TYPE="u" NAME="PartnerModeEnable"/>
        </METHOD>
	<!-- 更新iRM发给BMC的最后一次心跳时间戳 -->
	<METHOD NAME="UpdateiRMCommTimeStamp">
		<!-- 0: iRM通过redfish/v1接口探测iRM和节点直接网络连通的心跳
		1：iRM通过redfish/v1/power接口探测iRM管理节点功耗的心跳 -->
		<PARAMETER TYPE="y" NAME="Type" DIR="in"/>
	</METHOD>
	<!-- 记录文件属主信息 -->
	<METHOD NAME="RecordFileOwner">
    	<PARAMETER TYPE="s" NAME="FilePath" DIR="in"/>
		<PARAMETER TYPE="s" NAME="Owner" DIR="in"/>
	</METHOD>
	<!-- 获取文件属主信息 -->
	<METHOD NAME="GetFileOwner">
    	<PARAMETER TYPE="s" NAME="FilePath" DIR="in"/>
		<PARAMETER TYPE="s" NAME="Owner" DIR="out"/>
	</METHOD>
	</CLASS>
	<!-- 描述：双因素认证-->	
	<CLASS NAME="MutualAuthentication" ID="83">
		<!-- 双因素认证使能状态 -->
		<PROPERTY NAME="MutualAuthenticationState" TYPE="y" ID="1" EXPORT="17">	</PROPERTY>
		<!-- 双因素认证OCSP检查使能状态 -->
		<PROPERTY NAME="MutualAuthenticationOCSP" TYPE="y" ID="2" EXPORT="17">	</PROPERTY>
		<!-- 双因素认证CRL检查使能状态 -->
		<PROPERTY NAME="MutualAuthenticationCRL" TYPE="y" ID="3" EXPORT="17">	</PROPERTY>
		<!-- 方法：设置双因素认证使能状态 1：开启　0：关闭 -->
		<METHOD NAME="SetMutualAuthenticationState" ID="1">
			<PARAMETER TYPE="y" NAME="status" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>
		<!-- 方法：设置双因素认证OCSP检查使能状态 1：开启　0：关闭 -->
		<METHOD NAME="SetMutualAuthenticationOCSP" ID="2">
			<PARAMETER TYPE="y" NAME="status" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>

		<!-- 方法：设置双因素认证CRL检查使能状态 1：开启　0：关闭 -->
		<METHOD NAME="SetMutualAuthenticationCRL" ID="3">
			<PARAMETER TYPE="y" NAME="status" DIR="in"/>
		</METHOD>

		<!-- 方法：通过证书鉴权 -->
		<METHOD NAME="AuthClientCertificate">
			<PARAMETER DIR="in" NAME="serial" TYPE="s"/>
			<PARAMETER DIR="in" NAME="issuer" TYPE="s"/>
			<PARAMETER DIR="in" NAME="subject" TYPE="s"/>
			<PARAMETER DIR="in" NAME="IpAddress" TYPE="s"/>
			<PARAMETER DIR="in" NAME="BrowserType" TYPE="y"/>
			<PARAMETER DIR="out" NAME="id" TYPE="y"/>
		</METHOD>

        <METHOD NAME="PropertySyncMethod">
			<PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
	</CLASS>

	<!-- 描述：双因素根证书-->	
	<CLASS NAME="MutualAuthenticationRootCert">
		<!-- 证书id -->
		<PROPERTY NAME="CertId" TYPE="y">	</PROPERTY>
		<!-- 哈希序列号 -->
		<PROPERTY NAME="hashId" TYPE="y">	</PROPERTY>
		<!-- 哈希值 -->
		<PROPERTY NAME="hashValue" TYPE="u">	</PROPERTY>
		<!-- 证书颁发者 -->
		<PROPERTY NAME="IssueBy" TYPE="s">	</PROPERTY>
		<!-- 证书使用者 -->
		<PROPERTY NAME="IssueTo" TYPE="s">	</PROPERTY>
		<!-- 证书颁发者 -->
		<PROPERTY NAME="IssueByCN" TYPE="s">	</PROPERTY>
		<!-- 证书使用者 -->
		<PROPERTY NAME="IssueToCN" TYPE="s">	</PROPERTY>
		<!-- 开始时间 -->
		<PROPERTY NAME="ValidFrom" TYPE="s">	</PROPERTY>
		<!-- 截止时间 -->
		<PROPERTY NAME="ValidTo" TYPE="s">	</PROPERTY>
		<!-- 序列号 -->
		<PROPERTY NAME="SerialNumber" TYPE="s">	</PROPERTY>
		<!-- CRL文件路径 -->
		<PROPERTY NAME="CRLFilePath" TYPE="s">	</PROPERTY>
		<!-- 签名算法 -->
		<PROPERTY NAME="SigAlgorithm" TYPE="s">	</PROPERTY>
		<!-- 秘钥长度 -->
		<PROPERTY NAME="KeyLength" TYPE="u">	</PROPERTY>
		<!-- 秘钥用法 -->
		<PROPERTY NAME="KeyUsage" TYPE="s">	</PROPERTY>
		<!-- 证书CRL起始时间-->
		<PROPERTY NAME="CRLStartTime"  TYPE="s">	</PROPERTY>
		<!-- 证书CRL过期时间-->
		<PROPERTY NAME="CRLExpireTime"  TYPE="s">	</PROPERTY>
		<!-- 方法：导入根证书 -->
		<METHOD NAME="ImportRootCertificate">
			<PARAMETER TYPE="y" NAME="id" DIR="in"/>
			<PARAMETER TYPE="s" NAME="path" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>

		<!-- 方法：删除根证书 -->
		<METHOD NAME="DeleteRootCertificate">
			<PARAMETER TYPE="y" NAME="id" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>

		<!-- 方法：导入证书吊销列表 -->
		<METHOD NAME="ImportCRL">
			<PARAMETER TYPE="y" NAME="id" DIR="in"/>
			<PARAMETER TYPE="s" NAME="path" DIR="in"/>
		</METHOD>
        <!-- 方法：删除证书吊销列表 -->
		<METHOD NAME="DeleteCRL">
			<PARAMETER TYPE="y" NAME="id" DIR="in"/>
		</METHOD>
		<!-- 方法：删除根证书 -->
		<METHOD NAME="ReInitRootCertificate">
			<PARAMETER TYPE="y" NAME="id" DIR="in"/>
			<PARAMETER TYPE="u" NAME="value" DIR="in"/>			
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>
		

        <METHOD NAME="CertInfoPropertySyncMethod">
			<PARAMETER DIR="in" TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
		</METHOD>
	</CLASS>
	
	<!-- 描述：双因素客户端证书-->	
	<CLASS NAME="MutualAuthenticationCliCert">
		<!-- 哈希序列号 -->
		<PROPERTY NAME="hashId" TYPE="y">	</PROPERTY>
		<!-- 哈希值 -->
		<PROPERTY NAME="hashValue" TYPE="u">	</PROPERTY>
		<!-- 证书颁发者id -->
		<PROPERTY NAME="IssuerId" TYPE="y">	</PROPERTY>
		<!-- 证书颁发者 -->
		<PROPERTY NAME="IssueBy" TYPE="s">	</PROPERTY>
		<!-- 证书使用者 -->
		<PROPERTY NAME="IssueTo" TYPE="s">	</PROPERTY>
		<!-- 开始时间 -->
		<PROPERTY NAME="ValidFrom" TYPE="s">	</PROPERTY>
		<!-- 截止时间 -->
		<PROPERTY NAME="ValidTo" TYPE="s">	</PROPERTY>
		<!-- 序列号 -->
		<PROPERTY NAME="SerialNumber" TYPE="s">	</PROPERTY>
		<!-- 证书指纹 -->
		<PROPERTY NAME="FingerPrint" TYPE="s">	</PROPERTY>
		<!-- 证书吊销状态 -->
		<PROPERTY NAME="RevokedState" TYPE="y">	</PROPERTY>
		<!-- 证书吊销时间 -->
		<PROPERTY NAME="RevokedDate" TYPE="s">	</PROPERTY>
		<!-- 签名算法 -->
		<PROPERTY NAME="SigAlgorithm" TYPE="s">	</PROPERTY>
		<!-- 秘钥长度 -->
		<PROPERTY NAME="KeyLength" TYPE="u">	</PROPERTY>
		<!-- 秘钥用法 -->
		<PROPERTY NAME="KeyUsage" TYPE="s">	</PROPERTY>

		<!-- 方法：导入客户端证书 -->
		<METHOD NAME="ImportClientCertificate">
			<PARAMETER TYPE="y" NAME="id" DIR="in"/>
			<PARAMETER TYPE="s" NAME="path" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>

		<!-- 方法：删除客户端证书 -->
		<METHOD NAME="DeleteClientCertificate">
			<PARAMETER TYPE="y" NAME="id" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>

		<!-- 方法：重新初始化客户端证书 -->
		<METHOD NAME="ReInitClientCertificate">
			<PARAMETER TYPE="y" NAME="id" DIR="in"/>
			<PARAMETER TYPE="u" NAME="value" DIR="in"/>			
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>

        <METHOD NAME="CertInfoPropertySyncMethod">
    <PARAMETER DIR="in" TYPE="*" NAME="*" />
    <PARAMETER DIR="out" TYPE="*" NAME="*" />
</METHOD>
	</CLASS>
	
    <!-- 用于表示预置证书(SSL服务器证书)信息 -->
    <CLASS NAME="PreSSLSeverInfo">
        <!-- 国家(C) -->
		<PROPERTY NAME="Country" TYPE="s">		</PROPERTY>
        <!-- 常用名(CN) -->
		<PROPERTY NAME="CommonName"  TYPE="s">		</PROPERTY>
        <!-- 公司(O) -->
		<PROPERTY NAME="OrgName"  TYPE="s">		</PROPERTY>
    </CLASS>

	<!--FUNCTION:SSL-->
	<!-- 
	描述：Global模块信息
	所属模块：Global模块(Global)-->
	<CLASS NAME="SSL">
		<!-- 证书Id -->
		<PROPERTY NAME="CertId" TYPE="y" >  </PROPERTY>
		<!-- 证书类型 ：
			0: 保留
			1: 服务器证书
			2: 中间证书
			3: 根证书
		-->
		<PROPERTY NAME="CertType" TYPE="y" >  </PROPERTY>
		<!-- 证书使用者信息 格式:
		CN=Server, OU=IT, O=Huawei, L=ShenZhen, S=GuangDong, C=CN
		-->
		<PROPERTY NAME="SubjectInfo" TYPE="s" >  </PROPERTY>
		<!-- 证书颁发者信息 -->
		<PROPERTY NAME="IssuerInfo" TYPE="s" >  </PROPERTY>
		<!-- 国家(C) -->
		<PROPERTY NAME="Country" TYPE="s">		</PROPERTY>
		<!-- 省份(S) -->
		<PROPERTY NAME="State" TYPE="s">		</PROPERTY>
		<!-- 城市(L) -->
		<PROPERTY NAME="Location"  TYPE="s">		</PROPERTY>
		<!-- 公司(O) -->
		<PROPERTY NAME="OrgName"  TYPE="s">		</PROPERTY>
		<!-- 部门(OU) -->
		<PROPERTY NAME="OrgUnit" TYPE="s">		</PROPERTY>	
		<!-- 常用名(CN) -->
		<PROPERTY NAME="CommonName"  TYPE="s">		</PROPERTY>	
		<!-- 起始时间 -->
		<PROPERTY NAME="StartTime" TYPE="s">		</PROPERTY>	
		<!-- 过期时间 -->
		<PROPERTY NAME="Expiration"  TYPE="s">		</PROPERTY>	
		<!-- 序列号 -->
		<PROPERTY NAME="SerialNumber"  TYPE="s">		</PROPERTY>	
		<!-- 签名算法 -->
		<PROPERTY NAME="SigAlgorithm" TYPE="s"> </PROPERTY>
		<!-- 秘钥长度 -->
		<PROPERTY NAME="KeyLength" TYPE="u">    </PROPERTY>
		<!-- 秘钥用法 -->
		<PROPERTY NAME="KeyUsage" TYPE="s"> </PROPERTY>
		<!-- 加密工作密钥 -->
		<PROPERTY NAME="SSLWorkKey" TYPE="s" >  </PROPERTY>
		<!-- 根密钥组件 -->
		<PROPERTY NAME="SSLComponent" TYPE='ay'> </PROPERTY>
		<!-- 加密主密钥Id -->
		<PROPERTY NAME="SSLMasterKeyId" TYPE='u' >  </PROPERTY>
		<!-- 证书状态 ：
			0: 证书OK
			1: 证书正在生成
		-->
		<PROPERTY NAME="CertStatus" TYPE="y" >  </PROPERTY>
		<PROPERTY NAME="CertSignError" TYPE="y" >  </PROPERTY>
		<!-- 方法：获取Csr字符串 -->
		<METHOD NAME="GetCSRString">
			<PARAMETER DIR="out" NAME="string" TYPE="s"/>
        </METHOD>
		<!-- 方法：生成CSR -->	
		<METHOD NAME="GenerateCSR">
			<PARAMETER TYPE="s" NAME="Country" DIR="in"/>
			<PARAMETER TYPE="s" NAME="State" DIR="in"/>
			<PARAMETER TYPE="s" NAME="Location" DIR="in"/>
			<PARAMETER TYPE="s" NAME="OrgName" DIR="in"/>
			<PARAMETER TYPE="s" NAME="OrgUnit" DIR="in"/>
			<PARAMETER TYPE="s" NAME="CommonName" DIR="in"/>
        </METHOD>
		<!-- 方法：导入服务器证书 -->
		<METHOD NAME="ImportPublicKey">
			<PARAMETER DIR="in" NAME="size" TYPE="i"/>
			<PARAMETER DIR="in" NAME="filepath" TYPE="s"/>
			<PARAMETER DIR="out" NAME="PublicKeyResult" TYPE="i"/>
        </METHOD>
		<!-- 方法：导入自定义证书 -->
		<METHOD NAME="ImportCustomCert">
			<PARAMETER DIR="in" NAME="size" TYPE="i"/>
			<PARAMETER DIR="in" NAME="Pwd" TYPE="s"/>
			<PARAMETER DIR="in" NAME="filepath" TYPE="s"/>
			<PARAMETER DIR="out" NAME="CustomCertResult" TYPE="i"/>
        </METHOD>
		<!-- 方法：SetCsrReqInfo -->
		<METHOD NAME="SetCsrReqInfo">
			<PARAMETER DIR="in" NAME="type" TYPE="y"/>
			<PARAMETER DIR="in" NAME="string" TYPE="s"/>
        </METHOD>
		<!-- 方法：GetCsrStatus -->
		<METHOD NAME="GetCsrStatus">
			<PARAMETER DIR="out" NAME="CsrStatus" TYPE="i"/>
        </METHOD>
		<!-- 方法：SnmpGenerateCSR -->
		<METHOD NAME="SnmpGenerateCSR">
        </METHOD>
		<!-- 方法：GetCsrState -->
		<METHOD NAME="GetCsrState">
			<PARAMETER DIR="out" NAME="CsrState" TYPE="i"/>
        </METHOD>
		<!-- 方法：SnmpImportPublicKey -->
		<METHOD NAME="SnmpImportPublicKey">
			<PARAMETER DIR="in" NAME="string" TYPE="s"/>
			<PARAMETER DIR="in" NAME="length" TYPE="i"/>
        </METHOD>
		<!-- 方法：SetCustomCertFile -->
		<METHOD NAME="SetCustomCertFile">
			<PARAMETER DIR="in" NAME="string" TYPE="s"/>
			<PARAMETER DIR="in" NAME="length" TYPE="i"/>
        </METHOD>
		<!-- 方法：SetCustomCertFile -->
		<METHOD NAME="SetCustomCertFilePass">
			<PARAMETER DIR="in" NAME="string" TYPE="s"/>
        </METHOD>
		<!-- 方法：获取是否客户定制证书 -->
		<METHOD NAME="GetCustomedCertFlag">
			<PARAMETER DIR="out" NAME="CustomedCertFlag" TYPE="b"/>
        </METHOD>
		<METHOD NAME="SnmpImportCustomCert">
        </METHOD>
		<!-- 方法：证书加密和解密接口 -->
		<METHOD NAME="EncryptDecrypeCert">
			<PARAMETER DIR="in" NAME="srcfilename" TYPE="s"/>
			<PARAMETER DIR="in" NAME="desfilename" TYPE="s"/>
			<PARAMETER DIR="in" NAME="type" TYPE="i"/>
        </METHOD>	
 		<!-- 方法：证书加密接口 -->
		<METHOD NAME="EncryptCert">
			<PARAMETER DIR="in" NAME="dest_file" TYPE="s"/>
			<PARAMETER DIR="in" NAME="plaintext" TYPE="s"/>
            <!-- 加密类型：
                0: 根据当前产品自动选择KMC或者二层密钥加密，其他均为无效值
            -->
			<PARAMETER DIR="in" NAME="encrypt_type" TYPE="y"/>
        </METHOD> 
 		<!-- 方法：证书解密接口 -->
		<METHOD NAME="DecryptCert">
			<PARAMETER DIR="in" NAME="src_file" TYPE="s"/>
            <!-- 解密类型：
                1: 依次尝试（1）旧的方法（2）KMC或者二层密钥（根据密文格式自动选择）的方法解密
                2：旧的方法解密
                3：KMC或者二层密钥（根据密文格式自动选择）的方法解密
            -->
			<PARAMETER DIR="in" NAME="decrypt_type" TYPE="y"/>
			<PARAMETER DIR="out" NAME="plaintext" TYPE="s"/>
        </METHOD>        
		<!-- 方法: 导出CSR -->
		<METHOD NAME="ExportCSR">
			<!-- CSR导出文件路径:本地或远程URI -->
			<PARAMETER DIR="in" NAME="file_path" TYPE="s"/>
        </METHOD>
        <METHOD NAME="PropertySyncMethod">
			<PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
		<METHOD NAME="UpdateSSLFile">
			<PARAMETER DIR="in" NAME="NewKeyId" TYPE="u"/>
        </METHOD>
	</CLASS>
	
	<!--FUNCTION:Contact-->
	<!-- 
	描述：通信方式模块信息
	所属模块：Global模块(Global)-->
	<CLASS NAME="Contact" ID="7">
		<!-- 官网 -->
		<PROPERTY NAME="OfficalWeb" TYPE="s" ID="1" EXPORT="17">		</PROPERTY>
		<!-- 技术支持网站 -->		
		<PROPERTY NAME="SupportWeb" TYPE="s" ID="4" EXPORT="17">		</PROPERTY>
		<!-- 技术支持邮箱 -->
		<PROPERTY NAME="Email"  TYPE="s" ID="5" EXPORT="17">		</PROPERTY>
		<!-- 技术支持电话 -->
		<PROPERTY NAME="Phone"  TYPE="s" ID="6" EXPORT="17">	</PROPERTY>
		<!-- 版权信息 -->
		<PROPERTY NAME="Copyright"  TYPE="s" ID="3" EXPORT="17">	</PROPERTY>
		<!-- 默认版权信息 -->
		<PROPERTY NAME="DefaultCopyright"  TYPE="s">	</PROPERTY>
		<!-- 独立KVM下载链接信息_本地语言 -->
		<PROPERTY NAME="DownloadKVMLink"  TYPE="s" ID="7" EXPORT="18" >	</PROPERTY>
		<!-- 用于定制化索引 -->
		<PROPERTY NAME="ServiceID"  TYPE="u" ID="2">	</PROPERTY>
		<!-- Web是否支持显示文档二维码标志位 -->
		<PROPERTY NAME="DocSupportFlag" TYPE="y" ID="8">     </PROPERTY>>
		<!-- 方法：设置官网 -->
		<METHOD NAME="SetOfficalWeb" ID="1">
			<PARAMETER DIR="in" NAME="string" TYPE="s"/>
        </METHOD>
		<!-- 方法：设置技术支持网站 -->		
		<METHOD NAME="SetSupportWeb" ID="4">
			<PARAMETER DIR="in" NAME="string" TYPE="s"/>
        </METHOD>
		<!-- 方法：设置技术支持邮箱 -->
		<METHOD NAME="SetEmail" ID="5">
			<PARAMETER DIR="in" NAME="string" TYPE="s"/>
        </METHOD>
		<!-- 方法：设置技术支持电话 -->
		<METHOD NAME="SetPhone" ID="6">
			<PARAMETER DIR="in" NAME="string" TYPE="s"/>
        </METHOD>
		<!-- 方法：设置版权信息 -->
		<METHOD NAME="SetCopyright" ID="3">
			<PARAMETER DIR="in" NAME="string" TYPE="s"/>
		</METHOD>
		<!-- 方法：设置独立KVM下载链接 -->
		<METHOD NAME="SetDownloadKVMLink" ID="7">
			<PARAMETER DIR="in" NAME="string" TYPE="s"/>
        </METHOD>
	</CLASS>
	
	<CLASS NAME="FirmwareLimit">
		<!-- 限制升级类型：0: hardware 使用硬件标识防回退  1: software 软件防回退，通过装备IPMI写RevisionNumber实现 -->
		<PROPERTY NAME="RevisionType" TYPE="y">		</PROPERTY>
		<!-- 0: BMC UBOOT Flash -->
		<PROPERTY NAME="ChipType" TYPE="y">		</PROPERTY>
		<!-- 限制升级的FW类型，跟Firmware类的Classifications定义保持一致，0xfe BMC； 0xfd BIOS -->
		<PROPERTY NAME="FirmwareType" TYPE="y">		</PROPERTY>
		<!-- 芯片ID， 用来区分芯片型号 -->
		<PROPERTY NAME="ChipID" TYPE="ay">		</PROPERTY>
		<!-- 限制可以升级的最小的revision，跟hpm的upgrade.cfg中的revision比较，如果hpm比这个小，则不允许升级 -->
		<PROPERTY NAME="RevisionNumber" TYPE="y">		</PROPERTY>
	</CLASS>
	<!--FUNCTION:Bios-->
	<!-- 
	描述：Bios模块信息
	所属模块：Bios模块(Bios)-->
	<CLASS NAME="Bios" ID="82">
		<!-- Bios版本号，格式x.xx -->
		<PROPERTY NAME="Version" TYPE="s">		</PROPERTY>
		<!-- Bios备份文件版本号，格式x.xx -->
		<PROPERTY NAME="BackupVersion" TYPE="s">		</PROPERTY>
		<!-- TrustZone 安全os版本号，格式x.xx -->
		<PROPERTY NAME="TeeosVersion" TYPE="s">		</PROPERTY>
		<!-- 当前运行的Bios固件校验状态，0:成功，1:失败，掉电持久化 -->
		<PROPERTY NAME="FwVerifyResult" TYPE="y">     </PROPERTY>
		<!-- Bios备份固件的校验状态，0:成功，1:失败，掉电持久化 -->
		<PROPERTY NAME="BackupFwVerifyResult" TYPE="y">       </PROPERTY>
		<!-- Bios注册文件版本号，格式Vx.xx --> 
		<PROPERTY NAME="RegistryVersion" TYPE="s" ID="6">		</PROPERTY>		
		<!-- Bios位号 -->
		<PROPERTY NAME="UnitNum" TYPE="u">		</PROPERTY>
		<!-- 厂商ID，当前值0xdb0700 -->
		<PROPERTY NAME="ManufactureId" TYPE="u">		</PROPERTY>
		<!-- 是否支持BIOS配置导入导出 -->
		<PROPERTY NAME="ConfigExportSupport" TYPE="y">	</PROPERTY>
		<!-- Bios的Option配置文件 -->
		<PROPERTY NAME="OptionFileName" TYPE="s">		</PROPERTY>
		<!-- Bios的Display配置文件 -->
		<PROPERTY NAME="DisplayFileName" TYPE="s">		</PROPERTY>
		<!-- Bios的Change配置文件 -->
		<PROPERTY NAME="ChangeFileName" TYPE="s">		</PROPERTY>
		<!-- Bios的Clp配置文件 -->
		<PROPERTY NAME="ClpFileName" TYPE="s">		</PROPERTY>
		<!-- Bios的Clp response配置文件 -->
		<PROPERTY NAME="ClpRespFileName" TYPE="s">		</PROPERTY>
		<!-- redfish C50, added by wwx390838, start -->
		<PROPERTY NAME="RegistryFileName" TYPE="s">		</PROPERTY>
		
		<PROPERTY NAME="CurrentValueFileName" TYPE="s">		</PROPERTY>
		
		<PROPERTY NAME="SettingFileName" TYPE="s">		</PROPERTY>
		
		<PROPERTY NAME="ResultFileName" TYPE="s">		</PROPERTY>

        <PROPERTY NAME="ConfigValueFileName" TYPE="s">		</PROPERTY>

        <PROPERTY NAME="PolicyConfigRegistryFileName" TYPE="s">		</PROPERTY>

		<PROPERTY NAME="ComponentVersionFileName" TYPE="s">		</PROPERTY>

		<!-- 当前单板是否支持json格式的配置文件 0:不支持 1：支持 -->
		<PROPERTY NAME="BiosJsonFlag" TYPE="y" ID="7">		</PROPERTY>		
		<!-- redfish C50, added by wwx390838, end -->		
		<PROPERTY NAME="CMESFileName" TYPE="s">		</PROPERTY>
		<!-- 启动位置有效性标志:
            (0: 无效)
            (1: 单次有效)
            (2: 永久有效)
	    -->	
		<PROPERTY NAME="StartOptionFlag" TYPE="y" ID="2" EXPORT="17">		</PROPERTY>
		<!-- StartOptionFlagExt属性的含义与StartOptionFlag相同且值总是保持同步，新增该属性是用于修复配置导入功能bug -->
		<PROPERTY NAME="StartOptionFlagExt" TYPE="y" ID="9" EXPORT="17">		</PROPERTY>
		<!-- 启动位置:
            (0: No override)
            (1: Force PXE)
			(2: Hard-driver)
            (5: CD/DVD)
            (15: Floppy removable media)
        -->
		
		<PROPERTY NAME="LastStartOption" TYPE="y">		</PROPERTY>
		<!--
			(0: for Grantley)
			(1: for Brickland for ch242v3)
			(2: Brickland for 8100v3 5885 5885h)
			(0xff :Invalid value)
		-->
		<PROPERTY NAME="BootOrderFormat"  TYPE="y">      </PROPERTY> 
		<PROPERTY NAME="StartOption" TYPE="y" ID="1" EXPORT="17">		</PROPERTY>
		<!-- 启动协议或设备:
            StartOption PXE: 1: TFTP 2: HTTPS
			StartOption Hard-driver: 1: eMMC 2: NVMe M.2 3: SATA
            StartOption Floppy removable media: 1: USB
        -->
		<PROPERTY NAME="StartOptionExt" TYPE="y">		</PROPERTY>
		<!-- 清CMOS，即恢复BIOS默认配置 -->
		<PROPERTY NAME="ResetCmos" TYPE="y">		</PROPERTY>		
		<!-- 设置BIOS全打印开关标志位 -->
		<PROPERTY NAME="BiosPrintFlag" TYPE="y" ID="3" EXPORT="17">		</PROPERTY>		
		<!-- 网络配置文件变更标志 -->
		<PROPERTY NAME="ClpChangeFlag" TYPE="y">		</PROPERTY>	
		<!-- 无状态计算配置文件清除标志,0表示没有清除，1表示已经清除过 -->
		<PROPERTY NAME="ClpClearFlag" TYPE="y">		</PROPERTY>			
		<!-- Bios的上报Setup同步数据 -->
		<PROPERTY NAME="MenuData" TYPE="ay">		</PROPERTY>
		<!-- BIOS上报Setup文件变更标志 -->
		<PROPERTY NAME="MenuChangeFlag" TYPE="y">		</PROPERTY>	
		<!-- Bios的上报的BDF同步数据 -->
		<PROPERTY NAME="PcieCardBDF" TYPE="ay">		</PROPERTY>
	        <!-- Bios的上报的BDF同步数据 -->
	        <PROPERTY NAME="PcieDiskBDF" TYPE="ay">		</PROPERTY>
		<!-- IPMI设置启动模式显示开关,BiosBootModeSwEnable:0表示不显示使能开关,1表示显示使能开关 -->
		<!-- Bios的上报的BDF同步数据 -->
		<PROPERTY NAME="OCPCardBDF" TYPE="ay">		</PROPERTY>
		<PROPERTY NAME="BiosBootModeSwEnable" TYPE="y" ID="10" EXPORT="17">		</PROPERTY>
		<!-- BiosBootMode:0表示不支持设置BIOS的启动模式，1表示支持设置BIOS的启动模式 -->
		<PROPERTY NAME="BiosBootModeSupportFlag" TYPE="y">		</PROPERTY>	
		<!-- 启动模式使能开关，BiosBootModeSw:0表示关闭，1表示打开 -->
		<PROPERTY NAME="BiosBootModeSw" TYPE="y" ID="4" EXPORT="17">		</PROPERTY>	
		<!-- 启动模式，BiosBootMode:0表示legecy，1表示UEFI -->
		<PROPERTY NAME="BiosBootMode" TYPE="y" ID="5" EXPORT="17">		</PROPERTY>	
		<!-- BiosBootStage:0表示BIOS未启动，1表示BIOS启动到PCIE信息上报完成 -->
		<PROPERTY NAME="BiosBootStage" TYPE="y">		</PROPERTY>	
        
        <!-- 系统启动状态 : 0x00 表示BIOS未启动，
                            0x20 表示BIOS初始化ME完成， 
                            0x40 BIOS启动到PCIE信息上报完成， 
                            0x60 SMIBOS write prepare，0x63 SMBIOS write start, 0x66 SMBIOS write finish
			    0xFE 表示BIOS POST阶段完成(该标志标识BIOS已经全部启动完成)
        -->
        <PROPERTY NAME="SystemStartupState" TYPE="y" ID="8"> </PROPERTY> 
		<!-- SMI命令数据状态：
			0x00，未写入 
			0x01，已写入 
			0x02，已取走 
		-->
		<PROPERTY NAME="SMIDataState" TYPE="y"> </PROPERTY>
		<!-- SMI中断，关联accessor-->
		<PROPERTY NAME="SMIInterrupt" TYPE="y" > </PROPERTY>
		<!-- BIOS智能节能功能是否开启标志位， EnergySavingEnabled:0标识功能关闭，1标识功能开启-->
		<PROPERTY NAME="EnergySavingEnabled" TYPE="y"> </PROPERTY>
		<!-- DEMT配置项信息 DEMTConfig:0表示DEMT功能关闭 1表示DEMT功能打开 -->
		<PROPERTY NAME="DEMTConfig" TYPE="y"> </PROPERTY>
		<!-- 允许ipmi命令读取硬件寄存器的白名单 -->
		<PROPERTY NAME="HdInfoRdCmdWhiteList" TYPE="roa">	</PROPERTY>
		<!-- ImageUnionRegionId
			多BIOS升级包归一时，差异区域的身份标识。目前为 ME&Gbe 区域。
			0：		不支持
			1：		1288hv5、2288hv5、5288v5 电口
			2：		1288hv5、2288hv5、5288v5 光口
			3：		2288hv5 降成本
		-->
		<PROPERTY NAME="ImageUnionRegionId" TYPE="u">		</PROPERTY>
		<!-- BIOS Flash ID， 装备做BIOS SPI Flash测试的到时候获取一次并做掉电持久化 -->
		<PROPERTY NAME="SPIFlashId"  TYPE="ay"> </PROPERTY>
		<!-- BIOS密钥密码的主密钥Id -->
		<PROPERTY NAME="BiosPwdMasterKeyId" TYPE="u">		</PROPERTY>
		<!-- BIOS管理员用户原来的密码 -->
		<PROPERTY NAME="OldSetupPassword" TYPE="s">		</PROPERTY>
		<!-- BIOS要设置的管理员用户新密码 -->
		<PROPERTY NAME="NewSetupPassword" TYPE="s">		</PROPERTY>
		<!-- 内存FW版本与BIOS版本不匹配
			bit0：AEP FW版本与BIOS版本不匹配  1：不匹配  0：匹配
			bit1-31：0  保留
		-->
		<PROPERTY NAME="MemVerMismatch" TYPE="u"> </PROPERTY>
		<!-- BIOS普通用户原来的密码 -->
		<PROPERTY NAME="UserOldSetupPassword" TYPE="s">		</PROPERTY>
		<!-- BIOS要设置的普通用户新密码 -->
		<PROPERTY NAME="UserNewSetupPassword" TYPE="s">		</PROPERTY>
		<!-- 单板自定义SFC时钟频率，部分单板由于布线长度或器件延时较大，需要调整速率，0表示使用芯片默认值 -->
		<PROPERTY NAME="CustomSfcClkMhz" TYPE="u">	</PROPERTY>
		<!-- Bios的上报的BDF同步数据 -->
		<PROPERTY NAME="PortRootBDF" TYPE="ay"> </PROPERTY>
		<!-- Bios的上报的BDF同步数据 -->
		<PROPERTY NAME="PciePortRootBDF" TYPE="ay"> </PROPERTY>
		<!-- BIOS支持的启动项
			bit0: None 未设置
			bit1: PXE
			bit2: Hdd
			bit3: SAFE_MODE
			bit4: Diagnostic
			bit5: CD
			bit6: BiosSetup BIOS设置
			bit15: Floppy 软盘
		-->
		<PROPERTY NAME="SupportedStartOption" TYPE="u">	</PROPERTY>
		<!-- BIOS支持的启动协议或启动设备
			bit0: PXE TFTP启动
			bit1: PXE HTTPS启动
			bit2: 预留
			bit3: 预留
			bit4: NVMe M.2启动
			bit5: eMMC启动
			bit6: SATA启动
			bit7: 预留
			bit8: USB启动
			bit9~11: 预留
		-->
		<PROPERTY NAME="SupportedStartOptionExt" TYPE="u">	</PROPERTY>
		<!-- BIOS证书导入模式
			0：不支持BIOS证书导入
			1：BMC写JSON配置文件，BIOS通过BT通道获取
			2：BMC写JSON配置文件，透传证书文件到MCU，MCU透传证书给BIOS
		-->
		<PROPERTY NAME="CertApplyMode" TYPE="y"></PROPERTY>
        <!-- 设置系统启动状态 -->
		<METHOD NAME="SetSystemStartupState" ID="8">
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>
        
		<!-- BiosPrintFlag设置 -->
		<METHOD NAME="SetBiosPrintFlag" ID="3">
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>
		<!-- 方法：设置启动位置 -->
		<METHOD NAME="SetStartOption" ID="1">
			<PARAMETER TYPE="y" NAME="StartOption" DIR="in"/>
        </METHOD>
		<!-- 方法：设置启动设备或协议 -->
		<METHOD NAME="SetStartOptionExt">
			<PARAMETER TYPE="y" NAME="StartOption" DIR="in"/>
			<PARAMETER TYPE="y" NAME="StartOptionExt" DIR="in"/>
        </METHOD>
		<!--方法：设置启动位置有效性标志-->
		<METHOD NAME="SetStartOptionFlag" ID="2">
			<PARAMETER TYPE="y" NAME="SetStartOptionFlag" DIR="in"/>
        </METHOD>   
		<METHOD NAME="SetStartOptionFlagExt" ID="9">
			<PARAMETER TYPE="y" NAME="StartOptionFlagExt" DIR="in"/>
        </METHOD>   
		<!-- 方法：恢复BIOS默认配置 -->
		<METHOD NAME="ClearCmos">
        </METHOD>
		<!-- 方法：清除SMBIOS文件 -->
		<METHOD NAME="ClearSMBIOS">
        </METHOD>
		<METHOD NAME="SetBootOrder" >
			<PARAMETER TYPE="ay" NAME="BootOrder" DIR="in"/>
        </METHOD>  
		<METHOD NAME="GetBootOrder" >
			<PARAMETER TYPE="ay" NAME="BootOrder" DIR="out"/>
        </METHOD> 
		<METHOD NAME="GetBIOSConfig">
			<PARAMETER TYPE="s" NAME="filename" DIR="in"/>
        </METHOD>
		<!-- 方法：查询M3版本号 -->
		<METHOD NAME="GetM3Ver">
	</METHOD>			
		<!-- 方法：导入BIOS配置 -->
		<METHOD NAME="SetBIOSConfig">
			<PARAMETER TYPE="s" NAME="filename" DIR="in"/>
			<PARAMETER TYPE="s" NAME="failstring" DIR="out"/>
	</METHOD>
		<METHOD NAME="SetBiosBootModeSwEnable" ID="10">
			<PARAMETER TYPE="y" NAME="BiosBootModeSwEnableValue" DIR="in"/>
	</METHOD>
		<METHOD NAME="SetBiosBootModeSw" ID="4">
			<PARAMETER TYPE="y" NAME="BiosBootModeSwValue" DIR="in"/>
        </METHOD> 
		<METHOD NAME="SetBiosBootMode" ID="5">
			<PARAMETER TYPE="y" NAME="BiosBootModeValue" DIR="in"/>
        </METHOD> 
		<!-- redfish C50, added by wwx390838, start -->	
		<METHOD NAME="GetBIOSJsonFile">
			<PARAMETER DIR="in" NAME="filename" TYPE="s"/>
			<PARAMETER DIR="out" NAME="filecontent" TYPE="s"/>
	    </METHOD>
		<METHOD NAME="SetBIOSJsonFile">
			<PARAMETER DIR="in" NAME="filename" TYPE="s"/>
			<PARAMETER DIR="in" NAME="filecontent" TYPE="s"/>
			<PARAMETER DIR="out" NAME="*" TYPE="*"/>
		</METHOD>
		<METHOD NAME="ResetBIOS">
		</METHOD>
		<!-- 修改BIOS密码 -->
		<METHOD NAME="BIOSChangePassword">
			<PARAMETER DIR="in" NAME="PasswordName" TYPE="s"/>
			<PARAMETER DIR="in" NAME="OldPassword" TYPE="s"/>
			<PARAMETER DIR="in" NAME="NewPassword" TYPE="s"/>
		</METHOD>
		<METHOD NAME="UpdateBIOSCiphertext">
			<PARAMETER DIR="in" NAME="NewKeyId" TYPE="u"/>
		</METHOD>
		<METHOD NAME="RevokeBiosSetting">
        </METHOD>
        <!-- mezz卡配置查询方法 -->
		<METHOD NAME="GetClpResponse">
			<PARAMETER DIR="in" NAME="boardid" TYPE="q"/>
			<PARAMETER DIR="in" NAME="devicename" TYPE="s"/>
			<PARAMETER DIR="in" NAME="objectname" TYPE="s"/>
			<PARAMETER DIR="out" NAME="filecontent" TYPE="s"/>
        </METHOD>
		<METHOD NAME="SetClpConfig">
			<PARAMETER DIR="in" NAME="boardid" TYPE="q"/>
			<PARAMETER DIR="in" NAME="devicename" TYPE="s"/>
			<PARAMETER DIR="in" NAME="filecontent" TYPE="s"/>
			<PARAMETER DIR="in" NAME="portcount" TYPE="y"/>
			<PARAMETER DIR="out" NAME="message" TYPE="s"/>
        </METHOD>
        <!-- 通知PCIe卡的信息上报完成，同时设置BiosBootStage属性为1 -->
        <METHOD NAME="NotifyPCIeInfo">
			<PARAMETER TYPE="aq" NAME="vid_did_data" DIR="in"/>
        </METHOD>
		
		<!-- 设置BIOS动态配置参数,所有的配置项保存在数组中，每个配置项保存方式为TLV -->
		<METHOD NAME="SetBiosDynamicConfig">
			<!-- 最高位字节表示是否重复下发配置，1表示重复配置下发，低7位表示配置项个数 -->
			<PARAMETER TYPE="y" NAME="ConfigItemNum" DIR="in"/>
			<!-- 配置项信息-->
			<PARAMETER TYPE="ay" NAME="ConfigItemInfo" DIR="in"/>
			<!-- 每个配置项的配置结果 0表示配置成功，1表示配置失败，与入参保持一致 -->
			<PARAMETER TYPE="ay" NAME="ConfigItemResult" DIR="out"/>
		</METHOD>
		
		<!-- BIOS智能节能功能控制，SmartEnergyModeEnabled:0标识功能关闭，1标识功能开启 -->
		<METHOD NAME="SetBiosEnergySavingEnable">
			<PARAMETER TYPE="y" NAME="EnergySavingEnabled" DIR="in"/>
		</METHOD>
		<!-- BIOS智能节能功能控制，DMET使能状态:0关闭，1开启 -->
		<METHOD NAME="SetBiosDEMTEnable">
			<PARAMETER TYPE="y" NAME="Enabled" DIR="in"/>
		</METHOD>
		
		<METHOD NAME="GetBiosSettingEffectiveStatus">
			<PARAMETER TYPE="y" NAME="EffectiveStatus" DIR="out"/>
		</METHOD>
		<METHOD NAME="VerifyBIOSFirmware">
			<!-- 触发BIOS固件校验并获取校验结果
                 Type:校验方式，0 M3，1 BootGuard
                 AutoRecover: 是否自动恢复
                 Result: 0 成功，其他 失败 
            -->
			<PARAMETER DIR="in" NAME="Type" TYPE="y"/>
			<PARAMETER DIR="in" NAME="AutoRecover" TYPE="y"/>
			<PARAMETER DIR="out" NAME="Result" TYPE="i"/>
        </METHOD>
		<METHOD NAME="SetBIOSFwVerifyResult">
			<PARAMETER DIR="in" NAME="FwVerifyResult " TYPE="y"/>
			<PARAMETER DIR="in" NAME="BackupFwVerifyResult " TYPE="y"/>
        </METHOD>
		<!-- 设置BIOS的FLASH ID -->
		<METHOD NAME="SetSPIFlashId">
			<PARAMETER TYPE="ay" NAME="flashid" DIR="in"/>
		</METHOD>
        <METHOD NAME="GetCertificates">
            <PARAMETER TYPE="s" NAME="CertStr" DIR="out"/>
        </METHOD>
        <METHOD NAME="GetHttpsCertificates">
            <PARAMETER TYPE="s" NAME="ResponseData" DIR="out"/>
        </METHOD>
        <!-- 获取SecureBoot开关状态 -->
        <METHOD NAME="GetSecureBoot">
            <PARAMETER TYPE="y" NAME="SecureBoot" DIR="out"/>
        </METHOD>
        <!-- 设置SecureBoot开关状态 -->
        <METHOD NAME="SetSecureBoot">
            <PARAMETER TYPE="y" NAME="SecureBoot" DIR="in"/>
        </METHOD>
        <!-- 导入Bios SecureBoot/Boot证书 -->
        <METHOD NAME="ImportCert">
            <PARAMETER DIR="in" NAME="Usage" TYPE="s"/>
            <PARAMETER DIR="in" NAME="Database" TYPE="s"/>
            <PARAMETER DIR="in" NAME="CertificateString" TYPE="s"/>
            <PARAMETER DIR="in" NAME="CertificatesType" TYPE="s"/>
        </METHOD>
        <!-- 重置Bios SecureBoot/Boot证书 -->
        <METHOD NAME="ResetCert">
            <PARAMETER DIR="in" NAME="Usage" TYPE="s"/>
            <PARAMETER DIR="in" NAME="Database" TYPE="s"/>
            <PARAMETER DIR="in" NAME="ResetKeysType" TYPE="s"/>
        </METHOD>
    	<!-- redfish C50, added by wwx390838, end -->		
		<CLASS NAME="AgentBios"> </CLASS>
		<CLASS NAME="DataNotifyBios"> </CLASS>
	</CLASS>
	
	<!--FUNCTION:SmBios-->
	<!-- 
	描述：Smbios配置文件信息
	所属模块：Bios模块(Bios)-->
	<CLASS NAME="SmBios" ID="101">
		<!-- Smbios配置文件变更通知标志 -->
		<PROPERTY NAME="FileChange" TYPE="y">		</PROPERTY>
		<!-- Smbios配置文件 -->
		<PROPERTY NAME="FileName" TYPE="s">		</PROPERTY>
		<!-- 存储SMBIOS动态更新差异部分的文件 -->
		<PROPERTY NAME="DiffFileName" TYPE="s">		</PROPERTY>
		<!-- Smbios对应序列号 -->
		<PROPERTY NAME="SerialNumber" TYPE="s">		</PROPERTY>
		<!-- smbios鐘舵?? 0锛歱repare 1锛歸rtite 2锛歠inish -->
		<PROPERTY NAME="SmBiosStatus" TYPE="y" ID="4">		</PROPERTY>
		<!-- 是否已经更新过SMBios，1表示更新过，0表示没有；
        	 只要更新过了，根据SMBios文件内容更新CPU和内存的信息就是准确的
             此标志需要重启持久化 -->
		<PROPERTY NAME="SmBiosUpdatedFlag" TYPE="y">		</PROPERTY>
		<!-- Smbios Version 参数 -->
		<PROPERTY NAME="Version" TYPE="s" EXPORT="17" ID="1">	</PROPERTY>
		<!-- Smbios SKU Number 参数 -->
		<PROPERTY NAME="SKUNumber" TYPE="s" EXPORT="17" ID="2">	</PROPERTY>
		<!-- Smbios Family 参数 -->
		<PROPERTY NAME="Family" TYPE="s" EXPORT="17" ID="3">	</PROPERTY>
		
		<!-- 设置 Smbios Version 参数 -->
		<METHOD NAME="SetVersion" ID="1">
			<PARAMETER TYPE="s" NAME="Version" DIR="in"/>
		</METHOD>
		<!-- 设置 Smbios SKU Number 参数 -->
		<METHOD NAME="SetSKUNumber" ID="2">
			<PARAMETER TYPE="s" NAME="SetSKUNumber" DIR="in"/>
		</METHOD>
		<!-- 设置 Smbios Family 参数 -->
		<METHOD NAME="SetFamily" ID="3">
			<PARAMETER TYPE="s" NAME="Family" DIR="in"/>
		</METHOD>
	</CLASS>
	
	<!--FUNCTION:Upgrade-->
	<!-- 
	描述：升级模块信息
	所属模块：Upgrade模块(Upgrade)-->
	<CLASS NAME="Upgrade" ID="60">
		<!-- SPI通道：1代表通道在BMC侧  0代表通道在Bios侧 -->
		<PROPERTY NAME="BiosSPIChannel" TYPE="y">		</PROPERTY>
        <!-- BMC升级成功复位前的BootOrder -->
		<PROPERTY NAME="ExpectedBootOrder" TYPE="i"> </PROPERTY>
        <!-- BMC升级主备同步状态，0表示未进行主备同步，1表示正在升级主区，2表示主区升级完成，3表示正在同步备区，4表示备区同步完成 -->
		<PROPERTY NAME="BMCSyncState" TYPE="y"> </PROPERTY>
		<!-- BMC升级时是否激活生效分离，0表示激活，1表示不激活 -->
		<PROPERTY NAME="ActiveMode" TYPE="y"> </PROPERTY>
		<!-- 升级进度，取值范围0-100 -->
		<PROPERTY NAME="UpgradeState" TYPE="y">		</PROPERTY>
		<!-- 升级阶段:
            (1: Prepare)
            (2: Process)
			(3: Activity)
        -->
		<PROPERTY NAME="UpgradeMode" TYPE="y">		</PROPERTY>
		<!-- 升级组件:
            (0: Config)
            (1: App)
			(2: Bios)
			(3: Cfg)
            (4: Boot)
            (5: Cpld)
			(6: Cpld_Backplane)
			(7: Ipmc)
			(8: Cpld_8100_CPU)
			(9: Cpld_8100_IO)
        -->
		<PROPERTY NAME="CompnentID" TYPE="y">		</PROPERTY>
		<!-- 升级部位字符串描述 -->
		<PROPERTY NAME="CompnentStr" TYPE="s">		</PROPERTY>
		<!-- Bios当前是否处于升级状态 -->
		<PROPERTY NAME="Degrade" TYPE="y">		</PROPERTY>
		<!-- 回滚状态 -->
		<PROPERTY NAME="RollState" TYPE="y">		</PROPERTY>
		<!-- 升级错误码 -->
		<PROPERTY NAME="ErrCode" TYPE="i">		</PROPERTY>
		<!-- 当前是否处于升级中:
            (0: 没有升级)
            (1: 升级中)
        -->
		<PROPERTY NAME="InUpgradeFlag" TYPE="y">		</PROPERTY>
		<!-- SPI总线切换，Bios升级时用 -->
		<PROPERTY NAME="BusChange" TYPE="y">		</PROPERTY>
		<!-- 升级CPLD，关联Accessor -->
		<PROPERTY NAME="ContrlCpld" TYPE="y">		</PROPERTY>
		<!-- 生效CPLD，关联Accessor -->
		<PROPERTY NAME="ValidateCpld" TYPE="y">		</PROPERTY>
		<!-- 生效CPLD，需要复位持久化：
			(0: 没有生效)
            (1: 已生效)
		-->
		<!-- 当前CPLD是否完成生效标志:
            (0: 没有生效)
            (1: 已经生效)
        -->
		<PROPERTY NAME="FinishCpldFlag" TYPE="y" >		</PROPERTY>
		<PROPERTY NAME="ValidatingCpldFlag" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="ValidCpldFlag" TYPE="y">		</PROPERTY>
		<!-- BIOS flash 大小配置,单位MB -->
		<PROPERTY NAME="BIOSFlashSize" TYPE="y">	 </PROPERTY>
		<!-- 预回滚标志 -->
		<PROPERTY NAME="PreRollbackFlag" TYPE="y">	 </PROPERTY>
		<!-- 预升级标志 -->
		<PROPERTY NAME="PreUpgradeFlag" TYPE="y">	 </PROPERTY>
		<!-- 升级完成标志 -->
		<PROPERTY NAME="UpgradedFlag" TYPE="y">	 </PROPERTY>
		<!-- 升级详细结果 -->
		<PROPERTY NAME="UpgradeDetailedResults" TYPE="s" ID="1">	 </PROPERTY>
		<!-- 升级详细结果编码 -->
		<PROPERTY NAME="UpgradeResultsCode" TYPE="s">	 </PROPERTY>
		<PROPERTY NAME="UpgradeAllowBMCPoweroffFlag" TYPE="y">	 </PROPERTY>
		<PROPERTY NAME="UpgradeAllowBMCPoweroffTime" TYPE="i">	 </PROPERTY>
		<!-- Power Cycle触发缓存的BIOS升级包开始升级的标志
			0：升级完BIOS后不需要上电
			1：升级完BIOS后上电OS
			2：升级完BIOS后执行通电开机策略-->
		<PROPERTY NAME="ActivateBIOSUpgradeFlag" TYPE="y">	 </PROPERTY>
        <!-- 装备升级Bios概率出现ME挂死，此时需要AC才能恢复,为了升级BIos后的AC后的上电行为跟之前升级bios保持一致
		     在AC之前先记录当前bios升级后的上电行为，以方便AC后能根据该标志恢复
			0：AC后执行通电开机策略
			1：AC后执行下电
			2：AC后执行上电 -->
		<PROPERTY NAME="ActionAfterUpgrade" TYPE="y">	 </PROPERTY>
		<!-- BIOS升级模式，0：下电升级，1：上电缓存下电升级-->
		<PROPERTY NAME="BIOSUpgradeMode" TYPE="y" ID="2">	 </PROPERTY>
        <!-- BIOS无感升级时用，取值0-3、0xff
            0：默认缓存BIOS升级包，下电或重启后升级并生效
            1：升级后立即生效IMU
            2：升级后立即生效M7
            3：升级后立即生效IMU和M7
            0xff：仅升级，后续手动生效 -->
		<PROPERTY NAME="BIOSActiveMode" TYPE="y"> </PROPERTY>
		<!-- 强制升级BIOS的状态，1表示升级中，0表示升级完成了，掉电持久化保存，用于标志强制升级BIOS过程中掉电事件的发生 -->
		<PROPERTY NAME="ForceUpBiosState" TYPE="y">	 </PROPERTY>
		<!-- 升级成功后复位前的延时时间  主要用于延长HMM板升级BMC时BMC升级完成后自动复位时间 默认为20s -->
		<PROPERTY NAME="UpgradeDelayRebootTime" TYPE="u">	 </PROPERTY>
		<!-- BMC升级结果读取状态，BMC启动时读取，1：待读取，0：已读取 -->
		<PROPERTY NAME="BMCUpgradeResultReadStatus" TYPE="y">	 </PROPERTY>
		<!-- 升级非主板的CPLD，关联Accessor 1711背板CPLD升级通道与主板不同，需要新增Accessor -->
		<PROPERTY NAME="ContrlPeripheralCpld" TYPE="y">		</PROPERTY>
		<!-- 生效非主板的CPLD，关联Accessor 1711背板CPLD升级通道与主板不同，需要新增Accessor -->
		<PROPERTY NAME="ValidatePeripheralCpld" TYPE="y">		</PROPERTY>
		<!-- 升级包解密私钥加密主密钥Id -->
		<PROPERTY NAME="UpgradeFileMasterKeyId" TYPE='u'>	</PROPERTY>
        <!-- 是否禁止升级低版本，1：是，0：否 -->
		<PROPERTY NAME="DowngradeDisabled" TYPE='y' ID="3" EXPORT="17">	</PROPERTY>
		<!-- 方法：启动升级，供web/cli使用 -->
		<METHOD NAME="InitrialUpgrade">
			<PARAMETER TYPE="s" NAME="FileName" DIR="in"/>
			<PARAMETER TYPE="y" NAME="UpgradeMode" DIR="in"/>
        </METHOD>
		<!-- 方法：独立生效接口 -->
		<METHOD NAME="BiosHotUpgrade">
			<PARAMETER TYPE="y" NAME="ActivateMode" DIR="in"/>
        </METHOD>
		<METHOD NAME="InitDownloadFirmware">
			<PARAMETER DIR="in" NAME="DownloadOption" TYPE="y"/>
        </METHOD>
		<!-- 方法：设置升级中标志，供web使用 -->
		<METHOD NAME="SetUpgradeFlag">
			<PARAMETER TYPE="y" NAME="Flag" DIR="in"/>
        </METHOD>
		<!-- 方法：切换启动分区 -->
		<METHOD NAME="SetRollback">
        </METHOD>
		<!-- 方法：获取升级状态 -->
		<METHOD NAME="GetUpgradeStatus">
			<PARAMETER TYPE="i" NAME="Status" DIR="out"/>
        </METHOD>
        <METHOD NAME="GetComponentsInfo">
			<PARAMETER TYPE="s" NAME="component_info" DIR="out"/>
        </METHOD>	
		<!-- 方法：启动IPMI命令同步升级 -->
		<METHOD NAME="InitrialIpmiUpgrade">
			<PARAMETER TYPE="s" NAME="Filename" DIR="in"/>
			<PARAMETER TYPE="i" NAME="Componentid" DIR="in"/>
			<PARAMETER TYPE="i" NAME="Filelength" DIR="in"/>
        </METHOD>	
		<!-- 方法：获取CPLD是否已生效标志 -->
		<METHOD NAME="GetCpldValidFlag">
			<PARAMETER TYPE="y" NAME="Flag" DIR="out"/>
        </METHOD>	
		<!-- 方法：设置Power Cycle触发缓存的BIOS升级包开始升级的标志-->
		<METHOD NAME="SetActivateBIOSUpgradeFlag">
			<PARAMETER TYPE="y" NAME="Flag" DIR="in"/>
        </METHOD>
		<!-- 方法：获取是否缓存了BIOS升级包文件-->
		<!-- 出参含义：
			只有一个出参：
			 第一个出参：
			 0: 不存在缓存的升级文件
		     1：存在缓存的BIOS升级文件
			有两个出参： 
			 第一个出参：
			 0: 不存在缓存的升级文件
		     1：存在缓存的BIOS升级文件
			 第二个出参：
			 缓存BIOS升级包路径
		-->
		<METHOD NAME="GetCacheUpgradeFileStatus">
			<PARAMETER TYPE="*" NAME="*" DIR="out"/>
        </METHOD>
		<METHOD NAME="SetIErrDiagFailFlag">
			<PARAMETER TYPE="y" NAME="Flag" DIR="in"/>
		</METHOD>
		<!-- 方法：导入CRL文件定义,加入在Upgrade类中 -->
		<METHOD NAME="ImportCRLFile">
			<PARAMETER TYPE="s" NAME="FileName" DIR="in"/>
		</METHOD>
		<!-- 方法：SP 升级准备 -->
		<METHOD NAME="PrepareUpgradeSP">
			<!-- 升级模式 -->
			<PARAMETER TYPE="s" NAME="UpdateMode" DIR="in"/>
			<!-- 升级包iso所在目录 -->
			<PARAMETER TYPE="s" NAME="BaseDir" DIR="in"/>
			<!-- 升级引导文件(check.json)含路径文件名 -->
			<PARAMETER TYPE="s" NAME="GuideFileName" DIR="in"/>
			<!-- 吊销列表(cms.crl)含路径文件名 -->
			<PARAMETER TYPE="s" NAME="CrlFileName" DIR="in"/>
		</METHOD>
		<!-- 方法：SP升级前链接升级文件 -->
		<METHOD NAME="LinkUpgradeFile">
			<!-- 升级包iso所在目录 -->
			<PARAMETER TYPE="s" NAME="BaseDir" DIR="in"/>
		</METHOD>
		<!-- 方法：获取SP升级的MajorVersion是否有改变 -->
		<METHOD NAME="GetMajorVersionFlag">
			<PARAMETER TYPE="*" NAME="*" DIR="out"/>
		</METHOD>
		<!-- 方法：更新SP schema文件准备 -->
		<METHOD NAME="PrepareUpdateSPSchema">		
		</METHOD>
		<!-- 方法：SP 升级 -->
		<METHOD NAME="UpgradeSP">
			<!-- u盘根目录 -->
			<PARAMETER TYPE="s" NAME="UmsPath" DIR="in"/>
		</METHOD>

		<!-- 方法：手动生效CPLD（mm920）,加入在Upgrade类中 -->
        <METHOD NAME="ValidCpldManu">
            <PARAMETER TYPE="*" NAME="*" DIR="out"/>
        </METHOD>
        <METHOD NAME="ChangeBiosMux">
            <PARAMETER TYPE="y" NAME="Flag" DIR="in"/>
        </METHOD>
        <METHOD NAME="UpdateUpgradeFile">
			<PARAMETER DIR="in" NAME="NewKeyId" TYPE="u"/>
        </METHOD>
        <METHOD NAME="SetActiveMode">
            <PARAMETER TYPE="y" NAME="ActiveMode" DIR="in"/>
        </METHOD>
        <METHOD NAME="SetBIOSActiveMode">
            <PARAMETER TYPE="y" NAME="BIOSActiveMode" DIR="in"/>
        </METHOD>
        <METHOD NAME="RecoverBios">
        </METHOD>
	    <!-- 方法：设置是否开启禁止降级 -->
        <METHOD NAME="SetDowngradeDisabled" ID="3">
			<PARAMETER TYPE="y" NAME="DowngradeDisabled" DIR="in"/>
        </METHOD>
        <!-- 方法：设置AC 后的上电策略（仅生效一次）-->
		<METHOD NAME="SetActionAfterUpgrade">
			<PARAMETER TYPE="y" NAME="Flag" DIR="in"/>
		</METHOD>
		<!-- 方法：更新板载BMA文件 -->
		<METHOD NAME="PreUpgradeInstallableIbma">	
			<PARAMETER TYPE="s" NAME="ImagePath" DIR="in"/>
			<PARAMETER TYPE="s" NAME="SignaturePath" DIR="in"/>
			<PARAMETER TYPE="s" NAME="CRLPath" DIR="in"/>	
		</METHOD>
		<!-- 方法：板载BMA升级 -->
		<METHOD NAME="UpgradeInstallableIbma">
		</METHOD>
        <!-- 方法：设置主备同步状态 -->
		<METHOD NAME="SetSyncState">
            <PARAMETER TYPE="y" NAME="SyncState" DIR="in"/>
		</METHOD>
        <!-- 方法：通过远程文件升级 -->
		<METHOD NAME="RemoteUpgrade">
            <PARAMETER TYPE="s" NAME="ImageURI" DIR="in"/>
            <PARAMETER TYPE="y" NAME="Mode" DIR="in"/>
		</METHOD>
	</CLASS>
	
	<!--end modified by qichengming at 2013.9.23-->
	
	<CLASS NAME="UidButton">
        <PROPERTY NAME="PressEvent" TYPE='y'>		</PROPERTY>
		<PROPERTY NAME="MixPressEvent" TYPE='u'>	</PROPERTY>
	</CLASS>
	<CLASS NAME="LedTest">
        <PROPERTY NAME="RegVal" TYPE='y'>		</PROPERTY>
	</CLASS>
	<!--Led类-->
	<CLASS NAME="Led">
		<!--FRU ID-->
        <PROPERTY NAME="FRUID" TYPE='y'>		</PROPERTY>
		<!--Led Id-->
		<PROPERTY NAME="ID" TYPE="y">			</PROPERTY>
		<!--Led名称-->
		<PROPERTY NAME="Name" TYPE="s">			</PROPERTY>
		<!--Led 模式，包括本地、超驰、LampTest-->
		<PROPERTY NAME="Mode" TYPE="y" EXPORT="17">			</PROPERTY>	
		<!--Led状态，亮灭闪-->		
		<PROPERTY NAME="State" TYPE="y">		</PROPERTY>	
		<!--Led颜色-->		
		<PROPERTY NAME="Color" TYPE="y">		</PROPERTY>
		<!--Led频率控制寄存器-->		
		<PROPERTY NAME="CtrlValue" TYPE="y">		</PROPERTY>	
		<!--Led亮时间-->
		<PROPERTY NAME="OnDuration" TYPE="y">		</PROPERTY>	
		<!--Led灭时间-->
		<PROPERTY NAME="OffDuration" TYPE="y">		</PROPERTY>	
		<!--Led本地控制模式颜色-->
		<PROPERTY NAME="LCSColor" TYPE='y'>		</PROPERTY>
		<!--Led本地控制模式状态-->
		<PROPERTY NAME="LCSState" TYPE="y">		</PROPERTY>
		<!--Led超驰控制模式颜色-->
		<PROPERTY NAME="OSColor" TYPE="y">		</PROPERTY>
		<!--Led超驰控制模式状态-->
		<PROPERTY NAME="OSState" TYPE="y">		</PROPERTY>		
		<!--Led颜色支持能力-->
		<PROPERTY NAME="ColorCapabilitie" TYPE="y">	</PROPERTY>	
		<!--Led默认本地控制颜色-->
		<PROPERTY NAME="DefaultLCSColor" TYPE="y">	</PROPERTY>		
		<!--Led默认超驰控制颜色-->
		<PROPERTY NAME="DefaultOSColor" TYPE="y">	</PROPERTY>	
		<!--LampTest颜色-->
		<PROPERTY NAME="LampTestColor" TYPE="y">	</PROPERTY>	
		<!--LampTest时间-->
		<PROPERTY NAME="LampTestDuration" TYPE="y">	</PROPERTY>	
		<!--关键健康状态对象-->
		<PROPERTY NAME="RefHealthObj" TYPE="roa">	</PROPERTY>
		<!--关键健康状态属性-->
		<PROPERTY NAME="RefHealthProp" TYPE="as">	</PROPERTY>
		<!--是否需要上电自检-->
		<PROPERTY NAME="NeedStartUpTest" TYPE="y">	</PROPERTY>
        	<!--设置UID灯-->
			<METHOD NAME="SetUIDLedIdentify">
            		<PARAMETER TYPE="y" NAME="state" DIR="in"/>
            		<PARAMETER TYPE="y" NAME="interval" DIR="in"/>
        	</METHOD>	
		<METHOD NAME="SetState">
			<!-- 单位10ms,ontime为0则OFF,offtime为0则ON,否则按配的时间闪 -->
			<PARAMETER TYPE="y" NAME="ontime" DIR="in"/>
			<PARAMETER TYPE="y" NAME="offtime" DIR="in"/>
			<PARAMETER TYPE="y" NAME="color" DIR="in"/>
		</METHOD>
		<METHOD NAME="UIDSyncMethod">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
        <!--计算型存储提供给产品使用，可主动点亮告警，模式可选-->
        <METHOD NAME="PicmgSetLed">
			<PARAMETER TYPE="y" NAME="fruid" DIR="in"/>
            <PARAMETER TYPE="y" NAME="ledid" DIR="in"/>
            <PARAMETER TYPE="y" NAME="ledfun" DIR="in"/>
            <PARAMETER TYPE="y" NAME="onduration" DIR="in"/>
            <PARAMETER TYPE="y" NAME="color" DIR="in"/>
		</METHOD>
        <METHOD NAME="PicmgGetLed">
			<PARAMETER TYPE="y" NAME="fruid" DIR="in"/>
            <PARAMETER TYPE="y" NAME="ledid" DIR="in"/>
            <PARAMETER TYPE="y" NAME="state" DIR="out"/>
		</METHOD>
        <METHOD NAME="SyncChassisLedStatus">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
		<CLASS NAME="AgentLed"> </CLASS>
	</CLASS>
	<!--I2cLed类，用于控制不需要用户管理的I2C控制的led-->
	<CLASS NAME="I2cLed">
		<!-- 控制led的值，会关联硬件 -->
		<PROPERTY NAME="CtrlValue" TYPE="y">		</PROPERTY>	
		<!-- Led点亮的值 -->
		<PROPERTY NAME="LedOnValue" TYPE="y">		</PROPERTY>	
		<!--关键健康状态对象-->
		<PROPERTY NAME="RefHealthObj" TYPE="roa">	</PROPERTY>
		<!--关键健康状态属性-->
		<PROPERTY NAME="RefHealthProp" TYPE="as">	</PROPERTY>
		<METHOD NAME="SetState">
			<!-- 单位10ms,ontime为0则OFF,offtime为0则ON,否则按配的时间闪 -->
			<PARAMETER TYPE="y" NAME="ontime" DIR="in"/>
			<PARAMETER TYPE="y" NAME="offtime" DIR="in"/>
		</METHOD>
	    <METHOD NAME="GetState">
			<PARAMETER TYPE="y" NAME="state" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetComponentLed">
            <PARAMETER TYPE="y" NAME="state" DIR="in"/>
        </METHOD>
	</CLASS>
	
	<!-- 手动灯类，用于控制逻辑只提供亮或者灭控制形式的led，由管理软件控制而非CPLD -->
	<CLASS NAME="ManualControlLed">
		<!-- 控制led的值，会关联硬件 -->
		<PROPERTY NAME="CtrlValue" TYPE="y">		</PROPERTY>	
		<METHOD NAME="SetState">
			<!-- 控制逻辑：0灭，1亮 -->
			<PARAMETER TYPE="y" NAME="state" DIR="in"/>
		</METHOD>
	</CLASS>
	
	<CLASS NAME="InsertStatusLedCtrl">
        <PROPERTY NAME="CheckInsertEn" TYPE="y">		</PROPERTY>
        <PROPERTY NAME="InsertStatus0" TYPE="y">		</PROPERTY>
        <PROPERTY NAME="InsertStatus1" TYPE="y">		</PROPERTY>		
		<PROPERTY NAME="RefLed" TYPE="ro">			</PROPERTY>
	</CLASS>
	
	<CLASS NAME="LedPanel"	ID="108">
		<!-- Led面板在位信号 -->
		<PROPERTY NAME="Present" TYPE="y"	ID="1">			</PROPERTY>
		<!-- Led面板数字0-9、A-F、全亮、全灭、NA值 共19个 -->
		<PROPERTY NAME="ValueMap" TYPE="ay">			</PROPERTY>
		<!-- led面板上数码管控制对象，应该为类LedDispControl的对象 -->
		<PROPERTY NAME="DigitControl" TYPE="ro">			</PROPERTY>
		<!-- 监控健康状态的对象类型 
			bit0-3 : 
						0:实体(特定EntityType的所有实体) 
						1:传感器(特定SensorTypeStr的所有传感器)
						2:类名(特定类的所有对象,该类需要有Health属性,多个类以";"分割)
						  bit7配置为1时,仅支持配置以下类且可以混配: PcieCard,NetCard
						  例如：以下为有效配置: PcieCard;NetCard
			bit4-5 : 保留
			bit6 : 0: 十进制显示 1: 十六进制显示
			bit7 : 0: 对应类型所有对象健康状态合一 1: 对应类型所有对象健康状态分别显示 
		-->
		<PROPERTY NAME="RelatedTypeFlag" TYPE="ay">			</PROPERTY>
		<!-- led面板上各LED灯关联的实体或传感器类型 -->
		<PROPERTY NAME="RelatedName" TYPE="as">			</PROPERTY>
		<!-- led面板上各LED灯关联的物理对象，当前支持Led类或I2cLed类对象 -->
		<PROPERTY NAME="LedControl" TYPE="roa">			</PROPERTY>
	</CLASS>
    
	<CLASS NAME="Diagnose" ID="87">
		<PROPERTY NAME="BlackBoxProcessbar"  TYPE="y">		</PROPERTY>	
		<PROPERTY NAME="SystemComProcessbar"  TYPE="y">		</PROPERTY>		
		<PROPERTY NAME="Port80LedState"  TYPE="y">		</PROPERTY>
		<PROPERTY NAME="PCIeInterfaceSwitch" TYPE="y"	ID="3" EXPORT="17">	</PROPERTY>	
		<PROPERTY NAME="BlackBoxState"  TYPE="y" ID="1" EXPORT="17">	</PROPERTY>	
		<PROPERTY NAME="SolDataState"  TYPE="i" ID="2" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="SolDataDirection"  TYPE="y">		</PROPERTY>
		<PROPERTY NAME="SolAutoCollectEnable"  TYPE="y">		</PROPERTY>
		<PROPERTY NAME="AllSolVolumeSize"  TYPE="y">		</PROPERTY>
		<!-- 引用的串口日志配置对象列表比如<VALUE>SYScom</VALUE><VALUE>BMCcom</VALUE> -->
		<PROPERTY NAME="SolUartObj" TYPE="roa"></PROPERTY>
		<METHOD NAME="GetBlackBox">
        <PARAMETER TYPE="s" NAME="BlackBox_filename" DIR="out"/>
		</METHOD> 		
		<METHOD NAME="GetSystemCom">
        <PARAMETER TYPE="s" NAME="SystemCom_filename" DIR="out"/>
		</METHOD>		
		<METHOD NAME="GetPort80">
            <PARAMETER TYPE="ay" NAME="data" DIR="out"/>
			<PARAMETER TYPE="i" NAME="posion" DIR="out"/>
			<PARAMETER TYPE="i" NAME="len" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetPCIeInterfaceSwitch" ID="3">
			<PARAMETER TYPE="y" NAME="switch" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBlackBoxDumpState" ID="1">
			<PARAMETER TYPE="y" NAME="state" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetSolDataState" ID="2">
			<PARAMETER TYPE="i" NAME="state" DIR="in"/>
		</METHOD>	        
	</CLASS>	
	
	<CLASS NAME="PcieSwitch" ID="104">
		<!-- 20171227注释勘误： Type 0, 8796、9797; 1, 8725 ;2,9765，-->
		<PROPERTY NAME="Type"  TYPE="y">		</PROPERTY>	
		<!-- Temperature -->
		<PROPERTY NAME="Temperature"  TYPE="q">		</PROPERTY>
		<PROPERTY NAME="Present"  TYPE="y" ID="3">		</PROPERTY>	
		<PROPERTY NAME="Version"  TYPE="s" ID="1">		</PROPERTY>
		<PROPERTY NAME="UnitNum"  TYPE="u" ID="2"> 	</PROPERTY>
		<!-- 默认更新的文件-->
		<PROPERTY NAME="DefUpgradeFile"  TYPE="s"> 	</PROPERTY>
		<PROPERTY NAME="PwrOnUpgradeAccessor"  TYPE="y"> 	</PROPERTY>	
		<PROPERTY NAME="PwrOffUpgradeAccessor"  TYPE="y"> 	</PROPERTY>		
		<!--健康寄存器信息-->
		<PROPERTY NAME="PcieSwitchActionObj" TYPE="roa">	</PROPERTY>
		<PROPERTY NAME="UpgradeState"  TYPE="y"> 	</PROPERTY>
		<!--升级完成标志-->
		<PROPERTY NAME="UpgradeFinish"  TYPE="y"> 	</PROPERTY>
		<PROPERTY NAME="PSWPowerstate"  TYPE="y"> 	</PROPERTY>
		<!--PCIe Switch ID, 用来区分同一类型的不同PCIe Switch器件-->
		<PROPERTY NAME="SwitchId"  TYPE="u"> 	</PROPERTY>
		<!--PCIe Switch配置升级流程类型：-->
		<!--0，OSCA多个文件配置方式-->
		<!--1,9032配置方式-->
		<!--2,只需要判断版本号的单个文件配置方式-->
		<!--0x82,判断版本号方式，只有当BMC上FW的版本大于器件上的FW版本才会升级-->
		<!--0xFF, 无效配置值, 不走上述任何一种升级流程, 如CH220v3的8725-->
		<PROPERTY NAME="UpgradeFlowType"  TYPE="y"> 	</PROPERTY>
		<!-- 器件配置加载的触发条件，数值越大表示要求的条件越严格，触发因子大于或等于预期条件时可以触发
		     0：无条件，只要函数被调用就触发检查和加载
		     1：只要检测到x86复位信号就触发检查和加载，适用于大多数机架和刀片产品
		     2：当BIOS启动到完成VID、DID上报时触发检查和加载，适用于CH220v3等特殊产品
		     3：只要检测到器件上电就触发检查和加载，适用于无法获取准确x86复位信号的产品，如MM510 -->
		<!-- 加载触发条件，0无条件，1为x86复位触发，2为BIOS启动完成后触发，3为器件上电(或PowerCycle)触发 -->
		<PROPERTY NAME="LoadTrigger" TYPE="y">    </PROPERTY>
		<!-- PcieSwitch属于哪个节点，如果本板填写0xff,非本板填写对应的单板的槽位号 -->
		<PROPERTY NAME="NodeId" TYPE="y">    </PROPERTY>
		<!-- 生效模式 ValidMode: 0表示无需操作，1表示WarmReset，2表示ColdReset，3表示PowerCycle -->
		<PROPERTY NAME="ValidMode" TYPE="y">    </PROPERTY>
		<!-- 方法：写入8725配置文件 -->
		<METHOD NAME="WritePex8725Cfg">
			<PARAMETER TYPE="s" NAME="filename" DIR="in"/>
        	</METHOD>
		<!-- 方法：BIOS上报的VID\DID通知给PCIE_SWITCH，以更新8796的配置文件 -->	
		<METHOD NAME="WritePCIeSWCfg">
			<PARAMETER TYPE="aq" NAME="vid_did_data" DIR="in"/>
        	</METHOD>
		<METHOD NAME="UpgradePCIESWITCHEEPROM">
			<PARAMETER TYPE="s" NAME="filename" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetPcieSwitchUpgradeState">
			<PARAMETER TYPE="y" NAME="UpgradeState" DIR="in"/>
		</METHOD>
   </CLASS>
   
	<!-- Begin Add by z00382105 -->
   <CLASS NAME="PcieRetimer">
		<PROPERTY NAME="ExpectDeviceId"  TYPE="u">		</PROPERTY>	
		<PROPERTY NAME="DeviceId"  TYPE="u">		</PROPERTY>	
		<PROPERTY NAME="DeviceIdAccessor"  TYPE="ro">		</PROPERTY>
		<PROPERTY NAME="Present"  TYPE="y" ID="3">		</PROPERTY>	
		<!-- 该属性保存Retimer 0x28版本寄存器的值-->
		<PROPERTY NAME="Version"  TYPE="u" ID="1">		</PROPERTY>
		<!-- 目前在这里当做Retimer器件在单板上的标识使用　-->
		<PROPERTY NAME="UnitNum"  TYPE="s" ID="2"> 	</PROPERTY>
		<!-- 默认更新的文件-->
		<PROPERTY NAME="DefUpgradeFile"  TYPE="s"> 	</PROPERTY>
		<PROPERTY NAME="PwrOnUpgradeAccessor"  TYPE="y"> 	</PROPERTY>	
		<PROPERTY NAME="PwrOffUpgradeAccessor"  TYPE="y"> 	</PROPERTY>		
		<!--健康寄存器信息-->
		<PROPERTY NAME="PcieRetimerActionObj" TYPE="roa">	</PROPERTY>
		<PROPERTY NAME="PcieRetimerDumpReg" TYPE="roa">		</PROPERTY>
		<PROPERTY NAME="UpgradeState"  TYPE="y"> 	</PROPERTY>
		<!--PCIe Retimer 升级前所需的延时-->
		<PROPERTY NAME="DelayTimeBeforeUpgrade"  TYPE="y"> 	</PROPERTY>
                <PROPERTY NAME="Upgrading"  TYPE="y"> 	</PROPERTY>	
		<!-- 生效模式 ValidMode: 0表示无需操作，1表示WarmReset，2表示ColdReset，3表示PowerCycle -->
		<PROPERTY NAME="ValidMode" TYPE="y">    </PROPERTY>
		<!-- Retimer属于哪个节点，如果本板填写0xff,非本板填写对应的单板的槽位号 -->
		<PROPERTY NAME="NodeId" TYPE="y">    </PROPERTY>
		<!-- 器件配置加载的触发条件，数值越大表示要求的条件越严格，触发因子大于或等于预期条件时可以触发
		     0：无条件，只要函数被调用就触发检查和加载
		     1：只要检测到x86复位信号就触发检查和加载，适用于大多数机架和刀片产品
		     2：当BIOS启动到完成VID、DID上报时触发检查和加载，适用于CH220v3等特殊产品
		     3：只要检测到器件上电就触发检查和加载，适用于无法获取准确x86复位信号的产品，如MM510 -->
		<!-- 加载触发条件，0无条件，1为x86复位触发，2为BIOS启动完成后触发，3为器件上电(或PowerCycle)触发 -->
		<PROPERTY NAME="LoadTrigger" TYPE="y">    </PROPERTY>
		<PROPERTY NAME="PRTPowerstate"  TYPE="y"> 	</PROPERTY>
		<PROPERTY NAME="RetimerId"  TYPE="u"> 	</PROPERTY>
		<PROPERTY NAME="LoadStatus"  TYPE="y"> 	</PROPERTY>
		<METHOD NAME="WritePCIeRetimerCfg">
			<PARAMETER TYPE="aq" NAME="vid_did_data" DIR="in"/>
        	</METHOD>
		<METHOD NAME="UpgradePCIERetimerEEPROM">
			<PARAMETER TYPE="s" NAME="filename" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetPcieRetimerUpgradeState">
			<PARAMETER TYPE="y" NAME="UpgradeState" DIR="in"/>
		</METHOD>
    </CLASS>
	<CLASS NAME="RetimerDumpReg">
		<PROPERTY NAME="DeviceRegAddr" TYPE="au">			</PROPERTY>
		<PROPERTY NAME="MCBaseAddr" TYPE="au">			    </PROPERTY>
		<PROPERTY NAME="MCRegOffset" TYPE="au">			    </PROPERTY>
		<!-- PcieRetimer芯片Internal Phy类寄存器 -->
		<PROPERTY NAME="SerDesNum" TYPE="y">			    </PROPERTY>
		<PROPERTY NAME="PhyLaneBaseAddr" TYPE="au">		    </PROPERTY>
		<PROPERTY NAME="PhyLaneRegOffset" TYPE="au">	    </PROPERTY>
	</CLASS>
   <!-- End Add by z00382105 -->
   <CLASS NAME="PcieSwitchMgntCfg">
	    <!-- 匹配的条件1 -->
		<PROPERTY NAME="Condition1" TYPE="y">			</PROPERTY>
		<!-- 匹配的条件2 -->
		<PROPERTY NAME="Condition2" TYPE="y">			</PROPERTY>
		<!-- 匹配的条件3 -->
		<PROPERTY NAME="Condition3" TYPE="y">			</PROPERTY>
		<!-- 匹配的条件4 -->
		<PROPERTY NAME="Condition4" TYPE="y">			</PROPERTY>
		<!-- 对应的检测寄存器组 -->
		<PROPERTY NAME="RefRegObj" TYPE='roa'>			</PROPERTY>
		<!-- 匹配后，更新的文件下标 -->
		<PROPERTY NAME="UpdateFileName1" TYPE='s'>	</PROPERTY>
		<!-- 匹配后，更新的文件下标 -->
		<PROPERTY NAME="UpdateFileName2" TYPE='s'>	</PROPERTY>
		<!--PCIe Switch ID, 用来区分同一类型的不同PCIe Switch器件-->
		<PROPERTY NAME="SwitchId"  TYPE="u"> 	</PROPERTY>
	</CLASS>
	<!-- Beging ADD by z00382105 -->
	<CLASS NAME="PcieRetimerMgntCfg">
		<!-- 对应的检测寄存器组 -->
		<PROPERTY NAME="RefRegObj" TYPE='roa'>			</PROPERTY>
		<!-- 匹配后，更新的文件下标 -->
		<PROPERTY NAME="UpdateFileName1" TYPE='s'>	</PROPERTY>
		<!--PCIe Retimer ID, 用来区分同一类型的不同PCIe Retimer器件-->
		<PROPERTY NAME="RetimerId"  TYPE="u"> 	</PROPERTY>
	</CLASS>
	<!-- End ADD by z00382105 -->
	
	<CLASS NAME="MatchRegValue">
	    <!-- 关联的Accessor -->
		<PROPERTY NAME="RefAccessor" TYPE="ro">			</PROPERTY>
		<!-- 期望的读值 -->
		<PROPERTY NAME="ExpectValue" TYPE='u'>		</PROPERTY>
		<!-- 与期望读值比较的结果，1与期望一致；0与期望不一致 -->
		<PROPERTY NAME="IsTrue" TYPE='y'>	</PROPERTY>
    </CLASS>
	
		<!--kvm类-->
	<CLASS NAME="Kvm" ID="91">
		<!--kvm的端口属性-->
		<PROPERTY NAME="Port" TYPE="i" ID="1" EXPORT="17">				</PROPERTY>
		<!--kvm的默认端口属性-->
		<PROPERTY NAME="d:Port" TYPE="i">		</PROPERTY>
		<!--kvm的已有连接的个数-->
		<PROPERTY NAME="ConnectNum"  TYPE="i">		</PROPERTY>	
		<!--kvm的使能状态：-->
		<!--ITEM:1：使能-->
		<!--ITEM:0：禁止-->
		<PROPERTY NAME="State"  TYPE="y" ID="2" EXPORT="17">		</PROPERTY>	
		<!--自动截屏开关状态：-->
		<!--ITEM:1：开启-->
		<!--ITEM:0：关闭-->
		<PROPERTY NAME="ScreenSwitch"  TYPE="y" ID="3" EXPORT="17">		</PROPERTY>	
		<!--kvm的加密状态：-->
		<PROPERTY NAME="EncryptState"  TYPE="i" ID="4" EXPORT="17">	</PROPERTY>	
		<!--kvm的键盘鼠标模式属性-->
		<PROPERTY NAME="KeyboardMode" TYPE="i" ID="7" EXPORT="17">		</PROPERTY>
		<!--kvm的超时时间-->
		<PROPERTY NAME="KvmTimeout" TYPE="i" ID="5" EXPORT="17">		</PROPERTY>
		<!--本地KVM开关-->
		<PROPERTY NAME="LocalKVMState" TYPE="y" ID="6" EXPORT="17">	</PROPERTY>
		<!--web界面是否显示JavaKvm入口-->
		<PROPERTY NAME="VisibleJavaKvm" TYPE="y">	</PROPERTY>
		<!--锁屏使能 0表示关闭 1表示关闭 -->
		<PROPERTY NAME="AutoOSLockState" TYPE="y" ID="8" EXPORT="17"> </PROPERTY>
		<!--锁屏方式 0表示Windows 1表示自定义快捷键 -->
		<PROPERTY NAME="AutoOSLockType" TYPE="y" ID="9" EXPORT="17"> </PROPERTY>
		<!--锁屏自定义按键-->
		<PROPERTY NAME="AutoOSLockKey" TYPE="as" ID="10" EXPORT="17"> </PROPERTY>

		<!--手动的截屏方法-->
		<METHOD NAME="SaveScreen">
			<!--手动截屏的类型：-->
			<!--ITEM:1：唤醒截屏-->
			<!--ITEM:0：普通截屏-->
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
        </METHOD>	
        <!--获取截屏创建时间-->
		<METHOD NAME="GetScreenshotCreateTime">
			<PARAMETER TYPE="*" NAME="*" DIR="out"/>
		</METHOD>
		<!--设置kvm端口的方法-->
		<METHOD NAME="SetPort" ID="1">
			<!--设置端口的值-->
			<PARAMETER TYPE="i" NAME="Port" DIR="in"/>
        </METHOD>	
		<!--设置kvm使能状态的方法-->
		<METHOD NAME="SetState" ID="2">
		<!--kvm的使能状态：-->
		<!--ITEM:1：使能-->
		<!--ITEM:0：禁止-->
		<PARAMETER TYPE="y" NAME="State" DIR="in"/>
        </METHOD>
		<!--删除kvm连接的方法-->
		<METHOD NAME="DelectLink">
			<!--kvm连接的id-->
			<PARAMETER TYPE="i" NAME="Id" DIR="in"/>
			<PARAMETER TYPE="y" NAME="StateCode" DIR="in"/>
        </METHOD>	
		<!--删除截屏数据的方法-->
		<METHOD NAME="RmScreen">
		<!--图片的类型 0：所有截屏图片　１：手动截屏图片 2：自动截屏图片-->
			<PARAMETER TYPE="y" NAME="ScreenType" DIR="in"/>
        </METHOD>	
		<!--设置kvm key值的方法-->
		<METHOD NAME="SetCodeKey">
			<PARAMETER TYPE="i" NAME="Key" DIR="in"/>
			<!--打开模式-->
			<!--ITEM:1：独占模式-->
			<!--ITEM:0：共享模式-->
			<PARAMETER TYPE="i" NAME="Mode" DIR="in"/>
			<!--用户名-->
			<PARAMETER TYPE="s" NAME="Name" DIR="in"/>
			<!--用户加密字符串-->
			<PARAMETER TYPE="s" NAME="EncryKey" DIR="in"/>
			<!--权限bit位-->
                        <PARAMETER TYPE="i" NAME="Privilege" DIR="in"/>
			<!--扩展key-->
			<PARAMETER TYPE="s" NAME="KeyExt" DIR="in"/>

        </METHOD>
		
		
		<!--获取kvmlinkey值的方法-->
		<METHOD NAME="GetLinkKey">
			<PARAMETER TYPE="i" NAME="LinkKey" DIR="out"/>
			<PARAMETER TYPE="s" NAME="KeyAndSalt" DIR="out"/>
			<PARAMETER TYPE="s" NAME="LinkKeyExt" DIR="out"/>
        </METHOD>	
		
		<!--设置截屏开关方法-->
		<METHOD NAME="SetScreenSwitch" ID="3">
			<!-- 增加是否持久化的可选参数，将第一个参数的类型改为*, 避免PME接口参数检查报错 -->		
			<PARAMETER TYPE="*" NAME="SwitchState" DIR="in"/>
			<PARAMETER TYPE="y" NAME="SaveFlag" DIR="in"/>			
        </METHOD>	
		
		<!--设置是否加密的方法-->
		<METHOD NAME="SetEncryptState" ID="4">
			<PARAMETER TYPE="i" NAME="EncryptState" DIR="in"/>
        </METHOD>	
		<!--设置键盘鼠标模式方法-->
		<METHOD NAME="SetKeyboardMode" ID="7">
		<!--模式-->
			<PARAMETER TYPE="i" NAME="Mode" DIR="in"/>
        </METHOD>
		<!--设置KVM超时时间的方法-->
		<METHOD NAME="SetKvmTimeout" ID="5">
			<PARAMETER TYPE="i" NAME="TimeoutValue" DIR="in"/>
       </METHOD>
       <!--获取kvm key的方法-->
       <METHOD NAME="GetIdentifier">
		<PARAMETER TYPE="s" NAME="UserName" DIR="in"/>
		<PARAMETER TYPE="s" NAME="PassWord" DIR="in"/>
		<PARAMETER TYPE="y" NAME="LogType" DIR="in"/>
		<PARAMETER TYPE="s" NAME="IpAddress" DIR="in"/>
       		<!--打开模式-->
		<!--ITEM:1：独占模式-->
		<!--ITEM:0：共享模式-->
		<PARAMETER TYPE="i" NAME="Mode" DIR="in"/>
		<PARAMETER TYPE="*" NAME="*" DIR="out"/>
        </METHOD>
		
		<!--单点登录 获取 kvm key的方法-->
	<METHOD NAME="SS0GetIdentifier">
		<PARAMETER TYPE="s" NAME="token" DIR="in"/>
		<PARAMETER TYPE="s" NAME="ipaddr" DIR="in"/>
		<PARAMETER TYPE="y" NAME="logtype" DIR="in"/>
		<PARAMETER TYPE="*" NAME="*" DIR="out"/>
        </METHOD>
		
		<!--设置本地KVM开或关的方法-->
		<METHOD NAME="SetLocalKVMState" ID="6">
			<PARAMETER TYPE="y" NAME="LocalKVMState" DIR="in"/>
		</METHOD>
		<!--设置销毁单点登录KVM标志位开或关的方法 0 表示true 1 表示false-->
	    <METHOD NAME="SsoKVMDestroy">
			<PARAMETER TYPE="s" NAME="SsoToken" DIR="in"/>
		</METHOD>

		<!--设置系统锁屏使能的方法 0表示关闭 1表示开启 -->
		<METHOD NAME="SetAutoOSLockState" ID="8">
			<PARAMETER TYPE="y" NAME="AutoOSLockState" DIR="in"/>
		</METHOD>
		<!--设置系统锁屏方式的方法 0表示Windows 1表示自定义快捷键 -->
		<METHOD NAME="SetAutoOSLockType" ID="9">
			<PARAMETER TYPE="y" NAME="AutoOSLockType" DIR="in"/>
		</METHOD>
		<!--设置系统自定义按键的方法-->
		<METHOD NAME="SetAutoOSLockKey" ID="10">
			<PARAMETER TYPE="as" NAME="AutoOSLockKey" DIR="in"/>
		</METHOD>
		<!--校验下载vconsole jar包的方法-->
        <METHOD NAME="CheckKvmDownloadCode">
            <PARAMETER TYPE="s" NAME="AuthParam" DIR="in"/>
            <PARAMETER TYPE="s" NAME="Type" DIR="in"/>
        </METHOD>
		
	   <CLASS NAME="ProxyKvm" ID="10"> </CLASS>
	</CLASS>
	<!--vmm类-->	
	<CLASS NAME="Vmm" ID="94">
		<!--vmm的端口属性-->
		<PROPERTY NAME="Port" TYPE="i" ID="1" EXPORT="17">		</PROPERTY>
		<!--vmm的默认端口属性-->
		<PROPERTY NAME="d:Port" TYPE="i">		</PROPERTY>
		<!--vmm的已有连接的个数-->
		<PROPERTY NAME="ConnectNum"  TYPE="i">	</PROPERTY>			
        <!--vmm的加密状态-->
		<PROPERTY NAME="EncryptState"  TYPE="i" ID="3" EXPORT="17">	</PROPERTY>	
		<!--vmm的使能状态：-->
		<!--ITEM:1：使能-->
		<!--ITEM:0：禁止-->
		<PROPERTY NAME="State"  TYPE="y" ID="2" EXPORT="17">		</PROPERTY>	
		<PROPERTY NAME="VmmConnectStatus"  TYPE="y" >		</PROPERTY>	
		<PROPERTY NAME="VmmConnectUrl"  TYPE="s" >		</PROPERTY>	
		<!--软驱的使能状态：开启：1；禁用：0 -->
		<PROPERTY NAME="FloppyDriveEnabled"  TYPE="y" >		</PROPERTY>
		<!--使能软驱状态的方法-->	
		<METHOD NAME="SetFloppyDriveState">
			<PARAMETER TYPE="y" NAME="FloppyDriveEnabled" DIR="in"/>
        </METHOD>
		<!--加载ko的方法-->
		<METHOD NAME="DriverOperation">
			<!--加载ko的类型-->
			<PARAMETER TYPE="y" NAME="ko_type" DIR="in"/>
        </METHOD>	
		<!--格式化的方法-->
		<METHOD NAME="FormatDevice">
			<!--格式化的格式的类型：目前只支持vfat ext4-->
			<PARAMETER TYPE="s" NAME="FormatType" DIR="in"/>
			<!--待格式化的设备-->
			<PARAMETER TYPE="s" NAME="Device" DIR="in"/>
        </METHOD>	
		<!--设置vmm端口的方法-->
		<METHOD NAME="SetPort" ID="1">
			<!--设置端口的值-->
			<PARAMETER TYPE="i" NAME="Port" DIR="in"/>
        </METHOD>	
		<!--设置vmm使能状态的方法-->
		<METHOD NAME="SetState" ID="2">
			<!--vmm的使能状态：-->
			<!--ITEM:1：使能-->
			<!--ITEM:0：禁止-->
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetEncryptState" ID="3">
			<!--vmm的加密使能状态：-->
			<!--ITEM:1：使能-->
			<!--ITEM:0：禁止-->
			<PARAMETER TYPE="i" NAME="EncryptState" DIR="in"/>
        </METHOD>    
		<METHOD NAME="DelectLink">
        </METHOD>	
		<METHOD NAME="SetVmmConnect">
		    <PARAMETER TYPE="s" NAME="urlstring" DIR="in"/>
        </METHOD>			
		<METHOD NAME="GetVmmName">
			<PARAMETER TYPE="s" NAME="Name" DIR="out"/>
		</METHOD>
		<CLASS NAME="ProxyVmm" ID="11"> </CLASS>
	</CLASS>
	
    <CLASS NAME="USBMassStorageBase">
		<!--u盘名字, SP为 SP USB Device, iBMA为iBMA USB Device -->
		<PROPERTY NAME="UmsName"  TYPE="s">	</PROPERTY>	
		<!--u盘类型, 0: SP UMS , 1: iBMA UMS -->
		<PROPERTY NAME="UmsType"  TYPE="y">	</PROPERTY>	
		<!--u盘服务状态-->
		<PROPERTY NAME="UmsServFlg"  TYPE="y">	</PROPERTY>	
		<!--u盘位置-->
		<PROPERTY NAME="UmsLoc"  TYPE="y">	</PROPERTY>	
		<!--u盘容量单位 kByte-->
		<PROPERTY NAME="UmsCapacity"  TYPE="u">	</PROPERTY>	
		<!--u盘文件系统-->
		<PROPERTY NAME="UmsFileSystem"  TYPE="s">	</PROPERTY>	
		<!--u盘在BMC侧的读写权限, bit0(表示读): 0不可读, 1可读, bit1（表示写）：0不可写, 1可写  -->
		<PROPERTY NAME="BMCAccessMode"  TYPE="y">	</PROPERTY>	
		<!--u盘在主机侧的读写权限, bit0(表示读): 0不可读, 1可读, bit1（表示写）：0不可写, 1可写 -->
		<PROPERTY NAME="OSAccessMode"  TYPE="y">	</PROPERTY>	
		<!--u盘flash对应的设备名称  -->
		<PROPERTY NAME="FlashDev"  TYPE="s">	</PROPERTY>	
	    <!--u盘挂载点  -->
		<PROPERTY NAME="MountPoint"  TYPE="s">	</PROPERTY>	
		<!--u盘连接x86状态 -->
		<PROPERTY NAME="ConnectState"  TYPE="y">	</PROPERTY>	
		<!--创建虚拟u盘的方法-->
		<METHOD NAME="CreatUms">
			<!--u盘位置：-->
			<!--ITEM:1：远程u盘-->
			<!--ITEM:0：本地u盘-->
			<PARAMETER TYPE="y" NAME="loc" DIR="in"/>
			<!--挂载类型 0：临时挂载；1：正式挂载-->
			<PARAMETER TYPE="y" NAME="type" DIR="in"/>
		</METHOD>
		<!--关闭虚拟u盘的方法-->
		<METHOD NAME="CloseUms">
		</METHOD>
		<CLASS NAME="iBMAUSBMassStorage"> 
			<!--U盘中含有iBMA安装包的个数-->
			<PROPERTY NAME="PacketNum" TYPE='y'>   </PROPERTY>
			<!--U盘中iBMA安装包支持的操作系统类型, 成员个数与PacketNum保持一致, OsType数组的元素值与Version数组的元素值对应,表示相应的操作系统的iBMA的版本号-->
			<PROPERTY NAME="OsType"  TYPE="as">	   </PROPERTY>	
			<!--U盘中iBMA安装包的版本号, 成员个数与PacketNum保持一致, Version数组的元素值与OsType数组的元素值对应, 表示相应的操作系统的iBMA的版本号-->
			<PROPERTY NAME="Version"  TYPE="as">	</PROPERTY>		
			<!--板载iBMA功能可使用状态, 0: NAND Flash中含有iBMA分区且分区中存在iBMA安装包; 1: NAND Flash中无iBMA分区, 2: 分区中无iBMA安装包, 0xFF: 默认值-->
			<PROPERTY NAME="State"  TYPE="y">	</PROPERTY>
			<!-- 当前是否处于升级中:
				(0: 没有升级)
				(1: 升级中)
			-->
			<PROPERTY NAME="InUpgradeFlag" TYPE="y"> </PROPERTY>
			<PROPERTY NAME="UpgradeProgress"  TYPE="i">  </PROPERTY>
		    <PROPERTY NAME="UmsTransProgress"  TYPE="i"> </PROPERTY>	
		    <PROPERTY NAME="UmsTransFileName"  TYPE="s"> </PROPERTY>		
		    <!--检查对应iBMA安装包是否存在-->
			<METHOD NAME="CheckFileState">
				<!--文件ID -->
				<PARAMETER TYPE="y" NAME="path_id" DIR="in"/>
			</METHOD>
			 <!--升级iBMA安装包-->
			 <METHOD NAME="UpdateInstallablebma">
				<PARAMETER TYPE="s" NAME="ImageUri" DIR="in"/>
				<PARAMETER TYPE="s" NAME="SignatureUri" DIR="in"/>
				<PARAMETER TYPE="s" NAME="CRLUri" DIR="in"/>
			</METHOD>
		</CLASS>
		<!--此类用于SP, 类名不能更改, 因为其属性支持配置导入导出, 导入导出需要匹配类名-->
		<CLASS ID="128" NAME="USBMassStorage">
			<!--u盘功能使能-->
			<PROPERTY NAME="UmsEnable"  TYPE="y">	</PROPERTY>	
			<!--BIOS支持u盘功能标志：1表示BIOS支持；0表示BIOS不支持-->
			<PROPERTY NAME="UmsBIOSsupport"  TYPE="y">	</PROPERTY>	
			<!--u盘文件传输进度-->
			<PROPERTY NAME="UmsTransProgress"  TYPE="i">	</PROPERTY>	
			<!--u盘正在传输的文件名-->
			<PROPERTY NAME="UmsTransFileName"  TYPE="s">	</PROPERTY>	
			<!--u盘更新文件夹剩余容量 单位 byte -->
			<PROPERTY NAME="UmsFreeUpdateSpace"  TYPE="u">	</PROPERTY>	
			<!--u盘更新文件夹最大容量 单位 byte -->
			<PROPERTY NAME="UmsMaxUpdateSpace"  TYPE="u" ID ="1" EXPORT="17">	</PROPERTY>	
			<!--u盘 部件配置或升级包下发到NAND FLAHS完成标志,待重启系统进入SP进行配置或升级生效:-->
			<!-- 0表示未准备好，不需要从SP启动，1表示从SP启动， 掉电持久化； 只生效一次，重启后由SP发ipmi命令清除-->
			<PROPERTY NAME="SpConfigFileReady"  TYPE="y" ID ="2" EXPORT="17">	</PROPERTY>	
			<!--u盘进入SP方式标志 0：手动按F6进入SP，1：自动进入SP -->
			<PROPERTY NAME="SPStartmode"  TYPE="y" ID ="3" EXPORT="17">	</PROPERTY>	
			<!--u盘从SP操作(配置和升级)完后到复位主机系统之间间隔时间, 单位为秒 -->
			<PROPERTY NAME="SysRestartDelay"  TYPE="u" ID ="4" EXPORT="17">	</PROPERTY>	
			<!--SP应用程序版本-->
			<PROPERTY NAME="SPAPPversion"  TYPE="s" ID ="5">	</PROPERTY>	
			<!--自定义的SP的OS版本-->
			<PROPERTY NAME="SPOSrevision"  TYPE="s" ID ="6">	</PROPERTY>		
			<!--SP中欧拉OS的版本-->
			<PROPERTY NAME="SPOSversion"  TYPE="s">	   </PROPERTY>	
			<!--SP中主版本-->
			<PROPERTY NAME="MajorVersion"  TYPE="s">	   </PROPERTY>	
			<!--bmc中是否存在sp程序-->
			<PROPERTY NAME="SPDataExist"  TYPE="y" ID="9">	   </PROPERTY>	
			<!--SP中驱动版本-->
			<PROPERTY NAME="SPDriverVersion"  TYPE="s" ID="7">	</PROPERTY>	
			<!--SP中组件信息：所有的组件名字和各组件对应的本号-->
			<PROPERTY NAME="ComponentsMessages"  TYPE="s">	</PROPERTY>	
			<!--从SP启动过的标志，1表示从SP启动过；0表示没有从SP启动过，重启持久化-->
			<PROPERTY NAME="SPBootedFlag"  TYPE="y" ID="8">	</PROPERTY>
			<!-- 当前是否处于升级中:
				(0: 没有升级)
				(1: 升级中)
			-->
			<PROPERTY NAME="SPInUpgradeFlag"  TYPE="y">	</PROPERTY>	
			<!--SP升级进度-->
			<PROPERTY NAME="SPUpgradeProgress"  TYPE="i">	</PROPERTY>	
			<!--SP设备信息文件收集开关，0：关闭，1：开启-->
			<PROPERTY NAME="SPDeviceInfoCollectEnable"  TYPE="y" ID="10" EXPORT="17">	</PROPERTY>
			<!--SP设备信息文件收集流程状态，0：初始值，1：AC上电触发，2：AC上电流程失败后下一次DC上电触发，
				3：AC上电执行，4：AC上电流程失败后下一次DC上电执行，5：发生了升级触发的AC掉电，6：发生了模块重启 -->
			<PROPERTY NAME="SPDeviceInfoCollectState"  TYPE="y">	</PROPERTY>
			<!--SP设备信息文件解析流程状态，0：初始值，1：需要解析并产生事件，2：需要解析但不产生事件，
				3：解析成功并产生事件-->
			<PROPERTY NAME="SPDeviceInfoParseState"  TYPE="y">	</PROPERTY>
			<METHOD NAME="SetSPDeviceInfoCollectEnable" ID="10">
				<PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
			</METHOD>
			<METHOD NAME="SetSPDeviceInfoCollectState">
				<PARAMETER TYPE="y" NAME="State" DIR="in"/>
			</METHOD>
		    <!--删除u盘内文件夹的方法-->
			<METHOD NAME="DelUmsFiles">
				<!--文件ID -->
				<PARAMETER TYPE="y" NAME="path_id" DIR="in"/>
			</METHOD>
			<!--文件读u盘内文件的方法-->
			<METHOD NAME="ReadUmsFile">
				<!--路径ID -->
				<PARAMETER TYPE="y" NAME="path_id" DIR="in"/>
				<!--文件名 -->
				<PARAMETER TYPE="s" NAME="filename" DIR="in"/>
						<!--读到的缓存-->
				<PARAMETER TYPE="ay" NAME="rdBuffer" DIR="out"/>
			</METHOD>
			<!--文件写u盘内文件的方法-->
			<METHOD NAME="WriteUmsFile">
				<!--路径ID -->
				<PARAMETER TYPE="y" NAME="path_id" DIR="in"/>
				<!--文件名 -->
				<PARAMETER TYPE="s" NAME="filename" DIR="in"/>
						<!--写缓存-->
				<PARAMETER TYPE="ay" NAME="wdBuffer" DIR="in"/>
			</METHOD>
			<!-- 获取某路径内的文件名列表, 不包括路径 -->
			<METHOD NAME="GetUmsFileList">
				<!--路径ID -->
				<PARAMETER TYPE="y" NAME="path_id" DIR="in"/>
				<!--文件名列表，以空格分隔 -->
				<PARAMETER TYPE="s" NAME="file_list" DIR="out"/>
			</METHOD>
			<!--删除U盘内文件的方法-->
			<METHOD NAME="DelUmsFile">
				<!--路径ID -->
				<PARAMETER TYPE="y" NAME="path_id" DIR="in"/>
				<!--文件名 -->
				<PARAMETER TYPE="s" NAME="filename" DIR="in"/>
			</METHOD>				
			<!-- 启动SP/固件升级 -->
			<METHOD NAME="UpdateFwSP">
				<!--升级包uri(样例 protocol://<user:psw@>ip:port/path/filename) 其中protocol传输协议选择 https/sftp/cifs/nfs/scp-->
				<PARAMETER TYPE="s" NAME="ImageURI" DIR="in"/>
				<!--升级包认证文件uri(样例 protocol://<user:psw@>ip:port/path/filename)-->
				<PARAMETER TYPE="s" NAME="ImageCerURI" DIR="in"/>
				<!--升级包类型 Firmware/SP-->
				<PARAMETER TYPE="s" NAME="ImageType" DIR="in"/>
				<!--Parameter ，全升或升指定设备，保留,默认为all-->
				<PARAMETER TYPE="s" NAME="Parameter" DIR="in"/>
				<!--升级模式，Full/Recover/APP/Driver/Auto-->
				<PARAMETER TYPE="s" NAME="UpdateMode" DIR="in"/>
				<!--"ActiveMethod": "OSRestart" 升级生效方式-->
				<PARAMETER TYPE="s" NAME="ActiveMethod" DIR="in"/>
			</METHOD>
            <!-- 清理无效的Firmware -->
			<METHOD NAME="ClearFirmware">
                <!--板卡固件文件-->
				<PARAMETER TYPE="as" NAME="FilePath" DIR="in"/>
			</METHOD>
            <!-- 获取SP分区文件长度 -->
			<METHOD NAME="GetFileLength">
                <!--板卡固件文件-->
				<PARAMETER TYPE="s" NAME="FileName" DIR="in"/>
                <PARAMETER TYPE="u" NAME="FileLength" DIR="out"/>
			</METHOD>
            <!-- 检查固件上传路径zip文件是否超限 -->
			<METHOD NAME="CheckFirmwarePath">
                <PARAMETER TYPE="u" NAME="UploadLength" DIR="in"/>
			</METHOD>
            <!-- 修改SP固件文件名 -->
			<METHOD NAME="RenameLocalFwSP">
				<!--本地固件临时路径-->
				<PARAMETER TYPE="s" NAME="TmpPath" DIR="in"/>
				<!--本地固件最终路径-->
				<PARAMETER TYPE="s" NAME="FinalPath" DIR="in"/>
			</METHOD>
            <!-- 上传SP板卡固件 -->
			<METHOD NAME="UpdateLocalFwSP">
				<!--板卡固件文件-->
				<PARAMETER TYPE="s" NAME="ImagePath" DIR="in"/>
				<!--板卡固件签名文件-->
				<PARAMETER TYPE="s" NAME="AscPath" DIR="in"/>
			</METHOD>
            <!-- 删除SP板卡固件 -->
			<METHOD NAME="DeleteLocalFwSP">
			</METHOD>
            <!-- 获取SP板卡固件升级目录下固件名 -->
			<METHOD NAME="GetLocalFwSP">
				<!--板卡固件文件列表-->
				<PARAMETER TYPE="s" NAME="FileList" DIR="out"/>
			</METHOD>
			<!-- 设置u盘更新文件夹最大容量 单位 byte -->
			<METHOD NAME="SetUmsMaxUpdateSpace" ID="1">
				<!--u盘更新文件夹最大容量 单位 byte-->
				<PARAMETER TYPE="u" NAME="max_space" DIR="in"/>
			</METHOD>
			<!-- 设置 SP 配置准备好表示 -->
			<METHOD NAME="SetSpCfgReady" ID="2">
				<!--准备好标志， 1表示准备好，0表示未准备好-->
				<PARAMETER TYPE="y" NAME="ready_flg" DIR="in"/>
			</METHOD>	
			<!-- 设置u盘进入SP方式标志 0：NA，1：自动进入SP，2：手动按F7进入SP -->
			<METHOD NAME="SetSpStartFlag" ID="3">
				<!--u盘进入SP方式标志-->
				<PARAMETER TYPE="y" NAME="start_flg" DIR="in"/>
			</METHOD>
			<!-- 设置从SP操作(配置和升级)完后到复位主机系统之间间隔时间 -->
			<METHOD NAME="SetSysRestartDelay" ID="4">
				<!--复位间隔时间：单位 秒 -->
				<PARAMETER TYPE="u" NAME="delay_time" DIR="in"/>
			</METHOD>
			<!-- 设置SP升级百分比 -->
			<METHOD NAME="SetSPUpgradeProgress">
				<!--升级百分比0-100 -->
				<PARAMETER TYPE="i" NAME="percent" DIR="in"/>
			</METHOD>
			<!-- 设置BIOS支持SP标志 -->
			<METHOD NAME="SetBiosSupportSP">
				<!--1表示BIOS支持；0表示BIOS不支持 -->
				<PARAMETER TYPE="y" NAME="bios_support_flg" DIR="in"/>
			</METHOD>				
		</CLASS>
    </CLASS>
    
	<!--KvmLink类-->
	<CLASS NAME="KvmLink">
		<!--kvm的打开模式-->
		<!--ITEM:1：独占模式-->
		<!--ITEM:0：共享模式-->
		<PROPERTY NAME="link_mode" TYPE="i">		</PROPERTY>
		<!--kvm的算法类型-->
		<!--ITEM:1：老算法-->
		<!--ITEM:0：新算法-->
		<PROPERTY NAME="link_type" TYPE="i">	</PROPERTY>	
		<!--kvm链接的id-->
		<PROPERTY NAME="link_id" TYPE="i">	</PROPERTY>	
		<!--kvm的IP-->
		<PROPERTY NAME="link_ip" TYPE="s">	</PROPERTY>	
		<!--kvm的登录用户名-->
		<PROPERTY NAME="link_user_name" TYPE="s">	</PROPERTY>	
		<!--kvm的登录时间-->
		<PROPERTY NAME="link_login_time" TYPE="u">	</PROPERTY>	
		<CLASS NAME="SolLink"> </CLASS>	
	</CLASS>	
	<CLASS NAME="VncLink">
		<!--vnc的打开模式-->
		<!--ITEM:1：共享模式-->
		<!--ITEM:0：独占模式-->
		<PROPERTY NAME="link_mode" TYPE="i">		</PROPERTY>
		<!--vnc链接的id-->
		<PROPERTY NAME="link_id" TYPE="i">	</PROPERTY>	
		<!--vnc的IP-->
		<PROPERTY NAME="link_ip" TYPE="s">	</PROPERTY>	
		<!--vnc的用户名-->
		<PROPERTY NAME="link_user_name" TYPE="s">  </PROPERTY>
		<!--vnc的登录时间-->
		<PROPERTY NAME="link_login_time" TYPE="u">	</PROPERTY>	
	</CLASS>
	<CLASS NAME="Video" ID="93">
		<!--video的端口属性-->
		<PROPERTY NAME="Port" TYPE="i" ID="1" EXPORT="17">		</PROPERTY>
		<!--video的默认端口属性-->
		<PROPERTY NAME="d:Port" TYPE="i">		</PROPERTY>
		<!--video的已有连接的个数-->
		<PROPERTY NAME="ConnectNum"  TYPE="i">	</PROPERTY>	
		<!--video的使能状态：-->
		<!--ITEM:1：使能-->
		<!--ITEM:0：禁止-->
		<PROPERTY NAME="State"  TYPE="y" ID="2" EXPORT="17">		</PROPERTY>	
		<!--自动记录录像开关状态：-->
		<!--ITEM:1：开启-->
		<!--ITEM:0：关闭-->
		<PROPERTY NAME="VideoSwitch"  TYPE="y" ID="3" EXPORT="17">		</PROPERTY>	
		<!--设置video端口的方法-->
		<METHOD NAME="SetPort" ID="1">
			<!--设置端口的值-->
			<PARAMETER TYPE="i" NAME="Port" DIR="in"/>
        </METHOD>	
		<!--设置video使能状态的方法-->
		<METHOD NAME="SetState" ID="2">
			<!--video的使能状态：-->
			<!--ITEM:1：使能-->
			<!--ITEM:0：禁止-->
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
        </METHOD>	
		<!--获取video key的方法-->
		<METHOD NAME="GetVideoKey">
			<PARAMETER TYPE="s" NAME="VideoKey" DIR="out"/>
						<!--盐值-->
			<PARAMETER TYPE="s" NAME="Salt" DIR="out"/>
        </METHOD>	
        <!--获取录像信息-->
		<METHOD NAME="GetVideoInfo">
			<PARAMETER TYPE="*" NAME="*" DIR="out"/>
		</METHOD>
		<!--设置video name的方法-->
		<METHOD NAME="SetVideoName">
						<!--用户名-->
			<PARAMETER TYPE="s" NAME="Name" DIR="in"/>
						<!--ip-->
			<PARAMETER TYPE="s" NAME="Ip" DIR="in"/>
        </METHOD>	
		
		<!--设置自动录像开关方法-->
		<METHOD NAME="SetRecordVideoSwitch" ID="3">
		<!-- 增加是否持久化的可选参数，将第一个参数的类型改为*, 避免PME接口参数检查报错 -->
			<PARAMETER TYPE="*" NAME="SwitchState" DIR="in"/>
			<PARAMETER TYPE="y" NAME="SaveFlag" DIR="in"/>			
        </METHOD>	
		<METHOD NAME="DelectLink">
        </METHOD>
		<!--清除flash中的录像文件-->
		<METHOD NAME="RmVideo">
			<!--录像文件类型，0：所有flash中保存录像文件-->
			<PARAMETER TYPE="y" NAME="VideoType" DIR="in"/>
        </METHOD>
		<METHOD NAME="GetVideoName">
			<PARAMETER TYPE="s" NAME="Name" DIR="out"/>
		</METHOD>
		<CLASS NAME="ProxyVideo" ID="12"> </CLASS>
	</CLASS>
	
	<!--  通用部件信息类 added by gongxiongtao -->
	<CLASS NAME="ComponentInfo" >
	    <!-- 类型,CPU：0 -->
	    <PROPERTY NAME="type" TYPE="y">             </PROPERTY>
	    <!-- 部件的部件号-->
        <PROPERTY NAME="PartNum" TYPE="s">            </PROPERTY>
	    <!-- 关键字1，CPU示例：Xeon-->
	    <PROPERTY NAME="Keyword1" TYPE="s">      </PROPERTY>
        <!-- 关键字2，CPU示例：E5-1620 -->
	    <PROPERTY NAME="Keyword2" TYPE="s">  </PROPERTY>
        <!-- 关键字3，CPU示例：v3-->
	    <PROPERTY NAME="Keyword3" TYPE="y">            </PROPERTY>
	</CLASS>
	<!--CPU&MEM相关类，Begin added by liulinglong-->
    <CLASS NAME="Cpu" ID="25">  	
		<PROPERTY NAME="Id" TYPE="y" ID="1" KEY="1">						</PROPERTY>		
		<PROPERTY NAME="Name" TYPE="s" ID="2">						</PROPERTY>
		<PROPERTY NAME="CpuHealth" TYPE="y" ID="8">				</PROPERTY>
		<PROPERTY NAME="CpuEntity" TYPE="ro">				</PROPERTY>
		<PROPERTY NAME="Presence" TYPE="y" ID="3">					</PROPERTY>
		<!--  当前Cpu是否上电，支持CPU热插拔的单板存在业务侧上电而部分CPU不上电的情况 -->
		<PROPERTY NAME="PowerOn" TYPE='y'>					</PROPERTY>
		<!--  当前Cpu对象的相关信息是否能通过本地ME直接获取到，0表示可以直接获取 -->
		<PROPERTY NAME="Locality" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="SocketDesignation" TYPE='s'>		</PROPERTY>
		<PROPERTY NAME="Manufacturer" TYPE="s" ID="5">		</PROPERTY>
		<PROPERTY NAME="Family" TYPE='s'>					</PROPERTY>
		<PROPERTY NAME="Version" TYPE='s' ID="6">			</PROPERTY>
		<PROPERTY NAME="Model" TYPE="s">					</PROPERTY>
		<PROPERTY NAME="SN" TYPE='s'>						</PROPERTY>
		<PROPERTY NAME="AssetTag" TYPE='s'>					</PROPERTY>
		<PROPERTY NAME="ExternalClock" TYPE='s'>			</PROPERTY>
		<PROPERTY NAME="CurrentSpeed" TYPE='s' ID="7">		</PROPERTY>
		<PROPERTY NAME="MaxSpeed" TYPE="s">					</PROPERTY>
		<PROPERTY NAME="CoreCount" TYPE="q" ID="9">			</PROPERTY>
		<PROPERTY NAME="ThreadCount" TYPE="q" ID="10">		</PROPERTY>
		<PROPERTY NAME="MemoryTec" TYPE="s" ID="11">		</PROPERTY>
		<PROPERTY NAME="L1Cache" TYPE="u" ID="12">			</PROPERTY>
		<PROPERTY NAME="L2Cache" TYPE="u" ID="13">			</PROPERTY>
		<PROPERTY NAME="L3Cache" TYPE="u" ID="14">			</PROPERTY>
		<PROPERTY NAME="ProcessorID" TYPE="s" ID="15">		</PROPERTY>
		<PROPERTY NAME="Architecture" TYPE="s" >		</PROPERTY>
		<PROPERTY NAME="InstructionSet" TYPE="s" >		</PROPERTY>
		<PROPERTY NAME="PowerGood" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="ProcHot" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="ProcHotConvert" TYPE='q'>			</PROPERTY>
		<PROPERTY NAME="ThermTrip" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="ClearThermTrip" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="MemhotC01" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="MemhotC23" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="CatErr" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="ClearCatErr" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="McErr" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="IErr" TYPE='y'>						</PROPERTY>
		<!-- totem 错误标志，从bit0到bit31依次代表totem0~totem31 -->
		<PROPERTY NAME="TotemErrorFlag" TYPE='u'>			</PROPERTY>
		<PROPERTY NAME="HDCatMcErr" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="HDCatIErr" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="HDMsmiMcErr" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="HDMsmiIErr" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="HWError2" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="Error2" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="Error1" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="Error0" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="VrHot" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="VrHotVddqAb" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="VrHotVddqCd" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="CoreTemp" TYPE='q'>					</PROPERTY>
		<PROPERTY NAME="DTS" TYPE='q'>						</PROPERTY>
		<PROPERTY NAME="NegativeDTS" TYPE='q'>				</PROPERTY>
		<!-- 移动到MeInfo -->
		<!-- <PROPERTY NAME="TControlTemp" TYPE='q'>				</PROPERTY> -->
		<!-- ARM产品通过引用方式估算功耗，未配置引用的该字段无效；机架则通过ME获取 -->
		<PROPERTY NAME="CpuPower" TYPE='d'>					</PROPERTY>
		<PROPERTY NAME="MaxMemTemp" TYPE='q'>				</PROPERTY>
		<PROPERTY NAME="MaxMemTempLocation" TYPE='s'>			</PROPERTY>
		<PROPERTY NAME="MaxAEPTemp" TYPE="q">	        	</PROPERTY>		
		<PROPERTY NAME="MaxAEPTempLocation" TYPE="s">		</PROPERTY>
		<PROPERTY NAME="MaxJCTemp" TYPE='q'>				</PROPERTY>
		<PROPERTY NAME="BISTFailure" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="FailIsolate" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="MCEErr" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="CoMCEErr" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="ConfigErr" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="QPILink" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="CoreIso" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="SocketIsoCtrl" TYPE='y'>		     	</PROPERTY>	
		<PROPERTY NAME="HomeAgentNum" TYPE='y'>		     	</PROPERTY>	
		<!-- ADDED by huangjiaqing -->
		<PROPERTY NAME="FWMismatch" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="CPUMismatch" TYPE='y'>		     	</PROPERTY>
		<PROPERTY NAME="MemHot" TYPE='q'>		     	</PROPERTY>		
		<PROPERTY NAME="MemPresence" TYPE='y'>		     	</PROPERTY>	
        <!-- 物理位置 -->
        <PROPERTY NAME="Location" TYPE="s" ID="4">					</PROPERTY>
        <!-- 功能组 -->
        <PROPERTY NAME="Function" TYPE="s">					</PROPERTY>
        <!-- 部件名称 -->
        <PROPERTY NAME="DeviceName" TYPE="s">				</PROPERTY>
		<!-- 读取CPU IMC通道下的内存温度的指令格式， 0 - standard frame， 1 - extended frame -->
		<PROPERTY NAME="FrameFormat" TYPE='y'>		        </PROPERTY>
		<!-- CPU IMC通道下的内存DIMM掩码，
		 当FrameFormat = 0时，表示2*8 bits的mask
		 当FrameFormat = 1时，表示4*8 bits的mask
		掩码格式与Intel_NodeMgr_IPMI_Interface_Spec中的命令一致（NetFn=0x2e, Cmd=0x4b） -->
		<PROPERTY NAME="IMCChanDimmMask" TYPE='u'>		</PROPERTY>
		<PROPERTY NAME="IMCChanDimmMask2" TYPE='u'>		</PROPERTY>
		<!-- 表示部件是否故障诊断定位的故障源，1表示是故障源，0表示不是 -->
		<PROPERTY NAME="FDMFault" TYPE='y'>		        </PROPERTY>
		<!-- SMM Alert status 0:产生，1：不产生； -->
		<PROPERTY NAME="ProcHotAlertMask"  TYPE="y">       </PROPERTY>
		<!-- 是否由CPLD主动拉低Prochot, 1:是，0：否； -->
		<PROPERTY NAME="CpldTriggerProcHot"  TYPE="y">       </PROPERTY>
		<PROPERTY NAME="ConfigErrorCode"  TYPE="q">       </PROPERTY>
		<!-- CPU使用率 -->
		<PROPERTY NAME="CpuUsage"  TYPE="d">       </PROPERTY>
		<PROPERTY NAME="MirrorFailChMask"  TYPE="y">       </PROPERTY> 
		<PROPERTY NAME="DisableCpuHw" TYPE="y">			</PROPERTY>
		<PROPERTY NAME="DisableCpuSw" TYPE="y" ID="16" EXPORT="18">  </PROPERTY>		
		<PROPERTY NAME="Margin" TYPE="q">  </PROPERTY>
		<PROPERTY NAME="NegativeMargin" TYPE="q">  </PROPERTY>
		<PROPERTY NAME="BusNumArray" TYPE="ay">			</PROPERTY>
		<!-- 故障的UPI端口号用掩码表示 -->
		<PROPERTY NAME="UPIErrLinkPortMask" TYPE="y">			</PROPERTY>
		<!-- 被隔离的Core id -->
		<PROPERTY NAME="IsoCoreId" TYPE="s">			</PROPERTY>
		<PROPERTY NAME="CacheWayIso" TYPE="q">			</PROPERTY>
		<!-- CPU的部件号 ADD by gongxiongtao  -->
		<PROPERTY NAME="PartNum" TYPE="s">            </PROPERTY>
		<!-- CPU PFA Event -->
		<PROPERTY NAME="PFAEvent" TYPE="y">			</PROPERTY>
		<!-- PFA Event QPILink 端口号用掩码表示 -->
		<PROPERTY NAME="QPILinkPFAEventPortMask" TYPE="y">			</PROPERTY>
		<PROPERTY NAME="PreviousSN" TYPE='s'>						</PROPERTY>
		<PROPERTY NAME="ReplaceFlag" TYPE='y'>						</PROPERTY>
		<!-- 内存更换时间，vos_get_cur_time_stamp获取到的时间戳，单位为秒，若未更换，则为0 -->
		<PROPERTY NAME="ReplaceTime" TYPE="u">						</PROPERTY>
		<!-- Cacheway隔离状态：0表示正常，bit：0表示L1，1表示L2，2表示L3 -->
		<PROPERTY NAME="CacheWayStatus" TYPE="y">						</PROPERTY>
        <!-- Cpu信息是否不可见：1表示不可见，0表示可见 -->
        <PROPERTY NAME="Invisible" TYPE="y">						</PROPERTY>
		<METHOD NAME="GetTotemErrorFlag">
			<PARAMETER TYPE="u" NAME="TotemErrorFlag" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetDisableCpu" ID="16">
		<PARAMETER TYPE="y" NAME="SetdisableValue" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetCpuBusNum">
		<PARAMETER TYPE="ay" NAME="setcpubusnumvalue" DIR="in"/>
		</METHOD>
		<METHOD NAME="CpuSyncSetProhotCtrl">
			<PARAMETER TYPE="y" NAME="FailIsolate" DIR="in"/>
		</METHOD>
		<!-- 提供方法的方式为临时过渡方案，后续需要考虑优化。
		方案和决策意见见：http://10.88.33.201:8020/browse/SOFTWARECCB-89
		-->
		<METHOD NAME="CpuGetInfo">
			<PARAMETER TYPE="i" NAME="wait_response" DIR="in"/>
			<PARAMETER TYPE="u" NAME="resp_size" DIR="in"/>
			<PARAMETER TYPE="ay" NAME="header" DIR="in"/>
			<PARAMETER TYPE="ay" NAME="req_data" DIR="in"/>
			<PARAMETER TYPE="i" NAME="channel_type" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret" DIR="out"/>
			<PARAMETER TYPE="u" NAME="resp_len" DIR="out"/>
			<PARAMETER TYPE="ay" NAME="response" DIR="out"/>
		</METHOD> 
		<!-- 增加类方法, 调用cpu_mem 模块通过PECI获取PCIE的设备信息 -->
		<METHOD NAME="CpuGetPcieInfo">
			<PARAMETER TYPE="y" NAME="cpu_id" DIR="in"/>
			<PARAMETER TYPE="y" NAME="bus_num" DIR="in"/>
			<PARAMETER TYPE="y" NAME="device_num" DIR="in"/>
			<PARAMETER TYPE="y" NAME="function_num" DIR="in"/>
			<PARAMETER TYPE="y" NAME="regoffset" DIR="in"/>
			<PARAMETER TYPE="y" NAME="is_local" DIR="in"/>
			<PARAMETER TYPE="y" NAME="read_len" DIR="in"/>
			<PARAMETER TYPE="q" NAME="vender_id" DIR="out"/>
			<PARAMETER TYPE="q" NAME="device_id" DIR="out"/>
		</METHOD> 
		<METHOD NAME="SetFDMFault">
			<PARAMETER TYPE="y" NAME="FDMFault" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetQPILink">
		    <PARAMETER TYPE="y" NAME="UPIErrLinkPort" DIR="in"/>
			<PARAMETER TYPE="y" NAME="QPILinkState" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetCpuUsage">
			<PARAMETER TYPE="d" NAME="Usage" DIR="in"/>
		</METHOD>
		<!--  设置CPU PFAEvent -->
		<METHOD NAME="SetPFAEvent">
			<PARAMETER TYPE="y" NAME="PFAEvent" DIR="in"/>
		</METHOD>
		<!--  设置QPILink PFAEvent -->
		<METHOD NAME="SetQPILinkPFAEvent">
			<PARAMETER TYPE="y" NAME="QPILinkPort" DIR="in"/>
			<PARAMETER TYPE="y" NAME="PFAEvent" DIR="in"/>
		</METHOD>
		<CLASS NAME="AgentCpu"> </CLASS>
		<METHOD NAME="ClearUsgeRecord">
			<!--清除历史使用率 0：表示CPU；1表示MEM -->
			<PARAMETER TYPE="y" NAME="Type" DIR="in"/>
		</METHOD>
		<METHOD NAME="RollbackUsgeRecord"></METHOD>
		<METHOD NAME="SetDimmTemp">
			<PARAMETER TYPE="q" NAME="inputData" DIR="in"/>
		</METHOD>
	</CLASS>
    
    <CLASS NAME="CpuStatistic"> 
		<PROPERTY NAME="UsageCur" TYPE='q'>						</PROPERTY>
		<PROPERTY NAME="UsageMax" TYPE='q'>						</PROPERTY>
		<PROPERTY NAME="UsageMin" TYPE='q'>						</PROPERTY>
		<PROPERTY NAME="UsageAver" TYPE='q'>					</PROPERTY>
    </CLASS>
	
	<CLASS NAME="SilkTemplate"> 
		<PROPERTY NAME="CpuSilkTemplate" TYPE="s">						</PROPERTY>
        <PROPERTY NAME="MemSilkTemplate" TYPE="s">						</PROPERTY>
    </CLASS>
    
    <!-- CPU内存通道对象 -->
    <CLASS NAME="MemoryChannel">  
    		<!-- CpuId -->	
		<PROPERTY NAME="CpuId" TYPE='y'>				</PROPERTY>
		<!-- ChannelId -->					
		<PROPERTY NAME="ChannelId" TYPE="y">				</PROPERTY>
		<PROPERTY NAME="Name" TYPE='s'>		        </PROPERTY>
		<!-- 表示部件是否故障诊断定位的故障源，1表示是故障源，0表示不是 -->
		<PROPERTY NAME="FDMFault" TYPE='y'>		        </PROPERTY>
		<PROPERTY NAME="ConfigErrorCode" TYPE="q">				</PROPERTY>
		<METHOD NAME="SetFDMFault">
			<PARAMETER TYPE="y" NAME="FDMFault" DIR="in"/>
		</METHOD>
		<CLASS NAME="VmseChannel"> </CLASS>
		<CLASS NAME="AgentMemoryChannel"> </CLASS>
		<CLASS NAME="AgentVmseChannel"> </CLASS>
    </CLASS>

    <CLASS ID="32" NAME="Memory">  	
		<PROPERTY NAME="DimmNum" TYPE='y' ID="15">					</PROPERTY>
		<PROPERTY NAME="MemHealth" TYPE="y" ID="6" >				</PROPERTY>
		<PROPERTY NAME="MemEntity" TYPE="ro">				</PROPERTY>
		<PROPERTY NAME="Name" TYPE='s'>						</PROPERTY>
		<PROPERTY NAME="DimmName" TYPE="s" ID="7" >					</PROPERTY>
		<PROPERTY NAME="CpuId" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="NodeId" TYPE='y' ID="1" >					</PROPERTY>
		<PROPERTY NAME="ChannelId" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="DimmId" TYPE='y'>					</PROPERTY>
		<!--  每个内存分配的RANK数目 -->
		<PROPERTY NAME="RankNum" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="Presence" TYPE="y" ID="2" >					</PROPERTY>
		<!--  当前Memory对象的相关信息是否能通过本地ME直接获取到，0表示可以直接获取 -->
		<PROPERTY NAME="Locality" TYPE='y'>					</PROPERTY>
		<PROPERTY NAME="DimmTemp" TYPE='i'>					</PROPERTY>
		<PROPERTY NAME="DimmEccCnt" TYPE='u'>				</PROPERTY>
		<PROPERTY NAME="DimmEccAlert" TYPE='y'>				</PROPERTY>
		<PROPERTY NAME="Manufacturer" TYPE="s" ID="3">				</PROPERTY>
		<PROPERTY NAME="DimmCfgErrAlert" TYPE="y">			</PROPERTY>
		<PROPERTY NAME="DimmCfgErrCode" TYPE='q'>		        </PROPERTY>
		<PROPERTY NAME="Capacity" TYPE="s" ID="4" >					</PROPERTY>
		<PROPERTY NAME="ClockSpeed" TYPE="s" ID="5">				</PROPERTY>
		<PROPERTY NAME="DimmECCErrloglmt" TYPE="y">			</PROPERTY>
		<PROPERTY NAME="DimmUCEccAlert" TYPE="y">			</PROPERTY>
		<PROPERTY NAME="DimmSpare" TYPE="y">		    	</PROPERTY>
		<PROPERTY NAME="FaultLedValue" TYPE="y">		    </PROPERTY>
		<PROPERTY NAME="Location" TYPE="s" ID="14">					</PROPERTY>
		<PROPERTY NAME="Function" TYPE="s">					</PROPERTY>
		<PROPERTY NAME="DeviceName" TYPE="s">				</PROPERTY>
		<PROPERTY NAME="Type" TYPE="s" ID="8">				</PROPERTY>	
		<PROPERTY NAME="MinimumVoltage" TYPE="q" ID="9">			</PROPERTY>	
		<PROPERTY NAME="Rank" TYPE="y" ID="10">				</PROPERTY>	
		<PROPERTY NAME="BitWidth" TYPE="q" ID="11">			</PROPERTY>	
		<PROPERTY NAME="ChipBitWidth" TYPE='s'>			</PROPERTY>
        <PROPERTY NAME="HealthScore" TYPE='y'>			</PROPERTY>
        <!-- 上一次内存隔离状态 -->
        <PROPERTY NAME="LastIsolationStatus" TYPE='y'>			</PROPERTY>
        <!-- 上一次内存产生故障时间，vos_get_cur_time_stamp获取到的时间戳，单位为秒，若未产生故障，则为0 -->
		<PROPERTY NAME="LastPredictTime" TYPE="u">			</PROPERTY>
		<PROPERTY NAME="Technology" TYPE="s" ID="12">				</PROPERTY>	
		<PROPERTY NAME="SN" TYPE="s" ID="13">				</PROPERTY>
		<PROPERTY NAME="ManufacturerID" TYPE="s">		</PROPERTY>
		<PROPERTY NAME="ManufacturingLocation" TYPE="s">				</PROPERTY>
		<PROPERTY NAME="ManufacturingDate" TYPE="s">					</PROPERTY>
		<PROPERTY NAME="DimmPFAEvent" TYPE="y">			</PROPERTY>
		<PROPERTY NAME="DimmIFMMEvent" TYPE="y">			</PROPERTY>	
		<!-- 表示部件是否故障诊断定位的故障源，1表示是故障源，0表示不是 -->
		<PROPERTY NAME="FDMFault" TYPE='y'>		        </PROPERTY>
		<!-- 内存厂商预置的部件编码 -->	
		<PROPERTY NAME="PartNum" TYPE="s">            </PROPERTY>
		<!-- 内存原厂部件编码 smbios获取的Part Number -->
		<PROPERTY NAME="OriPartNum" TYPE="s">            </PROPERTY>
		<!-- 内存的华为部件编码 -->	
		<PROPERTY NAME="BomNum" TYPE="s">            </PROPERTY>
		<!-- 内存基本模块类型 -->
		<PROPERTY NAME="BaseModuleType" TYPE="s">            </PROPERTY>
		<!-- 内存技术: 对应SMBios文档 7.18.6 Memory Device — Memory Technology- -->
		<PROPERTY NAME="Technology2" ID="16" TYPE="s">				</PROPERTY>	
		<!-- 内存技术类型 1:AEP内存 0:非AEP内存 -->
		<PROPERTY NAME="Technology2Type" TYPE='y'>		</PROPERTY>
		<!-- 表示NVDIMM 超级电容不在位，1表示不在位，0表示没有不在位 -->
		<PROPERTY NAME="NVDIMMCapacitorAbsent" TYPE='y'>		        </PROPERTY>
		<!-- 是否支持NVDIMM -->
		<PROPERTY NAME="NVDIMMSupport" TYPE='y'>		        </PROPERTY>
		<!-- NVDIMM  数据恢复 error -->
		<PROPERTY NAME="NVDIMMDataRecErrCode" TYPE='u'>		        </PROPERTY>	
		<!-- 内存的当前运行频率-->
		<PROPERTY NAME="ConfigMemClkSpeed" TYPE="s">	        	</PROPERTY>
		<!-- 内存健康状态,bit0表示有轻微告警，bit1表示有严重告警，bit2表示有致命告警，初始化值为0xF0 -->
		<PROPERTY NAME="HealthStatus" TYPE='y'>		        </PROPERTY>	
		<!-- 告警原因 -->
		<PROPERTY NAME="AlarmReason" TYPE='u'>		        </PROPERTY>	
		<!-- 剩余寿命,百分比 -->
		<PROPERTY NAME="RemainLife" ID="17" TYPE='y'>		    </PROPERTY>
		<!-- 介质温度 -->
		<PROPERTY NAME="MediaTemp" ID="18" TYPE='d'>		        </PROPERTY>
		<!-- 控制器温度 -->
		<PROPERTY NAME="ControllerTemp" ID="19" TYPE='d'>		    </PROPERTY>
		<!-- 固件版本号 -->
		<PROPERTY NAME="FWVersion" ID="20" TYPE='s'>		        </PROPERTY>
		<!-- 易失性容量 -->
		<PROPERTY NAME="VolatileCapacity" ID="21" TYPE='u'>		    </PROPERTY>
		<!-- 持久性容量 -->
		<PROPERTY NAME="PersistentCapacity" ID="22" TYPE='u'>		</PROPERTY>
		<!-- 内存隔离对齐地址 -->
		<PROPERTY NAME="IsolationAddr" TYPE='ay'>		</PROPERTY>
		<!-- 内存温度关联的i2c accessor -->
		<PROPERTY NAME="DimmTempAcc" TYPE="u"> </PROPERTY>
		<!-- 内存风暴抑制次数 -->
		<PROPERTY NAME="ErrorStormCount" TYPE="q"> </PROPERTY>
		<!-- 内存风暴抑制时间 -->
		<PROPERTY NAME="LastCERestrainTime" TYPE="u"> </PROPERTY>
		<!--  设置ErrorStormCount -->
        <METHOD NAME="SetErrorStormCount">
			<PARAMETER TYPE="q" NAME="ErrorStormCount" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetLastCERestrainTime">
			<PARAMETER TYPE="u" NAME="LastCERestrainTime" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetFDMFault">
			<PARAMETER TYPE="y" NAME="FDMFault" DIR="in"/>
		</METHOD>
		<!--  设置DimmPFAEvent -->
        	<METHOD NAME="SetDimmPFAEvent">
			<PARAMETER TYPE="y" NAME="DimmPFAEvent" DIR="in"/>
		</METHOD>
		<!--  设置DimmIFMMEvent -->
        	<METHOD NAME="SetDimmIFMMEvent">
			<PARAMETER TYPE="y" NAME="DimmIFMMEvent" DIR="in"/>
		</METHOD>
        <!--  设置HealthScore -->
        <METHOD NAME="SetHealthStatus">
			<PARAMETER TYPE="y" NAME="CpuID" DIR="in"/>
			<PARAMETER TYPE="y" NAME="ChannelID" DIR="in"/>
			<PARAMETER TYPE="y" NAME="DimmID" DIR="in"/>
			<PARAMETER TYPE="y" NAME="HealthScore" DIR="in"/>
            <PARAMETER TYPE="y" NAME="LastIsolationStatus" DIR="in"/>
            <PARAMETER TYPE="u" NAME="LastPredictTime" DIR="in"/>
		</METHOD>
		<!--  设置内存隔离对齐地址 -->
		<METHOD NAME="SetIsolationAddr" >
			<PARAMETER TYPE="ay" NAME="inputdata" DIR="in"/>
        </METHOD>
		<METHOD NAME="MemGetCpuLogicId" >
			<PARAMETER TYPE="y" NAME="LogicId" DIR="out"/>
        </METHOD>		
		<CLASS NAME="AgentMemory"/>
		<!-- 保存下电前SN值 -->
		<PROPERTY NAME="PreviousSN" TYPE="s">			</PROPERTY>
		<!-- 告警监控属性，1表示触发记录事件，0表示不触发 -->
		<PROPERTY NAME="ReplaceFlag" TYPE="y">			</PROPERTY>
		<!-- 内存更换时间，vos_get_cur_time_stamp获取到的时间戳，单位为秒，若未更换，则为0 -->
		<PROPERTY NAME="ReplaceTime" TYPE="u">			</PROPERTY>
		<!--  用于管理FPGA卡内存条信息 -->
		<CLASS NAME="FPGAMemory">
			<METHOD NAME="SetDIMMInfoFromMcu">
			<PARAMETER TYPE="s" NAME="property" DIR="in"/>	
			<PARAMETER TYPE="ay" NAME="inputData" DIR="in"/>
			</METHOD>

		</CLASS>

	</CLASS>
	<!--设备VPD信息：针对于PCIe/NVMe设备-->
    <CLASS NAME="VPD">
        <!--VPD芯片关联 -->
        <PROPERTY NAME="Chip" TYPE='ro'></PROPERTY>
        <!--协议类型 0：表示NVMe-MI协议  1：表示SSD Form Factor 255：默认无效值 -->
        <PROPERTY NAME="Type" TYPE='y'></PROPERTY>
        <!--SN信息 -->
        <PROPERTY NAME="SerialNumber" TYPE='s'></PROPERTY>
		<!--厂商 -->
        <PROPERTY NAME="Manufacturer" TYPE='s'></PROPERTY>
        <!--型号 -->
        <PROPERTY NAME="ModelNumber" TYPE='s'></PROPERTY>
        <!--厂商ID -->
        <PROPERTY NAME="VendorId" TYPE='u'></PROPERTY>
        <!-- PCIe单个通道的速率（只有nvme会使用），单位GT/S） -->    
        <PROPERTY NAME="PCIeLinkSpeed" TYPE="d"></PROPERTY>
        <!-- 硬盘接口支持的最大速率，
            PD_SPEED_UNDEFINED           = 0,    // not defined
            PD_SPEED_1P5G                = 1,    // 1.5Gb/s
            PD_SPEED_3G                  = 2,    // 3.0Gb/s
            PD_SPEED_6G                  = 3,    // 6.0Gb/s
            PD_SPEED_12G                 = 4,    // 12.0Gb/s
            PD_SPEED_2P5G                = 5,    // 2.5Gb/s
            PD_SPEED_5G                  = 6,    // 5.0Gb/s
            PD_SPEED_8G                  = 7,    // 8.0Gb/s
            PD_SPEED_10G                 = 8,    // 10.0Gb/s
            PD_SPEED_16G                 = 9,    // 16.0Gb/s
            PD_SPEED_20G                 = 10,   // 20.0Gb/s
            PD_SPEED_30G                 = 11,   // 30.0Gb/s
            PD_SPEED_32G                 = 12,   // 32.0Gb/s
            PD_SPEED_40G                 = 13,   // 40.0Gb/s
            PD_SPEED_64G                 = 14,   // 64.0Gb/s
            PD_SPEED_80G                 = 15,   // 80.0Gb/s
            PD_SPEED_96G                 = 16,   // 96.0Gb/s
            PD_SPEED_128G                = 17,   // 128.0Gb/s
            PD_SPEED_160G                = 18,   // 160.0Gb/s
            PD_SPEED_256G                = 19,   // 256.0Gb/s

            PD_SPEED_PCIE_2P5G           = 0x80,
            PD_SPEED_PCIE_5G             = 0x81,
            PD_SPEED_PCIE_8G             = 0x82,
            PD_SPEED_PCIE_16G            = 0x83,
            PD_SPEED_UNKNOWN             = 255,  // Unknown
        -->        
        <PROPERTY NAME="InterfaceSpeed" TYPE="y"></PROPERTY>
		<!-- 硬盘容量，单位GB -->
        <PROPERTY NAME="Capacity" TYPE="u">	</PROPERTY>
		<!-- 硬盘容量，单位MB -->
		<PROPERTY NAME="CapacityMB" TYPE="u"></PROPERTY>
		<!-- 0:盘； 1：卡 -->
	<PROPERTY NAME="PhysicalType" TYPE="y"></PROPERTY>
	</CLASS>
	<!-- 
	描述：硬盘配置信息类
	所属模块：硬盘管理模块(hdd)-->
    <CLASS ID="36" NAME="Hdd">
        <!--用于关联PCIE SSD I2C块设备 0:SN; 1:MN; 2:FW; 3:Speed; 4:Alarm code; 5:Event code; 不涉及默认补空占位-->
        <PROPERTY NAME="StorageLoc" TYPE='roa'>						</PROPERTY>
        <!--(Full Disk Encryption) 1=FDE drive, 0=non-FDE -->
        <PROPERTY NAME="FDECapable" TYPE='y' >						</PROPERTY>
        <!--硬盘转速 -->
        <PROPERTY NAME="RotationSpeed" TYPE='q' >					</PROPERTY>
        <!--硬盘尺寸,取值定义如下
            0: Nominal form factor not reported
            1: 5.25 inch nominal form factor
            2: 3.5 inch nominal form factor
            3: 2.5 inch nominal form factor
            4: 1.8 inch nominal form factor
            5: Less than 1.8 inch nominal form factor
            6: mSATA
            7: M.2
            8: MicroSSD
            9: CFast
            Ah-Fh Reserved
            0xff: 无效的尺寸值
        -->
        <PROPERTY NAME="FormFactor" TYPE='y' >						</PROPERTY>
        <!--序列号 -->
        <PROPERTY NAME="SerialNumber" TYPE='s' ID="5">						</PROPERTY>
		<!--BOM编码 -->
        <PROPERTY NAME="PartNum" TYPE='s' >						</PROPERTY>
        <!-- 保存下电前的SN -->
        <PROPERTY NAME="PreviousSN" TYPE='s' >						</PROPERTY>
        <!-- 硬盘替换告警监控属性 -->
        <PROPERTY NAME="ReplaceFlag" TYPE='y' >						</PROPERTY>
        <!--硬盘型号 -->
        <PROPERTY NAME="ModelNumber" TYPE='s' ID="6">						</PROPERTY>
        <!--硬盘ID号 -->
        <PROPERTY NAME="Id" TYPE='y' ID="7">						</PROPERTY>
        <!--硬盘名称 -->
        <PROPERTY NAME="Name" TYPE="s" ID="1" >						</PROPERTY>
        <!--硬盘厂商信息 -->
        <PROPERTY NAME="Manufacturer" TYPE="s" ID="8">				</PROPERTY>
        <!--硬盘健康状态 -->
        <PROPERTY NAME="HddHealth" TYPE='y' ID="4">				</PROPERTY>
        <!--硬盘实体 -->
        <PROPERTY NAME="HddEntity" TYPE="ro">				</PROPERTY>
        <!--硬盘在位情况，0：不在位；1：在位 -->
        <PROPERTY NAME="Presence" TYPE="y" ID="2" >					</PROPERTY>
		<!-- 用来区分是否为本地管理的硬盘 0：表示是本地管理的 1：不是本地管理的硬盘 -->
		<PROPERTY NAME="VirtualHdd" TYPE='y'>				</PROPERTY>
        <!--硬盘SATA在位信号，0：不在位；1：在位 -->
        <PROPERTY NAME="SATAPresence" TYPE='y'>				</PROPERTY>
        <!--硬盘PCIE在位信号，0：不在位；1：在位 -->
        <PROPERTY NAME="PciePresence" TYPE='y'>				</PROPERTY>
        <!--硬盘接口类型，SATA, SAS, PCIe等（InterfaceType枚举值对应的字符串） -->
        <PROPERTY NAME="InterfaceTypeString" TYPE="s" ID="3" >						</PROPERTY>
        <!--硬盘激活状态，0：休眠；1：激活 -->
        <PROPERTY NAME="Activation" TYPE='y'>				</PROPERTY>
        <!--硬盘故障状态，0：正常；1：故障 -->
        <PROPERTY NAME="Fault" TYPE="y">					</PROPERTY>
        <!--硬盘位置信息 -->
        <PROPERTY NAME="Location" TYPE='y'>					</PROPERTY>
        <!--NVMe硬盘高速上线端口来源，0-default，1-CPU，2-Raid卡，0xff为默认 -->
        <PROPERTY NAME="NVMeOwner" TYPE="y">	            	</PROPERTY>
		<!-- 表示当前卡的资源归属  起始值1，表示当前挂在的CPU， 其中0xff：PCieSwitch  0xfe:PCH  --> 
		<PROPERTY NAME="ResId" TYPE="y"></PROPERTY>
		<!-- 关联部件 -->
		<PROPERTY NAME="RefComponent" TYPE="ro">		      	</PROPERTY>
        <!--硬盘丢失（RAID卡无法识别），0：正常；1：故障 -->
        <PROPERTY NAME="Missing" TYPE="y">				</PROPERTY>		
        <!--硬盘错误阵列检查，0：正常；1：故障 -->
        <PROPERTY NAME="FailedArray" TYPE="y">				</PROPERTY>
        <!--硬盘设备故障检查，0：正常；1：故障 -->
        <PROPERTY NAME="DeviceFault" TYPE="y">				</PROPERTY>
        <!--硬盘预告警 0：正常 1：故障 -->
        <PROPERTY NAME="PredictiveFailure" TYPE="y">				</PROPERTY>
        <!--硬盘设备预告警检测 0：正常 1：故障 -->
        <PROPERTY NAME="DevicePredictiveFailure" TYPE="y"> 	</PROPERTY>
        <!--硬盘健康状态码，按bit位定义状态
            bit0: 1- media error
            bit1: 1- predictive fail
            bit2: 1- other error
            bit3: 1- io deterioration
            bit4: 1- drive not ready
            bit5: 1- drive functional
            bit6: 1- reset not required
            bit7: 1- port0 pcie link active
            other: reserved
        -->
        <PROPERTY NAME="HealthCode" TYPE="q">			</PROPERTY>
        <!-- 通过RAID卡管理的硬盘firmware运行状态
            PD_STATE_UNCONFIGURED_GOOD   = 0, // Unconfigured good drive
            PD_STATE_UNCONFIGURED_BAD    = 1, // Unconfigured bad drive
            PD_STATE_HOT_SPARE           = 2, // Hot spare drive
            PD_STATE_OFFLINE             = 3, // Configured - good drive (data invalid)
            PD_STATE_FAILED              = 4, // Configured - bad drive (data invalid)
            PD_STATE_REBUILD             = 5, // Configured - drive is rebuilding
            PD_STATE_ONLINE              = 6, // Configured - drive is online
            PD_STATE_COPYBACK            = 7, // drive is getting copied
            PD_STATE_SYSTEM              = 8, // drive is exposed and controlled by host
            PD_STATE_SHIELD_UNCONFIGURED = 9, // UnConfigured - shielded
            PD_STATE_SHIELD_HOT_SPARE    = 10, // Hot Spare - shielded
            PD_STATE_SHIELD_CONFIGURED   = 11, // Configured - shielded
            PD_STATE_FOREIGN             = 12, // has foreign configurations
            PD_STATE_EPD                 = 19, // enhanced physical drive
            PD_STATE_UNKNOWN             = 255, // Unknown state        
        -->
        <!-- 与南桥直连的硬盘firmware运行状态
            Active                                                              = 13,
            Stand-by                                                            = 14,
            Sleep                                                               = 15,
            DST executing in background                                         = 16,
            SMART Off-line Data Collection executing in background              = 17,
            SCT command executing in background                                 = 18,
            PD_STATE_UNKNOWN                                                    = 255, // Unknown state        
        -->
        <PROPERTY NAME="FirmwareStatus" TYPE="y">			</PROPERTY>
        <!-- 硬盘firmware版本 -->
        <PROPERTY NAME="FirmwareVersion" TYPE="s" EXPORT="17">			</PROPERTY>
        <!-- 硬盘电源状态 
            PD_POWER_STATE_ACTIVE           = 0, // Device is active (spun up)
            PD_POWER_STATE_STOP             = 1, // Device is stopped (spun down)
            PD_POWER_STATE_TRANSITIONING    = 2, // Device is transitioning between power states
            PD_POWER_STATE_UNKNOWN          = 255, // Unknown state
        -->        
        <PROPERTY NAME="PowerState" TYPE="y">			</PROPERTY>
        <!-- 硬盘媒介类型，0 - HDD , 1 - SSD , 2 - SSM , 255 - unknown -->        
        <PROPERTY NAME="MediaType" TYPE="y">			</PROPERTY>
        <!-- 硬盘接口类型，0 - Undefined, 1 - parallel SCSI, 2 - SAS, 3 - SATA, 4 - FC , 5 - SATA/SAS(SATA/SAS硬盘的默认值), 6 - PCIe(PCIe SSD的默认值), 255 - unknown -->
        <PROPERTY NAME="InterfaceType" TYPE="y">			</PROPERTY>
        <!-- 硬盘接口支持的最大速率，
            PD_SPEED_UNDEFINED           = 0,    // not defined
            PD_SPEED_1P5G                = 1,    // 1.5Gb/s
            PD_SPEED_3G                  = 2,    // 3.0Gb/s
            PD_SPEED_6G                  = 3,    // 6.0Gb/s
            PD_SPEED_12G                 = 4,    // 12.0Gb/s
            PD_SPEED_2P5G                = 5,    // 2.5Gb/s
            PD_SPEED_5G                  = 6,    // 5.0Gb/s
            PD_SPEED_8G                  = 7,    // 8.0Gb/s
            PD_SPEED_10G                 = 8,    // 10.0Gb/s
            PD_SPEED_16G                 = 9,    // 16.0Gb/s
            PD_SPEED_20G                 = 10,   // 20.0Gb/s
            PD_SPEED_30G                 = 11,   // 30.0Gb/s
            PD_SPEED_32G                 = 12,   // 32.0Gb/s
            PD_SPEED_40G                 = 13,   // 40.0Gb/s
            PD_SPEED_64G                 = 14,   // 64.0Gb/s
            PD_SPEED_80G                 = 15,   // 80.0Gb/s
            PD_SPEED_96G                 = 16,   // 96.0Gb/s
            PD_SPEED_128G                = 17,   // 128.0Gb/s
            PD_SPEED_160G                = 18,   // 160.0Gb/s
            PD_SPEED_256G                = 19,   // 256.0Gb/s

            PD_SPEED_PCIE_2P5G           = 0x80,
            PD_SPEED_PCIE_5G             = 0x81,
            PD_SPEED_PCIE_8G             = 0x82,
            PD_SPEED_PCIE_16G            = 0x83,
            PD_SPEED_UNKNOWN             = 255,  // Unknown
        -->      
        <PROPERTY NAME="InterfaceSpeed" TYPE="y">			</PROPERTY>
        <!-- 硬盘协商的链接速率 -->    
        <PROPERTY NAME="LinkSpeed" TYPE="y">			</PROPERTY>
        <!-- 硬盘容量识别错误，0 - 正常，1 - 错误 -->    
        <PROPERTY NAME="CapacityError" TYPE="y">		</PROPERTY>		
        <!-- 硬盘容量，单位GB -->        
        <PROPERTY NAME="Capacity" TYPE="u" ID="9">			</PROPERTY>
        <!-- 硬盘容量，单位MB，显示的容量值比GB更为精确 -->        
        <PROPERTY NAME="CapacityMB" TYPE="u">			</PROPERTY>
        <!-- 硬盘媒介错误统计 --> 
        <PROPERTY NAME="MediaErrorCount" TYPE="u">			</PROPERTY>
        <!-- 硬盘Predictive failure错误统计 -->         
        <PROPERTY NAME="PrefailErrorCount" TYPE="u">			</PROPERTY>
        <!-- 硬盘其它错误统计 -->          
        <PROPERTY NAME="OtherErrorCount" TYPE="u">			</PROPERTY>
        <!-- 硬盘温度 -->          
        <PROPERTY NAME="Temperature" TYPE="y">			</PROPERTY>
        <!-- 硬盘关联的policy对象 -->
        <PROPERTY NAME="RefPolicy" TYPE='ro'>          </PROPERTY>
        <!-- 硬盘的热备状态
            PD_HOT_SPARE_NONE = 0,
            PD_HOT_SPARE_GLOBAL = 1,
            PD_HOT_SPARE_DEDICATED = 2,
            PD_HOT_SPARE_AUTO_REPLACE = 3,
            PD_HOT_SPARE_UNKNOWN = 255,
        --> 
        <PROPERTY NAME="HotSpare" TYPE="y">			</PROPERTY>   
        <!--硬盘RAID重建状态，0: 没有重建或重建结; 1: 重建中; 255: 未知 -->
        <PROPERTY NAME="RebuildState" TYPE="y">			</PROPERTY>
        <!--硬盘RAID重建进度，0 - 100% -->    
        <PROPERTY NAME="RebuildProgress" TYPE="y">			</PROPERTY>
        <!--硬盘巡检状态，0: 没有巡检或巡检结束; 1: 巡检中; 255: 未知 -->
        <PROPERTY NAME="PatrolState" TYPE="y">			</PROPERTY>
        <!--硬盘SAS地址1 -->
        <PROPERTY NAME="SASAddress1" TYPE="s">			</PROPERTY>
        <!--硬盘SAS地址，双Port的硬盘才有效 -->
        <PROPERTY NAME="SASAddress2" TYPE="s">			</PROPERTY>        
        <!--硬盘剩余使用寿命(可擦写次数剩余百分比)，只对SSD有效，0 - 100% ; 255 : 无效 -->
        <PROPERTY NAME="RemnantMediaWearout" TYPE="y">			</PROPERTY>
        <!--硬盘如果受RAID卡管理，则表示此硬盘归属的RAID控制器对象名称，否则无效，默认值必须为N/A，由软件动态更新 -->
        <PROPERTY NAME="RefRAIDController" TYPE="s">			</PROPERTY>        
        <!--从RAID控制器读到的硬盘槽位号，默认值为0xFF(无效) -->
        <PROPERTY NAME="SlotNumber" TYPE="y">			</PROPERTY>        
        <!--从RAID控制器读到的硬盘EID，默认值为0xFFFF(直通) -->
        <PROPERTY NAME="EnclosureDeviceId" TYPE="q">			</PROPERTY>         
        <!-- 硬盘点灯 -->
        <PROPERTY NAME="DiskLed" TYPE="s">					</PROPERTY>
        <!-- 物理位置 -->
        <PROPERTY NAME="PhysicalLocation" TYPE="s">					</PROPERTY>
        <!-- 功能组 -->
        <PROPERTY NAME="Function" TYPE="s">					</PROPERTY>
        <!-- 部件名称 -->
        <PROPERTY NAME="DeviceName" TYPE="s">				</PROPERTY>
        <!-- 表示部件是否故障诊断定位的故障源，1表示是故障源，0表示不是 -->
        <PROPERTY NAME="FDMFault" TYPE='y'>		        </PROPERTY>
		<!-- 在本硬盘背板上的独立编号,与硬盘的丝印无关系 -->
		<PROPERTY NAME="OwnSlotId" TYPE='y'>		        </PROPERTY>
		<!-- 硬盘背板的slotid, 指明归属于哪个硬盘背板 -->
		<PROPERTY NAME="PlaneId" TYPE='y'>		        </PROPERTY>
		<!-- 从此开始,以下为SATA盘smart信息 -->
		<PROPERTY NAME="AttrRevisionNum" TYPE='u'>		        </PROPERTY>
		<PROPERTY NAME="AttrItemsNum" TYPE='y'>		        </PROPERTY>
		<PROPERTY NAME="AttrItemList" TYPE='as'>		        </PROPERTY>
		<!-- SATA smart信息截止到上边属性 -->
		<!-- 从此开始,以下为SAS盘smart信息 -->
		<PROPERTY NAME="HealthStatus" TYPE='s'>		        </PROPERTY>
		<PROPERTY NAME="DriveTemperature" TYPE='u'>		        </PROPERTY>
		<PROPERTY NAME="TripTemperature" TYPE='u'>		        </PROPERTY>
		<!-- smart信息 -->
		<PROPERTY NAME="ElementsInGrownDefectList" TYPE='u'>		        </PROPERTY>
		<!-- smart信息 -->
		<PROPERTY NAME="ElementsInPrimaryDefectList" TYPE='u'>		        </PROPERTY>
		<!-- smart信息 -->
		<PROPERTY NAME="ManufacturedInWeekOfYear" TYPE='s'>		        </PROPERTY>
		<!-- smart信息 -->
		<PROPERTY NAME="BlocksSentToInitiator" TYPE='u'>		        </PROPERTY>
		<!-- smart信息 -->
		<PROPERTY NAME="BlocksReceivedFromInitiator" TYPE='u'>		        </PROPERTY>
		<!-- smart信息 -->
		<PROPERTY NAME="HoursOfPoweredUp" TYPE='d'>		        </PROPERTY>
		<!-- smart信息 -->
		<PROPERTY NAME="MinuUntilNextInterSMARTTest" TYPE='u'>		        </PROPERTY>
		<!-- smart信息 MediaErrorCount OtherErrorCount PredFailCount沿用上边原有属性-->
		<!-- smart信息截止到下边属性 -->
		<PROPERTY NAME="LastPredFailEventSeqNum" TYPE='u'>		        </PROPERTY>
		<!-- 硬盘BDF号及Port信息,格式: 0000:00:1f.2_1-->
		<PROPERTY NAME="BDFPort" TYPE='s'>		        </PROPERTY>
		<!-- PFA Event -->
		<PROPERTY NAME="PFAEvent" TYPE='y'>  </PROPERTY>
		<!-- PCIe单个通道的速率（只有nvme会使用），单位GT/S -->
		<PROPERTY NAME="PCIeLinkSpeed" TYPE='d'>  </PROPERTY>
		<!-- NVMe供电状态， “1”是给供电移除。“0”是供电。-->
		<PROPERTY NAME="PCIePowerRemove" TYPE="y">		</PROPERTY>		
		<!-- iBMA上报的事件
			bit0为1：闪断
			bit1为1，IO性能降低
			
			其他预留
		-->
		<PROPERTY NAME="iBMAEvent" TYPE="u">		</PROPERTY>
		<!-- 闪断发生的时间戳数组 t是 guint64-->
		<PROPERTY NAME="FlashTimeStamp" TYPE="au">		</PROPERTY>
		<!-- 硬盘通过支持带外管理的MR、iMR卡检测FW故障状态，0：正常；1：故障 -->
		<PROPERTY NAME="FWStatusFault" TYPE="y">		</PROPERTY>		
		<!-- PHY误码诊断的故障状态 -->
		<PROPERTY NAME="PHYErrState" TYPE="y">			</PROPERTY>
        <!-- 硬盘是否支持带外管理 0：不支持；1：支持-->
        <PROPERTY NAME="OOBSupport" TYPE="y">		</PROPERTY>
		<!-- 与硬盘链路直连的部件的ID -->
		<PROPERTY NAME="ConnectFruId" TYPE="y">			</PROPERTY>
		<!-- 与硬盘链路直连的部件的名字 -->
		<PROPERTY NAME="ConnectFruName" TYPE="s">			</PROPERTY>
		<!--硬盘厂商ID -->
		<PROPERTY NAME="VendorId" TYPE='u' ID="10">		</PROPERTY>
		<PROPERTY NAME="PowerStatus" TYPE="y">			</PROPERTY>
		<!--硬盘块大小 -->
		<PROPERTY NAME="BlockSize" TYPE="q">           </PROPERTY>
		<!-- 硬盘故障预测结果，0~1-->
		<PROPERTY NAME="DFPPropability" TYPE="d">		</PROPERTY>
        <!-- 硬盘启动优先级，bit0表示第1优先级，bit1表示第2优先级，依次类推 -->          
		<PROPERTY NAME="BootPriority" TYPE="y">			</PROPERTY>
		<!-- 从Storage模块获取SMART信息接口 -->
		<METHOD NAME="CollectHddSMART">
			<!-- 输出SMART信息，分为多帧，每一帧的格式为：[信息Id1][信息值1]...[信息IdN][信息值N] ，
				 对于SATA盘，信息Id为SMART信息标号;对于SAS盘，信息Id规则为:1,ASC;2,ASCQ-->
			<PARAMETER TYPE="u" NAME="metric_id_list" DIR="in"/>
			<PARAMETER TYPE="*" NAME="smart_info_list" DIR="out"/>
        </METHOD>
        <METHOD NAME="SetFDMFault">
            <PARAMETER TYPE="y" NAME="FDMFault" DIR="in"/>
        </METHOD>
        <METHOD NAME="SetLocateState">
            <PARAMETER TYPE="y" NAME="Operation" DIR="in"/>
            <PARAMETER TYPE="y" NAME="Duration" DIR="in"/>			
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>			
        </METHOD>
        <METHOD NAME="SetFirmwareState">
            <PARAMETER TYPE="y" NAME="State" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
        </METHOD>	
		<METHOD NAME="SetHotspare">
            <PARAMETER TYPE="y" NAME="HotspareType" DIR="in"/>
            <PARAMETER TYPE="aq" NAME="LDsforSpare" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
        </METHOD>	
		<METHOD NAME="SetHddId">
            <PARAMETER TYPE="y" NAME="Value" DIR="in"/>		
        </METHOD>
        <METHOD NAME="SetDfpProbability">
            <PARAMETER TYPE="d" NAME="Probability" DIR="in"/>	
        </METHOD>
		<!--  设置PFAEvent -->
		<METHOD NAME="SetPFAEvent">
			<PARAMETER TYPE="y" NAME="PFAEvent" DIR="in"/>
		</METHOD>
		<METHOD NAME="CryptoErase">
		</METHOD>
		<METHOD NAME="SetAgentProperty">
			<PARAMETER TYPE="s" NAME="PropertyName" DIR="in"/>
			<PARAMETER TYPE="*" NAME="PropertyVal" DIR="in"/>
			<PARAMETER TYPE="u" NAME="SaveOption" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBootable">
		    <PARAMETER TYPE="y" NAME="BootPriority" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>
		</METHOD>
		<!-- 物理盘巡检状态设置，0 – 停止（stop），1 – 运行（run）, 默认值为0xff -->
		<METHOD NAME="SetPatrolState">
			<PARAMETER TYPE="y" NAME="PatrolState" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>
		</METHOD>
        <CLASS NAME="AgentHdd"> </CLASS>
		<CLASS NAME="PCIeDisk"> </CLASS>
	</CLASS>
	
	<!-- 
	描述：硬盘背板配置信息类
	所属模块：扣卡管理模块(pcie_card)-->
	<CLASS ID="37" NAME="HDDBackplane">
		<!--硬盘背板名称 -->
		<PROPERTY NAME="Name" TYPE="s" ID="8" >						</PROPERTY>
		<!--硬盘背板槽位号 -->
		<PROPERTY NAME="Slot" TYPE="y" ID="1" >						</PROPERTY>
		<!--硬盘背板在位情况 -->
		<PROPERTY NAME="Presence" TYPE="y" ID="2" >						</PROPERTY>
		<!-- 关联实体 -->
		<PROPERTY NAME="Entity" TYPE="ro">		</PROPERTY>
		<!--硬盘背板逻辑版本号 -->
		<PROPERTY NAME="LogicVerId" TYPE="y">						</PROPERTY>
		<!--硬盘背板逻辑版本 -->
		<PROPERTY NAME="LogicVer" TYPE="s" ID="5">						</PROPERTY>
		<!--硬盘背板逻辑器件位置号 -->
		<PROPERTY NAME="LogicUnit" TYPE='u'>				</PROPERTY>
		<!--硬盘背板Board ID号 -->
		<PROPERTY NAME="BoardId" TYPE="q" ID="6" >				</PROPERTY>
		<!--硬盘背板PCB版本号 -->
		<PROPERTY NAME="PcbId" TYPE='y'>						</PROPERTY>
		<!--硬盘背板PCB版本 -->
		<PROPERTY NAME="PcbVer" TYPE="s" ID="4" >						</PROPERTY>
        <!--硬盘背板厂商信息 -->
		<PROPERTY NAME="Manufacturer" TYPE="s" ID="3" >				</PROPERTY>
        <!--硬盘背板类型 -->
		<PROPERTY NAME="Type" TYPE="s" ID="9" >				</PROPERTY>
		<!--硬盘背板健康状态 -->
		<PROPERTY NAME="Health" TYPE="y" ID="7" >				</PROPERTY>	
		<!--硬盘背板上的起始槽位号 -->
		<PROPERTY NAME="StartSlot" TYPE="y">				</PROPERTY>	
		<!--硬盘背板上的槽位总数 -->
		<PROPERTY NAME="SlotCount" TYPE="y">				</PROPERTY>	
        <!--硬盘背板上的支持SSD的槽位号 -->
		<PROPERTY NAME="PcieSlotSilkTextArray" TYPE='ay'></PROPERTY>
        <!--硬盘背板硬盘上下电 -->
        <PROPERTY NAME="DisksPowerCtrl" TYPE='y'></PROPERTY>
		<!-- 该硬盘背板HDD硬盘的最大温度 -->
		<PROPERTY NAME="HddSasMaxTemp" TYPE='q'></PROPERTY>
		<!-- 该硬盘背板SSD硬盘的最大温度 -->
		<PROPERTY NAME="SsdSasMaxTemp" TYPE='q'></PROPERTY>
		<!-- 关联部件 -->
		<PROPERTY NAME="RefComponent" TYPE="ro">		      	</PROPERTY>
		<PROPERTY NAME="PartNum" TYPE='s'>	</PROPERTY>
		<!-- 更换后SN -->   
		<PROPERTY NAME="SerialNumber" TYPE="s" ></PROPERTY>
		<!-- 更换前SN -->   
		<PROPERTY NAME="PreviousSN" TYPE="s" ></PROPERTY> 
		<!-- 部件是否发生了更换，用于产生SEL日志 -->
		<PROPERTY NAME="ReplaceFlag" TYPE="y" >	</PROPERTY>
		<!-- 组件唯一标识 -->
		<PROPERTY NAME="ComponentUniqueID" TYPE="s" >	</PROPERTY>
        <!-- EEPROM中自描述信息的版本号 -->
        <PROPERTY NAME="HWSRVersion" TYPE="s">		</PROPERTY> 
		<!-- agent派生类,用于同步 -->
		<CLASS NAME="AgentHDDBackplane"> </CLASS>	
		<!-- 虚拟硬盘背板-->
		<CLASS NAME="VirtualHDDBackplane"> </CLASS>
		<!-- 方法：设置该硬盘背板上的硬盘最高的温度 -->
		<METHOD NAME="SetHddBPTemp">
			<PARAMETER TYPE="y" NAME="hddtemp" DIR="in"/>
			<PARAMETER TYPE="y" NAME="ssdtemp" DIR="in"/>
		</METHOD>
	</CLASS>
	
    <!-- 描述：硬盘Slot和CPU Phy控制器的映射类 -->
	<CLASS NAME="DiskAddrInfo">
        <!-- 硬盘接口的CpuID/SocketID -->
        <PROPERTY NAME="SocketId" TYPE="y">					</PROPERTY>
        <!-- 硬盘接口的控制器ID，0/1是SAS控制器，2是SATA控制器 -->
        <PROPERTY NAME="ControlId" TYPE="y">			    </PROPERTY>
        <!-- 硬盘接口的PhyID -->
        <PROPERTY NAME="PhyId" TYPE="y">					</PROPERTY>
        <!-- 硬盘接口的槽位号 -->
        <PROPERTY NAME="SlotId" TYPE="y">					</PROPERTY>
        <!-- 硬盘接口的类型，SAS或SATA -->
        <PROPERTY NAME="Type" TYPE="s">					    </PROPERTY>
        <PROPERTY NAME="RootBDF" TYPE="s">					</PROPERTY>
    </CLASS>

	<!-- SAS Expander芯片信息类 -->
	<CLASS NAME="SASExpander">
		<!-- Expander的序号 -->
		<PROPERTY NAME="ExpanderId" TYPE="y">					</PROPERTY>
		<!-- 所属RAID卡的RaidController的ComponentName -->
		<PROPERTY NAME="RefRAIDName" TYPE="s">			</PROPERTY>
		<!-- 所在部件的类型，0为硬盘背板，1为主板，2为其他载板 -->
		<PROPERTY NAME="RefFruType" TYPE="y">					</PROPERTY>
		<!-- 
			所在部件的名字，
			如果RefFruType为0，则为ComHDDBackplane的DeviceName，
			如果RefFruType为1，则为主板名，如MainBoard，
			如果RefFruType为2，则为载板名，如GP608
		-->
		<PROPERTY NAME="RefFruName" TYPE="s">					</PROPERTY>
		<!-- 
			上行phy所连接的设备类型，0为RAID卡，
			1为上一层级的SASExpander（在不同单板上的级联情况），
			2为同一层级的SASExpander（在同一块单板上的级联情况）
		-->
		<PROPERTY NAME="ConnectFruType" TYPE="y">				</PROPERTY>
		<!-- 
			上行phy所连接的部件名称，
			如果ConnectFruType为0，则为RaidController的ComponentName，
			如果ConnectFruType为1，则为上一级SASExpander的RefFruName
		-->
		<PROPERTY NAME="ConnectFruName" TYPE="s">				</PROPERTY>
		<!-- 
			上行phy所连接的部件ID，
			如果ConnectFruType为0，则为RaidController的Id，
			如果ConnectFruType为1，则为上一级SASExpander的ExpanderId
		-->
		<PROPERTY NAME="ConnectFruId" TYPE="y">					</PROPERTY>
		<!-- 上行链路PHY误码诊断的故障状态，0为正常，1为异常 -->
		<PROPERTY NAME="PHYErrState" TYPE="y">					</PROPERTY>
		<!-- 与RAID卡通信的故障状态，0为正常，1为异常 -->
		<PROPERTY NAME="CommErrState" TYPE="y">					</PROPERTY>
	</CLASS>
	
	<CLASS NAME="CXPCable">
		<PROPERTY NAME="Slot" TYPE="y">					</PROPERTY>
		<PROPERTY NAME="Name" TYPE="s">					</PROPERTY>
		<PROPERTY NAME="Presence" TYPE="y">				</PROPERTY>
		<PROPERTY NAME="NIPort" TYPE="y">				</PROPERTY>
		<PROPERTY NAME="LinkMinorErr" TYPE="y">			</PROPERTY>
		<PROPERTY NAME="LinkMajorErr" TYPE="y">			</PROPERTY>
		<PROPERTY NAME="LedColor" TYPE="y">		     	</PROPERTY>
		<PROPERTY NAME="LedState" TYPE="y">			</PROPERTY>
	</CLASS>
	
	<!--minisas线缆基本信息类-->
	<CLASS NAME="SASCable">
		<!--minisas线缆状态,表示sas线缆是否配置正确,供其他模块引用-->
		<PROPERTY NAME="MiniSasStatus" TYPE='y'>	</PROPERTY>
		<!--硬盘背板的port端口连接信息获取:CPLD寄存器,端口目标-->
		<PROPERTY NAME="DST_HBP_BoardID" TYPE='q'> 		</PROPERTY>
		<PROPERTY NAME="DST_PortA" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="DST_PortB" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="DST_PortC" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="DST_PortD" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="DST_PortE" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="DST_PortF" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="DST_PortG" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="DST_PortH" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="DST_PortI" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="DST_PortJ" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="DST_PortA_STUTS" TYPE="y"> 		</PROPERTY>
		<PROPERTY NAME="DST_PortB_STUTS" TYPE="y"> 		</PROPERTY>
		<PROPERTY NAME="DST_PortC_STUTS" TYPE="y"> 		</PROPERTY>
		<PROPERTY NAME="DST_PortD_STUTS" TYPE="y"> 		</PROPERTY>
		<PROPERTY NAME="DST_PortE_STUTS" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="DST_PortF_STUTS" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="DST_PortG_STUTS" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="DST_PortH_STUTS" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="DST_PortI_STUTS" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="DST_PortJ_STUTS" TYPE="y">		</PROPERTY>
		<CLASS NAME="AgentSASCable"> </CLASS>
		<CLASS NAME="ExtendSASCable">
			<PROPERTY NAME="DST_PortK" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="DST_PortL" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="DST_PortM" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="DST_PortN" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="DST_PortO" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="DST_PortP" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="DST_PortQ" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="DST_PortR" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="DST_PortS" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="DST_PortT" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="DST_PortU" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="DST_PortV" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="DST_PortW" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="DST_PortX" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="DST_PortY" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="DST_PortZ" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="DST_PortK_STUTS" TYPE="y">		</PROPERTY>
			<PROPERTY NAME="DST_PortL_STUTS" TYPE="y">		</PROPERTY>
			<PROPERTY NAME="DST_PortM_STUTS" TYPE="y">		</PROPERTY>
			<PROPERTY NAME="DST_PortN_STUTS" TYPE="y">		</PROPERTY>
			<PROPERTY NAME="DST_PortO_STUTS" TYPE="y">		</PROPERTY>
			<PROPERTY NAME="DST_PortP_STUTS" TYPE="y">		</PROPERTY>
			<PROPERTY NAME="DST_PortQ_STUTS" TYPE="y">		</PROPERTY>
			<PROPERTY NAME="DST_PortR_STUTS" TYPE="y">		</PROPERTY>
			<PROPERTY NAME="DST_PortS_STUTS" TYPE="y">		</PROPERTY>
			<PROPERTY NAME="DST_PortT_STUTS" TYPE="y">		</PROPERTY>
			<PROPERTY NAME="DST_PortU_STUTS" TYPE="y"> 		</PROPERTY>
			<PROPERTY NAME="DST_PortV_STUTS" TYPE="y"> 		</PROPERTY>
			<PROPERTY NAME="DST_PortW_STUTS" TYPE="y"> 		</PROPERTY>
			<PROPERTY NAME="DST_PortX_STUTS" TYPE="y"> 		</PROPERTY>
			<PROPERTY NAME="DST_PortY_STUTS" TYPE="y">		</PROPERTY>
			<PROPERTY NAME="DST_PortZ_STUTS" TYPE="y">		</PROPERTY>
			<CLASS NAME="SLIMCable"> </CLASS>
		 </CLASS>
	</CLASS>
	<!--SAS线缆的配置类,需要配置一块单板支持的所有线缆配置-->
	<CLASS NAME="SASCableConfig">
		<!--硬盘背板ID-->
		<PROPERTY NAME="HBPBoardId" TYPE='q'>		</PROPERTY>
		<!--每个端口的配置类型,0x0表示不关注,端口源-->
		<PROPERTY NAME="SRC_PortA" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="SRC_PortB" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="SRC_PortC" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="SRC_PortD" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="SRC_PortE" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="SRC_PortF" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="SRC_PortG" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="SRC_PortH" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="SRC_PortI" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="SRC_PortJ" TYPE='y'>			</PROPERTY>
		<CLASS NAME="ExtendSASCableConfig"> 
			<PROPERTY NAME="SRC_PortK" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="SRC_PortL" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="SRC_PortM" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="SRC_PortN" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="SRC_PortO" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="SRC_PortP" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="SRC_PortQ" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="SRC_PortR" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="SRC_PortS" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="SRC_PortT" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="SRC_PortU" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="SRC_PortV" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="SRC_PortW" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="SRC_PortX" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="SRC_PortY" TYPE='y'>			</PROPERTY>
			<PROPERTY NAME="SRC_PortZ" TYPE='y'>			</PROPERTY>
			<CLASS NAME="SLIMCableConfig"> </CLASS>
		</CLASS>
	</CLASS>
    
	<!-- 
	描述：Raid卡配置信息类
	所属模块：扣卡管理模块(card_manage)-->
	<CLASS ID="35" NAME="Raid"> 
		<!-- Raid卡名称 -->
		<PROPERTY NAME="ProductName" TYPE="s" ID="4" >					</PROPERTY>
		<!-- Raid卡在位信号 -->
		<PROPERTY NAME="Presence" TYPE="y" ID="2" >				</PROPERTY>
		<!-- Raid卡PCB ID号 -->
		<PROPERTY NAME="PcbId" TYPE="y">				</PROPERTY>
		<!-- Raid卡PCB版本 -->
		<PROPERTY NAME="PcbVer" TYPE="s" ID="7" >				</PROPERTY>
		<!-- Raid卡Board ID号 -->
		<PROPERTY NAME="BoardId" TYPE="q" ID="8" >				</PROPERTY>
		<!-- Raid卡健康状态 -->
		<PROPERTY NAME="Health" TYPE="y" ID="9">				</PROPERTY>
		<!-- Raid卡故障信号，从CPLD中获取 -->
		<PROPERTY NAME="Fault" TYPE="y">				</PROPERTY>
		<!-- Raid卡故障状态，0：正常；1：故障 -->
		<PROPERTY NAME="Status" TYPE="y">				</PROPERTY>		
		<!-- Raid卡可支持Raid模式,RAID0/RAID1等 -->
		<PROPERTY NAME="Model" TYPE="s" ID="6" >					</PROPERTY>
		<!-- Raid卡类型 -->
		<PROPERTY NAME="Type" TYPE="s" ID="5" >					</PROPERTY>
		<!-- Raid卡厂商信息 -->
		<PROPERTY NAME="Manufacturer" TYPE="s" ID="3" >			</PROPERTY>
		<!-- Raid卡槽位号 -->
		<PROPERTY NAME="SlotId" TYPE="y" ID="1" > 				</PROPERTY>                
		<!-- 关联实体 -->
		<PROPERTY NAME="Entity" TYPE="ro">		      	</PROPERTY>
		<!-- 表示部件是否故障诊断定位的故障源，1表示是故障源，0表示不是 -->
		<PROPERTY NAME="FDMFault" TYPE='y'>		        </PROPERTY>
		<!-- Raid卡故障信号，从BIOS上报 -->
		<PROPERTY NAME="FaultByBIOS" TYPE="y">			</PROPERTY>
		<!-- 表示当前卡的资源归属  起始值1，表示当前挂在的CPU， 其中0xff：PCieSwitch  0xfe:PCH  --> 
		<PROPERTY NAME="ResId" TYPE="y"></PROPERTY>
		<!-- 关联的固件类，没有的话为空 -->
		<PROPERTY NAME="Firmware" TYPE="ro" > 		</PROPERTY>
		<!-- 卡单板名称信息 -->
		<PROPERTY NAME="BoardName" TYPE="s"></PROPERTY>
		<!-- 关联部件 -->
		<PROPERTY NAME="RefComponent" TYPE="ro">		      	</PROPERTY>
		<!-- Raid卡厂商ID -->
		<PROPERTY NAME="VenderId" TYPE="q">		</PROPERTY>
		<!-- Raid卡设备ID -->
		<PROPERTY NAME="DeviceId" TYPE="q">		</PROPERTY>
		<!-- Raid卡厂商Sub ID -->
		<PROPERTY NAME="SubVenderId" TYPE="q">		</PROPERTY>
		<!-- Raid卡设备Sub ID -->
		<PROPERTY NAME="SubDeviceId" TYPE="q">		</PROPERTY>	
		<!-- 更换后SN -->   
		<PROPERTY NAME="SerialNumber" TYPE="s" ></PROPERTY>
		<!-- 更换前SN -->   
		<PROPERTY NAME="PreviousSN" TYPE="s" ></PROPERTY> 
		<!-- 部件是否发生了更换，用于产生SEL日志 -->
		<PROPERTY NAME="ReplaceFlag" TYPE="y" >	</PROPERTY>  	
		<!-- PFA Event -->
		<PROPERTY NAME="PFAEvent" TYPE='y'>  </PROPERTY>
		<PROPERTY NAME="PartNum" TYPE='s'>	</PROPERTY>
		<METHOD NAME="SetFDMFault">
			<PARAMETER TYPE="y" NAME="FDMFault" DIR="in"/>
		</METHOD>
		<!--  设置PFAEvent -->
		<METHOD NAME="SetPFAEvent">
			<PARAMETER TYPE="y" NAME="PFAEvent" DIR="in"/>
		</METHOD>
		<CLASS NAME="AgentRaid"> </CLASS>
	</CLASS>
    
	<!-- 
	描述：RAID控制器类
	所属模块：存储设备管理模块(storage_mgnt)-->    
	<CLASS ID="78" NAME="RaidController">	
		<!-- Raid 串口通道切换cpld值-->
		<PROPERTY NAME="ComChannel" TYPE="y" >				</PROPERTY>
		<!-- RAID控制器Id, 由软件生成，默认值0xFF -->
		<PROPERTY NAME="Id" TYPE="y" ID="1" KEY="1">					</PROPERTY> 
		<!-- RAID控制器名称 -->
		<PROPERTY NAME="Name" TYPE="s" ID="2">					</PROPERTY>  
		<!-- RAID控制器类型 -->
		<PROPERTY NAME="Type" TYPE="s" ID="3" EXPORT="34">					</PROPERTY>        
		<!-- RAID控制器类型ID，标识RAID控制器芯片及Firmware类型， 
            0-63： LSI，64-95：PMC，96-191：Huawei，192-253：软RAID及其它
            0: LSI 3108 with MR
            1: LSI 3108 with IR
            2: LSI 3108 with IT
            3: LSI 3008 with MR
            4: LSI 3008 with IR
            5: LSI 3008 with IT
            6: LSI 3508 with MR
            7: LSI 3516 with MR
            8: LSI 3408 with iMR
            9: LSI 3416 with iMR
            10: LSI 3408 with IT
            11: LSI 3416 with IT
            12: LSI 3004 with iMR
            13: LSI 3908 with IT PCIE
            14: LSI 3908 with MR
            16: LSI 3808 with MR
            17: LSI 3816 with iMR
            18: LSI 3808 with iMR
            …
            64: PMC 3152-8i SmartRAID
            65: PMC 2100-8i SmartHBA
            …
            96: HI1880_SP186_M_16i
            97: HI1880_SP186_M_32i
            98: HI1880_SP186_M_40i
            99: HI1880_SP686C_M_16i_2G
            100: HI1880_SP686C_M_16i_4G
            101: HI1880_SP686C_MH_32i_4G
            102: HI1880_SP686C_M_40i_2G
            103: HI1880_SP686C_M_40i_4G
            104: HI1880_SPR120
            105: HI1880_SPR130
            106: HI1880_SPR140
            107: HI1880_SPR180
            108: HI1880_SPR185
            109: HI1880_SPR190
            110: HI1880_SPR1A0
            111: HI1880_SPR1A5
            112: HI1880_SPR110
            113: HI1880_SP186_M_8i
            …
            192：软RAID虚拟的RAID控制器
            255: invalid     
        -->        
		<PROPERTY NAME="TypeID" TYPE="y"> 	</PROPERTY>
		<!-- RAID控制器用于MCTP通信的EID，由MCTP模块查询之后更新 -->          
		<PROPERTY NAME="Eid" TYPE="y">       	</PROPERTY>
		<!-- RAID控制器用于MCTP通信的物理地址信息，由MCTP模块查询之后更新 -->          
		<PROPERTY NAME="PhyAddr" TYPE="q">       	</PROPERTY>
		<!-- RAID控制器是否支持带外管理 -->          
		<PROPERTY NAME="OOBSupport" TYPE="y">       	</PROPERTY>
		<!-- RAID控制器所属的组件名称(区分RAID扣卡和PCIE RAID卡)，一般情况下关联Component对象的DeviceName -->         
		<PROPERTY NAME="ComponentName" TYPE="s">       	</PROPERTY>        
		<!-- 访问RAID控制器的Chip对象 -->
		<PROPERTY NAME="RAIDChip" TYPE="ro">       	</PROPERTY>
		<!-- 关联RAID卡CPLD升级的Chip对象 -->
		<PROPERTY NAME="CpldUpgrdChip" TYPE="ro">       	</PROPERTY>
		<!-- 关联RAID卡CPLD芯片类型 -->
		<PROPERTY NAME="CpldChipType" TYPE="y">       	</PROPERTY>
        <!-- RAID控制器PCI segment-->
		<PROPERTY NAME="segment" TYPE="y"> </PROPERTY>
		<!-- RAID控制器PCI Bus号-->         
		<PROPERTY NAME="BusNum" TYPE="y"> 	    </PROPERTY>
		<!-- RAID控制器PCI Device号-->         
		<PROPERTY NAME="DeviceNum" TYPE="y"> 	    </PROPERTY>  
		<!-- RAID控制器PCI Function号-->         
		<PROPERTY NAME="Function" TYPE="y"> 	    </PROPERTY>
		<!-- RAID控制器通信丢失，用于传感器产生告警 ，1 - 通信丢失， 0 - 通信正常 --> 
		<PROPERTY NAME="CommunicationLoss" TYPE="y"> 	    </PROPERTY>  		
		<!-- RAID控制器固件版本（APP）-->         
		<PROPERTY NAME="FirmwareVersion" TYPE="s" ID="4"> 	    </PROPERTY>
		<!-- RAID控制器配置版本（NVDT）-->         
		<PROPERTY NAME="NVDataVersion" TYPE="s"  ID="5">        </PROPERTY> 
		<!-- RAID控制器内存大小，单位MB-->        
		<PROPERTY NAME="MemorySize" TYPE="q">           </PROPERTY>
		<!-- RAID控制器当前模式，0 - RAID, 1 - HBA, 2 - JBOD, 默认值为0xff -->          
		<PROPERTY NAME="Mode" TYPE="y" ID="12" EXPORT="33">                 </PROPERTY>
 		<!-- RAID控制器cahce pinned状态，0 - 没有cache pinned，1 - 有cache pinned, 由软件更新，默认值为0xff -->       
		<PROPERTY NAME="CachePinned" TYPE="y">          </PROPERTY>
 		<!-- RAID控制器DDR ECC计数, 由软件更新，默认值为0xffff -->         
		<PROPERTY NAME="EccCount" TYPE="q" ID="8">             </PROPERTY>
 		<!-- RAID控制器硬盘故障记忆功能状态，0 - 关闭，1 - 开启, 由软件更新，默认值为0xff -->         
		<PROPERTY NAME="MaintPDFailHistory" TYPE="y">       </PROPERTY>
 		<!-- RAID控制器Copyback功能状态，0 - 关闭，1 - 开启, 由软件更新，默认值为0xff -->         
		<PROPERTY NAME="CopybackEnabled" TYPE="y" ID="9" EXPORT="33">       </PROPERTY>
		<!-- RAID控制器在检测到物理盘SMART错误之后是否自动进行Copyback， 0 - 关闭，1 - 开启, 由软件更新，默认值为0xff -->         
		<PROPERTY NAME="SMARTerCopybackEnabled" TYPE="y" ID="10" EXPORT="33">       </PROPERTY>
		<!-- RAID控制器JBOD功能状态， 0 - 关闭，1 - 开启, 由软件更新，默认值为0xff -->         
		<PROPERTY NAME="JBODEnabled" TYPE="y" ID="11" EXPORT="33">       </PROPERTY>		
        <!-- RAID控制器一致性校验功能状态，0 - 关闭，1 - 开启, 由软件更新，默认值为0xff -->          
		<PROPERTY NAME="LDCCEnabled" TYPE="y">       </PROPERTY>	
        <!-- RAID控制器一致性校验周期，单位(小时), 取值范围[1:1440], 由软件更新，默认值为0xffff -->          
		<PROPERTY NAME="LDCCPeriod" TYPE="q">       </PROPERTY>	
        <!-- RAID控制器一致性校验速率，1 - low，2 - medium, 3 - high, 由软件更新，默认值为0xff -->          
		<PROPERTY NAME="LDCCRate" TYPE="y">       </PROPERTY>	
        <!-- RAID控制器一致性校验自修复开关，0 - 开启，1 - 关闭, 由软件更新，默认值为0xff -->          
		<PROPERTY NAME="LDCCAutoRepairEnabled" TYPE="y">       </PROPERTY>	
        <!-- RAID控制器一致性校验运行状态，0 - 暂停，1 - 运行, 由软件更新，默认值为0xff -->          
		<PROPERTY NAME="LDCCStatus" TYPE="y">       </PROPERTY>
        <!-- RAID控制器一致性校验需要校验的总数量, 由软件更新，默认值为0xffff -->          
		<PROPERTY NAME="LDCCTotalVD" TYPE="q">       </PROPERTY>
        <!-- RAID控制器一致性校验运行已经完成的数量，由软件更新，默认值为0xffff -->          
		<PROPERTY NAME="LDCCCompletedVD" TYPE="q">       </PROPERTY>
        <!-- RAID控制器一致性校验任务的等待开始时间，取值范围[0:24]，由软件更新，默认值为0xff -->          
		<PROPERTY NAME="LDCCDelay" TYPE="u">       </PROPERTY>
		<!-- RAID控制器支持的最小条带大小，参考LogicalDrive的StripSize的说明，默认值为0xff -->         
		<PROPERTY NAME="MinStripSize" TYPE="y">       </PROPERTY>
		<!-- RAID控制器支持的最大条带大小，参考LogicalDrive的StripSize的说明，默认值为0xff -->         
		<PROPERTY NAME="MaxStripSize" TYPE="y">       </PROPERTY>		
 		<!-- RAID控制器接口类型
            0: SPI      
            1: SAS_3G   
            2: SATA_1_5G
            3: SATA_3G  
            4: SAS_6G   
            5: SAS_12G
            255：unknown 
        -->         
		<PROPERTY NAME="DeviceInterface" TYPE="y">           </PROPERTY> 
		<PROPERTY NAME="DeviceInterfaceString" TYPE="s" ID="6">           </PROPERTY> 
 		<!-- RAID控制器SAS地址, 由软件更新，默认值为N/A -->         
		<PROPERTY NAME="SASAddr" TYPE="s">                  </PROPERTY>
 		<!-- RAID控制器健康状态码，按bit为解析
            bit0: 1- 内存有可纠正错误
            bit1: 1- 内存有不可纠正错误
            bit2: 1- 内存有ECC错误
            bit3: 1- nvram有UCE
            bit4: 1- Raid卡通信丢失
			bit5: 1- pg信号异常
			bit6: 1- 内部模块检测故障（导致IO停止）
			bit7: 1- 内部模块参考时钟故障
			bit8: 1- 内部电源电压故障
			bit9: 1- 内部备电模块电容故障
			bit10: 1- 内部flash模块故障
			bit11-15: reserved
        -->         
 		<PROPERTY NAME="HealthStatusCode" TYPE="q" ID="7">         </PROPERTY>
 		<!-- RAID控制器关联的BBU对象（1个）-->          
 		<PROPERTY NAME="RefObjectBBUStatus" TYPE="ro">         </PROPERTY>
 		<!-- RAID控制器关联的SASPHYStatus对象（8个/16个）-->        
 		<PROPERTY NAME="RefObjectSasPHYStatus" TYPE="roa">         </PROPERTY>
 		<!-- RAID控制器支持特性1
 		    Byte0，读策略（每个bit值，1表示支持，0表示不支持）
 		    bit0：读策略 – No Read Ahead（预设）
 		    bit1：读策略 - Read Ahead（预设）
 		    bit2-4：保留
 		    bit5-6：默认值的bit位（比如，该值为1，则表示默认值设置为：读策略 - Read Ahead）
 		    bit7：读策略 – 是否支持修改（从RAID卡获取）

 		    Byte1，写策略（每个bit值，1表示支持，0表示不支持）
 		    bit0：写策略 - Write Through（预设）
 		    bit1：写策略 - Write Back with BBU（预设）
 		    bit2：写策略 - Write Back（预设）
 		    bit3-4：保留
 		    bit5-6：默认值的bit位
 		    bit7：写策略 – 是否支持修改（从RAID卡获取）

 		    Byte2，IO策略（每个bit值，1表示支持，0表示不支持）
 		    bit0：IO策略 – Cached IO（预设）
 		    bit1：IO策略 – Direct IO（预设）
 		    bit2-4：保留
 		    bit5-6：默认值的bit位
 		    bit7：IO策略 – 是否支持修改（从RAID卡获取）

 		    Byte3，访问策略（每个bit值，1表示支持，0表示不支持）
 		    bit0：访问策略 – Read Write（预设）
 		    bit1：访问策略 – Read Only（预设）
 		    bit2：访问策略 – Blocked（预设）
 		    bit3-4：保留
 		    bit5-6：默认值的bit位
 		    bit7：访问策略 – 是否支持修改（从RAID卡获取）
 		-->        
		<PROPERTY NAME="CtrlOption1" TYPE="u">           </PROPERTY>
 		<!-- RAID控制器支持特性2
 		    Byte0，物理盘缓存策略（每个bit值，1表示支持，0表示不支持）
 		    bit0：物理盘缓存策略 – Unchanged（预设）
 		    bit1：物理盘缓存策略 – Enable（预设）
 		    bit2：物理盘缓存策略 – Disable（预设）
 		    bit3-4：保留
 		    bit5-6：默认值的bit位
 		    bit7：物理盘缓存策略 – 是否支持修改（从RAID卡获取）

            Byte1: 预留

            Byte2: 综合特性
            bit0:  是否从控制器获取温度，1表示从控制器获取温度，0表示不从控制器获取温度
            bit1:  是否支持硬盘加密擦除
            bit2:  是否支持创建、删除EPD
            bit3:  是否支持JBOD功能
            bit4-7: 保留

            Byte3: 工作模式
            bit0:  是否支持设置工作模式
            bit1:  是否支持RAID工作模式
            bit2:  是否支持JBOD工作模式
            bit3:  是否支持HBA工作模式
            bit4:  是否支持Mixed工作模式
            bit5-7: 保留
 		-->        
		<PROPERTY NAME="CtrlOption2" TYPE="u">           </PROPERTY>
        <!-- RAID控制器支持特性3
            Byte0，物理盘写缓存策略
            bit0-1:配置过的硬盘是否支持写缓存策略
            bit2-3:未配置过的硬盘是否支持写缓存策略
            bit4-5:HBA硬盘是否支持写缓存策略
            bit6-7:预留

 		    Byte1，RAID级别支持（每个bit值，1表示支持，0表示不支持）
 		    bit0:  RAID0
 		    bit1:  RAID1
 		    bit2:  RAID5
 		    bit3:  RAID6
 		    bit4:  RAID10
 		    bit5:  RAID50
 		    bit6:  RAID60
            bit7:  RAID1（ADM）
            bit8:  RAID10（ADM）
            bit9:  RAID1（Triple）
            bit10: RAID10（Triple）
 		    bit11-15: 保留

 		    Byte3：保留
 		-->        
		<PROPERTY NAME="CtrlOption3" TYPE="u">           </PROPERTY>
 		<!-- RAID控制器温度，高字节为温度获取状态，低字节为实际的温度值
 		    bit15 获取RAID控制器温度结果 1：失败 0：正常
 		    bit14 控制器信息获取是否工作中 1：未工作 0：正在工作
 		    bit13:8 保留位，设置为0
 		    bit7:0 控制器温度值，单位为摄氏度（仅当高字节为0时有效）
 		 -->         
 		<PROPERTY NAME="RaidCtrlTemp" TYPE="q">         </PROPERTY>
        <!-- 电源健康状态 -->
        <PROPERTY NAME="PowerHealthStatus" TYPE="q">       </PROPERTY>
		<!-- 驱动名称 -->          
 		<PROPERTY NAME="DriverName" TYPE="s">         </PROPERTY>
		<!-- 驱动版本 -->          
 		<PROPERTY NAME="DriverVersion" TYPE="s">         </PROPERTY>
		<!-- 厂家信息 -->          
 		<PROPERTY NAME="Manufacturer" TYPE="s">         </PROPERTY>
		<!-- BMA ID唯一索引 -->          
 		<PROPERTY NAME="BMAId" TYPE="s">         </PROPERTY>
		<!-- 硬件故障状态, 通过I2C读取RAID卡的PCA9555管脚或CPLD寄存器 -->
		<PROPERTY NAME="HardwareFault" TYPE="y">         </PROPERTY>
        <!-- 序列号 -->  
		<PROPERTY NAME="SerialNumber" TYPE="s">	</PROPERTY>
		<!--热备激活模式，0：Failure；1：Predictive；0xFF：Unknown -->
		<PROPERTY NAME="SpareActivationMode" TYPE="y">	 </PROPERTY>
		<!--无电池写缓存状态，0：禁用；1：使能-->          
		<PROPERTY NAME="NoBatteryWriteCache" TYPE="y" ID="13" EXPORT="33">   </PROPERTY>
		<!--读缓存百分比，取值范围：0~100-->          
		<PROPERTY NAME="ReadCachePercent" TYPE="y" ID="14" EXPORT="33">      </PROPERTY>
		<!--PCIe带宽-->          
		<PROPERTY NAME="PCIeLinkWidth" TYPE="y">       	 </PROPERTY>
		<!--硬件版本-->          
		<PROPERTY NAME="HardwareRevision" TYPE="s">       </PROPERTY>
		<!-- 启动盘列表 -->
		<PROPERTY NAME="BootDevices" TYPE="as">         </PROPERTY>
		<METHOD NAME="CreateCommonLD">
        	<PARAMETER TYPE="ay" NAME="PDList" DIR="in"/>
			<PARAMETER TYPE="y" NAME="RAIDLevel" DIR="in"/>
			<PARAMETER TYPE="y" NAME="Spandepth" DIR="in"/>
			<PARAMETER TYPE="s" NAME="Name" DIR="in"/>
			<PARAMETER TYPE="u" NAME="Capacity" DIR="in"/>
			<PARAMETER TYPE="y" NAME="CapacityUnit" DIR="in"/>
			<PARAMETER TYPE="y" NAME="StripSize" DIR="in"/>
			<PARAMETER TYPE="y" NAME="ReadPolicy" DIR="in"/>
			<PARAMETER TYPE="y" NAME="WritePolicy" DIR="in"/>
			<PARAMETER TYPE="y" NAME="IOPolicy" DIR="in"/>
			<PARAMETER TYPE="y" NAME="AccessPolicy" DIR="in"/>
			<PARAMETER TYPE="y" NAME="DiskCachePolicy" DIR="in"/>
			<PARAMETER TYPE="y" NAME="InitType" DIR="in"/>
            <PARAMETER TYPE="y" NAME="AccelerationMethod" DIR="in"/>
			<PARAMETER TYPE="q" NAME="LogicalDrvieID" DIR="out"/>				
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>
		<METHOD NAME="AddLD">
			<PARAMETER TYPE="q" NAME="ArrayID" DIR="in"/>
            <PARAMETER TYPE="y" NAME="BlockIndex" DIR="in"/>
            <PARAMETER TYPE="y" NAME="RAIDLevel" DIR="in"/>
            <PARAMETER TYPE="y" NAME="Spandepth" DIR="in"/>
			<PARAMETER TYPE="s" NAME="Name" DIR="in"/>
			<PARAMETER TYPE="u" NAME="Capacity" DIR="in"/>
			<PARAMETER TYPE="y" NAME="CapacityUnit" DIR="in"/>
			<PARAMETER TYPE="y" NAME="StripSize" DIR="in"/>
			<PARAMETER TYPE="y" NAME="ReadPolicy" DIR="in"/>
			<PARAMETER TYPE="y" NAME="WritePolicy" DIR="in"/>
			<PARAMETER TYPE="y" NAME="IOPolicy" DIR="in"/>
			<PARAMETER TYPE="y" NAME="AccessPolicy" DIR="in"/>
			<PARAMETER TYPE="y" NAME="DiskCachePolicy" DIR="in"/>
			<PARAMETER TYPE="y" NAME="InitType" DIR="in"/>
            <PARAMETER TYPE="y" NAME="AccelerationMethod" DIR="in"/>
			<PARAMETER TYPE="q" NAME="LogicalDrvieID" DIR="out"/>			
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>
		<METHOD NAME="CreateCachecadeLD">
			<PARAMETER TYPE="ay" NAME="PDList" DIR="in"/>
			<PARAMETER TYPE="y" NAME="RAIDLevel" DIR="in"/>
			<PARAMETER TYPE="s" NAME="Name" DIR="in"/>
			<PARAMETER TYPE="y" NAME="WritePolicy" DIR="in"/>
            <PARAMETER TYPE="q" NAME="ArrayID" DIR="in"/>
            <PARAMETER TYPE="u" NAME="Capacity" DIR="in"/>
            <PARAMETER TYPE="y" NAME="CapacityUnit" DIR="in"/>
            <PARAMETER TYPE="q" NAME="AssociatedLD" DIR="in"/>
            <PARAMETER TYPE="y" NAME="CacheLineSize" DIR="in"/>
			<PARAMETER TYPE="q" NAME="LogicalDrvieID" DIR="out"/>			
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>
		<METHOD NAME="DeleteLD">
			<PARAMETER TYPE="q" NAME="LogicalDriveID" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>
		<METHOD NAME="SetCopyback" ID="9">
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>
		<METHOD NAME="SetSMARTerCopyback" ID="10">
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>
		<METHOD NAME="SetJBOD" ID="11">
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>
        <METHOD NAME="SetConsisCheck">
			<PARAMETER TYPE="y" NAME="Operation" DIR="in"/>
            <PARAMETER TYPE="q" NAME="Period" DIR="in"/>
            <PARAMETER TYPE="y" NAME="Rate" DIR="in"/>
            <PARAMETER TYPE="y" NAME="Repair" DIR="in"/>
            <PARAMETER TYPE="u" NAME="Delay" DIR="in"/>
            <PARAMETER TYPE="y" NAME="Mask" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>
		<METHOD NAME="SetNBWC" ID="13">
			<PARAMETER TYPE="y" NAME="NoBatteryWriteCache" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>
		<METHOD NAME="SetReadCachePercent" ID="14">
			<PARAMETER TYPE="y" NAME="ReadCachePercent" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>
	    <METHOD NAME="SetDriveWriteCachePolicy">
	        <PARAMETER TYPE="y" NAME="UsageType" DIR="in"/>	
			<PARAMETER TYPE="y" NAME="Policy" DIR="in"/>		
	    </METHOD>
		<METHOD NAME="RestoreSettings">
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>			
		</METHOD>			
		<METHOD NAME="SetAgentProperty">	
		    <PARAMETER TYPE="s" NAME="PropertyName" DIR="in"/>	
			<PARAMETER TYPE="*" NAME="PropertyVal" DIR="in"/>	
			<PARAMETER TYPE="u" NAME="SaveOption" DIR="in"/>	
		</METHOD>		
        <METHOD NAME="SetMode" ID="12">	
		    <PARAMETER TYPE="y" NAME="Mode" DIR="in"/>	
			<PARAMETER TYPE="y" NAME="ProfileId" DIR="in"/>		
        </METHOD>
		<METHOD NAME="SetMaintPDFailHistory">
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetMCTPIdentity">
			<PARAMETER TYPE="y" NAME="Eid" DIR="in"/>
			<PARAMETER TYPE="q" NAME="PhyAddr" DIR="in"/>
		</METHOD>
        <METHOD NAME="ImportForeignConfig">
        </METHOD>
        <METHOD NAME="ClearForeignConfig">
        </METHOD>
        <METHOD NAME="SetRootBDF">
			<PARAMETER TYPE="y" NAME="bus" DIR="in"/>
			<PARAMETER TYPE="y" NAME="device" DIR="in"/>
			<PARAMETER TYPE="y" NAME="function" DIR="in"/>
			<PARAMETER TYPE="y" NAME="segment" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBootDevices">
			<PARAMETER TYPE="as" NAME="Devices" DIR="in"/>
		</METHOD>
        <METHOD NAME="DumpLog">
        </METHOD>
        <METHOD NAME="GetDumpPhase">
            <PARAMETER TYPE="y" NAME="Percent" DIR="out"/>            
	    </METHOD>
		<CLASS NAME="AgentRaidController"> </CLASS>        
 	</CLASS>   
    
	<!-- 
	描述：RAID控制器的PHY状态
	所属模块：存储设备管理模块(storage_mgnt)-->        
 	<CLASS NAME="SASPHYStatus">
        <!-- PHY ID，从0开始，255表示无效 -->
		<PROPERTY NAME="PHYId" TYPE="y">		</PROPERTY>
        <!-- PHY Invalid Dword Count -->        
		<PROPERTY NAME="InvalidDwordCount" TYPE="u">			</PROPERTY>
        <!-- PHY Loss Dword Sync Count  -->         
		<PROPERTY NAME="LossDwordSyncCount" TYPE="u">			</PROPERTY>
        <!-- PHY Phy Reset Problem Count  -->         
		<PROPERTY NAME="PhyResetProblemCount" TYPE="u">			</PROPERTY>
        <!-- PHY Running Disparity Error Count  -->        
		<PROPERTY NAME="RunningDisparityErrorCount" TYPE="u">			</PROPERTY>
		<CLASS NAME="AgentSASPHYStatus"> </CLASS>        
	</CLASS>   
    
	<!-- 
	描述：RAID控制器的BBU信息
	所属模块：存储设备管理模块(storage_mgnt)-->    
	<CLASS ID="80" NAME="BBU">
	    <!-- 跟RaidController的Id一致 -->
	    <PROPERTY NAME="Id" TYPE="y" ID="1">		</PROPERTY>
        <!-- BBU在位状态 -->
		<PROPERTY NAME="Present" TYPE="y" ID="2">		</PROPERTY>
        <!-- BBU类型 -->       
		<PROPERTY NAME="Type" TYPE="s" ID="3">			</PROPERTY>
        <!-- BBU总体健康状态 -->       
		<PROPERTY NAME="Health" TYPE="y">			</PROPERTY>		
        <!-- BBU电容连接是否丢失, 0:正常, 1:丢失 -->        
		<PROPERTY NAME="PackMissing" TYPE="y">			</PROPERTY>
        <!-- BBU电压是否过低, 0:正常, 1:电压过低 --> 
		<PROPERTY NAME="VoltageLow" TYPE="y">			</PROPERTY>
        <!-- BBU温度是否过高, 0:正常, 1:温度过高 -->           
		<PROPERTY NAME="TemperatureHigh" TYPE="y">			</PROPERTY>
		<!-- BBU温度 -->
		<PROPERTY NAME="Temperature" TYPE="q">			</PROPERTY>
        <!-- BBU是否需要更换, 0:不需要, 1:需要 -->         
		<PROPERTY NAME="ReplacePack" TYPE="y">			</PROPERTY>
        <!-- BBU learn cycle是否失败, 0:否, 1:是 -->         
		<PROPERTY NAME="LearnCycleFailed" TYPE="y">			</PROPERTY>
		<!-- BBU learn cycle是否超时, 0:否, 1:是 -->         
		<PROPERTY NAME="LearnCycleTimeout" TYPE="y">			</PROPERTY>
        <!-- BBU预告警状态, 0:无预告警, 1:预告警,需要更换 -->         
		<PROPERTY NAME="PredictiveFailure" TYPE="y">			</PROPERTY>
        <!-- BBU电容容量是否过低, 0:正常, 1:容量过低 -->         
		<PROPERTY NAME="RemainingCapacityLow" TYPE="y">			</PROPERTY>
        <!-- BBU是否已无空间给cache数据, 0:否, 1:是 -->         
		<PROPERTY NAME="NoSpaceForCacheOffload" TYPE="y">			</PROPERTY>		
        <!-- BBU是否故障, 0:否, 1:是，仅对PMC RAID卡适用 -->
        <PROPERTY NAME="Failed" TYPE="y">			</PROPERTY>
		<METHOD NAME="SetAgentProperty">	
		    <PARAMETER TYPE="s" NAME="PropertyName" DIR="in"/>	
			<PARAMETER TYPE="*" NAME="PropertyVal" DIR="in"/>	
			<PARAMETER TYPE="u" NAME="SaveOption" DIR="in"/>	
		</METHOD>	
		<CLASS NAME="AgentBBU"> </CLASS>        
	</CLASS>    
	<!-- 
	描述：融合接口卡类信息
	所属模块：存储设备管理模块(card_manage) -->
	<CLASS NAME="CICCard" >
		<!-- 单板ID -->
		<PROPERTY NAME="BoardId" TYPE="q"> 		</PROPERTY>
		<!-- 卡名称 -->
		<PROPERTY NAME="BoardName" TYPE="s">			</PROPERTY>
		<!-- 卡类型 -->
		<PROPERTY NAME="CardType" TYPE="y">		</PROPERTY>
		<!-- 产商信息 -->
		<PROPERTY NAME="Manufacture" TYPE="s">	</PROPERTY>
		<!-- CIC卡描述信息 -->
		<PROPERTY NAME="CardDesc" TYPE="s">			</PROPERTY>
		<!-- CIC卡的序列号 -->
		<PROPERTY NAME="SerialNumber" TYPE="s"> </PROPERTY>
		<!-- 部件编码 -->	
		<PROPERTY NAME="PartNum" TYPE="s">   </PROPERTY>
		<!-- 卡在位信号，0：不在位，1：在位  -->
		<PROPERTY NAME="Presence" TYPE="y">			</PROPERTY>
		<!-- PCB版本  -->
		<PROPERTY NAME="PcbVer" TYPE="s" >			</PROPERTY>
		<!-- M.2卡Device1在位信号，0：不在位，1：在位 -->
		<PROPERTY NAME="M2Device1Presence" TYPE="y">			</PROPERTY>
		<!-- M.2卡Device2在位信号，0：不在位，1：在位  -->
		<PROPERTY NAME="M2Device2Presence" TYPE="y">			</PROPERTY>
	</CLASS>
    
	<CLASS NAME="LogicalDrive">
        <!-- 逻辑盘归属的RAID控制器对象名称，用于建立逻辑盘与RAID控制器归属关系 -->
		<PROPERTY NAME="RefRAIDController" TYPE="s">		</PROPERTY>
        <!-- 逻辑盘TargetID -->       
		<PROPERTY NAME="TargetID" TYPE="q">			</PROPERTY>
        <!-- 逻辑盘名称 -->        
		<PROPERTY NAME="DriveName" TYPE="s">			</PROPERTY>
        <!-- 逻辑盘状态 
            0: OFFLINE
            1: PARTIALLY DEGRADED
            2: DEGRADED
            3: OPTIMAL
            4: FAILED			
            5: NOT CONFIGURED
            6: INTERIM RECOVERY
            7: READY FOR RECOVERY
            8: RECOVERYING
            9: WRONG DRIVE REPLACED
            10: DRVIE IMPROPERLY CONNECTED
            11: EXPANDING
            12: NOT YET AVAILABLE
            13: QUEUED FOR EXPANSION
            14: DISABLED FROM SCSIID CONFLICT
            15: EJECTED
            16: ERASE IN PROGRESS
            17: UNUSED
            18: READY TO PERFORM PREDICTIVE SPARE REBUILD
            19: RPI IN PROGRESS
            20: RPI QUEUED
            21: ENCRYPTED VOLUME WITHOUT KEY
            22: ENCRYPTIONMIGRATION
            23: ENCRYPTED VOLUME REKEYING
            24: ENCRYPTED VOLUME ENCRYPTION OFF
            25: VOLUME ENCODE REQUESTED
            26: ENCRYPTED VOLUME REKEY REQUESTED
            27: UNSUPPORTED ON THIS CONTROLLER
            255: UNKNOWN
	    --> 
		<PROPERTY NAME="DriveStatus" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘健康 -->           
		<PROPERTY NAME="HealthStatus" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘RAID级别
            0: RAID0
            1: RAID1
            2: RAID2
            3: RAID3
            4: RAID4
            5: RAID5
            6: RAID6
            10: RAID10
            11: RAID1ADM
            12: RAID10ADM
            17: RAID1E
            20: RAID20
            30: RAID30
            40: RAID40
            50: RAID50
            60: RAID60
            255: Unknown
            other: reserved
        -->
		<PROPERTY NAME="RaidLevel" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘默认读策略 -->          
		<PROPERTY NAME="DefaultReadPolicy" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘默认写策略-->          
		<PROPERTY NAME="DefaultWritePolicy" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘默认cache策略 -->          
		<PROPERTY NAME="DefaultCachePolicy" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘当前读策略 -->          
		<PROPERTY NAME="CurrentReadPolicy" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘当前写策略 -->          
		<PROPERTY NAME="CurrentWritePolicy" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘当前cache策略 -->          
		<PROPERTY NAME="CurrentCachePolicy" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘访问策略 -->          
		<PROPERTY NAME="AccessPolicy" TYPE="y">			</PROPERTY>		
        <!-- 逻辑盘条带大小，0=512, 1=1K, 2=2K, 3=4K, 7=64K, 8=128K，9=256K，10=512K，11=1MB, etc. -->          
		<PROPERTY NAME="StripSize" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘容量大小，单位MB-->          
		<PROPERTY NAME="Size" TYPE="u">			</PROPERTY>
        <!-- 逻辑盘最大可调整容量，单位MB-->          
		<PROPERTY NAME="MaxResizableSize" TYPE="u">	</PROPERTY>
        <!-- 逻辑盘span深度 -->          
		<PROPERTY NAME="SpanDepth" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘span的物理盘数 -->          
		<PROPERTY NAME="NumDrivePerSpan" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘物理盘cache功能状态 -->          
		<PROPERTY NAME="DiskCachePolicy" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘物初始化操作执行方式，0：不初始化 1：快速初始化 2：完全初始化 255：属性值无效 -->          
		<PROPERTY NAME="InitState" TYPE="y">			    </PROPERTY>
        <!-- 逻辑盘一致性检查状态 -->          
		<PROPERTY NAME="ConsistencyCheck" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘BGI使能状态 -->          
		<PROPERTY NAME="BGIEnabled" TYPE="y">			</PROPERTY>		
        <!-- 逻辑盘是否是启动盘 -->          
		<PROPERTY NAME="IsBootable" TYPE="y">			</PROPERTY>
		<!-- 逻辑盘的启动优先级，bit0表示第1优先级，bit1表示第2优先级，依次类推 -->
		<PROPERTY NAME="BootPriority" TYPE="y">			</PROPERTY>
		<!-- OS盘符名 -->          
		<PROPERTY NAME="OSDriveName" TYPE="s">			</PROPERTY>
		<!-- BMA Redfish ID -->          
		<PROPERTY NAME="BMAId" TYPE="s">			</PROPERTY>
        <!-- 逻辑盘是否是CacheCade逻辑盘 -->          
		<PROPERTY NAME="IsSSCD" TYPE="y">			</PROPERTY>
		<!-- IsSSCD为0时，表示此逻辑盘是否有启用CacheCade功能，0：没有，1：启用，255：未知，此属性仅在IsSSCD为0时有效，默认值为255 -->          
		<PROPERTY NAME="CacheCadeLD" TYPE="y">			</PROPERTY>		
		<!-- IsSSCD为1时，表示关联此CacheCade盘的普通逻辑盘ID，此属性仅在IsSSCD为1时有效 -->          
		<PROPERTY NAME="AssociatedLDs" TYPE="aq">			</PROPERTY>
		<!-- IsSSCD为0时，表示关联此普通逻辑盘的CacheCade盘ID，此属性仅在IsSSCD为0时有效 -->          
		<PROPERTY NAME="AssociatedCacheCadeLDs" TYPE="aq">			</PROPERTY>
		<!-- 组成逻辑盘的Array ID -->          
		<PROPERTY NAME="RefArray" TYPE="aq">			</PROPERTY> 		
		<!-- 逻辑盘的物理成员盘槽位号（从RAID控制器中查询到的，非背板物理槽位号）列表 -->          
		<PROPERTY NAME="ParticipatedPDSlot" TYPE="ay">			</PROPERTY> 
		<!-- 逻辑盘的物理成员盘EID（从RAID控制器中查询到的，非背板物理槽位号）列表 -->          
		<PROPERTY NAME="ParticipatedPDEnclosure" TYPE="aq">			</PROPERTY> 		
        <!-- 逻辑盘的局部热备物理盘槽位号（从RAID控制器中查询到的，非背板物理槽位号）列表 -->          
		<PROPERTY NAME="DedicatedSparedPDSlots" TYPE="ay">			</PROPERTY>
		<!-- 逻辑盘的局部热备物理盘EID（从RAID控制器中查询到的，非背板物理槽位号）列表 -->          
		<PROPERTY NAME="DedicatedSparedPDEnclosures" TYPE="aq">			</PROPERTY> 
		<!-- 逻辑盘当前是否在FGI中 -->          
		<PROPERTY NAME="CurrentFGIState" TYPE="y">			</PROPERTY>
		<!-- 逻辑盘当前的FGI进度，百分比 -->          
		<PROPERTY NAME="FGIProgress" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘的加速方法，0: 未知，1:无，2：控制器缓存，3：IOBypass，4：maxCache，0xFF：默认值-->
        <PROPERTY NAME="AccelerationMethod" TYPE="y">			</PROPERTY>
	    <!-- 逻辑盘的缓存行大小，1：64KB，2：128KB，4：256KB，0xFF：默认值 -->
		<PROPERTY NAME="CacheLineSize" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘的重建状态，0: 没有重建或重建结; 1: 重建中; 255: 未知 -->
        <PROPERTY NAME="RebuildState" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘的重构进度，0 - 100% -->    
        <PROPERTY NAME="RebuildProgress" TYPE="y">			</PROPERTY>
		<METHOD NAME="SetName">
			<PARAMETER TYPE="s" NAME="Name" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>
		<METHOD NAME="SetReadPolicy">
			<PARAMETER TYPE="y" NAME="ReadPolicy" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>	
		<METHOD NAME="SetWritePolicy">
			<PARAMETER TYPE="y" NAME="WritePolicy" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>	
		<METHOD NAME="SetIOPolicy">
			<PARAMETER TYPE="y" NAME="IOPolicy" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>	
		<METHOD NAME="SetAccessPolicy">
			<PARAMETER TYPE="y" NAME="AccessPolicy" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>	
		<METHOD NAME="SetDiskCachePolicy">
			<PARAMETER TYPE="y" NAME="DiskCachePolicy" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>	
		<METHOD NAME="SetBGI">
			<PARAMETER TYPE="y" NAME="BGIState" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>	
		<METHOD NAME="SetCachecade">
			<PARAMETER TYPE="y" NAME="CachecadeState" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>				
		</METHOD>	
		<METHOD NAME="SetBootable">
		    <PARAMETER TYPE="y" NAME="BootPriority" DIR="in"/>	
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>			
		</METHOD>			
		<METHOD NAME="StartFGI">
			<PARAMETER TYPE="y" NAME="InitType" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>			
		</METHOD>			
		<METHOD NAME="CancelFGI">
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>			
		</METHOD>
		<METHOD NAME="SetAccelerationMethod">
			<PARAMETER TYPE="y" NAME="Method" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetCapacity">
			<PARAMETER TYPE="u" NAME="Capacity" DIR="in"/>
			<PARAMETER TYPE="y" NAME="CapacityUnit" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetStripSize">
			<PARAMETER TYPE="y" NAME="StripSize" DIR="in"/>
			<PARAMETER TYPE="*" NAME="ErrorMessage" DIR="out"/>
		</METHOD>
		<CLASS NAME="AgentLogicalDrive"> </CLASS>
	</CLASS>  

	<!-- 
	描述：逻辑盘故障信息，用于静态配置在逻辑盘上产生故障告警所需的上下文信息
	所属模块：存储设备管理模块(storage_mgnt)-->        
 	<CLASS NAME="LogicalDriveAlertInfo">
        <!-- 逻辑盘是动态创建的对象，0表示对应Id的逻辑盘对象不存在，1表示存在 -->
		<PROPERTY NAME="IsExist" TYPE="y">		</PROPERTY>
        <!-- 逻辑盘ID，从0开始，0xFFFF表示无效 -->
		<PROPERTY NAME="Id" TYPE="q">		</PROPERTY>
        <!-- 逻辑盘故障状态：0表示正常, 非0表示逻辑盘有故障 -->        
		<PROPERTY NAME="AlertStatus" TYPE="y">			</PROPERTY>
        <!-- 逻辑盘故障类型的字符描述：可以是degraded/partially degraded/offline/failed -->
		<PROPERTY NAME="AlertTypeDesc" TYPE="s">		</PROPERTY>
		<!-- iBMA是否存在, 0表示不存在, 1表示存在, 处理iBMA上报的数据时使用 -->
		<PROPERTY NAME="iBMAIsExist" TYPE="y">		</PROPERTY>
		<!-- iBMA上报的逻辑盘故障状态：0表示正常, 非0表示逻辑盘有故障 -->        
		<PROPERTY NAME="iBMAAlertStatus" TYPE="y">			</PROPERTY>
	</CLASS>
    
	<!-- DiskArray类,与LogicalDrive配合使用 -->		
	<CLASS NAME="DiskArray">
        <!-- Array归属的RAID控制器对象名称，用于建立Array与RAID控制器归属关系 -->
		<PROPERTY NAME="RefRAIDController" TYPE="s">		</PROPERTY>
        <!-- Array ID -->       
		<PROPERTY NAME="ArrayID" TYPE="q">			</PROPERTY>
        <!-- Array已使用的空间，单位MB -->        
        <PROPERTY NAME="UsedSpace" TYPE="u">			</PROPERTY> 
        <!-- Array中所有空闲块的空间之和，单位MB -->     
        <PROPERTY NAME="TotalFreeSpace" TYPE="u">			</PROPERTY>
        <!-- Array可用于创建逻辑盘的空闲块容量列表，单位MB -->     
        <PROPERTY NAME="FreeBlocksSpace" TYPE="au">			</PROPERTY>
        <!-- Array里面逻辑盘个数，最多16个 -->    		
		<PROPERTY NAME="LDCount" TYPE="y">			</PROPERTY> 
        <!-- Array里面逻辑盘的ID -->     
		<PROPERTY NAME="RefLDs" TYPE="aq">			</PROPERTY> 		
        <!-- Array里面物理盘个数，最多32个 -->    		
		<PROPERTY NAME="PDCount" TYPE="y">			</PROPERTY> 
        <!-- Array里面物理盘槽位号（从RAID控制器中查询到的，非背板物理槽位号）列表 -->     
		<PROPERTY NAME="RefPDSlots" TYPE="ay">			</PROPERTY> 		
        <!-- Array里面物理盘EID（从RAID控制器中查询到的）列表 -->     
		<PROPERTY NAME="RefPDEnclosures" TYPE="aq">			</PROPERTY> 		
        <!-- 逻辑盘子组，对PMC卡适用 --> 		
		<CLASS NAME="DiskSubArray"> </CLASS>
	</CLASS> 	
	
	<!--描述：存储设备诊断的配置参数，包括数据收集的策略，数据分析的策略
	所属模块：存储设备管理模块(storage_mgnt)-->        
 	<CLASS ID="111" NAME="StorageDiagnose">
        <!-- PHY 误码诊断使能, V5产品默认开启，1 - 开启，0 - 关闭, 掉电持久化 -->
		<PROPERTY NAME="PHYErrEnable" TYPE="y" ID="1">		</PROPERTY>	
        <!-- PHY 误码数据采集的时间间隔, 单位秒, 掉电持久化 -->
		<PROPERTY NAME="PHYErrInterval" TYPE="u" ID="2">		</PROPERTY>
        <!-- PHY 误码在一个OS启动周期内记录的最大条数（有增长的记录）, 循环记录, 掉电持久化 -->        
		<PROPERTY NAME="PHYErrMaxRecord" TYPE="y"  ID="3">			</PROPERTY>
        <!-- PHY 误码单位时间增长过快的判断门限值, 掉电持久化  -->         
		<PROPERTY NAME="PHYErrThreshold" TYPE="u" ID="4">			</PROPERTY>
        <!-- PHY 误码在诊断之后产生的日志描述  -->         
		<PROPERTY NAME="PHYErrSelDesc" TYPE="s">			</PROPERTY>		
        <!-- PHY 误码循环记录的最大文件数（一个OS启动周期内只产生一个文件）, 掉电持久化 -->         
		<PROPERTY NAME="PHYErrLogrotateNum" TYPE="y" ID="5">			</PROPERTY>  
        <!-- 物理盘日志收集使能, V5产品默认开启, 1 - 开启，0 - 关闭，掉电持久化  -->         
		<PROPERTY NAME="PDLogEnable" TYPE="y" ID="6">			</PROPERTY>
        <!-- 物理盘日志收集的启动时间, 24小时制, 取值0-23或255, 默认为0,
		    例如, 1表示首次收集的启动时间是01:00，掉电持久化，255表示立即触发收集，不持久化  -->         
		<PROPERTY NAME="PDLogStartTime" TYPE="y" ID="7">			</PROPERTY>  		
        <!-- 物理盘日志收集的时间间隔, 单位分钟, 掉电持久化  -->         
		<PROPERTY NAME="PDLogInterval" TYPE="u" ID="8">			</PROPERTY> 
        <!-- 物理盘日志收集上次完成时间  -->         
		<PROPERTY NAME="PDLogLastTime" TYPE="u">			</PROPERTY> 		
        <!-- 物理盘日志循环记录的个数，掉电持久化  -->         
		<PROPERTY NAME="PDLogrotateNum" TYPE="y" ID="9">			</PROPERTY>
		<!-- 物理盘FARM Log日志循环记录的个数，掉电持久化，默认为3  --> 
		<PROPERTY NAME="PDFARMLogrotateNum" TYPE="y" ID="11">			</PROPERTY>
        <!-- SSD物理盘剩余磨损率告警值（百分比），默认为5 -->         
		<PROPERTY NAME="PDMediaWearoutThreshold" TYPE="y" ID="10">			</PROPERTY>	
        <!-- BMA 硬盘日志收集url，默认为N/A -->         
		<PROPERTY NAME="PdLogBMAId" TYPE="s" >			</PROPERTY>	
		<!-- 链路PHY误码连续诊断阈值，默认为1000 -->
		<PROPERTY NAME="PHYErrSerialDiagThreshold" TYPE="u" ID="12">		</PROPERTY>
		<!-- 链路PHY误码最近一次诊断阈值，默认为10000 -->
		<PROPERTY NAME="PHYErrRecentDiagThreshold" TYPE="u" ID="13">		</PROPERTY>
		<!--是否支持带外管理功能总开关，默认开启，1 -支持，0 -不支持 -->
		<PROPERTY NAME="RaidOOBEnable" TYPE="y"> </PROPERTY>
		<!--慢盘检测使能, 默认关闭，1 - 开启，0 - 关闭, 掉电持久化 -->
        <PROPERTY NAME="IODeteriorationEnable" TYPE="y"> </PROPERTY>
        <!--慢盘检测UNC限制, 掉电持久化 -->
        <PROPERTY NAME="IODeteriorationUNCThre" TYPE="q"> </PROPERTY>
        <!--慢盘检测UNC增长限制, 掉电持久化 -->
        <PROPERTY NAME="IODeteriorationUNCIncThre" TYPE="q"> </PROPERTY>
        <!--慢盘检测UNC观测时间, 掉电持久化(单位:天) -->
        <PROPERTY NAME="IODeteriorationUNCPeriod" TYPE="y"> </PROPERTY>
        <!--慢盘检测Other Error限制, 掉电持久化 -->
        <PROPERTY NAME="IODeteriorationOtherErrThre" TYPE="q"> </PROPERTY>
        <!--慢盘检测Other Error增长限制, 掉电持久化 -->
        <PROPERTY NAME="IODeteriorationOtherErrIncThre" TYPE="q"> </PROPERTY>
        <!--慢盘检测Other Error观测时间, 掉电持久化(单位:天) -->
        <PROPERTY NAME="IODeteriorationOtherErrPeriod" TYPE="y"> </PROPERTY>
        <!--慢盘检测CMDTimeout限制, 掉电持久化 -->
        <PROPERTY NAME="IODeteriorationCMDThre" TYPE="q"> </PROPERTY>
        <!--慢盘检测CMDTimeout观测时间, 掉电持久化(单位:天) -->
        <PROPERTY NAME="IODeteriorationCMDPeriod" TYPE="y"> </PROPERTY>
		<!--硬盘白盒参数标准开关 -->
		<PROPERTY NAME="IODeteriorationWhiteEnable" TYPE="y"> </PROPERTY>
		<!--BER：亚健康检测标准参数1的阈值，取值范围[0,1000]（默认除以-100，即下发170，实际为-1.7）-->
		<PROPERTY NAME="IODeteriorationBERThre" TYPE="q"> </PROPERTY>
		<!--FH：亚健康检测标准参数2的阈值，取值范围[0,100]（默认乘以100，即下发40，实际为4000） -->
		<PROPERTY NAME="IODeteriorationFlyHeiThre" TYPE="q"> </PROPERTY>
		<!--MR：亚健康检测标准参数3的阈值，取值范围[0,100]（单位为%） -->
		<PROPERTY NAME="IODeteriorationMRResThre" TYPE="q"> </PROPERTY>
		<METHOD NAME="SetPHYErrInterval" ID="2">
            <PARAMETER TYPE="u" NAME="PHYErrInterval" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetPHYErrMaxRecord" ID="3">
            <PARAMETER TYPE="y" NAME="PHYErrMaxRecord" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetPHYErrThreshold" ID="4">
            <PARAMETER TYPE="u" NAME="PHYErrThreshold" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetPHYErrLogrotateNum" ID="5">
            <PARAMETER TYPE="y" NAME="PHYErrLogrotateNum" DIR="in"/>
        </METHOD>		
		<METHOD NAME="SetPDLogEnable" ID="6">
            <PARAMETER TYPE="y" NAME="PDLogEnable" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetPDLogStartTime" ID="7">
            <PARAMETER TYPE="y" NAME="PDLogStartTime" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetPDLogInterval" ID="8">
            <PARAMETER TYPE="u" NAME="PDLogInterval" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetPDMediaWearoutThreshold" ID="10">
            <PARAMETER TYPE="y" NAME="Threshold" DIR="in"/>
        </METHOD>	
		<METHOD NAME="SetPDFARMLogrotateNum" ID="11">
            <PARAMETER TYPE="y" NAME="PDFARMLogrotateNum" DIR="in"/>
        </METHOD>
        <!-- redfish收到POST请求并存为文件之后，通知storage_mgnt模块处理  -->
		<METHOD NAME="HandlePostMessage">
            <PARAMETER TYPE="s" NAME="FilePath" DIR="in"/>
            <PARAMETER TYPE="s" NAME="FileSuffix" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetPHYErrSerialDiagThreshold" ID="12">
            <PARAMETER TYPE="u" NAME="Threshold" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetPHYErrRecentDiagThreshold" ID="13">
            <PARAMETER TYPE="u" NAME="Threshold" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetRaidOOBEnable">
			<PARAMETER DIR="in" NAME="Enable" TYPE="y"/>
        </METHOD>
	</CLASS>
	
	<!-- BusinessPort类 -->
	<CLASS NAME="BusinessPort" ID="8">
		<!-- BusinessPort端口名 -->
		<PROPERTY NAME="Name" TYPE='s' ID="1">						</PROPERTY>
		<!-- 端口对应的可插拔设备ID -->
		<PROPERTY NAME="FruDeviceId" TYPE='y'>				</PROPERTY>
		<!-- 端口类型描述，GE/10GE -->
		<PROPERTY NAME="InterfaceSpeed" TYPE='s' ID="2">			</PROPERTY>
		<!-- 端口设备厂商号 -->
		<PROPERTY NAME="Manufacture" TYPE='s' ID="3">				</PROPERTY>
		<!-- 端口设备网卡类型 -->
		<PROPERTY NAME="NICType" TYPE='s'>					</PROPERTY>
		<!-- 端口设备显示名称 -->
		<PROPERTY NAME="DisplayName" TYPE='s'>				</PROPERTY>
		<!-- 端口类型 -->
		<!--ITEM:1：LOM NCSI TYPE -->
		<!--ITEM:3：PCIE NCSI TYPE -->
		<!--ITEM:5：LOM2 NCSI TYPE -->
		<!-- 6 OS上报的BMC未管理网卡 -->
		<!-- 7 team网口 -->
		<!-- 8 bridge网口 -->
		<!-- 9 mezz -->
		<PROPERTY NAME="CardType" TYPE='y' ID="4">					</PROPERTY>
		<!-- 端口号 : 业务功能Channel ID -->
		<PROPERTY NAME="PortNum" TYPE='y' ID="5">					</PROPERTY>
		<!-- Mac ID -->
		<PROPERTY NAME="MacId" TYPE='y'>					</PROPERTY>
		<!-- Mac地址 -->
		<PROPERTY NAME="MacAddr" TYPE='s' ID="6">					</PROPERTY>
        <!-- 网卡Link状态来源:关联硬件则直接从硬件读取，0xff表示默认：NCSI或关联属性，0x02表示该卡支持通过带外获取信息，如果从硬件获取则只能使用rp，不能使用relationaccessor-->
		<PROPERTY NAME="LinkStatusSrc" TYPE='y'>				</PROPERTY>
		<!-- 链路状态 -->
		<!--ITEM:0：LINK_DOWN -->
		<!--ITEM:1: LINK_UP -->
		<PROPERTY NAME="LinkStatus" TYPE='y' ID="7">				</PROPERTY>
		<!-- 是否支持自适应模式 -->
		<!--ITEM:0：不支持 -->
		<!--ITEM:1：支持 -->
		<PROPERTY NAME="AdaptiveFlag" TYPE='y'>				</PROPERTY>
		<!-- 未用 -->
		<PROPERTY NAME="ConnectFlag" TYPE='y'>				</PROPERTY>
		<!-- 端口所属的Eth ID -->
		<PROPERTY NAME="EthNum" TYPE='y'>					</PROPERTY>
        <!-- 端口所对应的丝印 : 对外呈现丝印号 -->
		<PROPERTY NAME="SilkNum" TYPE='y' ID="8">					</PROPERTY>
		<!-- 端口所属的网卡 -->
		<PROPERTY NAME="RefNetCard" TYPE='ro'>				</PROPERTY>
		<!-- OS侧网口名称 -->
		<PROPERTY NAME="OSEthName" TYPE='s'>				</PROPERTY>
		<!-- IPv4子网掩码;IPv4地址来源;Ipv4网关;IPv4地址 -->
		<PROPERTY NAME="IPv4Info" TYPE='as'>				</PROPERTY>
		<!-- IPv6地址状态;IPv6前缀长度;IPv6地址来源;IPv6地址;IPv6网关   多个网关由空格分开 -->
		<PROPERTY NAME="IPv6Info" TYPE='as'>				</PROPERTY>
		<!-- BMA ID索引信息 -->
		<PROPERTY NAME="BMAId" TYPE="s">			</PROPERTY>
		<!-- 网口BDF -->
		<PROPERTY NAME="BDF" TYPE='s'>				</PROPERTY>
		<!-- 网卡BDF -->
		<PROPERTY NAME="RootBDF" TYPE='s'>				</PROPERTY>
		<!-- team/bridge网口包含的物理网口名，格式 eth1;eth2;eth3 -->
		<PROPERTY NAME="ContainedPorts" TYPE='s'>				</PROPERTY>
		<!-- 网口工作模式 -->
		<PROPERTY NAME="WorkMode" TYPE='s'>				</PROPERTY>
		<!-- BMA上报网口链接状态 -->
		<!--LinkDown LinkUp NoLink-->
		<PROPERTY NAME="LinkStatusStr" TYPE='s'>				</PROPERTY>
		<!--LinkDown: 1 LinkUp: 2 NoLink: 3  N/A 0xFF-->
		<PROPERTY NAME="LinkStatusBMA" TYPE='y'>				</PROPERTY>
		<!-- 网口类型 -->
		<!--ITEM:0：Virtual -->
		<!--ITEM:1: Physical -->
		<PROPERTY NAME="PortType" TYPE='y'>				</PROPERTY>
		<!-- 网络设备功能类型 -->
		<!-- 0:Disabled 1:Ethernet 2:FC 4:iSCSI 8:FCoE 16:OPA 32:IB，网口不能同时工作于两种模式 -->
		<PROPERTY NAME="NetDevFuncType" TYPE='u'>				</PROPERTY>
		<!-- 其他网口类型引用对象关联，若支持其他网口如FC口则需配置，否则配空 -->
		<PROPERTY NAME="RefSlavePort" TYPE='ro'>				</PROPERTY>
		<!-- BDF序号，一个部件可能存在多个BDF，如MEZZ卡，从0开始编号 -->
		<PROPERTY NAME="BDFNo" TYPE='y'>				</PROPERTY>		
		<!-- 参照NetDevFuncType定义，对网口支持的类型将相应bit置1 -->
		<PROPERTY NAME="SupportedFuncType" TYPE='u'>				</PROPERTY>		
		<!-- 网络带宽占用率,因为要保存小数点后两位,所以此值被放大了100倍 -->
		<PROPERTY NAME="BandwidthUsage" TYPE='q'>				</PROPERTY>		
		<!-- 网络接口类型，0 - 电口, 1 - 光口, 255 - unknown -->
		<PROPERTY NAME="IFType" TYPE="y">			</PROPERTY>
		<!-- 从MCTP获取的链路速率  单位Mbps-->
		<PROPERTY NAME="SpeedFromMctp" TYPE="u">	</PROPERTY>
		<!-- 从MCTP获取的链路模式  0：False   1：True-->
		<PROPERTY NAME="DuplexFlagFromMctp" TYPE="y">	</PROPERTY>
		<!-- 从MCTP获取的自协商模式 0：False   1：True-->
		<PROPERTY NAME="NegotiateFlagFromMctp" TYPE="y">	</PROPERTY>
		<!-- 从MCTP获取报文统计信息-->
		<PROPERTY NAME="TotalBytesReceived" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="TotalBytesTransmitted" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="UnicastPacketsReceived" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="MulticastPacketsReceived" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="BroadcastPacketsReceived" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="UnicastPacketsTransmitted" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="MulticastPacketsTransmitted" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="BroadcastPacketsTransmitted" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="FcsReceiveErrors" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="RuntPacketsReceived" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="JabberPacketsReceived" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="SingleCollisionTransmitFrames" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="MultipleCollisionTransmitFrames" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="LateCollisionFrames" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="ExcessiveCollisionFrames" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="AlignmentErrors" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="ActualMac" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="Cos2up" TYPE="ay">	</PROPERTY>
		<PROPERTY NAME="Uppgid" TYPE="ay">	</PROPERTY>
		<PROPERTY NAME="Pgpct" TYPE="ay">	</PROPERTY>
		<PROPERTY NAME="Strict" TYPE="ay">	</PROPERTY>
		<PROPERTY NAME="Pfcmap" TYPE="q">	</PROPERTY>
		<!-- bond(team)网口的链路监控频率，单位是毫秒 -->
		<PROPERTY NAME="LinkMonitorFrequency" TYPE="u">			</PROPERTY>
		<!-- IB网口的UUID值 -->
		<PROPERTY NAME="UUID" TYPE="s">			</PROPERTY>
		<!-- 配置操作的进度，0-100表示正常的进度，其他值为异常 -->
		<PROPERTY NAME="ConfigState" TYPE="aq">			</PROPERTY>
		<!-- 配置操作的结果，存放错误消息或者新创建的资源ID -->
		<PROPERTY NAME="ConfigResult" TYPE="as">			</PROPERTY>
		<!-- 系统启动时是否激活网口 -->
		<PROPERTY NAME="IsOnBoot" TYPE="y">			</PROPERTY>
		<!-- 端口是否被禁用 0:NA   1： Enabled   1:Disabled -->
		<PROPERTY NAME="AvailableFlag" TYPE="y">  </PROPERTY>
		<!-- Firmware版本 -->
		<PROPERTY NAME="FirmwareVersion" TYPE="s">			</PROPERTY>
		<!-- 驱动名称 -->
		<PROPERTY NAME="DriverName" TYPE="s">			</PROPERTY>
		<!-- 驱动版本 -->
		<PROPERTY NAME="DriverVersion" TYPE="s">			</PROPERTY>
		<!-- NCSI端口接收状态,0 非激活本NCSI端口时不能接收报文,1 非激活本NCSI端口时能接收报文;激活本NCSI端口时,不管状态为0或者1,都能接收报文 -->
		<PROPERTY NAME="NCSIRXChannelState" TYPE='y'>    </PROPERTY>
		<!-- Port口直连的交换机类信息描述：具体详见LLDP协议说明 -->
		<!-- 发送者的Chassis ID子类型：-->
		<PROPERTY NAME="ChassisIDSubType" TYPE="y">	</PROPERTY>
		<!-- Chassis ID子类型对应的描述(用于显示交换机ID) -->
		<PROPERTY NAME="ChassisIDSubDesp" TYPE="s"> </PROPERTY>
		<!-- 发送者的Port ID子类型 -->
		<PROPERTY NAME="PortIDSubType" TYPE="y"> </PROPERTY>
		<!-- Port ID子类型对应的描述(用于显示端口ID) -->
		<PROPERTY NAME="PortIDSubDesp" TYPE="s"> </PROPERTY>		
		<!-- 设备名称(Port口连接交换机名称,对应LLDP的sysytem name字段) -->
		<PROPERTY NAME="PortConnecSwitchName" TYPE="s"> </PROPERTY>
		<!-- 端口OS侧VLAN ID：IEEE802.1组织定义 -->
		<PROPERTY NAME="PortOSVlanID" TYPE="q">	</PROPERTY>
		<!-- 网口丢包统计数 -->
		<PROPERTY NAME="DroppedPackets" TYPE="u">	</PROPERTY>
		<!-- 网口错包统计数 -->
		<PROPERTY NAME="ErrorPackets" TYPE="u">	</PROPERTY>
		<!-- 端口LLDP使能模式 0:未使能  1:使能 -->
		<PROPERTY NAME="LLDPEnabled" TYPE="y">	</PROPERTY>
		<!-- 网口NCSI是否永远可见 -->
		<PROPERTY NAME="AlwaysAvailable" TYPE="y">	</PROPERTY>
		<!-- 未用 -->
		<METHOD NAME="SetAdaptiveFlag">
            <PARAMETER TYPE="y" NAME="TmpAdaptiveFlag" DIR="in"/>
        </METHOD>
		<!-- 设置网卡端口的设备BDF属性 -->
		<METHOD NAME="SetBDF">
			<PARAMETER TYPE="s" NAME="TmpBDF" DIR="in"/>
		</METHOD>
        <METHOD NAME="SetROOTBDF">
			<PARAMETER TYPE="s" NAME="TmpRootBDF" DIR="in"/>
		</METHOD>
		<METHOD NAME="CreateVLAN">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
			<PARAMETER TYPE="u" NAME="StateIndex" DIR="out"/>
		</METHOD>
		<METHOD NAME="DeleteVLAN">
			<PARAMETER TYPE="u" NAME="VLANID" DIR="in"/>
			<PARAMETER TYPE="u" NAME="StateIndex" DIR="out"/>
		</METHOD>
		<METHOD NAME="CreateBond">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
			<PARAMETER TYPE="u" NAME="StateIndex" DIR="out"/>
		</METHOD>
		<METHOD NAME="DeleteBond">
			<PARAMETER TYPE="s" NAME="BondID" DIR="in"/>
			<PARAMETER TYPE="u" NAME="StateIndex" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetIPv4Info">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
			<PARAMETER TYPE="u" NAME="StateIndex" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetMonitorFrequency">
			<PARAMETER TYPE="u" NAME="LinkMonitorFrequency" DIR="in"/>
			<PARAMETER TYPE="u" NAME="StateIndex" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetLinkStatus">
			<PARAMETER TYPE="y" NAME="LinkStatus" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetLinkStatusFromBMA">
			<PARAMETER TYPE="s" NAME="LinkStatusStr" DIR="in"/>		
		</METHOD>
		<METHOD NAME="SetMacAddress">
			<PARAMETER TYPE="s" NAME="MacAddr" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetActualMacAddress">
		<!-- 下发MAC的通道 0:MCTP -->
			<PARAMETER TYPE="y" NAME="Channel" DIR="in"/>
			<PARAMETER TYPE="s" NAME="ActualMac" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetAgentProperty">
			<PARAMETER TYPE="s" NAME="PropertyName" DIR="in"/>
			<PARAMETER TYPE="*" NAME="PropertyVal" DIR="in"/>
			<PARAMETER TYPE="u" NAME="SaveOption" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetPortLLDPEnable" ID="9">
			<PARAMETER TYPE="y" NAME="LLDPEnabled" DIR="in"/>
		</METHOD>
		<!-- 通过MCTP收集SDI5日志-->
		<METHOD NAME="GetNetCardLogOverMCTP">
            <!-- 要收集的日志存放目录 -->
            <PARAMETER TYPE="s" NAME="dir" DIR="in"/>
        </METHOD>
	</CLASS>
	<CLASS NAME="FibreChannel">
		<!-- 端口类型 -->
		<PROPERTY NAME="PortType" TYPE="s">	</PROPERTY>
		<!-- 端口名称 -->
		<PROPERTY NAME="PortName" TYPE="s">	</PROPERTY>
		<!-- fc id信息 -->
		<PROPERTY NAME="FCId" TYPE="s">	</PROPERTY>
		<!-- 当前生效wwpn号 -->
		<PROPERTY NAME="WWPN" TYPE="s">	</PROPERTY>
		<!-- 当前生效wwnn号 -->
		<PROPERTY NAME="WWNN" TYPE="s">	</PROPERTY>
		<!-- 出厂wwpn号 -->
		<PROPERTY NAME="DefaultWWPN" TYPE="s">	</PROPERTY>
		<!-- 出厂wwnn号 -->
		<PROPERTY NAME="DefaultWWNN" TYPE="s">	</PROPERTY>
		<!-- 端口链接速率 -->
		<PROPERTY NAME="LinkSpeed" TYPE="u">	</PROPERTY>
		<!-- 端口链接状态 -->
		<PROPERTY NAME="LinkStatus" TYPE="s">	</PROPERTY>
		
		<!-- 端口统计信息，共计88个，当前仅显示其中9个-->
		<!-- 以实际速率为准比如32就是32G速率-->
		<PROPERTY NAME="TxSnSpeed" TYPE="y">           </PROPERTY>
		<!-- 以实际速率为准比如32就是32G速率-->
		<PROPERTY NAME="RxSnSpeed" TYPE="y">           </PROPERTY>
		<!-- 速率协商阶段0和1表示wait signal, 2 3 4协商中，5表示协商完成 -->
		<PROPERTY NAME="SnStage" TYPE="y">           </PROPERTY>
		<!-- 光模块打开状态，0表示关闭，1表示打开状态 -->
		<PROPERTY NAME="SfpOpen" TYPE="y">           </PROPERTY>
		<!-- 当前工作速率，0表示没有工作，非0表示正常工作直接显示速率值 -->
		<PROPERTY NAME="WorkSpeed" TYPE="y">           </PROPERTY>
		<!-- 工作topo模式，0表示没有工作，1表示loop，2表示non_loop-->
		<PROPERTY NAME="WorkTopo" TYPE="y">           </PROPERTY>
		<!-- 协商起来的对端设备credit值，0表示未正常工作，其他正常工作建链直接显示 -->
		<PROPERTY NAME="TxBbCredit" TYPE="q">           </PROPERTY>
		<!-- 本端设备的credit值，0表示未正常工作，其他正常工作建链直接显示 -->
		<PROPERTY NAME="RxBbCredit" TYPE="q">           </PROPERTY>
		<!-- 端口状态显示，0表示端口关闭状态，1表示端口link up(建链)，4表示正在协商或者等待信号阶段-->
		<PROPERTY NAME="PortStatus" TYPE="y">           </PROPERTY>
		<METHOD NAME="SetAgentProperty">
			<PARAMETER TYPE="s" NAME="PropertyName" DIR="in"/>
			<PARAMETER TYPE="*" NAME="PropertyVal" DIR="in"/>
			<PARAMETER TYPE="u" NAME="SaveOption" DIR="in"/>
		</METHOD>
	</CLASS>
	<CLASS NAME="OscaPort">  	
		<PROPERTY NAME="PortSelect" TYPE='y'>						</PROPERTY>
		<PROPERTY NAME="PortType" TYPE='y'>						</PROPERTY>
	</CLASS>
	<!--CPU&MEM相关类，End added by liulinglong-->
	
	<!-- MngtPortCap, BMC产品支持的网络设备接口 -->
	<CLASS NAME="MngtPortCap" ID="112">  	
		<!-- 单板是否支持专用网口 -->
		<!--ITEM:0：不支持 -->
		<!--ITEM:1：支持 -->
		<PROPERTY NAME="DedicatedEnable" TYPE='y' ID="1"></PROPERTY>
		<!-- 单板是否PCIe管理网口，如171x芯片PCIe接1822出的网口 -->
		<!--ITEM:0：不支持 -->
		<!--ITEM:1：支持 -->
		<PROPERTY NAME="PCIeMgntEnable" TYPE='y'></PROPERTY>
		<!--ITEM:0：表示连接在Eth0上 -->
		<!--ITEM:1：表示连接在Eth1上  -->
		<PROPERTY NAME="EthNumOfOcp" TYPE='y'></PROPERTY>
		<!-- 单板是否支持网络汇聚功能 -->
		<!--ITEM:0：不支持 -->
		<!--ITEM:1：支持 -->
		<PROPERTY NAME="AggregationEnable" TYPE="y" ID="2"></PROPERTY>	
		<!-- 单板当前是否支持板载网口的NCSI功能（会随着硬件配置变化） -->
		<!--ITEM:0：不支持 -->
		<!--ITEM:1：支持 -->
		<PROPERTY NAME="LomNcsiEnable" TYPE='y' ID="3"></PROPERTY>
		<!-- 单板当前是否支持PCIE标卡的NCSI功能（会随着硬件配置变化） -->
		<!--ITEM:0：不支持 -->
		<!--ITEM:1：支持 -->
		<PROPERTY NAME="PcieNcsiEnable" TYPE='y' ID="4"></PROPERTY>
		<!-- 单板当前是否支持板载网口的NCSI功能（会随着硬件配置变化） -->
		<!--ITEM:0：不支持 -->
		<!--ITEM:1：支持 -->
		<PROPERTY NAME="Lom2NcsiEnable" TYPE='y' ID="5"></PROPERTY>
		<PROPERTY NAME="OCPNcsiEnable" TYPE='y' ID="6"></PROPERTY>
		<PROPERTY NAME="OCP2NcsiEnable" TYPE='y' ID="7"></PROPERTY>
		<!-- 单板是否支持专用网口VLAN的功能 -->
		<!--ITEM:0：不支持 -->
		<!--ITEM:1：支持 -->
		<PROPERTY NAME="DedicatedVlanEnable" TYPE='y'>  </PROPERTY>
        <!-- 当前NCSI绑定的网卡的电源域 0: Standby, 1:Vcc; Vcc电源域，每次下电后需要重新初始化 -->
        <PROPERTY NAME="NcsiPowerDomain" TYPE="y"> </PROPERTY>
		<!-- 获取管理网口相连的交换机连接信息 -->
		<METHOD NAME="GetSwitchConnections">
			<PARAMETER TYPE="s" NAME="json_str" DIR="out"/>
		</METHOD>
	</CLASS>
		
	<!-- EthGroup类 -->
	<CLASS NAME="EthGroup" ID="88">
		<!-- 组ID -->
		<PROPERTY NAME="GroupID" TYPE="y" ID="1" KEY="1">				</PROPERTY>
		<!-- 网络模式 -->
		<!--ITEM:1：手动模式 -->
		<!--ITEM:2：自适应模式 -->
		<PROPERTY NAME="NetMode"  TYPE="y" ID="2" EXPORT="17">				</PROPERTY>
		<!-- 网络模式是否支持自适应模式 -->
		<!--ITEM:0：不支持 -->
		<!--ITEM:1：支持 -->
		<PROPERTY NAME="NetModeFlag"  TYPE="y">				</PROPERTY>	
        <!-- 自适应模式下NCSI模式 -->
		<!--ITEM:0：手动切换模式 -->
		<!--ITEM:1：自动故障切换模式 -->
        <PROPERTY NAME="NcsiMode"  TYPE="y" ID="20" EXPORT="17">				</PROPERTY>
		<!-- 组mac地址来源的ethnum -->		
		<PROPERTY NAME="MacSourcePort" TYPE="y">			</PROPERTY>	
		<!-- 当前激活的eth -->		
		<PROPERTY NAME="ActivePort" TYPE="y" ID="3" EXPORT="17">			</PROPERTY>	
		<!-- 当前设置状态 -->
		<!--ITEM:0：当前没有在设置 -->
		<!--ITEM:1：当前正在设置 -->		
		<PROPERTY NAME="Status" TYPE="y">			</PROPERTY>	
		<!-- 端口类型 -->
		<!--ITEM:1：NCSI type -->
		<!--ITEM:2: MANAGEMENT_TYPE -->
		<!--ITEM:3：PCIE_TYPE -->
		<PROPERTY NAME="Type" TYPE="y" ID="17">			</PROPERTY>
		<!-- 网口组对内对外属性 -->
		<!--ITEM:1：对内 -->
		<!--ITEM:2: 对外 -->
		<!--ITEM:3: veth -->
		<!--ITEM:5: 浮动IP -->
		<PROPERTY NAME="OutType" TYPE="y">			</PROPERTY>	
		<!-- 当前NCSI网卡端口号 -->
		<PROPERTY NAME="NCSIPort" TYPE="y">			</PROPERTY>
		<!-- 未用  -->
		<PROPERTY NAME="IpSetFlag" TYPE="y">			</PROPERTY>
		<!-- 通道号 -->
		<PROPERTY NAME="Channel"  TYPE="y">				</PROPERTY>
		<!-- IPv4地址模式 -->
		<!--ITEM:1：静态模式 -->
		<!--ITEM:2：DHCP模式 -->
		<PROPERTY NAME="IpMode"  TYPE="y" ID="4" EXPORT="17">				</PROPERTY>	
		<!-- 还原点IPv4地址模式 -->
		<!--ITEM:1：静态模式 -->
		<!--ITEM:2：DHCP模式 -->
		<PROPERTY NAME="d:IpMode"  TYPE="y">				</PROPERTY>	
        <PROPERTY NAME="FactoryDefaultIpMode" TYPE="y">				</PROPERTY>
        <PROPERTY NAME="FactoryDefaultIpAddr" TYPE="s">				</PROPERTY>
		<!-- IPv4地址 -->		
		<PROPERTY NAME="IpAddr" TYPE="s" ID="5" EXPORT="18">				</PROPERTY>		
		<!-- 基准IPv4地址 -->		
		<PROPERTY NAME="BaseIpAddr" TYPE="s">				</PROPERTY>	
		<PROPERTY NAME="d:IpAddr" TYPE="s">				</PROPERTY>
		<!-- IPV4备份IP (虚拟网口使用)-->
		<PROPERTY NAME="BackupIpAddr" TYPE="s" ID="18" EXPORT="18">				</PROPERTY>
		<!-- IPv4地址子网掩码 -->		
		<PROPERTY NAME="SubnetMask"  TYPE="s" ID="6" EXPORT="18">			</PROPERTY>
		<!-- 基准IPv4地址子网掩码 -->		
		<PROPERTY NAME="BaseSubnetMask"  TYPE="s">			</PROPERTY>
		<!-- IPV4备份子网掩码 (虚拟网口使用)-->
		<PROPERTY NAME="BackupSubnetMask" TYPE="s" ID="19" EXPORT="18">				</PROPERTY>
		<!-- IPv4默认网关 -->	
		<PROPERTY NAME="DefaultGateway"  TYPE="s" ID="7" EXPORT="18">		</PROPERTY>	
		<!-- IPv6地址模式 -->
		<!--ITEM:1：静态模式 -->
		<!--ITEM:2：DHCP模式 -->		
		<PROPERTY NAME="Ipv6Mode" TYPE="y" ID="8" EXPORT="17">				</PROPERTY>
		<!-- IPv6地址 -->	
		<PROPERTY NAME="Ipv6Addr"  TYPE="s" ID="9" EXPORT="18">			</PROPERTY>
		<!-- IPv6地址前缀长度 -->	
		<PROPERTY NAME="Ipv6Prefix"  TYPE="y" ID="10" EXPORT="18">			</PROPERTY>	
		<!-- IPv6默认网关 -->			
		<PROPERTY NAME="Ipv6DefaultGateway" TYPE="s" ID="11" EXPORT="18">	</PROPERTY>
		<!-- IPv6链路本地地址 -->
		<PROPERTY NAME="Ipv6LocalLink"  TYPE="s">		</PROPERTY>
		<!-- IP版本支持 -->
		<!--ITEM:0：IPv4 -->
		<!--ITEM:1: IPv6 -->
		<!--ITEM:2：IPv4 and IPv6 -->
		<PROPERTY NAME="IpVersion"  TYPE="y" ID="12" EXPORT="17">				</PROPERTY>	
		<!-- SLAAC IPv6地址 -->	
		<PROPERTY NAME="SLAACIpv6Addr"  TYPE="as">			</PROPERTY>
		<!-- SLAAC IPv6地址前缀长度 -->	
		<PROPERTY NAME="SLAACIpv6Prefix"  TYPE="ay">			</PROPERTY>	
		<!-- 内网网段IP -->
		<PROPERTY NAME="InnerNetWork"  TYPE="s">		</PROPERTY>	
		<!-- 默认IP地址生成策略 -->
		<!--ITEM:0：根据默认IP地址 -->
		<!--ITEM:1：根据槽位和默认IP地址生成 -->
		<PROPERTY NAME="IpPolicy"  TYPE="y">		</PROPERTY>
		<!-- Mac地址 -->		
		<PROPERTY NAME="Mac" TYPE="s">		</PROPERTY>
		<!-- Vlan ID -->
		<PROPERTY NAME="VlanID" TYPE="q" ID="13" EXPORT="17">		</PROPERTY>
		<!-- Vlan使能状态 -->
		<!--ITEM:0：不使能 -->
		<!--ITEM:1：使能 -->
		<PROPERTY NAME="VlanState"  TYPE="u" ID="14" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="VlanNum" TYPE="y"></PROPERTY>
        <!-- Vlan 可用范围下限 -->	
		<PROPERTY NAME="VlanMin"  TYPE="q" ID="15">		</PROPERTY>	
		<!-- Vlan 可用范围上限 -->	
		<PROPERTY NAME="VlanMax"  TYPE="q" ID="16">		</PROPERTY>        
		<!--RMCP权限level-->
		<PROPERTY NAME="Level"  TYPE="ay">				</PROPERTY>
		<!-- 网卡别名，0xff表示没有别名 -->
		<PROPERTY NAME="EthAlias" TYPE="y"></PROPERTY>
		<!-- 设置网络模式的方法  -->
		<METHOD NAME="SetNetMode" ID="2">
			<!-- 网络模式 -->
			<!--ITEM:1：手动模式 -->
			<!--ITEM:2：自适应模式 -->
			<PARAMETER TYPE="y" NAME="NetMode" DIR="in"/>
        </METHOD>
        <!-- 设置自适应模式下NCSI模式的方法  -->
		<METHOD NAME="SetNcsiMode" ID="20">
			<!-- NCSI模式 -->
			<!--ITEM:0：手动切换模式 -->
			<!--ITEM:1：自动故障切换模式 -->
			<PARAMETER TYPE="y" NAME="NcsiMode" DIR="in"/>
        </METHOD>	
		<!-- 设置IPv4地址模式的方法  -->
		<METHOD NAME="SetIpMode" ID="4">
			<!-- IPv4地址模式 -->
			<!--ITEM:1：静态模式 -->
			<!--ITEM:2：DHCP模式 -->
			<PARAMETER TYPE="y" NAME="IpMode" DIR="in"/>
        </METHOD>	
		<!-- 设置IPv4地址的方法 -->	
		<METHOD NAME="SetIpAddr" ID="5">
			<!-- IPv4地址 -->	
			<PARAMETER TYPE="s" NAME="IpAddr" DIR="in"/>
        </METHOD>	
		<!-- 设置IPv4备份IP地址的方法 -->	
		<METHOD NAME="SetBackupIpAddr" ID="18">
			<!-- IPv4地址 -->	
			<PARAMETER TYPE="s" NAME="BackupIpAddr" DIR="in"/>
        </METHOD>	
		<!-- 设置IPv4地址子网掩码的方法 -->
		<METHOD NAME="SetSubnetMask" ID="6">
			<!-- IPv4地址子网掩码 -->
			<PARAMETER TYPE="s" NAME="SubnetMask" DIR="in"/>
        </METHOD>	
		<!-- 设置IPv4备份地址子网掩码的方法 -->
		<METHOD NAME="SetBackupSubnetMask" ID="19">
			<!-- IPv4地址子网掩码 -->
			<PARAMETER TYPE="s" NAME="BackupSubnetMask" DIR="in"/>
        </METHOD>	
		<!-- 设置IPv4默认网关IP地址的方法 -->
		<METHOD NAME="SetDefaultGateway" ID="7">
			<!-- IPv4默认网关IP地址 -->
			<PARAMETER TYPE="s" NAME="DefaultGateway" DIR="in"/>
        </METHOD>	
        			<!-- 设置IPv4 IP,MASK,GATEWAY的方法 -->
		<METHOD NAME="SetIpMaskGateway">
			<!-- IPv4 IP,MASK,GATEWAY-->
			<PARAMETER TYPE="s" NAME="IpAddr" DIR="in"/>
			<PARAMETER TYPE="s" NAME="SubnetMask" DIR="in"/>
			<PARAMETER TYPE="s" NAME="DefaultGateway" DIR="in"/>
			<PARAMETER TYPE="y" NAME="LogFlag" DIR="in"/>
        </METHOD>
		<!-- 设置IPv6地址模式的方法  -->
		<METHOD NAME="SetIpv6Mode" ID="8">
			<!-- IPv6地址模式 -->
			<!--ITEM:1：静态模式 -->
			<!--ITEM:2：DHCP模式 -->
			<PARAMETER TYPE="y" NAME="Ipv6Mode" DIR="in"/>
        </METHOD>	
		<!-- 设置IPv6地址的方法 -->	
		<METHOD NAME="SetIpv6Addr" ID="9">
			<!-- IPv6地址 -->	
			<PARAMETER TYPE="s" NAME="Ipv6Addr" DIR="in"/>
        </METHOD>	
		<!-- 设置IPv6地址前缀长度的方法 -->
		<METHOD NAME="SetIpv6Prefix" ID="10">
			<!-- IPv6地址前缀长度 -->
			<PARAMETER TYPE="y" NAME="Ipv6Prefix" DIR="in"/>
        </METHOD>	
		<!-- 设置IPv6默认网关的方法 -->
		<METHOD NAME="SetIpv6DefaultGateway" ID="11">
			<!-- IPv6默认网关 -->
			<PARAMETER TYPE="s" NAME="Ipv6DefaultGateway" DIR="in"/>
        </METHOD>
	      		<!-- 设置IPv6IP,PreFix，DefaultGateway的方法 -->
		<METHOD NAME="SetIpv6IpFixGateway">
	                <!-- IPv6地址 -->	
			<PARAMETER TYPE="s" NAME="Ipv6Addr" DIR="in"/>
			<!-- 设置IPv6地址前缀长度的方法 -->
			<PARAMETER TYPE="y" NAME="Ipv6Prefix" DIR="in"/>
			<!-- IPv6默认网关 -->
			<PARAMETER TYPE="s" NAME="Ipv6DefaultGateway" DIR="in"/>
        </METHOD>
		<!-- 设置当前设置状态的方法 -->
		<METHOD NAME="SetStatus">
			<!-- 当前设置状态 -->
			<!--ITEM:0：当前没有在设置 -->
			<!--ITEM:1：当前正在设置 -->
			<PARAMETER TYPE="y" NAME="Status" DIR="in"/>
        </METHOD>	
		<!-- 设置Vlan ID的方法 -->
		<METHOD NAME="SetVlanID" ID="13">
			<!-- Vlan ID -->
			<!-- <PARAMETER TYPE="q" NAME="VlanID" DIR="in"/> -->
			<!-- Vlan使能状态 -->
			<!--ITEM:0：不使能 -->
			<!--ITEM:1：使能 -->
			<!-- <PARAMETER TYPE="u" NAME="VlanState" DIR="in"/> -->
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>	
        </METHOD>
		<METHOD NAME="SetVlanState" ID="14">
			<!-- Vlan使能状态 -->
			<!--ITEM:0：不使能 -->
			<!--ITEM:1：使能 -->
			<PARAMETER TYPE="u" NAME="VlanState" DIR="in"/>
        </METHOD>
		<!-- 设置NCSI端口号的方法 -->
		<METHOD NAME="SetNCSIPort">
			<!-- NCSI Port ID -->
			<PARAMETER TYPE="y" NAME="NCSIPort" DIR="in"/>
        </METHOD>	
		<!-- 设置激活端口的方法 -->
		<METHOD NAME="SetActivePort" ID="3">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
        </METHOD>
		<!-- 提供给oscar的内部网口的切换接口的方法 -->
		<METHOD NAME="SmmPortSwitch">
			<!-- eth名 -->
			<PARAMETER TYPE="s" NAME="EthName" DIR="in"/>
        </METHOD>
		<!-- 选择参与自适应端口的方法 -->
		<METHOD NAME="ChooseAdaptiveEth">
			<!-- 端口类型 -->
			<!--ITEM:1：NCSI type -->
			<!--ITEM:2: MANAGEMENT_TYPE -->
			<!--ITEM:3：PCIE_TYPE -->
			<PARAMETER TYPE="y" NAME="CardType" DIR="in"/>
			<!-- eth id -->
			<PARAMETER TYPE="y" NAME="EthNum" DIR="in"/>
			<!-- 配置选项 -->
			<PARAMETER TYPE="y" NAME="Option" DIR="in"/>
        </METHOD>
		<!-- 设置NCSI端口的方法 -->
		<METHOD NAME="SetNCSIPort">
			<PARAMETER TYPE="y" NAME="EthType" DIR="in"/>
			<!-- NCSI端口号 -->
			<PARAMETER TYPE="y" NAME="NCSIPort" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetDefault">
        </METHOD>
        <METHOD NAME="SetFactoryDefaultIpInfo">
        </METHOD>
		<METHOD NAME="SetIpVersion" ID="12">
			<!--ITEM:0：IPv4 -->
			<!--ITEM:1: IPv6 -->
			<!--ITEM:2：IPv4 and IPv6 -->
			<PARAMETER TYPE="y" NAME="Version" DIR="in"/>
        </METHOD>
        <METHOD NAME="FloatIpSync">
		    <!-- 同步的属性值 -->
            <PARAMETER TYPE="*" NAME="Properties" DIR="in"/>
			<!-- 属性同步定义此输出 -->
            <PARAMETER TYPE="*" NAME="*" DIR="out"/>
        </METHOD>
        <METHOD NAME="DefaultGatewaySync">
		    <!-- 同步的属性值 -->
            <PARAMETER TYPE="*" NAME="Properties" DIR="in"/>
			<!-- 属性同步定义此输出 -->
            <PARAMETER TYPE="*" NAME="*" DIR="out"/>
        </METHOD>
        <METHOD NAME="VirtualNetworkStatus">
			<!-- 虚拟网口的状态 -->
            <PARAMETER TYPE="y" NAME="Status" DIR="out"/>
        </METHOD>
		<!-- 设置虚拟网口的IP和子网掩码 -->
        <METHOD NAME="SetBackupIpMask">
			<PARAMETER TYPE="s" NAME="BackupIpAddr" DIR="in"/>
			<PARAMETER TYPE="s" NAME="BackupSubnetMask" DIR="in"/>
        </METHOD>
		<CLASS NAME="AgentEthGroup"> </CLASS>		
	</CLASS>		
	
    <!-- PortMapping类 -->
	<CLASS NAME="PortMapping">
		<!-- 映射使能状态 -->
		<PROPERTY NAME="State" TYPE="y">		</PROPERTY>
		<!-- 映射报文进入的网卡，多个网卡时以逗号作分隔符 -->
		<PROPERTY NAME="InputEth" TYPE="s">		</PROPERTY>
		<!-- 映射前的目的ip -->
		<PROPERTY NAME="DstIP"  TYPE="s">				</PROPERTY>			
		<!-- 协议类型 -->		
		<PROPERTY NAME="Protocol" TYPE="s">			</PROPERTY>	
		<!-- 映射前目的端口号 -->	
		<PROPERTY NAME="Port" TYPE="aq">			</PROPERTY>	
		<!-- 映射后的目的端口号 -->
		<PROPERTY NAME="PortMapping" TYPE="aq">			</PROPERTY>			
		<!-- 映射后的目的ip -->
		<PROPERTY NAME="DstIPMapping"  TYPE="s">				</PROPERTY>	
		<!-- 映射后的源ip -->
		<PROPERTY NAME="SrcIPMapping"  TYPE="s">				</PROPERTY>		
	</CLASS>	
	
	<!-- Eth类 -->
	<CLASS NAME="Eth" ID="9">
		<!-- 端口类型 -->
		<!--ITEM:1：LOM NCSI TYPE -->
		<!--ITEM:2: MANAGEMENT TYPE -->
		<!--ITEM:3：PCIE NCSI TYPE -->
		<!--ITEM:4：AGGREGATION TYPE -->
		<!--ITEM:5：LOM2 NCSI TYPE -->
		<PROPERTY NAME="Type" TYPE="y" ID="1">		</PROPERTY>
		<!-- 配置为0xff，表示本值无效，如V3单板的NCSI连接是固定的；V5单板eth1的NCSI可以切换到LOM2或者PCIe, 1表示LOM NIC2生效, 0表示PCIe NIC生效;
			V5单板的eth0 NCSI也是固定的配置为0xff-->
		<PROPERTY NAME="NcsiNicSwitchType" TYPE="y">		</PROPERTY>
		<!-- NCSI 网卡切换关联accessor-->
		<PROPERTY NAME="NcsiNicSwitchAccessor" TYPE="y">		</PROPERTY>
		<!-- 端口对内对外属性 -->
		<!--ITEM:1：对内 -->
		<!--ITEM:2: 对外 -->
		<!--ITEM:3: veth -->
		<!--ITEM:4: Atlas计算节点近端维护内部网络 -->
		<!--ITEM:5: Atlas计算节点近端维护外出网络 -->
		<!--ITEM:6: SMM板浮动IP网络 -->
		<!--ITEM:7: SMM板出对板的内部网络 -->
		<!--ITEM:8: 专用网口近端运维网络 -->
		<!--ITEM:9: 机柜管理板内网，用于和机柜节点通讯 -->
		<!--ITEM:10: 机柜节点内网，和BMC管理网络共物理网卡，通过vlan隔离内网和管理网络 -->
		<PROPERTY NAME="OutType"  TYPE="y" ID="2">	</PROPERTY>
		<!-- Eth使能状态 -->
		<!--ITEM:0：不使能 -->
		<!--ITEM:1：使能 -->
		<PROPERTY NAME="EthEnable"  TYPE="y" ID="3">	</PROPERTY>	
		<!-- mac地址 -->		
		<PROPERTY NAME="Mac" TYPE="s" ID="4">		</PROPERTY>
		<!-- eth对象名 -->	
		<PROPERTY NAME="Name"  TYPE="s" ID="5">		</PROPERTY>
		<!-- linux设备ETH ID -->
		<PROPERTY NAME="Num"  TYPE="y" ID="6">	</PROPERTY>
		<!-- 当前NCSI绑定的网卡端口号 -->
        <PROPERTY NAME="NCSIPort" TYPE="y" ID="7">		</PROPERTY>
		<!-- eth所属Group -->
		<PROPERTY NAME="GroupID"  TYPE="y">		</PROPERTY>
		<!-- 链路状态 -->
		<!--ITEM:0：LINK_DOWN -->
		<!--ITEM:1: LINK_UP -->
		<PROPERTY NAME="EthLinkStatus"  TYPE="i" ID="8">		</PROPERTY>
		<!-- Vlan ID -->
		<PROPERTY NAME="VlanID" TYPE="q" ID="9">		</PROPERTY>
		<!-- Vlan使能状态 -->
		<!--ITEM:0：不使能 -->
		<!--ITEM:1：使能 -->
		<PROPERTY NAME="VlanState"  TYPE="u" ID="10">		</PROPERTY>
		<!-- 未用 -->
		<PROPERTY NAME="id" TYPE="y">		</PROPERTY>
		<!-- 是否支持自适应模式 -->
		<!--ITEM:0：不支持 -->
		<!--ITEM:1：支持 -->
		<PROPERTY NAME="AdaptiveFlag"  TYPE="y">		</PROPERTY>
		<!-- 参与自适应port掩码，置位有效，bit0表示port1，依次类推；专用网口只有一个port(port1) -->
		<PROPERTY NAME="AdaptivePortMask"  TYPE="u">		</PROPERTY>
        <!--自适应模式下网口的优先级，值越低优先级越高 -->
		<PROPERTY NAME="Priority"  TYPE="y">		</PROPERTY>
		<!--0: 关闭速率和模式自适应，1：打开自适应 当eth与LSW相连接的时候往往就需要关掉自适应，比如6800 mm eth -->
		<PROPERTY NAME="SpeedDuplexEnable"  TYPE="y">		</PROPERTY>
		<!--速率设置，只有SpeedDuplexEnable为0时才有效  0：表示不涉及 -->
		<!--1: 10M, 2: 100M, 3:1000M -->
		<PROPERTY NAME="SpeedSetting"  TYPE="y">		</PROPERTY>
		<!--全双工半双工设置，只有SpeedDuplexEnable为0时才有效  0：表示不涉及 -->
		<!--1: 半双工, 2: 全双工 -->
		<PROPERTY NAME="DuplexSetting"  TYPE="y">		</PROPERTY>
		<!-- 设置mac地址的方法 -->
		<METHOD NAME="SetMac">
			<!-- mac地址 -->
			<PARAMETER TYPE="s" NAME="Mac" DIR="in"/>
        </METHOD>	
		<!-- 设置Vlan ID的方法 -->
		<METHOD NAME="SetVlanID">
			<!-- Vlan ID -->
			<PARAMETER TYPE="q" NAME="VlanID" DIR="in"/>
			<!-- Vlan使能状态 -->
			<!--ITEM:0：不使能 -->
			<!--ITEM:1：使能 -->
			<PARAMETER TYPE="u" NAME="VlanState" DIR="in"/>
        </METHOD>
		<!-- 设置Eth是否使能的方法 -->		
		<METHOD NAME="SetEthEnable">
			<!--Eth使能状态 -->
			<!--ITEM:0：不使能 -->
			<!--ITEM:1：使能 -->
			<PARAMETER TYPE="y" NAME="SetEthEnable" DIR="in"/>
        </METHOD>	
		<METHOD NAME="AddIptablesRule">
			<PARAMETER DIR="in" NAME="eth" TYPE="s"/>
			<PARAMETER DIR="in" NAME="ip" TYPE="s"/>
		</METHOD>
		<METHOD NAME="AddIp6tablesRule">
			<PARAMETER DIR="in" NAME="eth" TYPE="s"/>
			<PARAMETER DIR="in" NAME="ip" TYPE="s"/>
		</METHOD>
		<METHOD NAME="DftEthLoopCheck">
			<PARAMETER DIR="in" NAME="EthNum" TYPE="y"/>
        </METHOD>
	</CLASS>	
	
<CLASS ID="58" NAME="LDAPCommon">
	<PROPERTY NAME="Enable" TYPE="y" ID="1" EXPORT="17">		</PROPERTY>
	<METHOD NAME="SetLDAPEnable"  ID="1">
		<PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
    </METHOD>
</CLASS>

<CLASS NAME="KRBCommon">
	<PROPERTY NAME="Enable" TYPE="y">		</PROPERTY>
	<METHOD NAME="SetKRBEnable">
		<PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
    </METHOD>
</CLASS>

<CLASS ID="59" NAME="LDAP">
		<PROPERTY NAME="ID" TYPE="y" ID="1" KEY="1">		</PROPERTY>
		<PROPERTY NAME="Enable" TYPE="y" ID="7" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="HostAddr"  TYPE="s" ID="2" EXPORT="17">	</PROPERTY>
		<PROPERTY NAME="UserDomain"  TYPE="s" ID="3" EXPORT="17">	</PROPERTY>			
		<PROPERTY NAME="LdapVer" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="Port"  TYPE="i" ID="4" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="CertStatus" TYPE="y" ID="5" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="CertificateVerificationLevel" TYPE="y" ID="11" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="Scope"  TYPE="s">	</PROPERTY>			
		<PROPERTY NAME="TimeLimit" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="BindTimeLimit"  TYPE="y">		</PROPERTY>
				<!-- 起始时间 -->
		<PROPERTY NAME="StartTime" TYPE="s">		</PROPERTY>	
		<!-- 过期时间 -->
		<PROPERTY NAME="Expiration"  TYPE="s">		</PROPERTY>	
		<!--是否开启证书吊销验证: 0未开启, 1已开启-->
		<PROPERTY NAME="CRLVerificationEnabled" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="Folder" TYPE="s" ID="6" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="BindDN" TYPE="s" ID="8" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="BindDNPsw" TYPE="s" ID="9">		</PROPERTY>
		<!--加密绑定密码的主密钥Id-->
		<PROPERTY NAME="BindDNPswMasterKeyId"  TYPE='u'>	</PROPERTY>
		<PROPERTY NAME="BaseDN" TYPE="s" ID="10" EXPORT="17">		</PROPERTY>
		<!-- 证书CRL起始时间-->
		<PROPERTY NAME="CRLStartTime"  TYPE="s">	</PROPERTY>
		<!-- 证书CRL过期时间-->
		<PROPERTY NAME="CRLExpireTime"  TYPE="s">	</PROPERTY>
		<METHOD NAME="SetEnable" ID="7">
			<PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetHostAddr" ID="2">
			<PARAMETER TYPE="s" NAME="HostAddr" DIR="in"/>
        </METHOD>	
		<METHOD NAME="SetUserDomain" ID="3">
			<PARAMETER TYPE="s" NAME="UserDomain" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetLdapPort" ID="4">
			<PARAMETER TYPE="i" NAME="Port" DIR="in"/>
        </METHOD>	
		<METHOD NAME="SetCertStatus" ID="5">
			<PARAMETER TYPE="y" NAME="CertStatus" DIR="in"/>
        </METHOD>	
		<METHOD NAME="SetCertificateVerificationLevel" ID="11">
			<PARAMETER TYPE="y" NAME="CertificateVerificationLevel" DIR="in"/>
        </METHOD>		
			
		<METHOD NAME="SetFolder" ID="6">
			<PARAMETER TYPE="s" NAME="Folder" DIR="in"/>
        </METHOD>	
        <METHOD NAME="SetBindDN" ID="8">
			<PARAMETER TYPE="s" NAME="BindDN" DIR="in"/>
        </METHOD>
        <METHOD NAME="SetBindDNPsw" ID="9">
			<PARAMETER TYPE="s" NAME="BindDNPsw" DIR="in"/>
        </METHOD>
        <METHOD NAME="SetBaseDN" ID="10">
			<PARAMETER TYPE="s" NAME="BaseDN" DIR="in"/>
        </METHOD>
		<METHOD NAME="LdapComposeUserDomain">
			<PARAMETER TYPE="s" NAME="UserDomain" DIR="out"/>
        </METHOD>	
		<METHOD NAME="LdapSplitUserDomain">
			<PARAMETER TYPE="s" NAME="UserDomain" DIR="in"/>
        </METHOD>
        <!-- 方法：上传LDAP证书 -->
		<METHOD NAME="LDAPCertUpload">
			<PARAMETER DIR="in" NAME="size" TYPE="i"/>
			<PARAMETER DIR="in" NAME="ID" TYPE="y"/>
			<PARAMETER DIR="in" NAME="filepath" TYPE="s"/>
			<PARAMETER DIR="out" NAME="LDAPCertUploadResult" TYPE="y"/>
        </METHOD>
		<!-- 方法：导入LDAP证书吊销列表 -->
		<METHOD NAME="ImportCRL">
			<PARAMETER DIR="in" NAME="ID" TYPE="y"/>
			<PARAMETER DIR="in" NAME="filePath" TYPE="s"/>
        </METHOD>
    	<!-- 方法：删除LDAP证书吊销列表 -->
        <METHOD NAME="DeleteCRL">
			<PARAMETER DIR="in" NAME="ID" TYPE="y"/>
        </METHOD>
		<!-- 方法：查询LDAP信息 -->
		<METHOD NAME="GetLDAPCertInformation">
			<PARAMETER DIR="in" NAME="ID" TYPE="y"/>
			<PARAMETER DIR="out" NAME="InfoState" TYPE="s"/>
			<PARAMETER DIR="out" NAME="IssueBy" TYPE="s"/>
			<PARAMETER DIR="out" NAME="IssueTo" TYPE="s"/>
			<PARAMETER DIR="out" NAME="StartTime" TYPE="s"/>
			<PARAMETER DIR="out" NAME="EndTime" TYPE="s"/>
			<PARAMETER DIR="out" NAME="Serial" TYPE="s"/>
        </METHOD>
	    <METHOD NAME="KRBKeytabUpload">
			<PARAMETER DIR="in" NAME="filepath" TYPE="s"/>
        </METHOD>
        <METHOD NAME="PropertySyncMethod">
            <PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
		<METHOD NAME="UpdateLDAPCiphertext">
			<PARAMETER DIR="in" NAME="NewKeyId" TYPE="u"/>
        </METHOD>
	</CLASS>	
	<CLASS NAME="LDAPGroup" ID="53">
		<PROPERTY NAME="GroupID" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="LDAPServerID" TYPE="y" ID="1" KEY="1">		</PROPERTY>
		<PROPERTY NAME="SID" TYPE="s" ID="9" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="GroupName"  TYPE="s" ID="3" EXPORT="17">	</PROPERTY>
		<PROPERTY NAME="GroupDomain"  TYPE="s" ID="6" EXPORT="17">	</PROPERTY>			
		<PROPERTY NAME="GroupPrivilege" TYPE="y" ID="4" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="GroupUserRoleId" TYPE="y" ID="8" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="GroupFolder"  TYPE="s" ID="7" EXPORT="17">		</PROPERTY>
		<PROPERTY NAME="GroupPrivilegeMask"  TYPE="u">	</PROPERTY>
		<!-- 启用的登录规则 -->
		<PROPERTY NAME="GroupPermitRuleIds" TYPE="y" ID="2" EXPORT="17">	</PROPERTY>
		<!-- 可以登录的接口状况 -->
		<PROPERTY NAME="GroupLoginInterface" TYPE="u" ID="5" EXPORT="17">	</PROPERTY>
		<!-- 配置ldap用户的登陆规则 -->
		<METHOD NAME="SetLdapPermitRuleIds" ID="2">
			<PARAMETER TYPE="y" NAME="GroupPermitRuleIds" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetGroupName" ID="3">
			<PARAMETER TYPE="s" NAME="GroupName" DIR="in"/>
        </METHOD>	
		<METHOD NAME="SetGroupSID" ID="9">
			<PARAMETER TYPE="s" NAME="SID" DIR="in"/>
        </METHOD>	
		<METHOD NAME="SetGroupDomain" ID="6">
			<PARAMETER TYPE="s" NAME="GroupDomain" DIR="in"/>
        </METHOD>	
		<METHOD NAME="SetGroupFolder" ID="7">
			<PARAMETER TYPE="s" NAME="GroupFolder" DIR="in"/>
        </METHOD>	
		<METHOD NAME="SetGroupPrivilege" ID="4">
			<PARAMETER TYPE="y" NAME="GroupPrivilege" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetGroupUserRoleId" ID="8">
			<PARAMETER TYPE="y" NAME="GroupUserRoleId" DIR="in"/>
        </METHOD>
		<METHOD NAME="DelGroup">
        </METHOD>	
		<METHOD NAME="LdapComposeGroupDomain">
			<PARAMETER TYPE="s" NAME="GroupDomain" DIR="out"/>
        </METHOD>	
		<METHOD NAME="LdapSplitGroupDomain">
			<PARAMETER TYPE="s" NAME="GroupDomain" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetGroupInfo">
			<PARAMETER TYPE="s" NAME="GroupDomain" DIR="in"/>
        </METHOD>		
		<!-- 方法：设置可以登录的接口，启用则对应比特位置1 -->
		<METHOD NAME="SetGroupLoginInterface" ID="5">
			<PARAMETER TYPE="u" NAME="GroupLoginInterface" DIR="in"/>
		</METHOD>
        <METHOD NAME="PropertySyncMethod">
            <PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
	</CLASS>	
	
	<CLASS NAME="LDAPCert">
		<!-- 证书Id -->
		<PROPERTY NAME="CertId" TYPE="y" >  </PROPERTY>
		<!-- 证书类型 ：
			0: 保留
			1: 服务器证书
			2: 中间证书
			3: 根证书
		-->
		<PROPERTY NAME="CertType" TYPE="y" >  </PROPERTY>
		<!-- 证书使用者信息 格式:
		CN=Server, OU=IT, O=Huawei, L=ShenZhen, S=GuangDong, C=CN
		-->
		<PROPERTY NAME="SubjectInfo" TYPE="s" >  </PROPERTY>
		<!-- 证书颁发者信息 -->
		<PROPERTY NAME="IssuerInfo" TYPE="s" >  </PROPERTY>
		<!-- 起始时间 -->
		<PROPERTY NAME="StartTime" TYPE="s">		</PROPERTY>	
		<!-- 过期时间 -->
		<PROPERTY NAME="Expiration"  TYPE="s">		</PROPERTY>	
		<!-- 序列号 -->
		<PROPERTY NAME="SerialNumber"  TYPE="s">		</PROPERTY>
		<!-- 签名算法 -->
		<PROPERTY NAME="SigAlgorithm" TYPE="s"> </PROPERTY>
		<!-- 秘钥长度 -->
		<PROPERTY NAME="KeyLength" TYPE="u">    </PROPERTY>
		<!-- 秘钥用法 -->
		<PROPERTY NAME="KeyUsage" TYPE="s"> </PROPERTY>

        <METHOD NAME="CertInfoPropertySyncMethod">
            <PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
	</CLASS>
	
	<!-- PortConfig类 -->
	<CLASS NAME="PortConfig" ID="6">
		<!-- 服务使能状态 -->
		<!--ITEM:0：不使能 -->
		<!--ITEM:1：使能 -->
		<PROPERTY NAME="State" TYPE="y" ID="1" EXPORT="17">		</PROPERTY>
		<!-- 服务端口号 -->
		<PROPERTY NAME="Port"  TYPE="aq" ID="2" EXPORT="17">	</PROPERTY>
		<!-- Service ID -->
		<PROPERTY NAME="ServiceID"  TYPE="u" ID="3">	</PROPERTY>
		<!-- 端口号配置文件 -->		
		<PROPERTY NAME="PortFile"  TYPE="as">	</PROPERTY>
		<!-- 使能状态配置文件 -->
		<PROPERTY NAME="StateFile"  TYPE="s">	</PROPERTY>
		<!-- 服务名称 -->
		<PROPERTY NAME="Name"  TYPE="s" ID="4" KEY="1">	</PROPERTY>
		<!-- 使用的传输协议 -->
		<PROPERTY NAME="Protocol"  TYPE="s" ID="5">	</PROPERTY>
		<!-- 设置服务使能状态 -->
		<METHOD NAME="SetState" ID="1">
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
        </METHOD>
		<!-- 设置服务端口 -->
		<METHOD NAME="SetPort" ID="2">
			<PARAMETER TYPE="q" NAME="Port" DIR="in"/>
        </METHOD>	
		<!-- 服务端口冲突检测 -->
		<METHOD NAME="PortCheck">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
        </METHOD>
		<!-- 服务端口使能状态检测，判断是否要提示用户操作风险 -->
		<METHOD NAME="StateCheck">
			<PARAMETER TYPE="y" NAME="state" DIR="in"/>
			<PARAMETER TYPE="y" NAME="index" DIR="in"/>
        </METHOD>
        <!-- 属性同步模块调用 -->
		<METHOD NAME="PropertySyncMethod">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
			<PARAMETER TYPE="*" NAME="*" DIR="out"/>
		</METHOD>
		<CLASS NAME="ExPortConfig" ID="57">
		</CLASS> 
	</CLASS>
    <!--watchdog2相关类，begin added by qichengming-->
	<!--FUNCTION:Watchdog2-->
	<!-- 
	描述：看门狗软狗信息
	所属模块：Payload模块(Payload)-->
    <CLASS NAME="Watchdog2">
		<!-- 记录SEL标志:
            (0: 记录)
            (1: 不记录)
        -->
		<PROPERTY NAME="NotLog" TYPE="y">		</PROPERTY>
		<!-- 定时器用途:
            (0: 保留)
            (1: BIOS FRB2)
			(2: BIOS/POST)
            (3: OS Load)
			(4: SMS/OS)
            (5: OEM)
        -->
		<PROPERTY NAME="TimerUse" TYPE="y">		</PROPERTY>
		<!-- 定时器用途字符串（用于告警优化动态参数） -->
		<PROPERTY NAME="TimerUseStr" TYPE="s">	</PROPERTY>
		<!-- 看门狗运行标志:
            (0: 没有运行)
            (1: 运行中)
        -->
		<PROPERTY NAME="Running"  TYPE="y">		</PROPERTY>
		<!-- 预中断已经出发-->
		<PROPERTY NAME="PreTmoutIntF"  TYPE="y">		</PROPERTY>
		<!-- 预中断类型:
            (1: SMI)
            (2: NMI)
			(3: Messaging interrupt)
			(4: IRQ)
        -->
		<PROPERTY NAME="PreTmoutInt"  TYPE="y">		</PROPERTY>
		<!-- 预中断功能使能标志-->
		<PROPERTY NAME="PreTmoutIntEn"  TYPE="y">		</PROPERTY>
		<!-- 看门狗超时后动作:
            (0: No action)
            (1: Hard reset)
			(2: Power down)
			(3: Power cycle)
        -->
		<PROPERTY NAME="TmoutAction"  TYPE="y">		</PROPERTY>
		<!-- OEM过期标志-->
		<PROPERTY NAME="OemExpirFlag"  TYPE="y">		</PROPERTY>
		<!-- SMS/OS过期标志-->
		<PROPERTY NAME="SmsExpirFlag"  TYPE="y">		</PROPERTY>
		<!-- OS Load过期标志-->
		<PROPERTY NAME="OsloadExpirFlag"  TYPE="y">		</PROPERTY>
		<!-- BIOS/POST过期标志-->
		<PROPERTY NAME="PostExpirFlag"  TYPE="y">		</PROPERTY>
		<!-- BIOS FRB2过期标志-->
		<PROPERTY NAME="Frb2ExpirFlag"  TYPE="y">		</PROPERTY>
		<!-- 看门狗已超时标志，更新此属性便于通知-->
		<PROPERTY NAME="WdTmFlag"  TYPE="u">		</PROPERTY>
		<!-- 用户判断是否由于iBMC IPC通道是否异常 -->
		<PROPERTY NAME="IsIPCCommNormal"  TYPE="y">        </PROPERTY>
		<!-- 用于BMC内部APP主动关狗操作 -->
		<METHOD NAME="SetWDT">
			<PARAMETER TYPE="y" NAME="timeruse" DIR="in"/>
			<PARAMETER TYPE="y" NAME="timeraction" DIR="in"/>
			<PARAMETER TYPE="y" NAME="pretimeout" DIR="in"/>
			<PARAMETER TYPE="y" NAME="timeruseflag" DIR="in"/>
			<PARAMETER TYPE="y" NAME="counttimels" DIR="in"/>
			<PARAMETER TYPE="y" NAME="counttimems" DIR="in"/>
        </METHOD>
	</CLASS>
    <!--watchdog2相关类，end added by qichengming-->
  
    <!--payload相关类，begin added by qichengming -->
	<!--FUNCTION:Hotswap-->
	<!-- 
	描述：热插拔信息
	所属模块：Payload模块(Payload)-->
	<CLASS NAME="Hotswap" ID="133">
		<!--当前FRU ID-->
		<PROPERTY NAME="FruID" TYPE="y" ID="1">		</PROPERTY>
		<!-- 当前热插拔状态:
            (0: M0)
            (1: M1)
			(2: M2)
            (3: M3)
            (4: M4)
			(5: M5)
            (6: M6)
        -->
		<PROPERTY NAME="CurrentHotswapState" TYPE="y" ID="2">		</PROPERTY>
		<!--上一次热插拔状态，值同上-->
		<PROPERTY NAME="LastHotswapState"  TYPE="y">		</PROPERTY>
		<!-- 引起热插拔原因:
            (0: 正常状态机流程)
            (1: CMM命令)
			(2: 扳手)
            (3: 与外部操作无关的内部需求，如Lock Bit)
            (4: 通信中断)
			(5: 物理上与IPM控制器突然分离)
            (6: 突然拔出)
			(7: 控制器知道了FRU的当前状态，但无法知道上一个状态，用于通知CMM)
            (8: 检测到非法的硬件地址)
			(9: 非预期去激活)
            (10: 电源丢失)
			(15: 未知原因)
        -->		
		<PROPERTY NAME="HotswapCause"  TYPE="y">		</PROPERTY>
		<!--混合热插拔状态，CurrentHotswapState与LastHotswapState混合值-->
		<PROPERTY NAME="MixHotswapState"  TYPE="u">		</PROPERTY>
		<CLASS NAME="DataNotifyHotswap"> </CLASS>
	</CLASS>
	
	<!--FUNCTION:FruPayload-->
	<!-- 
	描述：Fru上下电信息
	所属模块：Payload模块(Payload)-->
	<CLASS NAME="FruPayload">
		<!--当前FRU ID-->
		<PROPERTY NAME="FruID" TYPE="y">		</PROPERTY>
		<!-- 电源状态:
            (0: 下电)
            (1: 上电)
        -->
		<PROPERTY NAME="PowerState"  TYPE="y">	</PROPERTY>
		<!-- 方法：设置启动位置 -->
		<METHOD NAME="ColdReset">
        </METHOD>
		<!-- 方法：设置启动位置 -->
		<METHOD NAME="WarmReset">
        </METHOD>
		<!-- 方法：设置启动位置 -->
		<METHOD NAME="DiagInterrupt">
        </METHOD>
		<!-- 方法：设置启动位置 -->
		<METHOD NAME="GracefulReboot">
        </METHOD>
		<!-- 方法：安全上电再下电 -->
		<METHOD NAME="PowerCycle">
        </METHOD>
		<!-- 方法：FRU动作 -->
		<METHOD NAME="FruControl">
		     <PARAMETER TYPE="y" NAME="action" DIR="in"/>
			 <PARAMETER TYPE="y" NAME="fruid" DIR="in"/>
        </METHOD>			
		<CLASS NAME="AgentFruPayload"> </CLASS>
	</CLASS>	
	<!--FUNCTION:StoragePayload-->
	<!--
	描述：存储节点上下电特有信息
	所属模块：StoragePayload模块-->
	<CLASS NAME="StoragePayload">
		<!--控制板standby状态-->
		<PROPERTY NAME="StandbyState" TYPE="y">		            </PROPERTY>
		<PROPERTY NAME="OsBootFlg" TYPE="y">                    </PROPERTY>
		<PROPERTY NAME="BiosBootFlg" TYPE="y">                  </PROPERTY>
        <PROPERTY NAME="LastKoOverFlg" TYPE="y">	            </PROPERTY>
		<PROPERTY NAME="BackPowerRunningState" TYPE="y">        </PROPERTY>
		<PROPERTY NAME="MasterFlagState" TYPE="y">              </PROPERTY>
		<PROPERTY NAME="BoardPresentState" TYPE="y">            </PROPERTY>
		<PROPERTY NAME="CurHotSwapState" TYPE="y">              </PROPERTY>
		<PROPERTY NAME="CurPowerOperFlag" TYPE="y">             </PROPERTY>
		<PROPERTY NAME="PowerOnWp" TYPE="y">             		</PROPERTY>
		<PROPERTY NAME="PowerOn" TYPE="y">             			</PROPERTY>
		<PROPERTY NAME="PowerOffWp" TYPE="y">             		</PROPERTY>
		<PROPERTY NAME="PowerOff" TYPE="y">             		</PROPERTY>
		<!--操作逻辑电源开关, 先写0后写1，cpld将打开或者关闭PS_ON-->
		<PROPERTY NAME="PowerSwitch" TYPE="y">                  </PROPERTY>
        <PROPERTY NAME="NotifyCpldSoftOffWp" TYPE="y">            </PROPERTY>
		<!--通知逻辑软下电，cpld通知BIOS走备电-->
		<PROPERTY NAME="NotifyCpldSoftOff" TYPE="y">            </PROPERTY>
		<!--模拟AC DOWN-->
		<PROPERTY NAME="SimACDown" TYPE="y">                    </PROPERTY>
		<!--模拟AC DOWN写保护-->
		<PROPERTY NAME="SimACDownWP" TYPE="y">                  </PROPERTY>
		<PROPERTY NAME="ShortButtonClear" TYPE="y">             </PROPERTY>
		<PROPERTY NAME="LongButtonClear" TYPE="y">              </PROPERTY>
        <PROPERTY NAME="PhySicalButtonLong" TYPE="y">           </PROPERTY>
		<PROPERTY NAME="IsOffingState" TYPE="y">                </PROPERTY>
		<PROPERTY NAME="ClearAbnormalPwr" TYPE="y">             </PROPERTY>
		<PROPERTY NAME="EnclosureType" TYPE="y">                </PROPERTY>
		<!-- 主控向对控同步命令 -->
		<PROPERTY NAME="SendDesPowerCmd" TYPE="y">                </PROPERTY>
		<!-- 从控接收命令 -->
		<PROPERTY NAME="RecDesPowerCmd" TYPE="y">                </PROPERTY>
		<PROPERTY NAME="FistPowerPolicy" TYPE="y">                </PROPERTY>
		<!-- 单板异常掉电辅助定位寄存器 -->
		<PROPERTY NAME="PwrFailRegDebug" TYPE="y">              </PROPERTY>
		<PROPERTY NAME="PwrFailRegVpp" TYPE="y">                </PROPERTY>
		<PROPERTY NAME="PwrFailRegVtt" TYPE="y">                </PROPERTY>
		<PROPERTY NAME="PwrFailRegVcc" TYPE="y">                </PROPERTY>
		<PROPERTY NAME="AcDownEvt" TYPE="y">                    </PROPERTY>
		<PROPERTY NAME="AcDownEvtClear" TYPE="y">               </PROPERTY>
		<PROPERTY NAME="IMUForbidFlag" TYPE="y">                </PROPERTY>
		<PROPERTY NAME="IMUForbidPwrOn" TYPE="y">               </PROPERTY>
		<PROPERTY NAME="PowerMode" TYPE="y">                    </PROPERTY>
		<PROPERTY NAME="PsuNumConfig" TYPE="y">                   </PROPERTY>
		<PROPERTY NAME="WorkingPSUNotEnough" TYPE="y">            </PROPERTY>
		<PROPERTY NAME="SysDisk0PowState" TYPE="y">               </PROPERTY>
		<PROPERTY NAME="SysDisk1PowState" TYPE="y">               </PROPERTY>
		<PROPERTY NAME="PowerRedundanceConfig" TYPE="y">          </PROPERTY>
		<!-- ipmi命令不通时，BIOS写下电标志。 -->
		<PROPERTY NAME="PowerCmdFlag" TYPE="y">                 </PROPERTY>
		<PROPERTY NAME="LocalBoardPresent" TYPE="y">              </PROPERTY>
		<PROPERTY NAME="LocalPresentChange" TYPE="y">             </PROPERTY>
		<PROPERTY NAME="ActionAfterInsert" TYPE="y">             </PROPERTY>
		<!-- 单板装备模式寄存器 -->
		<PROPERTY NAME="BoardEquipMode" TYPE="y">          		  </PROPERTY>
		<PROPERTY NAME="PeerSmmBoardPwrState" TYPE="y">           </PROPERTY>
		<PROPERTY NAME="EnclWorkState" TYPE="y">                  </PROPERTY>
        <!-- 逻辑做狗时狗开关 -->
        <PROPERTY NAME="WatchDogStatus" TYPE="y">                  </PROPERTY>
		<PROPERTY NAME="CurrentRestartCause" TYPE="y">				</PROPERTY>
		<!-- 用于记录大系统上次复位原因-->
		<PROPERTY NAME="LastRestartCause" TYPE="y">					</PROPERTY>
		<!-- 用于记录大系统上上次复位原因-->
		<PROPERTY NAME="BeforeLastRestartCause" TYPE="y">			</PROPERTY>
		<!-- 用于记录大系统复位辅助信息-->
		<PROPERTY NAME="RestartCauseAssistInfo" TYPE="y">			</PROPERTY>
		<!-- 用于记录大系统复位次数-->
		<PROPERTY NAME="RestartCount" TYPE="y">						</PROPERTY>
		<!-- BBU放电开关寄存器-->
		<PROPERTY NAME="BbuDischargeSwitch" TYPE="y">				</PROPERTY>
		<!-- OS启动状态 -->
		<PROPERTY NAME="OsBootState" TYPE="y">				        </PROPERTY>
        <!-- 强制下电类型 0:bmc模拟ACDOWN等待bios通知下电 1:bmc直接写寄存器下电 -->
		<PROPERTY NAME="ForcePowerOffType" TYPE="y">			    </PROPERTY>
		<METHOD NAME="HandleBiosPwrOffCmd">
		</METHOD>
        <METHOD NAME="GetPowerOffFlag">
            <PARAMETER TYPE="y" NAME="PowerOffFlag" DIR="out"/>
		</METHOD>
		<!-- 设置电源冗余配置 -->
		<METHOD NAME="SetPowerConfig">
			<PARAMETER TYPE="y" NAME="ConfigVal" DIR="in"/> 
		</METHOD>
	</CLASS>	
	<!--FUNCTION:StoragePayload-->
	
	<!--FUNCTION:ChassisPayload-->
	<!-- 
	描述：主板上下电信息
	所属模块：Payload模块(Payload)-->
	<CLASS NAME="Payload" ID="15">
	    <!-- AC cycle -->
		<PROPERTY NAME="ACCycle" TYPE="y">		</PROPERTY>
	    <!-- AC cycle 写保护-->
		<PROPERTY NAME="ACCycleProtect" TYPE="y">		</PROPERTY>
		<!--当前ChassisID-->
		<PROPERTY NAME="ChassisID" TYPE="y">		</PROPERTY>
		<!-- 复位标志:
            (0: 没有复位过)
            (1: 已经复位过)
        -->
		<PROPERTY NAME="ResetFlag" TYPE="y">		</PROPERTY>
		<!-- 上电恢复策略:
            (0: 保持下电)
            (1: 与之前保持一致)
			(2: 保持上电)
			(F2: 保持上电且不可修改，F表示只读)
        -->
		<PROPERTY NAME="PowerRestorePolicy" TYPE="y" ID="1" EXPORT="17">		</PROPERTY>	
        <!-- 通电开机策略例外场景:
            (bit0: Firmware Action 升级CPLD/VRD后的主动掉电行为，不执行通电开机策略)
            (bit1-bit30: 暂无）
            (bit31: 用户添加通电开机策略例外场景且发生该场景，通知电源模块不执行通电开机策略
                0: 默认执行通电开机策略
                1：通知电源模块不执行通电开机策略）
        -->
        <PROPERTY NAME="PowerOnStrategyExceptions" TYPE="u">		</PROPERTY>
		<!-- 电源操作是否发生故障:
            (0: 没有)
            (1: 有)
        -->
		<PROPERTY NAME="PowerCtrlFault" TYPE="y">		</PROPERTY>		
		<!-- 电源状态:
            (0: 下电)
            (1: 上电)
        -->
		<PROPERTY NAME="ChassisPowerState" TYPE="y" ID="2">		</PROPERTY>
		<!-- 运行状态:
            (0: 正常运行中)
            (1: 启动过程中)
        -->	
		<PROPERTY NAME="RunningState" TYPE="y">		</PROPERTY>	
		<!-- 重启状态:
            (0: 没有发生)
            (1: 刚刚发生)
			(2: 已发生，并被PME检测到)
        -->	
		<PROPERTY NAME="RestartState" TYPE="y">		</PROPERTY>		
		<!-- 重启原因:
            (0: 未知)
            (1: Chassis control)
			(2: Reset button)
			(3: Power button)
			(4: Watchdog)
			(5: OEM)
			(6: Always restore)
			(7: Restore previous)
			(8: Reset by PEF)
			(9: Power cycle by PEF)
			(10: Soft reset)
			(11: Rtc wakeup)
			(12: Reset by Ac Sp collect)
        -->
		<PROPERTY NAME="RestartCause" TYPE="y" ID="3">		</PROPERTY>		
		<!-- 触发重启通道:
            (0: 下电)
            (1: 上电)
        -->
		<PROPERTY NAME="RestartChannel" TYPE="y" ID="4">		</PROPERTY>
		<!-- 电源状态，RestartCause和RestartChannel组合值，供sensor模块使用-->
		<PROPERTY NAME="RestartValue" TYPE="u">		</PROPERTY>
		<!-- 电源状态，同RestartValue，但针对重启原因是OEM的情况，重启原因更详细，之所以不用RestartValue，是因为受限于IPMI规范，不能影响传感器的值 -->
		<PROPERTY NAME="OEMRestartValue" TYPE="u">		</PROPERTY>
		<!-- 监测BIOS启动状态，连续三次BIOS未正常启动则触发事件告警-->
		<PROPERTY NAME="SysStartupStatus" TYPE="y">		</PROPERTY>
		<!-- 上电超时标志-->
		<PROPERTY NAME="PowerOnTimeout" TYPE="y">		</PROPERTY>
		<!-- 上电超时触发源-->
		<PROPERTY NAME="PowerOnTmSrc" TYPE="y">		</PROPERTY>
		<!-- 电源信号跌落标志-->
		<PROPERTY NAME="PwrOkSigDrop" TYPE="u">		</PROPERTY>
		<!-- 电源信号跌落触发源-->
		<PROPERTY NAME="PwrSigDropSrc" TYPE="y">		</PROPERTY>		
		<!-- 业务启动超时时间，单位ms-->
		<PROPERTY NAME="HostStartTimeout" TYPE="u">		</PROPERTY>
		<!-- 下电超时默认时间，单位s-->
		<PROPERTY NAME="PowerOffTmDefault" TYPE="u">		</PROPERTY>
		<!-- 下电超时实际时间，单位s-->
		<PROPERTY NAME="PowerOffTimeout" TYPE="u" ID="5" EXPORT="17">		</PROPERTY>
		<!-- 下电超时最大时间，单位s-->
		<PROPERTY NAME="PowerOffTmMax" TYPE="u" ID="6">		</PROPERTY>
		<!-- 下电超时最小时间，单位s-->
		<PROPERTY NAME="PowerOffTmMin" TYPE="u" ID="7">		</PROPERTY>
		<!-- 上电延迟模式:
            (0: Short)
            (1: Long half)
			(1: Long fix)
        -->
		<PROPERTY NAME="PowerDelayMode" TYPE="y" ID="14" EXPORT="17">		</PROPERTY>
		<!-- 上电延时时间-->
		<PROPERTY NAME="PowerDelayCount" TYPE="u" ID="15" EXPORT="17">		</PROPERTY>
		<!-- 是否受控上电:
            (0: 自动上电)
            (1: 受控上电)
        -->
		<PROPERTY NAME="IsPowerCtrl" TYPE="y">		</PROPERTY>		
		<!-- 下电超时后强制下电功能标志：
			(0: Disable)
			(1: Enable)
		-->		
		<PROPERTY NAME="PowerOffTimeoutEN" TYPE="u" ID="10" EXPORT="17">		</PROPERTY>	
		<!-- 电源状态变化，更新此属性便于通知-->
		<PROPERTY NAME="PowerStatus" TYPE="y">		</PROPERTY>
		<!-- 电源PG信号状态-->
		<PROPERTY NAME="PowerGd" TYPE="y">		</PROPERTY>
		<!-- 电源ACPI信号状态，关联accessor：
			(0: 下电)
            (1: 上电)
		-->
		<PROPERTY NAME="AcpiStatus" TYPE="y">		</PROPERTY>
		<!-- 电源ACPI信号状态变化，更新此属性便于通知-->
		<PROPERTY NAME="AcpiValue" TYPE="u">		</PROPERTY>
		<!-- 物理强制下电再上电，关联accessor -->
		<PROPERTY NAME="ForcedPowerCycle" TYPE="y">            </PROPERTY>
		<!-- 下电短按钮，关联accessor-->
		<PROPERTY NAME="PwrButtonShort" TYPE="y">		</PROPERTY>
		<!-- 下电长按钮，关联accessor-->
		<PROPERTY NAME="PwrButtonLong" TYPE="y">		</PROPERTY>
		<!-- 系统复位源，关联accessor-->
		<PROPERTY NAME="SysResetSrc" TYPE="y">		</PROPERTY>
		<!-- 系统复位后，更新此属性便于通知-->
		<PROPERTY NAME="SysResetFlag" TYPE="y">		</PROPERTY>
		<!-- NMI中断，关联accessor-->
		<PROPERTY NAME="NMIInterrupt" TYPE="y">		</PROPERTY>
		<!-- 该属性 主要用于提供CMC 查询服务器上次aclost掉电时的上下电状态。
		原因是原来的PwrBeforeACLost属性值被BMC通电策略生效时修改成下电状态导致CMC获取到错误的掉电前上下电状态-->
		<PROPERTY NAME="OriginalPwrBeforeACLost" TYPE="y" ID="9" ></PROPERTY>
		<!-- 掉电前系统电源状态-->
		<PROPERTY NAME="PwrBeforeACLost" TYPE="y" ID="8">		</PROPERTY>
		<!--业务复位写保护，关联accessor-->
		<PROPERTY NAME="HardResetWp" TYPE="y"> </PROPERTY>
		<!--触发业务复位，关联accessor-->
		<PROPERTY NAME="HardReset" TYPE="y">		</PROPERTY>
		<!--屏蔽面板电源按钮，关联accessor，bit0:0 短按不屏蔽 1 短按屏蔽 -->
		<PROPERTY NAME="PwrButtonShield" TYPE="y">		</PROPERTY>
		<!--屏蔽面板电源按钮，表示CPLD版本是否支持屏蔽按键功能 -->
		<PROPERTY NAME="PwrButtonShieldSupport" TYPE="y">		</PROPERTY>
		<!--锁定电源按钮，关联accessor-->
		<PROPERTY NAME="PwrButtonLock" TYPE="y" ID="11" EXPORT="17">		</PROPERTY>	
		<!--锁定电源按钮持久化变量，不关联accessor-->
		<PROPERTY NAME="PwrButtonLockPer" TYPE="y">		</PROPERTY>
		<!-- 如果为1， 按电源按键，CPLD控制上电；如果为0，按电源按键，走软件上电流程 -->
		<PROPERTY NAME="PwrButtonPwrOnEn" TYPE="y">		</PROPERTY>
		<!--检测在位功能标志,0:不需要检测 1:需要检测 如果不需要检测配置成0-->
        <PROPERTY NAME="CheckInsertEn" TYPE="y">		</PROPERTY>
		<!--检测在位信号，关联accessor-->
        <PROPERTY NAME="InsertStatus0" TYPE="y">		</PROPERTY>
		<!--检测在位信号，关联accessor-->
        <PROPERTY NAME="InsertStatus1" TYPE="y">		</PROPERTY>	
		<!--更新在位信息，供其它模块使用-->
        <PROPERTY NAME="BoardStableStatus" TYPE="y">		</PROPERTY>	
		<!--查询电源按钮事件，关联accessor-->	
		<PROPERTY NAME="PwrButtonEvt" TYPE="y">		</PROPERTY>
		<!--电源按钮有事件，更新此属性便于通知-->	
		<PROPERTY NAME="PwrButtonFlag" TYPE="u">		</PROPERTY>
		<!--FRU的control 支持掩码,比如:0x03  表示支持00 :cold reset 01:warm reset
		FRU Control Options are:
		00h = Cold Reset
		01h = Warm Reset
		02h = Graceful Reboot
		03h = Issue Diagnostic Interrupt
		04h - FFh = Reserved-->
		<PROPERTY NAME="FruCtlOption" TYPE="y"/>  <!--新增-->
		<!--Chassis的control 支持掩码,比如:0x03  表示支持00 :power off 01:power on
		Chassis Control Options are:
		00h = POWER OFF
		01h = POWER ON
		02h = POWER CYCLE
		03h = HARD_RESET
		04h = DIAG_INT
		05h = SOFT_OFF
		06h - FFh = Reserved-->
		<PROPERTY NAME="ChassisCtlOption" TYPE="y"/>  <!--新增-->
		<!-- Last Power Event
		[7:5] - reserved
		[4] - 1b = last ‘Power is on’ state was entered via IPMI command
		[3] - 1b = last power down caused by power fault
		[2] - 1b = last power down caused by a power interlock being activated
		[1] - 1b = last power down caused by a Power overload
		[0] - 1b = AC failed -->
		<PROPERTY NAME="ChassisLastPowerEvent" TYPE="y"/>
		<!--FRU的active/deactive 支持掩码,比如:0x01  表示支持active/deactive
		active/deactive Options are:
		00h = active/deactive
		01h - FFh = Reserved-->
		<PROPERTY NAME="ActiveCtlOption" TYPE="y"/>  <!--新增-->
		<!--为了多FRU绑定别名使用-->
		<PROPERTY NAME="FruID" TYPE="y"/>  <!--新增-->		
		<!--BIOS启动失败，切换BIOS分区重新启动，依据是否关联accessor-->	
		<PROPERTY NAME="BiosSwitch" TYPE="y">		</PROPERTY>
		<!--bios度量标志，tpcm特性的bios度量需要接近30s，用于kvm界面呈现度量状态，0-度量完成，1-度量中-->
		<PROPERTY NAME="BiosMeasureFlag" TYPE="y">		</PROPERTY>
		<!-- 
		记录Boot超时后需要做的动作
		(0: No action)
		(1: Hard reset)
		(2: Power down)
		(3: Power cycle)
		-->	
		<PROPERTY NAME="BootTmoutAction" TYPE="y">		</PROPERTY>
		<!--记录BIOS是否启动失败，统计频繁上下电次数，依据是否关联accessor-->	
		<PROPERTY NAME="BiosBootStatus" TYPE="y">		</PROPERTY>
        <!--用于SEL记录Chassis control命令执行事件-->	
        <PROPERTY NAME="ChassisCtrlAction" TYPE="u">		</PROPERTY>
        <!--用于SEL记录System Boot事件-->	        
        <PROPERTY NAME="SYSBootEvent" TYPE="u">		</PROPERTY>    
		<!--禁止上电标志，1表示当前禁止上电，0表示可以上电 -->
		<PROPERTY NAME="ForbidPowerOnFlag" TYPE="y">		</PROPERTY>
		<!--E9000刀片是否被HMM板允许上电:1允许/0不允许(E9000扁平化管理后需要先向HMM请求上电，再向esight请求上电),其他单板不使用此属性;默认值为0-->
		<PROPERTY NAME="BladePowerOnPermit" TYPE="y">		</PROPERTY>
		<!-- BMC执行hop_on上电动作时判定此标志，此标志不允许上电，则需要等待一直等到允许上电.单板默认配置为1允许上电.如CH220V3单板AC上电后需要等待VDDQ寄存器修改完成才能上电 -->
		<PROPERTY NAME="WaitPowerOnPermit" TYPE="y">		</PROPERTY>
		<!-- Power Cycle时间间隔 -->
		<PROPERTY NAME="PowerCycleInterval" TYPE="u">		</PROPERTY>
		<!-- 前次系统上下电测试结果 0表示测试成功，1 表示测试失败-->
		<PROPERTY NAME="LastPowerCycleResult" TYPE="y" ID="12"></PROPERTY>
		<!-- 本次系统上下电测试结果 0表示测试成功，1 表示测试失败-->
		<PROPERTY NAME="CurrentPowerCycleResult" TYPE="y" ID="13"></PROPERTY>
        <!-- CPU过温下电后电源策略:
                    (0: No action)
                    (1: Power on)
                -->	
		<PROPERTY NAME="ThermalTripPowerPolicy" TYPE="y">		</PROPERTY>
		<!--增加thermtrip上电时间间隔，根据不同机型具体配置-->
		<PROPERTY NAME="ThermalTripTimeDelay" TYPE="u">		</PROPERTY>
		<!-- BMC启动后上电状态 -->
		<PROPERTY NAME="PowerstateAfterBMCReset" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="FTPowerGd" TYPE="y">		</PROPERTY>
        <!-- 物理短按按钮事件 -->
        <PROPERTY NAME="PhyButtonShortEvt" TYPE="y">	</PROPERTY>
        <!-- 物理短按按钮事件清除 -->
        <PROPERTY NAME="PhyButtonShortClear" TYPE="y">	</PROPERTY>
		<!-- 方法：Ac Cycle -->
		<METHOD NAME="ACCycle">
			<PARAMETER TYPE="y" NAME="ACCycleValue" DIR="in"/>
        </METHOD>
		<!-- 方法：设置PME已经启动标志 -->
		<METHOD NAME="SetHostStart">
        </METHOD>
		<!-- 方法：电源上电锁寄存器清零 -->
		<METHOD NAME="ClearPowerOnLock">
		</METHOD>
		<!-- 方法：上电业务侧 -->
		<METHOD NAME="PowerOn">
			<PARAMETER TYPE="y" NAME="ErrCode" DIR="out"/>
        </METHOD>
		<!-- 方法：下电业务侧 -->
		<METHOD NAME="PowerOff">
        </METHOD>
		<!-- 方法：强制下电业务侧 -->
		<METHOD NAME="ForcePowerOff">
        </METHOD>
		<!-- 方法：安全重启业务侧 -->
		<METHOD NAME="PowerCycle">
        </METHOD>
		<!-- 方法：复位业务侧 -->
		<METHOD NAME="HardReset">
        </METHOD>
        <!-- 方法：复位业务侧，同HardReset，增加参数 -->
		<METHOD NAME="HardResetWithPara">
            <PARAMETER TYPE="y" NAME="SrcChannel" DIR="in"/> 
            <PARAMETER TYPE="y" NAME="Cause" DIR="in"/> 
        </METHOD>
		<!-- 方法：触发诊断中断 -->
		<METHOD NAME="DiagInterrupt">
        </METHOD>
		<!-- 方法：软下电业务侧 -->
		<METHOD NAME="SoftPowerOff">
        </METHOD>
		<!-- 方法：设置上电恢复策略 -->
		<METHOD NAME="SetPowerRestorePolicy" ID="1">
		<PARAMETER TYPE="y" NAME="Policy" DIR="in"/> 
        </METHOD>
        <!-- 方法：设置上电恢复策略例外场景 -->
        <METHOD NAME="SetPowerOnStrategyExceptions">
			<PARAMETER TYPE="u" NAME="PowerOnStrategyExceptions" DIR="in"/>
        </METHOD>
		<!-- 方法：执行上电恢复策略 -->
		<METHOD NAME="ExePowerRestorePolicy">
        </METHOD>
		<!-- 方法：设置安全重启间隔 -->
		<METHOD NAME="SetPowerCycleInterval">
		<PARAMETER TYPE="y" NAME="Interval" DIR="in"/> 
        </METHOD>
		<!-- 方法：设置下电超时时间 -->
		<METHOD NAME="SetPowerOffTimeout" ID="5">
		<PARAMETER TYPE="u" NAME="Timeout" DIR="in"/> 
        </METHOD>
		<!-- 方法：设置下电超时功能使能标志 -->
		<METHOD NAME="SetPowerOffTimeoutEN" ID="10">
		<PARAMETER TYPE="u" NAME="TimeoutEN" DIR="in"/> 
        </METHOD>
		<!-- 方法：设置电源按钮锁 -->
		<METHOD NAME="SetPowerButtonLock" ID="11">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>		
        </METHOD>		
		<!-- 方法：获取电源按钮锁 -->
		<METHOD NAME="GetPowerButtonLock">
		<PARAMETER TYPE="y" NAME="ButtonLock" DIR="out"/> 
        </METHOD>	
		<!-- 方法：设置受控上电 -->
		<!-- 是否受控上电:
			(0: 自动上电)
			(1: 受控上电)
		-->
		<METHOD NAME="SetPowerCtrl">
		<PARAMETER TYPE="y" NAME="IsPowerCtrl" DIR="in"/> 
		</METHOD>

		<!-- 方法：激活FRU -->
		<METHOD NAME="SetFRUActive">
		<PARAMETER TYPE="y" NAME="active" DIR="in"/> 
		<PARAMETER TYPE="y" NAME="flag" DIR="in"/>
		</METHOD>
		
		<!-- 方法：设置powerlevel -->
		<METHOD NAME="SetPowerLevel">
		<PARAMETER TYPE="y" NAME="fruid" DIR="in"/> 
		<PARAMETER TYPE="y" NAME="level" DIR="in"/>
		<PARAMETER TYPE="y" NAME="option" DIR="in"/>
		</METHOD>
		
		<!-- 方法：设置ForbidPowerOnFlag -->
		<METHOD NAME="SetForbidPowerOnFlag">
			<PARAMETER TYPE="y" NAME="ForbidPowerOnFlag" DIR="in"/>
            <PARAMETER TYPE="y" NAME="mask" DIR="in"/>
		</METHOD>
		<!-- 方法：设置整框掉电事件通知payload模块 -->
		<METHOD NAME="SetBoardPowerDropFlag">
		</METHOD>
		<!-- 方法：设置整框掉电事件通知payload模块 -->
		<METHOD NAME="GetPwrRestoreDoneFlag">
		<PARAMETER TYPE="y" NAME="IsActDoneFlag" DIR="out"/>
		</METHOD>
		<METHOD NAME="PayloadClearRestartValue">
		</METHOD>
		<!-- 方法：设置PowerDelayMode -->
		<METHOD NAME="SetPowerDelayMode" ID="14">
			<PARAMETER TYPE="y" NAME="PowerDelayMode" DIR="in"/> 
		</METHOD>
		<!-- 方法：设置PowerDelayCount -->
		<METHOD NAME="SetPowerDelayCount" ID="15">
			<PARAMETER TYPE="u" NAME="PowerDelayCount" DIR="in"/>
		</METHOD>
		<!-- 方法：设置BMC重启后上电状态 -->
		<METHOD NAME="SetPowerstateAfterBMCReset">
			<PARAMETER TYPE="y" NAME="PowerstateAfterBMCReset" DIR="in"/>
		</METHOD>

        <!-- 方法：reset os dft测试项 -->
        <METHOD NAME="DftResetOsTest">
			<PARAMETER TYPE="u" NAME="cmd"      DIR="in"/>
            <PARAMETER TYPE="*" NAME="*"        DIR="in"/>
            <PARAMETER TYPE="i" NAME="ret"      DIR="out"/>
            <PARAMETER TYPE="*" NAME="*"        DIR="out"/>
        </METHOD>
		<!-- 方法：设置CPU过温下电策略的使能状态 -->
		<METHOD NAME="SetThermalTripPowerPolicy">
			<PARAMETER TYPE="y" NAME="ThermalTripPowerPolicy" DIR="in"/>
		</METHOD>
		<!-- 方法：设置CPU过温下电再上电的间隔秒数 -->
		<METHOD NAME="SetThermalTripTimeDelay">
			<PARAMETER TYPE="u" NAME="ThermalTripTimeDelay" DIR="in"/>
		</METHOD>
	</CLASS>	
	
	<!--payload相关类，end added by qichengming -->	
	
	<!--FUNTION:IPMI-->
	<CLASS NAME="IpmbAddr">
		<PROPERTY NAME="SlaveAddr" TYPE='y'>		</PROPERTY>
		<PROPERTY NAME="SlaveAddrBase" TYPE='y'>	</PROPERTY>
		<PROPERTY NAME="SlaveAddrMulti" TYPE='y'>	</PROPERTY>
		<PROPERTY NAME="SlotId" TYPE='y'>			</PROPERTY>
	</CLASS>
	<CLASS NAME="IpmbEth">
		<PROPERTY NAME="ChanID" TYPE='y'>		</PROPERTY>
		<PROPERTY NAME="SlaveAddr" TYPE='y'>		</PROPERTY>
		<PROPERTY NAME="EthName"  TYPE="as">		</PROPERTY>
		<PROPERTY NAME="SMM1State"  TYPE="y">		</PROPERTY> 
		<PROPERTY NAME="SMM0State"  TYPE="y">		</PROPERTY>
		<!-- 0：通信正常。1：通信失败。 -->
		<PROPERTY NAME="HeartBeat"  TYPE="y">		</PROPERTY>
		<PROPERTY NAME="BakHeartBeat"  TYPE="y">		</PROPERTY>
		<PROPERTY NAME="BaseHeartBeat"  TYPE="y">		</PROPERTY>
		<PROPERTY NAME="FabricHeartBeat"  TYPE="y">		</PROPERTY>
	</CLASS>
	<!--FUNTION:IPMI-->
	<CLASS NAME="Ipmb">
		<PROPERTY NAME="ChanID" TYPE='y'>		</PROPERTY>
		<PROPERTY NAME="SlaveAddr" TYPE='y'>			</PROPERTY>
		<PROPERTY NAME="BusID"  TYPE='ay'>		</PROPERTY>
	</CLASS>
    <!--FUNTION:SSIF-->
	<CLASS NAME="Ssif">
        <!-- I2C id -->
		<PROPERTY NAME="BusId" TYPE='y'>		</PROPERTY>
        <!-- 速率 100：100k。400：400k-->
		<PROPERTY NAME="Speed" TYPE='u'>			</PROPERTY>
        <!-- i2c slave地址 -->
		<PROPERTY NAME="SlaveAddr"  TYPE='y'>		</PROPERTY>
        <!-- 拉低gpio引脚电平，通知master读取ssif消息 -->
        <PROPERTY NAME="SsifRdGpionum"  TYPE='y'>		</PROPERTY>
	</CLASS>
	
	<!--FUNTION:COOLING-->
	<CLASS NAME="Cooling" ID="90">
	    <!-- 调速模式， 0 自动 1 手动-->
		<PROPERTY NAME="Mode" TYPE='y' ID="1" EXPORT="18">					</PROPERTY>
		<!-- 调速功耗模式， 0:默认、正常节能模式 1:高噪、高可靠性模式 0xff:未配置过 -->
		<PROPERTY NAME="PowerMode" TYPE='y' ID="3" EXPORT="17">					</PROPERTY>
		<!-- 调节功耗模式使能：0 不支持，1 支持 -->
		<PROPERTY NAME="PowerModeEnable" TYPE='y'>					</PROPERTY>
	    <!-- 转速级别下限 -->
		<PROPERTY NAME="MinimalLevel" TYPE='y'>					</PROPERTY>
		<!-- 转速级别上限 -->
		<PROPERTY NAME="MaxLimitLevel" TYPE='y'>					</PROPERTY>
		<!-- 设置的转速级别-->
		<PROPERTY NAME="Level"  TYPE='y' ID="2" EXPORT="18">			     </PROPERTY>
		<!-- 手动模式超时时间-->
		<PROPERTY NAME="TimeOut"  TYPE='u'>			     </PROPERTY>
		<!-- 属性保留-->
		<PROPERTY NAME="Cooling_fan_type"  TYPE='y'>	 </PROPERTY>
        <!-- 上电状态-->		
		<PROPERTY NAME="PowerOnState" TYPE="y" />	
        <!-- 散热方式：0 被动 1 主动-->		
		<PROPERTY NAME="CoolingType" TYPE="y" />
        <!-- tcontrol-->		
		<PROPERTY NAME="TControl" TYPE="q" />		
		<!-- 手动情况下默认转速级别-->
		<PROPERTY NAME="InitialLevel" TYPE="y" />	
		<!-- standby下风扇是否可以运转-->		
		<PROPERTY NAME="StandbyFan" TYPE="y" />	
	    <!-- 默认高功耗卡的级别-->
		<PROPERTY NAME="DefThermalLevel" TYPE="y" ID="8"/>
		<!-- 智能调速模式 0x10表示节能模式，0x11表示低噪音模式，0x12表示高性能模式，0x13表示自定义模式-->
		<PROPERTY NAME="SmartCoolingMode" TYPE="y" ID="9" EXPORT="17"/>
		<!-- 是否有硬盘温度获取不到-->
		<PROPERTY NAME="ObtainDisksTempFailed" TYPE="y" />
		<!-- 风扇100%的时候PWM的值 -->
		<PROPERTY NAME="MaxSupportPWM"  TYPE='q'>	 </PROPERTY>
		<!-- StopFanCond不为0时,风扇停转-->
		<PROPERTY NAME="StopFanCond"  TYPE='y'>	 </PROPERTY>
		<!-- 冷却介质 0：风冷 1：液冷-->
		<PROPERTY NAME="Medium"  TYPE='y' ID="4">	 </PROPERTY>
		<!-- 风扇转速算法， 0 PID 调速、1 区间调速-->
		<PROPERTY NAME="FanSpeedAlgorithm" TYPE='y' ID="5" >	</PROPERTY>
		<!-- SmartCooling使能标识，1 使能 0 不使能-->
		<PROPERTY NAME="SmartCoolingEnable"  TYPE='y' ID="7">		 </PROPERTY>
		<!--自定义模式下支持设置的部件 -->
		<!--
		bit0:进风口温度
		bit1:Cpu温度
		bit2:出风口温度
		bit3:硬盘区间温度
		bit4:硬盘目标温度
		bit5:内存温度
		bit6:PCH温度
		bit7:VRD温度
		bit8:VDDQ温度
		bit9:NPU HBM温度
		bit10:NPU AICORE温度
		bit11:NPU BOARD TEMP
		-->
		<PROPERTY NAME="CustomSettingMask"  TYPE='u' ID="11">		 </PROPERTY>
		<!--自定义模式下出风口目标温度值-->
		<PROPERTY NAME="CustomOutletTobj"  TYPE='y' ID="10" EXPORT="17">		 </PROPERTY>
		<!-- 自定义模式下CPU目标温度值-->
		<PROPERTY NAME="CustomCpuCoremTobj"  TYPE='y' ID="6" EXPORT="17">		 </PROPERTY>
		<!-- CPU目标温度所能设置的最大温度边界值为Tjmax-11，此处将11设置为属性保存 -->
		<PROPERTY NAME="CpuCoremTobjTjmaxDiff"  TYPE='y'>		 </PROPERTY>		
		<!-- 自定义模式CPU目标温度可配置范围 -->
		<PROPERTY NAME="CustomCpuCoremTobjRangeMax"  TYPE='q' ID="15" EXPORT="18">		 </PROPERTY>	
		<PROPERTY NAME="CustomCpuCoremTobjRangeMin"  TYPE='q' ID="14" EXPORT="18">		 </PROPERTY>			
		<!-- 自定义模式出风口目标温度可配置范围 -->
		<PROPERTY NAME="CustomOutletTobjRange"  TYPE='aq' ID="13" EXPORT="18">		 </PROPERTY>		
		<!-- 自定义模式进风口目风扇转速可配置范围 -->
		<PROPERTY NAME="CustomInletSpeedRange"  TYPE='aq' ID="12" EXPORT="18">		 </PROPERTY>
		<!-- 自定义模式硬盘风扇转速可配置范围 -->
		<PROPERTY NAME="CustomDiskSpeedRange" TYPE='aq' ID="16" EXPORT="18">		 </PROPERTY>
		<!--自定义模式下硬盘目标温度值-->
		<PROPERTY NAME="CustomDiskTobj"  TYPE='y' ID="17" EXPORT="17">		 </PROPERTY>
		<!-- 自定义模式硬盘目标温度可配置范围 -->
		<PROPERTY NAME="CustomDiskTobjRange"  TYPE='aq' ID="18" EXPORT="18">		 </PROPERTY>
		<!--自定义模式下内存目标温度值-->
		<PROPERTY NAME="CustomMemoryTobj"  TYPE='y' ID="19" EXPORT="17">		 </PROPERTY>
		<!-- 自定义模式内存目标温度可配置范围 -->
		<PROPERTY NAME="CustomMemoryTobjRange"  TYPE='aq' ID="20" EXPORT="18">		 </PROPERTY>
		<!-- 自定义模式下PCH目标温度值-->
		<PROPERTY NAME="CustomPCHTobj"  TYPE='y' ID="21" EXPORT="17">		 </PROPERTY>
		<!-- 自定义模式PCH目标温度可配置范围 -->
		<PROPERTY NAME="CustomPCHTobjRange"  TYPE='aq' ID="22" EXPORT="18">		 </PROPERTY>
		<!-- 自定义模式下VRD目标温度值-->
		<PROPERTY NAME="CustomVRDTobj"  TYPE='y' ID="23" EXPORT="17">		 </PROPERTY>
		<!-- 自定义模式VRD目标温度可配置范围 -->
		<PROPERTY NAME="CustomVRDTobjRange"  TYPE='aq' ID="24" EXPORT="18">		 </PROPERTY>
		<!-- 自定义模式下VDDQ目标温度值-->
		<PROPERTY NAME="CustomVDDQTobj"  TYPE='y' ID="25" EXPORT="17">		 </PROPERTY>
		<!-- 自定义模式VDDQ目标温度可配置范围 -->
		<PROPERTY NAME="CustomVDDQTobjRange"  TYPE='aq' ID="26" EXPORT="18">		 </PROPERTY>
		<!-- 自定义模式下NPU HBM目标温度值-->
		<PROPERTY NAME="CustomNpuHbmTobj" TYPE='y' ID="27" EXPORT="17">	</PROPERTY>
		<!-- 自定义模式NPU HBM目标温度可配置范围 -->
		<PROPERTY NAME="CustomNpuHbmTobjRange" TYPE='aq' ID="28" EXPORT="18">	</PROPERTY>
		<!-- 自定义模式下NPU ai core目标温度值-->
		<PROPERTY NAME="CustomNpuAiCoreTobj" TYPE='y' ID="29" EXPORT="17">	</PROPERTY>
		<!-- 自定义模式NPU ai core目标温度可配置范围 -->
		<PROPERTY NAME="CustomNpuAiCoreTobjRange" TYPE='aq' ID="30" EXPORT="18">	</PROPERTY>
		<!-- 自定义模式下NPU BOARD TEMP目标温度值-->
		<PROPERTY NAME="CustomNpuBoardTobj" TYPE='y' ID="32" EXPORT="17">	</PROPERTY>
		<!-- 自定义模式NPU BOARD TEMP目标温度可配置范围 -->
		<PROPERTY NAME="CustomNpuBoardTobjRange" TYPE='aq' ID="33" EXPORT="18">	</PROPERTY>
		<!-- 自定义模式下SoC主板进风口目标温度值-->
		<PROPERTY NAME="CustomSoCBoardInletTobj" TYPE='y' ID="34" EXPORT="17">	</PROPERTY>
		<!-- 自定义模式SoC主板进风口目标温度可配置范围 -->
		<PROPERTY NAME="CustomSoCBoardInletTobjRange" TYPE='aq' ID="35" EXPORT="18">	</PROPERTY>
		<!-- 自定义模式下SoC主板出风口目标温度值-->
		<PROPERTY NAME="CustomSoCBoardOutletTobj" TYPE='y' ID="36" EXPORT="17">	</PROPERTY>
		<!-- 自定义模式SoC主板出风口目标温度可配置范围 -->
		<PROPERTY NAME="CustomSoCBoardOutletTobjRange" TYPE='aq' ID="37" EXPORT="18">	</PROPERTY>
		<!-- 机框分区调速支持性 -->
		<PROPERTY NAME="ChassisPartCoolingEnable" TYPE="y">		</PROPERTY>
		<!-- 远端是否支持PID, 默认值0表示支持或者不涉及PID调速,,1不支持(OSCA V5刀片配套老的HMM,HMM可能不支持PID)-->
		<PROPERTY NAME="RMCUnSupportPid" TYPE='y'>					</PROPERTY>
		<!-- 识别风扇转速时使用的百分比 -->
		<PROPERTY NAME="IdentifySpeedLevel" TYPE='y'>					</PROPERTY>
		<!-- 识别到风扇的CLASSFANTYPE.Index -->
		<PROPERTY NAME="IdentifiedFanTypeIndex" TYPE='y'>					</PROPERTY>
		<!-- Cooling生效 -->
		<PROPERTY NAME="CoolingEffective" TYPE='y'>					</PROPERTY>
		<!-- Dft模式下 AC上电至散热模块生效前默认的转速 单位 %-->
		<PROPERTY NAME="DftFanDefaultLevel" TYPE='y'>			</PROPERTY>
		<!-- AC上电通电开机场景风扇默认速率比，单位 % -->
		<PROPERTY NAME="FanInitDefaultLevel" TYPE="y">			</PROPERTY>
		<!-- 风扇当前功耗 -->
		<PROPERTY NAME="FansPowerConsumption" TYPE="q"></PROPERTY>
		<!--漏液后的下电策略，0表示手动（漏液后仅告警，需要手动下电），1表示自动（漏液告警，BMC自动下电OS）-->
		<PROPERTY NAME="Policy" TYPE="y" ID="31" EXPORT="17"> </PROPERTY>
		<!--Cooling App开始初始化，默认为0，当cooling模块启动时设置为1，不持久化-->
		<PROPERTY NAME="CoolingStartInit" TYPE='y'></PROPERTY>
        <!-- 风扇类型识别方式 0: 通过风扇转速识别, 1: 通过CPLD识别 -->
		<PROPERTY NAME="FanTypeIdentifiedWay" TYPE='y'> </PROPERTY>
       <!--  手动模式控制风扇的节点号 -->
		<PROPERTY NAME="FanManualModeCtrlNode" TYPE='y'> </PROPERTY>
        <!-- 当前在位风扇最大的实际转速 -->
        <PROPERTY NAME="MaxFanSpeed" TYPE="y">      </PROPERTY>
        <!-- 当前异常的风扇转子总数 -->
        <PROPERTY NAME="FaultRotorNum" TYPE="y">    </PROPERTY>
        <!-- 当前控制器控制风扇的模式：0 - 不可以控制；1 - 可以控制 -->
        <!-- 此属性由使用者按照具体的业务场景调整，比如只有主控控制，则可以关联AsmObject.AsStatus -->
        <PROPERTY NAME="FanCtrlMode" TYPE="y">      </PROPERTY>
        <!-- 当前风扇状态扫描模式：0 - 由BMC进行扫描判断； 1 - 由智能风扇MCU扫描判断 -->
        <PROPERTY NAME="FanStatusScanMode" TYPE="y"></PROPERTY>
        <!-- 散热是否支持功耗预封顶：0 - 不支持； 1 - 支持（分布式存储有整框功耗预封顶流程，和功耗封顶流程是两个独立流程） -->
        <PROPERTY NAME="PowerPreCappingEnable" TYPE="y"></PROPERTY>
        <!-- 散热预封顶状态：0 - 关闭； 1 - 开启（分布式存储有整框功耗预封顶流程，和功耗封顶流程是两个独立流程）-->
        <PROPERTY NAME="PowerPreCappingState" TYPE="y"></PROPERTY>
        <!-- 是否支持PID模块的高温识别功能, 0 - 不支持； 1 - 支持。默认需要高温识别功能，产品根据需要配置禁用 -->
        <PROPERTY NAME="PidModeRecogniseEnable" TYPE="y"></PROPERTY>
        <!-- 发送给pid模块的调速触发全速对应容忍量 -->
        <PROPERTY NAME="PolicyClassTmaxTolerance" TYPE="y"></PROPERTY>

		<!-- 设置目标温度 -->
		<METHOD NAME="SetOutletTobj" ID="10">
			<PARAMETER TYPE="y" NAME="CustomOutletTobj" DIR="in"/>
		</METHOD>
		<!-- 设置目标温度 -->
		<METHOD NAME="SetCpuTobj" ID="6">
			<PARAMETER TYPE="y" NAME="CustomCpuCoremTobj" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetDiskTobj" ID="17">
			<PARAMETER TYPE="y" NAME="Tobj" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetMemoryTobj" ID="19">
			<PARAMETER TYPE="y" NAME="Tobj" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetPCHTobj" ID="21">
			<PARAMETER TYPE="y" NAME="Tobj" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetVRDTobj" ID="23">
			<PARAMETER TYPE="y" NAME="Tobj" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetVDDQTobj" ID="25">
			<PARAMETER TYPE="y" NAME="Tobj" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetNPUHbmTobj" ID="27">
			<PARAMETER TYPE="y" NAME="Tobj" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetNPUAiCoreTobj" ID="29">
			<PARAMETER TYPE="y" NAME="Tobj" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetNPUBoardTobj" ID="32">
			<PARAMETER TYPE="y" NAME="Tobj" DIR="in"/>
		</METHOD>
		<!-- 设置SoC主板进风口目标温度 -->
		<METHOD NAME="SetSoCBoardInletTobj" ID="34">
			<PARAMETER TYPE="y" NAME="Tobj" DIR="in"/>
		</METHOD>
		<!-- 设置SoC主板出风口目标温度 -->
		<METHOD NAME="SetSoCBoardOutletTobj" ID="36">
			<PARAMETER TYPE="y" NAME="Tobj" DIR="in"/>
		</METHOD>
	    <!-- 方法：设置散热模式-->		
		<METHOD NAME="SetCoolingMode">
			<PARAMETER TYPE="y" NAME="Mode" DIR="in"/>
			<PARAMETER TYPE="u" NAME="TimeOut" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
		</METHOD>	
		<!-- 方法：设置SMARTCOOLING调速模式 -->		
		<!--      
			0-default
			1-high fan speed
			2-middle fan speed
			0x10 节能模式
			0x11 低噪声模式
			0x12 高性能模式
			0x13 用户自定义模式
		-->
		<METHOD NAME="SetSmartCoolingMode"  ID="9">
			<PARAMETER TYPE="y" NAME="DefThermalLevel" DIR="in"/>
		</METHOD>
		<!-- 方法：设置调速功耗模式 -->		
		<!-- 0:默认、正常节能模式 1:高噪、高可靠性模式 -->
		<METHOD NAME="SetCoolingPowerMode"  ID="3">
			<PARAMETER TYPE="y" NAME="PowerMode" DIR="in"/>
		</METHOD>
	    <!-- 方法：设置风扇转速-->	
		<METHOD NAME="SetFanLevel" ID="2">
			<PARAMETER TYPE="y" NAME="Level" DIR="in"/>
        </METHOD>
		<!-- 方法：AC上电通电开机场景设置风扇转速 -->
		<METHOD NAME="SetInitFanLevel">
			<PARAMETER TYPE="y" NAME="Level" DIR="in"/>
		</METHOD>
	 <!-- 方法：设置冷却介质-->	
        <METHOD NAME="SetCoolingMedium" ID="4">
			<PARAMETER TYPE="y" NAME="Medium" DIR="in"/>
        </METHOD>
	 <!-- 方法：设置单个风扇转速-->	
        <METHOD NAME="SetSingleFanLevel">
			<PARAMETER TYPE="y" NAME="Level" DIR="in"/>
            <PARAMETER TYPE="y" NAME="FanId" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetThermalSrcState">
			<PARAMETER TYPE="y" NAME="id" DIR="in"/>
			<PARAMETER TYPE="y" NAME="presence" DIR="in"/>
        </METHOD>	
        
	    <!-- 方法：获取cpu散热参数-->	
	    <METHOD NAME="GetCpuThermalInfo">
			<PARAMETER TYPE="y" NAME="tcontrol" DIR="in"/>
			<PARAMETER TYPE="y" NAME="M" DIR="out"/>
			<PARAMETER TYPE="y" NAME="N" DIR="out"/>	
			<PARAMETER TYPE="y" NAME="UpStep" DIR="out"/>
			<PARAMETER TYPE="y" NAME="DownStep" DIR="out"/>			
        </METHOD>		
	    <!-- 方法：获取风扇总功率-->	
		<METHOD NAME="GetTotolFanPower">
			<PARAMETER TYPE="d" NAME="FanTotolPower" DIR="out"/>
        </METHOD>
        
        <!-- SMM 使用方法 -->
        <METHOD NAME="SetBladeCoolingMedium">
            <PARAMETER TYPE="i" NAME="Slot" DIR="in"/>
            <PARAMETER TYPE="y" NAME="Medium" DIR="in"/>
        </METHOD>
        <METHOD NAME="GetFanState">
            <PARAMETER TYPE="i" NAME="Slot" DIR="in"/>
            <PARAMETER TYPE="s" NAME="State" DIR="out"/>
            <PARAMETER TYPE="i" NAME="Speed" DIR="out"/>
            <PARAMETER TYPE="i" NAME="Present" DIR="out"/>
        </METHOD>
        <METHOD NAME="PostTempAlarm">
            <PARAMETER TYPE="i" NAME="Slot" DIR="in"/>
            <PARAMETER TYPE="i" NAME="SensorID" DIR="in"/>
            <PARAMETER TYPE="i" NAME="Direction" DIR="in"/>
            <PARAMETER TYPE="i" NAME="Level" DIR="in"/>
        </METHOD>
        <METHOD NAME="SetAllTempAlarm">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
        </METHOD>
        <!-- 用于模拟测试风扇偏差过大(1)、硬件访问异常(2)等场景 -->
        <METHOD NAME="TestSetFanValue">
            <PARAMETER TYPE="y" NAME="FanId" DIR="in"/>
            <PARAMETER TYPE="y" NAME="item" DIR="in"/>
            <PARAMETER TYPE="y" NAME="value" DIR="in"/>
        </METHOD>
        <!-- 用于属性同步 -->
		<METHOD NAME="PropertySyncMethod">
		    <PARAMETER TYPE="*" NAME="*" DIR="in"/>
		    <PARAMETER TYPE="*" NAME="*" DIR="out"/>
		</METHOD>
        <!-- 用于属性同步 Cooling对象中不需要持久化的属性用该方法同步，需要持久化的属性用PropertySyncMethod同步 -->
        <METHOD NAME="ModePropertySyncMethod">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
            <PARAMETER TYPE="*" NAME="*" DIR="out"/>
        </METHOD>
		<METHOD NAME="PropertySavedSyncMethod">
		    <PARAMETER TYPE="*" NAME="*" DIR="in"/>
		    <PARAMETER TYPE="*" NAME="*" DIR="out"/>
		</METHOD>
        <!-- 用于将cooling设置为升级状态，该状态不作调速 -->
		<METHOD NAME="SetFanUpgradeState">
            <PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>
		<!--方法：设置漏液后的下电策略-->
		<METHOD NAME="SetLeakageAction" ID="31">
			<PARAMETER TYPE="y" NAME="Policy" DIR="in"/>
		</METHOD>
		<METHOD NAME="GetManualFanLevel">
			<PARAMETER TYPE="aq" NAME="FanInfo" DIR="out"/>
		</METHOD>

        <!-- 获取当前节点PID计算的PWM，综合多控PWM进行调速时远程调用使用此方法 -->
        <METHOD NAME="GetCurrentPWM">
            <PARAMETER TYPE="q" NAME="PWM" DIR="out"/>
        </METHOD>
        <METHOD NAME="GetFanCtrlFlag">
            <PARAMETER TYPE="y" NAME="flag" DIR="out"/>
        </METHOD>
        <!-- 主控接收所有从控PWM值的回调函数 -->
        <METHOD NAME="ReceiveAllSlavePwm">
            <PARAMETER TYPE="y" NAME="slot" DIR="in"/>
            <PARAMETER TYPE="q" NAME="pwm" DIR="in"/>
        </METHOD>
        <!-- 设置散热预封顶状态 -->
		<METHOD NAME="SetPowerPreCappingState">
			<PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>

		<!-- agent派生类,用于同步 -->
		<CLASS NAME="AgentCooling"> </CLASS>

        <METHOD NAME="SetFanRoutineStop">
            <PARAMETER TYPE="y" NAME="StopFlag" DIR="in"/>
        </METHOD>

	</CLASS>

	<CLASS NAME="AdditionalFan">
		<PROPERTY NAME="flag" TYPE="y"/>
	</CLASS> 	
    <CLASS NAME="FanSpeedLimit">
        <!-- 转速级别上限 -->
        <PROPERTY NAME="MaxLimitLevel"  TYPE='y'/>
        <PROPERTY NAME="IsValid" TYPE="y"/>
	</CLASS>
	<!-- 标志由多个特定属性所标识的特定类对象是否存在 -->
	<CLASS NAME="Condition">
		<!-- 存在标志 0：不存在 1：存在 -->
		<PROPERTY NAME="IsTrue" TYPE="y">			</PROPERTY>
		<!-- RefClass关联的对象之间的组合关系 -->
		<PROPERTY NAME="ObjComboType" TYPE='y'>		</PROPERTY>
		<!-- 属性组合关系 0：或 1：与 -->
		<PROPERTY NAME="ComboType" TYPE='y'>		</PROPERTY>
		<!-- 关联的指定类 -->
		<PROPERTY NAME="RefClass" TYPE='s'>			</PROPERTY>
		<!-- 一或多个特定属性 -->
		<PROPERTY NAME="RefProperties" TYPE='as'>	</PROPERTY>
		<!-- 一或多个属性数值,即使未使用,Value个数至少也要和RefProperties Value个数相同 -->
		<PROPERTY NAME="MatchValue" TYPE='au'>		</PROPERTY>
		<!-- 一或多个属性字符串值,即使未使用,Value个数至少也要和RefProperties Value个数相同 -->
		<PROPERTY NAME="MatchString" TYPE='as'>		</PROPERTY>
	</CLASS>
    
	<!-- 判断某个数据是否在数据组里面 -->
	<CLASS NAME="DataCondition">
		<!-- 存在标志 0：不存在 1：存在 -->
		<PROPERTY NAME="IsTrue" TYPE='y'>	</PROPERTY>
		<!-- 输入数据 -->
		<PROPERTY NAME="Input" TYPE='*'>		</PROPERTY>
		<!-- 数据集合,类型需要和Input保持一致 -->
		<PROPERTY NAME="DataSet" TYPE='*'>		</PROPERTY>
		<!-- 上一次有效输入数据 -->
		<PROPERTY NAME="ValidData" TYPE='*'>		</PROPERTY>
		<!-- ValidData更新逻辑标志 0：IsTrue由0变为1时ValidData更新为Input  1：IsTrue由1变为0时ValidData更新为Input -->
		<PROPERTY NAME="VDataUpdateLogic" TYPE='y'>		</PROPERTY>
	</CLASS>

	<!-- 风扇类 -->
	<CLASS ID="38" NAME="FANClass">
		<PROPERTY NAME="FANID" TYPE='q' ID="10">				</PROPERTY>
		<PROPERTY NAME="FanHealth" TYPE="y" ID="8" >		    </PROPERTY>
		<PROPERTY NAME="FanEntity" TYPE="ro">			</PROPERTY> 
		<!-- 前风扇转速，从acceesor中获取 -->		
		<PROPERTY NAME="FSpeed" TYPE='q'>				</PROPERTY>
		<!-- 后风扇转速 从acceesor中获取 -->		
		<PROPERTY NAME="RSpeed"  TYPE='q'>			    </PROPERTY>
		<!-- 前风扇状态 -->			
		<PROPERTY NAME="FSTATUS"  TYPE='y'>			    </PROPERTY>	
		<!-- 后风扇状态 -->	
		<PROPERTY NAME="RSTATUS"  TYPE='y'>			    </PROPERTY>	
		<!-- 风扇类型 -->			
		<PROPERTY NAME="TYPE"  TYPE='y'>			    </PROPERTY>	
		<!-- 硬件占空比，用于从硬件获取实际占空比 -->			
		<PROPERTY NAME="PWMHW"  TYPE='u'>			    </PROPERTY>	
		<!-- 预期的硬件占空比，用于与实际转速比较，判断转速是否偏差过大 -->			
		<PROPERTY NAME="ExpectPWM"  TYPE='u'>			    </PROPERTY>	
		<!-- 占空比，用于web呈现 -->	
		<PROPERTY NAME="PWM" TYPE="y" ID="7" >			        </PROPERTY>		
		<!-- 前风扇转速，用于显示 -->			
		<PROPERTY NAME="FRPM" TYPE="q" ID="5" >			        </PROPERTY>	
		<!-- 风扇槽位 -->			
		<PROPERTY NAME="FANSlot"  TYPE="y"  ID="9">			        </PROPERTY>	
		<!-- 后风扇转速，用于显示 -->	
		<PROPERTY NAME="RRPM" TYPE="q" ID="6" >			        </PROPERTY>	
		<!-- 前风扇在位-->	
		<PROPERTY NAME="Presence" TYPE="y" ID="2" >			        </PROPERTY>	
		<!-- 后风扇在位-->	
		<PROPERTY NAME="PresenceR" TYPE="y" ID="3" >			        </PROPERTY>	
		<!-- 风扇转速系数-->	
        	<PROPERTY NAME="Coefficient"  TYPE='y'>                 </PROPERTY>
		<!-- 风扇类型，动态识别-->	
        <PROPERTY NAME="Model" TYPE="s" ID="4" >        </PROPERTY>

        <!-- 前风扇转子转速同步值：用于主向备同步 -->
        <PROPERTY NAME="SyncFSpeed" TYPE='q'>           </PROPERTY>
        <!-- 后风扇转子转速同步值：用于主向备同步 -->
        <PROPERTY NAME="SyncRSpeed" TYPE='q'>           </PROPERTY>
        <!-- 前风扇转子状态同步值：用于主向备同步 -->
        <PROPERTY NAME="SyncFStatus" TYPE='y'>          </PROPERTY>
        <!-- 后风扇转子状态同步值：用于主向备同步 -->
        <PROPERTY NAME="SyncRStatus" TYPE='y'>          </PROPERTY>
        <!-- 风扇告警灯，用于非智能风扇需要BMC点风扇灯的场景, 关联Accessor -->
        <PROPERTY NAME="FanAlarmLed"  TYPE='u'>         </PROPERTY>
        <!-- 转速级别上限，即本风扇当前允许的最大转速, 范围是0~100, 为0时表示不对当前风扇的最大转速进行单独限制 -->
        <PROPERTY NAME="MaxLimitLevel"  TYPE='y'>       </PROPERTY>

		<!-- agent派生类,用于同步 -->
		<CLASS NAME="AgentFANClass"> </CLASS>
        	<!-- 物理位置 -->
        	<PROPERTY NAME="Location" TYPE="s"></PROPERTY>
        	<!-- 功能组 -->
        	<PROPERTY NAME="Function" TYPE="s"></PROPERTY>
        	<!-- 部件名称 -->
        	<PROPERTY NAME="DeviceName" TYPE="s" ID="1" ></PROPERTY>
    		<!-- 本地、远程风扇 0 表示本地 1表示远程 3表示风扇在单板上(redfish的/enc/接口不显示风扇资源) -->
		<PROPERTY NAME="Locality"  TYPE="y">	 	</PROPERTY>
		<!-- 远程风扇对象引用-->
     		<PROPERTY NAME="RimmObj" TYPE="ro">             </PROPERTY>
		<!-- 风扇的部件号-->	
		<PROPERTY NAME="PartNum" TYPE="s">            </PROPERTY>
		<!-- 风扇绑定的节点号-->
		<PROPERTY NAME="IncludeBlades" TYPE="ay">		</PROPERTY>
	    	<!-- 框级风扇派生类，用于smm板 -->
		<CLASS NAME="SMMFANClass">
		    <!-- 用于绑定风扇的硬件信息读取和设置的accessor -->
		    <PROPERTY NAME="IO" TYPE="s"></PROPERTY>
		    <!-- 用于绑定读取风扇FRU信息的accessor -->
		    <PROPERTY NAME="FruEeprom" TYPE="s"></PROPERTY>
		    <!-- 风扇PCBVersion -->
		    <PROPERTY NAME="PCBVersion" TYPE="y"></PROPERTY>
		    <!-- 风扇SoftVersion -->
		    <PROPERTY NAME="SoftVersion" TYPE="y"></PROPERTY>
		    <!-- 风扇当前设置的速度，用于同步 -->
		    <PROPERTY NAME="Speed" TYPE="y"></PROPERTY>
            <!-- 对于单个风扇的起调速度 -->
		    <PROPERTY NAME="MinimalLevel" TYPE="y"></PROPERTY>
		    <!-- 属于哪个FanGroup组，由app填写，置空即可 -->
		    <PROPERTY NAME="FanGroup" TYPE="y"></PROPERTY>
		    <METHOD NAME="ReadFanElable">
		        <PARAMETER TYPE="y" NAME="FanId" DIR="in"/>
		        <PARAMETER TYPE="ay" NAME="Elable" DIR="out"/>
		    </METHOD>	
		    <METHOD NAME="WriteFanElable" >
		        <PARAMETER TYPE="y" NAME="FanId" DIR="in"/>
		        <PARAMETER TYPE="ay" NAME="Elable" DIR="in"/>
		    </METHOD>  
		    <!-- 用于属性同步 -->
		    <METHOD NAME="PropertySyncMethod">
		        <PARAMETER TYPE="*" NAME="*" DIR="in"/>
		        <PARAMETER TYPE="*" NAME="*" DIR="out"/>
		    </METHOD>
            <!-- 管理板给自身汇总APP发送风扇调速信息 -->
            <METHOD NAME = "SetFanSpeed">
                <PARAMETER TYPE="*" NAME="*" DIR="in"/>
                <PARAMETER TYPE="*" NAME="*" DIR="out"/>
            </METHOD>
		</CLASS>

        <!-- 风扇属性同步 -->
        <METHOD NAME="SyncFanInfoMethod">
            <PARAMETER DIR="in"  TYPE="*" NAME="*"/>
            <PARAMETER DIR="out" TYPE="*" NAME="*"/>
        </METHOD>
    </CLASS>
	
    <CLASS NAME="CLASSFANTYPE" >
	    <!-- 类型的名字-->	
	    <PROPERTY NAME="Name" TYPE="s">             </PROPERTY>
	    <!--
		类型的索引
		如果需要通过ipmi写入风扇类型索引，请按照如下规则适配CLASSFANTYPE.Index，以确保与ipmi命令字的风扇类型索引定义规则匹配：
			0：8038  1：8038+  2：8038++  3：8080  4：8080+  5: 8080++  6: 4056  7: 4056+  8: 4056++  9: 悟空风扇
		-->
        <PROPERTY NAME="Index" TYPE="y">            </PROPERTY>
	    <!-- 该类型是否作为默认的类型,重要:必须要有一个默认配置-->	
	    <PROPERTY NAME="DefaultType" TYPE="y">      </PROPERTY>
        <!-- 50%占空比的时候，风扇的转速-->
	    <PROPERTY NAME="SpeedAtHarfPWM" TYPE="au">  </PROPERTY>
        <!-- 是否对旋-->		
	    <PROPERTY NAME="Twins" TYPE='y'>            </PROPERTY>	
        <!-- 和该类型冲突的CPU-->		
	    <PROPERTY NAME="ExcludeCpuType" TYPE='as'>  </PROPERTY>
        <!-- 和该类型冲突的PCIE卡-->		
		<PROPERTY NAME="ExcludePCIEType" TYPE='au'> </PROPERTY>
		
        <PROPERTY NAME="MainBoardID" TYPE='q'>      </PROPERTY>	
        <!-- 前风扇转速-->
        <PROPERTY NAME="Fspeed" TYPE='u'>           </PROPERTY>	 
        <!-- 后风扇转速-->		
        <PROPERTY NAME="Rspeed" TYPE='u'>           </PROPERTY>			
        <!-- 转速测试点 占空比乘以100 用整形表示 -->		
        <PROPERTY NAME="SpeedRange" TYPE='ay'>           </PROPERTY>			
        <!-- 转速测速点对应的功率 瓦数乘以100 用整形表示 -->		
        <PROPERTY NAME="PowerRange" TYPE='au'>           </PROPERTY>
		<!-- 风扇的部件号-->	
		<PROPERTY NAME="PartNum" TYPE="s">            </PROPERTY>		
    </CLASS>

	<CLASS NAME="FanGroup"> 
		<!-- 风扇分组ID-->
		<PROPERTY NAME="ID" TYPE="y">                  </PROPERTY> 
		<!-- 分组内的风扇对象-->		
		<PROPERTY NAME="FanObj" TYPE="roa">            </PROPERTY>
	    
	        <!-- 框级风扇组派生类，用于smm板 -->
	        <CLASS NAME="SMMFanGroup">
	            <!-- 分组内的风扇slotid -->
	            <PROPERTY NAME="FanSlot" TYPE="au"></PROPERTY>
	            <!-- 分组内的单板的ipmb slaveaddr -->
	            <PROPERTY NAME="DevAddr" TYPE="au"></PROPERTY>
	            <!-- 分组内可支持最大可配置的风扇数量 -->
	            <PROPERTY NAME="MaxFanNum" TYPE="y"></PROPERTY>
	            <!-- 分组内满足最低要求下的最小风扇数量（当可正常运行的风扇数量小于该数量时，冗余失效） -->
	            <PROPERTY NAME="MinFanNum" TYPE="y"></PROPERTY>
                <!-- 该分组的起调速度 -->
	            <PROPERTY NAME="MinimalLevel" TYPE="y"></PROPERTY>
	            <!-- 该分组的速度 -->
	            <PROPERTY NAME="Speed" TYPE="y"></PROPERTY>
	            <!-- redfish资源，分组健康状态：
	                当该分组内有1个风扇处于不健康的状态时，分组处于warning
	                当该分组内有2个或2个以上的风扇处于不健康的状态时，分组处于critical-->
	            <PROPERTY NAME="Health" TYPE="y"></PROPERTY>
	            <!-- redfish资源，当前风扇组冗余生效状态：
	                当该分组在位风扇小于MinFanNum时status置1，其他情况置0-->
	            <PROPERTY NAME="Status" TYPE="y"></PROPERTY>
	            <!-- 当前风扇组的冗余模式，0 为 N+1 -->
	            <PROPERTY NAME="Mode" TYPE="y"></PROPERTY>
            
	            <METHOD NAME="PropertySyncMethod">
	                <PARAMETER TYPE="*" NAME="*" DIR="in"/>
	                <PARAMETER TYPE="*" NAME="*" DIR="out"/>
	            </METHOD>
	        </CLASS> 
	</CLASS>

    <!-- 风扇电源开关操作类 -->
    <CLASS NAME="FanPowerCtrl">
        <!-- 风扇的索引，配置时建议关联FANClass类中的FANID -->
        <PROPERTY NAME="FANID" TYPE="q">  </PROPERTY>
        <!-- 设置风扇电源开关，关联Accessor -->
        <PROPERTY NAME="FanPowerSwitch"    TYPE="y">  </PROPERTY>
        <!-- 风扇电源开关写保护模式：0 - 不支持写保护；1 - 支持写保护 -->
        <PROPERTY NAME="FanPowerProtectMode"    TYPE="y">  </PROPERTY>
        <!-- 设置风扇开关写保护 -->
        <PROPERTY NAME="FanPowerProtectSwitch"    TYPE="y">  </PROPERTY>
        <!-- 风扇开关模式,由表达式配置后写入到 FanPowerSwitch -->
        <PROPERTY NAME="FanPowerSwitchMode"    TYPE="y">  </PROPERTY>
        <!-- 电源类型(非必选属性): 0 - 单个风扇的电源; 1 - 所有风扇的电源; -->
        <PROPERTY NAME="PowerType" TYPE="y">  </PROPERTY>
        <!-- 打开电源开关的条件(非必选属性): 0 - 不满足打开电源条件; 1 - 满足打开电源条件 -->
        <PROPERTY NAME="PowerOnTrigger" TYPE="y">  </PROPERTY>
        <!-- 风扇电源开关状态(非必选属性)，用于保存风扇电源开关(即"FanPowerSwitch")上一次设置的开关状态 -->
        <PROPERTY NAME="PowerSwitchStatus"    TYPE="y">  </PROPERTY>

        <!-- 方法：设置风扇电源开关 -->
        <METHOD NAME="SetFanPower">
            <PARAMETER TYPE="y" NAME="PowerSwitch" DIR="in"/>
        </METHOD>
    </CLASS>

	
	<CLASS NAME="PTAS" ID="18">
		<!-- PTAS特性使能-->
		<PROPERTY NAME="Enable" TYPE="y" ID="1" EXPORT="17">                  </PROPERTY>
		<!-- 海拔高度-->
		<PROPERTY NAME="Altitude" TYPE="n" ID="2" EXPORT="17">		  </PROPERTY>
		<!-- 机器型号-->
		<PROPERTY NAME="ServerTag" TYPE="u" ID="3" EXPORT="17">	          </PROPERTY>
		<!-- 设置使能状态-->
		<METHOD NAME="SetEnable" ID="1">
			<PARAMETER DIR="in" NAME="Enable" TYPE="y"/>
		</METHOD>
		<!-- 设置海拔高度-->
		<METHOD NAME="SetAltitudeLevel" ID="2">
			<PARAMETER DIR="in" NAME="Altitude" TYPE="n"/>
		</METHOD>
		<!-- 设置机器型号-->
		<METHOD NAME="SetServerTag" ID="3">
			<PARAMETER DIR="in" NAME="ServerTag" TYPE="u"/>
		</METHOD>
	</CLASS>
	
	<CLASS NAME="PTASPolicy">
		<!-- 风量系数-->
		<PROPERTY NAME="CoolingCoefficient" TYPE="au">	</PROPERTY>
	</CLASS>
	
	<CLASS NAME="CpuPowTempMap">
		<PROPERTY NAME="ConditionIndex" TYPE='y'>	</PROPERTY>
	    <PROPERTY NAME="SensorName" TYPE='ro'>      </PROPERTY>
		<PROPERTY NAME="PowRangeL" TYPE='ay'>		</PROPERTY>
		<PROPERTY NAME="PowRangeH" TYPE='ay'>		</PROPERTY>
		<PROPERTY NAME="ObjTemp"  TYPE='ay'>		</PROPERTY>
		<PROPERTY NAME="ObjTempFix"  TYPE='ay'>		</PROPERTY>
	    <PROPERTY NAME="RefPow" TYPE='d'>          </PROPERTY>		
	</CLASS>
	
	<!-- 机架用调速策略-->
	<CLASS NAME="Policy1Class" ID="143">
        <!--策略索引号，有相同索引号的策略认为是重复策略，除非索引号为0-->
        <!--byte1表示调速类型。0x01:区间调速  0x02:目标调速。byte0表示该类型的调速策略编号，同一种类型需唯一-->
        <!--特殊索引-->
        <!--0x0100  自定义进风口区间调速-->
        <!--0x0101  自定义硬盘区间调速-->
        <PROPERTY NAME="Index" TYPE='q' ID="1" KEY="1">		</PROPERTY>
		<!--废弃-->
		<PROPERTY NAME="TYPE" TYPE='y'>					</PROPERTY>
        <!-- 策略关联的风扇-->			
		<PROPERTY NAME= "FAN" TYPE='aq'>		</PROPERTY>
        <!-- 策略类型 1，目标调速， 2 环境温度调速， 4 告警调速-->		
		<PROPERTY NAME= "Type" TYPE='y'>		</PROPERTY>
        <!-- 各个告警级别对应的转速-->				
		<PROPERTY NAME= "AlarmSpeed" TYPE='ay'>		</PROPERTY>
        <!-- 条件索引-->			
		<PROPERTY NAME= "ConditionIndex" TYPE='y'>		</PROPERTY>
		<!-- 当前调速策略是否有效 ，当ConditionIndex的值为0xff时IsValid 是1表示此调速策略生效，0表示此调速策略不生效，当ConditionIndex的值不为0xff，IsValid属性不起作用-->
		<PROPERTY NAME="IsValid" TYPE='y'>		</PROPERTY>
        <!-- 目标点传感器名字-->	
	    <PROPERTY NAME="SensorName" TYPE='ro'>    </PROPERTY>
		<!-- 目标温度-->
		<PROPERTY NAME="Tobj" TYPE='y'>					</PROPERTY>
		<!-- 告警温度-->
		<PROPERTY NAME="Tmax" TYPE='y'>					</PROPERTY>
		<!-- 迟滞量-->
		<PROPERTY NAME="Hsis"  TYPE='y'>		 </PROPERTY>
		<PROPERTY NAME="FanID"  TYPE='ay'>		</PROPERTY>	
        <!-- 环境温度区间，读数低门限-->
		<PROPERTY NAME="EnvRangeRdH"  TYPE='ay'>		</PROPERTY>	
		<!-- 环境温度区间，读数高门限-->
		<PROPERTY NAME="EnvRangeSpdL"  TYPE='ay'>		</PROPERTY>	
		<!-- 环境温度区间，转速低门限-->
		<PROPERTY NAME="EnvRangeSpdH"  TYPE='ay'>		</PROPERTY>	
		<!-- 环境温度区间，读数高门限-->
		<PROPERTY NAME="EnvRangeRdL"  TYPE='ay' ID="2" EXPORT="17">		</PROPERTY>	
		<!-- 温度点禁止扫描的时候，该温度点的读数-->
		<PROPERTY NAME="DisabledValue" TYPE='d'>        </PROPERTY>	
		<!-- 温度点读取失败的时候，风扇的转速-->
        <PROPERTY NAME="FailedValue" TYPE='d'>          </PROPERTY>	
        <PROPERTY NAME="IsSupportStandby" TYPE='y'>     </PROPERTY>
		<!-- 设置环境温度区间 -->
		<METHOD NAME="SetEnvTempSpd" ID="2">
			<PARAMETER TYPE="ay" NAME="EnvRangeRd" DIR="in"/>		
			<PARAMETER TYPE="ay" NAME="EnvRangeSpd" DIR="in"/>		
		</METHOD>
	</CLASS>

    <CLASS NAME="MpcConfig">
        <!-- MPC转速寻优迭代次数-->
		<PROPERTY NAME="TotalSteps" TYPE='y'>		</PROPERTY>
        <!-- 风扇全速对应Cpu温度-->
		<PROPERTY NAME="MaxCpuTemp" TYPE='d'>		</PROPERTY>
        <!-- MPC-->
		<PROPERTY NAME="CpuEdgeTemp" TYPE='d'>		</PROPERTY>
        <!-- Cpu频率-->
		<PROPERTY NAME="CpuFrequency" TYPE='d'>		</PROPERTY>
        <!-- MPC是否生效标志 0 未生效 1 生效-->
		<PROPERTY NAME="Enabled" TYPE='y'>		</PROPERTY>
        <!-- 背板硬盘数量-->
		<PROPERTY NAME="DiskNum" TYPE='y'>		</PROPERTY>
        <!-- 网卡数量-->
		<PROPERTY NAME="NetCardNum" TYPE='y'>		</PROPERTY>
        <!-- MPC版本号-->
		<PROPERTY NAME="Version" TYPE='q'>		</PROPERTY>
        <!-- MPC模型训练标志-->
		<PROPERTY NAME="Retrain" TYPE='y'>		</PROPERTY>
        <!-- 稳态整机功率-->
		<PROPERTY NAME="StableTotalPower" TYPE='q'>		</PROPERTY>
        <!-- 模型更新前后稳态整机功率差-->
		<PROPERTY NAME="PowerDiff" TYPE='n'>		</PROPERTY>
        <!-- MPC特征相关传感器 整机功耗 进风口温度 CPU温度-->
		<PROPERTY NAME="RelatedSensors" TYPE='roa'>		</PROPERTY>
		<!-- MPC特征相关传感器 整机功耗 进风口温度 CPU温度-->
		<PROPERTY NAME="MinPWMValue" TYPE='ay'>		</PROPERTY>
	</CLASS>

	<CLASS NAME="MpcModel">
        <!-- MPC模型系数-->
		<PROPERTY NAME="Parameters" TYPE='ad'>		</PROPERTY>
        <!-- MPC模型类型 1:功耗 2:温度-->
		<PROPERTY NAME="type" TYPE='y'>		</PROPERTY>
        <!-- MPC模型对应环境温度 -->
		<PROPERTY NAME="EnvTemp" TYPE='y'>		</PROPERTY>
	</CLASS>

	<!--FUNCTION:COOLING-->
	<CLASS NAME="CoolingCondition">
		<!--类型 1:bios配置高中低调速 2:tcontrol 范围 3:风扇类型 4:某个槽位是否有装一个viddid的pcie卡 0xfe:定制化，直接使用Value的值判断-->
		<PROPERTY NAME="Type" TYPE='y'>             </PROPERTY>
		<PROPERTY NAME="Parameter" TYPE='ay'>		</PROPERTY>		
		<PROPERTY NAME="Index" TYPE='y'>		</PROPERTY>		
		<!--仅Type=0xfe时使用Value的值判断-->		
		<PROPERTY NAME="Value" TYPE='y'>		</PROPERTY>	
	</CLASS>

	<!--FUNCTION:COOLING-->
	<CLASS NAME="BladeCpuThermal">
		<!--降速步长-->
		<PROPERTY NAME="DownStep" TYPE='ay'>		   </PROPERTY> 
		<!--tcontrol值-->
		<PROPERTY NAME="Tcontrol" TYPE='ay'>		   </PROPERTY> 
		<!--升速步长-->
		<PROPERTY NAME="UpStep" TYPE='ay'>		   </PROPERTY> 
		<!--M-->
		<PROPERTY NAME="M" TYPE='ay'>		   </PROPERTY> 
		<!--N-->
		<PROPERTY NAME="N" TYPE='ay'>		   </PROPERTY> 
		<!-- 表示调速策略适用于哪些CPU型号，默认的用“DefaultCpuType”
		     匹配时CPU型号从CPU的属性Version中读取--> 
		<PROPERTY NAME="IncludeCpuType" TYPE='as'>		   </PROPERTY> 
	</CLASS>
	<!--FUNCTION:COOLING-->
	<CLASS NAME="BladeCoolingPolicy"> 
	  <!--SensorStatus:传感器状态 一般 严重 告警 分别表示-->
	  <PROPERTY NAME="SensorStatus" TYPE='q'>	  </PROPERTY>	 
      <!--Type:策略的类型 一般 严重 告警 分别表示-->
	  <PROPERTY NAME="Type" TYPE='y'>	  </PROPERTY>	 
      <!--SensorName:目标温度点的名字-->  
	  <PROPERTY NAME="SensorName" TYPE='ro'>	  </PROPERTY>	 
	  <!--Speed:风扇控制的速度，对告警调速-->  
	  <PROPERTY NAME="Speed" TYPE='y'>	  </PROPERTY>	
      <!--RRangeLow:温度范围低点-->  	  
	  <PROPERTY NAME="RRangeLow" TYPE='y'>	  </PROPERTY>	
      <!--RRangeLow:温度范围高点-->  		  
	  <PROPERTY NAME="RRangeHigh" TYPE='y'>	  </PROPERTY>	 
	  <!--SRangeLow:转速范围低门限-->
	  <PROPERTY NAME="SRangeLow" TYPE='y'>	  </PROPERTY>	
      <!--SRangeHigh:转速范围高门限-->	  
	  <PROPERTY NAME="SRangeHigh" TYPE='y'>	  </PROPERTY>	 
	   <!--Hysteresis:迟滞量-->	
	  <PROPERTY NAME="Hysteresis" TYPE='y'>	  </PROPERTY>	
      <!--ScanCycle:扫描周期-->		  
	  <PROPERTY NAME="ScanCycle" TYPE='y'>	  </PROPERTY>
      <!--SpeedStep:步长，有符号类型，+- 表示升速和降速步长-->		  
	  <PROPERTY NAME="SpeedStep" TYPE='y'>	  </PROPERTY>	 
	</CLASS>  
    
    <!-- 系统电源监测数据 -->
    <CLASS NAME="SysPower" ID="16">
	<!-- 深度休眠 -->
		<PROPERTY NAME="DeepSleepModeEnable" TYPE="y" ID="15" EXPORT="17">	<VALUE>0</VALUE>	</PROPERTY>
	<!--配置-->
        <!-- 功率源 0:INA220;1:PSU;2:INA220+PSU; -->
        <PROPERTY NAME="SourceType" TYPE="y"></PROPERTY>
		<!-- PCA9545总线 -->
        <PROPERTY NAME="Pca9545bus" TYPE="y"></PROPERTY>
		<!-- PCA9545地址 -->
        <PROPERTY NAME="Pca9545addr" TYPE="y"></PROPERTY>
		<!-- PCA9545通道 -->
        <PROPERTY NAME="Pca9545ch" TYPE="y"></PROPERTY>
		<!-- PCA9545是否需要切换（电源挂在Pca9545不同通道上） -->
        <PROPERTY NAME="IsPca9545Switch" TYPE="y"></PROPERTY>
		<!-- 每个电源分别对应Pca9545的通道编号（0~3）-->
	<PROPERTY NAME="PsuAssignedChannel" TYPE="ay"></PROPERTY>
		<!-- 电源FRU信息源 (0:NONE;1:EEPROM;2:PSU) -->
        <PROPERTY NAME="FruSource" TYPE="y"> </PROPERTY>		
    <!--监测-->   		
        <!-- 系统电源功率 -->
        <PROPERTY NAME="Power" TYPE="u"></PROPERTY>
        <!-- 16bit系统电源功率 -->
        <PROPERTY NAME="Power16" TYPE="q" ID="1"></PROPERTY>
        <!-- 系统电源能耗 -->
        <PROPERTY NAME="PowerConsumption" TYPE="d" ID="2"></PROPERTY>
        <!-- 峰值功率 -->
	    <PROPERTY NAME="PeakValue" TYPE="q" ID="3"></PROPERTY>
        <!-- 峰值功率出现时间 -->
	    <PROPERTY NAME="PeakTime" TYPE="u" ID="4"></PROPERTY>
		<!-- 历史最小功率 -->
	    <PROPERTY NAME="MinValue" TYPE="q"></PROPERTY>
        <!-- 开始统计时间 -->
	    <PROPERTY NAME="RecordBeginTime" TYPE="u" ID="5"></PROPERTY>           
        <!-- 平均功率 -->
        <PROPERTY NAME="AveragePower" TYPE="q" ID="6"></PROPERTY>
        <!-- 省电总量 KWh-->
        <PROPERTY NAME="EnergySave" TYPE="d"></PROPERTY>
        <!-- 省电百分比 -->
        <PROPERTY NAME="ESPercent" TYPE="u"></PROPERTY>
        <!-- 减少碳排量(单位千克) 节约1度电(1KWh)=减排0.997千克 -->
        <PROPERTY NAME="CarbonSave" TYPE="d"></PROPERTY>
        <!-- 51协处理器开关机状态 0关机 1开机 -->
        <PROPERTY NAME="McuState" TYPE="y"></PROPERTY>
        <!-- 功率封顶上限 -->
        <PROPERTY NAME="MaxCapValue" TYPE="q" ID="7"></PROPERTY>  
        <!-- 工作电源个数 -->
        <PROPERTY NAME="WorkPsCnt" TYPE="y"></PROPERTY>  
		<!-- 预期工作电源个数，产品无法获取真实电源在位信号时，用于和已通信成功的电源数量比较产生告警 -->
		<PROPERTY NAME="ExpectedWorkPsCnt" TYPE="y"></PROPERTY>
		<!-- 负载需要的电源个数，比如电源工作模式是2N，预期工作电源个数是12，则负载需要的电源个数是6 -->
		<PROPERTY NAME="WorkloadNeededPsCnt" TYPE="y"></PROPERTY>
		<!-- 用户设置的电源工作模式 -->
        <PROPERTY NAME="ExpectedMode" TYPE="y" ID="8" EXPORT="17"></PROPERTY> 
		<!-- 系统实际的电源工作模式 -->
        <PROPERTY NAME="ActualMode" TYPE="y" ID="9"></PROPERTY> 		
		<!-- 用户设置每个电源的主备模式 -->
        <PROPERTY NAME="ExpectedActive" TYPE="u" ID="10" EXPORT="17"></PROPERTY>  	
		<!-- 电源工作模式切换上限 -->
        <PROPERTY NAME="UpperLimit" TYPE="y" ID="11"></PROPERTY>  	
		<!-- 电源工作模式切换下限 -->
        <PROPERTY NAME="LowerLimit" TYPE="y" ID="12"></PROPERTY>  	
		<!-- MOS管前端电压，单位为毫伏 由SMM板下发 -->	
		<PROPERTY NAME="SysInputVolt"  TYPE="u">		</PROPERTY>
		<!-- 不支持的主备供电模式: bit0-3:备电源数 bit4-7:主电源数 0xf表示任意数量 -->
		<PROPERTY NAME="UnSupportActiveStandbyMode" TYPE="ay"></PROPERTY>
		<!-- AC上电系统电源个数 -->
		<PROPERTY NAME="ACBootPSCount" TYPE="y"></PROPERTY>
		<!-- 电源在位个数 -->
		<PROPERTY NAME="PSPresentCount" TYPE="y"></PROPERTY>
		<!-- 系统电源健康状态 -->
		<PROPERTY NAME="Health" TYPE="y"></PROPERTY>
		<!-- BoardPowerDrop产生的时间 主板整框掉电 -->
		<PROPERTY NAME="BoardPowerDropStamp" TYPE="s"></PROPERTY>
		<!-- BoardPowerDrop产生的标识 主板整框掉电-->
		<PROPERTY NAME="BoardPowerDropFlag" TYPE="u"></PROPERTY>
		<!-- 电源的OPOK状态 -->
		<PROPERTY NAME="PsuOPOKStatus" TYPE="roa">	</PROPERTY>
		<!-- 系统电源消耗热量单位:千卡kcal, 值等于PowerConsumption*860.42 -->
        <PROPERTY NAME="Heat" TYPE="u" ID="13"></PROPERTY>
		<!-- 电源升级状态，0表示不在升级状态，1表示在升级前准备，2表示升级准备完成-->
		<PROPERTY NAME="PsuUpgradeState" TYPE="y"></PROPERTY>
		<!-- 系统电源冗余模式, 0x11: 1+1冗余, 0x22: 2+2冗余, 0x31: 3+1冗余, 以此类推 -->		
        <PROPERTY NAME="RedundancyMode" TYPE="y"></PROPERTY>
		<!-- 强制升级模式，用于服务器电源配置大于2个的场景
		   0: 依据电源冗余配置走原来的升级流程
		   1: 满足电源数目有2个，其中有1个健康电源的条件即可升级
		   2: 表示有条件强制升级模式(1+1或者是2+2场景)
		 -->
		<PROPERTY NAME="ForceUpgradeFlag" TYPE="y" ID="14" EXPORT="17"></PROPERTY>
		<!-- 电源管理主体类型：0:通过c51管理；1:通过ARM管理；2:通过MMC管理；3:通过MCU管理；4:通过RM管理 -->
		<PROPERTY NAME="PSManageHostType" TYPE="y"></PROPERTY>
		<PROPERTY NAME="CollectHistoryDataStatus" TYPE="y"></PROPERTY>
		<!-- N+R备电模式 0：关闭状态  1：开启状态 -->
		<PROPERTY NAME="NormalAndRedundancyEnable" TYPE="y"></PROPERTY>	
		<PROPERTY NAME="NormalAndRedundancyErrorNo" TYPE="y"></PROPERTY>
		<PROPERTY NAME="HighPowerThresholdWatts" TYPE="d" ID="16" EXPORT="17">	</PROPERTY>	
		<!-- power info mode 取值模式：0 未定制化模式；1 定制化模式 -->
		<!-- 为满足字节客户对电源SMBIOS信息定制化需求提供定制化接口 -->
		<PROPERTY NAME="PowerInfoMode" TYPE="y" ID="17" EXPORT="17"></PROPERTY>
		<!-- 定制化的power unit group值起始ID
			eg: PowerInfoMode == 1时，若PowerUnitGroupStartID == 0，
				对于四电源的环境 ： 
				PSU1.PowerUnitGroup = PSU1.slotid + PowerUnitGroupStartID - 1 = 0
				PSU2.PowerUnitGroup = PSU1.slotid + PowerUnitGroupStartID - 1 = 1
				PSU3.PowerUnitGroup = PSU1.slotid + PowerUnitGroupStartID - 1 = 2
				PSU4.PowerUnitGroup = PSU1.slotid + PowerUnitGroupStartID - 1 = 3
		-->
		<PROPERTY NAME="PowerUnitGroupStartID" TYPE="y" ID="18" EXPORT="17"></PROPERTY>
		<!-- 电源Fru信息定制化配置：
			bit0 : Product Version配置
				0：硬件版本
				1：软件（电源FW）版本 
			bit1 ~ bit31: 保留
		-->
		<PROPERTY NAME="PsuFruConfig" TYPE="u"></PROPERTY>
		<!-- 正在升级的电源槽位号，按位定义，bit0为1表示1号电源在升级，bit1表示2号...
			 此值会周期性更新，默认为0 -->
		<PROPERTY NAME="UpgradingSlots" TYPE="u"></PROPERTY>
		<!-- 单板是否为DC单电源供电且支持黑匣子日志采集 -->
		<PROPERTY NAME="SingleDcPsuBlackBoxSupport" TYPE="y"></PROPERTY>
		<PROPERTY NAME="PsuMixInsertSupport" TYPE="y"></PROPERTY>
        <!-- 系统备电不足告警 -->
        <PROPERTY NAME="PowerBackupLowAlarm" TYPE="y"> </PROPERTY>
        <!-- PSU风扇调速策略 00:关闭PSU调速;01:开启PSU调速;ff BBU个数不为0，开启调速，否则关闭-->
        <PROPERTY NAME="PSUCoolingPolicyStatus" TYPE="y"> </PROPERTY>
        <CLASS NAME="PeripheralSysPower"></CLASS>
		<METHOD NAME="SetPowerInfoMode" ID="17">
			<PARAMETER TYPE="y" NAME="PowerInfoMode" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetPowerUnitGroupStartID" ID="18">
			<PARAMETER TYPE="y" NAME="StartID" DIR="in"/>
		</METHOD>
    <!--方法-->
        <!-- 设置深度休眠 -->
        <METHOD NAME="SetDeepSleepMode" ID="15">
        <PARAMETER TYPE="y" NAME="DeepSleepModeEnableValue" DIR="in"/>
        </METHOD>
        <!-- 功耗清零 -->
        <METHOD NAME="Reset"/>  
        <!-- 删除历史记录 -->
        <METHOD NAME="ClearRecord"/>
        <!-- 回滚历史记录 -->
        <METHOD NAME="RollbackRecord"/>  
		<!-- 设置系统预期的电源工作模式 -->
		<METHOD NAME="SetPlatformWorkMode" ID="8">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
		<!-- 设置电源模式上阈值 -->
		<METHOD NAME="SetPowerUpperLimit" ID="11">
			<PARAMETER TYPE="y" NAME="UpperLimit" DIR="in"/>
		</METHOD>
		<!-- 设置电源模式下阈值 -->
		<METHOD NAME="SetPowerLowerLimit" ID="12">
			<PARAMETER TYPE="y" NAME="LowerLimit" DIR="in"/>
		</METHOD>
		<!-- 设置电源工作总模式 -->
		<METHOD NAME="SetPowerWorkMode">
			<PARAMETER TYPE="y" NAME="PlatformMode" DIR="in"/>
		</METHOD>
		<!-- 设置每个电源主备模式 -->
		<METHOD NAME="SetPowerWorkModeMask" ID="10">
			<PARAMETER TYPE="u" NAME="ActivePsMask" DIR="in"/>
		</METHOD>
		<!-- 电源升级时设置51的开关，0表示关，1表示开 -->
		<METHOD NAME="SetHi51State">
			<PARAMETER TYPE="y" NAME="state" DIR="in"/>
		</METHOD>
		<!-- 进行电源升级时设置PSU信息监控任务的状态，0表示暂停，1表示继续 -->
		<METHOD NAME="SetPsInfoTaskState">
		<PARAMETER TYPE="y" NAME="state" DIR="in"/>
		</METHOD>
		<!-- 设置电源升级状态，0表示不在升级状态，1表示在升级前准备，2表示升级准备完成-->
		<METHOD NAME="SetPsuUpgradeState">
			<PARAMETER TYPE="y" NAME="PsuUpgradeState" DIR="in"/>
		</METHOD>
		<!-- 设置强制升级电源模式，0表示普通模式，1表示强制模式 2 表示有条件强制升级模式(1+1或者是2+2场景) -->
		<METHOD NAME="SetForceUpgradeFlag" ID="14">
			<PARAMETER TYPE="y" NAME="ForceUpgradeFlag" DIR="in"/>
		</METHOD>
		<!-- 历史功率录波相关参数同步 -->
		<METHOD NAME="PowerHistoryParaSync">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
		<!-- 历史功率录波相关参数同步 -->
		<METHOD NAME="CollectHistoryData">
			<PARAMETER TYPE="s" NAME="FilePath" DIR="in"/>
		</METHOD>
		<METHOD NAME="GetFruFromPsu">
			<PARAMETER TYPE="y" NAME="PsId" DIR="in"/>
			<PARAMETER TYPE="ay" NAME="FruInfo" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetHighPowerThreshold" ID="16">
		    <PARAMETER TYPE="d" NAME="Threshold" DIR="in"/>
		</METHOD>
		<!-- SMM主备同步方法 -->
		<METHOD NAME="PropertySyncMethod">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
			<PARAMETER TYPE="*" NAME="*" DIR="out"/>
		</METHOD>
		<!-- 检查该主用配置是否满足主备供电模式 -->
		<METHOD NAME="CheckFailoverCondition">
		    <PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
		<!--方法：设置电源输出限功率 -->
		<METHOD NAME="SetOutputLimitPower">
			<PARAMETER TYPE="u" NAME="limit_power" DIR="in"/>
		</METHOD>
		<!-- 电源启动后同步配置 -->
		<METHOD NAME="SyncConfAfterStartup">
		</METHOD>
		<!-- 设置电源供电来源 -->
		<METHOD NAME="SetPsuSupplySourceCfg">
			<PARAMETER TYPE="y" NAME="Supply" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ErrCode" DIR="out"/>
		</METHOD>
		<!-- 控制电源的工作状态，2298V5用来实现对电源进行控制，1表示AC Cycle，需要对各个电源执行Cycle动作 -->
		<METHOD NAME="CtrlSysPowerState">
		<PARAMETER TYPE="y" NAME="CtrlValue" DIR="in"/>
		</METHOD>
		<!-- 设置正在升级的电源槽位 -->
		<METHOD NAME="SetSysPowerUpgradingSlots">
			<PARAMETER TYPE="u" NAME="UpgradingSlots" DIR="in"/>
		</METHOD>
        <METHOD NAME="PowerMgntPropertySync">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
		<!-- 电源由主备板的主进行管理时，对用户设置的syspower属性进行同步，并持久化DF_SAVE -->
		<METHOD NAME="PowerMgntSyncSave">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
        <!-- 屏蔽AC掉电事件记录，升级CPLD、VRD导致掉电时会调用，不在记录AC掉电事件 -->
        <METHOD NAME="ShieldAclostEventRecord">
        </METHOD>
    </CLASS>
    
    <!-- 
        电源信息。此class目的是关联访问电源所需的相关硬件，
        从而支撑将C51上获取电源数据的功能迁移到A9上来
    -->
    <CLASS NAME="PowerMgnt">
        <!-- 电源slot号 -->
        <PROPERTY NAME="Slot" TYPE="y"> </PROPERTY>
        <!-- 电源是否在位。为保证电源在位检测的可靠性，该属性是cpld相关寄存器多次检测的结果 -->
        <PROPERTY NAME="Presence" TYPE="y"> </PROPERTY>
	    <!-- 电源是否健康，关联硬件accessor -->
        <PROPERTY NAME="Health" TYPE="y"> </PROPERTY>
        <!-- 电源是否健康: 0:健康；1:不健康 -->
        <PROPERTY NAME="PsHealth" TYPE="y"> </PROPERTY>
        <!-- 电源开关的写保护属性，用于读写对应的逻辑寄存器 -->
        <PROPERTY NAME="SwitchWp" TYPE="y"> </PROPERTY>
        <!-- 电源开关，可以切断电源的输出 -->
        <PROPERTY NAME="Switch" TYPE="y"> </PROPERTY>
        <!-- 电源异常原因 -->
        <PROPERTY NAME="FaultReason" TYPE="s"> </PROPERTY>
        <!-- 关联到访问电源的accessor -->
        <PROPERTY NAME="PSInfo" TYPE="s"> </PROPERTY>
        <!-- 关联到访问电源fru eeprom的accessor -->
        <PROPERTY NAME="PSFruEeprom" TYPE="s"> </PROPERTY>
		<!-- PSU通道类型 0: 无效; 1: 支持通过cpld操作PSU; 2: 支持通过I2C操作PSU; -->        
		<PROPERTY NAME="ChannelType" TYPE="y"></PROPERTY>
		<!-- 动作掩码，置为有效 0: 无效; bit0: 支持打开动作; bit1: 支持关闭动作; bit2:支持复位动作; -->        
		<PROPERTY NAME="ActionMask" TYPE="y"></PROPERTY>
		<!-- 复位时间间隔 -->
		<PROPERTY NAME="DelayTimeInterval" TYPE="q"></PROPERTY>
        <!-- 电源MfrStatus:bit7:PSON12V, bit6:INSTALLED, bit5:IPOK, bit4:OPOK, bit3:OPERATION OFF, bit2:SET Interrupt, bit1:PFC ENABLED -->
        <PROPERTY NAME="MfrStatus" TYPE="y"> </PROPERTY>
        <METHOD NAME="SetPsSwitch">
            <PARAMETER TYPE="y" NAME="slot" DIR="in"/>
            <PARAMETER TYPE="y" NAME="Switch" DIR="in"/>
            <PARAMETER TYPE="i" NAME="RetCode" DIR="out"/>
        </METHOD>
		<METHOD NAME="SetPsReset">
            <PARAMETER TYPE="y" NAME="slot" DIR="in"/>
            <PARAMETER TYPE="y" NAME="Switch" DIR="in"/>
            <PARAMETER TYPE="i" NAME="RetCode" DIR="out"/>
        </METHOD>
        <METHOD NAME="PropertySyncMethod">
            <PARAMETER DIR="in"  TYPE="*" NAME="*" />
            <PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
        <!-- 电源主备管理时，同步PowerMgnt类属性 -->
        <METHOD NAME="PowerMgntPropertySync">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
        </METHOD>
    </CLASS>

    <!-- 电源休眠  -->
    <CLASS NAME="PsSleep">
	    <!-- 电源休眠使能。0:不使能；1:使能。 -->
        <PROPERTY NAME="Enable" TYPE="y" EXPORT="17"></PROPERTY>
        <!-- 电源休眠模式。0:N+1模式；1:N+N模式 -->
        <PROPERTY NAME="Mode" TYPE="y"></PROPERTY>
        <!-- 电源休眠状态。对应bit为0:对应电源不处于休眠状态；1:对应电源处于休眠状态 -->
        <PROPERTY NAME="SleepStatusBitmap" TYPE="q"></PROPERTY>
        <!-- 方法：设置电源休眠使能和配置 -->
        <METHOD NAME="SetPsSleepConfig">
            <PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
            <PARAMETER TYPE="y" NAME="mode" DIR="in"/>
            <PARAMETER TYPE="i" NAME="RetCode" DIR="out"/>
            <!-- 开启电源休眠时要检查之前有没有手动关闭过电源，如果有，
                 ，则需要提示先打开被关闭的电源此处记录被关闭的电源index -->
            <PARAMETER TYPE="*" NAME="PsIndexClosedManually" DIR="out"/>
        </METHOD>
        <!--方法：同步相关电源休眠属性到背板 -->
        <METHOD NAME="PsSleepSync">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
        </METHOD>
    </CLASS>

    <!-- 电源监控  -->
    <CLASS NAME="PowerAlert">
	    <!-- Alert信号是否使能，关联硬件accessor。0:不使能；1:使能。 -->
        <PROPERTY NAME="AlertEnableAccessor" TYPE="y"> </PROPERTY>
	    <!-- Alert信号是否使能，因为用户设置的Alert信号使能配置需要进行主备同步
        ，由于背板无法写cpld寄存器，如果只有一个关联硬件accessor的属性，则无法
        完成主备同步，所以要有一个不关联硬件accessor的属性。默认为使能，此属性
        需要持久化。
        0:不使能；1:使能。 -->
        <PROPERTY NAME="AlertEnable" TYPE="y"> </PROPERTY>
        <!-- Alert信号是否生效，关联硬件accessor。0:没有生效；1:生效。 -->
        <PROPERTY NAME="AlertState" TYPE="y"> </PROPERTY>
        <!-- 系统所需最小电源模块数。由SMM管理软件计算后写入CPLD寄存器 -->
        <PROPERTY NAME="PsuNumExpect" TYPE="y"> </PROPERTY>
        <!-- 系统当前总的额定功率 -->
        <PROPERTY NAME="PowerBudget" TYPE="u"> </PROPERTY>
        <!-- 系统当前已分配功率 -->
        <PROPERTY NAME="PowerUsed" TYPE="u"> </PROPERTY>
        <!-- 系统当前整框实时功率功率 -->
        <PROPERTY NAME="ShelfRuntimePower" TYPE="u"> </PROPERTY>
        <!-- 方法：设置电源alert使能 -->
        <METHOD NAME="SetPowerAlertEnable">
            <PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
            <PARAMETER TYPE="i" NAME="RetCode" DIR="out"/>
        </METHOD>
        <!-- 方法：释放Alert信号 -->
        <METHOD NAME="AlertRecovery">
            <PARAMETER TYPE="i" NAME="RetCode" DIR="out"/>
        </METHOD>
        <!--方法：同步相关电源alert属性到背板 -->
        <METHOD NAME="PowerAlertSync">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
        </METHOD>
        <!--方法：同步期望电源最小个数属性值到备板 
            防止出现：备板期望电源最小值大于主板上的可用电源数，主备倒换出现的电源误告警-->
        <METHOD NAME="ExpectMinPsuNumSync">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
        </METHOD>
    </CLASS>

	<!-- 单电源监测数据 -->
	<CLASS ID="39" NAME="OnePower">
		<!-- 电源编号 -->
		<PROPERTY NAME="PsId" TYPE="y"  ID="12"> </PROPERTY>
		<!-- 电源槽位号 -->
		<PROPERTY NAME="AnchorSlot" TYPE="y" ID="1"></PROPERTY>
		<!-- 单电源输入功率传感器倍率 -->
		<PROPERTY NAME="PowerDivisor" TYPE="q"></PROPERTY>       
		<!-- 单电源输入功率软修正除数 -->
		<PROPERTY NAME="PowerInDivisor" TYPE="q"></PROPERTY>           
		<!-- 单电源输出功率软修正除数 -->
		<PROPERTY NAME="PowerOutDivisor" TYPE="q"></PROPERTY>      
		<!-- 单电源输入电压软修正除数 -->
		<PROPERTY NAME="VinDivisor" TYPE="q"></PROPERTY>
		<!-- 8bit单电源输入电压软修正除数 -->
		<PROPERTY NAME="Vin16Divisor" TYPE="q"></PROPERTY>
		<!-- 单电源输出电压软修正除数 -->
		<PROPERTY NAME="VoutDivisor" TYPE="q"></PROPERTY>    
		<!-- 单电源输入电流软修正除数 -->
		<PROPERTY NAME="IinDivisor" TYPE="q"></PROPERTY>        
		<!-- 单电源输出电流软修正除数 -->
		<PROPERTY NAME="IoutDivisor" TYPE="q"></PROPERTY>
		<!-- 单电源环境温度软修正除数 -->
		<PROPERTY NAME="EnvTempDivisor" TYPE="q"></PROPERTY>
		<!-- 单电源内部器件温度(原边)软修正除数 -->
		<PROPERTY NAME="ChipTempDivisor" TYPE="q"></PROPERTY>
		<!-- 单电源内部器件温度(副边)软修正除数 -->
		<PROPERTY NAME="ChipTemp2Divisor" TYPE="q"></PROPERTY>
		<!-- 单电源输入功率软修正乘数 -->
		<PROPERTY NAME="PowerInMultiplier" TYPE="q"></PROPERTY>           
		<!-- 单电源输出功率软修正乘数 -->
		<PROPERTY NAME="PowerOutMultiplier" TYPE="q"></PROPERTY>      
		<!-- 单电源输入电压软修正乘数 -->
		<PROPERTY NAME="VinMultiplier" TYPE="q"></PROPERTY>
		<!-- 单电源输出电压软修正乘数 -->
		<PROPERTY NAME="VoutMultiplier" TYPE="q"></PROPERTY>
		<!-- 单电源输入电流软修正乘数 -->
		<PROPERTY NAME="IinMultiplier" TYPE="q"></PROPERTY> 
		<!-- 单电源输出电流软修正乘数 -->
		<PROPERTY NAME="IoutMultiplier" TYPE="q"></PROPERTY>
		<!-- 单电源环境温度软修正乘数 -->
		<PROPERTY NAME="EnvTempMultiplier" TYPE="q"></PROPERTY>
		<!-- 单电源内部器件温度(原边)软修正乘数 -->
		<PROPERTY NAME="ChipTempMultiplier" TYPE="q"></PROPERTY>
		<!-- 单电源内部器件温度(副边)软修正乘数 -->
		<PROPERTY NAME="ChipTemp2Multiplier" TYPE="q"></PROPERTY>
		<!-- 电源协议 0: psmi; 1: pmbus; 7: TCE pmbus; 8: 5500 pmbus; 9: 8100 pmbus; 10：canbus； 0XFF:无效-->        
		<PROPERTY NAME="Protocol" TYPE="y" ID="10"></PROPERTY>
		<!-- 功率源 0: CHIP(INA220);1:PSU -->
		<PROPERTY NAME="SourceType" TYPE="y"></PROPERTY>
        
		<!-- INA220 配置系数 -->
		<PROPERTY NAME="Ina220Cfg" TYPE="q"></PROPERTY>
		<!-- INA220 电流修正系数（2的整数倍 2 ~ 65534），需要根据实际修正，并配合修改IinDivisor, IoutDivisor -->
		<PROPERTY NAME="Ina220Calibration" TYPE="q"></PROPERTY> 
		<!-- 电源显示使能 0:不显示;1:显示 -->
		<PROPERTY NAME="Visable" TYPE="y"></PROPERTY>
			<!-- 实际每个电源的主备模式 -->
		<PROPERTY NAME="ActualActive" TYPE="y"></PROPERTY>
		<PROPERTY NAME="DeepSleepActualActive" TYPE="y"></PROPERTY>
		<!-- 更换前SN -->   
		<PROPERTY NAME="PreviousSN" TYPE="s" ></PROPERTY>  
		<!-- 部件是否发生了更换，用于产生SEL日志 -->
		<PROPERTY NAME="ReplaceFlag" TYPE="y" >	</PROPERTY> 
			<!-- 电源部件号 ADD by gongxiongtao  -->	
			<PROPERTY NAME="PartNum" TYPE="s" ID="21">            </PROPERTY>
		<!-- 实时数据 -->
		<!-- 单电源输入功率 -->
		<PROPERTY NAME="Power" TYPE="d" ID="5" ></PROPERTY>
		<!-- 单电源输出功率 -->
		<PROPERTY NAME="PowerOut" TYPE="d" ID="11"></PROPERTY>
		<!-- 单电源进风口温度 单位摄氏度-->
		<PROPERTY NAME="InletTemp" TYPE="d"></PROPERTY>
		<!-- 单电源内部温度 单位摄氏度-->
		<PROPERTY NAME="InnerTemp" TYPE="d"></PROPERTY>
		<!-- 单电源输入电压 单位V -->
		<PROPERTY NAME="Vin" TYPE="d"	ID="13"></PROPERTY>
		<!-- 8bit 单电源输入电压 -->
		<PROPERTY NAME="Vin16" TYPE="q"> </PROPERTY>
		<!-- 单电源输出电压 单位V-->
		<PROPERTY NAME="Vout" TYPE="d"	ID="14"></PROPERTY>  
		<!-- 单电源输入电流 单位A-->
		<PROPERTY NAME="Iin" TYPE="d"	ID="15"></PROPERTY>
		<!-- 单电源输出电流 单位A-->
		<PROPERTY NAME="Iout" TYPE="d"	ID="16"></PROPERTY>
		<!-- 单电源环境温度 单位摄氏度-->
		<PROPERTY NAME="EnvTemp" TYPE="d"></PROPERTY>
		<!-- 单电源内部器件温度(原边) 单位摄氏度-->
		<PROPERTY NAME="ChipTemp" TYPE="d"></PROPERTY>
		<!-- 单电源内部器件温度(副边) 单位摄氏度-->
		<PROPERTY NAME="ChipTemp2" TYPE="d"></PROPERTY>
		<!-- 禁用walkin状态 0:R回切N禁用缓启; 1:R回切N允许缓启 -->
		<PROPERTY NAME="ForbiddenWalkinState" TYPE="y"></PROPERTY>
		<!-- 16bit单电源功率 -->
		<PROPERTY NAME="Power16" TYPE="q"  ID="22"></PROPERTY>
		<!-- 在位状态 0:不在位; 1:在位 -->
		<PROPERTY NAME="Present" TYPE="y"></PROPERTY>       
		<PROPERTY NAME="Presence" TYPE="y" ID="2"></PROPERTY>      
		<!-- 输出故障 0:无故障; 1:有故障 -->
		<PROPERTY NAME="Failure" TYPE="y"	ID="17"></PROPERTY>
		<!-- 过温故障 0:无故障; 1:有故障 -->
		<PROPERTY NAME="OverTemp" TYPE="y"	ID="18"></PROPERTY>
		<!-- 输入故障 0:无故障; 1:有故障 -->
		<PROPERTY NAME="InputLoss" TYPE="y"	ID="19"></PROPERTY>
		<!-- 风扇0故障 0:无故障; 1:有故障 -->
		<PROPERTY NAME="Fan0State" TYPE="y"></PROPERTY>
		<!-- 风扇1故障 0:无故障; 1:有故障 -->
		<PROPERTY NAME="Fan1State" TYPE="y"></PROPERTY>
		<!-- 通信故障 0:无故障; 1:有故障 -->
		<PROPERTY NAME="CommunicationState" TYPE="y"></PROPERTY>
		<!-- 健康度 -->
		<PROPERTY NAME="Health" TYPE="y" ID="8" ></PROPERTY>    
		<PROPERTY NAME="PsEntity" TYPE="ro"></PROPERTY>   
		<!-- 电子标签 -->
		<!-- 制造厂商 -->
		<PROPERTY NAME="Manufacture" TYPE="s" ID="3" ></PROPERTY>
		<!-- 交直流模式 0:DC; 1:AC-->
		<PROPERTY NAME="AcDc" TYPE="y" ID="7"></PROPERTY>
		<!-- 电源型号 -->
		<PROPERTY NAME="PsType" TYPE="s" ID="4"></PROPERTY>
		<!-- 电源版本 -->
		<PROPERTY NAME="PsVer" TYPE="s" ID="9"></PROPERTY>
		<!-- 序列号 -->
		<PROPERTY NAME="SN" TYPE="s" ID="20"></PROPERTY>
		<!-- 额定功率 -->
		<PROPERTY NAME="PsRate" TYPE="q" ID="6"></PROPERTY>
		<!-- 生产日期 -->
		<PROPERTY NAME="ManufactureDate" TYPE="s"></PROPERTY>
		<!-- 丝印信息 -->
		<!-- 物理位置 -->
		<PROPERTY NAME="Location" TYPE="s" ID="28" ></PROPERTY>
		<!-- 功能组 -->
		<PROPERTY NAME="Function" TYPE="s"></PROPERTY>
		<!-- 部件名称 -->
		<PROPERTY NAME="DeviceName" TYPE="s"></PROPERTY>
		<!-- 关联电源电子标签版本 -->
		<PROPERTY NAME="PsFwVer" TYPE="s"></PROPERTY>
		<!-- V5窄电源的VinStatus:bit7:Vout_Ov_Fault, bit6:Vout_Ov_Warning, bit5:Vout_Uv_Warning, bit4:Vout_Uv_Fault -->
		<PROPERTY NAME="VoutStatus" TYPE="y" ID="23"></PROPERTY>
		<!-- V5窄电源的IoutStatus:bit7:Iout_Oc_Fault, bit5:Iout_Oc_Warning -->
		<PROPERTY NAME="IoutStatus" TYPE="y" ID="24"></PROPERTY>
		<!-- V5窄电源的VinStatus:bit7:Vin_Ov_Fault, bit6:Vin_Ov_Warning, bit5:Vin_Uv_Warning, bit4:Vin_Uv_Fault -->
		<PROPERTY NAME="VinStatus" TYPE="y" ID="25"></PROPERTY>
		<!-- V5窄电源的TemperStatus:bit7:Ot_Fault, bit6:Ot_Warning -->
		<PROPERTY NAME="TemperStatus" TYPE="y" ID="26"></PROPERTY>
		<!-- V5窄电源的FanStatus:bit7:Fan1_Fault, bit5:Fan1_Warning, bit3:Fan1_Speed_Override -->
		<PROPERTY NAME="FanStatus" TYPE="y" ID="27"></PROPERTY>
		<!-- V5窄电源的CmlStatus:bit7:Invalid Command, bit6:Invalid data, bit5:Packet Error Check Failed, bit4:Memory Fault Detected, bit3:Processor Fault Detected, bit1:Other Communication Fault -->
		<PROPERTY NAME="CmlStatus" TYPE="y"></PROPERTY>
		<!-- V5窄电源的MfrStatus:bit7:PSON12V, bit6:INSTALLED, bit5:IPOK, bit4:OPOK, bit3:OPERATION OFF, bit2:SET Interrupt, bit1:PFC ENABLED -->
		<PROPERTY NAME="MfrStatus" TYPE="y"></PROPERTY>
		<!-- 电源是否支持升级：0,；不可升级 1，可升级； -->
		<PROPERTY NAME="UpgradeFlag" TYPE="y"></PROPERTY>
		<!-- 资产标签 -->
		<PROPERTY NAME="AssetTag" TYPE="s" ID="29"></PROPERTY>
		<!-- BIOS会查这个告警状态，为与SNMP接口保持一致，Health+1-->
		<PROPERTY NAME="ComponentStatus" TYPE="y" ID="30"></PROPERTY>
		<!-- 按SMBIOS的定义 1 Other, 2 Unknown, 3 Linear,4 Switching, 5 Battery,6 UPS, 7 Converter, 8 Regulator。 目前所有电源都是4 Switching-->
		<PROPERTY NAME="PowerSupplyType" TYPE="y" ID="31"></PROPERTY>
		<!-- 按SMBIOS的定义 1 Other, 2 Unknown, 3 Manual, 4 Auto-switch, 5 Wide range, 6 Not applicable。 目前所有电源都是4 Auto-switch-->
		<PROPERTY NAME="InputVoltageRangeSwitching" TYPE="y" ID="32"></PROPERTY>
		<!-- 0不支持热插拔，1支持热插拔，目前所有电源都支持热插拔-->
		<PROPERTY NAME="HotReplaceable" TYPE="y" ID="33"></PROPERTY>
		<!-- 额定电流 -->
		<PROPERTY NAME="IoutRate" TYPE="q"></PROPERTY>
		<!-- 总运行时间 -->
		<PROPERTY NAME="TotalRunningTime" TYPE="u"></PROPERTY>	
		<!-- 电源频率 交流时显示正常频率 直流显示为0 -->
		<PROPERTY NAME="Frequency" TYPE="d"></PROPERTY>
		<!-- 当前电源供电电路 0:主路  1:备路  -->
		<PROPERTY NAME="PowerSupplyChannel" TYPE="y"></PROPERTY>
		<!-- 电源主备供电配置, 会与硬件accessor关联  -->
		<PROPERTY NAME="PowerSupplyCfg" TYPE="y"></PROPERTY>
		<!-- A路输入电压  -->
		<PROPERTY NAME="VinChannelA" TYPE="d"></PROPERTY>
		<!-- B路输入电压  -->
		<PROPERTY NAME="VinChannelB" TYPE="d"></PROPERTY>
		<!-- 按SMBIOS的定义，00h 非冗余电源组成员，01h-FEh 冗余电源组编号，自定义0xFF为未知状态 -->
		<PROPERTY NAME="PowerUnitGroup" TYPE="y" ID="34"></PROPERTY>
		<!-- 是否本地电源：0,本地；1，远程； -->
		<PROPERTY NAME="Locality" TYPE="y"/> 
		<!-- 告警状态（后四字节）-->
		<PROPERTY NAME="AlarmStatus" TYPE="u"></PROPERTY>
		<!-- 电源输出限功率-->
		<PROPERTY NAME="OutputLimitPower" TYPE="u"></PROPERTY>
		<!-- A路供电的输入状态-->
		<PROPERTY NAME="PSUInputAStatus" TYPE="y"></PROPERTY>
		<!-- B路供电的输入状态-->
		<PROPERTY NAME="PSUInputBStatus" TYPE="y"></PROPERTY>
		<!-- 电源AC Cycle，关联硬件-->
		<PROPERTY NAME="PowerSupplyCycle" TYPE="y"/> 
		<!-- 电池在位信号 -->
		<PROPERTY NAME="BatteryPresenceState" TYPE="y"></PROPERTY>
        <!-- 电源0502编码 -->
		<PROPERTY NAME="PowerType" TYPE="s"></PROPERTY>
		<CLASS NAME="PeripheralPower">
			<PROPERTY NAME= "Target" TYPE="ro"></PROPERTY>
		</CLASS>
		<METHOD NAME="UpdatePsVer">
		</METHOD>
		<METHOD NAME="UpdatePartNum">
			<PARAMETER TYPE="s" NAME="part_num" DIR="in"/>
		</METHOD>
		<!--方法：同步电源相关传感器需要用到的属性，从而达到电源告警事件的主备同步 -->
		<METHOD NAME="PowerEventPropertySync">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
		<!-- 方法：电源更换时用于产生SEL日志 -->
		<METHOD NAME="GenerateReplaceRecord">
		</METHOD>
        <!-- 方法：电源更换产生SEL日志时， 用于设置更换前SN信息 -->
		<METHOD NAME="SetPreReplaceInfo">
		</METHOD>
        <!-- 读取MCU中电子标签数据通用接口 供其他模块调用 -->
	    <METHOD NAME="GetPsElabelData">
            <PARAMETER TYPE="y" NAME="slot" DIR="in"/>	
            <PARAMETER TYPE="ay" NAME="ResponseData" DIR="out"/>			
	    </METHOD>
        <METHOD NAME="SetPsRoutineFlag">
            <PARAMETER TYPE="y" NAME="RoutineFlag" DIR="in"/>
        </METHOD>
    </CLASS>

    <!-- 电源分组管理 -->
    <CLASS NAME="PSUGroup">
        <!-- 电源分组ID-->
        <PROPERTY NAME="ID" TYPE="y"></PROPERTY>
        <!-- 分组内的电源在位状态，按bit位标识，bit0表示PSU1，bit1表示PSU2，以此类推 -->
        <!-- 0：表示不在位， 1：表示在位 -->
        <PROPERTY NAME="PSUPresentStatus" TYPE="q"></PROPERTY>
        <!-- 分组内的电源在位个数 -->
        <PROPERTY NAME="PSUPresentCount" TYPE="u"></PROPERTY>
        <!-- 分组内的电源slotid -->
        <PROPERTY NAME="PSUSlot" TYPE="ay"></PROPERTY>
        <!-- 分组内的实时功率，该分组内所有电源实时功率之和 -->
        <PROPERTY NAME="GroupPower" TYPE="d"></PROPERTY>
        <!-- 分组内可支持最大可配置的电源数量 -->
        <PROPERTY NAME="MaxPSUNum" TYPE="y"></PROPERTY>     
        <!-- 分组内满足最低要求下的最小电源数量（当可正常运行的电源数量小于该数量时，冗余失效） -->
        <PROPERTY NAME="MinPSUNum" TYPE="y"></PROPERTY>
        <!-- 分组内每个电源的额定功率 -->
        <PROPERTY NAME="PSURate" TYPE="aq"></PROPERTY>
        <!-- 分组额定功率 -->
        <PROPERTY NAME="GroupRate" TYPE="q"></PROPERTY>
        <!-- 最大支持功率 -->
        <PROPERTY NAME="MaxSupportPower" TYPE="u"></PROPERTY>
    </CLASS>

    <!-- 功率封顶 -->
    <CLASS NAME="PowerCapping" ID="14">
        <!-- 功率封顶使能 0:禁用;1:启用 -->
        <PROPERTY NAME="Enable" TYPE="y" ID="1" EXPORT="17"></PROPERTY>
        <!-- 功率封顶值 -->
        <PROPERTY NAME="LimitValue" TYPE="q" ID="2" EXPORT="17"></PROPERTY>
        <!-- 功率封顶失败，程序调用，不需要配置   1: 产生失败   0: 消除 -->
        <PROPERTY NAME="Failed" TYPE="u"></PROPERTY>
        <!-- 功率封顶失败动作配置支持 1: 支持   0: 不支持 -->
        <PROPERTY NAME="FailActionSupport" TYPE="y"></PROPERTY>
        <!-- 功率封顶失败动作 -->
        <PROPERTY NAME="FailAction" TYPE="y" ID="3" EXPORT="17"></PROPERTY>
        <!-- 功率封顶下限值 -->
        <PROPERTY NAME="BaseValue" TYPE="q" ID="4"></PROPERTY>
        <!-- 功率封顶下限值计算误差值 -->
        <PROPERTY NAME="BaseValueTolerance" TYPE="q"></PROPERTY> 		
        <!-- 功率封顶上限值 -->
        <PROPERTY NAME="TopValue" TYPE="q" ID="5"></PROPERTY> 
        <!-- 功率封顶下限值计算次数 -->
        <PROPERTY NAME="BaseValueTime" TYPE="q"></PROPERTY>
        <!-- 功率封顶下限值计算系数 -->
        <PROPERTY NAME="ReviseParam" TYPE="d"></PROPERTY> 
        <!-- 机框支持CPU的最大功率 -->		
        <PROPERTY NAME="CPULimitPower" TYPE="d"> </PROPERTY> 
        <PROPERTY NAME="PowerProtectionStatus" TYPE="y" >	 </PROPERTY>	
        <!-- 0:不能通过BMC设置功率封顶;1:可以通过BMC设置功率封顶 -->
        <PROPERTY NAME="ManualSetEnable" TYPE="y"></PROPERTY>
        <!-- Npu功耗封顶支持;0:不支持 1:支持 -->
        <PROPERTY NAME="CapSupportMask" TYPE="y">	<VALUE></VALUE>	</PROPERTY>
        <!-- Npu启动降频系数 -->
        <PROPERTY NAME="CapStartParam" TYPE="d">	<VALUE></VALUE>	</PROPERTY>
        <!-- Npu停止封顶系数 -->
        <PROPERTY NAME="CapStopParam" TYPE="d">	<VALUE></VALUE>	</PROPERTY>
        <!-- Npu启动升频系数 -->
        <PROPERTY NAME="CapRecoverParam" TYPE="d">	<VALUE></VALUE>	</PROPERTY>
        <!-- 预设功率封顶值，用于FusionPoD节点：当节点和RM210心跳丢失后，可能采用预设值自动开启功耗封顶 -->
		<PROPERTY NAME="PresetLimitValue" TYPE="q"></PROPERTY>
        <!-- 0:框满配时有单个节点; 1:框满配时有多个节点，各节点平均分摊下压功率值 -->
        <PROPERTY NAME="CapType" TYPE="y"></PROPERTY>
        <!-- 节点功率源 0: 节点功耗从器件读取，如INA220，1:节点功耗器件故障时，节点功耗由整框功耗均分 -->
        <PROPERTY NAME="NodePowerSource" TYPE="y"></PROPERTY>
        <!-- 封顶功率类型 0:使用系统输入功率封顶; 1:使用系统输出功率封顶 -->
        <PROPERTY NAME="CapMode" TYPE="y"></PROPERTY>
		<!-- 0:功率封顶功能不依赖于BMC各模块启动完成;1:功率封顶功能依赖于BMC各模块启动完成(包括调速生效) -->
        <PROPERTY NAME="PowerLimitWhenSteady" TYPE="y" ID="6" EXPORT="17"></PROPERTY>
        <METHOD NAME="SetEnable" ID="1">
            <PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
        </METHOD>
        <METHOD NAME="SetLimit" ID="2">
            <PARAMETER TYPE="q" NAME="Limit" DIR="in"/>
        </METHOD>
        <METHOD NAME="SetFailed">
        </METHOD>
        <METHOD NAME="SetFailAction" ID="3">
            <PARAMETER TYPE="y" NAME="FailAction" DIR="in"/>
        </METHOD>
        <METHOD NAME="SetPT">
            <PARAMETER TYPE="y" NAME="P" DIR="in"/>
            <PARAMETER TYPE="y" NAME="T" DIR="in"/>
        </METHOD>
        <METHOD NAME="GetPT">
            <PARAMETER TYPE="y" NAME="P" DIR="out"/>
            <PARAMETER TYPE="y" NAME="T" DIR="out"/>
        </METHOD>
        <METHOD NAME="GetPTLimit">
            <PARAMETER TYPE="y" NAME="P" DIR="out"/>
            <PARAMETER TYPE="y" NAME="T" DIR="out"/>
        </METHOD>
        <METHOD NAME="SetBase" ID="4">
            <PARAMETER TYPE="q" NAME="Base" DIR="in"/>
        </METHOD>
        <METHOD NAME="GetLimitPolicyStatus">
        </METHOD>
        <METHOD NAME="PresetLimit">
            <PARAMETER TYPE="q" NAME="Limit" DIR="in"/>
        </METHOD>
		<METHOD NAME="ActivatePresetLimit">
            <PARAMETER TYPE="y" NAME="ActiveStatus" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetPowerLimitWhenSteady" ID="6">
            <PARAMETER TYPE="y" NAME="PowerLimitWhenSteady" DIR="in"/>
        </METHOD>
        <!-- 特殊机型裁剪功耗封顶设置功能，不作为对外接口使用-->
        <METHOD NAME="SetPowerCappingManualSetEnable">
            <PARAMETER TYPE="y" NAME="ManualSetEnable" DIR="in"/>
        </METHOD>
        <!--方法：同步用户设置的capping属性到备板，并持久化 -->
        <METHOD NAME="PowerCappingSync">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
        </METHOD>
        <!--方法：同步capping属性到备板内存属性 -->
        <METHOD NAME="PowerMgntPropertySync">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
        </METHOD>
    </CLASS>

	<CLASS NAME="ShelfPowerCapping" ID="20">
		<!--节点功率封顶功率分配模式 0：均分1：手动；2：按比例自动分配-->
		<PROPERTY NAME="Mode" TYPE="y" ID="1" EXPORT="17"></PROPERTY>
		<!-- 整框功率封顶使能状态 0:禁用;1:启用-->
		<PROPERTY NAME="Enable" TYPE="y" ID="2" EXPORT="17"></PROPERTY>
		<!-- 整框功率封顶值。该值为0xFFFF时表示用户从未设置过整框功率封顶值，此时整框功率封顶值使用整框电源额定功率总和 -->
		<PROPERTY NAME="Value" TYPE="q" ID="3" EXPORT="17"></PROPERTY>
		<!-- 功率封顶启动门限-->
		<PROPERTY NAME="Threshold" TYPE="y" ID="4" EXPORT="17"></PROPERTY>
		<!-- 功率封顶启动门限防抖值-->
		<PROPERTY NAME="ThresholdTolerance" TYPE="y" ></PROPERTY>
		<!--功率封顶启动门限最大值-->
		<PROPERTY NAME="MaxThreshold" TYPE="y" ID="5" EXPORT="17"></PROPERTY>
		<!-- 整框节点功率封顶总的下限值 -->
		<PROPERTY NAME="BladesPowerCappingBaseValue" TYPE="q" ></PROPERTY>
		<!--额外消耗部分最大功率-->
		<PROPERTY NAME="MaxExtraValue" TYPE="q" ></PROPERTY>
		<!--额外消耗部分最大功率的校验值-->
		<PROPERTY NAME="MaxExtraVerifyValue" TYPE="q" ></PROPERTY>		
		<!--整框功耗封顶状态 0:正常 1:封顶失败 -->
		<PROPERTY NAME="State" TYPE="y" ></PROPERTY>
		<!--整框实时功耗 -->
		<PROPERTY NAME="CurrentPower" TYPE="q" ></PROPERTY>
		<!--整框功耗封顶生效状态 -->
		<PROPERTY NAME="ActiveState" TYPE="y" ></PROPERTY>
		<!-- 设置整框功耗封顶功率分配模式 -->
		<METHOD NAME="SetShelfPowerCappingMode" ID="1">
            		<PARAMETER TYPE="y" NAME="Mode" DIR="in"/>
        	</METHOD>
		<!-- 设置整框功耗封顶使能状态-->
		<METHOD NAME="SetShelfPowerCappingEnable" ID="2">
            		<PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
        	</METHOD>
		<!-- 设置整框功耗封顶值-->
		<METHOD NAME="SetShelfPowerCappingValue" ID="3">
            		<PARAMETER TYPE="q" NAME="Value" DIR="in"/>
       		</METHOD>
		<!-- 设置整框功耗封顶启用门限 -->
		<METHOD NAME="SetShelfPowerCappingThreshod" ID="4">
            		<PARAMETER TYPE="y" NAME="Threshold" DIR="in"/>
        	</METHOD>
		<!-- 设置整框功耗封顶启用门限-->
		<METHOD NAME="SetShelfPowerCappingMaxThreshod" ID="5">
			<PARAMETER TYPE="y" NAME="MaxThreshold" DIR="in"/>
		</METHOD>
		<!-- 整框功率封顶设置和生效状态同步 -->
		<METHOD NAME="ShelfPowerCappingConfigSync" ID="6">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD> 
		<!-- 获取整框功率封顶值可设置范围 -->
		<METHOD NAME="GetShelfPowerCappingValueRange">
			<PARAMETER TYPE="q" NAME="ValueBase" DIR="out"/>
			<PARAMETER TYPE="q" NAME="ValueTop" DIR="out"/>
		</METHOD> 
	</CLASS>
	<!-- MSPP功能类 多节点服务器电源保护功能 用于电源冗余丢失后整框功耗封顶 -->
    <CLASS NAME="MSPP" ID="97">
		<!-- MSPP功能是否使能，节点的该属性值从HMM同步 1： enable, 0：disable, 0xff：unsupport-->
		<PROPERTY NAME="Enable" TYPE="y" ID="1"></PROPERTY>
		<!-- MSPP整框功率封顶状态1:已经进入紧急功耗封顶状态 2：不在紧急功耗封顶状态-->
		<PROPERTY NAME="MSPPRunningState" TYPE="y" ></PROPERTY>
		<!-- （MM属性）单电源功耗是否够整框功耗，电源冗余丢失后是否需要CPLD拉PROHOT信号 1：需要拉PROHOT 0：不需要拉PROHOT -->
		<PROPERTY NAME="NeedPowerCapping" TYPE="y" ID="3"></PROPERTY>
		<!-- （节点和MM都有该属性，关联硬件不一样）电源失效,BMC轮询该寄存器来查询电源失效状态，1: 电源失效 0：电源状态恢复   -->
		<PROPERTY NAME="PowerFailure" TYPE="y" ID="2"></PROPERTY>
		<!-- （节点属性）功耗封顶成功后，BMC通过该寄存器位通知CPLD释放PROHOT信号 1：释放PROHOT信号 0：初始状态-->
		<PROPERTY NAME="ClearProhot" TYPE="y" ></PROPERTY>
		<METHOD NAME="SetMSPPEnable" ID="1">
            		<PARAMETER TYPE="y" NAME="MSPPEnable" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetNeedMSPP" >
            		<PARAMETER TYPE="y" NAME="NeedMSPP" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetRunningState">
            		<PARAMETER TYPE="y" NAME="RunningState" DIR="in"/>
        </METHOD>
	</CLASS>

	<CLASS NAME="I2CTest">
        <PROPERTY NAME="RefObject1" TYPE="ro"></PROPERTY>
		<PROPERTY NAME="RefObject2" TYPE="ro"></PROPERTY>
		<PROPERTY NAME="RefObject3" TYPE="ro"></PROPERTY>
	</CLASS>
    <CLASS NAME="CPLDSelftest">
		<PROPERTY NAME="SelfTestVal" TYPE="y"></PROPERTY>
		<PROPERTY NAME="TestRegVal" TYPE="y"></PROPERTY>
    </CLASS>
	<CLASS NAME="CardPresenceTest">
		<PROPERTY NAME="Presence" TYPE="y"></PROPERTY>
		<PROPERTY NAME="ExpectVal" TYPE="y"></PROPERTY>
    </CLASS>
	<CLASS NAME="ClockTest">
        <PROPERTY NAME="RefObject" TYPE="roa"></PROPERTY>
	</CLASS>
	
	<!-- 串口测试类，用于和串口测试对应的DftItem关联 -->
	<CLASS NAME="SerialPortTest" TYPE="Logical">
		<!-- 源串口控制器Id，概念和驱动中定义一致 -->
		<PROPERTY NAME="SrcUARTId" TYPE="y"></PROPERTY>
		<!-- 源端口Id，概念和驱动中定义一致 -->
		<PROPERTY NAME="SrcPortId" TYPE="y"></PROPERTY>
		<!-- 目的串口控制器Id，概念和驱动中定义一致，非自发自收情况下，可能有多个 -->
		<PROPERTY NAME="DestUARTId" TYPE="ay"></PROPERTY>
		<!-- 目的端口Id，概念和驱动中定义一致，非自发自收情况下，可能有多个 -->
		<PROPERTY NAME="DestPortId" TYPE="ay"></PROPERTY>
	</CLASS>

	<!-- 按键测试类 -->
	<CLASS NAME="ButtonTest">
		<!-- 按钮事件 -->
		<PROPERTY NAME="PressEvent" TYPE="y"></PROPERTY>
		<!-- 清除按钮事件 -->
		<PROPERTY NAME="ClearPressEvent" TYPE="y"></PROPERTY>
		<!-- 存在按钮事件的期望硬件值 -->
		<PROPERTY NAME="ExpectVal" TYPE="y"></PROPERTY>
		<!-- 启动装备测试前需要做的操作值，有些按键需要设置该值进入装备测试模式，屏蔽正常按键功能 -->
		<PROPERTY NAME="TestReady" TYPE="y"></PROPERTY>
		<!-- 进入装备测试需要设置的值 -->
		<PROPERTY NAME="TestReadyVal" TYPE="y"></PROPERTY>
    </CLASS>
	<!-- DFT ITEM信息 -->
    <CLASS NAME="DftItem">
        <!-- DFT ID每种测试唯一 -->
		<PROPERTY NAME="DftId" TYPE="u"></PROPERTY>
        <!-- 槽位号信息[0:3]表示当前层扣卡的槽位, [4:7]表示上一层单板所在槽位，[8:11]表示上上一层单板所在槽位
		最多三层，软件认为不应该超过3层叠加的扣卡 -->
		<PROPERTY NAME="Slot" TYPE="u"></PROPERTY>
        <!-- 设备编号，同一块板上唯一 -->
        <PROPERTY NAME="DevNum" TYPE="u"></PROPERTY>     
        <!-- 可测试性类型 -->
        <!-- 当TestabilityType为255时，表明该项不可测试，不注册该测试项。此规则用于动态适配装备背板下的测试场景 -->
        <PROPERTY NAME="TestabilityType" TYPE="u"></PROPERTY>
        <!-- 测试项名称 -->
        <PROPERTY NAME="ItemName" TYPE="s"></PROPERTY>
        <!-- 测试启动前准备提示 -->
        <PROPERTY NAME="PromptReady" TYPE="s"></PROPERTY>        
        <!-- 测试启动后交互提示 -->
        <PROPERTY NAME="PromptComplete" TYPE="s"></PROPERTY>
        <!-- 关联对象 -->
        <PROPERTY NAME="RefObject" TYPE="roa"></PROPERTY>
		<!-- DFTItem测试完成所需时间,默认0xffff表示不支持,装备会发送IPMI命令获取该时间,进行一定的延时处理 -->
        <PROPERTY NAME="ProcessTime" TYPE="q"></PROPERTY>
		<!-- Dft命令中需要做的一些动作，如按照一定的顺序写寄存器 -->
		<PROPERTY NAME="DftAction" TYPE="roa"></PROPERTY>
		<!-- 装备测试输入的参数 -->
		<PROPERTY NAME="InputData" TYPE="i"></PROPERTY>		
    </CLASS>
	
	<!-- DFT 状态信息 -->
    <CLASS NAME="DftStatus" ID="96">
        <!-- DFT 使能状态 -->
		<PROPERTY NAME="DftEnable" TYPE="y"></PROPERTY>
        <!-- CPLD DFT 使能状态 -->
        <PROPERTY NAME="DftCpldEnable" TYPE="y"></PROPERTY>
		<!-- DFT 是否处于装备模式标识 0：非装备模式 1：装备模式 ,通过升级dftimage.hpm包更新本属性为1,升级dftdisableimage.hpm更新本属性为0-->
		<PROPERTY NAME="DftModeFlag" TYPE="y"></PROPERTY>
		<!-- FT模式标识 0：非FT模式 1：FT模式 ,此属性是通过FTIdentifyType表示方法进行识别装备模式-->
		<PROPERTY NAME="FTModeFlag" TYPE="y" ID="1"></PROPERTY>
		<!-- 识别FT模式方法 0：不识别
		                    1：通过网口环回识别FT装备模式
		                    2: 通过串口环回识别FT装备模式，使用的uart_port在FTUartPort指定
		                    3: 通过LSW和SMM2相连的端口环回识别FT装备模式
		                    4: 通过汇聚面板串口环回识别FT装备模式（识别前节点串口必须切换到汇聚面板串口）
		                    other:保留
		-->
		<PROPERTY NAME="FTIdentifyType" TYPE="y" ></PROPERTY>
		<!-- 当FTIdentifyType为2时使用，若该属性指定的uart_port为环回口则进入装备模式-->
		<PROPERTY NAME="FTUartPort" TYPE="y"></PROPERTY>
		<!-- 当FTIdentifyType为1时使用，通过该属性指定的eth_port口下载装备包-->
		<PROPERTY NAME="FTEthPorts" TYPE="ay"></PROPERTY>
		<!-- 受限装备ipmi命令列表 --> 
		<PROPERTY NAME="RestrictedIPMICmdList" TYPE="roa"></PROPERTY>
		<!-- 客户动态屏蔽IPMI命令列表 掉电持久化
		  第一条命令 [1] 长度n1
		            [2] NetFunction
		            [3] Command
		  	        [4] ChanProtocol
		            [5:n1-4] data 
		  第二条命令 [n1+1] 长度n2
					[n1+2] NetFunction
					[n1+3] Command
					[n1+4] ChanProtocol
					[n1+5:n1+n2-4] data
		 ........
		-->
        <PROPERTY NAME="DynamicRestrictedIPMICmdList"  TYPE="ay"> </PROPERTY> 	
	<PROPERTY NAME="DynamicWhiteIPMICmdList"  TYPE="ay"> </PROPERTY>
		<!-- 受限装备类方法列表, class.method样式 --> 
        <PROPERTY NAME="RestrictedClassMethodList"  TYPE="roa"> </PROPERTY> 
        <!-- 装备测试包文件名（MM板） --> 
        <PROPERTY NAME="DftPackageFilename"  TYPE="s"> </PROPERTY> 
		<!-- 装备模式设置该命令，可屏蔽所有告警消除，让告警维持Assert状态不会消除 -->
		<!-- AlarmDeassertEnable = 1 告警会消除；0 告警不会消除 默认为1； -->
		<PROPERTY NAME="AlarmDeassertEnable" TYPE="y" ></PROPERTY>
		<CLASS NAME="AgentDftStatus"> </CLASS>
		<!-- DFT 设置装备模式标识 -->
		<METHOD NAME="SetDftModeFlag">
			<PARAMETER TYPE="y" NAME="ModeFlag" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetIPMICmdList">
			<PARAMETER TYPE="*" NAME="IPMICmdList" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetWhiteIPMICmdList">
			<PARAMETER TYPE="*" NAME="WhiteIPMCmdList" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetFTModeFlag">
			<PARAMETER TYPE="y" NAME="FTModeFlag" DIR="in"/>
		</METHOD>
        <METHOD NAME="PropertySyncMethod">
            <PARAMETER DIR="in"  TYPE="*" NAME="*" />
            <PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
    </CLASS>
	
	<!-- DFT VERSION信息 -->
    <CLASS NAME="DftVersion">
		<PROPERTY NAME="FruId" TYPE="y"></PROPERTY>
		<!--0=PCB version-->
		<!--1=main firmware version-->
		<!--2=CPLD version-->
		<!--3=FPGA version-->
		<!--4=FRU data version-->
		<!--5=SDR version-->
		<!--6=BIOS firmware version-->
		<!--7=Hardware version-->
		<!--8=bootloader version /uboot/bootrom-->
		<!--9=hpm image version-->
		<!--10=USB flash device firmware version-->
		<!--11=other firmware version (852T扣卡用这个)-->
		<!--12=backup firmware version-->
		<!--13=SYS CPLD（OSCA SPU板使用）-->
		<!--14=Capacitor Manager firmware version（OSCA SOD使用）-->
		<!--15=MMC version-->
		<!--23=LCD(液晶屏，与Device Test中器件ID保持一致) -->
		<!--24=available firmware version(用于查询iBMC可用分区版本信息) -->
        <!--25=HWSR Version-->
        <!--26=VRD Version-->
		<PROPERTY NAME="VersionType" TYPE="y"></PROPERTY>
        <PROPERTY NAME="Version" TYPE="s"></PROPERTY>
		<PROPERTY NAME="UnitNum" TYPE="u"></PROPERTY>
		<PROPERTY NAME="NeedUintNum" TYPE="y"></PROPERTY>
    </CLASS>

	<CLASS NAME="DftIpStore">
		<!-- 将IPV4地址设置到寄存器中 -->
		<!-- 示例: 192.168.2.100 对应 Ipaddr1.Ipaddr2.Ipaddr3.Ipaddr4 -->
		<PROPERTY NAME="Ipaddr1" TYPE="y">	</PROPERTY>
		<PROPERTY NAME="Ipaddr2" TYPE="y">	</PROPERTY>
		<PROPERTY NAME="Ipaddr3" TYPE="y">	</PROPERTY>
		<PROPERTY NAME="Ipaddr4" TYPE="y">	</PROPERTY>
	</CLASS>

	<!-- FUNTION:串口管理 -->
    <CLASS NAME="SerialPort">
		<!-- 串口ID -->
		<PROPERTY NAME="id" TYPE='y'>		</PROPERTY>
		<!-- 互连端口-->
		<PROPERTY NAME="port" TYPE='y'>		</PROPERTY>
		<!-- 互连串口 -->
		<PROPERTY NAME="uart"  TYPE="y">	</PROPERTY>
		<!-- 强制切换BMC跳冒： 0 系统串口 ， 1 BMC调试串口 -->
		<PROPERTY NAME="ser_sw"  TYPE="y">	</PROPERTY>
		<!-- 对外方法：设置uart之间的互连关系 -->
		<METHOD NAME="SetSerialConnection">
            <PARAMETER TYPE="y" NAME="source_serial" DIR="in"/>
			<PARAMETER TYPE="y" NAME="dest_serial" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
        </METHOD>
		<!-- 对外方法：设置面板串口的方向 -->
		<METHOD NAME="SetPortConnection">
            <PARAMETER TYPE="y" NAME="source_serial" DIR="in"/>
			<PARAMETER TYPE="y" NAME="dest_port" DIR="in"/>
			<PARAMETER TYPE="i" NAME="ret_code" DIR="out"/>
        </METHOD>
    </CLASS>
    
	<!-- 配置管理 -->
    <CLASS NAME="CfgMgnt">
        <!-- 备份配置为出厂设置 -->
		<METHOD NAME="BackUp"></METHOD>
        <!-- 恢复出厂设置 -->
		<METHOD NAME="LoadBak"></METHOD>
    </CLASS>
    
    <!-- ====================== begin add by licheng ====================== -->
	<!-- 
	描述：用于配置日志的存放路径及名称(目前还不支持任意配置，请保留默认配置)
	所属模块：维护调测模块(maint_debug) -->
	<CLASS NAME="Log">	
		<!-- 日志默认记录级别 -->
		<PROPERTY NAME="DlogDefLevel" TYPE="i">               </PROPERTY>
		<!-- 日志文件存放目录 -->
		<PROPERTY NAME="LogDir" TYPE="s">               </PROPERTY>
		<!-- 调试日志文件名称 -->
		<PROPERTY NAME="DebugLogFile" TYPE="s">         </PROPERTY>
		<!-- 策略日志文件名称 -->
		<PROPERTY NAME="StrategyLogFile" TYPE="s">      </PROPERTY>
		<!-- 操作日志文件名称 -->
		<PROPERTY NAME="OperateLogFile" TYPE="s">     </PROPERTY>
		<!-- 安全日志文件名称 -->
		<PROPERTY NAME="SecurityLogFile" TYPE="s"></PROPERTY>
		<!-- 操作日志文件容量门限 -->
		<PROPERTY NAME="OperateLogThreshold" TYPE="y"></PROPERTY>
		<!-- 操作日志文件容量溢出状态 -->
		<PROPERTY NAME="OperateLogExceedStatus" TYPE="y"></PROPERTY>
		<!-- 操作日志文件备份个数 -->
		<PROPERTY NAME="OperateLogBackups" TYPE="y"></PROPERTY>
		<!-- 安全日志文件容量门限 -->
		<PROPERTY NAME="SecurityLogThreshold" TYPE="y"></PROPERTY>
		<!-- 安全日志文件容量溢出状态 -->
		<PROPERTY NAME="SecurityLogExceedStatus" TYPE="y"></PROPERTY>
		<!-- 安全日志文件备份个数 -->
		<PROPERTY NAME="SecurityLogBackups" TYPE="y"></PROPERTY>
		<!-- 操作日志记录代理，为无法记录操作日志的模块提供函数调用 -->
		<METHOD NAME="OperateLogProxy">
			<PARAMETER TYPE="s" NAME="target" DIR="in"/>
			<PARAMETER TYPE="s" NAME="message" DIR="in"/>
		</METHOD>
		<METHOD NAME="MaintLogProxy">
			<PARAMETER TYPE="y" NAME="severity" DIR="in"/>
			<PARAMETER TYPE="s" NAME="fileld" DIR="in"/>
			<PARAMETER TYPE="s" NAME="message" DIR="in"/>
		</METHOD>
		<!-- 清除日志文件 -->
		<METHOD NAME="RmLog">
			<!-- 日志文件类型，0：所有日志文件 -->
			<PARAMETER TYPE="y" NAME="LogType" DIR="in"/>
		</METHOD>
		<METHOD NAME="AdvanceLoadBak">
			<!-- 清除操作日志、运行日志、安全日志、截屏、录像、历史功率文件、故障诊断、SEL后进行恢复出厂设置 -->
		</METHOD>
		
		<!-- 清除操作日志 -->
		<METHOD NAME="ClearOperationLog"></METHOD>
		<!-- 清除运行日志 -->
		<METHOD NAME="ClearRunLog"></METHOD>
		<!-- 清除安全日志 -->
		<METHOD NAME="ClearSecurityLog"></METHOD>
	</CLASS>

	<!-- 
	描述：用于一键收集的配置
	所属模块：维护调测模块(maint_debug) -->
    <CLASS NAME="Dump">
		<!-- 第三方App日志存放路径，一键收集时会将这个路径下的文件收集到3rdApp目录下 -->
        <PROPERTY NAME="ThirdAppLogPath" TYPE="as">      </PROPERTY>
		<!-- 自定义信息存放路径，一键收集时会将这个路径下的文件收集到CustomInfo目录下 -->
        <PROPERTY NAME="CustomInfoPath"  TYPE="as">      </PROPERTY>
		<!-- 收集过程的当前状态，不可配置，作为接口提供给其他模块读取 -->
		<PROPERTY NAME="DumpPhase"  TYPE="y">      </PROPERTY>
		<!-- 收集后的文件存放路径，不可配置，作为接口提供给其他模块读取 -->
		<PROPERTY NAME="DumpFilePath"  TYPE="s">      </PROPERTY>
        <!-- 一键收集的方法，供其他模块调用；参数：信息收集后的存放目录 -->
        <METHOD NAME="DumpInfo" />
	<!-- 一键收集的方法(异步方式)，供其他模块调用；参数：信息收集后的存放目录 -->
	<METHOD NAME="DumpInfoAsync">
	    <PARAMETER TYPE="y" NAME="isdomain" DIR="in"/>
	</METHOD>	
	<METHOD NAME="DumpInfoBothSmmAsync">
        <PARAMETER TYPE="y" NAME="isdomain" DIR="in"/>
        <PARAMETER TYPE="s" NAME="location" DIR="in"/>
	</METHOD>
	<!-- 获取当前收集阶段(目前仅提供收集百分比) -->
	<METHOD NAME="GetDumpPhase">
            <PARAMETER TYPE="i" NAME="percent" DIR="out"/>            
	</METHOD>
	<METHOD NAME="GetBothSmmDumpPhase">
		<PARAMETER TYPE="i" NAME="percent" DIR="out"/>            
	</METHOD>
	<METHOD NAME="GetDumpIsRunning">
		<PARAMETER TYPE="y" NAME="flag" DIR="out"/>
	</METHOD>
    </CLASS>

	<!-- 
	描述：脚本引擎，用于在PME启动时执行指定脚本
	所属模块：维护调测模块(maint_debug) -->
    <CLASS NAME="ScriptEngine">
        <!-- 脚本文件绝对路径 -->
        <PROPERTY NAME="ScriptFilePath" TYPE="s">       </PROPERTY>
		<!-- 初始化脚本路径 -->
        <PROPERTY NAME="InitScriptPath" TYPE="s">       </PROPERTY>
    </CLASS>
	
	<!-- 
	描述：三段数码管显示控制，每个属性对应于一段数码管的显示控制寄存器
	所属模块：传感器模块(sensor_alarm)
	-->
	<CLASS NAME="LedDispControl">
		<!-- LED数码管是否存在，1表示使能，0表示禁止 -->
		<PROPERTY NAME="LedTbueSupport" TYPE="y">	</PROPERTY>        
		<!-- 配置数码管相关的寄存器 -->
		<PROPERTY NAME="LedShowData1"   TYPE="y">	</PROPERTY>
		<!-- 配置数码管相关的寄存器 -->
		<PROPERTY NAME="LedShowData2"   TYPE="y">	</PROPERTY>
		<!-- 配置数码管相关的寄存器 -->
		<PROPERTY NAME="LedShowData3"   TYPE="y">	</PROPERTY>
		<!-- 设置数码管要显示的原始数据，即直接设置上面三个属性 -->
		<METHOD NAME="SetRawData">
			<PARAMETER TYPE="y" NAME="rawdata1" DIR="in"/>
			<PARAMETER TYPE="y" NAME="rawdata2" DIR="in"/>
			<PARAMETER TYPE="y" NAME="rawdata3" DIR="in"/>
		</METHOD>
	</CLASS>
	
	<!--
	描述：用于数码管显示配置
	所属模块：传感器模块(sensor_alarm)
	-->
	<CLASS NAME="LedDispElmt">
		<!-- 引用的传感器对象，传感器告警时在数码管上显示配置的字符 -->
		<PROPERTY NAME="SensorObject"   TYPE="ro">	</PROPERTY>
		<!-- 数码管显示格式，配置的“xx”表示数字占位符
		例如：Fmt=Fxx，Num=01，则数码管显示F01 -->
		<PROPERTY NAME="Fmt"   TYPE="s">	</PROPERTY>
		
		<!-- LedDispElmt的派生类，Num为字符串类型 -->
		<CLASS NAME="LedDispElmt_S">
			<PROPERTY NAME="Num" TYPE="s">	</PROPERTY>
		</CLASS>
		<!-- LedDispElmt的派生类，Num为数字类型 -->
		<CLASS NAME="LedDispElmt_RP">
			<PROPERTY NAME="Num" TYPE="y">	</PROPERTY>
		</CLASS>
	</CLASS>
	
	<!-- 
	描述：环境监控类，包括各种监控，例如温度、电压、寄存器等等
	所属模块：环境监控模块(environment) -->
	<CLASS NAME="Monitor">
		<!-- 器件自检引用对象，大多数监控点与硬件相关，在启动监
			控功能之前需要对器件进行自检，自检通过后才能启动自
			检项 -->
		<PROPERTY NAME="SelfTestObject" TYPE="ro"/>

		<!-- 提供给传感器的监控值 高字节为扫描状态，低字节为监控值
			Byte 1
			[7] 1 硬件故障   0 硬件功能正常
			[6] 1 硬件未工作 0 硬件正在工作
			[5] Monitor模块内部错误
			[4:0] 保留
			Byte 0
			[7:0] 提供给传感器的原始读数，仅当Byte1为0时有效-->
		<PROPERTY NAME="MonSenValue" TYPE="q">	</PROPERTY>
		
		<!-- 去抖策略 -->
		<PROPERTY NAME="DebouncedCfg" TYPE="ro"/>
		
		<!-- 电压监控 -->
		<CLASS NAME="VoltMonitor">
			<!-- 电压原始值，单位mV -->
			<PROPERTY NAME="VoltValue" TYPE="u"/>
			<!-- 转换系数，由于传感器要求原始读数为1Byte，因此需要
			将4Byte的ValtValue转换为1Byte -->
			<PROPERTY NAME="ConvertCoef" TYPE="u"/>
			<CLASS NAME="AgentVoltMonitor"> </CLASS>
		</CLASS>
		
		<!-- 温度监控 -->
		<CLASS NAME="TempMonitor">
			<!-- 温度值 -->
			<PROPERTY NAME="TempValue" TYPE="y">	</PROPERTY>	
			<CLASS NAME="AgentTempMonitor"> </CLASS>
		</CLASS>
        
        <CLASS NAME="PMBusTempMonitor"> 
            <!-- 温度值 -->
			<PROPERTY NAME="TempValue" TYPE="q">	</PROPERTY>	
        </CLASS> 
		
		<CLASS NAME="FloatTempMonitor">
			<!-- 浮点温度值 -->
			<PROPERTY NAME="TempValue" TYPE="q"> </PROPERTY> 
		</CLASS>
		
		<!-- 最大值监控 -->
		<CLASS NAME="MaxValueMonitor">
			<!-- 需要监控的所有值 -->
			<PROPERTY NAME="MonElement" TYPE="as">	</PROPERTY>
		</CLASS>
		
		<!-- 寄存器监控 -->
		<CLASS NAME="RegMonitor">
			<!-- RegMonitor内部更新线程在获取值后会根据Autoclr标志位判断是否要自动清零，
			RegValue和AutoClr同时非0时update_sen_val_reg会将寄存器清零-->
			<PROPERTY NAME="AutoClr" TYPE="y">	</PROPERTY>
			<!-- 寄存器值 -->
			<PROPERTY NAME="RegValue" TYPE="y">	</PROPERTY>	
			<CLASS NAME="AgentRegMonitor"> </CLASS>
			<CLASS NAME="XAgentRegMonitor"> </CLASS>
		</CLASS>
	</CLASS>

	<!-- 值选择器，周期性根据IsMem从内存或Auto模式读取值并写入Value -->
	<CLASS NAME="ValueSelector">
		<!-- 需要监控的所有值 -->
		<PROPERTY NAME="Value" TYPE="*">		</PROPERTY>
		<!-- 如果为1表示使用X更新Value，否则使用Y更新Value -->
		<PROPERTY NAME="SelectX" TYPE="y">		</PROPERTY>
		<!-- X值 -->
		<PROPERTY NAME="X" TYPE="*">			</PROPERTY>
		<!-- Y值 -->
		<PROPERTY NAME="Y" TYPE="*">			</PROPERTY>
		<!-- 扫描周期 -->
		<PROPERTY NAME="Period" TYPE="y">		</PROPERTY>
		<METHOD NAME="ValueSelectorSync">
			<!-- 其它属性名则设置到对应属性 -->
			<!-- 注意：Name为X时将值设置到Y，Name为Y时将值设置到X，其它值不变 -->
			<PARAMETER TYPE="s" NAME="Name" DIR="in"/>
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
	</CLASS>

	<!-- 
	描述：用于记录环境监控曲线
	所属模块：环境监控模块(environment) -->
	<CLASS NAME="EnvRecord">
		<!-- 方法：清空历史记录，无入参/出参 -->
		<METHOD NAME="ClearHistoryRecord" />
		<!-- 方法：回滚到老版本的历史记录，无入参/出参 -->
		<METHOD NAME="RollbackEnvTempRecord" />
	</CLASS>
	
	<!-- 
	描述：根据配置的门限产生Assert属性的变更，目前仅支持低阈值监控
	所属模块：环境监控模块(environment) -->
	<CLASS NAME="ThresholdAssert">
		<!-- 不需要配置，当检测属性发生变化时根据已配置的阈值进行
		相应的变化 -->
		<PROPERTY NAME="Assert" TYPE='y'>	</PROPERTY>
		<!-- 低阈值 -->
		<PROPERTY NAME="LowerNoncritical" TYPE='u'>		</PROPERTY>
		<!-- 负向迟滞量 -->
		<PROPERTY NAME="NegativeHysteresis" TYPE='u'>	</PROPERTY>
		<!-- 引用的属性 -->
		<PROPERTY NAME="ReferenceProperty"  TYPE='u'>	</PROPERTY>
	</CLASS>
	
	<!-- ADC总线，考虑废弃，引入Adc器件类，直接挂在localbus总线上 -->
	<CLASS NAME="AdcBus">
		<PROPERTY NAME="Id" TYPE="y"/>
		<PROPERTY NAME="Type" TYPE="y"/>
		<PROPERTY NAME="ScanRate" TYPE="u"/>
		<PROPERTY NAME="VoltRefSrc" TYPE="i"/>
		<PROPERTY NAME="VoltRefVal" TYPE="u"/>
	</CLASS>
	
	<!-- 
	描述：自检类
	所属模块：环境监控模块(environment) -->
	<CLASS NAME="MonSelftest">
		<!-- 是否支持下电自检，1为支持，0为不支持 -->
		<PROPERTY NAME="DevPowerStatus" TYPE="y"/>
		
		<!-- 非物理设备自检，直接返回配置的自检结果 -->
		<CLASS NAME="NoDevTest">
			<!-- 配置的自检结果 -->
			<PROPERTY NAME="TestResult" TYPE="i"/>
		</CLASS>
		
		<!-- 物理设备自检 -->
		<CLASS NAME="DevTest">
			<!-- 相关的物理设备 -->
			<PROPERTY NAME="RefChip" TYPE="ro"/>
		</CLASS>
		
		<!-- 电压检测 -->
		<CLASS NAME="VoltTest">
			<!-- 不需要配置，读取到的电压值 -->
			<PROPERTY NAME="VoltValue" TYPE="u"/>
			<!-- 上电时的标准电压 -->
			<PROPERTY NAME="PowOnStandValue" TYPE="u"/>
			<!-- 下电时的标准电压 -->
			<PROPERTY NAME="PowOffStandValue" TYPE="u"/>
			<!-- 电压的波动范围 -->
			<PROPERTY NAME="HystValue" TYPE="u"/>
		</CLASS>
	</CLASS>
	
	<!-- 
	描述：防抖策略配置
	所属模块：硬件监控模块(hw_scan) -->
	<CLASS NAME="DebouncedConfig">
		<!-- 不需要防抖 -->
		<CLASS NAME="DbdCfgNone">
		</CLASS>
		
		<!-- 中值平均防抖 -->
		<CLASS NAME="DbdCfgMidAvg">
			<!-- 数值是否带符号 -->
			<PROPERTY NAME="IsSigned" TYPE="b">	</PROPERTY>
			<!-- 历史数据个数 -->
			<PROPERTY NAME="HistoryValNum" TYPE="y">	</PROPERTY>
		</CLASS>
		
		<CLASS NAME="DbdCfgMedian">
			<!-- 数值是否带符号 -->
			<PROPERTY NAME="IsSigned" TYPE="b">	</PROPERTY>
			<!-- 历史数据个数 -->
			<PROPERTY NAME="HistoryValNum" TYPE="y">	</PROPERTY>
		</CLASS>

		<!-- 持续二值防抖 -->
		<CLASS NAME="DbdCfgContBin">
			<!-- 高电平持续次数 -->
			<PROPERTY NAME="ContNum_H" TYPE="y">	</PROPERTY>
			<!-- 低电平持续次数 -->
			<PROPERTY NAME="ContNum_L" TYPE="y">	</PROPERTY>
		</CLASS>
		
		<!-- 持续防抖 -->
		<CLASS NAME="DbdCfgCont">
			<!-- 持续次数 -->
			<PROPERTY NAME="ContNum" TYPE="y">	</PROPERTY>
		</CLASS>
	</CLASS>
	<!-- ====================== end add by licheng ====================== -->	

    <!-- PSU槽位 -->
    <CLASS ID="129" NAME="PsuSlot">
		<!-- 电源槽位号(0~3) -->
        <PROPERTY NAME="SlotId" TYPE="y" ID="1"> </PROPERTY>
		<!-- 电源I2C地址 -->
        <PROPERTY NAME="SlotI2cAddr" TYPE="y"> </PROPERTY>
		<!-- 电源FRU信息I2C地址 -->
        <PROPERTY NAME="FruI2cAddr" TYPE="y"> </PROPERTY>
        <!-- 电源监测 I2C 总线号 (0~11)-->
        <PROPERTY NAME="I2cId" TYPE="y"></PROPERTY>
        <!-- 电源监测 I2C 总线速率等级 (0:100Kbps; 1:400Kbps; 2:3400Kbps -->
        <PROPERTY NAME="I2cSpeed" TYPE="y"></PROPERTY>
        <!-- CPLD获取到的Input状态 -->
        <PROPERTY NAME="InputStatus" TYPE="y"></PROPERTY>
        <!-- CPLD获取到的Output状态 -->
        <PROPERTY NAME="OutputStatus" TYPE="y"></PROPERTY>
	<!-- 电源关联的Chip对象，如果非空则通过Chip类访问电源 -->
	<!-- 通过数组chip关联列表，获取当前可用chip对象名称 -->
	<PROPERTY NAME="PsuChip" TYPE="*"></PROPERTY>
	<!-- 电源I2C地址备用地址列表  -->
	<PROPERTY NAME="SlotI2cAddrlist" TYPE="ay">	</PROPERTY>	
	<!-- Fru备用地址列表  -->
	<PROPERTY NAME="FruI2cAddrlist" TYPE="ay">	</PROPERTY>	
	<!-- Protocol备用地址列表  -->
	<PROPERTY NAME="Protocollist" TYPE="ay">	</PROPERTY>	
	<!-- 版本信息偏移量备用地址列表  -->
	<PROPERTY NAME="ReadVerOffsetlist" TYPE="ay">	</PROPERTY>	
	<!-- 关联Chip列表  -->
	<PROPERTY NAME="RefChipList" TYPE="roa">	</PROPERTY>
	<!--识别地址失败标志，0：正常，1:失败-->
	<PROPERTY NAME="DetectFail" TYPE="y" ID="2">	</PROPERTY>
	<!-- 电源FRU关联的Chip对象，如果非空则通过Chip类访问电源 -->
	<PROPERTY NAME="FruChip" TYPE="*"></PROPERTY>
    </CLASS>
    
    <CLASS NAME="RiserPcieCard" ID="135">
        <!-- 槽位号 -->  
        <PROPERTY NAME="Slot" TYPE="y" ID="1"></PROPERTY>
        <!-- 子槽位个数 -->
        <PROPERTY NAME="SubSlotCount" TYPE="y"></PROPERTY>
        <!-- 子槽位位宽 -->
        <PROPERTY NAME="SubSlotWidth" TYPE="ay"></PROPERTY>
        <!-- 类型 -->
        <PROPERTY NAME="Type" TYPE="s"></PROPERTY>
        <!-- 厂商 -->
        <PROPERTY NAME="Manufacturer" TYPE='s'/> 
        <!-- BoardId -->
        <PROPERTY NAME="BoardId" TYPE="q" ID="2"></PROPERTY>
        <!--PCB Id -->
        <PROPERTY NAME="PcbId" TYPE="y"/>
        <!--PCB版本 -->
        <PROPERTY NAME="PcbVer" TYPE="s">						</PROPERTY>
        <!--逻辑版本号 -->
        <PROPERTY NAME="LogicVerId" TYPE="y">						</PROPERTY>
        <!--逻辑版本 -->
        <PROPERTY NAME="LogicVer" TYPE="s">						</PROPERTY>
        <!--逻辑器件位置号 -->
        <PROPERTY NAME="LogicUnit" TYPE='u'>				</PROPERTY>
        <!-- 在位 -->
        <PROPERTY NAME="Presence" TYPE="y" ID="3"></PROPERTY>
        <!-- 名称 -->
        <PROPERTY NAME="Name" TYPE='s' />
        <!-- 健康状态 -->
        <PROPERTY NAME="Health" TYPE='y' />
		<!-- Riser卡类型值，该值需要写入CPLD寄存器 -->		
        <PROPERTY NAME="TypeSet" TYPE='y'/>
		<!-- Riser卡类型值，1：X16*2；0：X8*3或者X8*1 -->
		<PROPERTY NAME="TypeValue" TYPE='y'/>
		<!-- 更换后SN -->   
		<PROPERTY NAME="SerialNumber" TYPE="s" ></PROPERTY>
		<!-- 更换前SN -->   
		<PROPERTY NAME="PreviousSN" TYPE="s" ></PROPERTY> 
		<!-- 部件是否发生了更换，用于产生SEL日志 -->
		<PROPERTY NAME="ReplaceFlag" TYPE="y" >	</PROPERTY>
		<!-- 组件唯一标识 --> 
		<PROPERTY NAME="ComponentUniqueID" TYPE="s"> </PROPERTY>
        <!-- EEPROM中自描述信息的版本号 -->
        <PROPERTY NAME="HWSRVersion" TYPE="s">		</PROPERTY>
		<!-- 部件编码  -->
		<PROPERTY NAME="PartNum" TYPE='s'>	</PROPERTY>
		<CLASS NAME="AgentRiserPcieCard"> </CLASS>
    </CLASS>
    
    <CLASS ID="79" NAME="MeInfo">
		<!-- Me状态， 0：recover，1：normal -->
		<PROPERTY NAME="MeStatus" TYPE='y'>             </PROPERTY>
        <!-- Me类型， 0：SMLink，1：SMbus转PECI -->
		<PROPERTY NAME="MeAccessType" TYPE="y"></PROPERTY>
        <!-- PCH温度 -->  
        <PROPERTY NAME="PchTemp" TYPE="q"></PROPERTY>
		<!-- 0 不支持 ；1 支持通过ME获取 ；2 通过BMA获取 -->
		<PROPERTY NAME="SupportUtiliseMode" TYPE="y"></PROPERTY> 
		<!-- bit0 - 1：表示因bios组件下载功能启动导致ME进入recovery，0：表示bios组件下载功能未启动；
             bit1 - 1：表示因装备SPI测试功能启动导致ME进入recovery，0：表示装备SPI测试功能未启动
        -->
		<PROPERTY NAME="ForceRecoveryCause" TYPE="y"></PROPERTY> 
        <!-- CPU占用率 -->  
        <PROPERTY NAME="CpuUtilise" TYPE="q" ID="1"></PROPERTY>
        <!-- 内存利用率 -->  
        <PROPERTY NAME="MemUtilise" TYPE="q"></PROPERTY>
		<!-- 总内存带宽利用率 -->
        <PROPERTY NAME="MemBandWidthUtilise" TYPE="q"></PROPERTY>
		<!-- CPU利用率告警门限值 -->  
        <PROPERTY NAME="CpuUtiliseThre" TYPE="q" ID="2" EXPORT="17"></PROPERTY>
		<!-- 内存利用率告警门限值 --> 		
        <PROPERTY NAME="MemUtiliseThre" TYPE="q" ID="3" EXPORT="17"></PROPERTY> 
		<!-- 磁盘分区利用率告警门限值 --> 		
        <PROPERTY NAME="DiskPartitionUsageThre" TYPE="q" ID="4" EXPORT="17"></PROPERTY> 
		<!-- CPU利用率告警状态 --> 
        <PROPERTY NAME="CpuUtiliseState" TYPE="y"></PROPERTY>
		<!-- CPU利用率告警状态 --> 		
        <PROPERTY NAME="MemUtiliseState" TYPE="y"></PROPERTY>
		<!-- CPU当前功耗 -->
		<PROPERTY NAME="CpuCurPower" TYPE="q"></PROPERTY>
		<!-- 内存当前功耗 -->
		<PROPERTY NAME="MemCurPower" TYPE="q"></PROPERTY>
		<!--ECC扫描周期 单位：分钟-->
		<PROPERTY NAME="EccClearCycle" TYPE="u"></PROPERTY>
		<!--ECC门限 单位：个-->
		<PROPERTY NAME="EccThreshold"  TYPE="u"></PROPERTY>
		<!-- 表示部件是否故障诊断定位的故障源，1表示是故障源，0表示不是 -->
		<PROPERTY NAME="PCHFault" TYPE='y'>		        </PROPERTY>
		<!-- PFA Event -->
		<PROPERTY NAME="PFAEvent" TYPE='y'>		        </PROPERTY>
		<!-- 从Cpu类移动过来 CPU0的Tcontrol值 -->
		<PROPERTY NAME="TControlTemp" TYPE='q'>				</PROPERTY>
		<!-- CPU0的Tjmax值 -->
		<!-- fireware版本，格式x.xx -->
		<PROPERTY NAME="FirmVersion" TYPE="s">		</PROPERTY>
		<!-- 协处理器名称 -->
		<PROPERTY NAME="Name" TYPE="s">		</PROPERTY>
		<PROPERTY NAME="ResetiME" TYPE="y">		</PROPERTY>
	    <PROPERTY NAME="CpuTjmax" TYPE='q' ID="5" EXPORT="17">				</PROPERTY>
		<!-- CPU0的Tdp值（额定功耗） -->
		<PROPERTY NAME="CpuTdp" TYPE='d'>				</PROPERTY>
        <!-- Defines whether ME is powered in all Sx states or in S0/S1 states only.
             1：Powered in All Sx States.
             2：Powered in S0 S1 Only. 
             0xff: 无效值，老产品未使用此属性，默认配置为0xff，不影响老产品代码逻辑-->
        <PROPERTY NAME="ScaMEPowerMode" TYPE='y'>				</PROPERTY>
        <!-- 升级me异常的时候的恢复策略.
             bit0：1/0(使能/禁用AC修复ME).
             bit1：1/0(使能/禁用拉Pfr的方式修复ME 修复动作为写0再写1).-->
        <PROPERTY NAME="MEResumeStrategy" TYPE='y'>				</PROPERTY>
        <!-- 修复ME关联Accessor 通过写逻辑寄存器拉 PFR 来修复ME-->
        <PROPERTY NAME="PfrRepairMe" TYPE='y'>				</PROPERTY>
		<!-- 方法：设置利用率告警门限 -->
		<METHOD NAME="SetUtiliseThreshold">
			<!-- 0: Cpu; 1: Memory; 2: Disk -->
			<PARAMETER TYPE="y" NAME="type" DIR="in"/>
			<PARAMETER TYPE="q" NAME="threshold" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetForceRecoveryCause">
			<PARAMETER TYPE="y" NAME="ForceRecoveryCause" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetCpuUtilise">
			<PARAMETER TYPE="q" NAME="utilise" DIR="in"/>
		</METHOD>		
		<METHOD NAME="SetMemUtilise">
			<PARAMETER TYPE="q" NAME="utilise" DIR="in"/>
		</METHOD>	
		<!-- Thre: 0~100 -->
		<METHOD NAME="SetCpuUtiliseThre" ID="2">
			<PARAMETER TYPE="q" NAME="threshold" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetMemUtiliseThre" ID="3">
			<PARAMETER TYPE="q" NAME="threshold" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetDiskPartitionUsageThre" ID="4">
			<PARAMETER TYPE="q" NAME="threshold" DIR="in"/>
		</METHOD>
		
		<METHOD NAME="SetPCHFault">
			<PARAMETER TYPE="y" NAME="PCHFault" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetiMEReset">
		</METHOD>
		<!--  设置PFAEvent -->
		<METHOD NAME="SetPFAEvent">
			<PARAMETER TYPE="y" NAME="PFAEvent" DIR="in"/>
        </METHOD>
        <METHOD NAME="RepiarMeByPfr"> </METHOD>
    </CLASS>    
    <CLASS NAME="OpaMezzInfo">
		<PROPERTY NAME="OpaSvidChip" TYPE="roa">       </PROPERTY>
		<PROPERTY NAME="OpaTemp" TYPE='q'>          </PROPERTY>
		<PROPERTY NAME="OpaVolt1Threshold" TYPE='y'>        </PROPERTY>
		<PROPERTY NAME="OpaVolt1" TYPE='q'>		</PROPERTY>
		<PROPERTY NAME="OpaVolt2" TYPE="q">        </PROPERTY>
		<PROPERTY NAME="OpaVolt3" TYPE='q'>        </PROPERTY>
		<PROPERTY NAME="OpaVolt4" TYPE='q'>        </PROPERTY>
		<PROPERTY NAME="OpaVolt5" TYPE='q'>		</PROPERTY>
		<PROPERTY NAME="MezzSvidReadFail" TYPE='y'>		</PROPERTY>
    </CLASS>
	
	<!-- 
	描述：Mezz卡配置信息类
	所属模块：扣卡管理模块(pcie_card) -->
    <CLASS NAME="MezzCard" ID="61" >
		<!-- Mezz卡Fru id -->
		<PROPERTY NAME="FruId" TYPE="y" ID="1"></PROPERTY>
		<!-- Mezz卡Mac Addr 不做持久化，从eep读取 -->
		<PROPERTY NAME="MacAddr" TYPE="as"></PROPERTY>
		<!-- Mezz卡Mac Type 和30 90 00命令参数对应
			Interface Type.
			1=Base Interface
			2=Fabric Interface
			3=Front Panel 前面板网口
			4=Externel 扩展网口
			5=WWNN
			6=WWPN
			16=Update Channel Interface
			Others reserved.固定为2，设置时不更新，查询时返回2
		 -->
		<PROPERTY NAME="InterfaceType" TYPE="y"></PROPERTY>
        <!-- Mezz卡槽位号 --> 
		<PROPERTY NAME="Slot" TYPE="y" ID="2"></PROPERTY>
        <!-- Mezz卡PCIE宽度 0:2*X8 1:1*X16 2:4*X4 3:X32 -->  
        <PROPERTY NAME="WidthType" TYPE="y"></PROPERTY>
		<!-- Mezz卡Board ID号 -->
        <PROPERTY NAME="BoardId" TYPE="q" ID="3"></PROPERTY>
		<!-- Mezz卡PCB版本号 -->
		<PROPERTY NAME="PcbId" TYPE="y"></PROPERTY>
		<!-- Mezz卡PCB版本 -->
        <PROPERTY NAME="PcbVer" TYPE="s"></PROPERTY>  
        <!-- Mezz卡单板名称信息 --> 
        <PROPERTY NAME="Name" TYPE="s"></PROPERTY>
        <!-- Mezz卡描述信息 -->
        <PROPERTY NAME="Desc" TYPE="s" ID="4"></PROPERTY>
		<!-- Mezz卡厂商信息 -->
		<PROPERTY NAME="Manufacturer" TYPE="s" ID="5"></PROPERTY>
		<!-- Mezz卡产品名称信息 -->
		<PROPERTY NAME="ProductName" TYPE="s" ID="6"></PROPERTY>
		<!-- Mezz卡类型，0：非IB卡；1：IB卡 -->
		<PROPERTY NAME="Type" TYPE="y"></PROPERTY>
		<!-- Mezz卡健康状态 -->
		<PROPERTY NAME="Health" TYPE="y"></PROPERTY>
		<!-- 表示部件是否故障诊断定位的故障源，1表示是故障源，0表示不是 -->
		<PROPERTY NAME="FDMFault" TYPE='y'>  </PROPERTY>
		<!-- 表示当前卡的资源归属  起始值1，表示当前挂在的CPU， 其中0xff：PCieSwitch  0xfe:PCH  --> 
		<PROPERTY NAME="ResId" TYPE="y"></PROPERTY>
		<!-- 关联部件 -->
		<PROPERTY NAME="RefComponent" TYPE="ro">		      	</PROPERTY>
		<!-- PFA Event -->
		<PROPERTY NAME="PFAEvent" TYPE='y'>  </PROPERTY>
		<!-- Mezz卡设置Mac地址方法 -->
		<METHOD NAME="SetMezzMacAddr">
			<!-- MAC ID，从1开始 -->
			<PARAMETER TYPE="y" NAME="MacId" DIR="in"/>
			<PARAMETER TYPE="s" NAME="MacAddr" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetFDMFault">
			<PARAMETER TYPE="y" NAME="FDMFault" DIR="in"/>
		</METHOD>
		<!--  设置PFAEvent -->
		<METHOD NAME="SetPFAEvent">
			<PARAMETER TYPE="y" NAME="PFAEvent" DIR="in"/>
		</METHOD>
		<!--支持协议 
			PCIE_MGNT_PROTOCOL_I2C  	   0x01
			PCIE_MGNT_PROTOCOL_SMBUS       0x02
			PCIE_MGNT_PROTOCOL_STD_SMBUS   0x03
			PCIE_MGNT_PROTOCOL_SDI_CPLD    0x04
			PCIE_MGNT_PROTOCOL_SDI_MULTI_HOST_CPLD    0x05
		-->
		<PROPERTY NAME="Protocol" TYPE="y">	</PROPERTY>
		<!-- 支持单帧返回长度 -->
		<PROPERTY NAME="MaxFrameLen" TYPE="u"> </PROPERTY>
        <!-- 关联芯片 -->
        <PROPERTY NAME="RefChip" TYPE="ro"> </PROPERTY>
        <!-- 芯片温度 -->
        <PROPERTY NAME="ChipTemp" TYPE='q'> </PROPERTY>
        <!-- 关联芯片故障码 -->
        <PROPERTY NAME="FaultCode" TYPE="s"> </PROPERTY>
        <!-- 关联芯片健康状态 -->
        <PROPERTY NAME="FaultState" TYPE="y"> </PROPERTY>
	<!-- 关联芯片最大带宽能力-->
	<PROPERTY NAME="LinkWidthAbility" TYPE="s">  </PROPERTY>
	<!-- 关联芯片最大速率能力-->
	<PROPERTY NAME="LinkSpeedAbility" TYPE="s">  </PROPERTY>
	<!-- 关联芯片实际带宽-->
	<PROPERTY NAME="LinkWidth" TYPE="s">  </PROPERTY>
	<!-- 关联芯片实际速率-->
	<PROPERTY NAME="LinkSpeed" TYPE="s">  </PROPERTY>
	<!-- 更换后SN -->   
	<PROPERTY NAME="SerialNumber" TYPE="s" ></PROPERTY>
	<!-- 更换前SN -->   
	<PROPERTY NAME="PreviousSN" TYPE="s" ></PROPERTY>  
	<!-- 部件是否发生了更换，用于产生SEL日志 -->
	<PROPERTY NAME="ReplaceFlag" TYPE="y" >	</PROPERTY> 
	<!-- 部件编码  -->
	<PROPERTY NAME="PartNum" TYPE='s'>	</PROPERTY>
	
	<METHOD NAME="SetPcieLinkAbility">
		<PARAMETER TYPE="s" NAME="LinkWidthAbility" DIR="in"/>
		<PARAMETER TYPE="s" NAME="LinkSpeedAbility" DIR="in"/>
	</METHOD>
	<METHOD NAME="SetPcieLinkInfo">
		<PARAMETER TYPE="s" NAME="LinkWidth" DIR="in"/>
		<PARAMETER TYPE="s" NAME="LinkSpeed" DIR="in"/>
	</METHOD>
	<METHOD NAME="SetPcieTemp">
		<PARAMETER TYPE="q" NAME="ChipTemp" DIR="in"/>
	</METHOD>
	<METHOD NAME="SetPcieErrorInfo">
		<PARAMETER TYPE="y" NAME="FaultState" DIR="in"/>
		<PARAMETER TYPE="s" NAME="FaultCode" DIR="in"/>
	</METHOD>
    </CLASS>
	<!-- 
	描述：板卡配置信息类
	所属模块：扣卡管理模块(card_manage) -->	
    <CLASS NAME="Card">
		<PROPERTY NAME="Name" TYPE="s"></PROPERTY>	
        <!-- CARD类型, 与ipmi oem命令表中部件类型定义保持一致；6: Raid卡 8： PCIe标卡 10：HBA卡 11: MEZZ扣卡 13: 网卡扣卡 15：PCIE Riser卡 31: 交换扣卡  33：SD卡 48:PIC卡-->
		<PROPERTY NAME="Type" TYPE="y"></PROPERTY>
		<!-- 卡描述信息 -->
        <PROPERTY NAME="Desc" TYPE="s"></PROPERTY>
        <!-- 卡槽位号 --> 
		<PROPERTY NAME="Slot" TYPE="y" ID="1"></PROPERTY>
		<!-- 卡Board ID号 -->
        <PROPERTY NAME="BoardId" TYPE="q"></PROPERTY>
		<!-- 卡PCB版本号 -->
		<PROPERTY NAME="PcbId" TYPE="y"></PROPERTY>
		<!-- 卡PCB版本 -->
        <PROPERTY NAME="PcbVer" TYPE="s"></PROPERTY>  
		<!-- 卡厂商信息 -->
		<PROPERTY NAME="Manufacturer" TYPE="s"></PROPERTY>
		<!-- 卡单板名称信息 -->
		<PROPERTY NAME="BoardName" TYPE="s"></PROPERTY>
		<!-- 卡健康状态 -->
		<PROPERTY NAME="Health" TYPE="y"></PROPERTY>
		<!-- 水平转接板（X6800 V5） -->
		<CLASS NAME="HorizConnectionBoard">
		</CLASS>
		<!-- 加速卡 -->
		<CLASS NAME="AccelerateCard">
			<PROPERTY NAME="BomId" TYPE='y'>	</PROPERTY>
			<PROPERTY NAME="RefChip" TYPE="ro"></PROPERTY>
			<PROPERTY NAME="FaultCode" TYPE="s"></PROPERTY>
			<PROPERTY NAME="FaultState" TYPE="y"></PROPERTY>
			<PROPERTY NAME="SN" TYPE="s"></PROPERTY>
			<PROPERTY NAME="FirmwareVersion" TYPE="s"></PROPERTY>
		</CLASS>
		<CLASS NAME="PeripheralCard">
			<PROPERTY NAME="Target" TYPE='ro'>	</PROPERTY>
		</CLASS>
		<CLASS NAME="M2TransformCard">
			<PROPERTY NAME="SSD1Presence" TYPE="y"></PROPERTY>
			<PROPERTY NAME="SSD2Presence" TYPE="y"></PROPERTY>
			<PROPERTY NAME="PartNum" TYPE='s'>	</PROPERTY>
		</CLASS>
		<CLASS NAME="PCIeTransformCard">
		</CLASS>
		<!-- 直通卡 -->
		<CLASS NAME="PassThroughCard">
		<PROPERTY NAME="PartNum" TYPE='s'>	</PROPERTY>
		</CLASS>
		<CLASS NAME="PCIeSSDCard">
			<PROPERTY NAME="SerialNumber" TYPE='s'></PROPERTY>
			<PROPERTY NAME="ModelNumber" TYPE='s'></PROPERTY>
            <!--用于关联PCIE SSD I2C块设备 0:SN; 1:MN; 2:FW; 3:Speed; 不涉及默认补空占位-->
			<PROPERTY NAME="StorageLoc" TYPE='roa'></PROPERTY>
			<PROPERTY NAME="FirmwareVersion" TYPE="s">	</PROPERTY> 
			<PROPERTY NAME="RemnantMediaWearout" TYPE="y" ></PROPERTY>  
		</CLASS>
		<!-- 卸载卡 -->
		<CLASS NAME="CoprocessingCard">
			<!-- M.2盘在位 [7:2]预留 第1位：备M.2盘 第0位：主M.2盘  -->
			<PROPERTY NAME="M2Presence" TYPE="y"></PROPERTY>
			<!--网卡扣卡在位-->
			<PROPERTY NAME="NetCardPresence" TYPE="y"></PROPERTY>
			<!--卡的CPLD-->
			<PROPERTY NAME="Cpld" TYPE="ro"></PROPERTY>
			<!--存放cpld版本信息的寄存器 -->
			<PROPERTY NAME="CpldVerReg" TYPE="y" ></PROPERTY>
			<!--系统启动状态-->
			<PROPERTY NAME="SystemLoadedStatus" TYPE="y"></PROPERTY>
			<!--硬件故障-->
			<PROPERTY NAME="HardWareFailure" TYPE="*"></PROPERTY>
			<!--内存故障-->
			<PROPERTY NAME="MemoryFailure" TYPE="y"></PROPERTY>
			<!--固件初始化失败-->
			<PROPERTY NAME="FirmwareInitFailure" TYPE="q"></PROPERTY>
			<!--CPU初始化失败-->
			<PROPERTY NAME="CPUInitFailure" TYPE="q"></PROPERTY>
			<!--看门狗超时-->
			<PROPERTY NAME="WatchdogTmout" TYPE="y"></PROPERTY>
			<!-- 关联部件 -->
			<PROPERTY NAME="RefComponent" TYPE="ro">	</PROPERTY>
			<!--BMC IPV4地址寄存器-->
			<PROPERTY NAME="IPV4AddrReg" TYPE="ro"></PROPERTY>
			<!--BMC IPV6地址寄存器-->
			<PROPERTY NAME="IPV6AddrReg" TYPE="ro"></PROPERTY>
			<!--管理IP-->
			<PROPERTY NAME="StorageIpAddr" TYPE="u"></PROPERTY>
			<!--管理IP vlan-->
			<PROPERTY NAME="StorageIpVlan" TYPE="q"></PROPERTY>
			<!-- SDI卡 -->
            <!--add by y00383654 增加PCIeSDICard类 20160928-->
			<CLASS ID="139" NAME="PCIeSDICard">
					<!--SD100卡第一启动顺序 -->
					<PROPERTY NAME="BootOrder" TYPE="y"></PROPERTY>
                    <!--SD100卡第一启动顺序有效类型 0:一次有效；1:永久有效 -->
					<PROPERTY NAME="BootOrderValidType" TYPE="y"></PROPERTY>
					<!--SDI卡的M3-->
					<PROPERTY NAME="M3" TYPE="ro"></PROPERTY>
					<!-- 从硬件读取的Pcie状态  -->
					<PROPERTY NAME="HWPcieStatus" TYPE="y" ID="2"></PROPERTY>
					<!-- 设置硬件的Pcie状态  -->
					<PROPERTY NAME="PcieTestReg" TYPE="y" ID="3"></PROPERTY>
					<!--存放80 port数据的寄存器-->
					<PROPERTY NAME="80PortReg" TYPE="ro"></PROPERTY>
					<!--存放SDI卡IP配置状态的寄存器-->
					<PROPERTY NAME="SDIEthStatusReg" TYPE="ro" ></PROPERTY>
					<!--BMC查询SDI卡IP的寄存器-->
					<PROPERTY NAME="SDIEthIpReg" TYPE="ro" ></PROPERTY>
					<!--BMC查询SDI卡VLAN的寄存器-->
					<PROPERTY NAME="SDIEthVlanReg" TYPE="ro" ></PROPERTY>
					<!--存放FSA IP的寄存器-->
					<PROPERTY NAME="FSAStatusReg" TYPE="ro" ></PROPERTY>
					<!--存放BMC配置SDI卡IP、掩码和VLAN的寄存器-->
					<PROPERTY NAME="FSAWriteIpReg" TYPE="ro" ></PROPERTY>
					<!--存放BMC完成配置SDI IP操作的状态的寄存器-->
					<PROPERTY NAME="FSAWriteStatusReg" TYPE="ro" ></PROPERTY>
					<!--存放SDI卡的扩展网卡获取MAC地址的寄存器 -->
					<PROPERTY NAME="ExtCardMacReg" TYPE="ro" ></PROPERTY>
					<PROPERTY NAME="MultiHostExtCardMacReg" TYPE="ro" ></PROPERTY>
					<PROPERTY NAME="Eid" TYPE="y">		</PROPERTY>
					<!-- 从MCTP获取的物理地址信息 -->
					<PROPERTY NAME="PhyAddr" TYPE="q">	</PROPERTY>
					<!--SODIMM内存在位 [7:4]预留 第1位：通道B SODIMM10 第0位：通道A SODIMM00, 0xff表示未使用SODIMM-->
					<PROPERTY NAME="SODIMMPresence" TYPE="y"></PROPERTY>
					<!-- 是否支持MCTP -->
					<PROPERTY NAME="MctpSupport" TYPE="y">	</PROPERTY>
					<!-- 表示sdi串口录音所需的串口连接方式 byte3: bmc src, byte2: bmc dst, byte1: sdi src, byte0: sdi dst-->
					<PROPERTY NAME="SerialRecordConnect" TYPE="u">  <VALUE></VALUE>  </PROPERTY>
                    <!-- 是否支持是否支持MCU的管理 -->
					<PROPERTY NAME="McuSupported" TYPE="y">	</PROPERTY>
					<!-- MCU固件版本 -->
					<PROPERTY NAME="McuVersion" TYPE="s" ></PROPERTY>
					<!-- 功耗浮点数显示 用于Web和Redfish显示 -->
					<PROPERTY NAME="PowerDouble" TYPE="d" ></PROPERTY>
					<!-- 功耗 计算缩放比例 根据PCIE带外管理规范 -->
					<PROPERTY NAME="ScaleRatio" TYPE="d" ></PROPERTY>
					<!-- 功耗 -->
					<PROPERTY NAME="Power" TYPE='q'></PROPERTY>
					<PROPERTY NAME="FaultCodeBitMap" TYPE="au"></PROPERTY>
                    <!--复位联动策略 0：复位联动， 1：复位不联动-->
			        <PROPERTY NAME="ResetLinkagePolicy" TYPE="y"></PROPERTY>
					<!--  模拟SDI Card NMI中断  -->
					<METHOD NAME="SetSDICardNMI">
                    	<PARAMETER TYPE="y" NAME="SlotId" DIR="in"/>
					</METHOD>
					<METHOD NAME="GetOsSetIpStatus">
						<PARAMETER TYPE="y" NAME="status" DIR="out" />
						<PARAMETER TYPE="u" NAME="ipaddr" DIR="out" />
						<PARAMETER TYPE="q" NAME="vlanid" DIR="out" />
					</METHOD>
					<METHOD NAME="GetFSAIpStatus">
						<PARAMETER TYPE="y" NAME="status" DIR="out" />
						<PARAMETER TYPE="u" NAME="fsaipaddr" DIR="out" />
						<PARAMETER TYPE="q" NAME="fsavlanid" DIR="out" />
					</METHOD>
					<!-- 设置SDI卡的pcie状态 -->
					<METHOD NAME="SetPcieTestReg" ID="3">
						<PARAMETER TYPE="y" NAME="status" DIR="in"/>
					</METHOD>
					<!--  设置SDICard EID  -->
					<METHOD NAME="SetEidToSDICard">
						<PARAMETER TYPE="y" NAME="eid" DIR="in"/>
						<PARAMETER TYPE="q" NAME="PhyAddr" DIR="in"/>
					</METHOD>
					<!--  设置SDICard 启动选项  -->
					<METHOD NAME="SetSDIBootOption">
						<PARAMETER TYPE="y" NAME="BootMedium" DIR="in"/>
						<PARAMETER TYPE="y" NAME="BootEffective" DIR="in"/>
					</METHOD>
			</CLASS>
			<!-- 存储DPU卡 -->
			<CLASS NAME="PCIeStorageDPUCard">
				<!-- U.2盘在位  -->
				<PROPERTY NAME="U2Presence" TYPE="y"></PROPERTY>
				<!-- 扣卡类型 -->
				<PROPERTY NAME="SlaveCardType" TYPE="y"></PROPERTY>
				<PROPERTY NAME="Eid" TYPE="y">		</PROPERTY>
				<!-- 从MCTP获取的物理地址信息 -->
				<PROPERTY NAME="PhyAddr" TYPE="q">	</PROPERTY>
				<!-- 是否支持MCTP -->
				<PROPERTY NAME="MctpSupport" TYPE="y">	</PROPERTY>
				<!-- 网口link状态，1 linkdown 0 linkup  -->
				<PROPERTY NAME="DpuEthLinkStatus" TYPE="y"></PROPERTY>
				<!-- 设置DPU卡eid, phy -->
				<METHOD NAME="SetEidToDPUCard">
					<PARAMETER TYPE="y" NAME="eid" DIR="in"/>
					<PARAMETER TYPE="q" NAME="PhyAddr" DIR="in"/>
				</METHOD>
				<METHOD NAME="GetStorageIpAddr">
					<PARAMETER TYPE="ay" NAME="IPAddr" DIR="out"/>                   
				</METHOD>
			</CLASS>
		</CLASS>
		<!--end by y00383654 增加PCIeSDICard类 20160928--> 
		<!--add by l00375984 增加GPUCard类，接口包括标准PCIe及MXM 20171115-->
		<CLASS NAME="GPUCard">
			<!-- GPU卡上电状态 -->
			<PROPERTY NAME="PowerState" TYPE="y"></PROPERTY>
			<!-- GPU卡I2C/SMbus Accessor, Nvidia为0x9e/0x9f -->
			<PROPERTY NAME="DeviceAccessor" TYPE="y"></PROPERTY>
			<!-- GPU芯片类型/架构：1、Fermi; 2、Kepler; 3、Pascal; 4、Volta-->
			<PROPERTY NAME="GPUType" TYPE="y"></PROPERTY>
			<!-- GPU卡型号 -->
			<PROPERTY NAME="Model" TYPE="s"></PROPERTY>
			<!-- GPU卡的序列号 -->
			<PROPERTY NAME="SerialNumber" TYPE="s"></PROPERTY>
			<!-- GPU卡的固件(Video BIOS)版本 -->
			<PROPERTY NAME="FirmwareVersion" TYPE="s"></PROPERTY>
			<!-- GPU卡的功耗 -->
			<PROPERTY NAME="Power" TYPE="q"></PROPERTY>
			<!-- GPU单比特内存故障计数 -->
			<PROPERTY NAME="SBECount" TYPE="u"></PROPERTY>
			<!-- GPU双/多比特内存故障计数 -->
			<PROPERTY NAME="DBECount" TYPE="u"></PROPERTY>
			<!-- GPU NvLink通道数量 -->
			<PROPERTY NAME="NvLinkNum" TYPE="u">	</PROPERTY>
			<!-- GPU NvLink通道状态 -->
			<PROPERTY NAME="NvLinkStatus" TYPE="au">	</PROPERTY>
			<!-- GPU NvLink通道Replay错误计数 -->
			<PROPERTY NAME="ReplayErrorCount" TYPE="au">	</PROPERTY>
			<!-- GPU NvLink通道Recovery错误计数 -->
			<PROPERTY NAME="RecoveryErrorCount" TYPE="au">	</PROPERTY>
			<!-- GPU NvLink通道流控CRC错误计数 -->
			<PROPERTY NAME="FlitCRCErrorCount" TYPE="au">	</PROPERTY>
			<!-- GPU NvLink通道数据CRC错误计数 -->
			<PROPERTY NAME="DataCRCErrorCount" TYPE="au">	</PROPERTY>
			<!-- GPU InfoRom版本号 -->
			<PROPERTY NAME="InfoRomVersion" TYPE="s">	</PROPERTY>
			<!-- GPU 单板部件号 -->
			<PROPERTY NAME="BoardPartNumber" TYPE="s">	</PROPERTY>
			<!-- GPU 部件号 -->
			<PROPERTY NAME="GPUPartNumber" TYPE="s">	</PROPERTY>
			<!-- GPU 内存厂商 -->
			<PROPERTY NAME="MemoryVendor" TYPE="s">	</PROPERTY>
			<!-- GPU 内存部件号 -->
			<PROPERTY NAME="MemoryPartNumber" TYPE="s">	</PROPERTY>
			<!-- GPU 构建时间 -->
			<PROPERTY NAME="BuildDate" TYPE="s">	</PROPERTY>
			<!-- GPU GUID -->
			<PROPERTY NAME="UUID" TYPE="s">	</PROPERTY>
			<!-- GPU power brake状态 -->
			<PROPERTY NAME="PowerBrakeIsSet" TYPE="u">	</PROPERTY>
			<!-- GPU 外部供电是否充足 -->
			<PROPERTY NAME="SufficientExternalPower" TYPE="u">	</PROPERTY>
			<!-- GPU ECC模式当前使能状态 -->
			<PROPERTY NAME="ECCModeEnabled" TYPE="u">	</PROPERTY>
			<!-- GPU ECC 模式重启后使能状态 -->
			<PROPERTY NAME="ECCModePendingEnabled" TYPE="u">	</PROPERTY>
			<!-- GPU 是否需要重启 -->
			<PROPERTY NAME="GPUResetRequired" TYPE="u">	</PROPERTY>
			<!-- GPU 温度告警状态 -->
			<PROPERTY NAME="ThermalsAlertState" TYPE="u">	</PROPERTY>
			<!-- GPU 主处理器温度 -->
			<PROPERTY NAME="PrimaryGPUTemperatureCelsius" TYPE="u">	</PROPERTY>
			<!-- GPU 内存温度 -->
			<PROPERTY NAME="MemoryTemperatureCelsius" TYPE="u">	</PROPERTY>
			<!-- BMA ID索引信息 -->
			<PROPERTY NAME="BMAId" TYPE="s">	</PROPERTY>
			<!-- GPU 利用率（%） -->
			<PROPERTY NAME="GPUUtilization" TYPE="q">	</PROPERTY>
			<!-- GPU 内存利用率（%） -->
			<PROPERTY NAME="MemoryUtilization" TYPE="q">	</PROPERTY>
			<METHOD NAME="SetGPUStatisticsObjFromBMA">
				<PARAMETER TYPE="s" NAME="type_str" DIR="in"/>
				<PARAMETER TYPE="s" NAME="rsc_str" DIR="in"/>
			</METHOD>
		</CLASS>
		<!--end by l00375984 增加GPUCard类 20171115--> 
		<CLASS NAME="LeakageDetectionCard">
			<!--水浸绳A在位状态 1：在位，0：不在位-->
			<PROPERTY NAME="WaterDetectionCableAPres" TYPE="y"></PROPERTY>
			<!--水浸绳B在位状态 1：在位，0：不在位-->
			<PROPERTY NAME="WaterDetectionCableBPres" TYPE="y"></PROPERTY>
			<!--电磁阀开关控制写寄存器 写1表示开，写0表示关-->
			<PROPERTY NAME="MagneticValveSwitchCtrl" TYPE="y"> </PROPERTY>
			<!--电磁阀开关状态读寄存器 读到1表示开，读到0表示关-->
			<PROPERTY NAME="MagneticValveSwitchState" TYPE="y"> </PROPERTY>
			<!--电磁阀在位状态 1表示在位，0表示不在位-->
			<PROPERTY NAME="MagneticValvePresent" TYPE="y"> </PROPERTY>
			<!--漏液检测测试寄存器 写1模拟漏液检测告警产生，写0模拟漏液检测告警消除-->
			<PROPERTY NAME="LeakageDetectionTest" TYPE="y"> </PROPERTY>
			<!--漏液告警检测，读到1表示产生漏液告警，读到0表示漏液告警消除-->
			<PROPERTY NAME="LeakageState" TYPE="y"> </PROPERTY>
			<!--部件编码-->
			<PROPERTY NAME="BomCode" TYPE='s'>	</PROPERTY>
			<!--每次扫描结束后水浸绳在位状态，0：不在位，1：在位-->
			<PROPERTY NAME="WaterDetectionCablePresence" TYPE="y"> </PROPERTY>
			<!--每次扫描结束后漏液状态，0：不漏液，1：漏液-->
			<PROPERTY NAME="LeakageStatus" TYPE="y"> </PROPERTY>
			<!--方法：控制电磁阀开关，State=1表示开电磁阀，State=0表示关电磁阀-->
			<METHOD NAME="SetMagneticValveSwitch">
			    <PARAMETER TYPE="y" NAME="State" DIR="in"/>
			</METHOD>
			<!--方法：用于装备测试漏液检测功能，RegValue=1模拟漏液告警，RegValue=0模拟漏液告警消除，
				Result=0表示测试结果符合预期，Result=1表示测试结果不符合预期-->
			<METHOD NAME="LeakageDetectionMockTest">
			    <PARAMETER TYPE="y" NAME="RegValue" DIR="in"/>
				<PARAMETER TYPE="y" NAME="Result" DIR="out"/>
			</METHOD>
		</CLASS>
		<!-- 机框汇聚管理板（Atlas 800D G1） -->
		<CLASS NAME="ConvergeBoard">
			<!-- CPLD版本信息寄存器值，一般关联Accessor -->
			<PROPERTY NAME="CpldVerReg" TYPE="y"></PROPERTY>
			<!-- CPLD芯片位置号 -->
			<PROPERTY NAME="CpldUnit" TYPE="u">        </PROPERTY>
			<!-- CPLD版本，格式x.xx -->
			<PROPERTY NAME="CpldVersion" TYPE="s">		</PROPERTY>
			<PROPERTY NAME="SerialNumber" TYPE="s"></PROPERTY>
			<PROPERTY NAME="PartNumber" TYPE="s"></PROPERTY>
		</CLASS>
	</CLASS>
	<!--add by l00375984 增加NvGPUAction类, 用于带外获取Nvidia GPU的信息 20171115-->
	<CLASS NAME="NvGPUAction">
	    <!-- GPU卡设备 --> 
	    <PROPERTY NAME="RefDevice" TYPE="ro">	</PROPERTY>
	    <!-- Action操作的名称 --> 
	    <PROPERTY NAME="Name" TYPE="s">	</PROPERTY>
	    <!--操作码-->  	
	    <PROPERTY NAME="OpCode" TYPE="y">	</PROPERTY>
	    <!--Arg1--> 
	    <PROPERTY NAME="Arg1" TYPE='y'>	</PROPERTY>
	    <!--Arg2-->  			 
	    <PROPERTY NAME="Arg2" TYPE='y'>	</PROPERTY>
	    <!--输入数据，默认为0-->  			 
	    <PROPERTY NAME="InputData" TYPE='u'>	</PROPERTY>
	    <!--Capability特性字编号--> 
	    <PROPERTY NAME="CapaDWordNum" TYPE='y'>	</PROPERTY>
	    <!--Capability掩码-->  			 
	    <PROPERTY NAME="CapabilityMask" TYPE='u'>	</PROPERTY>		
	    <!--DataType为ASCII, 数值转ascii码（大端），数值转ascii码（小端）时，代表预期输出数据长度，单位为byte
	        DataType为NVLINK信息时，代表数组每个数据单元所占寄存器bit数-->	
	    <PROPERTY NAME="DataLength" TYPE='y'>	</PROPERTY>
	    <!--对应smbus命令寄存器输出数据类型：
	         0, digital
	         1, ASCII
	         2, 数值转ascii码（大端）
	         3, 数值转ascii码（小端）
	         4，NVLINK信息
	    -->
	    <PROPERTY NAME="DataType" TYPE='y'>	</PROPERTY>
	    <!--输出的数据-->	
	    <PROPERTY NAME="Data" TYPE='*'>   </PROPERTY>
	    <!--输出的数据为数值时的掩码-->	
	    <PROPERTY NAME="DataMask" TYPE='u'>   </PROPERTY>	
	    <!--上次访问出错时间-->	
	    <PROPERTY NAME="LastLogTime" TYPE='u'>   </PROPERTY>	 
	    <!--连续出错计数-->	
	    <PROPERTY NAME="LogCount" TYPE='u'>   </PROPERTY>	 		
    </CLASS>
	<!--end by l00375984 NvGPUAction 20171115--> 
	<CLASS NAME="ConditionGroup">
        <!--0：enable 1：disable-->  	
	    <PROPERTY NAME="IsTrue" TYPE="y">            </PROPERTY>
	    <PROPERTY NAME="Index" TYPE='y'>             </PROPERTY>
        <!--一个条件组之间的组合关系0:等于IsTrue 1：&& 2：||-->  			 
	    <PROPERTY NAME="ComboType" TYPE='y'>         </PROPERTY>
        <!--影响的策略/环境温度/目标温度/告警调速-->		 
		<PROPERTY NAME="RefType" TYPE='y'>		     </PROPERTY>
	    <PROPERTY NAME="ConditionIndex" TYPE='aq'>   </PROPERTY>		 
    </CLASS>
	<CLASS NAME="XCUCard">
	    <PROPERTY NAME="FCPresent" TYPE="y">                 </PROPERTY>
		<PROPERTY NAME="FCType" TYPE="y">                    </PROPERTY>
		<PROPERTY NAME="FCpcbid" TYPE="y">   				 </PROPERTY>
		<PROPERTY NAME="FCReset" TYPE="y">                   </PROPERTY>
		<PROPERTY NAME="InitMAX24101" TYPE="y">              </PROPERTY>
		<PROPERTY NAME="InitFCSERDES" TYPE="y">              </PROPERTY>
		<PROPERTY NAME="loadM8PBFirmware" TYPE="y">          </PROPERTY>
		<METHOD NAME="SwiCmdProcess">
			<PARAMETER TYPE="ay" NAME="reqcmd" DIR="in" />
			<PARAMETER TYPE="ay" NAME="rescmd" DIR="out" />
		</METHOD>
    </CLASS>
	<CLASS NAME="FCSWConfig">
	    <PROPERTY NAME="FCI2cCmd" TYPE="y">                  </PROPERTY>
	    <PROPERTY NAME="FCI2cRsp" TYPE='y'>                  </PROPERTY>
	    <PROPERTY NAME="FCI2cBMCHold" TYPE='y'>              </PROPERTY>
		<PROPERTY NAME="FCI2cMezzHold" TYPE='y'>		     </PROPERTY>
	    <PROPERTY NAME="FCI2cMezzSta" TYPE="y">              </PROPERTY>
	    <PROPERTY NAME="FCI2cClrRsp" TYPE='y'>               </PROPERTY>
	    <PROPERTY NAME="FCI2cClrMezzSta" TYPE='y'>           </PROPERTY>
		<PROPERTY NAME="FCI2cClrMezzHold" TYPE='y'>		     </PROPERTY>
		<PROPERTY NAME="FCI2cMezzHealth" TYPE='y'>		     </PROPERTY>
		<PROPERTY NAME="FCConfParaArea" TYPE="s">            </PROPERTY>
		<PROPERTY NAME="FCHeartStatus" TYPE='y'>             </PROPERTY>
    </CLASS>
	<CLASS NAME="MAX24101">
	    <PROPERTY NAME="confAddr"    TYPE="y">               </PROPERTY>
		<PROPERTY NAME="I2CInitAddr" TYPE="y">               </PROPERTY>
		<PROPERTY NAME="Parmdev1low" TYPE="u">               </PROPERTY>
		<PROPERTY NAME="Parmdev1high" TYPE="u">               </PROPERTY>
		<PROPERTY NAME="Parmdev2low" TYPE="u">               </PROPERTY>
		<PROPERTY NAME="Parmdev2high" TYPE="u">               </PROPERTY>
		<PROPERTY NAME="channel1to4control" TYPE="y">               </PROPERTY>
		<PROPERTY NAME="channel5to8control" TYPE="y">               </PROPERTY>
		<PROPERTY NAME="channel9to12control" TYPE="y">               </PROPERTY>
		<PROPERTY NAME="channel13to16control" TYPE="y">               </PROPERTY>
    </CLASS>
	<!-- 均衡器参数配置，和单板类型、槽位、扣板类型相关，配置放在扣板XML中 -->
	<CLASS NAME="MAX24101Para">
	    <!-- 单板槽位 -->
	    <PROPERTY NAME="SlotId"    TYPE="y">                 </PROPERTY>
		<!-- 单板类型-->
		<PROPERTY NAME="MotherBoardId"    TYPE="ay">          </PROPERTY>
		<!-- 配置参数 -->
	    <PROPERTY NAME="channel1to4" TYPE="u">               </PROPERTY>
        <PROPERTY NAME="channel5to8" TYPE="u">               </PROPERTY>
		<PROPERTY NAME="channel9to12" TYPE="u">              </PROPERTY>
		<PROPERTY NAME="channel13to16" TYPE="u">             </PROPERTY>
    </CLASS>
	
	<CLASS NAME="MDIOSimulator">
	    <PROPERTY NAME="MDIOMode" TYPE="y">                      </PROPERTY>
		<PROPERTY NAME="MDIOPhyReg" TYPE="y">                    </PROPERTY>
		<PROPERTY NAME="MDIOPhyAddr" TYPE="y">                   </PROPERTY>
		<PROPERTY NAME="MDIOWriteRegl" TYPE="y">                 </PROPERTY>
		<PROPERTY NAME="MDIOWriteRegH" TYPE="y">                 </PROPERTY>
		<PROPERTY NAME="MDIOCMDReg" TYPE="y">                    </PROPERTY>
		<PROPERTY NAME="MDIOREADREGL" TYPE="y">               </PROPERTY>
		<PROPERTY NAME="MDIOREADREGH" TYPE="y">               </PROPERTY>
		<PROPERTY NAME="MDIOCOMPLETEDFLAG" TYPE="y">           </PROPERTY>
		<PROPERTY NAME="MDIOERRREG" TYPE="y">                  </PROPERTY>
    </CLASS>
	
	<CLASS NAME="MDIOChipManager">
		<!-- 芯片类型 1:PHY 2:Switch -->
	    <PROPERTY NAME="ChipType" TYPE="y"> </PROPERTY>
		<!-- MDIO通道ID-->
	    <PROPERTY NAME="ChanID" TYPE="y"> </PROPERTY>
		<!--芯片地址-->
		<PROPERTY NAME="Addr" TYPE="u">   </PROPERTY>	
		<!-- link状态 -->
		<PROPERTY NAME="LinkStatus" TYPE="y"> </PROPERTY>
		<!-- link速率 -->
		<PROPERTY NAME="LinkSpeed" TYPE="y"> </PROPERTY>
		<!-- 从芯片里面的读到的PHYID -->
		<PROPERTY NAME="ChipId" TYPE="u">   </PROPERTY>
    </CLASS>	
	
	
	<CLASS NAME="MDIOChipConfig">
		<!--芯片地址-->
		<PROPERTY NAME="Addr" TYPE="u">   </PROPERTY>
		<!-- 唯一ID -->	
		<PROPERTY NAME="ChipId" TYPE="u">             </PROPERTY>
	    <!--芯片中需要配置的寄存器地址 如果为PHY8211,RegAdd高16bit为页地址，低16bit为页内地址-->
		<PROPERTY NAME="RegAddr" TYPE="au">               </PROPERTY>
		<!--芯片中需要配置的寄存器地址对应的值-->
		<PROPERTY NAME="RegValue" TYPE="au">                </PROPERTY>
		<!--配置后是否延时-->
		<PROPERTY NAME="Delay" TYPE="au">                   </PROPERTY>
    </CLASS>

<!-- 8100硬分区配置 -->   
    <CLASS NAME="Partition" ID="95">
    	<PROPERTY NAME="NodeMode" TYPE="y"> </PROPERTY>
    	<PROPERTY NAME="EepPartition" TYPE="y"> </PROPERTY>
    	<PROPERTY NAME="CpldPartition" TYPE="y"> </PROPERTY>
    	<PROPERTY NAME="XmlPartition" TYPE="y"> </PROPERTY>
    	<PROPERTY NAME="CpldPartitionCfg" TYPE="y"> </PROPERTY>
        
	<!-- 主从HFC板状态协商 -->
        <PROPERTY NAME="NegotiateState" TYPE="y"> </PROPERTY>
        <PROPERTY NAME="RemoteNegotiateState" TYPE="y"> </PROPERTY>
	
	<!-- 对端HFC板是否在位 -->
        <PROPERTY NAME="RemoteBMCBoardPresent" TYPE="y"> </PROPERTY>
        
    	<PROPERTY NAME="PbiCpldReset" TYPE="q"> </PROPERTY>
		<PROPERTY NAME="IoCpldReset" TYPE="q"> </PROPERTY>
		<PROPERTY NAME="PbnCpldReset" TYPE="q"> </PROPERTY>
		<PROPERTY NAME="BIoCpldReset" TYPE="q"> </PROPERTY>
    	<PROPERTY NAME="RemoteSyncIp" TYPE="s"> </PROPERTY>
    	<PROPERTY NAME="RemoteExternIp" TYPE="s"> </PROPERTY>
    	<PROPERTY NAME="PortLinkStatus" TYPE="y"> </PROPERTY>
    	<PROPERTY NAME="PhyLinkStatus" TYPE="y"> </PROPERTY>
		<PROPERTY NAME="RAIDMode" TYPE="y" ID="1" EXPORT="17"> </PROPERTY>
		
		<!-- 远程BMC的 PortLinkStatus -->
		<PROPERTY NAME="RemotePortLinkStatus" TYPE="y"> </PROPERTY>
		<!-- 远程BMC的 PhyLinkStatus -->
		<PROPERTY NAME="RemotePhyLinkStatus" TYPE="y"> </PROPERTY>
		<PROPERTY NAME="ComSel" TYPE="y"> </PROPERTY>
		
		<!-- 双机心跳状态 -->
		<PROPERTY NAME="HeartbeatStatus" TYPE="y"> </PROPERTY>
		
		<!-- VGA切换属性 -->
		<PROPERTY NAME="CurrentVGASwitch" TYPE="y"> </PROPERTY>
		<PROPERTY NAME="VGASwitch" TYPE="y"> </PROPERTY>
		<PROPERTY NAME="VGASwitchClear" TYPE="y"> </PROPERTY>
		
		<PROPERTY NAME="SwitchBiosFlash" TYPE="y"> </PROPERTY>
		
		<!-- 装备背板boardid -->
		<PROPERTY NAME="PowerBackplaneId" TYPE="y"  ID="2"> </PROPERTY>
		
		<!-- Fio在位信号 -->
		<PROPERTY NAME="FioBoardPresence" TYPE="y"> </PROPERTY>
		
		<!-- LedBoard A灯控制 -->
		<PROPERTY NAME="ALedCtrl" TYPE="y"> </PROPERTY>
		
		<!-- LedBoard B灯控制 -->
		<PROPERTY NAME="BLedCtrl" TYPE="y"> </PROPERTY>
		
		<!--temp solution-->
		<PROPERTY NAME="PcieFru1" TYPE="y" >	</PROPERTY>
		<PROPERTY NAME="PcieFru2" TYPE="y" >	</PROPERTY>
		<PROPERTY NAME="PcieFru3" TYPE="y" >	</PROPERTY>
		<PROPERTY NAME="PcieFru4" TYPE="y" >	</PROPERTY>
		<PROPERTY NAME="VmwareEnable" TYPE="y" >	</PROPERTY>
        <PROPERTY NAME="ModeChanged" TYPE="y">	    </PROPERTY>
		<METHOD NAME="SetPortStatus">
			<PARAMETER TYPE="y" NAME="PortLinkStatus" DIR="in" />
		</METHOD>	
		<METHOD NAME="StopLinkMonitorTask">
			<PARAMETER TYPE="y" NAME="State" DIR="in" />
		</METHOD>	
		<METHOD NAME="SetPartition">
			<PARAMETER TYPE="y" NAME="EepPartition" DIR="in" />
		</METHOD>	
		<METHOD NAME="GetPartition">
			<PARAMETER TYPE="y" NAME="EepPartition" DIR="out" />
		</METHOD>			
		<METHOD NAME="SwitchPartition">
			<PARAMETER TYPE="y" NAME="EepPartition" DIR="in" />
			<PARAMETER TYPE="s" NAME="RemoteUserName" DIR="in"/>
			<PARAMETER TYPE="s" NAME="RemotePassWord" DIR="in"/>
			<PARAMETER TYPE="y" NAME="LogType" DIR="in"/>
			<PARAMETER TYPE="s" NAME="IpAddress" DIR="in"/>			
		</METHOD>	
		<METHOD NAME="ResetCpld">
		</METHOD>	
		<METHOD NAME="SyncRemoteIP">
			<PARAMETER TYPE="s" NAME="RemoteExternIp" DIR="in" />
		</METHOD>	
		
		<!-- VGA切换方法 -->
		<METHOD NAME="SwitchVGA">
			<PARAMETER TYPE="y" NAME="State" DIR="in" />
		</METHOD>	
		<METHOD NAME="SwitchBiosFlash">
			<PARAMETER TYPE="y" NAME="SwitchBiosFlash" DIR="in" />
		</METHOD>			
		<METHOD NAME="SyncSetCpuProperty">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
		
		<!-- expander工作模式设置  -->	
		<METHOD NAME="SetExpanderMode">
			<PARAMETER TYPE="y" NAME="Mode" DIR="in" />
		</METHOD>
		
		<!-- RAID工作模式设置 : 0-单RAID模式，1-双RAID模式，0xff-未知 -->	
		<METHOD NAME="SetRAIDMode" ID="1">
			<PARAMETER TYPE="y" NAME="Mode" DIR="in" />
		</METHOD>	
		
		<!-- expander工作模式查询  -->	
		<METHOD NAME="GetExpanderMode">
			<PARAMETER TYPE="y" NAME="Mode" DIR="out" />
		</METHOD>	
		
		<!-- 同步设置从设备状态  -->	
		<METHOD NAME="SyncSetMemBrdProperty">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
		
		<!-- 设置串口UART4-PORT4  -->	
		<METHOD NAME="SetUart4ConnectPort4">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
		
		<!-- 一键收集CPLD信息 -->	
		<METHOD NAME="GetCpldInfo">
			<PARAMETER TYPE="*" NAME="*" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetParModeChangedValue">
			<PARAMETER TYPE="y" NAME="ModeChangeValue" DIR="in" />
		</METHOD>
    </CLASS>

	<CLASS NAME="CpuIdMap">  
		<PROPERTY NAME="PhysicalId" TYPE="ay">          </PROPERTY>        
		<PROPERTY NAME="LogicalId" TYPE="ay">          	</PROPERTY>
    </CLASS>

	<CLASS NAME="NodeIdMap">  
		<PROPERTY NAME="PhysicalId" TYPE="ay">          </PROPERTY>        
		<PROPERTY NAME="LogicalId" TYPE="ay">          	</PROPERTY>
    </CLASS>
	
	<!-- LSW芯片配置类 add by maoali-->   
    <CLASS NAME="LSWConfig">
		<!--芯片ID,lsw芯片的地址,1字节-->
    	<PROPERTY NAME="ChipId" 		TYPE="ay"> </PROPERTY>
		<!--需要设置的phy端口,1字节-->
    	<PROPERTY NAME="PhyNum" 		TYPE="ay"> </PROPERTY>
		<!--需要设置的寄存器编号,1字节-->
    	<PROPERTY NAME="PhyReg" 		TYPE="ay"> </PROPERTY>
		<!--设置寄存器的具体值,2字节-->
    	<PROPERTY NAME="Value" 			TYPE="aq"> </PROPERTY>
		<!--设置寄存器值掩码,2字节-->
    	<PROPERTY NAME="Mask" 			TYPE="aq"> </PROPERTY>
		<!-- 派生类,用于装备模式下配置LSW -->
		<CLASS NAME="DftLSWConfig"> </CLASS>
    </CLASS>
	
	<CLASS NAME="LSWChipMgnt">
    	<PROPERTY NAME="Id" 			TYPE="aq"> </PROPERTY>
		<!--Status,1字节，与Id检查的结果，1表示匹配，0表示不匹配-->
    	<PROPERTY NAME="Status" 			TYPE="y"> </PROPERTY>
		<!--复位lsw芯片Accessor-->
        <PROPERTY NAME="ResetIO" 			TYPE="y"> </PROPERTY>
		<!--使能lsw芯片Accessor-->
		<PROPERTY NAME="EnableIO" 			TYPE="y"> </PROPERTY>
		<!--Lan Switch Function值，0表示BMC管理LSW，1表示Fabric交换业务LSW  2表示Base交换业务LSW-->
		<PROPERTY NAME="Function" TYPE="y">          	 </PROPERTY>
		<!--Lan Switch Health状态值，1表示有故障-->
		<PROPERTY NAME="Health" TYPE="y">          	 </PROPERTY>
        <!--Lan Switch 对外管理端口个数-->
		<PROPERTY NAME="EgressPortCount" TYPE="y">          	 </PROPERTY>
		<CLASS NAME="PHYChipMgnt">
			<PROPERTY NAME="PhyAddr" TYPE="y">          </PROPERTY>  
			<PROPERTY NAME="LoopMode" TYPE="y">          </PROPERTY>        
    	</CLASS>
		<METHOD NAME="ResetConfig">
		</METHOD> 
		<METHOD NAME="SetHealthState">
			<PARAMETER TYPE="y" NAME="Health" DIR="in" />
		</METHOD> 
    </CLASS>
	
	<!-- CpuSocket类 -->   
    <CLASS NAME="CpuSocket">
		<!--Socket名称-->
    	<PROPERTY NAME="Socket" 		TYPE="as"> </PROPERTY>
    </CLASS>
	
	<!-- 
	描述：CPU板配置信息类
	所属模块：扣卡管理模块(pcie_card) -->
	<CLASS ID="30" NAME="CpuBoard">
		<!-- CPU板名称 -->
		<PROPERTY NAME="Name" TYPE="s">			</PROPERTY>
		<!-- CPU板在位情况 -->
		<PROPERTY NAME="Presence" TYPE="y" ID="2" >		</PROPERTY>
		<!-- 关联实体 -->
		<PROPERTY NAME="Entity" TYPE="ro">		</PROPERTY>
		<!-- 槽位 -->
		<PROPERTY NAME="Slot" TYPE="y" ID="1" >		</PROPERTY>
		<!-- CPU板Board ID号 -->
		<PROPERTY NAME="BoardId" TYPE="q" ID="6" > 	</PROPERTY>
    	<!-- CPU板PCB版本号 -->
		<PROPERTY NAME="PcbId" 		TYPE="y"> 	</PROPERTY>
		<!-- CPU板PCB版本 -->
		<PROPERTY NAME="PcbVer" TYPE="s" ID="4" > 	</PROPERTY>
		<!-- CPU板逻辑器件位置号 -->
		<PROPERTY NAME="LogicUnit"  TYPE="u">	</PROPERTY>
		<!-- CPU板逻辑器件版本号 -->
		<PROPERTY NAME="LogicVerId"     TYPE="y"> 	</PROPERTY>
		<!-- CPU板逻辑器件版本 -->
		<PROPERTY NAME="LogicVer" TYPE="s" ID="5" > 	</PROPERTY>
		<!-- CPU板类型 -->
		<PROPERTY NAME="Type"       TYPE="s">   </PROPERTY>
        <!-- CPU板厂商信息 -->
		<PROPERTY NAME="Manufacturer" TYPE="s" ID="3" > </PROPERTY>
		<!-- 更换前SN -->   
		<PROPERTY NAME="PreviousSN" TYPE="s" ></PROPERTY>
		<!-- 部件是否发生了更换，用于产生SEL日志 -->
		<PROPERTY NAME="ReplaceFlag" TYPE="y" >	</PROPERTY> 
		<!-- CPU板序列号 -->
		<PROPERTY NAME="SerialNumber" TYPE="s"> </PROPERTY>
		<!-- CPU板健康状态 -->
		<PROPERTY NAME="Health" TYPE="y" ID="7" > </PROPERTY>
		<!-- 支持CPU板热插拔 -->
		<!-- 关联CPLD产生SMI中断 -->
		<PROPERTY NAME="MigrationCtrl" TYPE='y'> </PROPERTY>
		<!-- 关联CPLD通知RAS事件 -->
		<PROPERTY NAME="MigrationWSignal" TYPE='y'> </PROPERTY>
		<!-- 关联CPLD读取RAS事件 -->
		<PROPERTY NAME="MigrationRSignal" TYPE='y'> </PROPERTY>
		<!-- CPU板上下电状态 -->
		<PROPERTY NAME="PowerStatus" TYPE="y" ID="8"> </PROPERTY>
        <!-- CPU板功耗 -->
		<PROPERTY NAME="Power" TYPE="q">		</PROPERTY>
		<!-- 关联部件 -->
		<PROPERTY NAME="RefComponent" TYPE="ro">		      	</PROPERTY>
		<!-- 1601 BIOS 固件版本 -->
		<PROPERTY NAME="IOCtrlFwVer" TYPE="s">		</PROPERTY>
		<!-- 组件唯一标识 -->
		<PROPERTY NAME="ComponentUniqueID" TYPE="s">		      	</PROPERTY>
		<!-- 日志收集关联部件 -->
		<PROPERTY NAME="RefChipDownload" TYPE="ro">   </PROPERTY>
        <!-- EEPROM中自描述信息的版本号 -->
        <PROPERTY NAME="HWSRVersion" TYPE="s">		</PROPERTY>
		<!-- CPU热插拔Cluster之间同步事件 -->
		<METHOD NAME="RasEvent">
			<PARAMETER TYPE="y" NAME="Type" DIR="in" />
			<PARAMETER TYPE="y" NAME="Type" DIR="in" />
		</METHOD>		
		<!-- agent派生类,用于同步 -->
		<CLASS NAME="AgentCpuBoard"> </CLASS>
    </CLASS>
	
	<!-- 
	描述：内存板配置信息类
	所属模块：扣卡管理模块(pcie_card) -->
	<CLASS ID="33" NAME="MemoryBoard">
		<!-- 内存板名称 -->
		<PROPERTY NAME="Name" TYPE="s">			</PROPERTY>
		<!-- 内存板在位情况 -->
		<PROPERTY NAME="Presence" TYPE="y"  ID="2">		</PROPERTY>
		<!-- 关联实体 -->
		<PROPERTY NAME="Entity" TYPE="ro">		</PROPERTY>
		<!-- 槽位 -->
		<PROPERTY NAME="Slot" TYPE="y" ID="1">		</PROPERTY>
		<!-- 内存板Board ID号 -->
		<PROPERTY NAME="BoardId" TYPE="q"  ID="5"> 	</PROPERTY>
    	<!-- 内存板PCB版本号 -->
		<!--  当前MemoryBoard对象是为本地对象，0表示本地对象，1表示虚拟对象 -->
		<PROPERTY NAME="Locality" TYPE='y' ID="8">	</PROPERTY>
		<PROPERTY NAME="PcbId" 		TYPE="y"> 	</PROPERTY>
		<!-- 内存板PCB版本 -->
		<PROPERTY NAME="PcbVer" TYPE="s"  ID="4"> 	</PROPERTY>
		<!-- 内存板逻辑器件位置号 -->
		<PROPERTY NAME="LogicUnit"  TYPE="u">	</PROPERTY>
		<!-- 内存板逻辑器件版本号 -->
		<PROPERTY NAME="LogicVerId"     TYPE="y"> 	</PROPERTY>
		<!-- 内存板逻辑器件版本 -->
		<PROPERTY NAME="LogicVer" 	TYPE="s"> 	</PROPERTY>
		<!-- 内存板类型 -->
		<PROPERTY NAME="Type"       TYPE="s">   </PROPERTY>
        <!-- 内存板厂商信息 -->
		<PROPERTY NAME="Manufacturer" TYPE="s" ID="3"> </PROPERTY>
		<!-- 内存板序列号 -->
		<PROPERTY NAME="SerialNumber" TYPE="s"> </PROPERTY>
		<!-- 内存板健康状态 -->
		<PROPERTY NAME="Health" TYPE="y" ID="6"> </PROPERTY>  
		<PROPERTY NAME="MigrationSucc" TYPE='y'> </PROPERTY>
		<PROPERTY NAME="MigrationFail" TYPE='y'> </PROPERTY>
		<PROPERTY NAME="InstallFail" TYPE='y'> </PROPERTY>
		<PROPERTY NAME="BoardOnline" TYPE='y'> </PROPERTY>
		<PROPERTY NAME="BoardOffline" TYPE='y'> </PROPERTY>
		<!-- 内存板热插拔 -->
		<PROPERTY NAME="BoardErrPrediction" TYPE='y'> </PROPERTY>
		<PROPERTY NAME="MigrationCtrl" TYPE='y'> </PROPERTY>
		<PROPERTY NAME="MemPowerChipFail" TYPE='y'> </PROPERTY>
		<PROPERTY NAME="MigButtonEvent" TYPE='y'> </PROPERTY>
		<PROPERTY NAME="ClearMigButtonEvent" TYPE='y'> </PROPERTY>
		<PROPERTY NAME="MigButtonTestMode" TYPE='y'> </PROPERTY>
		<!-- 内存板上下电状态 -->
		<PROPERTY NAME="PowerStatus" TYPE='y' ID="7"> </PROPERTY>
		<!-- 内存板mirror点灯属性 -->
		<PROPERTY NAME="MemBrdMirrorStatus" TYPE="y"> 	</PROPERTY>		
		<PROPERTY NAME="ConfigErrorCode"  TYPE="q">       </PROPERTY>
		<!-- agent派生类,用于同步 -->
		<CLASS NAME="AgentMemoryBoard"> </CLASS>
    </CLASS>
	
	<!-- 
	描述：IO板配置信息类
	所属模块：扣卡管理模块(pcie_card) -->
	<CLASS ID="34" NAME="IOBoard">
		<!-- IO板槽位号 -->
		<PROPERTY NAME="Slot" TYPE="y" ID="1" >			</PROPERTY>
		<!-- IO板名称 -->
		<PROPERTY NAME="Name" TYPE="s" ID="8" >			</PROPERTY>
		<!-- IO板在位情况 -->
		<PROPERTY NAME="Presence" TYPE="y" ID="2" >		</PROPERTY>
		<!-- 关联实体 -->
		<PROPERTY NAME="Entity" TYPE="ro">		</PROPERTY>
		<!-- IO板Board ID号 -->
		<PROPERTY NAME="BoardId" TYPE="q" ID="6" > 	</PROPERTY>
    	<!-- IO板PCB版本号 -->
		<PROPERTY NAME="PcbId" 		TYPE="y"> 	</PROPERTY>
		<!-- IO板PCB版本 -->
		<PROPERTY NAME="PcbVer" TYPE="s" ID="4" > 	</PROPERTY>
		<!-- IO板逻辑器件位置号 -->
		<PROPERTY NAME="LogicUnit"  TYPE="u">	</PROPERTY>
		<!-- IO板逻辑器件版本号 -->
		<PROPERTY NAME="LogicVerId"     TYPE="y"> 	</PROPERTY>
		<!-- IO板逻辑器件版本 -->
		<PROPERTY NAME="LogicVer" TYPE="s" ID="5" > 	</PROPERTY>
		<!-- IO板类型 -->
		<PROPERTY NAME="Type"       TYPE="s">   </PROPERTY>
        <!-- IO板厂商信息 -->
		<PROPERTY NAME="Manufacturer" TYPE="s" ID="3" > </PROPERTY>
		<!-- IO板序列号 -->
		<PROPERTY NAME="SerialNumber" TYPE="s"> </PROPERTY>
		<!-- IO板健康状态 -->
		<PROPERTY NAME="Health" TYPE="y" ID="7" >		</PROPERTY>	
        <!-- IO板功耗 -->
		<PROPERTY NAME="Power" TYPE="q">		</PROPERTY>
		<!-- 关联部件 -->
		<PROPERTY NAME="RefComponent" TYPE="ro">		      	</PROPERTY>
        <PROPERTY NAME="FirmwareVersion" TYPE="s" ID="9" EXPORT="17">		      	</PROPERTY>
        <PROPERTY NAME="FlashUnit" TYPE="u">		      	</PROPERTY>
		<!-- 更换前SN -->   
		<PROPERTY NAME="PreviousSN" TYPE="s" ></PROPERTY>
		<!-- 部件是否发生了更换，用于产生SEL日志 -->
		<PROPERTY NAME="ReplaceFlag" TYPE="y" >	</PROPERTY> 
		<!-- IO板PARTNUM -->
		<PROPERTY NAME="PartNum" TYPE="s">		</PROPERTY>
		<PROPERTY NAME="OobChannel" TYPE="ro"></PROPERTY>
		<PROPERTY NAME="PowerState" TYPE="y"> </PROPERTY>
        <METHOD NAME="SetIOBoardFW" ID="9">
			<PARAMETER TYPE="s" NAME="FirmwareVersion" DIR="in" />
		</METHOD>
		<!-- agent派生类,用于同步 -->
		<CLASS NAME="AgentIOBoard"> </CLASS>
		<CLASS ID="49" NAME="NCBoard"> 
		    <PROPERTY NAME="ErrState1" TYPE="y">             </PROPERTY>
			<PROPERTY NAME="ErrState2" TYPE="y">             </PROPERTY>
			<PROPERTY NAME="QpiRetryErr" TYPE="y">			</PROPERTY>
			<PROPERTY NAME="QpiDegradeErr" TYPE="y">			</PROPERTY>
			<PROPERTY NAME="LpDirEccErr" TYPE="y">			</PROPERTY>
			<PROPERTY NAME="RcTagEccErr" TYPE="y">			</PROPERTY>
			<!-- Hi1503 芯片名称 -->
			<PROPERTY NAME="ChipName"  TYPE="s">		</PROPERTY>
			<!-- Hi1503 DIEID -->
			<PROPERTY NAME="DIEID"  TYPE="s">		</PROPERTY>
			<!-- Hi1503 芯片版本 -->
			<PROPERTY NAME="ChipVersion"  TYPE="s">		</PROPERTY>
			<!-- 芯片位号 -->
			<PROPERTY NAME="ChipLocation"  TYPE="s">		</PROPERTY>
			<PROPERTY NAME="PortALinkDown" TYPE="y">			</PROPERTY>
			<PROPERTY NAME="PortBLinkDown" TYPE="y">			</PROPERTY>
			<PROPERTY NAME="PortCLinkDown" TYPE="y">			</PROPERTY>
			<PROPERTY NAME="CDRCfgErr" TYPE="y">             </PROPERTY>
		</CLASS>
    </CLASS>
	<CLASS ID="110" NAME="PCIeFPGACard">
		<!-- FPGA卡名称，例如FPGA-->
		<PROPERTY NAME="Name" TYPE="s"></PROPERTY>	
		<!-- FPGA卡描述信息 -->
        <PROPERTY NAME="Desc" TYPE="s"></PROPERTY>
        <!-- FPGA卡槽位号 --> 
		<PROPERTY NAME="Slot" TYPE="y" ID="1" ></PROPERTY>
		<!-- FPGA卡Board ID号 -->
        <PROPERTY NAME="BoardId" TYPE="q" ID="2" ></PROPERTY>
		<!-- FPGA卡PCB版本号 -->
		<PROPERTY NAME="PcbId" TYPE="y" ID="3"> </PROPERTY>
		<!-- FPGA卡PCB版本 -->
        <PROPERTY NAME="PcbVer" TYPE="s" ></PROPERTY>  
		<!-- FPGA卡厂商信息 -->
		<PROPERTY NAME="Manufacturer" TYPE="s"></PROPERTY>
		<!-- FPGA卡单板名称信息 -->
		<PROPERTY NAME="BoardName" TYPE="s"></PROPERTY>
		<!-- FPGA卡健康状态 -->
		<PROPERTY NAME="Health" TYPE="y"></PROPERTY>
		<!-- FPGA卡序列号 -->
		<PROPERTY NAME="SerialNumber" TYPE='s'></PROPERTY>
		<!-- FPGA卡功耗 -->
		<PROPERTY NAME="Power" TYPE='q' ID="4" ></PROPERTY>
		<!-- FPGA卡CPLD逻辑位号 -->
		<PROPERTY NAME="LogicUnit" TYPE='u'></PROPERTY>
		<!-- FPGA卡CPLD逻辑版本号 -->
		<PROPERTY NAME="LogicVerId" TYPE="y">	</PROPERTY> 
		<!-- FPGA卡CPLD逻辑版本 -->
		<PROPERTY NAME="LogicVer" TYPE="s" ></PROPERTY>
        
		<!-- pcie 带外管理新增字段 -->
		<!-- FPGA卡带外管理关联的芯片 -->
		<PROPERTY NAME="RefChip" TYPE="ro">		</PROPERTY>
		<!-- FPGA卡故障码字符串 -->
		<PROPERTY NAME="FaultCode" TYPE="s">		</PROPERTY>
		<!-- FPGA卡错误状态，根据故障码来设置每一位表示一类告警，最高位表示信息获取失败 -->
		<PROPERTY NAME="FaultState" TYPE="y">		</PROPERTY>
		<!-- FPGA卡固件版本 -->
		<PROPERTY NAME="FirmwareVersion" TYPE="s">		</PROPERTY>
		<!-- FPGA卡shell ID -->
		<PROPERTY NAME="ShellID" TYPE="s">		</PROPERTY>
		<!-- FPGA卡最大内存温度 -->
		<PROPERTY NAME="MaxDIMMTemp" TYPE="q">	</PROPERTY>
        <!-- FPGA卡是否支持MCU的管理 -->
		<PROPERTY NAME="McuSupported" TYPE="y"></PROPERTY>
		<!-- 管理FPGA卡的MCU固件版本 -->
		<PROPERTY NAME="McuVersion" TYPE="s" ></PROPERTY>
		<!-- FPGA卡功耗浮点数显示 用于Web和Redfish显示 -->
		<PROPERTY NAME="PowerDouble" TYPE="d" ></PROPERTY>
		<!-- FPGA卡功耗 计算缩放比例 根据PCIE带外管理规范 -->
		<PROPERTY NAME="ScaleRatio" TYPE="d" ></PROPERTY>
        <!-- FPGA卡当前在位内存条数量 -->
		<PROPERTY NAME="DIMMNum" TYPE="y" ID="5" ></PROPERTY>
		<!-- FPGA卡各芯片的ECC错误引用计数 -->
		<PROPERTY NAME="ECCCountPerChip" TYPE="au" ></PROPERTY>
		<!-- 派生类,用于同步 -->
		<CLASS NAME="RemotePCIeFPGACard">
             <PROPERTY NAME= "Target" TYPE="ro">                      </PROPERTY>
        </CLASS>  	
	</CLASS>
	<!--
	描述：GPU板配置信息类
	所属模块：扣卡管理模块(pcie_card) 	-->
	<CLASS NAME="GPUBoard">
		<!--GPU载板名称 -->
		<PROPERTY NAME="Name" TYPE="s" ID="8" >			</PROPERTY>
		<!--GPU载板槽位号 -->
		<PROPERTY NAME="Slot" TYPE="y" ID="1" >		</PROPERTY>
		<!--GPU载板在位情况，这个属性不打算用 -->
		<PROPERTY NAME="Presence" TYPE="y" ID="2" >		</PROPERTY>
		<!-- 关联实体 -->
		<PROPERTY NAME="Entity" TYPE="ro">		</PROPERTY>
		<!--GPU载板逻辑版本号 -->
		<PROPERTY NAME="LogicVerId" TYPE="y">	</PROPERTY>
		<!--GPU载板逻辑版本 -->
		<PROPERTY NAME="LogicVer" TYPE="s" ID="5">	</PROPERTY>
		<!--GPU载板逻辑器件位置号 -->
		<PROPERTY NAME="LogicUnit" TYPE='u'>	</PROPERTY>
		<!--GPU载板Board ID号 -->
		<PROPERTY NAME="BoardId" TYPE="q" ID="6" >	</PROPERTY>
		<!--GPU载板PCB版本号 -->
		<PROPERTY NAME="PcbId" TYPE='y'>	</PROPERTY>
		<!--GPU载板PCB版本 -->
		<PROPERTY NAME="PcbVer" TYPE="s" ID="4" >	</PROPERTY>
        <!--GPU载板厂商信息 -->
		<PROPERTY NAME="Manufacturer" TYPE="s" ID="3" >	</PROPERTY>
		<!--GPU载板名称信息，例如IT21GPUA -->
		<PROPERTY NAME="BoardName" TYPE="s"></PROPERTY>
		<!--GPU载板:0为全宽，1为半宽-->
		<PROPERTY NAME="Type"       TYPE="y">   </PROPERTY>
		<!--GPU载板健康状态 -->
		<PROPERTY NAME="Health" TYPE="y" ID="7" >	</PROPERTY>
		<!-- 更换前SN -->   
		<PROPERTY NAME="PreviousSN" TYPE="s" ></PROPERTY>  
		<!-- 部件是否发生了更换，用于产生SEL日志 -->
		<PROPERTY NAME="ReplaceFlag" TYPE="y" >	</PROPERTY>
		<!--GPU载板序列号-->
		<PROPERTY NAME="SerialNumber" TYPE="s"> </PROPERTY>
		<!--GPU载板最大支持的槽位数-->
		<PROPERTY NAME="PcieSlotNum" TYPE="y"> </PROPERTY>
		<!--GPU载板功耗-->
		<PROPERTY NAME="Power" TYPE='q'></PROPERTY>		
		<!-- 收集关联寄存器 -->
        	<PROPERTY NAME="DumpAccessor" TYPE="y"> </PROPERTY>
        	<!-- 收集寄存器大小 -->
        	<PROPERTY NAME="DumpSize" TYPE="u"> </PROPERTY>
		<PROPERTY NAME="RefComponent" TYPE="ro"> </PROPERTY>
		<PROPERTY NAME="PFAEvent" TYPE="y"></PROPERTY>
		<!-- 表示部件是否故障诊断定位的故障源，1表示是故障源，0表示不是 -->
		<PROPERTY NAME="FDMFault" TYPE='y'>		        </PROPERTY>
		<METHOD NAME="SetFDMFault">
			<PARAMETER TYPE="y" NAME="FDMFault" DIR="in"/>
		</METHOD>
		<!--  设置PFAEvent -->
		<METHOD NAME="SetPFAEvent">
			<PARAMETER TYPE="y" NAME="PFAEvent" DIR="in"/>
		</METHOD>
	</CLASS>
	
	<!-- 
	描述：风扇板配置信息类
	所属模块：扣卡管理模块(pcie_card) -->
	<CLASS ID="69" NAME="FANBoard">
		<!-- 风扇板名称 -->
		<PROPERTY NAME="Name" TYPE="s">			</PROPERTY>
		<!-- 风扇板在位情况 -->
		<PROPERTY NAME="Presence" TYPE="y"  ID="1">		</PROPERTY>
		<!-- 风扇板槽位 -->
		<PROPERTY NAME="Slot" TYPE="y"  ID="2">		</PROPERTY>			
		<!-- 关联实体 -->
		<PROPERTY NAME="Entity" TYPE="ro">		</PROPERTY>
		<!-- 风扇板Board ID号 -->
		<PROPERTY NAME="BoardId" 	TYPE="q" ID="5"> 	</PROPERTY>
    	<!-- 风扇板PCB版本号 -->
		<PROPERTY NAME="PcbId" 		TYPE="y"> 	</PROPERTY>
		<!-- 风扇板PCB版本 -->
		<PROPERTY NAME="PcbVer" 	TYPE="s"  ID="3"> 	</PROPERTY>
		<!-- 风扇板逻辑器件位置号 -->
		<PROPERTY NAME="LogicUnit"  TYPE="u">	</PROPERTY>
		<!-- 风扇板逻辑器件版本号 -->
		<PROPERTY NAME="LogicVerId"     TYPE="y"> 	</PROPERTY>
		<!-- 风扇板逻辑器件版本 -->
		<PROPERTY NAME="LogicVer" 	TYPE="s"  ID="4" > 	</PROPERTY>
		<!-- 风扇板类型 -->
		<PROPERTY NAME="Type"       TYPE="s">   </PROPERTY>
		<!-- 风扇板MCU类型 -->
		<PROPERTY NAME="MCUType"    TYPE="y">   </PROPERTY>
        <!-- 风扇板厂商信息 -->
		<PROPERTY NAME="Manufacturer" TYPE="s"> </PROPERTY>
        <!-- 更换前SN -->   
		<PROPERTY NAME="PreviousSN" TYPE="s" ></PROPERTY> 
		<!-- 部件是否发生了更换，用于产生SEL日志 -->
		<PROPERTY NAME="ReplaceFlag" TYPE="y" >	</PROPERTY>  
		<!-- 风扇板序列号 -->
		<PROPERTY NAME="SerialNumber" TYPE="s"> </PROPERTY>
		<!-- 风扇板PARTNUM -->
		<PROPERTY NAME="PartNum" TYPE="s">		</PROPERTY>
        <!-- 组件唯一标识 -->
		<PROPERTY NAME="ComponentUniqueID" TYPE="s">		</PROPERTY>
        <!-- EEPROM中自描述信息的版本号 -->
        <PROPERTY NAME="HWSRVersion" TYPE="s">		</PROPERTY>
		<!-- 固件类别:
			0: 表示为CPLD，如x6800风扇板上有CPLD
			1: 表示为C51，如8100、9032及G5500风扇板有C51主控软件
		-->
		<PROPERTY NAME="FWType" TYPE="y"> </PROPERTY>
		<PROPERTY NAME="Led" TYPE="q"> </PROPERTY>
		<!-- 风扇板MCU功能选项，按bit解析
			bit0: 1- 使能读取日志功能
			bit1: 1- 使能同步系统时间至MCU
			other: reserved
		-->
		<PROPERTY NAME="MCUOption" TYPE="u"> </PROPERTY>
		<!-- 风扇板MCU日志 -->
		<PROPERTY NAME="LogData" TYPE="ay"> </PROPERTY>
		<!-- 风扇板时间 -->
		<PROPERTY NAME="SyncTime" TYPE="ay"> </PROPERTY>
		<!-- 风扇板温感状态原始值，一般关联硬件读值（分布式存储大西洋风扇板上有温感，需要BMC上报故障）-->
		<PROPERTY NAME="TempSensorStatus" TYPE="y"> </PROPERTY>
		<!-- 风扇板温感状态同步值，用于主从同步（分布式存储大西洋风扇板上有温感，需要BMC上报故障）-->
		<PROPERTY NAME="SyncTempSensorStatus" TYPE="y"> </PROPERTY>
		
		<!-- 方法：重新读取风扇信息 -->
		<METHOD NAME="ReloadFanInfo">
		</METHOD>

		<!-- 方法：设置风扇板LED灯状态 -->
		<METHOD NAME="SetLed">
			<PARAMETER TYPE="y" NAME="FanboardId" DIR="in"/>
			<PARAMETER TYPE="y" NAME="LedRedOpcode" DIR="in"/>
			<PARAMETER TYPE="y" NAME="LedGreenOpcode" DIR="in"/>
		</METHOD>

		<!-- 风扇板属性同步 -->
		<METHOD NAME="SyncFanBoardInfoMethod">
			<PARAMETER DIR="in"  TYPE="*" NAME="*" />
			<PARAMETER DIR="out" TYPE="*" NAME="*" />
		</METHOD>
        <METHOD NAME="FANExpReloadInfo">
        </METHOD>
		<!-- agent派生类,用于同步 -->
		<CLASS NAME="AgentFANBoard"> </CLASS>
		<!-- 关联部件 -->
		<PROPERTY NAME="RefComponent" TYPE="ro"></PROPERTY>
    </CLASS>	
	
	<!-- 
	描述：扩展板配置信息类
	所属模块：扣卡管理模块(pcie_card) -->
	<CLASS NAME="ExpBoard" ID="115">
		<!-- 扩展板名称 -->
		<PROPERTY NAME="Name" TYPE="s" ID="1">			 </PROPERTY>
		<!-- 扩展板槽位号 -->
		<PROPERTY NAME="Slot" TYPE="y" ID="2">			 </PROPERTY>
		<!-- 扩展板在位情况 -->
		<PROPERTY NAME="Presence" TYPE="y" ID="3">		 </PROPERTY>
		<!-- 扩展板Board ID号 -->
		<PROPERTY NAME="BoardId" 	TYPE="q"  ID="4"> 	 </PROPERTY>
    	<!-- 扩展板PCB版本号 -->
		<PROPERTY NAME="PcbId" 		TYPE="y"  ID="5"> 	 </PROPERTY>
		<!-- 扩展板PCB版本 -->
		<PROPERTY NAME="PcbVer" 	TYPE="s" ID="6"> 	 </PROPERTY>
		<!-- 扩展板逻辑器件位置号 -->
		<PROPERTY NAME="LogicUnit"  TYPE="u" ID="7">	 </PROPERTY>
		<!-- 扩展板逻辑器件版本号 -->
		<PROPERTY NAME="LogicVerId"     TYPE="y" ID="8"> </PROPERTY>
		<!-- 扩展板逻辑器件版本 -->
		<PROPERTY NAME="LogicVer" 	TYPE="s"  ID="9"> 	 </PROPERTY>
		<!-- 扩展板描述信息 -->
		<PROPERTY NAME="Desc"       TYPE="s"  ID="10">   </PROPERTY>
        <!-- 扩展板厂商信息 -->
		<PROPERTY NAME="Manufacturer" TYPE="s"  ID="11"> </PROPERTY>
		<!-- 扩展板健康状态 -->
		<PROPERTY NAME="Health" TYPE="y"  ID="12">		 </PROPERTY>
		<!-- 组件唯一标识 -->
		<PROPERTY NAME="ComponentUniqueID" TYPE="s">		</PROPERTY>
        <!-- EEPROM中自描述信息的版本号 -->
        <PROPERTY NAME="HWSRVersion" TYPE="s">		</PROPERTY>		
		<!-- 关联部件 -->
		<PROPERTY NAME="RefComponent" TYPE="ro">	</PROPERTY>		
		<!-- 更换前SN -->   
		<PROPERTY NAME="PreviousSN" TYPE="s" ></PROPERTY>
		<!-- 部件是否发生了更换，用于产生SEL日志 -->
		<PROPERTY NAME="ReplaceFlag" TYPE="y" >	</PROPERTY>
        <!-- 硬盘底板配置：PANGEA 存储太平洋硬盘底板在框上，温感的读数和IIC状态采用主控读取，主从同步的方式 -->
		<CLASS NAME="HddBaseBoard">
			<!-- IIC链路状态：主控访问，关联Accessor，0：正常；1：故障 -->
			<PROPERTY NAME="IICState" TYPE="q"> </PROPERTY>
			<!-- 同步IIC链路状态：用于同步到从控 -->
			<PROPERTY NAME="SyncIICState" TYPE="q"> </PROPERTY>
			<!-- 温度（温感获取）：主控访问，关联Accessor -->
			<PROPERTY NAME="RawTemp" TYPE="q"> </PROPERTY>
			<!-- 同步温度：用于同步到从控 -->
			<PROPERTY NAME="SyncRawTemp" TYPE="q"> </PROPERTY>
			<!-- 同步方法 -->
			<METHOD NAME="PropertySyncMethod">
				<PARAMETER TYPE="*" NAME="*" DIR="in"/>
				<PARAMETER TYPE="*" NAME="*" DIR="out"/>
			</METHOD>
		</CLASS>
		<CLASS NAME="SASExpBoard" ID="116">
            <!-- 带内对应的的bdf号 -->
            <PROPERTY NAME="BDF" TYPE="s" />
            <!-- 带内解析状态后对应的状态，bit0: subhealth; bit1: portfault; bit2: linkfault -->
            <PROPERTY NAME="AlarmState" TYPE="y" />
			<!-- 定位led灯 -->
			<PROPERTY NAME="Location" TYPE="y" ID="14"> </PROPERTY>
			<!-- 告警led灯 -->
			<PROPERTY NAME="Fault" TYPE="y" ID="15"> </PROPERTY>
            <!-- 高速链路切换寄存器，1为本控，0为对控 -->
			<PROPERTY NAME="SASExpChannel" TYPE="y" ID="16"> </PROPERTY>
			<!-- Powergood信号 -->
			<PROPERTY NAME="PowerGoodState" TYPE="q" ID="17"> </PROPERTY>
			<!-- 磁盘整组上下电标记 -->
			<PROPERTY NAME="PowerStatus" TYPE="y" ID="18"> </PROPERTY>
			<!-- 级联版5VPG信号,供电给底板的硬盘器件 -->
			<PROPERTY NAME="DisksPowerGood" TYPE="q"> </PROPERTY>
			<!-- 同步级联版3.3V PG信号，供电给硬盘底板 -->
			<PROPERTY NAME="DisksBoardPG" TYPE="q"> </PROPERTY>
			<!-- 级联版所有温度点最大温度 -->
			<PROPERTY NAME="MaxTemp" TYPE="q"> </PROPERTY>
			<!-- 同步级联版PG信号 -->
			<PROPERTY NAME="SyncPowerGoodState" TYPE="q"> </PROPERTY>
			<!-- 同步级联版5VPG信号,供电给底板的硬盘器件 -->
			<PROPERTY NAME="SyncDisksPowerGood" TYPE="q"> </PROPERTY>
			<!-- 同步级联版3.3V PG信号，供电给硬盘底板 -->
			<PROPERTY NAME="SyncDisksBoardPG" TYPE="q"> </PROPERTY>
			<!-- 同步级联版所有温度点最大温度 -->
			<PROPERTY NAME="SyncMaxTemp" TYPE="q"> </PROPERTY>
            <!-- I2C链路状态: 0:正常; 1: 故障 -->
			<PROPERTY NAME="I2CStatus" TYPE="q"> </PROPERTY>
            <!-- 同步I2C链路状态: 0:正常; 1: 故障 -->
			<PROPERTY NAME="SyncI2CStatus" TYPE="q"> </PROPERTY>
			<!-- 级联板的业务芯片的复位操作 -->
			<PROPERTY NAME="ChipReset" TYPE="y"> </PROPERTY>
			<!-- 级联板核，如8054,1880等 -->
			<PROPERTY NAME="CoreChip" TYPE="ro"> </PROPERTY>
			<!-- 级联板核温度 -->
			<PROPERTY NAME="CoreTemp" TYPE="q"> </PROPERTY>
			<!-- 级联板芯片的状态信息，0：正常；1：故障 -->
			<PROPERTY NAME="CoreStatus" TYPE="y"> </PROPERTY>
			<!-- 级联板芯片的供电状态信息，0：下电；1：上电 -->
			<PROPERTY NAME="CoreChipPowerState" TYPE="y"> </PROPERTY>
            <METHOD NAME="SASExpPropertySync">
                <PARAMETER TYPE="*" NAME="*" DIR="in"/>
                <PARAMETER TYPE="*" NAME="*" DIR="out"/>
            </METHOD>
            <METHOD NAME="SASExpReloadInfo">
            </METHOD>
            <METHOD NAME="SASExpSetPcieFault">
                <PARAMETER TYPE="*" NAME="*" DIR="in"/>
                <PARAMETER TYPE="*" NAME="*" DIR="out"/>
            </METHOD>
        </CLASS>
        <CLASS NAME="ARCard">
            <!-- 上下电状态 -->
            <PROPERTY NAME="PowerOnState" TYPE="y"> </PROPERTY>
            <!-- 复位模式 -->
            <PROPERTY NAME="ResetMode" TYPE="y"> </PROPERTY>
            <!-- 复位状态 -->
            <PROPERTY NAME="ResetState" TYPE="y"> </PROPERTY>
            <!-- AR卡ID,用于唯一标识一张AR卡 -->
            <PROPERTY NAME="Id" TYPE="s"> </PROPERTY>
            <PROPERTY NAME="IdStorageMedia" TYPE="y"> </PROPERTY>
            <METHOD NAME="ARCardActionAccessor">
                <PARAMETER DIR="in" TYPE="*" NAME="*" />
                <PARAMETER DIR="out" TYPE="*" NAME="*" />
            </METHOD>
            <METHOD NAME="PropertyHwSyncMethod">
                <PARAMETER DIR="in" TYPE="*" NAME="*" />
                <PARAMETER DIR="out" TYPE="*" NAME="*" />
            </METHOD>
        	<METHOD NAME="PropertySyncMethod">
                <PARAMETER DIR="in" TYPE="*" NAME="*" />
                <PARAMETER DIR="out" TYPE="*" NAME="*" />
            </METHOD>
            <METHOD NAME="ARCardControl">
                <PARAMETER DIR="in" TYPE="*" NAME="action" />
                <PARAMETER DIR="in" TYPE="*" NAME="slot" />
            </METHOD>
        </CLASS>
        <!-- 部件编码 -->
        <PROPERTY NAME="PartNum" TYPE="s">  </PROPERTY>
    </CLASS>
    	<!-- 
	描述：底板配置信息类
	所属模块：扣卡管理模块(pcie_card) -->
	<CLASS ID="103" NAME="MainBoard">
		<!-- 南桥芯片型号 -->
		<PROPERTY NAME="PCHModel" TYPE="s" ID="1">		</PROPERTY>
		<!-- 底板名称 -->
		<PROPERTY NAME="Name" TYPE="s">			</PROPERTY>
		<!-- 底板在位情况 -->
		<PROPERTY NAME="Presence" TYPE="y">		</PROPERTY>
		<!-- 关联实体 -->
		<PROPERTY NAME="Entity" TYPE="ro">		</PROPERTY>
		<!-- 底板Board ID号 -->
		<PROPERTY NAME="BoardId" 	TYPE="q"> 	</PROPERTY>
		<!-- 底板PCB版本号 -->
		<PROPERTY NAME="PcbId" 		TYPE="y"> 	</PROPERTY>
		<!-- 底板PCB版本 -->
		<PROPERTY NAME="PcbVer" 	TYPE="s"> 	</PROPERTY>
		<!-- 底板厂商信息 -->
		<PROPERTY NAME="BomId" TYPE="y"> 		</PROPERTY>
		<!-- 底板健康状态 -->
		<PROPERTY NAME="Health" TYPE="y">		</PROPERTY>
		<!-- 底板PCIE健康状态 -->
		<PROPERTY NAME="PCIEFatalError" TYPE="y">		</PROPERTY>
		<!-- 芯片位置号 -->
		<PROPERTY NAME="ChipLocation" TYPE="s">			</PROPERTY>
		<!--12V电压 -->
		<PROPERTY NAME="vcc_12v" TYPE="roa">	</PROPERTY>
        <!--板卡XML免复位升级 -->
		<METHOD NAME="UpgradeCardXML">
            <PARAMETER TYPE="s" NAME="FileName" DIR="in"/>	
            <PARAMETER TYPE="i" NAME="ret" DIR="out"/>
		</METHOD>
        <!-- PCIE端口禁用标志，bit0~bit31对应slot1~slot32，值为1表示被禁用，复位持久化 -->
		<PROPERTY NAME="PCIeSlotDisabledMask" TYPE="u">		</PROPERTY>
		<METHOD NAME="SetPchModel" ID="1">
        	<PARAMETER TYPE="s" NAME="model" DIR="in"/>
        </METHOD>
		<!--重新读取IOBoard信息 -->
		<METHOD NAME="InitBoard">
        </METHOD>
		<METHOD NAME="RestoreFpgaCard">
		<PARAMETER TYPE="y" NAME="slot" DIR="in"/>
		<PARAMETER TYPE="u" NAME="position" DIR="in"/>
		<PARAMETER TYPE="i" NAME="Ret" DIR="out"/>
		</METHOD>
		<METHOD NAME="GetRestoreFpgaCardStaus">
		<PARAMETER TYPE="y" NAME="slot" DIR="in"/>
		<PARAMETER TYPE="y" NAME="status" DIR="out"/>
		<PARAMETER TYPE="y" NAME="pct" DIR="out"/>
		</METHOD>
		<METHOD NAME="CheckThirdPCIeRaidCard">
			<PARAMETER TYPE="y" NAME="ret" DIR="out"/>
		</METHOD>
    </CLASS>
	
	<!-- 
	描述：部件管理信息类
	所属模块：部件管理模块(fru_data) -->
	<CLASS NAME="Component">
		<!-- 部件FruId -->
		<PROPERTY NAME="FruId" TYPE="y">			</PROPERTY>
		<!-- 部件设备Number -->
		<PROPERTY NAME="DeviceNum" TYPE="y">		</PROPERTY>
		<!-- 部件类型 -->
		<PROPERTY NAME="DeviceType" TYPE="y">		</PROPERTY>
		<!-- 部件逻辑组ID -->
		<PROPERTY NAME="GroupID" TYPE="y">			</PROPERTY>
		<!-- 部件容器ID -->
		<PROPERTY NAME="ContainerId" TYPE="y">		</PROPERTY>
		<!-- 部件容器名称 -->
		<PROPERTY NAME="Location" TYPE="s">			</PROPERTY>
		<!-- 部件上层容器名称 -->
		<PROPERTY NAME="LocationObj" TYPE="ro">			</PROPERTY>
		<!-- 部件功能信息 -->
		<PROPERTY NAME="Function" TYPE="s">			</PROPERTY>
		<!-- 部件设备名称 -->
		<PROPERTY NAME="DeviceName" TYPE="s">		</PROPERTY>
		<!-- 部件配置类型 -->
		<PROPERTY NAME="ConfigType" TYPE="y">		</PROPERTY>
		<!-- 部件在位情况 -->
		<PROPERTY NAME="Presence" TYPE="y">			</PROPERTY>
		<!-- 部件健康状态 -->
		<PROPERTY NAME="Health" TYPE="y">			</PROPERTY>
		<!-- 部件单板BoardID -->
		<PROPERTY NAME="BoardId" TYPE="q">			</PROPERTY>
		<!-- 组件唯一标识 -->
		<PROPERTY NAME="ComponentUniqueID" TYPE="s">			</PROPERTY>
        <!-- 用于区分是物理Component对象还是虚拟的Component对象，1表示物理对象，0表示虚拟的对象 -->
		<PROPERTY NAME="VirtualFlag" TYPE="y">			</PROPERTY>
		<!-- 部件厂商信息 -->
		<PROPERTY NAME="Manufacturer" TYPE="s">		</PROPERTY>
        <!-- 部件上电状态 -->
		<PROPERTY NAME="PowerState" TYPE="y">		</PROPERTY>
		<!-- 部件归属的Host信息，0-无效 -->
		<PROPERTY NAME="HostId" TYPE="y">		</PROPERTY>
		<METHOD NAME="SetHealth">
			<PARAMETER TYPE="y" NAME="Health" DIR="in"/>
		</METHOD>
		<METHOD NAME="UpdateDeviceName">
		</METHOD>
		<CLASS NAME="AgentComponent"> </CLASS>
    </CLASS>
	<CLASS NAME="IsMemBoard">
		<PROPERTY NAME="IsBoard" TYPE="y">			</PROPERTY>
		<PROPERTY NAME="MigrationEnable" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="MembrdSpareIdMask" TYPE="q">		</PROPERTY>
		<METHOD NAME="MembrdSyncSetDevStatus">
		<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
		<METHOD NAME="MembrdMigrationEnable">
		<PARAMETER TYPE="y" NAME="SrcNodeId" DIR="in"/>
		<PARAMETER TYPE="y" NAME="DesNodeId" DIR="in"/>
		</METHOD>
		<METHOD NAME="MembrdMigrationStatus">
		<PARAMETER TYPE="s" NAME="MemBrd_Migration" DIR="out"/>
		</METHOD>	
		<METHOD NAME="MembrdMigrationRefresh">
		<PARAMETER TYPE="y" NAME="RefreshFlag" DIR="in"/>
		</METHOD>
	</CLASS>


	<!-- 
	描述：串口切换类
	所属模块：串口管理模块(SeriaManagement) -->
	<CLASS NAME="SeriaManagement" ID="92">
		<!-- 对象Index -->
		<PROPERTY NAME="Index" TYPE="y" ID="1" KEY="1">			</PROPERTY>
		<!-- 可用但是不对外展示(2); 是否可用, 默认可用(1); 某些串口(例如expander串口)只支持装备模式下可用, 就与装备模式绑定, 正常情况下不可用(0) -->
		<PROPERTY NAME="Availability" TYPE="y">	</PROPERTY>
		<!-- 连接状态 -->
		<PROPERTY NAME="ConnectStatus" TYPE="y">	</PROPERTY>
		<!-- 源串口ID -->
		<PROPERTY NAME="SrcSerialID" TYPE="y">		</PROPERTY>
		<!-- 目的串口ID -->
		<PROPERTY NAME="DestSerialID" TYPE="y">		</PROPERTY>		
		<!-- 源串口名称 -->
		<PROPERTY NAME="SrcSerialName" TYPE="s">	</PROPERTY>	
		<!-- 目的串口名称 -->
		<PROPERTY NAME="DestSerialName" TYPE="s">	</PROPERTY>	
		<!-- 源串口uart/port -->
		<PROPERTY NAME="SrcSerial" TYPE="y">		</PROPERTY>	
		<!-- 目的串口uart/port -->
		<PROPERTY NAME="DestSerial" TYPE="y">		</PROPERTY>	
		<!-- 物理串口切换命令使能 1为Enable 0为Disable-->
		<PROPERTY NAME="SerListenSwitchCmdEnable" TYPE="y"> </PROPERTY>
		<!-- 物理串口切换命令 当SerListenSwitchCmdEnable为0时,该命令无效 -->
		<PROPERTY NAME="SerListenSwitchCmd" TYPE="s">		</PROPERTY>
		<!-- 关联的CPLD Accessor -->
		<PROPERTY NAME="CPLDAccessor" TYPE="y">		</PROPERTY>	
		<!-- CPLD值 -->
		<PROPERTY NAME="CPLDValue" TYPE="y">		</PROPERTY>	
		<!-- SDI的串口切换要BMC通过I2C操作卡的CPLD，ipmi模块降权限了，无法操作CPLD，通过此属性关联Action对象，调用upgrade的方法来实现 -->
		<PROPERTY NAME="RemoteAccessor" TYPE="ro">	</PROPERTY>	
		<!-- 对外方法：设置串口互连关系 -->
		<METHOD NAME="SetSerialDirection">
		</METHOD>
		
    </CLASS>
	
	<!-- 
	描述：SOL管理类 
	（该类只有一个对象，如果配置了对象，说明sol断开后是否需要将cpld对应sol的bit位清0)-->
	<CLASS NAME="SOLManagement">
		<!-- 关联的CPLD Accessor -->
		<PROPERTY NAME="DisConnectAccessor" TYPE="y">		</PROPERTY>	
		<!-- CPLD值 -->
		<PROPERTY NAME="DisConnectValue" TYPE="y">		</PROPERTY>	
		<!-- 用户操作超时时间，0为不超时，在类SOLManagement中单位为分钟（[0, 480]），在衍生类SmmSol中单位为秒（[0, 2147483647]） -->
		<PROPERTY NAME="Timeout" TYPE="i">		</PROPERTY>
		<!-- 当前连接的串口-->
		<PROPERTY NAME="ComId"  TYPE="y">		</PROPERTY>
		<!-- OS自动锁屏功能使能状态，0表示不使能，1表示使能-->
		<PROPERTY NAME="OSAutoLockEnabled"  TYPE="y">		</PROPERTY>
        <!-- OS自动锁屏功能按键，0表示ctrl + d，1表示"exit"-->
		<PROPERTY NAME="OSAutoLockKey"  TYPE="y">		</PROPERTY>
		<METHOD NAME="OpenSol">	
			<PARAMETER TYPE="i" NAME="Mode" DIR="in"/>
		</METHOD>
		<METHOD NAME="DeactivateSol">	
			<PARAMETER TYPE="y" NAME="ConnectIndex" DIR="in"/>
		</METHOD>		
		<METHOD NAME="SetSolTimeout" ID="1">
		    <PARAMETER TYPE="i" NAME="Timeout" DIR="in"/>	
        </METHOD>
        <!--设置OS自动锁屏使能状态的方法，0表示不使能，1表示使能-->
        <METHOD NAME="SetOSAutoLockEnabled">
            <PARAMETER TYPE="y" NAME="OSAutoLockEnabled " DIR="in"/>
        </METHOD>
        <!--设置OS自动锁屏自定义按键的方法，0表示ctrl + d，1表示"exit"-->
        <METHOD NAME="SetOSAutoLockKey">
            <PARAMETER TYPE="y" NAME="OSAutoLockKey" DIR="in"/>
        </METHOD>
		<CLASS NAME="SmmSol">
			<!-- 与BMC通信使用的网段 -->
			<PROPERTY NAME="BindEthGroup" TYPE="ro"></PROPERTY>
			<!-- 获取连接到BMC的连接信息, 从命令行调用 -->
			<METHOD NAME="GetConnectionInfo">
				<!-- 连接信息, 变长字符串 -->
				<PARAMETER TYPE="*" NAME="ConnectionInfoArray" DIR="out"/>
			</METHOD>
			<!-- 属性同步模块调用 -->
			<METHOD NAME="SyncMethod">
				<!-- 同步的属性值，目前只同步超时时间 -->
				<PARAMETER TYPE="*" NAME="Properties" DIR="in"/>
			</METHOD>
		</CLASS>
	</CLASS>	
	
	<!-- Set device status  -->
	<CLASS NAME="SysFWProgressStatus">
		<PROPERTY NAME="KBCerr" TYPE="y">		</PROPERTY>	
		<PROPERTY NAME="Videoerr" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="NoDimmerr" TYPE="y">		</PROPERTY>
	</CLASS>
	
	<CLASS NAME="DftCtrl">
		<PROPERTY NAME="RegAddr" TYPE="y">		</PROPERTY>	
		<PROPERTY NAME="RegVal" TYPE="y">		</PROPERTY>
		<PROPERTY NAME="FruId" TYPE="y">		</PROPERTY>
	</CLASS>
	
	<!-- 
	描述：网卡类配置信息类
	所属模块：扣卡管理模块(pcie_card) -->
	<CLASS ID="31" NAME="NetCard">
		<!-- OCP3.0网卡关联的配置对象，OCP网卡初始化时加载网卡告警阈值等属性到网卡的LM75寄存器中 -->
		<PROPERTY NAME="RefConfig" TYPE="ro"> </PROPERTY>
		<!-- 网卡名称 -->
		<PROPERTY NAME="ProductName" TYPE="s" ID="1" >			</PROPERTY>
		<!-- 产商信息 -->
		<PROPERTY NAME="Manufacture" TYPE="s" ID="2" >	</PROPERTY>
		<!-- 网卡类型 -->
		<!--ITEM:1：LOM NCSI TYPE -->
		<!--ITEM:3：PCIE NCSI TYPE -->
		<!--ITEM:5：LOM2 NCSI TYPE -->
		<!-- 6 OS上报的BMC未管理网卡 -->
		<!-- 7 team网口 -->
		<!-- 8 bridge网口 -->
		<!-- 9 mezz -->
		<PROPERTY NAME="CardType" TYPE="y" ID="3">		</PROPERTY>
		<!-- 端口个数 -->
		<PROPERTY NAME="PortNum" TYPE="y">		</PROPERTY>
		<!-- 网卡描述 -->
		<PROPERTY NAME="CardDesc" TYPE="s" ID="4">	</PROPERTY>	
		<!-- 网卡健康状态 -->
		<PROPERTY NAME="Health" TYPE="y" ID="5">		</PROPERTY>		
		<!-- 是否支持NCSI 0:不支持;1:支持-->
		<PROPERTY NAME="NcsiSupported" TYPE='y'>				</PROPERTY>
		<!-- 板载网卡槽位号，RH8100 V3上有多张网卡-->
		<PROPERTY NAME="SlotId" TYPE="y" ID="6">				</PROPERTY>
		<!-- 表示部件是否故障诊断定位的故障源，1表示是故障源，0表示不是 -->
		<PROPERTY NAME="FDMFault" TYPE='y'>  </PROPERTY>
		<!-- OS侧网卡名称 -->
		<PROPERTY NAME="OSNICName" TYPE="s">			</PROPERTY>
		<!-- OS侧网卡型号 -->
		<PROPERTY NAME="Model" TYPE="s">			</PROPERTY>
		<!-- Firmware版本 -->
		<PROPERTY NAME="FirmwareVersion" TYPE="s">			</PROPERTY>
		<!-- 驱动名称 -->
		<PROPERTY NAME="DriverName" TYPE="s">			</PROPERTY>
		<!-- 驱动版本 -->
		<PROPERTY NAME="DriverVersion" TYPE="s">			</PROPERTY>
		<!-- 描述信息 -->
		<PROPERTY NAME="Description" TYPE="s">			</PROPERTY>
		<!-- 芯片厂家 -->
		<PROPERTY NAME="ChipManufacturer" TYPE="s">			</PROPERTY>
		<!-- 芯片BDF -->
		<PROPERTY NAME="RootBDF" TYPE="s">			</PROPERTY>
        <PROPERTY NAME="VenderId" TYPE="q">		</PROPERTY>
		<PROPERTY NAME="DeviceId" TYPE="q">		</PROPERTY>
		<PROPERTY NAME="SubVenderId" TYPE="q">		</PROPERTY>
		<PROPERTY NAME="SubDeviceId" TYPE="q">		</PROPERTY>	
		<!-- 网卡的PCIe资源归属,
		0x0: 表示无效的资源归属ID
		0x1-0x20: 表示资源归属物理CPU的编号
		0x21-0x80: 保留
		0x81-0xc0: 表示资源归属其它PCIe设备的ID, 等于PCIe设备的FRU ID(不能为0)加上0x80
		0xc1-0xfc: 保留
		0xfd: 表示资源归属于CPU1和CPU2
		0xfe: 表示资源归属于PCH
		0xff: 表示资源归属于PCIe Switch
		--> 
		<PROPERTY NAME="ResId" TYPE="y"></PROPERTY>
		<!-- 关联部件 -->
		<PROPERTY NAME="RefComponent" TYPE="ro">		      	</PROPERTY>
		<!-- 关联的Fru对象名，没有时为空 -->
		<PROPERTY NAME="RefFru" TYPE="ro">			</PROPERTY>
		<!-- 网卡单板名称 -->
		<PROPERTY NAME="BoardName" TYPE="s">			</PROPERTY>
		<!-- 网卡关联芯片 -->
		<PROPERTY NAME="RefNetCardChip" TYPE="roa">			</PROPERTY>
		<!-- 网卡网络带宽使用率波形图文件名 -->
		<PROPERTY NAME="BWUWaveFileName" TYPE="s">			</PROPERTY>
		<!-- 网卡网络带宽使用率波形图表标题 -->
		<PROPERTY NAME="BWUWaveTitle" TYPE="s">			</PROPERTY>
		<!-- PFA Event -->
		<PROPERTY NAME="PFAEvent" TYPE='y'>  </PROPERTY>
		<!-- 是否支持MCTP，若配置为支持MCTP，则必须要配置"ManufacturerId"属性 -->
		<PROPERTY NAME="MctpSupport" TYPE="y">	</PROPERTY>
		<!-- 网卡芯片产商ID -->
		<PROPERTY NAME="ManufacturerId" TYPE="u">  </PROPERTY>
		<!-- ME为网卡分配的EID -->
		<PROPERTY NAME="Eid" TYPE="y">		</PROPERTY>
		<!-- 从MCTP获取的物理地址信息 -->
		<PROPERTY NAME="PhyAddr" TYPE="q">	</PROPERTY>
		<!-- 网卡的LLDP功能使能标识 1：LLDP使能 0：LLDP未使能-->
		<PROPERTY NAME="LLDPEnableFlag" TYPE="y"> 		</PROPERTY>
        <!-- PCIE卡虚拟xml加载标志  -->
        <PROPERTY NAME="VirtualNetCardFlag" TYPE="y">   </PROPERTY>
		<!-- 网卡是否具备使能复制LLDP报文到NCSI通道的能力 -->
		<PROPERTY NAME="LldpOverNcsiEnable" TYPE="y"></PROPERTY>
		<!-- OCP 3.0网卡用NcsiPackageID来区分不同SLOT ID -->
		<PROPERTY NAME="NcsiPackageId" TYPE="y"></PROPERTY>
		<PROPERTY NAME="ChipTemp" TYPE="q"></PROPERTY>
		<!-- 关联PCIe网卡通过NCSI获取温度实现待机调速的Connector -->
		<PROPERTY NAME="RefStdbyCoolingConn" TYPE="ro"></PROPERTY>
		<!--网卡是否支持热拔插-->
		<PROPERTY NAME="SupportHotPlug" TYPE="y">	</PROPERTY>
		<!--OCP3.0卡拔插状态，0：预拔出，1：取消预拔出-->
		<PROPERTY NAME="PrePlug" TYPE="y">	</PROPERTY>
		<!--OCP3.0卡通知式热拔插控制状态，0：可插入，1：可拔出，2：不可操作,其它：未知-->
		<PROPERTY NAME="HotplugCtrlStatus" TYPE="y">	</PROPERTY>
		<!-- 更换前SN -->   
		<PROPERTY NAME="PreviousSN" TYPE="s" ></PROPERTY>   
		<!-- 部件是否发生了更换，用于产生SEL日志 -->
		<PROPERTY NAME="ReplaceFlag" TYPE="y" >	</PROPERTY>  
        <!--网卡序列号-->
		<PROPERTY NAME="SerialNumber" TYPE="s">	</PROPERTY>
		<!-- 业务网卡是否支持外发LLDP报文 -->
		<PROPERTY NAME="LLDPSupported" TYPE='y'>  </PROPERTY>
        <!--MctpSupport属性标识是否支持MCTP功能，此属性标识在已经支持MCTP情况下的，实际功能是否支持
			BIT 0：获取工作MAC地址 (1：支持，0：不支持); 
            BIT 1：获取端口统计信息 (1：支持，0：不支持); 
            BIT 2：获取Link Status (1：支持，0：不支持);
            BIT 3：获取固件版本信息 (1：支持，0：不支持);
            BIT 4：获取LLDP使能状态 (1：支持，0：不支持);
            BIT 5：获取出厂MAC地址 (1：支持，0：不支持);
            BIT 6：获取端口BDF信息 (1：支持，0：不支持);
            BIT 7：获取PCIE端口能力 (1：支持，0：不支持);
            BIT 8：获取PCIE端口状态 (1：支持，0：不支持);
            BIT 9：获取芯片结温 (1：支持，0：不支持);
            BIT 10：获取网卡异常码 (1：支持，0：不支持);
            BIT 11：获取光模块当前温度值 (1：支持，0：不支持);
            BIT 12：获取光模块信息 (1：支持，0：不支持);
            BIT 13：获取DCBX信息 (1：支持，0：不支持);
            BIT 14：获取WWNN,WWPN信息 (1：支持，0：不支持);
            BIT 15：获取statistics信息 (1：支持，0：不支持);
            BIT 16: 获取网口链接速率(1：支持，0：不支持);
            BIT 17: 获取网卡序列号SerialNumber
            BIT 18: 获取网卡部件编码PartNumber
            其他位保留 (供拓展使用，默认设置为0)。
        -->
        <PROPERTY NAME="MCTPCapability" TYPE='u'></PROPERTY>
        <!-- 黑匣子收集进度条 -->
        <PROPERTY NAME="BlackBoxProcessbar" TYPE="y"> </PROPERTY>
        <!-- 黑匣子收集方法 -->
        <METHOD NAME="GetBlackBox">
            <!-- 文件名 -->
            <PARAMETER TYPE="s" NAME="Filename" DIR="out"/>
        </METHOD>
		<!-- 扩展netcard类 -->
		<CLASS NAME="ExtendNetCard"> 
			<!-- 扩展卡的基卡 -->
			<PROPERTY NAME="BaseCard" TYPE="ro"></PROPERTY>
		</CLASS>
		<METHOD NAME="SetNcsiPackageId">
			<PARAMETER TYPE="y"	NAME="id"	DIR="in"/>
		</METHOD>
		<!--设置OCP3.0卡预拔出状态-->
		<METHOD NAME="SetPrePlug">
			<PARAMETER TYPE="y"	NAME="PrePlug"	DIR="in"/>
		</METHOD>
		<METHOD NAME="SetFDMFault">
			<PARAMETER TYPE="y" NAME="FDMFault" DIR="in"/>
		</METHOD>		
		<METHOD NAME="SetCardPropFromBMA">
            <PARAMETER TYPE="s" NAME="Request" DIR="in"/>
			<PARAMETER TYPE="y" NAME="ResourceType" DIR="in"/>
        </METHOD>
		<METHOD NAME="UpdateNetworkBWUWave">
        </METHOD>
		<METHOD NAME="ClearNetworkBWUWaveRecord">
        </METHOD>
		<METHOD NAME="RollbackNetworkBWURecord">
        </METHOD>		
		<!--  设置PFAEvent -->
		<METHOD NAME="SetPFAEvent">
			<PARAMETER TYPE="y" NAME="PFAEvent" DIR="in"/>
		</METHOD>
		<!--  设置NetCard FirmWare  -->
		<METHOD NAME="SetFVerFromMCTP">
			<PARAMETER TYPE="s" NAME="FirmwareVersion" DIR="in"/>
		</METHOD>
        <!--  设置NetCard SerialNumber  -->
		<METHOD NAME="SetSN">
			<PARAMETER TYPE="s" NAME="SerialNumber" DIR="in"/>
		</METHOD>
        <!--  设置NetCard 四元组属性 -->
        <METHOD NAME="SetVIdDIdFromMCTP">
            <PARAMETER TYPE="q" NAME="VId" DIR="in"/>
            <PARAMETER TYPE="q" NAME="DId" DIR="in"/>
            <PARAMETER TYPE="q" NAME="SubVId" DIR="in"/>
            <PARAMETER TYPE="q" NAME="SubDId" DIR="in"/>
		</METHOD>
		<!--  设置NetCard的EID和物理地址信息  -->
		<METHOD NAME="SetMCTPIdentity">
			<PARAMETER TYPE="y" NAME="eid" DIR="in"/>
			<PARAMETER TYPE="q" NAME="PhyAddr" DIR="in"/>
		</METHOD>
		<!-- 设置NetCard的LLDP使能 -->
		<METHOD NAME="SetNetCardLLDPEnable">
			<PARAMETER TYPE="y" NAME="lldpEnableFlag" DIR="in"/>			
		</METHOD>
		<!-- 设置复制网卡复制LLDP报文到NCSI通道的能力 -->
		<METHOD NAME="SetLldpOverNcsiEnable">
			<PARAMETER TYPE="y" NAME="LldpOverNcsiEnable" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetChipTemp">
			<PARAMETER TYPE="q" NAME="ChipTemp" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetAgentProperty">
			<PARAMETER TYPE="s" NAME="PropertyName" DIR="in"/>
			<PARAMETER TYPE="*" NAME="PropertyVal" DIR="in"/>
			<PARAMETER TYPE="u" NAME="SaveOption" DIR="in"/>
		</METHOD>
        <!--  设置NetCard rootbdf  -->
		<METHOD NAME="SetNetCardRootBDF">
			<PARAMETER TYPE="s" NAME="bdf" DIR="in"/>
        </METHOD>
        <METHOD NAME="SetManufacturerId">
			<PARAMETER TYPE="u" NAME="ManufacturerId" DIR="in"/>
		</METHOD>
    </CLASS>
	<!-- 因为1822以太网卡芯片拓扑特殊，需要配置该对象以供BMA匹配 -->
	<CLASS NAME="SpecialPcieCard">
		<!--预留，关联所属卡对象 -->
		<PROPERTY NAME="RefPcieCard" TYPE="ro">	</PROPERTY>
		<PROPERTY NAME="VenderId" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="DeviceId" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="SubVenderId" TYPE="s"> </PROPERTY>
		<PROPERTY NAME="SubDeviceId" TYPE="s"> </PROPERTY>
	</CLASS>
	<!-- 网卡关联芯片 -->
	<CLASS NAME="NetCardChip">
		<!-- 芯片编号 -->
		<PROPERTY NAME="ChipNum" TYPE="y">	</PROPERTY>
		<!-- 芯片型号 -->
		<PROPERTY NAME="ChipModel" TYPE="s">	</PROPERTY>
		<!-- 芯片关联端口数量 -->
		<PROPERTY NAME="ChipPortNum" TYPE="y">	</PROPERTY>
		<!-- 芯片厂商 -->
		<PROPERTY NAME="ChipManufacture" TYPE="s">	</PROPERTY>
	</CLASS>
	
	<!-- PCI寄存器相关 -->
	<!-- 描述Node下每个CHANNNEL下面的ECC和内存在位等映射的PCIE地址,详细参考intel EDS手册 -->
	<CLASS NAME="PCIRegInfo">
		<!-- CpuID 保留暂未使用 -->
		<PROPERTY NAME="CPUId" 		TYPE="y">			</PROPERTY>
		<!-- NodeID  Nodeid Channelid RegisterType组合作为索引id 找到唯一一组register -->
		<PROPERTY NAME="NodeId" 		TYPE="y">			</PROPERTY>
		<!-- channe下面支持的dimm数 -->
		<PROPERTY NAME="DIMMNumber" 		TYPE="y">			</PROPERTY>
		<!-- ChannelID -->
		<PROPERTY NAME="ChannelId" 	TYPE="y">			</PROPERTY>
		<!-- iMCID 保留暂时未使用-->
		<PROPERTY NAME="iMCId" 		TYPE="q">			</PROPERTY>
		<!-- bus number 参考intel文档507849 -->
		<PROPERTY NAME="BusNumber" 	TYPE="q">			</PROPERTY>
		<!-- device number 参考intel文档507849 -->
		<PROPERTY NAME="DeviceNumber" 	TYPE="q">			</PROPERTY>
		<!-- funtion number 参考intel文档507849 -->
		<PROPERTY NAME="FunctionNumber" TYPE="q">			</PROPERTY>
		<!-- register type 区分寄存器类型 -->
		<PROPERTY NAME="RegisterType" TYPE="y">			</PROPERTY>
		<!-- register address 参考intel文档507849 -->
		<PROPERTY NAME="RegisterNumber1" TYPE="q">			</PROPERTY>
		<PROPERTY NAME="RegisterNumber2" TYPE="q">			</PROPERTY>
		<PROPERTY NAME="RegisterNumber3" TYPE="q">			</PROPERTY>
		<PROPERTY NAME="RegisterNumber4" TYPE="q">			</PROPERTY>
	</CLASS>
	
	<!-- PME平台配套功能 -->
	<!-- 描述PME平台支持产品的配套功能 -->
	<CLASS NAME="PMEServiceConfig" ID="62">
		<!-- PME是否支持虚拟U盘功能 -->
		<PROPERTY NAME="VirtualUmsEnable" 		TYPE="y" ID="4">			</PROPERTY>
		<!-- PME是否支持redfish访问SP的资源，包括OS部署/OS克隆/OS还原 -->
		<PROPERTY NAME="SPServiceOSEnable" 		TYPE="y">	</PROPERTY>		
		<!-- PME是否支持板载iBMA功能, 即划分NAND Flash作为iBMA虚拟U盘, 实现从板载iBMA安装iBMA -->
		<PROPERTY NAME="iBMAOnBoardEnable" 		TYPE="y">	</PROPERTY>		
		<!-- PME是否支持VNC功能 -->
		<PROPERTY NAME="VNCEnable" 		TYPE="y">			</PROPERTY>
		<!-- PME是否支持KVM功能 -->
		<PROPERTY NAME="KVMEnable" 		TYPE="y">			</PROPERTY>
		<!-- PME是否支持HTTPS协议（HTTPS服务和HTTP服务）-->
		<PROPERTY NAME="HTTPSEnable" 	TYPE="y">			</PROPERTY>
		<!-- PME是否支持HTTP协议 （只控制HTTP服务）-->
		<PROPERTY NAME="HTTPEnable" 	TYPE="y">			</PROPERTY>
		<!-- PME是否支持SSH协议 -->
		<PROPERTY NAME="SSHEnable" 	    TYPE="y">			</PROPERTY>
		<!-- PME是否支持WEB功能 -->
		<PROPERTY NAME="WEBEnable" 		TYPE="y">			</PROPERTY>
		<!-- PME是否支持Redfish接口-->
		<PROPERTY NAME="RedfishEnable" 	TYPE="y">			</PROPERTY>
		<!-- PME是否支持Trap功能 -->
		<PROPERTY NAME="TrapEnable" 	TYPE="y">			</PROPERTY>
		<!-- PME是否支持X86业务功能 -> 实际含义为是否支持业务系统，一般配置1，cx916、RM210这些机型没有跑业务才会配置0 （正式版本可考虑改名） -->
		<PROPERTY NAME="X86Enable" 		TYPE="y">			</PROPERTY>
		<!-- PME是否支持系统上下电控制 0:不支持,1:BMC支持上下电,2:产品控制上下电-->
		<PROPERTY NAME="SupportSysPowerCtrl" TYPE="y">		</PROPERTY>
		<!-- PME是否支持arm业务功能 -->
		<PROPERTY NAME="ARMEnable" 		TYPE="y" ID="9">			</PROPERTY>
		<PROPERTY NAME="PowerCappingSupport" 		TYPE="y" ID="1">			</PROPERTY>
		<PROPERTY NAME="BlackBoxSupport" 		TYPE="y" ID="2">			</PROPERTY>
		<!-- PME是否支持Snmpd业务功能 -->
		<PROPERTY NAME="SnmpdEnable" 	TYPE="y">			</PROPERTY>
		<!-- PME是否支持SSDP业务功能 -->
		<PROPERTY NAME="SSDPEnable" 	TYPE="y">			</PROPERTY>			
		<!-- PME是否支持IPMI业务功能 -->
		<PROPERTY NAME="IPMILanEnable" 	TYPE="y">			</PROPERTY>
		<!-- PME是否支持主动散热功能 -->
		<PROPERTY NAME="CoolingEnable" 	TYPE="y">			</PROPERTY>
        <!-- PME是否支持分区使能功能 -->
        <PROPERTY NAME="PartitionEnable" TYPE="y">	</PROPERTY>
		<!-- PME是否支持电源主备模式功能 -->
        <PROPERTY NAME="PowerActiveStandbyEnable" TYPE="y">	</PROPERTY>		
        <!-- PME是否支持电源冷备(深度休眠)模式功能 -->
        <PROPERTY NAME="PowerDeepSleepEnable" TYPE="y">	</PROPERTY>
		<!-- PME是否支持RTC使能 -->
        <PROPERTY NAME="RTCEnable" TYPE="y">	</PROPERTY>
		<!-- PME是否支持电源相关功能 -->
        <PROPERTY NAME="PSUEnable" TYPE="y">	</PROPERTY>
        <!-- BIOS PFR校验功能是否支持 -->
        <PROPERTY NAME="BIOSPFRSupport" TYPE="y">	</PROPERTY>
		<!-- PME是否支持网络配置相关功能 -->
        <PROPERTY NAME="NetConfigEnable" TYPE="y">	</PROPERTY>
		<!-- PME是否支持资源监控 -->
        <PROPERTY NAME="SystemResourceMonitorEnable" TYPE="y">	</PROPERTY>
		<!-- PME是否支持WOL(wake on lan)网络唤醒配置功能，1:支持，0:不支持 -->
        <PROPERTY NAME="WOLConfigEnable" TYPE="y"  ID="5" EXPORT="17">	</PROPERTY>
		<!-- 是否支持电源固件升级,1：可升级，0：不可升级 -->
		<PROPERTY NAME="PSFirmwareUpgradeEnable" TYPE="y">	 </PROPERTY>
		<!-- 定制化的OID,定制化的OID用逗号隔开比如 1,2,3,2011,6,8,9 -->
		<PROPERTY NAME="CustomSNMPOID" TYPE="s" ID="3" EXPORT="17">	 </PROPERTY>
		<!-- 数据收集功能对上层网管是否支持，0:不支持;1:支持 -->
		<PROPERTY NAME="DataAcquisitionSupport" TYPE="y">	 </PROPERTY>
        <!-- 内存故障预测功能对外接口是否支持，0:不支持;1:支持 -->
		<PROPERTY NAME="FPCSupport" TYPE="y">	 </PROPERTY>
		<!-- JAVA KVM支持，0:不支持;1:支持 -->
		<PROPERTY NAME="JavaKVMEnable" TYPE="y">	 </PROPERTY>
		<!-- VIDEO支持，0:不支持;1:支持 -->
		<PROPERTY NAME="JavaVideoEnable" TYPE="y" ID="6">	 </PROPERTY>
		<!-- 智能节能功能对上层网管是否支持，0:不支持;1:支持 -->
		<PROPERTY NAME="EnergySavingSupport" TYPE="y">	 </PROPERTY>		
		<!-- 单板信息收集开关；0->1的时候启动收集 -->
		<PROPERTY NAME="BoardInfoCollectEnable" TYPE="y" ID="7">	 </PROPERTY>	
		<!-- 单板信息收集状态；0：没有启动收集；1：正在收集中；2：收集完成；3：收集失败；4：收集中发生解析失败deviceinfo.json；5：收集完成但是有deviceinfo.json解析失败发生 -->
		<PROPERTY NAME="BoardInfoCollectStatus" TYPE="y" ID="8">	 </PROPERTY>
		<!-- 是否开启串口环回检测进入装备模式；0：不开启；1：开启; 服务器产品默认开启，配置为1，RM产品面板无串口，配置为0-->
		<PROPERTY NAME="SerialLoopbackDetectEnable" TYPE="y"> </PROPERTY>
		<!-- PME是否支持系统锁定功能 -->
		<PROPERTY NAME="SystemLockDownSupport" TYPE="y">	 </PROPERTY>	
		<!-- PME是否支持LLDP功能 -->
		<PROPERTY NAME="LLDPSupport" 	    TYPE="y">		</PROPERTY>
		<!-- PME是否支持Kerberos功能 -->
		<PROPERTY NAME="KerberosSupport"  TYPE="y"> </PROPERTY>
		<!-- PME是否支持N+R备电功能 -->
		<PROPERTY NAME="NormalAndRedundancySupport" TYPE="y">	 </PROPERTY>
		<!-- PME是否支持电源供电来源切换功能，当前只有RM210产品支持此模式的设置 -->
		<PROPERTY NAME="PSUSourceSwitchSupport" TYPE="y"></PROPERTY>
		<!-- 是否支持BMC芯片直连的PCIe设备管理 -->
		<PROPERTY NAME="LocalPcieMgntSupport" TYPE="y"></PROPERTY>
		<PROPERTY NAME="LldpOverNcsiEnable" TYPE="y"></PROPERTY>
		<!-- 0：不支持iRM心跳（非FusionPoD产品） 1: 支持iRM心跳（FusionPoD产品） 
		     2：支持iRM心跳，但装备使能时临时关闭iRM心跳，2必须复位持久化（不能复位丢失或掉电持久化） -->
		<PROPERTY NAME="IRMHeartBeatEnable" TYPE="y"></PROPERTY>
        <!-- 0: 不支持硬件保护根秘钥    1：支持硬件保护根秘钥-->
        <PROPERTY NAME="HardwareRootKeySupport" TYPE="y"></PROPERTY>
        <!-- 硬件是否支持b2h_irq中断，bmc to host中断是否支持的标记，host侧ipmi驱动会根据bmc侧的配置来使能或禁止b2h_irq_en状态。 0: 不支持 1：支持 -->
        <!-- BMC是根据机型配置是否使能中断，只有同时满足“BMC&BIOS软件联调正常 && 中断信号质量硬件单测OK”后，对应机型的BMC才能开启此中断 -->
        <PROPERTY NAME="B2HIrqSupport" TYPE="y"></PROPERTY>
		<!-- 配置信息导入导出功能支持标志-->
        <PROPERTY NAME="CfgImportAndExportSupport" TYPE="y"></PROPERTY>		
		<!-- PME是否支持IPMI AC掉电功能，0:不支持;1:支持 -->
		<PROPERTY NAME="IpmiAcCycleSupport" TYPE="y"></PROPERTY>
		<!-- 是否支持Web占用率显示，0:不支持;1:支持 -->
		<PROPERTY NAME="PerfMonEnable" TYPE="y"></PROPERTY>
		<!-- 方法：设置定制化OID -->
		<METHOD NAME="SetCustomSNMPOID" ID="3">
			<PARAMETER DIR="in" NAME="string" TYPE="s"/>
        </METHOD>
        <!-- 特殊机型裁剪功耗封顶功能，不作为对外接口使用-->
        <METHOD NAME="SetPowerCappingSupport">
            <PARAMETER TYPE="y" NAME="PowerCappingSupport" DIR="in"/>
        </METHOD>        
        <!-- 方法：SMM主备同步使用 -->
		<METHOD NAME="PropertySyncMethod">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
            <PARAMETER TYPE="*" NAME="*" DIR="out"/>
        </METHOD>
		<METHOD NAME="SetBoardInfoCollect" ID="7">
			<PARAMETER DIR="in" NAME="Enable" TYPE="y"/>
        </METHOD>
	</CLASS>
	
	<!-- 描述：IPMI命令定义类 -->
	<CLASS NAME="IPMIOemCommand">
		<!-- 读写类型，0:读，1:写 -->
		<PROPERTY NAME="ReadWrite" TYPE="y">    </PROPERTY>
		<!-- 网络功能码-->
		<PROPERTY NAME="NetFunction" TYPE="y">  </PROPERTY>
		<!--IPMI通道号-->
		<PROPERTY NAME="ChanProtocol" TYPE="y">  </PROPERTY>		
		<!-- 命令字-->
		<PROPERTY NAME="Command" TYPE="y">      </PROPERTY>
		<!-- 数据-->
		<PROPERTY NAME="Data" TYPE="ay">        </PROPERTY>
		<!-- 标识受限装备ipmi命令列表中该命令是否被屏蔽, 
		0:表示该命令需要被屏蔽(和黑白名单模式无关); 
		1:表示该命令不能被屏蔽(如果命令误配置成屏蔽，会影响基本功能，比如：FDM&&RAS相关的IPMI命令配置成屏蔽模式时，会影响FDM&&RAS的基本功能); 
		-->
		<PROPERTY NAME="ShiedFlag" TYPE="y">    </PROPERTY>
	</CLASS >
	
	<!-- 描述PME平台支持产品的sendmessage转发限制功能 -->
	<CLASS NAME="PMESendMsgConfig">
		<!-- 源通道 -->
		<PROPERTY NAME="SrcChan" 		TYPE="y">			</PROPERTY>
		<!-- 源IPMB地址 -->
		<PROPERTY NAME="SrcAddr" 		TYPE="y">			</PROPERTY>
		<!-- 目的通道 -->
		<PROPERTY NAME="DestChan" 		TYPE="y">			</PROPERTY>
		<!-- 目的IPMB地址 -->
		<PROPERTY NAME="DestAddr" 		TYPE="y">			</PROPERTY>
		<!-- 是否支持转发，目前该属性没有使用 -->
		<PROPERTY NAME="SendMsgEnable" 	TYPE="y">			</PROPERTY>
		<!-- 白名单功能使能，0:禁用，1:启用，禁用时不进行白名单匹配-->
		<PROPERTY NAME="WhiteListState"  TYPE="y"> </PROPERTY> 
		<!-- 允许转发的IPMI命令白名单 -->
		<PROPERTY NAME="IPMICommand"  TYPE="roa"> </PROPERTY>
	</CLASS>

	<!-- 
	描述:XCUJ 保留通道测试 -->
	<CLASS NAME="ReserveChanTest">
		<!-- 9555输入 -->
		<PROPERTY NAME="9555In1" TYPE="y">			</PROPERTY>
		<!-- 9555输入 -->
		<PROPERTY NAME="9555In2" TYPE="y">			</PROPERTY>
		<!-- CPLD输出 -->
		<PROPERTY NAME="cpldout" TYPE="y">	     </PROPERTY>
		<!-- 9555输出 -->
		<PROPERTY NAME="9555out1" TYPE="y">		</PROPERTY>
		<!-- 9555输出 -->
		<PROPERTY NAME="9555out2" TYPE="y">		</PROPERTY>
		<!-- CPLD输入 -->
		<PROPERTY NAME="cpldin" TYPE="y">		</PROPERTY>				
        </CLASS>
	
	<!-- 描述装备测试中硬件单点信号测试的对象 -->
	<CLASS NAME="InterfaceTest">
	    <!-- 信号接口类型
		0 - GPIO、CPLD寄存器或IO扩展器件，如PCA9555
		1 - I2C设备，如EEPROM
		2 - Canbus 
		-->
		<PROPERTY NAME="IFType" TYPE="y">		</PROPERTY>
		<!-- 测试类型，根据IFType不同而不同
		0 - 输入自检测试
		1 - 输出自检测试
		2 - 环回测试/回读测试
		-->
		<PROPERTY NAME="TestType" TYPE="y"></PROPERTY>
		<!-- 输入信号，根据IFType不同而不同
		IfcType=0，表示GPIO或CPLD寄存器的输入值，需要关联accessor  
		IfcType=1, 表示引用的I2C设备对象，如EEPROM，PCA9555
		-->	
		<PROPERTY NAME="Input"  TYPE="*">		</PROPERTY>
		<!-- 输出信号，根据IFType不同而不同
		IfcType=0，表示GPIO或CPLD寄存器的输出值，需要关联accessor;如没有关联accessor，表示有硬件强制控制； 
		IfcType=1, 表示i2c设备读取时的offset   Modified by l00419687 2018/02/07.
		-->			
        <PROPERTY NAME="Output"  TYPE="y">		</PROPERTY> 	
		<!-- 输入信号期望值，根据IFType不同而不同,需要注意accessor是否有反转
		IfcType=0，表示GPIO或CPLD寄存器在OutputValue输出时与之对应的期望值
		IfcType=1, 无效
		IfcType=2, 表示接收端通道号
		-->	
        <PROPERTY NAME="InputValue"  TYPE="ay">		</PROPERTY>			
		<!-- 输出信号控制值，根据IFType不同而不同
		IfcType=0，表示GPIO或CPLD寄存器的输出值 
		IfcType=1, 无效
		IfcType=2, 表示输出端通道号
		-->	
		<PROPERTY NAME="OutputValue"  TYPE="ay">		</PROPERTY>
		<!-- 运算符，1：<，2: <=, 3：>，4：>=，5：=，6：不等于, 7: 上升沿0->1,
		8:下降沿1->0, 9:下降沿1->0产生 上升沿0->1恢复  -->
		<PROPERTY NAME="Operator" TYPE="y"></PROPERTY>
	</CLASS>
	
	<CLASS NAME="BoardRTC">
		<PROPERTY NAME="Year"     TYPE="q">		</PROPERTY>
		<PROPERTY NAME="Month"    TYPE="y">		</PROPERTY>
		<PROPERTY NAME="Date"     TYPE="y">		</PROPERTY>
		<PROPERTY NAME="Hour"     TYPE="y">		</PROPERTY>
		<PROPERTY NAME="Minute"   TYPE="y">		</PROPERTY>
		<PROPERTY NAME="Second"   TYPE="y">		</PROPERTY>
		<PROPERTY NAME="Timestamp"  TYPE="ay">	</PROPERTY>
		<PROPERTY NAME="GetTimeFail"  TYPE="y">		</PROPERTY>
		<PROPERTY NAME="TimeStampInSec"  TYPE="u">		</PROPERTY>
		<PROPERTY NAME="SwitchBus" TYPE="y"> </PROPERTY>
		<METHOD NAME="SetRtcTime">
			<PARAMETER TYPE="u" NAME="Timestamp" DIR="in"/>
		</METHOD>
		<!-- 提供方法实现对备用板的时间同步 -->
		<METHOD NAME="SyncSetRtcTime">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
	</CLASS>	
	
	<!-- 描述SMM板主备端口切换功能 -->
	<CLASS NAME="SMMportswitch">    
		<PROPERTY NAME="SMM0LSWaddr"           TYPE="u">		        </PROPERTY>
		<PROPERTY NAME="SMM1LSWaddr"           TYPE="u">			    </PROPERTY>
		<PROPERTY NAME="SMM0LSWphynum"         TYPE="u">		        </PROPERTY>
		<PROPERTY NAME="SMM1LSWphynum"         TYPE="u">		        </PROPERTY>
		<PROPERTY NAME="SMM0LSWreg"            TYPE="u">		        </PROPERTY>
		<PROPERTY NAME="SMM1LSWreg"            TYPE="u">		        </PROPERTY>
		<PROPERTY NAME="enableLSWregvalue"     TYPE="u">		        </PROPERTY>
		<PROPERTY NAME="disableLSWregvalue"    TYPE="u">		        </PROPERTY>
		<!-- BMC的LSW芯片主备切换smm的对外方法,参数为需要切换到哪个smm板,1:smm0 2:smm1 -->
		<METHOD NAME="SetLswMasterPort">
			<PARAMETER TYPE="u" NAME="portnum" DIR="in"/>
    	</METHOD>		
    </CLASS>
	
	<!-- 同步到SMM的PCIe信息 -->
	<CLASS NAME="SMMPCIeInfo" ID="105">    
		<PROPERTY NAME="ContainerType"           TYPE="y" ID="1">		        </PROPERTY>
		<PROPERTY NAME="ContainerSlot"           TYPE="y" ID="2">		        </PROPERTY>
		<PROPERTY NAME="VenderId"                TYPE="q" ID="3">		        </PROPERTY>
		<PROPERTY NAME="DeviceId"                TYPE="q" ID="4">		        </PROPERTY>
		<PROPERTY NAME="SubVenderId"             TYPE="q" ID="5">		        </PROPERTY>
		<PROPERTY NAME="SubDeviceId"           	 TYPE="q" ID="6">		        </PROPERTY>
		<PROPERTY NAME="PCIeSlot"           	 TYPE="y" ID="7">   	        </PROPERTY>
    </CLASS>
	<!--  节点板PCIe信息汇总 -->
	<CLASS NAME="NodePCIeInfoSummary">    
		<!-- 节点板Id -->
		<PROPERTY NAME="Id"           			 TYPE="y" >   	        </PROPERTY>
		<!-- PCIe信息列表 -->
		<PROPERTY NAME="PCIeInfoArray"           TYPE="aq" >   	        </PROPERTY>
		<!-- PCIe卡连接器对象，只配置从底板开始的入口连接器 -->
		<PROPERTY NAME="PCIeContainerConnectors"    TYPE="roa" >   	    </PROPERTY>
	</CLASS>
	<CLASS NAME="IpmbEthBlade" ID="21">
		<!-- 对象Id标识 -->
		<PROPERTY NAME="Id" TYPE='y'>			</PROPERTY>
	    <!-- IPMBEth 对应的slave address -->
		<PROPERTY NAME="SlaveAddr" TYPE='y'  ID="1">			</PROPERTY>
		<!-- BMC的在位信息 -->
		<PROPERTY NAME="Presence"  TYPE="y">		</PROPERTY> 
		<!-- 单板类型信息 -->
		<PROPERTY NAME="BladeType" TYPE="y">	</PROPERTY>
		<!-- 单板的热插拔状态 -->
		<PROPERTY NAME="HotSwap" TYPE="y">		</PROPERTY>
		<!-- 通信状态， 0，通信正常 1，通信丢失 -->
		<PROPERTY NAME="CommunicateLost"  TYPE="y">		</PROPERTY>
		<!-- 重启导致的心跳丢失，1，表示心跳丢失 -->
		<PROPERTY NAME="RebootLost"  TYPE="y">	</PROPERTY>
		<!-- 更新心跳状态的方法，供smm_mgnt等模块调用-->
		
		<!-- 整框封顶的情况下，单个节点固定封顶状态，1表示开启 -->
		<PROPERTY NAME="PowerCappingManualState"  TYPE="y"> </PROPERTY>
		<!-- 整框封顶的情况下，单个节点封顶状态 -->
		<PROPERTY NAME="PowerCappingEnable"  TYPE="y"> </PROPERTY>
		<!-- 整框封顶的情况下，单个节点固定封顶值 -->
		<PROPERTY NAME="PowerCappingValue"  TYPE="q" ID="2" EXPORT="17"> </PROPERTY>
		<!-- 整框封顶的情况下，单个节点封顶下限值-->
		<PROPERTY NAME="PowerCappingBaseValue"  TYPE="q"> </PROPERTY>
		<!-- 节点当前功率-->
		<PROPERTY NAME="CurrentPower"  TYPE="q"> </PROPERTY>
		<!-- 节点最大封顶功耗-->
		<PROPERTY NAME="PowerCappingMaxPower"  TYPE="q"> </PROPERTY>
		<!-- 节点MSPP状态-->
		<PROPERTY NAME="NodeMSPPState"  TYPE="y"> </PROPERTY>
		<!-- 节点封顶失效动作-->
		<PROPERTY NAME="PowerCappingFailAction" TYPE="y" ID="3" EXPORT="17"> </PROPERTY>
		<!-- 供电状态-->
		<PROPERTY NAME="PowerState"  TYPE="y" > </PROPERTY>
		<!-- 全宽半宽-->
		<PROPERTY NAME="BoardWidthType"  TYPE="y" > </PROPERTY>
		<!--节点UID状态-->
		<PROPERTY NAME="NodeUIDState"  TYPE="y" > </PROPERTY>		
		<!--该属性EM使用，受控上电标志，0表示不需要，1表示需要受控上电-->
		<PROPERTY NAME="ControlledPowerOn" TYPE="y" > </PROPERTY>
		<!--该属性EM使用，是否支持管理，0初始值，1不支持，2支持-->
		<PROPERTY NAME="ManagedByMM" TYPE="y" > </PROPERTY>
		<!-- OS启动状态 -->
		<PROPERTY NAME="OsBootState" TYPE="y"> </PROPERTY>
		<!-- 设置封顶值方法-->
		<METHOD NAME="SetPowerCappingValue" ID="2">
			<PARAMETER TYPE="q" NAME="PowerCappingValue" DIR="in"/>
		</METHOD>
		<!-- 获取可设置封顶值范围方法-->
		<METHOD NAME="GetPowerCappingValueRange">
			<PARAMETER TYPE="q" NAME="ValueBase" DIR="out"/>
			<PARAMETER TYPE="q" NAME="ValueTop" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetFailAction" ID="3">
            <PARAMETER TYPE="y" NAME="PowerCappingFailAction" DIR="in"/>
        </METHOD>
        <!-- 对指定节点进行上下电、复位等操作-->
		<METHOD NAME="BladeFruControl">
			<PARAMETER TYPE="y" NAME="FruId" DIR="in"/>
			<!-- fru控制命令 0:冷复位; 1:热复位; 3:平滑复位; 4:发起诊断  -->
			<PARAMETER TYPE="y" NAME="FruControl" DIR="in"/>
			<!-- 返回码 0：正常 1：fru不存在 2：fru不支持当前操作  -->
			<PARAMETER TYPE="i" NAME="Ret" DIR="out"/>
		</METHOD>
		<METHOD NAME="GetBladeLanConfig">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="y" NAME="NetMode" DIR="out"/>
			<PARAMETER TYPE="y" NAME="NetType" DIR="out"/>
			<PARAMETER TYPE="y" NAME="SilkNum" DIR="out"/>
			<PARAMETER TYPE="y" NAME="IpMode" DIR="out"/>
			<PARAMETER TYPE="s" NAME="IpAddr" DIR="out"/>
			<PARAMETER TYPE="s" NAME="SubMask" DIR="out"/>
			<PARAMETER TYPE="s" NAME="Gateway" DIR="out"/>
			<PARAMETER TYPE="s" NAME="MAC" DIR="out"/>
			<PARAMETER TYPE="y" NAME="Ip6Mode" DIR="out"/>
			<PARAMETER TYPE="s" NAME="Ip6Addr" DIR="out"/>
			<PARAMETER TYPE="y" NAME="prefix" DIR="out"/>
			<PARAMETER TYPE="s" NAME="Ip6Gateway" DIR="out"/>
			<PARAMETER TYPE="y" NAME="VLANState" DIR="out"/>
			<PARAMETER TYPE="q" NAME="VLANID" DIR="out"/>
		</METHOD>
		<METHOD NAME="GetVLANIDRange">
			<PARAMETER TYPE="q" NAME="VLANIDMin" DIR="out"/>
			<PARAMETER TYPE="q" NAME="VLANIDMax" DIR="out"/>
		</METHOD>
		<METHOD NAME="GetBladeMngtPortCap">
			<PARAMETER TYPE="y" NAME="DedicatedEnable" DIR="out"/>
			<PARAMETER TYPE="y" NAME="AggregationEnable" DIR="out"/>
			<PARAMETER TYPE="y" NAME="LomNcsiEnable" DIR="out"/>
			<PARAMETER TYPE="y" NAME="PcieNcsiEnable" DIR="out"/>
			<PARAMETER TYPE="y" NAME="Lom2NcsiEnable" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetBladeIpAddr">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="s" NAME="IpAddr" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBladeSubNetMask">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="s" NAME="SubMask" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBladeGateWay">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="s" NAME="GateWay" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBladeIp6Addr">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="s" NAME="IpAddr" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBladeIp6Prefix">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="y" NAME="prefix" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBladeIp6GateWay">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="s" NAME="GateWay" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBladeIpMode">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="y" NAME="IpMode" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBladeIp6Mode">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="y" NAME="Ip6Mode" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBladeNetMode">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="y" NAME="NetMode" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBladeVLANInfo">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="y" NAME="VLANState" DIR="in"/>
			<PARAMETER TYPE="q" NAME="VLANID" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBladeActivePort">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetNodeUIDState">
			<PARAMETER TYPE="y" NAME="NodeUIDState" DIR="in"/>
		</METHOD>
		<!-- 设置节点的系统工作模式 -->
		<METHOD NAME="SetNodePowerWorkMode">
			<PARAMETER TYPE="y" NAME="Type" DIR="in"/>
			<PARAMETER TYPE="y" NAME="Mode" DIR="in"/>
			<PARAMETER TYPE="u" NAME="ActiveMask" DIR="in"/>
		</METHOD>
		<METHOD NAME="GetFruHotSwapState" ID="4">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="y" NAME="FruID" DIR="in"/>
			<PARAMETER TYPE="y" NAME="M_Value" DIR="out"/>
		</METHOD>
		<METHOD NAME="SendChassisNumber">
			<PARAMETER TYPE="u" NAME="ChassisNumber" DIR="in"/>
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
		</METHOD>
		<!--查询单板的信息-->
		<METHOD NAME="GetBladeInfo">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="ay" NAME="SystemName" DIR="out"/>
			<PARAMETER TYPE="ay" NAME="BoardName" DIR="out"/>
			<PARAMETER TYPE="ay" NAME="SerialNumber" DIR="out"/>
			<PARAMETER TYPE="ay" NAME="ProductName" DIR="out"/>
			<PARAMETER TYPE="ay" NAME="ProductSerialNumber" DIR="out"/>
			<PARAMETER TYPE="ay" NAME="ProductVersion" DIR="out"/>
			<PARAMETER TYPE="ay" NAME="BoardPartNumber" DIR="out"/>
			<PARAMETER TYPE="u" NAME="BoardMfgDate" DIR="out"/>
			<PARAMETER TYPE="ay" NAME="BoardFruFileId" DIR="out"/>
			<PARAMETER TYPE="ay" NAME="BoardManufacturer" DIR="out"/>
			<PARAMETER TYPE="ay" NAME="ProductFruFileId" DIR="out"/>
			<PARAMETER TYPE="ay" NAME="ProductManufacturer" DIR="out"/>
			<PARAMETER TYPE="ay" NAME="ProductPartNumber" DIR="out"/>
			<PARAMETER TYPE="ay" NAME="ProductAssetTag" DIR="out"/>
			<PARAMETER TYPE="aay" NAME="ProductOemLabel" DIR="out"/>
		</METHOD>
		<METHOD NAME="GetBladeUserName">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="y" NAME="UserID" DIR="in"/>
			<PARAMETER TYPE="s" NAME="UserName" DIR="out"/>
		</METHOD>
		<METHOD NAME="GetBladeUserPrivilege">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="y" NAME="UserID" DIR="in"/>
			<PARAMETER TYPE="y" NAME="UserCount" DIR="out"/>
			<PARAMETER TYPE="y" NAME="NameFixedCount" DIR="out"/>
			<PARAMETER TYPE="y" NAME="CallinFlag" DIR="out"/>
			<PARAMETER TYPE="y" NAME="LinkAuthFlag" DIR="out"/>
			<PARAMETER TYPE="y" NAME="IpmiMsgFlag" DIR="out"/>
			<PARAMETER TYPE="y" NAME="Privilege" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetBladeUserPassword">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="s" NAME="UseName" DIR="in"/>
			<PARAMETER TYPE="s" NAME="Password" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBladeUserPrivilege">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="s" NAME="UserName" DIR="in"/>
			<PARAMETER TYPE="y" NAME="Privilege" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBladeAddUser">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="s" NAME="UserName" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBladeDelUser">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="s" NAME="UserName" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBladePowerState">
			<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
			<PARAMETER TYPE="y" NAME="FruId" DIR="in"/>
			<!-- 上下电命令 0：下电 1：上电  -->
			<PARAMETER TYPE="y" NAME="Operation" DIR="in"/>
			<!-- 返回码 0：正常 1：fru不存在  -->
			<PARAMETER TYPE="i" NAME="Ret" DIR="out"/>
		</METHOD>

        <!-- SMM使用 -->
        <!-- 冷却介质 0：风冷 1：液冷-->
		<PROPERTY NAME="CoolingMedium"  TYPE='y'>	 </PROPERTY>
	    <METHOD NAME="SetBladeCoolingMedium">
	        <PARAMETER TYPE="y" NAME="Medium" DIR="in"/>
	    </METHOD>

	    <METHOD NAME="GetBladePresentFru">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
	        <PARAMETER TYPE="*" NAME="*" DIR="out"/>
	    </METHOD>
	    <METHOD NAME="PropertySyncMethod">
	        <PARAMETER TYPE="*" NAME="*" DIR="in"/>
	        <PARAMETER TYPE="*" NAME="*" DIR="out"/>
	    </METHOD>
	    <METHOD NAME="DeleteSwiCfgFile">
	        <PARAMETER TYPE="s" NAME="SwiModel" DIR="in" />
		<PARAMETER TYPE="y" NAME="FruId" DIR="in" />
		<PARAMETER TYPE="y" NAME="RebootFlag" DIR="in" />
	    </METHOD>
        <METHOD NAME="RestoreSwiCfgFile">
        <PARAMETER TYPE="s" NAME="SwiModel" DIR="in" />
        <PARAMETER TYPE="y" NAME="FruId" DIR="in" />
        <PARAMETER TYPE="s" NAME="BackupTime" DIR="in" />
        </METHOD>
        <METHOD NAME="ParseSwiCfgFile">
        <PARAMETER TYPE="s" NAME="SwiModel" DIR="in" />
        <PARAMETER TYPE="y" NAME="FruId" DIR="in" />
        <PARAMETER TYPE="s" NAME="BackupTime" DIR="in" />
        <PARAMETER TYPE="s" NAME="FileName" DIR="out"/>               
        </METHOD>
        <METHOD NAME="DeleteInvalidSwiCfgFile">
        <PARAMETER TYPE="s" NAME="SwiModel" DIR="in" />          
        </METHOD>
        <METHOD NAME="OfflineLoadSwiCfgFile">
            <PARAMETER TYPE="s" NAME="SwiModel" DIR="in" />
            <PARAMETER TYPE="y" NAME="BladeType" DIR="in" />
            <PARAMETER TYPE="y" NAME="FruId" DIR="in" />
            <PARAMETER TYPE="s" NAME="FileName" DIR="in"/>
            <PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
            <PARAMETER TYPE="i" NAME="Ret" DIR="out"/>
		</METHOD>
        <METHOD NAME="SetNodeMSPPState">
            <PARAMETER TYPE="y" NAME="state" DIR="in"/>
        </METHOD>
	</CLASS>

	<!-- 此对象是用来给SMM下发平台事件给BMC-->
	<CLASS NAME="PlatformEventConfig">
	    <!-- xml中写死的sensor number -->
		<PROPERTY NAME="SensorNumber" TYPE='y'>		</PROPERTY>
		<!-- 传感器的实时读值，直接引用该传感器的对应属性-->
		<PROPERTY NAME="SensorValue"  TYPE="q">		</PROPERTY>
        <PROPERTY NAME="SensorType"  TYPE="y">		</PROPERTY> 
		<PROPERTY NAME="DeassertionMask"  TYPE="q">		</PROPERTY>		
        <PROPERTY NAME="EventReadingType"  TYPE="y">		</PROPERTY>			
	    <!-- sensor type 0:threshold, 1:discrete -->
		<PROPERTY NAME="type"  TYPE="y">		</PROPERTY>
	</CLASS>
	
	<!-- 描述：升级模块信息
	所属模块：Upgrade模块(Upgrade)-->
	<CLASS NAME="Firmware" ID="130">
		<!-- 软件名称 -->
		<PROPERTY NAME="Name"  TYPE="s" ID="1">			</PROPERTY>
		<!-- 软件主备 0:备用, 1:主用 -->
		<PROPERTY NAME="IsActive"  TYPE="y">		</PROPERTY>
		<!-- 软件分类 1:MGMT firmware(BMC或HMM或RMC),2:BIOS,3:CPLD,4:Driver,5:Uboot
		     此对象还用于通过比较update.cfg的Revision和RevisionNumber来限制回退版本，
             0xFE是用于比较BMC；0xFD用于比较BIOS， 0xFC用于比较主板CPLD	-->	
		<PROPERTY NAME="Classifications" TYPE="y">	</PROPERTY>
		<!-- CompentID子类 1:内置硬盘背板CPLD升级 2:后置硬盘背板CPLD升级 0xfffffffe：不涉及
		     当Firmware对象用于限制回退版本（Classifications为0xFE/0xFD/0xFC）时，ComponentIDEx为
			 0xffffffff表示hpm的update.cfg配的扩展部件ID信息不影响限制升级判断，只要hpm的revision不小于属性RevisionNumber就可以升级
			 当ComponentIDEx为非0xffffffff的时候，update.cfg配的扩展部件ID要跟ComponentIDEx保持一致才做revison检查 -->		
		<PROPERTY NAME="ComponentIDEx" TYPE="u">	</PROPERTY>
		<!-- 软件ID -->
		<PROPERTY NAME="InstanceID"  TYPE="q">		</PROPERTY>
		<!-- 软件版本主要版本 -->
		<PROPERTY NAME="MajorVersion"  TYPE="q">	</PROPERTY>
		<!-- 软件版本次要版本 -->
		<PROPERTY NAME="MinorVersion"  TYPE="q">	</PROPERTY>
		<!-- 软件版本修订版本 -->		
		<PROPERTY NAME="RevisionNumber" TYPE="q">	</PROPERTY>
		<!-- 软件版本构建版本 -->
		<PROPERTY NAME="BuildNumber"  TYPE="q">		</PROPERTY>
		<!-- 软件版本字符串 -->		
		<PROPERTY NAME="VersionString" TYPE="s" ID="2">	</PROPERTY>
		<!-- 版本发布时间 格式：YYYY-MM-DD HH:MM:SS -->
		<PROPERTY NAME="ReleaseDate"  TYPE="s">		</PROPERTY>
		<!-- 软件发布厂商 -->
		<PROPERTY NAME="Manufacturer"  TYPE="s">	</PROPERTY>
		<!-- 软件加载位置 -->
		<PROPERTY NAME="Location"  TYPE="s">		</PROPERTY>
		<!-- 软件加载位置，整型，为了兼容已有实现，当前DFTVersion类中的UnitNum类型为u且引用本属性，UnitNum属性与Location属性
		的关系是：若UnitNum为107，则Location为U107 -->
		<PROPERTY NAME="UnitNum"  TYPE="u">		</PROPERTY>
		<!-- 软件加载准备动作 -->
		<PROPERTY NAME="PrepareAction"  TYPE="roa">	</PROPERTY>
		<!-- 软件加载完成动作 -->
		<PROPERTY NAME="FinishAction"  TYPE="roa">	</PROPERTY>
        <!-- 组件UID -->
		<PROPERTY NAME="Uid"  TYPE="s">		</PROPERTY>
        <!-- 获取切换通道信息 -->
		<PROPERTY NAME="GetSwitchAction"  TYPE="roa">		</PROPERTY>
		<METHOD NAME="SetFirmwareVersion">
			<PARAMETER TYPE="s" NAME="Version" DIR="in"/>			
		</METHOD> 
		<CLASS NAME="PeripheralFirmware">
			<PROPERTY NAME="Target" TYPE='ro'> 	 	</PROPERTY>
		</CLASS>
		<CLASS NAME="SmmFanFirmware">
			<PROPERTY NAME="UpgradeProgress" TYPE="y"> 	 	</PROPERTY>
		</CLASS>
		<CLASS NAME="CPLDFirmware">
			<!-- 是否使能CPLD自愈功能 0:不使能 1:使能 -->
			<PROPERTY NAME="ResumeEnable"  TYPE="y">	</PROPERTY>
			<!-- 自愈文件路径 -->
			<PROPERTY NAME="ResumeFilePath"  TYPE="s">	</PROPERTY>
            <!-- 备份方式 0：打在hpm包里面，1：升级时备份 -->
			<PROPERTY NAME="BackupMode"  TYPE="y">	</PROPERTY>
			<!-- 产品是否开启多形态机框单板board重映射 -->
			<PROPERTY NAME="RemapBoardIDEnable"  TYPE="y">	</PROPERTY>
			<!-- 重映射的board id值 -->
			<PROPERTY NAME="BoardIDList"  TYPE="aq">	</PROPERTY>
            <!-- 加载完成后是否立即生效的标记  0:否   1:是 -->
            <PROPERTY NAME="ActiveMode"  TYPE="y">	</PROPERTY>
            <!-- CPLD健康状态 -->
            <PROPERTY NAME="CPLDFirmwareStatus"  TYPE="y">	</PROPERTY>
            <!-- CPLD所在的部件BoardId -->
		    <PROPERTY NAME="BoardId"  TYPE="q">		</PROPERTY>
            <METHOD NAME="SetCpldValidActiveMode">
                <PARAMETER TYPE="y" NAME="ActiveMode" DIR="in"/>
            </METHOD>
		</CLASS>
		<!-- 通过BMC芯片PCIe直连的1822网卡芯片固件 -->
		<CLASS NAME="HinicFirmware">
			<!-- 持久化保存的上次固件版本信息 -->
			<PROPERTY NAME="LastVersionString" TYPE="s"></PROPERTY>
		</CLASS>
        <CLASS NAME="MCUFirmware">
			<!-- 关联的MCU升级芯片对象 -->
		    <PROPERTY NAME="RefChip" TYPE='ro'>		</PROPERTY>
		</CLASS>
	</CLASS>
	<CLASS NAME="ComponentFirmware">
		<!-- 部件在位信息 -->
		<PROPERTY NAME="Presence"  TYPE="y">	</PROPERTY>
		<!-- 部件BoardId -->
		<PROPERTY NAME="BoardId"  TYPE="u">		</PROPERTY>
		<!-- 部件槽位 区分相同BoardId的不同部件-->
		<PROPERTY NAME="Slot"  TYPE="y">		</PROPERTY>
		<!-- 部件Firmware -->
		<PROPERTY NAME="RefFirmware"  TYPE="ro">		</PROPERTY>
		<!-- 部件对应的虚拟Connector 用于部件异常，无法正常加载时手动加载XML-->
		<PROPERTY NAME="RefVirtualConnector"  TYPE="ro">		</PROPERTY>
		<!-- 部件升级状态-->
		<PROPERTY NAME="UpdateStatus"  TYPE="y">		</PROPERTY>
		<!-- 部件对应的固件的ComponentID-->
		<PROPERTY NAME="ComponentID"  TYPE="y">		</PROPERTY>
	</CLASS>
	
	<!-- 描述：升级模块信息
	所属模块：Upgrade模块(Upgrade)-->
	<CLASS NAME="Action">
		<!-- 操作的Accessor -->
		<PROPERTY NAME="Destination"  TYPE="y">	</PROPERTY>
		<!-- 写入的数据 -->
		<PROPERTY NAME="Data"  TYPE="y">		</PROPERTY>
		<METHOD NAME="SetActionData">
			<PARAMETER DIR="in" NAME="data" TYPE="y"/>
		</METHOD> 
		<CLASS NAME="VRDAction">
			<!-- VRDAction索引 -->
			<PROPERTY NAME="IndexId" TYPE="y">	</PROPERTY>
			<!-- 向VRD寄存器设置配置数据 -->
			<PROPERTY NAME="ConfigData" TYPE="roa">	</PROPERTY>
		</CLASS>
		<CLASS NAME="HPCAction"> </CLASS>
		<!-- Dft命令中需要做的一些动作，如按照一定的顺序写寄存器，所属模块:dft -->
		<CLASS NAME="DftAction">
		    <!-- ActionType 为0表示要把Data写到Destination；为1就是表示从Destination读数据 -->
			<PROPERTY NAME="ActionType" TYPE="y">	</PROPERTY>
		</CLASS>
		<CLASS NAME="CardAction"> 
			<PROPERTY NAME="Type" TYPE="y">	</PROPERTY>
			<CLASS NAME="AgentCardAction"> </CLASS>
		</CLASS>
        <!-- CondtionAction类的Data属性配置引用属性，此时需要为引用类声明SetAgentProperty方法 -->
		<CLASS NAME="ConditionAction">
			<PROPERTY NAME="VerifyEnable" TYPE="y">	</PROPERTY>
			<PROPERTY NAME="VerifyResult" TYPE="y">	</PROPERTY>
			<PROPERTY NAME="Delayms" TYPE="u">	</PROPERTY>
            <PROPERTY NAME="ActionRefObj" TYPE="ro">  </PROPERTY>
            <PROPERTY NAME="ActionMethod" TYPE="s">   </PROPERTY>
            <!-- 方法：从控转发Action到主控执行 -->
            <METHOD NAME="ActionSync">
                <PARAMETER TYPE="s" NAME="ActionObjName" DIR="in"/>
            </METHOD>
		</CLASS>
		<CLASS NAME="PcieSwitchAction"> 
			<!-- 监控特性名称 -->
			<PROPERTY NAME="Name" TYPE="s">	</PROPERTY>
			<!-- PCIE SWITCH内部寄存器偏移地址 -->
			<PROPERTY NAME="Offset" TYPE="u">	</PROPERTY>
			<PROPERTY NAME="PSWActionData" TYPE="u">	</PROPERTY>
		</CLASS>
		<CLASS NAME="PcieRetimerAction"> 
			<!-- 监控特性名称 -->
			<PROPERTY NAME="Name" TYPE="s">	</PROPERTY>
			<!-- PCIE Retimer内部寄存器偏移地址 -->
			<PROPERTY NAME="Offset" TYPE="u">	</PROPERTY>
			<PROPERTY NAME="PRTActionData" TYPE="u">	</PROPERTY>
		</CLASS>
		<CLASS NAME="HDDLocationStatus"> 
			<PROPERTY NAME="AllPDLocate" TYPE="y">	</PROPERTY>
		</CLASS>
		<CLASS NAME="ResetChipAction"> 
			<PROPERTY NAME="ResetTraget" TYPE="y">	</PROPERTY>
		</CLASS>		
        <CLASS NAME="VerifyAction"> 
			<!-- 校验预期的数据 -->
			<PROPERTY NAME="ExpectData" TYPE="y">	</PROPERTY>
			<!-- 校验源Accessor, 关联硬件寄存器 -->
			<PROPERTY NAME="VerifySource" TYPE="y">	</PROPERTY>
			<!-- 校验是不后，写入Destination清除写入的Data值 -->
			<PROPERTY NAME="ClearData" TYPE="y">	</PROPERTY>
		</CLASS>
		<CLASS NAME="SfcAction">
        	<!-- SPI Flash 升级动作，直接通过Sfc驱动执行
            继承属性：Data指定地址模式，Destination不使用
            新增属性：ChipSelect 指定Flash片选信号
            -->
			<PROPERTY NAME="ChipSelect" TYPE="y">	</PROPERTY>
		</CLASS>
	</CLASS>
	<CLASS NAME="AccessorUpdateAction">
		<!-- 操作的Accessor -->
		<PROPERTY NAME="Destination"  TYPE="*">	</PROPERTY>
		<!-- 写入的数据 -->
		<PROPERTY NAME="Data"  TYPE="*">		</PROPERTY>
		<!-- 写入数据移动的偏移 -->
		<PROPERTY NAME="ShiftBitCount" TYPE="*">	</PROPERTY>
		<!-- 写入的数据的掩码 -->
		<PROPERTY NAME="Mask" TYPE="*">	</PROPERTY>
	</CLASS>
	<CLASS NAME="ChipVrdParameterConfig">
		<!-- 0: inf   1:  Ti  infineon 与 TI 设置值时不一样 -->
		<PROPERTY NAME="ChipType" TYPE="y">	</PROPERTY>
		<!-- 参数作用域 1： CPU Core -->	
		<PROPERTY NAME="SetDomain" TYPE="y">	</PROPERTY>
		<!-- 表示部件序号 从1开始编号-->
		<PROPERTY NAME="Id" TYPE="y">	</PROPERTY>
		<!-- Vrd 参数类型； 1: 负偏 -->	
		<PROPERTY NAME="ParamType" TYPE="y" >		</PROPERTY>		
		<PROPERTY NAME="ParamValue" TYPE="*" >		</PROPERTY>
		<!-- 参数来源0:Local-不需要起线程 1:ME  2:IMU 从IMU或者ME获取的都需要起起线程，只要判断整块单板其中一个对象即可,因为IMU和ME只能存在一个-->
		<PROPERTY NAME="ParamFrom" TYPE="y"> </PROPERTY>
		<!-- ParamReadStatus 标识从远端是否读取到数据1表示正在读取,2表示读取完成,3表示读取完成但是参数无效(不需要配置) -->
		<PROPERTY NAME="ParamReadStatus" TYPE="y"> </PROPERTY>		
		<!-- 动态配置阶段标志 如果ParamFrom是2的时候，变更该属性的地方需要做掉电持久化-->
        <PROPERTY NAME="ConfigFlag" TYPE="y"> </PROPERTY>
		<!-- 参数目标值 如果ParamFrom是2的时候，变更该属性的地方需要做掉电持久化-->		
		<PROPERTY NAME="ParamTarget" TYPE="q"> </PROPERTY>
        <!-- 最小电压 如果ParamFrom是2的时候，变更该属性的地方需要做掉电持久化-->		
		<PROPERTY NAME="VMin" TYPE="q"> </PROPERTY>
		<!-- VRD电源loadline是否配置完成告警属性,当前暂时只用于装备情况下告警,正式版本只记录维护日志，避免现网引起客户误解，预留,暂时未使用 -->
		<PROPERTY NAME="ConfigStatus" TYPE="y"> </PROPERTY>		
		
        <PROPERTY NAME="PrepareAction"  TYPE="roa">	   	</PROPERTY>
        <PROPERTY NAME="FinishAction"  TYPE="roa">		</PROPERTY>
		<!-- 获取当前VRD电源寄存器实际值 -->
		<METHOD NAME="GetVrdParamInfo">
			<PARAMETER TYPE="y" NAME="Id" DIR="in"/>
			<PARAMETER TYPE="q" NAME="OutValue" DIR="out"/>
        </METHOD>
		<METHOD NAME="SetVrdParamInfo">
			<PARAMETER TYPE="y" NAME="Id" DIR="in"/>
        </METHOD>
        <METHOD NAME="SwitchLoadline">
			<PARAMETER TYPE="y" NAME="Action" DIR="in"/>
        </METHOD>		

	</CLASS>
	<CLASS NAME="VirtualWire">
		<!-- 出发条件 1:为需要动作 否则不动作 -->
		<PROPERTY NAME="Condition"  TYPE="y">	</PROPERTY>
		<!-- 操作的Accessor -->
		<PROPERTY NAME="Destination"  TYPE="y">	</PROPERTY>
		<!-- 写入的数据 -->
		<PROPERTY NAME="Data"  TYPE="y">		</PROPERTY>
		<!-- RPC复位时触发的VirtualWire -->
		<CLASS NAME="RpcResetVirtualWire">
			<!-- 写完数据后的Sleep时间，单位为ms -->
			<PROPERTY NAME="SleepTime"  TYPE="u">		</PROPERTY>
		</CLASS>
	</CLASS>
	
	<CLASS NAME="ConditionTask">
		<!-- 如果LastConditionEable为1，则只有Condition为1且Condition和LastCondition不一致的时候才将ActionData写入到ActionDestination -->
		<PROPERTY NAME="Condition"  TYPE="y">	</PROPERTY>
		<PROPERTY NAME="LastCondition"  TYPE="y">	</PROPERTY>
		<!-- 如果LastConditionEable为0，则只要Condition为1就要将ActionData写入到ActionDestination，会周期循环写入 -->
		<PROPERTY NAME="LastConditionEnable"  TYPE="y">	</PROPERTY>
		<!-- 要关联的AtomicAction对象组 -->
		<PROPERTY NAME="ActionRefObj" TYPE="roa">		</PROPERTY>
		<!-- 扫描周期，单位毫秒，间隔时间为500ms；如果写0，或者小于500ms，都按照500ms执行；如果写600ms，则按500ms执行;写1000，则间隔是1000ms；也就是除以500，取整数倍间隔时间执行 -->
		<PROPERTY NAME="Period"  TYPE="q">		</PROPERTY>
		<!-- 前置动作，日志记录前执行，关联ConditionAction类对象组 -->
		<PROPERTY NAME="BeforeAction"  TYPE="roa">	</PROPERTY>
		<!-- 记录的日志信息，为空则不记录日志 -->
		<PROPERTY NAME="LogInfo"  TYPE="s">	</PROPERTY>
		<PROPERTY NAME="LogParamRefObj"  TYPE="roa">	</PROPERTY>
		<PROPERTY NAME="LogParamRefProp"  TYPE="as">	</PROPERTY>
		<!-- 记录的日志类型，0，不记录，1执行就记录日志，2失败才记录日志 -->
		<PROPERTY NAME="LogType"  TYPE="y">	</PROPERTY>
                <!-- 记录的日志类型，0，维护日志，1运行日志，2调试日志 -->
		<PROPERTY NAME="LogFileType" TYPE="y">	</PROPERTY>
		<METHOD NAME="SetAgentProperty">	
		    <PARAMETER TYPE="s" NAME="PropertyName" DIR="in"/>	
			<PARAMETER TYPE="*" NAME="PropertyVal" DIR="in"/>	
			<PARAMETER TYPE="u" NAME="SaveOption" DIR="in"/>	
		</METHOD>
	</CLASS>
	
	<!-- 写硬件前后要额外开锁或者关锁的操作,并且失败后可以进行重试
	     对于ActionRefObj只有一个对象，失败后要连开锁/关锁一起重试
		 对于ActionRefObj有多个对象的，哪个失败就重试哪一个 -->
	<CLASS NAME="AtomicAction">
	    <!--开锁操作，关联ConditionAction对象，空表示无需开锁 -->
		<PROPERTY NAME="LockAction"  TYPE="ro"> 	</PROPERTY>
		<!--硬件操作，可关联多个ConditionAction对象 -->
		<PROPERTY NAME="ActionRefObj"  TYPE="roa"> 	</PROPERTY>
		<!--关锁操作，关联ConditionAction对象，空表示无需关锁 -->
		<PROPERTY NAME="UnLockAction"  TYPE="ro"> 	</PROPERTY>
	    <!-- 失败重试次数 -->
	    <PROPERTY NAME="RetryCount"  TYPE="y">	</PROPERTY>
	</CLASS>
		
	<!-- 数据同步 -->   
	<CLASS NAME="DataSync">
		<!-- 需要同步的类名 -->
		<PROPERTY NAME="ClassSync"  TYPE="s">	</PROPERTY>
		<!-- 类中需要同步的属性名 -->
		<PROPERTY NAME="PropSync" 	TYPE="as"> 	</PROPERTY>
		
		<!-- reset方法 -->
		<METHOD NAME="ResetDataSync">
			<PARAMETER TYPE="y" NAME="Value" DIR="in" />
		</METHOD>	
	</CLASS>
	<!-- 数据同步服务端配置 -->  
	<CLASS NAME="DataSyncServerConfig">
		<!-- 监听的网口 -->
		<PROPERTY NAME="BindedEthGroup"  TYPE="ro">	</PROPERTY>
		<!-- 监听的端口 -->
		<PROPERTY NAME="ListenedPort" 	TYPE="u"> 	</PROPERTY>
		<!-- 供远程客户端判断通信状态的方法 -->
		<METHOD NAME="TestChannelStatus">
		</METHOD>	
		<METHOD NAME="GetObjNameList">
			<PARAMETER TYPE="s" NAME="Classname" DIR="in"/>
			<PARAMETER TYPE="as" NAME="ObjectNameArray" DIR="out"/>
		</METHOD>	
		<METHOD NAME="GetSpecialObjectByte">
			<PARAMETER TYPE="s" NAME="ClassName" DIR="in"/>
			<PARAMETER TYPE="s" NAME="PropertyName" DIR="in"/>
			<PARAMETER TYPE="y" NAME="PropertyVal" DIR="in"/>
			<PARAMETER TYPE="s" NAME="ObjectName" DIR="out"/>
		</METHOD>		
	</CLASS>

	<!-- 客户端维护的远程RPC服务端信息 -->  
	<CLASS NAME="RemoteRpcInfo">
		<PROPERTY NAME="Index"  TYPE="y">	</PROPERTY>
		<!-- 远程RPC服务端的在位信息 -->
		<PROPERTY NAME="Presence"  TYPE="y">	</PROPERTY>
		<!-- 监听的网口 -->
		<PROPERTY NAME="TargetIP"  TYPE="s">	</PROPERTY>
		<!-- 监听的端口 -->
		<PROPERTY NAME="TargetPort" 	TYPE="q"> 	</PROPERTY>
		<!-- Target类型，当前包含:SMU -->
		<PROPERTY NAME="TargetType"  TYPE="s">	</PROPERTY>
		<!-- 本地用于远程RPC调用的IP地址 -->
		<PROPERTY NAME="LocalIP"  TYPE="s">	</PROPERTY>
		<!-- RPC通信状态, 0: 中断, 1：正常 -->
		<PROPERTY NAME="Status"  TYPE="y">	</PROPERTY>
	</CLASS>
	
	<!-- 分区类 -->   
	<CLASS NAME="ComputerPartition">
		<!-- 分区类型，0 PM 硬分区, 1 VM 逻辑分区 -->
		<PROPERTY NAME="Type" 	TYPE="y"> 	</PROPERTY>
		<!-- 分区类型，PM 硬分区: 1:4P, 2:8P, 3:16p, 4:24p, 5:32p -->
		<PROPERTY NAME="Mode" 	TYPE="y"> 	</PROPERTY>
		<!-- 本BMC所在硬分区内ID -->
		<PROPERTY NAME="Id" 	TYPE="y"> 	</PROPERTY>	
		<PROPERTY NAME="RHProductId" 	TYPE="u"> 	</PROPERTY>
		<METHOD NAME="GetOppInfo">
			<PARAMETER TYPE="y" NAME="PartitonMode" DIR="out" />
		</METHOD>
	</CLASS>
	
	<!-- HPC 服务器特有类 -->   
	<CLASS NAME="HPCMgmt">
		<!-- 芯片配置，NC、时钟芯片和CPLD -->
		<PROPERTY NAME="HPCActionRoa" TYPE="roa">	</PROPERTY>
		
		<!-- 获取HPCMgmt配置 -->
		<METHOD NAME="GetHPCMgmtConfig">
			<PARAMETER TYPE="y" NAME="Type" DIR="in" />
			<PARAMETER TYPE="ay" NAME="Data" DIR="out" />
		</METHOD>	
		<!-- 设置HPCMgmt配置 -->
		<METHOD NAME="SetHPCMgmtConfig">
			<PARAMETER TYPE="y" NAME="Type" DIR="in" />
			<PARAMETER TYPE="ay" NAME="Data" DIR="in" />
		</METHOD>			
		<!-- 获取Pcie Switch是否处于升级状态 -->
		<METHOD NAME="GetPCIeSWUpStatus">
			<PARAMETER TYPE="u" NAME="Type" DIR="in" />
			<PARAMETER TYPE="y" NAME="Data" DIR="out" />
		</METHOD>
		<!-- 获取LPAR DFT状态 -->
		<METHOD NAME="GetLparDFTStatus">
			<PARAMETER TYPE="y" NAME="DFTFUN" DIR="in" />
			<PARAMETER TYPE="y" NAME="Data" DIR="out" />
		</METHOD>	
		<!-- 非均等硬分区上电 -->
		<METHOD NAME="SetOPPBMCConfigNC">
			<PARAMETER TYPE="y" NAME="Methodtype" DIR="in" />
			<PARAMETER TYPE="y" NAME="Methodsubtype" DIR="in" />
			<PARAMETER TYPE="y" NAME="Subdata1" DIR="in" />
			<PARAMETER TYPE="y" NAME="Subdata2" DIR="in" />
			<PARAMETER TYPE="y" NAME="Subdata3" DIR="in" />
			<PARAMETER TYPE="y" NAME="Rate" DIR="out" />
		</METHOD>		
		<!-- 设置Raid卡的数量 -->
		<METHOD NAME="SetRaidNum">
			<PARAMETER TYPE="y" NAME="RaidCardNum" DIR="in" />
		</METHOD>
		<METHOD NAME="HPCSubPayload">
			<PARAMETER TYPE="y" NAME="Action" DIR="in" />
			<PARAMETER TYPE="y" NAME="Result" DIR="out" />
		</METHOD>			
	</CLASS>

	<!-- 上层管理软件纳管功能类 -->   
	<CLASS NAME="SystemManagerInfo" >
		<!-- 上层管理软件ID -->	
		<PROPERTY NAME="SysManagerId"  TYPE="s" >		</PROPERTY>	
		<!-- 上层管理软件Name -->	
		<PROPERTY NAME="SysManagerName"  TYPE="s" >		</PROPERTY>	
		<!-- 上层管理软件IP -->	
		<PROPERTY NAME="SysManagerIp"  TYPE="s"  >		</PROPERTY>	
		<!-- 上层管理软件Name -->	
		<PROPERTY NAME="SysManagerLockedTime"  TYPE="s"  >		</PROPERTY>			
		<!-- 方法：设置上层管理软件ID -->
		<METHOD NAME="SetSysManagerId" ID="1">
			<PARAMETER TYPE="s" NAME="SysManagerId" DIR="in"/>
		</METHOD>
		<!-- 方法：设置上层管理软件Name -->
		<METHOD NAME="SetSysManagerName" ID="2">
			<PARAMETER TYPE="s" NAME="SysManagerName" DIR="in"/>
		</METHOD>
		<!-- 方法：设置上层管理软件IP -->
		<METHOD NAME="SetSysManagerIp" ID="3">
			<PARAMETER TYPE="s" NAME="SysManagerIp" DIR="in"/>
		</METHOD>
		<!-- 方法：设置上层管理软件锁定时间 -->
		<METHOD NAME="SetSysManagerLockedTime" ID="4">
			<PARAMETER TYPE="s" NAME="SysManagerLockedTime" DIR="in"/>
		</METHOD>
		
		<!-- SMM主备同步方法 -->
		<METHOD NAME="PropertySyncMethod">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
			<PARAMETER TYPE="*" NAME="*" DIR="out"/>
		</METHOD>
	</CLASS>

	<!-- 无状态计算功能类 -->   
	<CLASS NAME="Stateless" ID="17">
		<!-- 自动发现功能使能: 1启用/0关闭 -->
		<PROPERTY NAME="Enable"  TYPE="y" ID="1" EXPORT="17">		</PROPERTY>	
		<!-- 自动发现广播网段 -->	
		<PROPERTY NAME="BroadcastNetSegment"  TYPE="s" ID="2" EXPORT="17">		</PROPERTY>	
		<!-- 自动发现广播端口 -->	
		<PROPERTY NAME="BroadcastPort"  TYPE="u" ID="3" EXPORT="17">		</PROPERTY>	

		<!-- 受控上电服务器IP -->
		<PROPERTY NAME="SysManagerIP"  TYPE="s" ID="4" EXPORT="18">		</PROPERTY>	
		<!-- 受控上电服务器端口 -->
		<PROPERTY NAME="SysManagerPort"  TYPE="u" ID="5" EXPORT="17">		</PROPERTY>
		<!-- 是否自主上电 -->
		<PROPERTY NAME="AutoPowerOn"  TYPE="y" ID="6" EXPORT="17">		</PROPERTY>

		<!-- 远程管理ID -->	
		<PROPERTY NAME="SysManagerID"  TYPE="s" ID="7" EXPORT="17">		</PROPERTY>	

		<!-- 方法：设置无状态计算状态，设置1启用/0关闭-->
		<METHOD NAME="SetEnable" ID="1">
			<PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
		</METHOD>
		<!-- 方法：设置无状态广播网段 -->
		<METHOD NAME="SetBroadcastNetSegment" ID="2">
			<PARAMETER TYPE="s" NAME="BroadcastNetSegment" DIR="in"/>
		</METHOD>
		<!-- 方法：设置无状态广播端口 -->
		<METHOD NAME="SetBroadcastPort" ID="3">
			<PARAMETER TYPE="u" NAME="BroadcastPort" DIR="in"/>
		</METHOD>
		<!-- 方法：设置受控上电配置字符串 -->
		<METHOD NAME="SetPowerOnControlString">
			<PARAMETER TYPE="s" NAME="PowerOnControlString" DIR="in"/>
		</METHOD>
		
		<!-- 方法：设置受控上电服务器IP -->
		<METHOD NAME="SetSysManagerIP" ID="4">
			<PARAMETER TYPE="s" NAME="SysManagerIP" DIR="in"/>
		</METHOD>
		
		<!-- 方法：设置受控上电服务器端口 -->
		<METHOD NAME="SetSysManagerPort" ID="5">
			<PARAMETER TYPE="u" NAME="SysManagerPort" DIR="in"/>
		</METHOD>
		
		<!-- 方法：设置是否自主上电 -->
		<METHOD NAME="SetAutoPowerOn" ID="6">
			<PARAMETER TYPE="y" NAME="PowerOnPermit" DIR="in"/>
		</METHOD>
		
		<!-- 方法：设置1允许/0不允许上电 -->
		<METHOD NAME="SetPowerOnPermit">
			<PARAMETER TYPE="y" NAME="PowerOnPermit" DIR="in"/>
		</METHOD>
		
		<!-- 方法：设置远程管理ID -->
		<METHOD NAME="SetSysManagerID" ID="7">
			<PARAMETER TYPE="s" NAME="SysManagerID" DIR="in"/>
		</METHOD>
	</CLASS>
	
	<CLASS NAME="SatelliteController"> 
        	<!-- 标识一个远程智能模块-->
        	<!--指定远程智能模块-->
		<PROPERTY NAME="IPMIChannel" TYPE='ro'>        </PROPERTY>
		<!-- 通讯状态，0: 中断，1：正常 -->
		<PROPERTY NAME="Status" TYPE='y'>              </PROPERTY>
	</CLASS>
	
	<CLASS NAME="PeripheralFan">  
		<PROPERTY NAME="Id" TYPE='y'>                    </PROPERTY>
		<PROPERTY NAME="Model" TYPE='y'>                 </PROPERTY>
		<PROPERTY NAME="Type" TYPE='s'>                 </PROPERTY>
		<PROPERTY NAME="Target" TYPE='ro'>               </PROPERTY>
        <!-- 发送远程风扇信息的通道类型 0:发送给cooling 1:发送给cooling_smm_std -->
		<PROPERTY NAME="ChannelType" TYPE='y'>          </PROPERTY>
        	<!-- 方法：设置风扇转速-->	
		<METHOD NAME="SetFanLevel">
			<PARAMETER TYPE="y" NAME="Level" DIR="in"/>
		</METHOD>
	</CLASS>


	<CLASS NAME="PeripheralSensor">         
		<PROPERTY NAME="Target" TYPE='ro'>                 </PROPERTY>
		<PROPERTY NAME="SensorNumber" TYPE='y'>            </PROPERTY>
		<PROPERTY NAME="Reading" TYPE='q'>                 </PROPERTY>
		<PROPERTY NAME="AssertStatus" TYPE='q'>            </PROPERTY>
	</CLASS>

	<!-- Pcie root port映射信息 -->
	<CLASS NAME="PcieRootPortMap">
		<!-- 扣卡设备类型，MEZZ卡、PCI-E标卡，与IPMI命令Get Device Info定义对应 11=mezz卡 -->
		<PROPERTY NAME="CardType" TYPE="y">		</PROPERTY>
		<!-- 扣卡设备编号 -->
		<PROPERTY NAME="CardNum" TYPE="y">		</PROPERTY>
		<!-- Port Number，从1开始编号 -->
		<PROPERTY NAME="PortNumber" TYPE="y">		</PROPERTY>
		<!-- PCIE连接类型，0-直连，1-交叉 -->
		<PROPERTY NAME="ConnectType" TYPE="y">		</PROPERTY>
		<!-- Bus Number -->
		<PROPERTY NAME="BusNum"  TYPE="y">		</PROPERTY>
		<!-- Device Number-->
		<PROPERTY NAME="DevNum"  TYPE="y">		</PROPERTY>
		<!-- Function Number -->
		<PROPERTY NAME="FunNum"  TYPE="y">		</PROPERTY>
	</CLASS>	
	
	<!-- SignalMonitor 硬件信号监控类 -->
	<CLASS NAME="SignalMonitor">
		<!-- 监控信号名 -->
		<PROPERTY NAME="Name" TYPE="s">				</PROPERTY>
		<!-- 产生故障时打印信息 -->
		<PROPERTY NAME="AssertInfo" TYPE="s">		</PROPERTY>
		<!-- 故障消失时打印信息 -->
		<PROPERTY NAME="DeassertInfo" TYPE="s">		</PROPERTY>
		<!-- 当前值的source, 关联到accessor -->
		<PROPERTY NAME="ValueSource" TYPE="u">		</PROPERTY>
		<!-- 什么时机扫描,0为BMC运行即检, 1为到M4系统上电才检 -->
		<PROPERTY NAME="ScanWhen"  TYPE="y">		</PROPERTY>
		<!-- 清使能，是否需要清掉状态 -->
		<PROPERTY NAME="EnableClear"  TYPE="y">		</PROPERTY>
		<!-- 为什么值时清  -->
		<PROPERTY NAME="ClearStatus"  TYPE="u">		</PROPERTY>
		<!-- 用什么值清状态 -->
		<PROPERTY NAME="ClearValue"  TYPE="u">		</PROPERTY>
		<!-- 默认值(正常值) -->
		<PROPERTY NAME="DefaultValue"  TYPE="u">	</PROPERTY>
        <!-- 信息打印级别  0：INFO 1：WARN 2：ERROR -->
		<PROPERTY NAME="LogLevel"  TYPE="y">	</PROPERTY>
		
        <CLASS NAME="PowerSignalMonitor">
			<PROPERTY NAME="FaultFlag" TYPE="y">	</PROPERTY>

			<PROPERTY NAME="RecordFaultFlag" TYPE="y">	</PROPERTY>
		
			<PROPERTY NAME="ErrorCode" TYPE="y">	</PROPERTY>
		
			<PROPERTY NAME="EventMonitorMask1" TYPE="u">	</PROPERTY>
		
			<PROPERTY NAME="EventMonitorMask2" TYPE="u">	</PROPERTY>
		
			<PROPERTY NAME="EventMonitorMask3" TYPE="u">	</PROPERTY>
		
			<PROPERTY NAME="EventMonitorMask4" TYPE="u">	</PROPERTY>
        </CLASS>

		<CLASS NAME="AgentSignalMonitor"> </CLASS>
		<CLASS NAME="ExtendBoardSignalMonitor"> </CLASS>
	</CLASS>
	<CLASS NAME="ThresholdSensorMonitor">
		<!-- 关联的传感器 -->
		<PROPERTY NAME="RefSensor" TYPE="ro">		</PROPERTY>
		<!-- 正偏差百分比 -->
		<PROPERTY NAME="PositiveDeviation"  TYPE="y">	</PROPERTY>
		<!-- 负偏差百分比 -->
		<PROPERTY NAME="NegativeDeviation"  TYPE="y">	</PROPERTY>
	</CLASS>	

	<!-- SensitiveInfo 敏感信息过滤类 -->
	<CLASS NAME="SensitiveInfo">
		<!-- 监控信号名 -->
		<PROPERTY NAME="ClassName" TYPE="s">				</PROPERTY>
		<!-- 产生故障时打印信息 -->
		<PROPERTY NAME="PropertyName" TYPE="s">		</PROPERTY>
	</CLASS>
	
	<!-- SecurityModule 安全模块 -->
	<CLASS ID="55" NAME="SecurityModule">
		<!-- 在位情况 -->
		<PROPERTY NAME="Presence" TYPE="y" ID="1" >			</PROPERTY>
		<!-- 自检结果 0 fail; 1 pass-->
		<PROPERTY NAME="SelfTestResult" TYPE="y" ID="2" EXPORT="17">	</PROPERTY>
		<!-- 协议类型TPM/TCM -->
		<PROPERTY NAME="SpecificationType" TYPE='s' ID="3" EXPORT="17">				</PROPERTY>
		<!-- 厂商名称 -->
		<PROPERTY NAME="ManufacturerName" TYPE="s" ID="4" EXPORT="17">		</PROPERTY>
		<!-- 规范版本 -->
		<PROPERTY NAME="SpecificationVersion" TYPE="s" ID="5" EXPORT="17">	</PROPERTY>
		<!-- 厂商固件版本 -->
		<PROPERTY NAME="ManufacturerVersion" TYPE="s" ID="6" EXPORT="17">	</PROPERTY>
		
		<!-- 方法：设置SelfTestResult-->	
		<METHOD NAME="SetSelfTestResult" ID="2">
			<PARAMETER TYPE="y" NAME="SelfTestResult" DIR="in"/>
		</METHOD>
		<!-- 方法：设置SpecificationType-->	
		<METHOD NAME="SetSpecificationType" ID="3">
			<PARAMETER TYPE="s" NAME="type" DIR="in"/>
		</METHOD>
		<!-- ManufacturerName-->	
		<METHOD NAME="SetManufacturerName" ID="4">
			<PARAMETER TYPE="s" NAME="manufacturer" DIR="in"/>
		</METHOD>
		<!-- 方法：设置SpecificationVersion-->	
		<METHOD NAME="SetSpecificationVersion" ID="5">
			<PARAMETER TYPE="s" NAME="version" DIR="in"/>
		</METHOD>
		<!-- ManufacturerVersion-->	
		<METHOD NAME="SetManufacturerVersion" ID="6">
			<PARAMETER TYPE="s" NAME="version" DIR="in"/>
		</METHOD>
	</CLASS>

	<!-- SensorCategory 传感器分类(阿里OEM) -->
	<CLASS NAME="SensorCategory">
		<!-- 类型 -->
		<PROPERTY NAME="Category" TYPE="y">		</PROPERTY>
		<!-- 偏移 -->
		<PROPERTY NAME="Offset" TYPE='y'>		</PROPERTY>
		<!-- 数值 -->
		<PROPERTY NAME="Value" TYPE="d">		</PROPERTY>
		<!-- 传感器InnerName，用作与ThresholdSensor或DiscreteSensor对象匹配的key值 -->
        <PROPERTY NAME="InnerName" TYPE="s">		</PROPERTY>
	</CLASS>

    <!--描述：传感器属性自定义配置类，用于传感器信息定制 --> 
    <CLASS NAME="SensorOemConfig">
        <!-- 传感器内部名称，用于与传感器对象一一对应，最大32 btyes -->
        <PROPERTY NAME="InnerName" TYPE="s">		</PROPERTY>
        <!-- 传感器真实名称 -->
        <PROPERTY NAME="SensorName" TYPE="s">		</PROPERTY>
        <!-- 传感器号，高字节： 01h - 表示低字节为定制的传感器号， 00h - 表示传感器号不定制 -->        
        <PROPERTY NAME="Number" TYPE="q"> 		        </PROPERTY>
        <!-- 告警掩码，高两字节： 0001h - 表示低两字节为定制告警掩码， 0000h - 表示告警掩码不定制 -->          
        <PROPERTY NAME="AssertionMask" TYPE="u">		</PROPERTY>
        <!-- 解除告警掩码，高两字节： 0001h - 表示低两字节为定制的解除告警掩码， 0000h - 表示解除告警掩码不定制 -->          
        <PROPERTY NAME="DeassertionMask" TYPE="u">		</PROPERTY>
        <!-- 告警阈值读写掩码，高两字节： 0001h - 表示低两字节为定制的告警阈值读写掩码， 0000h - 表示告警阈值读写掩码不定制 -->          
        <PROPERTY NAME="DiscreteReadingMask" TYPE="u">	</PROPERTY>
        <!-- 以下为连续传感器告警阈值，离散传感器保持默认值，高字节： 01h - 表示低字节为定制的阈值， 00h - 表示阈值不定制 -->        
        <PROPERTY NAME="UpperNonrecoverable" TYPE='q'>      </PROPERTY>		
        <PROPERTY NAME="UpperCritical" TYPE='q'>            </PROPERTY>		
        <PROPERTY NAME="UpperNoncritical" TYPE='q'>         </PROPERTY>		
        <PROPERTY NAME="LowerNonrecoverable" TYPE='q'>      </PROPERTY>		
        <PROPERTY NAME="LowerCritical" TYPE='q'>            </PROPERTY>		
        <PROPERTY NAME="LowerNoncritical" TYPE='q'>         </PROPERTY>		
    </CLASS > 
    
    <CLASS NAME="PortMgnt">
		<!-- 端口编号 -->
		<PROPERTY NAME="PortNo" TYPE="y">				</PROPERTY>
		<!-- 目的槽位号 -->
		<PROPERTY NAME="DstSlot" TYPE="y">			</PROPERTY>
		<!-- 目的端口号 -->
		<PROPERTY NAME="DstPort" TYPE="y">			</PROPERTY>
		<!-- 端口丝印 -->
		<PROPERTY NAME="SilkText" TYPE="s">				</PROPERTY>
		<!-- 端口的上光模块/DAC线缆的在位状态，CPLD获取，0为不在位，1为在位 -->
		<PROPERTY NAME="Present" TYPE="y">				</PROPERTY>
		<!-- 链路状态，0：link down;1:link up ,还需要写CPLD进行点灯-->
		<PROPERTY NAME="LinkStatus" TYPE="y">		</PROPERTY>
		<!-- 链路状态，具体链接状态信息-->
		<PROPERTY NAME="SubLinkStatus" TYPE="y">		</PROPERTY>
		<!-- 端口方向，0:对外，面板端口 1:对内，背板端口 -->
		<PROPERTY NAME="Direction" TYPE="y">		</PROPERTY>
	</CLASS>
	
	<!-- Phy的端口管理类 -->
	<CLASS NAME="PortAdapter">
		<!-- 是否为下电升级 -->
		<PROPERTY NAME="IsPowerOffUpgrade" TYPE="y">				</PROPERTY>
		<!-- 端口编号 -->
		<PROPERTY NAME="PortNo" TYPE="y">				</PROPERTY>
		<!-- 端口的phy地址 -->
		<PROPERTY NAME="PhyAddr" TYPE="y">		</PROPERTY>
		<!-- 端口丝印 -->
		<PROPERTY NAME="SilkText" TYPE="s">				</PROPERTY>
		<!-- 传输器介质类型:; 0:线缆；1:光纤，从eeprom地址A0中获取-->
		<PROPERTY NAME="TransceiverMediaCatagory" TYPE="y">		</PROPERTY>
		<!-- 关联地址为A0的eeprom，eeprom大小为255byte，包含基本信息:厂商信息等 -->
		<PROPERTY NAME="StorageEepromA0" TYPE="s">				</PROPERTY>
		<!-- 关联地址为A2的eeprom ，eeprom大小为255byte，包含告警和实时数据等-->
		<PROPERTY NAME="StorageEepromA2" TYPE="s">		</PROPERTY>
		<!-- 端口的上光模块/DAC线缆的在位状态，CPLD获取，0为不在位，1为在位 -->
		<PROPERTY NAME="Present" TYPE="y">				</PROPERTY>
		<!-- 端口的上光模块的健康状态，StorageEepromA2中获取 -->
		<PROPERTY NAME="Health" TYPE="y">		</PROPERTY>
		<!-- 链路状态，0：link down;1:link up ,还需要写CPLD进行点灯-->
		<PROPERTY NAME="LinkStatus" TYPE="y">		</PROPERTY>
		<!-- Port升级情况，0：成功； 1：失败-->
		<PROPERTY NAME="UpgradeStatus" TYPE="y">	</PROPERTY>	
		<!-- 获取PHY端口制造信息-->	
		<METHOD NAME="GetManufactureInfo">
			<PARAMETER TYPE="s" NAME="VendorName" DIR="out"/>
			<PARAMETER TYPE="s" NAME="VendorPN" DIR="out"/>
			<PARAMETER TYPE="s" NAME="VendorSN" DIR="out"/>
			<PARAMETER TYPE="s" NAME="VendorOUI" DIR="out"/>
			<PARAMETER TYPE="s" NAME="VendorREV" DIR="out"/>
			<PARAMETER TYPE="s" NAME="Date" DIR="out"/>
			<PARAMETER TYPE="s" NAME="T_Code" DIR="out"/>
		</METHOD>
		<!-- 获取PHY端口实时器件信息-->	
		<METHOD NAME="GetHardwareStatus">
			<PARAMETER TYPE="q" NAME="Temperature" DIR="out"/>
			<PARAMETER TYPE="q" NAME="Vcc" DIR="out"/>
			<PARAMETER TYPE="q" NAME="TxBias" DIR="out"/>
			<PARAMETER TYPE="q" NAME="TxPower" DIR="out"/>
			<PARAMETER TYPE="q" NAME="RxPower" DIR="out"/>
		</METHOD>
	
	    <CLASS NAME="MMPortOtmInfo">
		    <!-- 端口状态，1：关闭;0:打开 ,从cpld寄存器读取-->
		    <PROPERTY NAME="PortDisable" TYPE="y">		</PROPERTY>
		    <METHOD NAME="SetPortEnableState">
			    <PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
		    </METHOD> 
	    </CLASS>
	</CLASS>
	<!-- Phy的操作管理类 -->
	<CLASS NAME="PHYMgnt">
		<!-- 操作类型 
		ENABLE_BROADCAST_FRIMWAR    =  1, /* CPLD使能广播加载Frimware */
		DISABLE_BROADCAST_FRIMWARE  =  2, /* CPLD去使能广播加载Frimware */
		PHY_RESET                   =  3, /* 对PHY进行复位 */
		SWITCH_TO_XFI               =  4, /* 切换到系统侧 */
		SWITCH_TO_SFI               =  5, /* 切换到线路侧 */
		GET_VERSION                 =  6, /* 查询版本 */
		-->
		<PROPERTY NAME="OperateType" TYPE="q">				</PROPERTY>
		<!-- PHY地址 -->
		<PROPERTY NAME="PhyAddr" TYPE="y">		</PROPERTY>
		<!-- 关联的Accessor -->
		<PROPERTY NAME="RegisterAddr" TYPE="q">				</PROPERTY>
		<!-- 对于写操作为写入寄存器中的值；对于读操作，存放读回来的值 -->
		<PROPERTY NAME="RegisterValue" TYPE="q">		</PROPERTY>
		<!-- 读操作时的期望值,如查询link状态，归一不同PHY link表示不一样的情况；写操作此属性无效 -->
		<PROPERTY NAME="ExpectValue" TYPE="q">		</PROPERTY>
	</CLASS>
	
	<!-- Phy的基本信息管理类 -->
	<CLASS NAME="PHYInfo">
		<!-- phy的编号 -->
		<PROPERTY NAME="Number" TYPE="y">				</PROPERTY>
		<!-- PHY的状态，0表示健康，1表示不健康 -->
		<PROPERTY NAME="Status" TYPE="y">		</PROPERTY>
		<!-- 文件系统中的Frimware的版本 -->
		<PROPERTY NAME="FWVersion" TYPE="q">				</PROPERTY>
		<!-- 当前支持的媒质类型版本
		    00h：10G SFP+多模光模块（10GBASE-SR）
            01h：10G SFP+单模光模块（10GBASE-LR）
            02h：10G 有源DAC线缆（10G Active cabel）
            03h：10G 无源DAC线缆（10G Passive Cable）
			04h：GE 双绞线线缆（1000BASE-T）
			05h: GE SFP+多模光模块（1000BASE-SX）
			06h: GE SFP+单模光模块（1000BASE-LX）-->
		<PROPERTY NAME="SupportedMediaType" TYPE="ay">		</PROPERTY>
	</CLASS>
	
	<!-- PHY firmware升级管理类 -->
	<CLASS NAME="PHYUpgradeMgnt" ID="109">
		<!-- SMM槽位号信息，一个SMM对应一个节点 -->
		<PROPERTY NAME="SMMSlot" TYPE="y" ID="1">			</PROPERTY>
		<!-- 升级PHY firmware的触发条件，1允许触发 -->
		<PROPERTY NAME="Condition" TYPE="y" ID="2">			</PROPERTY>
	</CLASS>	
	
	<!-- 后插板管理类 -->
	<CLASS NAME="SwitchMgnt">
		<!-- 表示对内提供端口数 -->
		<PROPERTY NAME="SlotNum" TYPE="y">		</PROPERTY>
		<!-- 表示对外提供端口数 -->
		<PROPERTY NAME="PortNum" TYPE="y">		</PROPERTY>
	</CLASS>
	
	<CLASS NAME="SyslogConfig" ID="63">
		<!-- 远程syslog使能状态 0:禁用 1:启用-->
		<PROPERTY NAME="EnableState" TYPE="y" ID="1" EXPORT="17">	</PROPERTY>
		<!-- syslog消息格式 0:自定义格式 1:RFC3164格式-->
		<PROPERTY NAME="MsgFormat" TYPE="y" ID="7" EXPORT="17">	</PROPERTY>
		<!--  主机标识 0x1:序列号 0x2:资产标签 0x3:主机名  -->
		<PROPERTY NAME="MsgIdentity" TYPE="u" ID="2" EXPORT="17">	</PROPERTY>
		<!-- 事件上报级别  bit3:紧急、bit2:严重、bit1:轻微、bit0正常 -->
		<PROPERTY NAME="MsgSeverity" TYPE="u" ID="3" EXPORT="17">	</PROPERTY>
		<!-- HOST证书路径 -->
		<PROPERTY NAME="HostCertPath" TYPE="s">	</PROPERTY>
		<!-- Client证书路径 -->
		<PROPERTY NAME="ClientCertPath" TYPE="s">	</PROPERTY>
		<!-- authentication type:单向:1、双向:2 -->
		<PROPERTY NAME="AuthType" TYPE="y" ID="6" EXPORT="17">	</PROPERTY>
		<!-- 消息协议类型 BSD:1 IETF:2  -->
		<PROPERTY NAME="MsgProtocol" TYPE="y" ID="4" EXPORT="17">	</PROPERTY>
		<!-- 网络传输协议类型 UDP:1 TCP:2 TLS:3 -->
		<PROPERTY NAME="NetProtocol" TYPE="y" ID="5" EXPORT="17">	</PROPERTY>
		<!-- 起始时间 -->
		<PROPERTY NAME="RootStartTime" TYPE="s">		</PROPERTY>	
		<!-- 过期时间 -->
		<PROPERTY NAME="RootExpirTime"  TYPE="s">		</PROPERTY>
		<!-- 起始时间 -->
		<PROPERTY NAME="ClientStartTime" TYPE="s">		</PROPERTY>	
		<!-- 过期时间 -->
		<PROPERTY NAME="ClientExpirTime"  TYPE="s">		</PROPERTY>
		<!-- 证书CRL校验是否开启-->
		<PROPERTY NAME="CRLVerificationEnabled"  TYPE="y">		</PROPERTY>
		<!-- 证书CRL起始时间-->
		<PROPERTY NAME="CRLStartTime"  TYPE="s">	</PROPERTY>
		<!-- 证书CRL过期时间-->
		<PROPERTY NAME="CRLExpireTime"  TYPE="s">	</PROPERTY>
		
		<METHOD NAME="SetEnableState" ID="1">
			<PARAMETER TYPE="y" NAME="EnableState" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetMsgFormat" ID="7">
			<PARAMETER TYPE="y" NAME="MsgFormat" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetMsgIdentity" ID="2">
			<PARAMETER TYPE="u" NAME="MsgIdentity" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetMsgSeverity" ID="3">
			<PARAMETER TYPE="u" NAME="MsgSeverity" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetAuthType" ID="6">
			<PARAMETER TYPE="y" NAME="AuthType" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetMsgProtocol" ID="4">
			<PARAMETER TYPE="y" NAME="MsgProtocol" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetNetProtocol" ID="5">
			<PARAMETER TYPE="y" NAME="NetProtocol" DIR="in"/>
		</METHOD>
		<METHOD NAME="ImportCert">
			<PARAMETER DIR="in"  NAME="Type"   TYPE="y"/>
			<PARAMETER DIR="in"  NAME="CertPath"   TYPE="s"/>
			<PARAMETER DIR="in"  NAME="CertPW"   TYPE="s"/>
        </METHOD>
		<!-- 方法：查询LDAP证书状态 -->
		<METHOD NAME="GetCertStatus">
			<PARAMETER DIR="in"  NAME="Type"   TYPE="y"/>
			<PARAMETER DIR="out" NAME="Status" TYPE="y"/>
        </METHOD>
		<!-- 方法：查询LDAP信息 -->
		<METHOD NAME="GetCertInfo">
			<PARAMETER DIR="in" NAME="Type" TYPE="y"/>
			<PARAMETER DIR="out" NAME="IssueBy" TYPE="s"/>
			<PARAMETER DIR="out" NAME="IssueTo" TYPE="s"/>
			<PARAMETER DIR="out" NAME="StartTime" TYPE="s"/>
			<PARAMETER DIR="out" NAME="EndTime" TYPE="s"/>
			<PARAMETER DIR="out" NAME="Serial" TYPE="s"/>
			<PARAMETER DIR="out" NAME="SigAlgo" TYPE="s"/>
			<PARAMETER DIR="out" NAME="KeyUsage" TYPE="s"/>
			<PARAMETER DIR="out" NAME="KenLen" TYPE="u"/>									
        </METHOD>

		<!-- 方法：导入CRL文件-->
		<METHOD NAME="ImportCRL">
			<PARAMETER DIR="in"  NAME="FilePath"   TYPE="s"/>
        </METHOD>

		<!-- 方法：删除CRL文件-->
		<METHOD NAME="DeleteCRL">
        </METHOD>
        
        <METHOD NAME="PropertySyncMethod">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		    <PARAMETER TYPE="*" NAME="*" DIR="out"/>
        </METHOD>
        <METHOD NAME="CertInfoPropertySyncMethod">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		    <PARAMETER TYPE="*" NAME="*" DIR="out"/>
        </METHOD>
	</CLASS>
	
	<CLASS NAME="SyslogItemCfg" ID="64">
		<!-- 多个服务器配置索引值 base 0-->
		<PROPERTY NAME="Index" TYPE="y" ID="1" KEY="1">	</PROPERTY>
		<!-- 远程syslog指定服务器使能状态 -->
		<PROPERTY NAME="EnableState" TYPE="y" ID="2" EXPORT="17">	</PROPERTY>
		<!-- 日志类型 bit0:操作日志 bit1:安全日志 bit2:系统事件-->
		<PROPERTY NAME="LogSrcMask" TYPE="u" ID="3" EXPORT="17">	</PROPERTY>
		<!-- 目的地址 ipv4 ipv6 FQDN -->
		<PROPERTY NAME="DestAddr" TYPE="s" ID="4" EXPORT="17">	</PROPERTY>
		<!-- 目的端口 -->
		<PROPERTY NAME="DestPort" TYPE="u" ID="5" EXPORT="17">	</PROPERTY>
        <!-- 表示DestAddr当前是否可以正确解析为IP地址 -->
        <PROPERTY NAME="DestAddrValid" TYPE="u"></PROPERTY>
		<!-- 触发test动作,每次写1只产生一次test动作 -->
		<PROPERTY NAME="TestTrigger" TYPE="y">	</PROPERTY>
		<METHOD NAME="SetEnableState" ID="2">
			<PARAMETER TYPE="y" NAME="EnableState" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetDestAddr" ID="4">
			<PARAMETER TYPE="s" NAME="DestAddr" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetDestPort" ID="5">
			<PARAMETER TYPE="u" NAME="DestPort" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetTestTrigger">
			<PARAMETER TYPE="y" NAME="TestTrigger" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetLogSrcMask" ID="3">
			<PARAMETER TYPE="u" NAME="LogSrcMask" DIR="in"/>
		</METHOD>
        <METHOD NAME="PropertySyncMethod">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		    <PARAMETER TYPE="*" NAME="*" DIR="out"/>
		</METHOD>
	</CLASS>

    <!-- 定义敏感文件相关操作的类 -->
    <CLASS NAME="UploadSensitiveFile">
        <PROPERTY NAME="MasterKeyId" TYPE="u"></PROPERTY>
        <!-- 方法:将内存中的明文数据加密并保存成文件 -->
        <METHOD NAME="EncryptFileData">
            <!-- 待加密的明文数据 -->
            <PARAMETER TYPE="ay" NAME="PlainText" DIR="in"/>
            <!-- 指定加密后保存的文件路径 -->
            <PARAMETER TYPE="s" NAME="FilePath" DIR="in"/>
        </METHOD>
        <!-- 方法:更新主秘钥套件 -->
        <METHOD NAME="UpdateCiphertext">
            <!-- 新的主秘钥套件Id -->
            <PARAMETER DIR="in" NAME="NewKeyId" TYPE="u"/>
        </METHOD>
    </CLASS>
    
    <!-- 文件传输类 -->
    <CLASS NAME="TransferFile">
        <!-- 文件传输标志位 为1表示正在传输  -->
        <PROPERTY NAME="IsTransfering" TYPE="y">           </PROPERTY>
        <!-- 方法：启动文件传输 -->
		<METHOD NAME="InitialFileTransfer">
			<PARAMETER TYPE="s" NAME="URL" DIR="in"/>
			<PARAMETER TYPE="s" NAME="SessionId" DIR="in"/>
	    </METHOD>
		<!-- 方法：获取传输状态 -->
		<METHOD NAME="GetTransferStatus">
			<PARAMETER TYPE="i" NAME="Status" DIR="out"/>
                </METHOD>
		<!-- 方法：获取文件指定权限 -->
		<METHOD NAME="GetFileAuthString">
			<PARAMETER TYPE="s" NAME="URL" DIR="in"/>
                        <PARAMETER TYPE="s" NAME="AuthString" DIR="out"/>
                </METHOD>        
    </CLASS>
	
	<!-- 文件传输文件配置信息类 -->
	<CLASS NAME="TransferFileInfo">
        <!-- 文件ID 从0开始，最大值是255 -->
        <PROPERTY NAME="ID" TYPE="y">           </PROPERTY>       
        <!-- 文件名称 字符串  -->
        <PROPERTY NAME="FileName" TYPE="s">     </PROPERTY>
        <!-- 文件路径 文件保存到BMC上的绝对路径，包括文件名，在文件上传时使用  -->
	<PROPERTY NAME="FilePath" TYPE="s">     </PROPERTY>
        <!-- 文件下载标志 1表示可以下载 0表示不可以下载  -->
	<PROPERTY NAME="Download" TYPE="y">     </PROPERTY>
        <!-- 文件上传标志 1表示可以上传 0表示不可以上传  -->
	<PROPERTY NAME="Upload" TYPE="y">       </PROPERTY>
        <!-- 文件最大长度，建议不超过50M  -->
        <PROPERTY NAME="Maxlength" TYPE="u">    </PROPERTY>
        <!-- 文件更新标志 文件下载到/tmp目录后本标志加一 通知相关进程处理下载的文件  -->
        <PROPERTY NAME="UpdateFlag" TYPE="u">   </PROPERTY>
        <!-- 文件权限，引用用户组admin的权限值    -->
        <PROPERTY NAME="FileAuth" TYPE="y">   </PROPERTY>
    </CLASS>  

	<CLASS NAME="DiskSlotInfo">
        <!--在本硬盘背板上的独立编号，用于指定该背板上的槽位号，与硬盘丝印号无关 -->
        <PROPERTY NAME="OwnSlotId" TYPE="y">           </PROPERTY>       
        <!--在位信息，引用ssd connector和hdd connector的表达式的值-->
        <PROPERTY NAME="Present" TYPE="y">     </PROPERTY>
	<PROPERTY NAME="PlaneId" TYPE="y">     </PROPERTY>
    </CLASS> 
	
	<CLASS NAME="CLIBlackList">
		<PROPERTY NAME="CmdList" TYPE="as">		</PROPERTY>
	</CLASS >
	
	<!-- BIOS事件配置 -->
	<CLASS NAME="BIOSEvent">
		<!-- 传感器类型 -->
		<PROPERTY NAME="SensorType" TYPE="y">			</PROPERTY>	
		<!-- 事件读数类型 预留-->
		<PROPERTY NAME="EventReadingType" TYPE="y">		</PROPERTY>	
		<!-- event data (data4 无用)(data3)(data2)(data1)-->
        <PROPERTY NAME="EventData" TYPE="u">			</PROPERTY>
	</CLASS>
	
	
	<!-- 语言配置 -->
	<CLASS NAME="Language" ID="71">
		<!-- 是否支持事件多语言   0 不支持; 1 支持 -->
		<PROPERTY NAME="EventLangSupport" TYPE="y" ID="1">			</PROPERTY>	
		<!-- 事件多语言版本 -->
		<PROPERTY NAME="EventLangVersion" TYPE="s" ID="2">			</PROPERTY>	
		<!-- 界面(web等)多语言版本 -->
		<PROPERTY NAME="InterfaceLangVersion" TYPE="s" ID="3">			</PROPERTY>	
		<!-- 所支持的语言列表，默认只支持英文"en", 用于语言包支持开通和定制化, 可设置"en,zh,ja,xx" -->
		<PROPERTY NAME="SupportedLanguage" TYPE="s" ID="4">			</PROPERTY>	
	</CLASS>
	
	<!-- 事件配置 -->
	<CLASS NAME="EventConfiguration" ID="72">
		<!-- 版本 -->
		<PROPERTY NAME="Version" TYPE="s" ID="1">			</PROPERTY>
		<!-- 告警优化的起始版本 -->
		<PROPERTY NAME="BaseVersion" TYPE="s">				</PROPERTY>			
		<!-- 最近上报给管理板的事件序号，不需要复位或掉电持久化 -->
		<PROPERTY NAME="IPMIEventSequence" TYPE="q" ID="2">			</PROPERTY>	
		<!-- 扫描周期分组, 当前最多5个扫描线程(周期) 50 500 1000-->
		<PROPERTY NAME="ScanCycleArray" TYPE="au">			</PROPERTY>	
		<!-- 支持最大的事件记录条数 -->
		<PROPERTY NAME="MaxEventNum" TYPE="u">			</PROPERTY>	
		<!-- 当前记录的事件条数 -->
		<PROPERTY NAME="CurEventNum" TYPE="u">			</PROPERTY>
		<!-- 新旧版本兼容性，是否对旧版本中的sel日志进行了同步，1:已同步，0:未同步 -->
		<PROPERTY NAME="SelSync" TYPE="y">			</PROPERTY>
		<!-- 方法：获取文件指定权限 -->
		<METHOD NAME="SetSelSync">
			<PARAMETER TYPE="y" NAME="flag" DIR="in"/>
		</METHOD> 	
        <!-- 方法：设置整框掉电sel事件 -->
		<METHOD NAME="SetBoardPowerDropMntr">	
		</METHOD>
        <METHOD NAME="PostEventWithParam"> <!-- 附带参数的事件生成方法 -->
            <PARAMETER TYPE="s" NAME="EventObjectName" DIR="in"/>
            <PARAMETER TYPE="y" NAME="State" DIR="in"/>
            <PARAMETER TYPE="as" NAME="EventDes" DIR="in"/>
        </METHOD>
		<METHOD NAME="PostEvent">	
		<PARAMETER TYPE="s" NAME="EventObjectName" DIR="in"/>
		<PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>
		<METHOD NAME="PostEvengMsgToSensor">	
		<PARAMETER TYPE="ay" NAME="IPMIEventMsg" DIR="in"/>
		<PARAMETER TYPE="y" NAME="IpmbAddr" DIR="in"/>
		<PARAMETER TYPE="ay" NAME="EventMsgData" DIR="in"/>
		</METHOD>
	</CLASS>
	
	<!-- 事件信息 -->
	<CLASS NAME="EventInformation" ID="73">
		<!-- 使能, 0: disable; 1: enable -->
		<PROPERTY NAME="Enable" TYPE="y" ID="1">		</PROPERTY>
		<!-- 事件类型, 0:系统事件(包括SEL和事件), 1:维护事件; 2:运行事件; 3:装备事件; -->
		<PROPERTY NAME="EventType" TYPE="y" ID="2">	</PROPERTY>
		<!-- 系统事件（故障事件）、装备事件级别, 0:ok; 1:minor; 2:major; 3:critical。 维护事件、运行事件级别：0: info(对应ok、minor); 1: warning(对应major); 2：error(对应critical) -->
		<PROPERTY NAME="Severity" TYPE="y" ID="3">	</PROPERTY>
		<!-- 事件产生时的描述 -->
		<PROPERTY NAME="Description" TYPE="s" ID="4">	</PROPERTY>
		<!-- 事件恢复时的描述，如果为空表示和产生时的描述相同 -->
		<PROPERTY NAME="DeassertDescription" TYPE="s" ID="12">	</PROPERTY>
		<!-- 处理建议 -->
		<PROPERTY NAME="Suggestion" TYPE="s" ID="5">	</PROPERTY>
		<!-- 健康互斥码 -->
		<PROPERTY NAME="HealthMutexCode" TYPE="u" ID="11">	</PROPERTY>
		<!-- 事件互斥码 -->
		<PROPERTY NAME="MutexCode" TYPE="u" ID="6">	</PROPERTY>
		<!-- 新事件码 -->
		<PROPERTY NAME="EventCode" TYPE="u" ID="7">	</PROPERTY>
		<!-- 旧事件码 -->
		<PROPERTY NAME="OldEventCode" TYPE="u" ID="8">	</PROPERTY>
		<!-- 事件读数类型 -->
		<PROPERTY NAME="EventReadingType" TYPE="y" ID="9">	</PROPERTY>
		<!-- 传感器类型 -->
		<PROPERTY NAME="SensorType" TYPE="y" ID="10">	</PROPERTY>
		<!-- 名称 -->
		<PROPERTY NAME="EventName" TYPE="s" >	</PROPERTY>
		<!-- 影响 -->
		<PROPERTY NAME="EventEffect" TYPE="s" >	</PROPERTY>
		<!-- 原因 -->
		<PROPERTY NAME="EventCause" TYPE="s">	</PROPERTY>		
		
		<METHOD NAME="SetEnable" ID="1">
			<PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
		</METHOD> 	

		<METHOD NAME="SetEventType" ID="2">
			<PARAMETER TYPE="y" NAME="EventType" DIR="in"/>
		</METHOD> 

		<METHOD NAME="SetSeverity" ID="3">
			<PARAMETER TYPE="y" NAME="Severity" DIR="in"/>
		</METHOD> 
		<!-- 模拟精准告警方法 -->
		<METHOD NAME="Mock">
			<PARAMETER TYPE="u" NAME="EventCode" DIR="in"/>	
			<!-- 模拟使能  1：模拟开启 0：模拟取消 -->
			<PARAMETER TYPE="y" NAME="isMocked" DIR="in"/>
			<!-- 事件主体编号 -->
			<PARAMETER TYPE="q" NAME="SubjectIndex" DIR="in"/>
			<!-- 告警产生使能 0:告警恢复 1:告警产生 -->
			<PARAMETER TYPE="y" NAME="isAssert" DIR="in"/>
		</METHOD>
		<!-- 事件级别同步 -->
		<METHOD NAME="SeveritySync">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD> 
		<!-- 事件上报屏蔽 -->
		<METHOD NAME="ShieldEvent">
			<PARAMETER TYPE="u" NAME="EventCode" DIR="in"/>
			<PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
			<PARAMETER TYPE="y" NAME="SavedMode" DIR="in"/>
		</METHOD>
    </CLASS>
	
	<!-- 事件策略 -->
	<CLASS NAME="EventPolicy" ID="74">
		<!-- 扫描条件, 分为高4bit和低4bit;
		高4bit：0 事件主体在位扫描； 1 事件主体不在位扫描； 2 一直扫描（在位不在位都扫描）；4 事件主体上电扫描
		低4bit：0 一直扫描(程序启动完成就开始扫描); 1:系统上电; 2:BIOS启动结束; 
		可引用其他属性(必须为整型)(不等于0,则开始扫描,主体、其他条件，均由代码或者第三方处理完成后给这里填写0/1，不再区分高低位) -->
		<PROPERTY NAME="ScanCondition" TYPE="*">	</PROPERTY>
		<!-- 事件产生后的控制动作 0: 无动作；1：下电OS； 2： 复位OS； 3：先下电再上电-->
		<PROPERTY NAME="Action" TYPE="y">	</PROPERTY>
		<!-- 能否恢复 0：不自动恢复 1：自动恢复--> 
		<PROPERTY NAME="DeassertFlag" TYPE="y">	</PROPERTY>
		<!-- 自动恢复策略, 0:不自动恢复; bit0: OS下电恢复; bit1: OS复位恢复(暂不支持); bit2: 事件主体不在位恢复； bit3: 事件主体在位恢复; 可引用其他属性(必须为byte)(不等于0,则开始扫描)-->
		<PROPERTY NAME="DeassertPolicy" TYPE="*">	</PROPERTY>
		<!-- 0 扫描一次； 1 周期扫描-->
		<PROPERTY NAME="ScanPolicy" TYPE="u">	</PROPERTY>
		<!-- 扫描周期 单位ms, 当配置为0时，表示侦听型-->
		<PROPERTY NAME="ScanCycle" TYPE="u">	</PROPERTY>
		<!-- log通道掩码, bit0: 本地文件记录;  bit1：IPMI(SMM或BMC等); bit2: SNMP TRAP; bit3: syslog; bit4: smtp, bit5: restful -->
		<PROPERTY NAME="LogChannelFilter" TYPE="q">	</PROPERTY>
		<!-- 设置告警可恢复标志 -->
		<METHOD NAME="SetDeassertFlag" ID="3">
			<PARAMETER TYPE="y" NAME="DeassertFlag" DIR="in"/>
		</METHOD> 
		<!-- 事件告警可恢复标志同步 -->
		<METHOD NAME="DeassertFlagSync">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD> 
		<METHOD NAME="SetAction">
			<PARAMETER TYPE="y" NAME="Action" DIR="in"/>
		</METHOD> 
	</CLASS>
	
	<!-- 事件监控, 不区分离散和模拟, 通用运算规则是: Reading 与 Threshold比较, 如果符合条件, 则产生告警 -->
	<!-- 对于磁盘分区使用率的告警是代码中动态生成EventMonitor实现的，如果EventMonitor有属性变更，需要同步修改代码 -->
	<CLASS NAME="EventMonitor" ID="75">
		<!-- 事件主体 指向component-->
		<PROPERTY NAME="SubjectObj" TYPE="ro">	</PROPERTY>
		<!-- 事件信息对象 -->
		<PROPERTY NAME="InformationObj" TYPE="ro">	</PROPERTY>
		<!-- 事件策略对象 -->
		<PROPERTY NAME="PolicyObj" TYPE="ro">	</PROPERTY>
		<!-- 对应的传感器对象，如果没有，留空。用于告警优化和原传感器扫描并存。 -->
		<PROPERTY NAME="SensorObj" TYPE="*">	</PROPERTY>
		<!-- 指向FRU级别的Component -->
		<PROPERTY NAME="EventFRU" TYPE="ro">	</PROPERTY>
		<!-- 控制模式, 分为高4bit和低4bit;
			高4bit：0 正常扫描； 1 rearm(重复上报)(收到重报命令重报)
			低4bit：0:不监控;  1:本地自动扫描(正常监控); 2:手动模拟; 3:手动触发恢复事件; 
					5:第三方控制(State属性由本地或BMC外部模块直接更新，监控任务不更新)
		-->
		<PROPERTY NAME="Mode" TYPE="y">	</PROPERTY>
		<!-- Mode的值可能会被修改成临时生效的值（如rearm，手动模拟）， 因此此属性用于保存Mode的值，且掉电持久化 -->
		<PROPERTY NAME="SavedMode" TYPE="y">	</PROPERTY>		
		<!-- 事件产生的时间 复位持久化 不需要配置, 代码内部使用 -->
		<PROPERTY NAME="Time" TYPE="u">	</PROPERTY>
		<!-- 事件状态，事件是否产生，0:恢复或无意义, 1:产生，0xFF:无效状态（AC启动第一次时，忽略状态变化，应用于插入(内存除外)等事件），0xFE（平时运行也忽略第一次状态变化，应用于拔出等事件，特殊的是内存的插入拔出都用0xFE），需要复位持久化 -->
		<PROPERTY NAME="State" TYPE="y">	</PROPERTY>
		<!-- 已扫描次数 -->
		<PROPERTY NAME="ScannedCount" TYPE="u">	</PROPERTY>
		<!-- 读数 可以是整形/浮点型，以后可能支持字符串-->
		<PROPERTY NAME="Reading" TYPE="*">	</PROPERTY>
		<!-- 事件产生时的读数 复位持久化 不需要配置, 代码内部使用-->
		<PROPERTY NAME="SavedReading" TYPE="*">	</PROPERTY>
		<!-- 读数掩码, 固定为uint32, 仅对无符号整数有效, 其他的忽略此字段-->
		<PROPERTY NAME="ReadingMask" TYPE="u">	</PROPERTY>
		<!-- 阀值 属性值直接指定时，类型可以是整型、浮点型；属性引用时类型是rp，但是引用的属性类型必须是整型或浮点型，以后可能支持字符串 -->
		<PROPERTY NAME="Threshold" TYPE="*">	</PROPERTY>
		<!-- 正向或负向迟滞量，若运算符为<或<=表示负向迟滞量，若运算符为>或>=表示正向迟滞量 -->
		<PROPERTY NAME="Hysteresis" TYPE="*">	</PROPERTY>
		<!-- 运算符，1：<，2: <=, 3：>，4：>=，5：=，6：不等于, 7: 上升沿0->1, 8:下降沿1->0, 9:下降沿1->0产生 上升沿0->1恢复  -->
		<PROPERTY NAME="Operator" TYPE="y">	</PROPERTY>
		<!-- 事件描述动态信息数组，格式为"对象名.属性名 [%1.3f]", 后面的[]为可选字段，如果没有，则程序自动根据属性类型转换为字符串, 例如"Cpu2.MemHot %u" -->
		<PROPERTY NAME="DescriptionDynamic" TYPE="as">	</PROPERTY>
		<!-- 事件建议动态信息数组，格式为"对象名.属性名 [%1.3f]", 后面的[]为可选字段，如果没有，则程序自动根据属性类型转换为字符串, 例如"Cpu2.MemHot %u" -->
		<PROPERTY NAME="SuggestionDynamic"   TYPE="as">	</PROPERTY>
		<!-- 附加信息:以数组下标引用动态描述中的部分信息,使用时拼接起来为附加信息 -->
		<PROPERTY NAME="AddInfo"   TYPE="ay">	</PROPERTY>
		<!-- 从告警列表中删除此Monitor对应的事件 -->
		<METHOD NAME="DelEventFromMonitor">
		</METHOD>
	</CLASS>

	<!-- 事件上报过滤（条件满足时，屏蔽指定事件在指定通道上的上报功能） -->
	<CLASS NAME="EventReportFilter">
		<!-- 是否满足过滤条件   0 不屏蔽事件上报; 1 屏蔽事件上报 -->
		<PROPERTY NAME="Condition" TYPE="y">			</PROPERTY>
		<!-- 需要屏蔽事件上报的部件（匹配该部件的所有事件），部件个数要和ComponentChannels屏蔽通道掩码的个数保持一致 -->
		<PROPERTY NAME="Components" TYPE="ay">			</PROPERTY>
		<!-- 在哪些通道上屏蔽部件关联的事件上报，屏蔽的通道可以是 bit2: SNMP TRAP; bit3: syslog; bit4: smtp, bit5: restful -->
		<PROPERTY NAME="ComponentChannels" TYPE="aq">			</PROPERTY>
		<!-- 需要屏蔽上报的事件码（精确匹配事件码），事件码个数要和EventChannels屏蔽通道掩码的个数保持一致 -->
		<PROPERTY NAME="EventCodes" TYPE="au">			</PROPERTY>
		<!-- 在哪些通道上屏蔽指定事件的上报，屏蔽的通道可以是 bit2: SNMP TRAP; bit3: syslog; bit4: smtp, bit5: restful -->
		<PROPERTY NAME="EventChannels" TYPE="aq">			</PROPERTY>
	</CLASS>
	
	<CLASS NAME="SSDPConfig" ID="77">
		<!-- SSDP运行的模式,1代表仅发送 2代表仅接收 3代表支持发送接收 -->
		<PROPERTY NAME="Mode" TYPE="y" ID="1" EXPORT="17">	</PROPERTY>
		<!-- 根据软件类型区分，iBMC为__initialized.__bmc-->
		<PROPERTY NAME="Type" TYPE="s" ID="2">	</PROPERTY>
		<!-- 使用的网口; 期望只使用对外的网口，不支持手动导入-->
		<PROPERTY NAME="UseInterface" TYPE="s" ID="3" EXPORT="18">	</PROPERTY>
		<!-- Alive消息发送的时间间隔 -->
		<PROPERTY NAME="Interval" TYPE="u" ID="4" EXPORT="17">	</PROPERTY>
		<!-- SSDP组播IPv4地址 -->
		<PROPERTY NAME="IPv4Addr" TYPE="s" ID="5">	</PROPERTY>
		<!-- SSDP组播IPv6地址 -->
		<PROPERTY NAME="IPv6Addr" TYPE="s" ID="6">	</PROPERTY>
		<!-- SSDP本地服务端端口号 -->
		<PROPERTY NAME="Port" TYPE="u" ID="7" EXPORT="17">	</PROPERTY>
		<!-- SSDP hop count -->
		<PROPERTY NAME="NotifyTTL" TYPE="u" ID="8" EXPORT="17">	</PROPERTY>
		<!-- 主机名 备用usn -->
		<PROPERTY NAME="USN" TYPE="s" ID="9">	</PROPERTY>
		<METHOD NAME="SetUseInterface" ID="3">
				<PARAMETER TYPE="s" NAME="UseInterface" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetSSDPPort" ID="7">
				<PARAMETER TYPE="u" NAME="Port" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetNotifyInterval" ID="4">
				<PARAMETER TYPE="u" NAME="Interval" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetIpv6Scope">
				<PARAMETER TYPE="s" NAME="Scope" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetNotifyTTL" ID="8">
				<PARAMETER TYPE="u" NAME="ttl" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetSSDPMode" ID="1" EXPORT="17">
				<PARAMETER TYPE="y" NAME="mode" DIR="in"/>
		</METHOD>
		<METHOD NAME="RestartService">
		</METHOD>
		<METHOD NAME="PropertySyncMethod">
		    <PARAMETER TYPE="*" NAME="*" DIR="in"/>
		    <PARAMETER TYPE="*" NAME="*" DIR="out"/>
		</METHOD>		
	</CLASS>
	
	<CLASS NAME="LLDPConfig" ID="144">
		<!-- LLDP使能开关，默认为关闭 -->
		<PROPERTY NAME="LLDPEnable" TYPE="y" ID="1" EXPORT="17"></PROPERTY>
		<!-- 发送延时时间，默认为2s-->
		<PROPERTY NAME="TxDelaySeconds" TYPE="q" ID="2" EXPORT="17"></PROPERTY>
		<!-- 发送周期，默认为30s -->
		<PROPERTY NAME="TxIntervalSeconds" TYPE="q"  ID="3" EXPORT="17"></PROPERTY>
		<!-- 邻居节点保持时间倍数，默认为4 -->
		<PROPERTY NAME="TxHold" TYPE="q" ID="4" EXPORT="17"></PROPERTY>
		<!-- 工作模式，当前只支持Tx的设置 
			bit0: Tx 发送，0关闭， 1开启
			bit1: Rx 接收，0关闭， 1开启
		-->
		<PROPERTY NAME="WorkMode" TYPE="y" ID="5" EXPORT="17"></PROPERTY>
		
		<METHOD NAME="SetLLDPEnable" ID="1">
			<!-- 0关闭， 1开启 -->
			<PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetTxDelaySeconds" ID="2">
			<PARAMETER TYPE="q" NAME="TxDelay" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetTxIntervalSeconds" ID="3">
			<PARAMETER TYPE="q" NAME="TxInterval" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetTxHold" ID="4">
			<PARAMETER TYPE="q" NAME="TxHold" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetWorkMode" ID="5">
			<!-- 工作模式，当前只支持Tx的设置 
			bit0: Tx 发送，0关闭， 1开启
			bit1: Rx 接收，0关闭， 1开启
			-->
			<PARAMETER TYPE="y" NAME="WorkMode" DIR="in"/>
		</METHOD>
        <METHOD NAME="PropertySyncMethod">
        <PARAMETER TYPE="*" NAME="*" DIR="in"/>
        <PARAMETER TYPE="*" NAME="*" DIR="out"/>
        </METHOD>
	</CLASS>
	
	<!-- NTP 网络时间同步类 -->   
	<CLASS ID="81" NAME="NTP">
		<!-- NTP功能的使能状态，0：关闭，1：开启 -->
		<PROPERTY NAME="EnableStatus" TYPE="y" ID="1" EXPORT="17">	</PROPERTY>
		<!-- 主NTP服务器的地址：IPv4地址，或IPv6地址，或域名 -->
		<PROPERTY NAME="PreferredServer" TYPE="s" ID="2" EXPORT="17">	</PROPERTY>
		<!-- 备NTP服务器的地址：IPv4地址，或IPv6地址，或域名 -->
		<PROPERTY NAME="AlternativeServer" TYPE="s" ID="3" EXPORT="17">	</PROPERTY>
		<!-- 剩下的NTP服务器的地址，最多四个，以“,“作为分隔符：IPv4地址，或IPv6地址，或域名 -->
		<PROPERTY NAME="AlternativeServerArray" TYPE="s" ID="8" EXPORT="17">	</PROPERTY>
		<!-- 支持的NTPserver 的个数，默认为3个，快手公司的定制化时要求为6个 ，支持导出，不支持导入-->
		<PROPERTY NAME="NtpServerCount" TYPE="y" ID="9" EXPORT="18" >	</PROPERTY>
		<!-- NTP的工作模式，1：手动模式（Manual），2：dhcpv4自动模式，3：dhcpv6自动模式 -->
		<PROPERTY NAME="Mode" TYPE="y" ID="4" EXPORT="17">	</PROPERTY>
		<!-- authentication enable status，关闭:0，开启:1 -->
		<PROPERTY NAME="AuthEnableStatus" TYPE="y" ID="5" EXPORT="17">	</PROPERTY>
		<!-- authentication 的组密钥的路径 -->
		<PROPERTY NAME="GroupKeyPath" TYPE="s" >	</PROPERTY>
		<!-- 系统时间跳变状态 ，非0 : 发生跳变，0 : 未发生跳变-->
		<PROPERTY NAME="SysTimeJumpVal" TYPE="u" >	</PROPERTY>
		<!-- 系统时间跳变整体值，大于0是正向跳变，小于0是负向跳变，单位min-->
		<PROPERTY NAME="TotalTimeJumpValue" TYPE="i" >	</PROPERTY>
		<!-- 与上层NTP服务器同步状态 ，成功：0，失败：1-->
		<PROPERTY NAME="SyncTimeStatus" TYPE="y" >	</PROPERTY>
		<!-- BMC与NTP服务器同步的结果，0表示成功，1表示未成功（包含同步失败和未开启NTP），默认值为1-->
		<PROPERTY NAME="SyncResult" TYPE="y">	</PROPERTY>
		<!-- 与上层NTP服务器同步最小间隔 ，时间间隔为2的次幂秒， 如:3 (8 s) -->
		<PROPERTY NAME="MinPollInterval" TYPE="y" ID="6" EXPORT="17">	</PROPERTY>
		<!-- 与上层NTP服务器同步最大间隔 ，时间间隔为2的次幂秒-->
        <PROPERTY NAME="MaxPollInterval" TYPE="y" ID="7" EXPORT="17">	</PROPERTY>	
        <!-- NTP组密钥密码的主密钥Id -->
		<PROPERTY NAME="NtpPwdMasterKeyId"  TYPE='u'>	</PROPERTY>
        <!-- NTP进行时间同步采用的加密算法类型, 默认值不加密：0；MD5算法:1；SHA256算法: 2; SHA512算法：3-->
		<PROPERTY NAME="NtpGroupKeyType"  TYPE='y'>	</PROPERTY>
		<!-- 设置NTP的使能状态，输入：0：关闭，1：开启； -->
		<METHOD NAME="SetEnableStatus" ID="1">
			<PARAMETER TYPE="y" NAME="EnableStatus" DIR="in" />
		</METHOD>		
		<!-- 设置主NTP服务器的地址，输入：ipv4或ipv6地址，或域名； -->
		<METHOD NAME="SetPreferredServer" ID="2">
			<PARAMETER TYPE="s" NAME="PreferredServer" DIR="in" />
		</METHOD>	
		<!-- 设置备NTP服务器的地址，输入：ipv4或ipv6地址，或域名； -->
		<METHOD NAME="SetAlternativeServer" ID="3">
			<PARAMETER TYPE="s" NAME="AlternativeServer" DIR="in" />
		</METHOD>	
        <!-- 设置除主备以外的NTP服务器的地址，输入：ipv4或ipv6地址，或域名，如果是多个，以“,”分隔； -->
		<METHOD NAME="SetAlternativeServerArray" ID="8">
			<PARAMETER TYPE="s" NAME="AlternativeServerArray" DIR="in" />
		</METHOD>
		<!-- 同时设置主备NTP服务器的地址，输入：ipv4或ipv6地址，或域名； -->
		<METHOD NAME="SetNTPServer">
			<PARAMETER TYPE="s" NAME="PreferredServer" DIR="in" />
			<PARAMETER TYPE="s" NAME="AlternativeServer" DIR="in" />
		</METHOD>		
		<!-- 设置NTP的工作模式，输入：1：手动模式（Manual），2：dhcpv4自动模式，3：dhcpv6自动模式 -->
		<METHOD NAME="SetNTPMode" ID="4">
			<PARAMETER TYPE="y" NAME="Mode" DIR="in" />
		</METHOD>		
		<!-- 查询时间同步状态，返回：0：NTP未使能，1：同步失败，2：同步成功 -->
		<METHOD NAME="QuerySyncTimeStatus">
			<PARAMETER TYPE="y" NAME="SyncStatus" DIR="out" />
		</METHOD>		
		<!-- 设置authentication 的使能状态:关闭:0、开启:1-->
		<METHOD NAME="SetNTPAuthEnableStatus" ID="5">
			<PARAMETER TYPE="y" NAME="AuthEnableStatus" DIR="in"/>
		</METHOD>	
		<!-- 导入组密钥 -->
		<METHOD NAME="ImportNTPGroupKey">
			<PARAMETER DIR="in"  NAME="GroupKeyPath"   TYPE="s"/>
        </METHOD>
		<!-- 查询组密钥的状态 -->
		<METHOD NAME="GetNTPGroupKeyStatus">
			<PARAMETER DIR="out" NAME="Status" TYPE="y"/>
        </METHOD>
		<!--设置所有NTP配置-->
		<METHOD NAME="SetAllConfig">
			<PARAMETER DIR="in" NAME="PreferredServer" TYPE="s"/>
			<PARAMETER DIR="in" NAME="AlternativeServer" TYPE="s"/>
			<PARAMETER DIR="in" NAME="Mode" TYPE="y"/>
			<PARAMETER DIR="in" NAME="AuthEnableStatus" TYPE="y"/>
        </METHOD>
		<!--设置NTP同步间隔-->
		<METHOD NAME="SetNtpMinPollingInterval" ID="6">
			<PARAMETER DIR="in" NAME="poll" TYPE="y"/>
        </METHOD>
		<METHOD NAME="SetNtpMaxPollingInterval" ID="7">
			<PARAMETER DIR="in" NAME="poll" TYPE="y"/>
        </METHOD>
        <METHOD NAME="PropertySyncMethod">
            <PARAMETER DIR="in" TYPE="*" NAME="*" />
            <PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
        <METHOD NAME="SetSmmTimeFromBmc">
            <PARAMETER DIR="in" NAME="timeStamp" TYPE="u"/>
        </METHOD>
        <METHOD NAME="UpdateNTPCiphertext">
			<PARAMETER DIR="in" NAME="NewKeyId" TYPE="u"/>
        </METHOD>
	</CLASS>
	
<!-- VNC 类 -->   
	<CLASS ID="102" NAME="VNC">
		<!-- 单板是否支持VNC功能，0：不支持，1：支持 -->
		<PROPERTY NAME="SupportState" TYPE="y">	</PROPERTY>
		<!-- VNC功能使能状态，0：关闭，1：开启 -->
		<PROPERTY NAME="EnableState" TYPE="y" ID="1" EXPORT="17">	</PROPERTY>
		<!-- VNC Key -->
		<PROPERTY NAME="Password" TYPE="s" ID="2">	</PROPERTY>
		<!-- VNC 超时时间 -->
		<PROPERTY NAME="Timeout" TYPE="i" ID="3" EXPORT="17">	</PROPERTY>
		<!-- VNC SSL通信开启状态 0：关闭，1：开启 -->
		<PROPERTY NAME="SSLEnableState" TYPE="y" ID="4" EXPORT="17">	</PROPERTY>
		<!-- VNC 通信端口号 -->
		<PROPERTY NAME="Port" TYPE="i" ID="5" EXPORT="17">	</PROPERTY>
		<!-- VNC 当前连接数 -->
		<PROPERTY NAME="ConnectNum"  TYPE="i">  </PROPERTY>
		<!-- VNC 当前键盘布局类型 -->
		<PROPERTY NAME="KeyboardLayout"  TYPE="s" ID="6" EXPORT="17">	</PROPERTY>	
		<!-- VNC 加密workkey的 根密钥		-->
		<PROPERTY NAME="PwdComponent"  TYPE="ay">	</PROPERTY>	
		<!-- VNC 加密key使用的 workkey -->
		<PROPERTY NAME="PwdWorkKey"  TYPE="s">	</PROPERTY>
        <!-- VNC 加密key使用的 masterkey的Id -->
        <PROPERTY NAME="PwdMasterKeyId"  TYPE='u'>	</PROPERTY> 
		<!-- VNC user name -->
		<PROPERTY NAME="username" TYPE="s">	</PROPERTY>
		<!-- VNC 密码生效时间-->
		<PROPERTY NAME="PwdValidStarttime" TYPE="u">	</PROPERTY>	
		<!-- VNC 密码登录规则 -->
		<PROPERTY NAME="LoginPermit" TYPE="u">	</PROPERTY>
		<!-- VNC 密码锁定标识 -->
		<PROPERTY NAME="PwdLockFlag" TYPE="y">	</PROPERTY>
		<!-- VNC 密码有效性标识 -->
		<PROPERTY NAME="PwdValidFlag" TYPE="y">	</PROPERTY>
		<!-- VNC 剩余有效期 -->
		<PROPERTY NAME="PwdRemainDay" TYPE="u">	</PROPERTY>
		<!-- VNC 密码锁定时间 -->
		<PROPERTY NAME="AuthFailLockStartTime" TYPE="u">	</PROPERTY>
		<!-- VNC 连续登录失败次数 -->
		<PROPERTY NAME="AuthFailTimes" TYPE="q">	</PROPERTY>
		<!-- VNC 登录规则 -->
		<PROPERTY NAME="PermitRuleIds" TYPE="y" ID="7" EXPORT="17">	</PROPERTY>
		<!--设置vnc的使能状态：-->
		<METHOD NAME="SetState" ID="1">
			<PARAMETER TYPE="y" NAME="EnableState" DIR="in"/>
        </METHOD>
		<!-- 设置VNC Key -->
		<METHOD NAME="SetPwdValue" ID="2">
			<PARAMETER TYPE="s" NAME="Password" DIR="in" />
		</METHOD>
		<!-- 设置VNC超时时间 -->
		<METHOD NAME="SetTimeout" ID="3">
			<PARAMETER TYPE="i" NAME="Timeout" DIR="in" />
		</METHOD>
		<!-- 设置VNC SSL使能状态 -->
		<METHOD NAME="SetSSLEnableState" ID="4">
			<PARAMETER TYPE="y" NAME="SSLEnableState" DIR="in" />
		</METHOD>		
		<!--设置VNC端口的方法-->
		<METHOD NAME="SetPort" ID="5">
			<PARAMETER TYPE="i" NAME="Port" DIR="in"/>
        </METHOD>
		<!--设置VNC当前键盘布局类型-->
		<METHOD NAME="SetKeyboardLayout" ID="6">
			<PARAMETER TYPE="s" NAME="KeyboardLayout" DIR="in"/>
        </METHOD>
		<!--删除vnc连接的方法-->
		<METHOD NAME="VncDelectLink">
			<!--kvm连接的id--> 
			<PARAMETER TYPE="i" NAME="Id" DIR="in"/>
        </METHOD>
		<!--更新vnc密码生效期-->
		<METHOD NAME="RenewPwdStartTime">
			<!--时间跳变值--> 
			<PARAMETER TYPE="u" NAME="time_diff" DIR="in"/>
			<!--时间跳变flag--> 
			<PARAMETER TYPE="y" NAME="flag" DIR="in"/>
        </METHOD>
		<!--更新vnc密码锁定生效期-->
		<METHOD NAME="RenewAuthLockStartTime">
			<!--时间跳变值--> 
			<PARAMETER TYPE="u" NAME="time_diff" DIR="in"/>
			<!--时间跳变flag--> 
			<PARAMETER TYPE="y" NAME="flag" DIR="in"/>
        </METHOD>
		<!--检查当前VNC密码状态-->
		<METHOD NAME="CheckPwdState">
        </METHOD>
		<!--更新当前VNC登录锁定状态-->
		<METHOD NAME="UpdateLockState">
        </METHOD>
		<!--设置VNC登录规则-->
		<METHOD NAME="SetPermitRuleIds" ID="7">
			<PARAMETER TYPE="y" NAME="PermitRuleIds" DIR="in"/>
        </METHOD>
    	<METHOD NAME="UpdateVncCiphertext">
			<PARAMETER DIR="in" NAME="NewKeyId" TYPE="u"/>
        </METHOD>
	</CLASS>
	<CLASS ID="136" NAME="SMS">
		<!-- 索引Id -->
		<PROPERTY NAME="Id" TYPE="y">	</PROPERTY>
		<!-- 软件名称 -->
		<PROPERTY NAME="SmsName" TYPE="s">	</PROPERTY>
		<!-- 分类属性 -->
		<PROPERTY NAME="Type" TYPE="s">	</PROPERTY>
		<!-- 固件版本信息 -->
		<PROPERTY NAME="FirmwareVersion" TYPE="s" EXPORT="17">	</PROPERTY>
		<!-- 运行状态信息 -->
		<PROPERTY NAME="Status" TYPE="s">	</PROPERTY>
		<!-- 字符设备驱动名称 -->
		<PROPERTY NAME="CDEVDriveName" TYPE="s">	</PROPERTY>
		<!-- 字符设备驱动版本 -->
		<PROPERTY NAME="CDEVDriveVersion" TYPE="s">	</PROPERTY>
		<!-- 虚拟网卡驱动名称 -->
		<PROPERTY NAME="VNICDriveName" TYPE="s">	</PROPERTY>
		<!-- 虚拟网卡驱动版本 -->
		<PROPERTY NAME="VNICDriveVersion" TYPE="s">	</PROPERTY>
		<!-- KBOX驱动名称 -->
		<PROPERTY NAME="KBOXDriveName" TYPE="s">	</PROPERTY>
		<!-- KBOX驱动版本 -->
		<PROPERTY NAME="KBOXDriveVersion" TYPE="s">	</PROPERTY>
		<!-- EDMA驱动名称 -->
		<PROPERTY NAME="EDMADriveName" TYPE="s">	</PROPERTY>
		<!-- EDMA驱动版本 -->
		<PROPERTY NAME="EDMADriveVersion" TYPE="s">	</PROPERTY>
		<!-- IP地址 -->
		<PROPERTY NAME="IPAddr" TYPE="s">	</PROPERTY>
		<!-- 端口 -->
		<PROPERTY NAME="Port" TYPE="u">	</PROPERTY>
		<!-- 注册状态 0:未注册  1:已注册 -->
		<PROPERTY NAME="RegisterState" TYPE="y">	</PROPERTY>
		<!-- 注册识别码, 8个字节 -->
		<PROPERTY NAME="RegisterCode" TYPE="s">	</PROPERTY>
		<!-- 心跳状态信息 0:健康 1:告警-->
		<PROPERTY NAME="HealthState" TYPE="y">	</PROPERTY>
		<PROPERTY NAME="MaxPort"     TYPE="u">	</PROPERTY>
		<PROPERTY NAME="MinPort"     TYPE="u">	</PROPERTY>
		<PROPERTY NAME="alarmState"  TYPE="y">	</PROPERTY>
		<PROPERTY NAME="alarmDesc"   TYPE="s">	</PROPERTY>
		<!-- HTTP协议类型 0:HTTP 1:HTTPS-->
		<PROPERTY NAME="HTTPType" TYPE="y" ID="1">	</PROPERTY>
		<!-- 字符设备通道使能状态 1:Enabled 0:Disabled-->
		<PROPERTY NAME="CdevChannelEnabled" TYPE="y" ID="2" EXPORT="17"> </PROPERTY>
		<!-- BMA上报的透传资源的白名单 -->
		<PROPERTY NAME="RedirectWhiteList" TYPE='as'> </PROPERTY>
		<!-- BMA资源更新状态 0：not start 1:update complete 2:update default -->
		<PROPERTY NAME="UpdateStatus" TYPE='y'> </PROPERTY>
		<!-- BoB通道类型 -->
		<!-- 0:veth, 1:cdev, other:reserved -->
		<PROPERTY NAME="BoBChannelType" TYPE="y">	</PROPERTY>
		<!-- 0:veth, 1:cdev, other:reserved -->
		<PROPERTY NAME="ReadyBoBChannel" TYPE="y">	</PROPERTY>
		<!-- 设置已经准备好的Bob通道类型 -->
		<METHOD NAME="SetReadyBoBChannel">
		    <PARAMETER TYPE="y" NAME="readychannel" DIR="in"/>
		</METHOD>
		<!-- iBMA信息显示开关：0：不显示，1：显示 -->
		<PROPERTY NAME="SmsEnabled" TYPE="y">	</PROPERTY>
		<!--设置端口上限的方法-->
		<METHOD NAME="SetMaxPort">
			<PARAMETER TYPE="u" NAME="MaxPort" DIR="in"/>
        </METHOD>
		<!--设置端口下限的方法-->
		<METHOD NAME="SetMinPort">
			<PARAMETER TYPE="u" NAME="MinPort" DIR="in"/>
        </METHOD>
		<!--设置告警状态的方法-->
		<METHOD NAME="SetalarmState">
			<PARAMETER TYPE="y" NAME="alarmState" DIR="in"/>
        </METHOD>
		<!--设置告警描述的方法-->
		<METHOD NAME="SetalarmDesc">
			<PARAMETER TYPE="s" NAME="alarmDesc" DIR="in"/>
        </METHOD>
		<METHOD NAME="ForwardRedfishRequest">
            <PARAMETER TYPE="s" NAME="Request" DIR="in"/>
			<PARAMETER TYPE="i" NAME="RequestLength" DIR="in"/>
            <PARAMETER TYPE="y" NAME="RetryTimes" DIR="in"/>
            <PARAMETER TYPE="s" NAME="Response" DIR="out"/>
			<PARAMETER TYPE="i" NAME="ResponseLength" DIR="out"/>
        </METHOD>
		<METHOD NAME="HandleRedfishEvent">
            <PARAMETER TYPE="s" NAME="Request" DIR="in"/>
			<PARAMETER TYPE="i" NAME="RequestLength" DIR="in"/>
            <PARAMETER TYPE="s" NAME="ResponseBody" DIR="out"/>
			<PARAMETER TYPE="s" NAME="ResponseHeaders" DIR="out"/>
			<PARAMETER TYPE="s" NAME="ResponseStatus" DIR="out"/>
        </METHOD>
		<!-- BMA连接状态 0:正常连接  1:断开连接-->
		<METHOD NAME="GetBMAConnectState">
            <PARAMETER TYPE="y" NAME="State" DIR="out"/>
        </METHOD>
		<!-- 向BMA请求更新指定类型的资源 ResType: 资源类型 -->
		<METHOD NAME="UpdateBMASpecificRsc">
            <PARAMETER TYPE="s" NAME="ResType" DIR="in"/>
        </METHOD>
		<!-- 设置透传白名单 -->
		<METHOD NAME="SetRedirectWhiteList">
            <PARAMETER TYPE="as" NAME="RedirectWhiteList" DIR="in"/>
        </METHOD>
		<!-- 设置字符设备通道使能-->
		<METHOD NAME="SetCdevChannelEnabled" ID="2">
            <PARAMETER TYPE="y" NAME="CdevChannelEnabled" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetBoBChannelType">
            <PARAMETER TYPE="y" NAME="BoBChannelType" DIR="in"/>
            <PARAMETER TYPE="u" NAME="options" DIR="in"/>
        </METHOD>
		<METHOD NAME="GetBoBChannelType">
            <PARAMETER TYPE="y" NAME="BoBChannelType" DIR="out"/>
        </METHOD>
		
	</CLASS>
	<CLASS ID="142" NAME="ComputerSystem">
		<!-- 索引Id -->
		<PROPERTY NAME="Id" TYPE="y">	</PROPERTY>
		<!-- OS版本号 -->
		<PROPERTY NAME="OSVersion" TYPE="s">	</PROPERTY>
		<!-- kernel版本号 -->
		<PROPERTY NAME="KernelVersion" TYPE="s">	</PROPERTY>
		<!-- 主机名称，业务侧主机名 -->
		<PROPERTY NAME="HostName" TYPE="s">	</PROPERTY>
		<!-- 域名称 -->
		<PROPERTY NAME="Domain" TYPE="s">	</PROPERTY>
		<!-- 计算机描述 -->
		<PROPERTY NAME="Description" TYPE="s">	</PROPERTY>
		<!-- 总系统内存容量 -->
		<PROPERTY NAME="TotalSystemMemoryGiB" TYPE="d">	</PROPERTY>
		<!-- 总物理内存容量 -->
		<PROPERTY NAME="TotalPhysicalMemoryGiB" TYPE="u">	</PROPERTY>
		<!-- 系统内存缓冲区容量 -->
		<PROPERTY NAME="SystemMemoryBuffersGiB" TYPE="d">	</PROPERTY>
		<!-- 系统内存缓存区容量 -->
		<PROPERTY NAME="SystemMemoryCachedGiB" TYPE="d">	</PROPERTY>
		<!-- 内存占用率百分占比 -->
		<PROPERTY NAME="MemUsage" TYPE="d">	</PROPERTY>
		<!-- 总CPU占用率百分占比 -->
		<PROPERTY NAME="TotalCPUUsage" TYPE="d">	</PROPERTY>
		<!-- 最大逻辑CPU占用率百分占比 -->
		<PROPERTY NAME="MaxLogicCPUUsage" TYPE="d">	</PROPERTY>
		<!-- OS平台类型（架构）信息 -->
		<PROPERTY NAME="Arch" TYPE="s">	</PROPERTY>
		<!-- 操作系统主版本号获取 -->
		<PROPERTY NAME="MajorVersion" TYPE="s">	</PROPERTY>
		<!-- 操作系统次版本号获取 -->
		<PROPERTY NAME="MinorVersion" TYPE="s">	</PROPERTY>
		<!-- 操作系统补丁主版本号获取 -->
		<PROPERTY NAME="SpMajorVersion" TYPE="s">	</PROPERTY>	
		<!-- 操作系统补丁次版本号获取 -->
		<PROPERTY NAME="SpMinorVersion" TYPE="s">	</PROPERTY>			
		<!-- 网络带宽占用率门限 -->
		<PROPERTY NAME="BandwidthUsageThre" TYPE="q">	</PROPERTY>		
		<!-- iBMA系统资源上报的事件和告警 
			bit(0):文件系统只读
			
			其他预留
		-->
		<PROPERTY NAME="iBMAEvent" TYPE="u">	</PROPERTY>
		<!-- 用于带内上报Pcie告警 -->
		<PROPERTY NAME="FaultDetailStatus" TYPE="u">	</PROPERTY>
		<!-- 只读文件系统的名字，中间用空格分开 -->
		<PROPERTY NAME="ReadonlyFSName" TYPE="s">	</PROPERTY>
		<!--从BMA同步hostname到BMC使能开关，不使能0，使能1，默认使能   -->	
		<PROPERTY NAME="HostnameSyncEnabled" TYPE="y" ID="1" EXPORT="17">  </PROPERTY>
        <!-- iBMA 获取系统内HDD磁盘的最大温度  -->
        <PROPERTY NAME="PchMaxTempCelsius" TYPE="q">   </PROPERTY>
        <!-- iBMA 获取系统内NVME磁盘的最大温度  -->
        <PROPERTY NAME="NvmeMaxTempCelsius" TYPE="q">   </PROPERTY>
		<!-- 系统中逻辑盘的状态，存在异常状态的逻辑盘时为1，不存在时 为0 -->
		<PROPERTY NAME="LogicalDriveStateAbnormal" TYPE="y">	</PROPERTY>
		<!-- 设置网络带宽占用率门限 threshold: 0~100 -->
		<METHOD NAME="SetBandwidthUsageThre">
			<PARAMETER TYPE="q" NAME="threshold" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetHostnameSyncEnabled" ID="1">
			<PARAMETER TYPE="y" NAME="HostnameSyncEnabled" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetHostname">
			<PARAMETER TYPE="s" NAME="Hostname" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetLDStateAbnormal">
			<PARAMETER TYPE="y" NAME="LDStateAbnormal" DIR="in"/>
		</METHOD>
	</CLASS>
    <CLASS NAME="EnergySavingCfgItem">
        <!-- 节能配置名称 -->
        <PROPERTY NAME="CfgName" TYPE="s"> </PROPERTY>
        <!-- 节能配置参数值 -->
        <PROPERTY NAME="Value" TYPE="*"></PROPERTY> 
    </CLASS>
    <CLASS NAME="EnergySaving">
        <!-- 使能开关  -->
        <PROPERTY NAME="Enable" TYPE="y">           </PROPERTY>
        <!-- 节能配置状态： 0：配置未下发 1：配置生效 2：配置解除 -->
        <PROPERTY NAME="State" TYPE="y"> </PROPERTY>
        <!-- 逻辑CPU利用率门限值 -->
        <PROPERTY NAME="LogicalCpuUsageThre" TYPE="q"></PROPERTY>
        <!-- 解除节能后的配置数组 -->
        <PROPERTY NAME="CancelCfg" TYPE="roa"></PROPERTY>
        <!-- 下发的节能配置数组 -->
        <PROPERTY NAME="ActiveCfg" TYPE="roa"></PROPERTY>
        <!-- 解除配置的时间戳 -->
        <PROPERTY NAME="CancelCfgTime" TYPE="u"></PROPERTY>
        <!-- 智能节能功能控制，0标识功能关闭，1标识功能开启 -->
        <METHOD NAME="SetEnergySavingEnable">
            <PARAMETER TYPE="y" NAME="EnergySavingEnabled" DIR="in"/>
        </METHOD>
        <!-- 设置逻辑CPU阈值 -->                  
        <METHOD NAME="SetLogicalCpuUsageThre">
            <PARAMETER TYPE="q" NAME="threshold" DIR="in"/>
        </METHOD>
        <!-- 设置解除节能配置 -->
        <METHOD NAME="SetCancleCfg">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
        </METHOD>                                       
        <!-- 设置激活节能配置 -->
        <METHOD NAME="SetActiveCfg">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
            <PARAMETER TYPE="*" NAME="*" DIR="out"/>
        </METHOD>
    </CLASS>
	<CLASS NAME="OSEthTeam">
		<!-- 索引Id -->
		<PROPERTY NAME="Id" TYPE="y">	</PROPERTY>
		<!-- team类型 -->
		<PROPERTY NAME="TeamType" TYPE="s">	</PROPERTY>
		<!-- 适配器个数 -->
		<PROPERTY NAME="Adapters" TYPE="y">	</PROPERTY>
		<!-- VLANs -->
		<PROPERTY NAME="VLANS" TYPE="y">	</PROPERTY>
		<!-- 角色 -->
		<PROPERTY NAME="Role" TYPE="s">	</PROPERTY>
		<!-- 激活状态 -->
		<PROPERTY NAME="Active" TYPE="u">	</PROPERTY>
		<!-- 适配器 -->
		<PROPERTY NAME="Adapter" TYPE="u">	</PROPERTY>
	</CLASS>
	<CLASS NAME="OSEthBridge">
		<!-- 索引Id -->
		<PROPERTY NAME="Id" TYPE="y">	</PROPERTY>
		<!-- Bridge名称 -->
		<PROPERTY NAME="BridgeName" TYPE="s">	</PROPERTY>
		<!-- Bridge id -->
		<PROPERTY NAME="BridgeId" TYPE="y">	</PROPERTY>
		<!-- STP使能状态 -->
		<PROPERTY NAME="STPEnabled" TYPE="y">	</PROPERTY>
		<!-- 接口 -->
		<PROPERTY NAME="Interfaces" TYPE="s">	</PROPERTY>
	</CLASS>
	<CLASS NAME="SATASmartInfo">
		<!-- 索引Id -->
		<PROPERTY NAME="Id" TYPE="y">	</PROPERTY>
		<!-- 部件名称,用于引用到对应Hdd的DeviceName -->
        <PROPERTY NAME="DeviceName" TYPE="s">				</PROPERTY>
		<!-- 名称 -->
		<PROPERTY NAME="AttributeName" TYPE="s">	</PROPERTY>
		<!-- 标志 -->
		<PROPERTY NAME="Flag" TYPE="s">	</PROPERTY>
		<!-- 值-->
		<PROPERTY NAME="Value" TYPE="y">	</PROPERTY>
		<!-- Worst -->
		<PROPERTY NAME="Worst" TYPE="y">	</PROPERTY>
		<!-- 阈值 -->
		<PROPERTY NAME="Threshold" TYPE="y">	</PROPERTY>
		<!-- 类型 -->
		<PROPERTY NAME="Type" TYPE="s">	</PROPERTY>
		<!-- 更新 -->
		<PROPERTY NAME="Updated" TYPE="s">	</PROPERTY>
		<!-- WhenFailed -->
		<PROPERTY NAME="WhenFailed" TYPE="s">	</PROPERTY>
		<!-- 原始读数 -->
		<PROPERTY NAME="RawValue" TYPE="u">	</PROPERTY>
	</CLASS>
	<CLASS NAME="OSDrivePartition">
		<!-- OS逻辑分区名称 -->
		<PROPERTY NAME="VolumeName" TYPE="s">	</PROPERTY>
		<!-- OS盘符名 -->
        <PROPERTY NAME="OSDriveName" TYPE="s">				</PROPERTY>
		<!-- 总容量 -->
		<PROPERTY NAME="TotalCapacityGiB" TYPE="d">	</PROPERTY>
		<!-- 已使用容量 -->
		<PROPERTY NAME="UsedCapacityGiB" TYPE="d">	</PROPERTY>
		<!-- 使用率 -->
		<PROPERTY NAME="Usage" TYPE="y">	</PROPERTY>
	</CLASS>
	<CLASS NAME="BusinessPortVLAN">
		<!-- VLAN Id -->
		<PROPERTY NAME="Id" TYPE="u">	</PROPERTY>
		<!-- VLAN使能 -->
        <PROPERTY NAME="VLANEnable" TYPE="y">				</PROPERTY>
		<!-- VLAN优先级 -->
		<PROPERTY NAME="VLANPriority" TYPE="s">	</PROPERTY>
		<!-- 所属网口BDF标识 -->
		<PROPERTY NAME="EthBDF" TYPE="s">	</PROPERTY>
		<PROPERTY NAME="IPv4Info" TYPE="as">			</PROPERTY>
		<PROPERTY NAME="IPv6Info" TYPE="as">			</PROPERTY>
		<!-- 配置操作的进度，0-100表正常，其他为异常值 -->
		<PROPERTY NAME="ConfigState" TYPE="aq">			</PROPERTY>
		<!-- 配置操作的结果，存放错误消息 -->
		<PROPERTY NAME="ConfigResult" TYPE="as">			</PROPERTY>
		<!-- 系统启动时是否激活网口 -->
		<PROPERTY NAME="IsOnBoot" TYPE="y">			</PROPERTY>
		<METHOD NAME="SetVLANProp">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
			<PARAMETER TYPE="u" NAME="StateIndex" DIR="out"/>
		</METHOD>
	</CLASS>
	<CLASS NAME="ResidentStorageMgnt" ID="84">
		<!-- 本类用于StorageMgnt模块 在主板配置对象用于常驻模块内 便于调用模块内方法 属性当前均无意义 -->
		<!-- 点灯信息 0:未获取点灯锁 1:点灯中-->
		<PROPERTY NAME="LightFlag" TYPE="y" ID="1">	</PROPERTY>
		<METHOD NAME="SetBMCObjFromBMA">
			<PARAMETER TYPE="s" NAME="type_str" DIR="in"/>
            <PARAMETER TYPE="s" NAME="rsc_str" DIR="in"/>
        </METHOD>
		<!-- 设置点灯标志 -->
		<METHOD NAME="SetLightFlag" ID="1">
			<PARAMETER TYPE="y" NAME="Flag" DIR="in"/>
        </METHOD>
	</CLASS>
	<CLASS NAME="ResidentNetConfig">
		<!-- 本类用于StorageMgnt模块 在主板配置对象用于常驻模块内 便于调用模块内方法 属性当前均无意义 -->
		<PROPERTY NAME="Meaningless" TYPE='s'>		</PROPERTY>
		<METHOD NAME="SetBMCNetObjFromBMA">
			<PARAMETER TYPE="s" NAME="type_str" DIR="in"/>
            <PARAMETER TYPE="s" NAME="rsc_str" DIR="in"/>
            <PARAMETER TYPE="y" NAME="Flag" DIR="in"/>
        </METHOD>
	</CLASS>
	
	<CLASS NAME="EventDescpCfgToHmm">
		<!-- 此类只适用于E9000，关联需要上报EventDesc数据给HMM的对象 -->
		<PROPERTY NAME="EventDescRefObj" TYPE='ro'>		</PROPERTY>
		<!-- 预留，默认为0  -->
		<PROPERTY NAME="EventData0Flag" TYPE='y'>		</PROPERTY>
		<!-- 默认为0 ；1表示event_data1保存的是sensor number -->
		<PROPERTY NAME="EventData1Flag" TYPE='y'>		</PROPERTY>
		<!-- 预留，默认为0  -->
		<PROPERTY NAME="EventData2Flag" TYPE='y'>		</PROPERTY>
	</CLASS>
	
	<CLASS NAME="CertMonitor">
		<!-- 标识证书的具体类型
		   0: syslog根证书
		   1：syslog客户端证书
		   2: LDAP Server1证书
		   3: LDAP Server2证书
		   4：LDAP Server3证书
		   5: LDAP Server4证书
		   6: LDAP Server5证书
		   7：LDAP Server6证书
		   8-10:留给LDAP
		   11-20: SSL证书（证书链）
		   21-36: 双因素认证根证书
		   37-53: 双因素认证客户端证书
		   其它: 预留给其它证书 -->
		<PROPERTY NAME="CertID" TYPE='y'>		</PROPERTY>
		<!-- 证书对象描述 -->
		<PROPERTY NAME="CertDes" TYPE='s'>		</PROPERTY>
		<!-- 证书过期在状态 -->
		<PROPERTY NAME="OverDueStatus" TYPE='y'>		</PROPERTY>
		<!-- 起始时间 -->
		<PROPERTY NAME="StartTime" TYPE="s">		</PROPERTY>	
		<!-- 过期时间 -->
		<PROPERTY NAME="Expiration"  TYPE="s">		</PROPERTY>	
		<!-- 设置 OverDueStatus-->
		<METHOD NAME="SetOverDueStatus">
			<PARAMETER TYPE="y" NAME="OverDueStatus" DIR="in"/>
			<!-- 是否持久化-->
			<PARAMETER TYPE="u" NAME="DFOption" DIR="in"/>
		</METHOD>
	</CLASS>
	
	<!--不同产品需要的告警级别不一样，可根据单板个性化要求更改告警级别-->
	<CLASS NAME="EventSeverityChange">
		<!-- 需要更改的告警事件对应的事件码。参见EventInformation相关对象中定义的EventCode -->
		<PROPERTY NAME="EventCode" TYPE='u'>		</PROPERTY>
		<!-- 需要更改的告警事件级别 -->
		<!-- 系统事件（故障事件）、装备事件级别, 0:ok; 1:minor; 2:major; 3:critical。 维护事件、运行事件级别：0: info; 1: warning; 2：error -->
		<PROPERTY NAME="SeverityValue"  TYPE="y">		</PROPERTY>	
		<PROPERTY NAME="EventInfoObj" TYPE="roa">	</PROPERTY>
	</CLASS>
	
	<!-- OSCA后插交换平面信息管理,给redfish使用 -->
	<CLASS NAME="SwitchPlaneInfoMgnt">
		<!-- Fru1:base,Fru2:fabric,Fru3:fc, -->
		<PROPERTY NAME="FruId" TYPE="y"/>
		<PROPERTY NAME="ChipVersion" TYPE="s"/>
		<PROPERTY NAME="UpgradeEnabled" TYPE="y"/>
		<!-- 从PRR交换芯片读取调压值失败的标记，1：读取失败，0：未发生读取失败 -->
		<PROPERTY NAME="ChipSvidReadFailed" TYPE="y"/>
		<!-- 交换平面复位标志位 -->
		<PROPERTY NAME="SwitchPlaneRestart" TYPE="u"/>
		<METHOD NAME="GetIpMaskGw">
			<!-- IPv4地址 -->
			<PARAMETER TYPE="s" NAME="IpAddr" DIR="out"/>
			<PARAMETER TYPE="s" NAME="SubnetMask" DIR="out"/>
			<PARAMETER TYPE="s" NAME="DefaultGateway" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetIpMaskGw">
			<!-- redfish可以只设置ip，不设置mask、gw，那么mask\gw填为空即可 -->
			<PARAMETER TYPE="s" NAME="IpAddr" DIR="in"/>
			<PARAMETER TYPE="s" NAME="SubnetMask" DIR="in"/>
			<PARAMETER TYPE="s" NAME="DefaultGateway" DIR="in"/>
		</METHOD>
		<METHOD NAME="GetStackingStatus">
			<!-- redfish查询堆叠状态 -->
			<PARAMETER TYPE="y" NAME="stacking_status" DIR="out"/>
		</METHOD>
		<METHOD NAME="GetSwitchVersion">
			<!-- redfish获取版本信息 -->
			<PARAMETER TYPE="s" NAME="version_info" DIR="out"/>
		</METHOD>
		<METHOD NAME="GetSwiIpv6Addr">
			<PARAMETER TYPE="i" NAME="Ipv6TotalNum" DIR="out"/>
			<PARAMETER TYPE="ay" NAME="Address" DIR="out"/>
		</METHOD>
		<METHOD NAME="GetSwiIpv6Route">
			<PARAMETER TYPE="i" NAME="Ipv6TotalNum" DIR="out"/>
			<PARAMETER TYPE="ay" NAME="Address" DIR="out"/>
		</METHOD>
		<METHOD NAME="AddSwiIpv6Addr">
			<PARAMETER TYPE="s" NAME="FruType" DIR="in"/>
			<PARAMETER TYPE="s" NAME="Address" DIR="in"/>
			<PARAMETER TYPE="i" NAME="PrefixLength" DIR="in"/>
		</METHOD>
		<METHOD NAME="DelSwiIpv6Addr">
			<PARAMETER TYPE="s" NAME="FruType" DIR="in"/>
			<PARAMETER TYPE="s" NAME="Address" DIR="in"/>
			<PARAMETER TYPE="i" NAME="PrefixLength" DIR="in"/>
		</METHOD>
		<METHOD NAME="AddSwiIpv6Route">
			<PARAMETER TYPE="s" NAME="FruType" DIR="in"/>
			<PARAMETER TYPE="s" NAME="Address" DIR="in"/>
			<PARAMETER TYPE="i" NAME="PrefixLength" DIR="in"/>
			<PARAMETER TYPE="s" NAME="Gateway" DIR="in"/>
		</METHOD>
		<METHOD NAME="DelSwiIpv6Route">
			<PARAMETER TYPE="s" NAME="FruType" DIR="in"/>
			<PARAMETER TYPE="s" NAME="Address" DIR="in"/>
			<PARAMETER TYPE="i" NAME="PrefixLength" DIR="in"/>
			<PARAMETER TYPE="s" NAME="Gateway" DIR="in"/>
		</METHOD>
	</CLASS>
	
	<!--芯片固件管理-->
	<CLASS NAME="ChipFirmwareMgnt">
		<!-- CPU ID -->
		<PROPERTY NAME="Id" TYPE='y'>		</PROPERTY>
		<!-- VRD ID -->
		<PROPERTY NAME="VrdId" TYPE='y'>		</PROPERTY>
		<!-- 参数作用域 1： CPU Core -->	
		<PROPERTY NAME="SetDomain" TYPE="y">	</PROPERTY>
		<!-- 关联的芯片对象 -->
		<PROPERTY NAME="RefChip" TYPE='ro'>		</PROPERTY>
	    <!-- ST VRD芯片升级要关联的2类芯片对象,在同时需要不同的OffsetWidth时使用 -->
		<PROPERTY NAME="RefChip2" TYPE='ro'>		</PROPERTY>		
		<!-- ST VRD芯片升级被中断后会进入保护模式，地址会发生变化，用来关联新地址的1 byte寻址的Chip -->
		<PROPERTY NAME="RecoverChip" TYPE='ro'>		</PROPERTY>
	    <!-- ST VRD芯片升级被中断后会进入保护模式，地址会发生变化，用来关联新地址的2 byte寻址的Chip -->
		<PROPERTY NAME="RecoverChip2" TYPE='ro'>		</PROPERTY>
		<!-- 升级文件保存在BMC中的路径 -->
		<PROPERTY NAME="FirmwareFileName"  TYPE="s">		</PROPERTY>
        <!-- VRD基础固件包路径，当前仅SD5003需要 -->
        <PROPERTY NAME="BootFwFileName"  TYPE="s">		</PROPERTY>
        <!-- VRD芯片提供 page 0x2f， reg=0xc用来用户信息，此处产品用来保存版本信息
            但是VRD芯片无法保证该寄存器的默认值，因此，增加升级标志位，为1表示已经做过升级操作
            这时候，只需要校验版本号就可以了，如果标志位为0，则表示没有升过级，
			则要比较VRD寄存器的值与配置文件定义的值。此标志位要做掉电持久化			-->	
		<PROPERTY NAME="UpdateFlag"  TYPE="y">		</PROPERTY>	
        <!-- 芯片剩余写入次数:从硬件寄存器读取 -->		
		<PROPERTY NAME="RemainingWrites"  TYPE="q">		</PROPERTY>	
        <!-- 当前版本信息:从硬件寄存器读取 -->		
		<PROPERTY NAME="FirmwareVersion"  TYPE="u">		</PROPERTY>	
		<!-- 期望的版本信息：从配置文件获取，BMC和硬件共同维护 -->
		<PROPERTY NAME="ExpectFirmwareVersion"  TYPE="u">		</PROPERTY>		
        <!-- 固件加载准备动作 -->
		<PROPERTY NAME="PrepareAction"  TYPE="roa">	</PROPERTY>
        <!-- 固件加载完成动作 -->
		<PROPERTY NAME="FinishAction"  TYPE="roa">	</PROPERTY>
        <!-- 芯片类型, 0:英飞凌 PXE1610；1：英飞凌 PX8X4X； 2： TI TPS536X； 6： ST PM667X； 10： HI SD5003 -->
        <PROPERTY NAME="ChipType" TYPE="u">	 </PROPERTY>
        <!-- 关联部件对象 ComMotherBoard 或 ComPcieCard -->
        <PROPERTY NAME="ComponentObj" TYPE="ro"></PROPERTY>
	</CLASS>
    
    <CLASS NAME="ChipConfigMgnt">
		<!-- 关联的芯片对象 -->
		<PROPERTY NAME="RefChip" TYPE='ro'>		</PROPERTY>
		<!-- 升级文件保存在BMC中的路径 -->
		<PROPERTY NAME="FirmwareFileName"  TYPE="s">		</PROPERTY>	
        <!-- VRD芯片提供 page 0x2f， reg=0xc用来用户信息，此处产品用来保存版本信息
            但是VRD芯片无法保证该寄存器的默认值，因此，增加升级标志位，为1表示已经做过升级操作
            这时候，只需要校验版本号就可以了，如果标志位为0，则表示没有升过级，
			则要比较VRD寄存器的值与配置文件定义的值。此标志位要做掉电持久化			-->	
		<PROPERTY NAME="UpdateFlag"  TYPE="y">		</PROPERTY>	
        <!-- 芯片剩余写入次数:从硬件寄存器读取 -->		
		<PROPERTY NAME="RemainingWrites"  TYPE="q">		</PROPERTY>	
        <!-- 当前版本信息:从硬件寄存器读取 -->		
		<PROPERTY NAME="FirmwareVersion"  TYPE="y">		</PROPERTY>	
		<!-- 期望的版本信息：从配置文件获取，BMC和硬件共同维护 -->
		<PROPERTY NAME="ExpectFirmwareVersion"  TYPE="y">		</PROPERTY>		
        <!-- 固件加载准备动作 -->
		<PROPERTY NAME="PrepareAction"  TYPE="roa">	</PROPERTY>
        <!-- 固件加载完成动作 -->
		<PROPERTY NAME="FinishAction"  TYPE="roa">	</PROPERTY>
        <!-- 芯片类型：0：Si5345或共编码芯片初始默认值；1：Au5315；2：Si5345； 3：Au5325； 4：SA7710
			在完成初始化后，共编码芯片型号根据DeviceID来确认并反写到ChipType。-->
        <PROPERTY NAME="ChipType" TYPE="u">	 </PROPERTY>
	</CLASS>
    
    <!--VRD芯片固件升级管理-->
	<CLASS NAME="VRDUpgradeMgnt" ID="137">
		<!-- 芯片类型，BMC会根据芯片类型调用不同的so处理VRD升级 -->
		<PROPERTY NAME="ChipTypeArray" TYPE='au'>		</PROPERTY>
		<!-- 单板BomID寄存器 -->
		<PROPERTY NAME="BomID"  TYPE="y">		</PROPERTY>	
        <!-- VRD生效寄存器 R/W-->
		<PROPERTY NAME="ValidateVRD"  TYPE="y">		</PROPERTY>	
        <!-- VRD生效状态  R -->
		<PROPERTY NAME="ValidateStatue"  TYPE="y">		</PROPERTY>	
        <!-- VRD升级关联的CPLD芯片 -->
        <PROPERTY NAME="ReferCPLDChip"  TYPE="ro">		</PROPERTY>	
        <!-- CPLD芯片版本关联寄存器 -->
        <PROPERTY NAME="Cpld2VerReg"  TYPE="y">	</PROPERTY>
        <!-- CPLD芯片版本 -->
        <PROPERTY NAME="Cpld2Version"  TYPE="s">	</PROPERTY>
        <!-- CPLD芯片逻辑位号 -->
		<PROPERTY NAME="Cpld2UnitNum"  TYPE="u">	</PROPERTY>
        <!-- VRD升级完成标志 -->
		<PROPERTY NAME="UpgradeFlag"  TYPE="y" ID="1">	</PROPERTY>
		<!-- VRD升级后生效类型， 0 重启芯片生效   1 AC下电生效   不同板子配置不同值 机架V5 1，OSCA/ATLAS 0 -->
		<PROPERTY NAME="ValidateControlType"  TYPE="y">	</PROPERTY>
		<!-- VRD升级成功标志 0 未成功  1 成功 -->
		<PROPERTY NAME="ValidateFlag"  TYPE="y">	</PROPERTY>
		<!-- VRD升级后要执行的操作， 0 默认值  1 power on -->
		<PROPERTY NAME="ActionAfterValidateVRD"  TYPE="y">	</PROPERTY>
		<!-- VRD版本变更标志， 0 默认值  1 版本变更 -->
		<PROPERTY NAME="VersionChangeFlag"  TYPE="y" ID="2">	</PROPERTY>
		<!-- VRD生效写保护寄存器  R/W -->
		<PROPERTY NAME="WriteProtection"  TYPE="y">		</PROPERTY>
        <!-- VRD独立升级方法 0 ：随大包升级、1 ： 页面独立升级、其他值待扩展 -->
		<PROPERTY NAME="VrdUpgradeType" TYPE="y"></PROPERTY>
		<!-- VRD Version -->
		<PROPERTY NAME="VRDVersion"  TYPE="s">		</PROPERTY>
        <!-- 关联部件对象 ComMotherBoard 或 ComPcieCard -->
        <PROPERTY NAME="ComponentObj" TYPE="ro"></PROPERTY>
		<!-- 更新VRD信息 -->
		<METHOD NAME="SetVRDValidateFlag">
            <PARAMETER TYPE="y" NAME="VRDValidateFlag" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetVRDValidateAction">
            <PARAMETER TYPE="y" NAME="VRDValidateAction" DIR="in"/>
		</METHOD>
	</CLASS>
	<!--VRD芯片固件升级管理辅助类-->
	<CLASS NAME="VRDUpgradeMgntAssist">
        <!-- VRD生效寄存器 R/W-->
		<PROPERTY NAME="ValidateVRD"  TYPE="y">		</PROPERTY>	
        <!-- VRD生效状态  R -->
		<PROPERTY NAME="ValidateStatue"  TYPE="y">		</PROPERTY>
	</CLASS>
			<!-- BMC支持给CMC VMA信息中转-->
	<CLASS NAME="Supportcmcvma">
		<!-- 信息内容 VMA工作状态-->
		<PROPERTY NAME="VMAWorkStatus" TYPE="y">	</PROPERTY>
		<!-- 信息内容 CMC IP -->
		<PROPERTY NAME="CMCFloatIP" TYPE="s">	</PROPERTY>
		<!-- 信息内容 CMC SUBMASK -->
		<PROPERTY NAME="CMCFloatMASK" TYPE="s">	</PROPERTY>
		<!-- 信息内容 CMC GATEWAY IP -->
		<PROPERTY NAME="CMCGateWayIP" TYPE="s">	</PROPERTY>		
		<!-- 信息内容 VMA IP -->
		<PROPERTY NAME="HyperVisorIP" TYPE="s">	</PROPERTY>
		<!-- 信息内容 VMA SUBMASK -->
		<PROPERTY NAME="HyperVisorMASK" TYPE="s">	</PROPERTY>
		<!-- 信息内容 VMA GATEWAY IP -->
		<PROPERTY NAME="HyperVisorGateWayIP" TYPE="s">	</PROPERTY>	
	</CLASS>
	
	<!-- 此类适用于监控缓起电压异常时保护X86下电功能 -->
	<CLASS NAME="ChipValueChecker">
	    <PROPERTY NAME="Enable" TYPE='y'>		</PROPERTY>
	    <!-- 关联的ChipValueReader对象组 -->
		<PROPERTY NAME="RefObj" TYPE='roa'>		</PROPERTY>
		<!-- 关联的ChipValueReader对象组各对象的关系；
		     0表示或，任意一个对象的OperatorResult为1就执行Action的动作
			 1表示与，要所有对象的OperatorResult都为1才执行Action的动作 -->        
		<PROPERTY NAME="ObjOperator" TYPE='y'>		</PROPERTY>
        <!-- 操作符，0表示默认不做任何动作， 1表示满足条件后强制下电X86 -->		
		<PROPERTY NAME="Action" TYPE='y'>		</PROPERTY>
		<!-- 强制下电标志，需要复位持久化，当Payload模块识别到这个为1的时候，不允许上电 -->	
		<PROPERTY NAME="ForcePwrOffFlag" TYPE='y'>		</PROPERTY>
	</CLASS>
	
		<!-- 此类适用于E9000刀片缓起功能 -->
	<CLASS NAME="ChipValueReader">
	    <!-- 是否要读取硬件值，0表示不用读取，1表示要读取 -->
	    <PROPERTY NAME="Enable" TYPE='y'>		</PROPERTY>
	    <!-- 对于VDDQ芯片，读电压寄存器前，需要先写寄存器，此用来关联先写的Accessor，没有的话，不需要关联-->
		<PROPERTY NAME="RegWriteRefObj" TYPE='ro'>		</PROPERTY>
		<!-- 需要写的值 -->
		<PROPERTY NAME="RegWriteData" TYPE='u'>		</PROPERTY>
		<!-- 读寄存器的Accessor -->
		<PROPERTY NAME="RegReadRefObj" TYPE='ro'>		</PROPERTY>
		<!-- 寄存器的原始值 -->
		<PROPERTY NAME="RawValue" TYPE='u'>		</PROPERTY>
	    <!-- 对于VDDQ芯片，读电压寄存器后，需要写寄存器恢复，此用来关联先写的Accessor，没有的话，不需要关联-->
		<PROPERTY NAME="RegWriteRefObj2" TYPE='ro'>		</PROPERTY>
		<!-- 需要写的值 -->
		<PROPERTY NAME="RegWriteData2" TYPE='u'>		</PROPERTY>
		<!-- 比例因子 -->
		<PROPERTY NAME="M" TYPE='d'>		</PROPERTY>
		<!-- 计算后的真实值 -->
		<PROPERTY NAME="Value" TYPE='d'>		</PROPERTY>
		<!-- 防抖次数，各个产品不尽相同，需要修改 -->		
		<PROPERTY NAME="DebounceCount" TYPE='y'>		</PROPERTY>
		<!-- 防抖后计算得到的数值 -->		
		<PROPERTY NAME="DebounceValue" TYPE='d'>		</PROPERTY>
		<!-- 门限值 -->
		<PROPERTY NAME="Threshold" TYPE='d'>		</PROPERTY>
		<!-- 操作符，0表示默认， 1表示小于，即 DebounceValue 小于 Threshold -->
		<PROPERTY NAME="Operator" TYPE='y'>		</PROPERTY>
		<!-- 比较的结果 -->		
		<PROPERTY NAME="OperatorResult" TYPE='y'>		</PROPERTY>
		<!-- 合理读值的下限 -->		
		<PROPERTY NAME="NormalMin" TYPE='d'>		</PROPERTY>
		<!-- 合理读值的上限 -->		
		<PROPERTY NAME="NormalMax" TYPE='d'>		</PROPERTY>
	</CLASS>
	<!-- 光模块 -->
	<CLASS NAME="OpticalModule">
		<!-- 光模块所在的网口 -->
		<PROPERTY NAME="RefPortObj" TYPE="ro"> </PROPERTY>
		<!-- BMA ID索引信息 -->
		<PROPERTY NAME="BMAId" TYPE="s"></PROPERTY>
		<!-- 光模块的在位  -->
		<PROPERTY NAME="Present" TYPE="y">		</PROPERTY>
		<!-- 光模块上电状况 =1上电 =0下电 -->
        <PROPERTY NAME="PowerStatus" TYPE="y">  </PROPERTY>
		<!-- 厂商名称 -->
		<PROPERTY NAME="VendorName" TYPE="s"></PROPERTY>
		<!-- 厂商部件名称 -->
		<PROPERTY NAME="PartNumber" TYPE="s"></PROPERTY>
		<!-- 厂商序列号 --> 
		<PROPERTY NAME="SerialNumber" TYPE="s"></PROPERTY>
		<!-- 生产日期 --> 
		<PROPERTY NAME="ManufactureDate" TYPE="s"></PROPERTY>
		<!-- 收发器类型 --> 
		<PROPERTY NAME="TransceiverType" TYPE="s"></PROPERTY>
		<!-- 波长 --> 
		<PROPERTY NAME="Wavelength" TYPE="s"></PROPERTY>
		<!-- 传输模式 --> 
		<PROPERTY NAME="MediumMode" TYPE="s"></PROPERTY>
		<!-- 当前温度 Celsius --> 
		<PROPERTY NAME="TempCurrent" TYPE="d"></PROPERTY>
		<!-- 高温告警阈值 Celsius --> 
		<PROPERTY NAME="TempHighAlarm" TYPE="d"></PROPERTY>
		<!--  低温告警阈值 Celsius --> 
		<PROPERTY NAME="TempLowAlarm" TYPE="d"></PROPERTY>
		<!-- 高温警告阈值 Celsius --> 
		<PROPERTY NAME="TempHighWarn" TYPE="d"></PROPERTY>
		<!-- 低温警告阈值 Celsius --> 
		<PROPERTY NAME="TempLowWarn" TYPE="d"></PROPERTY>
		<!-- 当前电压 Volts --> 
		<PROPERTY NAME="VccCurrent" TYPE="d"></PROPERTY>
		<!--  高压告警阈值 Volts --> 
		<PROPERTY NAME="VccHighAlarm" TYPE="d"></PROPERTY>
		<!-- 低压告警阈值 Volts --> 
		<PROPERTY NAME="VccLowAlarm" TYPE="d"></PROPERTY>
		<!-- 高压警告阈值 Volts --> 
		<PROPERTY NAME="VccHighWarn" TYPE="d"></PROPERTY>
		<!-- 低压警告阈值 Volts --> 
		<PROPERTY NAME="VccLowWarn" TYPE="d"></PROPERTY>
		<!-- 当前发送偏置电流 Milliampere --> 
		<PROPERTY NAME="TxBiasCurrent" TYPE="ad"></PROPERTY>
		<!-- 发送偏置电流告警上限阈值 Milliampere --> 
		<PROPERTY NAME="TxBiasHighAlarm" TYPE="d"></PROPERTY>
		<!-- 发送偏置电流告警下限阈值 Milliampere --> 
		<PROPERTY NAME="TxBiasLowAlarm" TYPE="d"></PROPERTY>
		<!-- 发送偏置电流警告上限阈值 Milliampere --> 
		<PROPERTY NAME="TxBiasHighWarn" TYPE="d"></PROPERTY>
		<!-- 发送偏置电流警告下限阈值 Milliampere --> 
		<PROPERTY NAME="TxBiasLowWarn" TYPE="d"></PROPERTY>
		<!-- 当前发送功率 Milliwatt ,提供给web，redfish显示--> 
		<PROPERTY NAME="TxPowerCurrent" TYPE="ad"></PROPERTY>
		<!-- 发送功率告警上限阈值 Milliwatt --> 
		<PROPERTY NAME="TxPowerHighAlarm" TYPE="d"></PROPERTY>
		<!-- 发送功率告警下限阈值 Milliwatt --> 
		<PROPERTY NAME="TxPowerLowAlarm" TYPE="d"></PROPERTY>
		<!-- 发送功率警告上限阈值 Milliwatt --> 
		<PROPERTY NAME="TxPowerHighWarn" TYPE="d"></PROPERTY>
		<!-- 发送功率警告下限阈值 Milliwatt --> 
		<PROPERTY NAME="TxPowerLowWarn" TYPE="d"></PROPERTY>
		<!-- 当前接收功率 Milliwatt ,提供给web，redfish显示 --> 
		<PROPERTY NAME="RxPowerCurrent" TYPE="ad"></PROPERTY>
		<!-- 接收功率告警上限阈值 Milliwatt --> 
		<PROPERTY NAME="RxPowerHighAlarm" TYPE="d"></PROPERTY>
		<!-- 接收功率告警下限阈值 Milliwatt --> 
		<PROPERTY NAME="RxPowerLowAlarm" TYPE="d"></PROPERTY>
		<!-- 接收功率警告上限阈值 Milliwatt --> 
		<PROPERTY NAME="RxPowerHighWarn" TYPE="d"></PROPERTY>
		<!-- 接收功率警告下限阈值 Milliwatt --> 
		<PROPERTY NAME="RxPowerLowWarn" TYPE="d"></PROPERTY>
 
		<!-- 光模块类型 --> 
		<PROPERTY NAME="Type" TYPE="s"></PROPERTY>
		<!-- 光模块速率 --> 
		<PROPERTY NAME="Speed" TYPE="as"></PROPERTY>
		<!--  指示类型是否匹配 --> 
		<PROPERTY NAME="TypeMatch" TYPE="y"></PROPERTY>
		<!-- 指示速率是否匹配 --> 
		<PROPERTY NAME="SpeedMatch" TYPE="y"></PROPERTY>
		
		<!-- 无告警——0  一般告警——1 严重告警——2 紧急告警——3 -->
		<PROPERTY NAME="Health" TYPE="y" >	</PROPERTY>
		<!--光模块通道数 SFP为1，QSFP为4 --> 
		<PROPERTY NAME="ChannelNum" TYPE="y" >	</PROPERTY>
		
		<!-- 按bit位指示是否有告警 -->
		<PROPERTY NAME="DiagStatus" TYPE="au"></PROPERTY>
		<PROPERTY NAME="DiagStatusPre" TYPE="au"></PROPERTY>
		<PROPERTY NAME="DiagStatusMerge" TYPE="u"></PROPERTY>
		<PROPERTY NAME="Indentifier" TYPE="s"></PROPERTY>
		<PROPERTY NAME="ConnectorType" TYPE="s"></PROPERTY>
		<PROPERTY NAME="DeviceType" TYPE="s"></PROPERTY>
		<PROPERTY NAME="TransferDistance" TYPE="q"></PROPERTY>
		<!-- 按bit位指示是否有告警 -->
		<PROPERTY NAME="RxLosState" TYPE="y"></PROPERTY>
		<!-- 按bit位指示是否有告警 -->
		<PROPERTY NAME="TxFultState" TYPE="y"></PROPERTY>
        <!--光模块低速IO信号 Page03 byte169 (RESETL:bit3/MODSELL:bit2/LPMODE:bit1/INTL:bit0) --> 
		<PROPERTY NAME="LowSpeedIOInfo" TYPE="y" >	</PROPERTY>
		<METHOD NAME="SetOpticalModuleTemp">
			<PARAMETER TYPE="d" NAME="Temp" DIR="in"/>
		</METHOD> 
		<!-- 从MCU更新光模块信息，比如厂商名称、部件名称、波长、温度、偏置电流、功耗、电压等 -->
		<METHOD NAME="UpdateOpticalPropInfo">
            <PARAMETER TYPE="s" NAME="rsc_str" DIR="in"/>
		</METHOD>
        <!-- 设置光模块电源状态 -->
		<METHOD NAME="SetPowerStatus">
            <PARAMETER TYPE="y" NAME="status" DIR="in"/>
		</METHOD>
        <!-- 设置光模块例测状态 -->
		<METHOD NAME="SetScanStatus">
            <PARAMETER TYPE="y" NAME="status" DIR="in"/>
		</METHOD>
        <!-- 获取光模块例测状态 -->
		<METHOD NAME="GetScanStatus">
            <PARAMETER TYPE="y" NAME="status" DIR="out"/>
		</METHOD>
		<CLASS NAME="VirOpticalModule">
		</CLASS>
    </CLASS>
	
	<!-- OAM信息 -->
	<CLASS NAME="OAM">
			<!-- OAM所在的网口 -->
		<PROPERTY NAME="RefPortObj" TYPE="ro"> </PROPERTY>
		<!-- BMA ID索引信息 -->
		<PROPERTY NAME="BMAId" TYPE="s"></PROPERTY>
		
		<!-- OAM开启状态  1：开启 0：关闭-->
		<PROPERTY NAME="IsOAMEnabled" TYPE="y"></PROPERTY>
		<!-- OAM链路告警状态 0：未告警 1：告警 -->
		<PROPERTY NAME="OAMLostLinkState" TYPE="y"></PROPERTY>
		<!-- 接收到CRC校验错误的OAM报文数 -->
		<PROPERTY NAME="OAMErrPktCnt" TYPE="u"></PROPERTY>
	</CLASS>
  <!-- 
    描述：FDM设备树类
    所属模块：diagnose 故障诊断模块-->
	<CLASS NAME="TreeNode" >
		<!--部件对象引用的信息-->
		<PROPERTY NAME="RefComponent"  TYPE="ro">  </PROPERTY>
		<!-- 部件详细信息对象引用的信息,若为空则说明此节点为虚拟设备（目录） -->
		<PROPERTY NAME="RefFruObj"  TYPE="ro">  </PROPERTY>
		<!--树节点的基本信息 ：NA表示此设备没有SN信息能力-->
		<PROPERTY NAME="SN"  TYPE="s">  </PROPERTY>
		<PROPERTY NAME="PriorSN"  TYPE="s">  </PROPERTY>
		<PROPERTY NAME="Presence"  TYPE="y">  </PROPERTY>
		<PROPERTY NAME="OnlineTime"  TYPE="u">  </PROPERTY>
		<!-- 0->1 后延时1S后自动清除-->
		<PROPERTY NAME="ReplaceFlag"  TYPE="y">  </PROPERTY>
		<!-- 树的信息 -->
		<!-- bit1表示该节点在位且没有子节点的情况下否显示，1显示，0不显示 -->
		<!-- bit2是否展开成根目录：1展开，0不展开 -->
		<!-- bit4是否是否为级联的分裂节点，1:是，0:否 -->
		<!-- bit5是否需要显示：0显示， 1不显示,显示子节点:  A->B->C 显示成 A->C  -->
    <!-- bit6是否为动态节点： 需要配置资源归属的 内容 硬盘 PCIe卡-->
		<!-- bit8是否为根节点：1根节点，0非根节点 -->
    <!-- bit7是否为分裂节点：1可以分裂（硬盘背板），0不分裂 -->
		<PROPERTY NAME="NodeType"  TYPE="y">  </PROPERTY>
		<!--父节点对象，可以为TreeNode对象或Anchor对象 -->
		<PROPERTY NAME="ParentObj"  TYPE="ro">  </PROPERTY>
    <!--父节点隐含关系，现在用于板卡对象和主板对象之间，优先使用HideRelationObj，然后使用HideRelationObjStr-->
    <PROPERTY NAME="HideRelationObj"  	TYPE="ro"> </PROPERTY>
		<!--父节点隐含关系，现在用于Hdd和Raid之间-->
		<PROPERTY NAME="HideRelationObjStr"  TYPE="s">  </PROPERTY>
		<!-- 子树对象数组 -->
		<PROPERTY NAME="SubTree"  TYPE="roa">  </PROPERTY>
		<!-- 内部节点数组 -->
		<PROPERTY NAME="InnerTree"  TYPE="roa">  </PROPERTY>
		<!-- 节点的在什么时候做扫描并更新:  扫描条件, 低2bit：0不扫描，1AC上电; 2业务上电; 3BIOS上报结束; -->
		<PROPERTY NAME="UpdateMode"  TYPE="y">  </PROPERTY>
	</CLASS>
	<!--辅助FDM诊断设备树TreeNode配置，增强实现树节点关系拓扑配置-->
	<CLASS NAME="PIPE" >
		<!--ID:管道路径编号-->
		<PROPERTY NAME="ID"  TYPE="y">  </PROPERTY>
		<PROPERTY NAME="SecID"  TYPE="y">  </PROPERTY>
		<PROPERTY NAME="TYPE"  TYPE="y">  </PROPERTY>
		<PROPERTY NAME="Presence"  TYPE="y">  </PROPERTY>
		<!--管道的下一级 （Next）-->
		<PROPERTY NAME="UpLink"  TYPE="ro">  </PROPERTY>
		<!--管道的上一级 （Prev）-->
		<PROPERTY NAME="SubLink"  TYPE="ro">  </PROPERTY>
	</CLASS>
	
	<CLASS NAME="RegAction">
		<!--器件所在单板槽位号-->
		<PROPERTY NAME="SlotId" TYPE="y"></PROPERTY>
		<!--Action索引，用于区分不同的器件，全局唯一-->
		<PROPERTY NAME="OverallIndex" TYPE="y"></PROPERTY>
		<!--器件名称-->
		<PROPERTY NAME="DeviceName" TYPE="s"></PROPERTY>		
		<!--bit0:  启动时条件为1触发
 		    bit1:  热插拔时条件为1触发
 		    bit2:  属性动态变化时条件为1触发
 		    bit3-7:  保留
			如果无需监听上述事件，将该属性配置成0即可
		-->
		<PROPERTY NAME="TriggerType" TYPE="y"></PROPERTY>
		<!--关联条件，该属性无需配置，用于属性动态监听-->
		<PROPERTY NAME="Condition" TYPE="y"></PROPERTY>
		<!--关联条件，启动、热插拔、属性动态变化时判断是否为1-->
		<PROPERTY NAME="ConditionSrc" TYPE="y"></PROPERTY>
		<!--关联Chip类，用于指定写入寄存器值的器件-->
        <PROPERTY NAME="RefChip" TYPE="roa"></PROPERTY>
		<!--Chip相关联的器件位号，用于一键导出标志不同器件-->
        <PROPERTY NAME="LogicUnitArray" TYPE="as"></PROPERTY>
		<!--寄存器配置表，关联RegConfig对象-->
		<PROPERTY NAME="ConfigTable" TYPE="roa"></PROPERTY>
		<!--配置结果，0为配置失败，1为配置成功-->
		<PROPERTY NAME="ConfigResult" TYPE="y"></PROPERTY>
		<!-- 方法：触发RegAction配置 -->
		<METHOD NAME="StartRegAction">
        </METHOD>
		<!-- 方法：检查RegAction配置 -->
		<METHOD NAME="CheckRegAction">
			<PARAMETER DIR="out" NAME="Status" TYPE="y"/>
        </METHOD>
    </CLASS>
	
    <CLASS NAME="RegConfig">
		<!--器件寄存器地址-->
        <PROPERTY NAME="Offset" TYPE="u"></PROPERTY>
		<!--器件寄存器写入的值-->
		<PROPERTY NAME="DataSet" TYPE="ay"></PROPERTY>
		<!--回读时配置的掩码-->
		<PROPERTY NAME="MaskSet" TYPE="ay"></PROPERTY>
		<!--是否需要屏蔽校验（与写入后校验不同），1为屏蔽校验-->
		<PROPERTY NAME="IsShieldCheck" TYPE="y"></PROPERTY>
		<!--校验使能，写入数据后隔一段时间检测与预期写入值相符-->
		<PROPERTY NAME="VerifyEnable" TYPE="y"></PROPERTY>
		<!--校验间隔，间隔特定ms之后回读-->
		<PROPERTY NAME="VerifyInterval" TYPE="u"></PROPERTY>
		<!--出错重试次数，不配置默认为1-->
		<PROPERTY NAME="RetryCount" TYPE="y"></PROPERTY>
		<!--在写之前是否要先校验器件是否已经正确，如果正确则不需要下发配置，
			0：不需要预先校验；1：需要预先校验-->
		<PROPERTY NAME="CheckBeforeWrite" TYPE="y"></PROPERTY>
    </CLASS>
	<!-- 
	描述：编排配置类
	-->
	<CLASS NAME="Composition" ID="106">	
		<!-- 编排配置控制Id -->
		<PROPERTY NAME="Id"  TYPE="q">		</PROPERTY>
		<!-- 槽位信息 -->
		<PROPERTY NAME="Slot"  TYPE="y" ID="3">		</PROPERTY>
		<PROPERTY NAME="IsActivateImmediately"  TYPE="y" ID="6">		</PROPERTY>
		<!-- 待生效的模式Id -->
		<PROPERTY NAME="PendingSettingId"  TYPE="y" ID="2" >		</PROPERTY>
		<!-- 当前生效的模式Id -->
		<PROPERTY NAME="CurrentSettingId"  TYPE="y" ID="1">		</PROPERTY>
		<!-- 默认配置模式Id -->
		<PROPERTY NAME="DefaultSettingId"  TYPE="y" ID="5" EXPORT="18">		</PROPERTY>
		<!-- 拓扑配置状态:0x00，默认状态;0x01，正在配置;0x02，配置完成;0x03，配置超时 -->
		<PROPERTY NAME="TopologyConfigStatus"  TYPE="y" ID="4">		</PROPERTY>
		<!-- 配置模式Id数据来源:0x00， 优先从Eeprom取数据；0x01，从XML中获取数据-->
		<PROPERTY NAME="IsSettingFromXML"  TYPE="y">		</PROPERTY>
		<!-- 方法：配置编排模式 -->
		<METHOD NAME="ConfigComposition" ID="2">
			<PARAMETER DIR="in" NAME="Id" TYPE="y"/>
		</METHOD>
		<METHOD NAME="ConfigActivateType" ID="6">
			<PARAMETER DIR="in" NAME="Id" TYPE="y"/>
		</METHOD>
		<METHOD NAME="SetAgentProperty">	
		    <PARAMETER TYPE="s" NAME="PropertyName" DIR="in"/>	
			<PARAMETER TYPE="*" NAME="PropertyVal" DIR="in"/>	
			<PARAMETER TYPE="u" NAME="SaveOption" DIR="in"/>	
		</METHOD>
		<!-- 同步编排类 -->
		<CLASS NAME="PeripheralComposition">
		<!-- 同步目标 -->
			<PROPERTY NAME="Target" TYPE='ro'>                      </PROPERTY>         
		</CLASS>
	</CLASS>
	
	<!-- 编排模式类 -->
	<CLASS NAME="CompositionSetting" ID="107">	
		<!-- 编排模式Id -->
		<PROPERTY NAME="Id"  TYPE="y" ID="1">		</PROPERTY>
		<!-- 是否正在启用 -->
		<PROPERTY NAME="IsActive"  TYPE="y" ID="2">		</PROPERTY>
		<!-- 模式是否可用 -->
		<PROPERTY NAME="SettingAvaliable"  TYPE="y" ID="3">		</PROPERTY>
		<!-- Zone Id列表 -->
		<PROPERTY NAME="Zones"  TYPE="ay">	</PROPERTY>
		<!-- 生效方式 ,0：写寄存器生效;1：加载Bin生效-->
		<PROPERTY NAME="TakeEffectType"  TYPE="y">	</PROPERTY>
		<!-- 模式生效需要配置的对象 -->
		<PROPERTY NAME="ConfigApplyObj"  TYPE="roa">	</PROPERTY>
	</CLASS>
	
	<!-- 编排Zone，一个Zone包含上下行部件 -->
	<CLASS NAME="CompositionZone">	
		<!-- 编排Zone Id -->
		<PROPERTY NAME="Id"  TYPE="y">		</PROPERTY>
		<!-- Zone关联的模式Id -->
		<PROPERTY NAME="SettingIds"  TYPE="ay">		</PROPERTY>
		<!-- 上行Endpoints描述 -->
		<PROPERTY NAME="UpsideEndpoints"  TYPE="as">		</PROPERTY>
		<!-- 上行Endpoints关联的Switch Id -->
		<PROPERTY NAME="UpsideSwitchIds"  TYPE="ay">		</PROPERTY>
		<!-- 上行Endpoints关联的Switch 类型 -->
		<PROPERTY NAME="UpsideSwitchType"  TYPE="as">		</PROPERTY>
		<!-- Switch关联的端口标号 -->
		<PROPERTY NAME="UpsidePortIds"  TYPE="ay">		</PROPERTY>
		<!-- 上行Switch口带宽 -->
		<PROPERTY NAME="UpsidePortWidth"  TYPE="as">		</PROPERTY>
		<!-- 下行Endpoints描述 -->
		<PROPERTY NAME="DownsideEndpoints"  TYPE="as">		</PROPERTY>
		<!-- 下行Endpoints关联的Switch Id -->
		<PROPERTY NAME="DownsideSwitchIds"  TYPE="ay">		</PROPERTY>
		<!-- 下行Endpoints关联的Switch 类型 -->
		<PROPERTY NAME="DownsideSwitchType"  TYPE="as">		</PROPERTY>
		<!-- Switch关联的端口标号 -->
		<PROPERTY NAME="DownsidePortIds"  TYPE="ay">		</PROPERTY>
		<!-- 下行Switch口带宽 -->
		<PROPERTY NAME="DownsidePortWidth"  TYPE="as">		</PROPERTY>
	</CLASS>
	
	<!-- 编排Endpoint：一个Endpoint代表可配置部件描述 -->
	<CLASS NAME="CompositionEndpoint">	
		<!-- Id -->
		<PROPERTY NAME="Id"  TYPE="y">		</PROPERTY>
		<!-- 健康状态 -->
		<PROPERTY NAME="Health"  TYPE="y">		</PROPERTY>
		<!-- 型号信息 -->
		<PROPERTY NAME="Model"  TYPE="s">		</PROPERTY>
		<!-- 描述 -->
		<PROPERTY NAME="Description"  TYPE="s">		</PROPERTY>
		<!-- 厂商 -->
		<PROPERTY NAME="Manufacture"  TYPE="s">		</PROPERTY>
		<!-- 附加厂商描述 -->
		<PROPERTY NAME="SubVendorInfo"  TYPE="s">		</PROPERTY>
		<!-- 附加设备描述 -->
		<PROPERTY NAME="SubDeviceInfo"  TYPE="s">		</PROPERTY>
		<!-- 厂商ID -->
		<PROPERTY NAME="VenderId" TYPE="q" >			</PROPERTY>
		<!-- 设备ID -->
		<PROPERTY NAME="DeviceId" TYPE="q" >			</PROPERTY>
		<!-- 厂商Sub ID -->
		<PROPERTY NAME="SubVenderId" TYPE="q">			</PROPERTY>
		<!-- 设备Sub ID -->
		<PROPERTY NAME="SubDeviceId" TYPE="q">			</PROPERTY>
        <!-- 引用对象Component -->
		<PROPERTY NAME="RefComponent" TYPE="ro">			</PROPERTY>
        <!-- Endpoint协议，描述字符串符合Redfish中Storage.v1_0_0.Protocol定义 -->
		<PROPERTY NAME="Protocol" TYPE="s">			</PROPERTY>
        <!-- Endpoint类型：
        StorageInitiator，存储控制器，如PCIe Raid卡
        RootComplex，主机类型
        NetworkController，网卡类型
        Drive，硬盘类型
        StorageExpander，存储扩展板
        DisplayController，显卡类型
        Bridge，桥
        Processor，处理器，如CPU
        -->
		<PROPERTY NAME="EntityType" TYPE="s">			</PROPERTY>
		<METHOD NAME="SetAgentProperty">	
		    <PARAMETER TYPE="s" NAME="PropertyName" DIR="in"/>	
			<PARAMETER TYPE="*" NAME="PropertyVal" DIR="in"/>	
			<PARAMETER TYPE="u" NAME="SaveOption" DIR="in"/>	
		</METHOD>
	</CLASS>
	
	<CLASS NAME="EndpointIdentifier">
		<!-- 句柄Id -->
		<PROPERTY NAME="Id"  TYPE="y">		</PROPERTY>
		<!-- 短名称 -->
		<PROPERTY NAME="ShortName"  TYPE="s">		</PROPERTY>
		<!-- 在位信息 -->
		<PROPERTY NAME="Presence"  TYPE="y">		</PROPERTY>
		<!-- Endpoint位置信息，EndpointIdentifier和Endpoint在同一级时，此处填0xffffffff，
		接口层根据Id确定EndpointIdentifier和Endpoint关系-->
		<PROPERTY NAME="Position"  TYPE="u">		</PROPERTY>
		<!-- 所在容器 -->
		<PROPERTY NAME="Container"  TYPE="s">		</PROPERTY>
		<!-- 容器在位信息 -->
		<PROPERTY NAME="ContainerPresence"  TYPE="y">		</PROPERTY>
        <!-- 归属域信息:当前为节点槽位号 -->
		<PROPERTY NAME="DomainId"  TYPE="y">		</PROPERTY>
                 <PROPERTY NAME="Visible"  TYPE="y">            </PROPERTY>
		<METHOD NAME="SetAgentProperty">	
		    <PARAMETER TYPE="s" NAME="PropertyName" DIR="in"/>	
			<PARAMETER TYPE="*" NAME="PropertyVal" DIR="in"/>	
			<PARAMETER TYPE="u" NAME="SaveOption" DIR="in"/>	
		</METHOD>		
	</CLASS>
	
	<!-- 可通过I2C升级的芯片类，例如CPLD等，通过此类关联各类信息 -->
		<CLASS NAME="ChipUpgradeByI2C">
		<!-- 关联的Component对象，获取BoardID等信息 -->
		<PROPERTY NAME="ComponentObj"  TYPE="ro">	</PROPERTY>
		<!-- 关联的Chip对象，读写都通过这个Chip -->
		<PROPERTY NAME="ChipObj"  TYPE="ro">	</PROPERTY>
		<!-- 启动生效线程的条件，为 1 时启动，可以通过表达式来达成组合条件判断，例如某寄存器值数值为xx时 -->
		<PROPERTY NAME="ValidCondition"  TYPE="y">	</PROPERTY>
		<!-- 执行生效线程的条件，为 1 时启动，可以通过表达式来达成组合条件判断，例如 X86下电等 -->
		<PROPERTY NAME="StartValidCondition"  TYPE="y">	</PROPERTY>
		<!-- 升级后要执行的动作 类似Firmware类的FinishAction，可以给刷新属性或者寄存器 -->
		<PROPERTY NAME="ActionAfterUpgrade"  TYPE="roa">	</PROPERTY>
		<!-- 生效后要执行的动作 类似Firmware类的FinishAction，可以给刷新属性或者寄存器 -->
		<PROPERTY NAME="ActionAfterValid"  TYPE="roa">	</PROPERTY>
	</CLASS>
	
	<!-- Repeater器件管理类-->
	<CLASS NAME="RepeaterMgnt">
		<!--相关联的RegAction索引号，需要与RegAction相匹配-->
        <PROPERTY NAME="RegActionIndex" TYPE="ay"></PROPERTY>
		<!--配置Repeater的触发条件，下电允许触发，即该属性为0时-->
		<PROPERTY NAME="Trigger" TYPE="y"></PROPERTY>
		<!--允许上电状态，可关联硬件，0为不允许，1为允许-->
		<PROPERTY NAME="Status" TYPE="y"></PROPERTY>
    </CLASS>
    <!-- SAS Redriver器件管理类-->
	<CLASS NAME="SASRedriverMgnt">
		<PROPERTY NAME="SlotId" TYPE="y"></PROPERTY>
		<PROPERTY NAME="RegStartOffset" TYPE="u"></PROPERTY>
		<PROPERTY NAME="RegNumber" TYPE="u"></PROPERTY>
		<!--关联SAS redriver的Refchip-->
		<PROPERTY NAME="RefChip" TYPE="roa"></PROPERTY>
    </CLASS>

	<!-- V5单板的NAND Flash信息 -->
	<CLASS NAME="NandFlash">
		<!-- 厂商ID信息 -->
		<PROPERTY NAME="VID" TYPE="y"> </PROPERTY>
		<!-- 是否允许写入 1：禁止 0：允许 -->
		<PROPERTY NAME="WriteProtection" TYPE="y"></PROPERTY>		
		<!-- 已用寿命百分比-->
		<PROPERTY NAME="LifeTime" TYPE="y"></PROPERTY>
		<!-- EOL预警信息，按平均预留块来反映设备寿命-->
		<PROPERTY NAME="PreEOL" TYPE="y"></PROPERTY>
		<!-- 可用预留块百分比 -->
		<PROPERTY NAME="ReservedBlock" TYPE="y"></PROPERTY>
		<!-- 可用预留块数量,当前只有hynix提供 -->
		<PROPERTY NAME="ReservedBlockCnt" TYPE="u"></PROPERTY>
		<!-- 运行坏块数量,当前只有hynix提供 -->
		<PROPERTY NAME="RunTimeBadBlock" TYPE="u"></PROPERTY>		
		<!-- 已用寿命百分比阈值 -->
		<PROPERTY NAME="LifeThres" TYPE="y"></PROPERTY>
		<!-- 可用预留块阈值,当前只有hynix提供-->
		<PROPERTY NAME="BlockThres" TYPE="u"></PROPERTY>
		<!-- 装备测试已用寿命百分比阈值 -->
		<PROPERTY NAME="DftLifeThres" TYPE="y"></PROPERTY>
		<!-- 装备测试可用预留块 -->
		<PROPERTY NAME="DftBlockThres" TYPE="u"></PROPERTY>
		<!-- 写入量是否超过门限 1：超过  0：未超过 -->
		<PROPERTY NAME="OverWrite" TYPE="y"></PROPERTY>		
		<!-- 写入量门限,单位GB -->
		<PROPERTY NAME="WriteThres" TYPE="u"></PROPERTY>
		<PROPERTY NAME="Repaired" TYPE="y"></PROPERTY>
		<PROPERTY NAME="RWState" TYPE="y"></PROPERTY>
		<PROPERTY NAME="CsdRegInfo" TYPE="ay"></PROPERTY>
		<PROPERTY NAME="CsdExtRegInfo" TYPE="ay"></PROPERTY>
		<!-- 设置写入保护开关 -->
		<METHOD NAME="SetWriteProtection">
			<PARAMETER TYPE="y" NAME="flag" DIR="in"/>
		</METHOD> 
		<!-- 清除统计信息 -->
		<METHOD NAME="ClearFlashStatistics">			
		</METHOD>	
	</CLASS>
	
	<!-- 厂商的NAND Flash信息 -->
	<CLASS NAME="NandInfo">
		<!-- 厂商ID信息 -->
		<PROPERTY NAME="VID" TYPE="y"> </PROPERTY>		
		<!-- 已用寿命百分比阈值 -->
		<PROPERTY NAME="LifeThres" TYPE="y"></PROPERTY>
		<!-- 可用预留块阈值,当前只有hynix提供-->
		<PROPERTY NAME="BlockThres" TYPE="u"></PROPERTY>
		<!-- 装备测试已用寿命百分比阈值 -->
		<PROPERTY NAME="DftLifeThres" TYPE="y"></PROPERTY>
		<!-- 装备测试可用预留块 -->
		<PROPERTY NAME="DftBlockThres" TYPE="u"></PROPERTY>
		<!-- 写入量门限,单位GB -->
		<PROPERTY NAME="WriteThres" TYPE="u"></PROPERTY>
	</CLASS>
	<!--该类用于上电条件判断-->
	<CLASS NAME="PowerOnCriteria">
		<!--关联FRU的ID-->
        <PROPERTY NAME="FruId" TYPE="y"></PROPERTY>
		<!--上电条件是否满足0:不满足，1:满足-->
		<PROPERTY NAME="IsMet" TYPE="y"></PROPERTY>
		<!--是否已经记录日志，初始值为0 0:未记录日志, 1:已经记录日志-->
		<PROPERTY NAME="LogRecord" TYPE="y"></PROPERTY>
		<!--上电限制条件的描述，用于显示-->
		<PROPERTY NAME="Description" TYPE="s"></PROPERTY>
	</CLASS>
	<!--该类用于下电条件判断-->
	<CLASS NAME="PowerOffCriteria">
		<!--下电条件是否满足0:不满足，1:满足-->
		<PROPERTY NAME="IsMet" TYPE="y"></PROPERTY>
	</CLASS>
    <CLASS NAME="StringFormator">
        <!-- 加载后，只赋一次值，引用属性值发生变化后不更新 -->
        <PROPERTY NAME="Value"  TYPE="s">	</PROPERTY>
        <!-- 格式化字符串，当前最大支持5个参数 -->
        <PROPERTY NAME="Format"  TYPE="s">	</PROPERTY>
        <!-- 格式化参数，支持字符串/整型/浮点型/引用类型。若是引用类型，引用的值必须在sensor模块初始化前初始化完成-->
        <PROPERTY NAME="Param1"  TYPE="*">	</PROPERTY>
        <PROPERTY NAME="Param2"  TYPE="*">	</PROPERTY>
        <PROPERTY NAME="Param3"  TYPE="*">	</PROPERTY>
        <PROPERTY NAME="Param4"  TYPE="*">	</PROPERTY>
        <PROPERTY NAME="Param5"  TYPE="*">	</PROPERTY>
    </CLASS>
    
	<!-- SMM主备管理类 -->
    <CLASS NAME="SMMBakMgnt">
        <!-- SMM板槽位号 -->
        <PROPERTY NAME="Slot"  TYPE="y">	</PROPERTY>
		<!-- 主备状态，1：主用板，0：备用板 -->
        <PROPERTY NAME="IsActive"  TYPE="y">	</PROPERTY>
		<!-- 主备使能开关，disable时保持当前主备状态，无需喂心跳 -->
        <PROPERTY NAME="IsEnabled"  TYPE="y">	</PROPERTY>
    </CLASS>
	<CLASS NAME="ComponentPowerCtrl">
		<!-- ComponentPowerCtrl的 入口检测条件，主要针对只允许装备使用的命令 -->
		<PROPERTY NAME="Condition"  TYPE="y"> 	</PROPERTY>
		<!-- Component所在槽位号 -->
		<PROPERTY NAME="Slot"  TYPE="q"> 	</PROPERTY>
		<!-- Component 的Device_type -->
		<PROPERTY NAME="CompType"  TYPE="y"> 	</PROPERTY>
		<!-- 当前器件的位置标识 0xffffffff 表示为默认不配置Position-->
		<PROPERTY NAME="Position"  TYPE="u"> 	</PROPERTY>
		<!-- 结合Set Device Info中的Device Info Parameter使用， 操作类型 0：强制下电 1：取消强制下电 2：强制复位 3：取消强制复位-->
		<PROPERTY NAME="OperateType"  TYPE="y"> 	</PROPERTY>
		<PROPERTY NAME="RefChip"  TYPE="ro"> 	</PROPERTY>
		<!-- 结合RegConfig使用 -->
	    <PROPERTY NAME="ConfigTable"  TYPE="roa">	</PROPERTY>
	</CLASS>
	
	<!--该类用于是否定制化HDD判断-->
	<CLASS NAME="StorageCfgCustomize"  ID="113">
		<!-- 硬盘槽位定制的类型ID，0: 默认，1:腾讯，其它:保留 -->
		<PROPERTY NAME="DiskSlotCustomId" TYPE="y" ID="1" EXPORT="17">		</PROPERTY>
		<!-- 设置硬盘槽位定制的类型Id  -->
		<METHOD NAME="SetDiskSlotCustomId" ID="1">
			<PARAMETER TYPE="y" NAME="CustomId" DIR="in"/>
        </METHOD>
	</CLASS>
	
		<!--该类用于USB Ports上下电管理-->
	<CLASS NAME="USBPortsMgnt">
		<!-- USB Hub下挂的USB口 -->
		<PROPERTY NAME="USBPortNum"  TYPE="y">	</PROPERTY>
		<PROPERTY NAME="USBPorts"  TYPE="roa">	</PROPERTY>
		<METHOD NAME="GetPortsPowerStatus"> </METHOD>
		<METHOD NAME="SetPortsPowerStatus">
		    <PARAMETER TYPE="y" NAME="PortIdx" DIR="in"/>
			<PARAMETER TYPE="y" NAME="Status" DIR="in"/>
		</METHOD>
	</CLASS>

	<CLASS NAME="USBPortPowerMgnt">
		<!-- 操作的Accessor -->
		<PROPERTY NAME="PortPowerStatus"  TYPE="y">	</PROPERTY>
	</CLASS>

	<!--该类用于USB端口切换-->
	<CLASS NAME="USBPortSwitch">
		<!-- 操作的Accessor -->
		<PROPERTY NAME="Destination"  TYPE="y">	</PROPERTY>
		<!-- 当前的状态， 默认为0：PCH --> 
		<PROPERTY NAME="State"  TYPE="y">		</PROPERTY>
	</CLASS>	

	<CLASS NAME="SensorShortTermSpecMonitor">
		<!-- 关联的硬件读值 --> 
		<PROPERTY NAME="SensorValue" TYPE="q" >		</PROPERTY>
		<!-- 掩码 -->
		<PROPERTY NAME="Mask" TYPE="q" >		</PROPERTY>
		<!-- 门限值 -->
		<PROPERTY NAME="Threshold" TYPE="q" >		</PROPERTY>
		<!-- 扫描条件，为1就开始扫描，为0的时候清除持续计数且停止累计计数但不清零  -->
		<PROPERTY NAME="ScanConditon" TYPE="y" >		</PROPERTY>
		<!-- 操作符， 0：表示SensorValue大于或者等于ThresholdValue满足条件，计数加1， 255表示默认值 -->
		<PROPERTY NAME="Operator" TYPE="y" >		</PROPERTY>
		<!-- 持续时间，单位为秒， 连续多长时间 SensorValue ContinueOperator ThresholdValue成立，则ContinueResult为1，否则ContinueResult为0
                        如ContinueTime为3600，ContinueOperator为0，则表示当持续一小时 SensorValue大于或者等于Threshold时ContinueResult为1， 否则为0 
                        只有当ContinueConditon为1的时候才开始才开始比较，为0的时候，将之前持续比较的结果清零						-->
		<PROPERTY NAME="ContinueTime" TYPE="u" >		</PROPERTY>
		<!-- 比较结果， 连续多少次 SensorValue ContinueOperator ThresholdValue的结果-->
	    <PROPERTY NAME="ContinueResult" TYPE="y" >		</PROPERTY>
		<!-- 累计时间，单位为秒， 累计多长时间 SensorValue TotalOperator ThresholdValue成立
                       要配合累计条件TotalCondition、操作符TotalOperator和累计计算周期ToalPeriodTime使用
                       如ToalPeriodTime=36000，TotalTime=7200，TotalOperator=0 就表示10小时内累计有2小时 SensorValue大于或者等于Threshold时TotalResult为1， 否则为0 -->
		<PROPERTY NAME="TotalTime" TYPE="u" >		</PROPERTY>
		<!-- 累计计算周期，单位为秒  -->
		<PROPERTY NAME="ToalPeriodTime" TYPE="u" >		</PROPERTY>
		<!-- 比较结果， 累计时间 SensorValue Operator ThresholdValue的结果-->
	    <PROPERTY NAME="TotalResult" TYPE="y" >		</PROPERTY>
		<!-- 累计时间计算采用的是划动窗口的机制，此属性表示窗口划动的周期，单位s。
		     例如ToalPeriodTime=36000（10小时），TotalCountFreshPeriod=3600（1小时）， 则表示的意思是，每满一个小时，就拿历史上最近的9小时的累计时间加上当前的时间计算  -->
		<PROPERTY NAME="TotalCountFreshPeriod" TYPE="u" >		</PROPERTY>
	</CLASS>
	
	<!-- 数据收集服务 -->
	<CLASS NAME="DataAcquisitionService" ID="114">
		<!-- 数据收集服务开启状态，0：关闭;1：开启 -->
		<PROPERTY NAME="Enable" TYPE='y' ID="1" EXPORT="17">		</PROPERTY>
		<!-- 活动数据库名称 -->
		<PROPERTY NAME="ActiveDBFileName" TYPE='s' >		</PROPERTY>
		<!-- DB文件最大占有量 -->
		<PROPERTY NAME="DBFileTotalSpaceMB" TYPE='u' >		</PROPERTY>
		<!-- 单个DB文件占用空间大小 -->
		<PROPERTY NAME="DBFileSplitThresholdMB" TYPE='u' >		</PROPERTY>
		<!-- 同步flash的频率,单位是分钟-->
		<PROPERTY NAME="MemSyncToFlashMin" TYPE='u'>			</PROPERTY>
        <!-- item数据库是否修复中 -->
		<PROPERTY NAME="ItemDBRepairState" TYPE="y">            </PROPERTY>
		<!-- 是否在升级时跳过回退数据采集数据库文件分区的处理, 0:需要回退, 1:无需回退, 新增单板配1-->
		<PROPERTY NAME="RollbackDBPartitionOmited" TYPE='y'></PROPERTY> 
		<!-- Tag表导出的进度 -->
                <PROPERTY NAME="TagExportState" TYPE='y' >        </PROPERTY>
                <!-- Metric表导出的进度 -->
                <PROPERTY NAME="MetricExportState" TYPE='y' >        </PROPERTY>
                <!-- DataPoint表导出的进度 -->
                <PROPERTY NAME="DataPointExportState" TYPE='y' >        </PROPERTY>
                <!-- 清空表的进度 -->
                <PROPERTY NAME="ClearState" TYPE='y' >        </PROPERTY>
               <METHOD NAME="SetServiceEnable" ID="1">
                     <PARAMETER TYPE="y" NAME="State" DIR="in"/>			
               </METHOD>
               <METHOD NAME="ExportTable">
                     <PARAMETER TYPE="s" NAME="DataSource" DIR="in"/>
                     <PARAMETER TYPE="s" NAME="FileName" DIR="out"/>
                     <PARAMETER TYPE="y" NAME="AuthType" DIR="in"/>					 
               </METHOD>
               <METHOD NAME="ClearTable">			
               </METHOD>
               <METHOD NAME="GetTableInfo">
                     <PARAMETER TYPE="y" NAME="Component" DIR="in"/>
                     <PARAMETER TYPE="y" NAME="MetricType" DIR="in"/>
                     <PARAMETER TYPE="u" NAME="StartTime" DIR="in"/>
                     <PARAMETER TYPE="u" NAME="EndTime" DIR="in"/>
                     <PARAMETER TYPE="s" NAME="OutInfo" DIR="out"/>
               </METHOD>
	</CLASS>

	<!-- 外部引用类，通过索引条件匹配到外部引用类，获取外部引用的属性信息 -->
	<CLASS NAME="ExternalRefInfo">
		<!-- 目标类 -->
		<PROPERTY NAME="TargetClass" TYPE='s' >		</PROPERTY>
		<!-- 目标类匹配引用属性，配置为空时不进行基准类和目标类的比较，只获取唯一的对象句柄 -->
		<PROPERTY NAME="TargetClassMatchProp" TYPE='s' >		</PROPERTY>
		<!-- 基准类匹配引用属性 -->
		<PROPERTY NAME="BasedClassMatchProp" TYPE='s' >		</PROPERTY>
		<!-- 基准类到目标类的直接引用属性，优先使用此配置来建立和目标类句柄的链接关系 -->
		<PROPERTY NAME="TargetClassRelationProp" TYPE='s' >		</PROPERTY>
		<!-- 目标类引用属性 -->
		<PROPERTY NAME="TargetClassRefProp" TYPE='as' >		</PROPERTY>
	</CLASS>

	<!-- 数据收集主体定义信息，描述依赖类、依赖分类属性、依赖标识属性等 -->
	<CLASS NAME="DataAcquisitionTagDefinition">
		<!-- 此Id用于唯一定义一个Tag定义对象 -->
		<PROPERTY NAME="Id" TYPE='q' >		</PROPERTY>
		<!-- Tag类型，和《IT产品线单板IPMI OEM命令定义表.xlsx》中的"部件类型定义"一致 -->
		<PROPERTY NAME="TagType" TYPE='y' >		</PROPERTY>
		<!-- Tag实现参考的类名 -->
		<PROPERTY NAME="TagRefClass" TYPE='s' >		</PROPERTY>
		<!-- 槽位引用属性，无此信息时配置为空 -->
		<PROPERTY NAME="SlotPropRef" TYPE='s' >		</PROPERTY>
		<!-- 在位引用属性，无此信息时配置为空 -->
		<PROPERTY NAME="PresencePropRef" TYPE='s' >		</PROPERTY>
		<!-- 定义类属性 -->
		<PROPERTY NAME="ClassificationPropList" TYPE='as' >		</PROPERTY>
		<!-- 标识类属性 -->
		<PROPERTY NAME="IdentificationPropList" TYPE='as' >		</PROPERTY>
		<!-- 外部分类信息引用列表，关联ExternalRefInfo类 -->
		<PROPERTY NAME="ExtClassificationInfoRefList" TYPE='roa' >		</PROPERTY>
		<!-- 外部标识信息引用列表，关联ExternalRefInfo类 -->
		<PROPERTY NAME="ExtIdentificationInfoRefList" TYPE='roa' >		</PROPERTY>
		<!-- 关联DataAcquisitionMetric对象列表 -->
		<PROPERTY NAME="RelatedMetricObjList" TYPE='roa' >		</PROPERTY>
		<METHOD NAME="UpdateDataExternally">
			<PARAMETER TYPE="s" NAME="ObjectName" DIR="in"/>
			<PARAMETER TYPE="s" NAME="Data" DIR="in"/>
		</METHOD>
		<METHOD NAME="DfpCollectHddInfo">
        	<PARAMETER TYPE="s" NAME="ObjectName" DIR="in"/>
			<PARAMETER TYPE="u" NAME="InterfaceType" DIR="in"/>
			<PARAMETER TYPE="u" NAME="MediaType" DIR="in"/>
			<PARAMETER TYPE="s" NAME="Manufacturer" DIR="in"/>

			<PARAMETER TYPE="u" NAME="DayNum" DIR="out"/>
			<PARAMETER TYPE="u" NAME="FeatureNum" DIR="out"/>
			<PARAMETER TYPE="ad" NAME="Data" DIR="out"/>
		</METHOD>
		<METHOD NAME="DataAcquDimmAlmLog">
			<PARAMETER TYPE="s" NAME="ObjectName" DIR="in"/>
		</METHOD>
	</CLASS>

	<!-- 收集项定义 -->
	<CLASS NAME="DataAcquisitionMetric">
		<!--
			1) Id定义为4字节，第1-2字节为TagId，第3-4字节为主体下的相对MetricId，对于硬盘，此处预留为SMART信息编号，即1-255占用;
			2) 通过此规则建立收集主体和收集项的关系 
		-->
		<PROPERTY NAME="Id" TYPE='u' >		</PROPERTY>
		<!-- 名称，风格为<主体.短名称>，如cpu.usage、fan.speed、ps.power，如果为本Metric表示一类监控项，标号不确定部分用格式化符，实现时用ReservedIdRange中预留的标号替换 -->
		<PROPERTY NAME="Name" TYPE='s' >		</PROPERTY>
		<!-- 显示名称，一般用于对外显示，如作图坐标轴描述，举例:"CPU Usage"、"Fan Speed"，当前预留 -->
		<PROPERTY NAME="DisplayName" TYPE='s' >		</PROPERTY>
		<!-- 1：电压;2：温度;3：性能指标;4：健康状态指标;5：电流收集项 ;6: 日志收集项-->
		<PROPERTY NAME="MetricType" TYPE='y' >		</PROPERTY>
		<!-- 1：传感器;2：类属性;3：模块维护内部信息。模块内部信息时，对应对象定义为通用的共用对象 -->
		<PROPERTY NAME="SourceType" TYPE='y' >		</PROPERTY>
		<!-- 来源为传感器时，此处配置依赖的传感器名称，名称中存在槽位$号标识时，使用Tag中的槽位信息替换 -->
		<PROPERTY NAME="SourceSensorName" TYPE='s' >		</PROPERTY>
		<!-- 来源为主体上的属性时，配置为对应主体上的属性名;关联到非主体类的上属性时，此处配置为ExternalRefInfo类对象，目前不支持对此信息进行重命名，ExternalRefInfo类的对象需要配置在底板上 -->
		<PROPERTY NAME="SourcePropertyRefInfo" TYPE='s' >		</PROPERTY>
		<!-- 来源为内部信息时，预留起始结束Id范围，使用两个成员保存 -->
		<PROPERTY NAME="ReservedIdRange" TYPE='au' >		</PROPERTY>
		<!-- 收集项对应的单位，参考Redfish规范，常见度量项单位:电压,V;风扇转速,RPM;百分比,%;温度，Cel;功率,W;电流,A -->
		<PROPERTY NAME="Unit" TYPE='s' >		</PROPERTY>
		<!-- 采集间隔，以秒为单位 -->
		<PROPERTY NAME="CacheIntervalInSec" TYPE='u' >		</PROPERTY>
		<!-- 采集时长，以小时为单位 -->
		<PROPERTY NAME="CacheDurationInHour" TYPE='u' >		</PROPERTY>
	</CLASS>
	<!--PcieHddRemoveMonitor类，用于NVMe 硬盘热插拔时告警检测-->
	<CLASS NAME="PcieHddRemoveMonitor">
		<!-- SSD 槽位号  -->
		<PROPERTY NAME="Slot" TYPE="y">		</PROPERTY>	
		<!-- SLOT 供电状态，CPLD把电源控制状态传递BMC。“1”是给SLOT供电。“0”是不供电。，会关联硬件 -->
		<PROPERTY NAME="PowerEnable" TYPE="y">		</PROPERTY>	
		<!-- 指示PCIe SSD可以被拔出，会关联硬件-->
		<PROPERTY NAME="SaveRemove" TYPE="y">	</PROPERTY>
	</CLASS>

	<!--传感器ID预分配配置，每个产品只能配置一个对象；白名单或者黑名单中的一种 -->
	<CLASS NAME="SensorNumDynamicApplyCfg">
		<!-- 类型；0表示黑名单，NumberArray对应的是不可动态分配的
		           1表示白名单，NumberArray对应的是可动态分配的  -->
		<PROPERTY NAME="Type" TYPE="y">		</PROPERTY>	
		<PROPERTY NAME="NumberArray" TYPE="ay">		</PROPERTY>	
	</CLASS>
    <!--机框管理类 -->
	<CLASS NAME="ShelfManage">
	    <!--额定功率控制使能 -->
            <PROPERTY NAME="RatedPowerCtrlEn" TYPE="y"/>
            <!--错峰上电延迟时间-->
            <PROPERTY NAME="StaggerPowerDelayTime" TYPE="i"/>
            <!--允许设置的最大错峰上电时间-->
            <PROPERTY NAME="MaxStaggerTime" TYPE="i"/>
            <!--允许设置的最小错峰上电时间-->
            <PROPERTY NAME="MinStaggerTime" TYPE="i"/>
            <!-- 框内告警状态，0 Normal; 1 Minor; 2 Major; 3 Critical -->
            <PROPERTY NAME="Health" TYPE="y"/>
            <!--单板管理状态-->
            <PROPERTY NAME="ShelfManagementState" TYPE="y"/>
            <!-- 背板类型 -->
            <PROPERTY NAME="DftBackPlaneType"   TYPE="y"/>
            <!--单板受控上电超时时间，单位分钟，默认10分钟-->
            <PROPERTY NAME="ControlledPowerOnTimeout" TYPE="i"/>
            <!--额定功率控制使能设置 -->
            <METHOD NAME="SetRatedPowerCtrlEn">
                <PARAMETER TYPE="y" NAME="EnableFlag" DIR="in"/>
            </METHOD>
            <!--错峰上电延迟时间设置,单位ms-->
            <METHOD NAME="SetStaggerPowerDelayTime">
                <PARAMETER TYPE="i" NAME="StaggerTime" DIR="in"/>
            </METHOD>
            <!--将事件发送到处理队列-->
            <METHOD NAME="PutEventQue">
                <PARAMETER TYPE="ay" NAME="SelEvent" DIR="in"/>
            </METHOD>
            <!--处理addselentry-->
            <METHOD NAME="AddSelEntryHndl">
                <PARAMETER TYPE="ay" NAME="SelEvent" DIR="in"/>
            </METHOD>
			<!--提供主用板同步额定功率控制使能设置 -->
            <METHOD NAME="SyncSetRatedPowerCtrlEn">
                <PARAMETER TYPE="*" NAME="*" DIR="in"/>
            </METHOD>
            <!--提供主用板同步错峰上电延迟时间设置,单位ms-->
            <METHOD NAME="SyncSetStaggerPowerDelayTime">
                <PARAMETER TYPE="*" NAME="*" DIR="in"/>
            </METHOD>
			<!--同步时间时区给单板的接口,单位ms-->
            <METHOD NAME="SetTimeOrTimeZoneToBlade">
                <!-- setflag: 1:TIME, 2:TimeZone -->
                <PARAMETER TYPE="y" NAME="setflag" DIR="in"/>
            </METHOD>
            <!-- 获取单板告警事件 -->
            <METHOD NAME="GetBladeAlarmEventMsgList">
                <!-- 单板ipmb地址 -->
                <PARAMETER TYPE="y" NAME="ipmbAddr" DIR="in"/>
                <!-- 告警信息 -->
                <PARAMETER TYPE="*" NAME="*" DIR="out"/>
            </METHOD>
			<!-- 清空单板告警事件 -->
            <METHOD NAME="ClearBladeAlarmEventMsgList">
                <!-- 单板ipmb地址 -->
                <PARAMETER TYPE="y" NAME="ipmbAddr" DIR="in"/>
            </METHOD>
 			<!--配置单板的管理状态-->
            <METHOD NAME="SetShelfManagementState">
			    <!-- setflag: 1:使能, 0:去使能 -->
                <PARAMETER TYPE="y" NAME="status" DIR="in"/>
            </METHOD>
		   	<!--单板管理状态属性同步接口 -->
            <METHOD NAME="ShelfManageStateSync">
                <PARAMETER TYPE="*" NAME="*" DIR="in"/>
            </METHOD>
		   	<!--机框内网通信网段 -->
            <METHOD NAME="SetShelfInnerSubnetSegment">
				<PARAMETER TYPE="s" NAME="IpAddr" DIR="in"/>
				<PARAMETER TYPE="i" NAME="ErrCode" DIR="out"/>
            </METHOD>
            <!--设置单板受控上电等待超时时间 -->
			<METHOD NAME="SetBladeCtlPoweronTMOut">
				 <!--单板受控上电超时时间-->
				<PARAMETER TYPE="i" NAME="ControlledPowerOnDelayTime" DIR="in"/>
			</METHOD>
            <!--设置单板受控上电槽位信息 -->
			<METHOD NAME="SetBladeControlledPoweronInfo">
				<!--受控上电的槽位列表 -->
				<PARAMETER TYPE="ay" NAME="SlotIdList" DIR="in"/>
				<!--受控上电的状态，0表示不需要EM对其受控上电，1表示需要受控上电 -->
				<PARAMETER TYPE="ay" NAME="Status" DIR="in"/>
			</METHOD>
			<!--允许单板上电 -->
			<METHOD NAME="SetBladePowerOnEnabled">
				<!--允许上电的单板槽位列表 -->
				<PARAMETER TYPE="y" NAME="Status" DIR="in"/>
				<PARAMETER TYPE="ay" NAME="SlotIdList" DIR="in"/>
			</METHOD>
		   	<!--单板下电持久化属性同步接口 -->
            <METHOD NAME="SavedPropertySyncMethod">
                <PARAMETER TYPE="*" NAME="*" DIR="in"/>
            </METHOD>
    </CLASS>

    <!-- 主从模块使用 -->
    <CLASS NAME="MsmNode">
        <!-- SlotId: 本板slotid，0无效，大于1有效。节点在不同机型中有效的槽位信息不同，3U为1、2；6U为1、2、5、6；10U为1、2、3、4、7、8、9、10 -->
        <PROPERTY NAME="SlotId"           TYPE="y"></PROPERTY>
        <!-- 在位状态：0不在位，1在位 -->
        <PROPERTY NAME="PresentStatus"    TYPE="y"></PROPERTY>
        <!-- 心跳状态：0无心跳，1有心跳 -->
        <PROPERTY NAME="HeartBeat"        TYPE="y"></PROPERTY>
        <!-- 升主使能：是否允许本节点升主，降从时，需要关闭使能1s左右（预留仲裁、同步时间） -->
        <PROPERTY NAME="MasterEnable"     TYPE="y"></PROPERTY>
        <!-- 当前节点BMC使用的主用槽位号 -->
        <PROPERTY NAME="MasterSlotId" TYPE="y"></PROPERTY>
        <!-- 本节点MS仲裁状态：0-初始、1-等待插稳、2-仲裁、3-主、4-从 -->
        <PROPERTY NAME="LocalMsStatus"    TYPE="y"></PROPERTY>
        <!-- 本节点存活状态，计数器周期性累加 -->
        <PROPERTY NAME="AliveStatus"     TYPE="y"></PROPERTY>
        <!-- 本节点IIC使能状态，0-disable，1-enable -->
        <PROPERTY NAME="IicEnable"        TYPE="y"></PROPERTY>
    </CLASS>

    <!-- 主备模块使用 -->
    <CLASS NAME="ASM">
        <!-- AsStatus:主备状态，0为主1为备 -->
        <PROPERTY NAME="AsStatus"           TYPE="y"></PROPERTY>
        <!-- AsSlotId: 本板slotid -->
        <PROPERTY NAME="AsSlotId"           TYPE="y"></PROPERTY>
        <!-- RemoteSlotId: 对板slotid -->
        <PROPERTY NAME="RemoteSlotId"       TYPE="y"></PROPERTY>
        <!-- 同时上电时默认为主的slotid，通过延时5s启动实现 -->
        <PROPERTY NAME="DefaultActiveSlot"  TYPE="y"></PROPERTY>
        <!-- 主备间通信需要的IP信息从该EthGroup获取，取InnerNetwork的前24位为网段，后8位按128+对板slotid计算 -->
        <PROPERTY NAME="BindEthGroup"       TYPE="ro"></PROPERTY>

        <!-- 主备状态更新周期 单位ms -->
        <PROPERTY NAME="AsStatusProcTimeInterval"    TYPE="i"></PROPERTY>
        <!-- 心跳周期 单位ms -->
        <PROPERTY NAME="SoftHeartBeatTimeInterval"   TYPE="i"></PROPERTY>
        <!-- 心跳倒计时计数器          以倒计时10分钟为例：10min * 60s * 1000ms / 10 = 60 000 -->
        <PROPERTY NAME="SoftHeartBeatCountDown"      TYPE="i"></PROPERTY>

        <!-- read-only register -->
        <!-- 插稳信号0插稳1未插稳，若单板无该信号，建议和单板在位状态保持一致 -->
        <PROPERTY NAME="AsCpldBoardIn"           TYPE="y"></PROPERTY>
        <!-- 本板硬件主备状态：0主，1备-->
        <PROPERTY NAME="AsCpldLocalAsStatus"        TYPE="y"></PROPERTY>
        <!-- 本板在位状态：0在位，1不在位 -->
        <PROPERTY NAME="AsCpldLocalPresentStatus"   TYPE="y"></PROPERTY>
        <!-- 本板健康状态：0不健康，1健康 -->
        <PROPERTY NAME="AsCpldLocalHealthStatus"    TYPE="y"></PROPERTY>
        <!-- 对板硬件主备状态：0备，1主 -->
        <PROPERTY NAME="AsCpldRemoteAsStatus"       TYPE="y"></PROPERTY>
        <!-- 对板在位状态：0在位，1不在位 -->
        <PROPERTY NAME="AsCpldRemotePresentStatus"  TYPE="y"></PROPERTY>
        <!-- 对板健康状态：0不健康，1健康 -->
        <PROPERTY NAME="AsCpldRemoteHealthStatus"   TYPE="y"></PROPERTY>
        <!-- 本板心跳状态：1无心跳，3有心跳 -->
        <PROPERTY NAME="AsCpldCheckHeartBeat"        TYPE="y"></PROPERTY>
        <!-- 双主状态：0非双主，1双主 -->
        <PROPERTY NAME="AsCpldBothActive"           TYPE="y"></PROPERTY>

        <!-- read-write register -->
        <!-- 硬件心跳寄存器：将读出来的值写回该寄存器即完成一次心跳操作，一次读写心跳清除硬件10s心跳定时器（具体时间以不同平台硬件最终实现为准，建议值10s） -->
        <PROPERTY NAME="AsCpldWriteHeartBeat"           TYPE="y"></PROPERTY>
        <!-- 降备申请：写1申请降备，降备成功后，写0清除寄存器状态即完成一次降备操作 -->
        <PROPERTY NAME="AsCpldActiveToStandby"           TYPE="y" ID="3">       </PROPERTY>
	    <!-- 升主申请：写1申请升主 -->
        <PROPERTY NAME="AsCpldStandbyToActive"           TYPE="y" ID="4">       </PROPERTY>
	    <!-- 强制抢主模式写保护 -->
	    <PROPERTY NAME="AsCpldMasterBeWritePro"          TYPE="y" ID="5">       </PROPERTY>
	    <!-- 弃主寄存器写保护 -->
	    <PROPERTY NAME="AsCpldStandbyBeWritePro"         TYPE="y" ID="6">       </PROPERTY>
        <!-- 双主状态：1清除双主状态 -->
        <PROPERTY NAME="AsCpldClrBothActive"           TYPE="y"></PROPERTY>
        <!-- 对板健康状态-->
        <PROPERTY NAME="AsRemoteBoardHealthStatus" TYPE="y"></PROPERTY>
        <!-- 更新存活状态：跟随“心跳状态”递增，指示本槽位的“BMC仲裁”信息是否实时刷新，用于CPLD支路异常场景的信息中转，共4bit，从1~10递增回滚，其余值预留（0、11~15）。 -->
        <PROPERTY NAME="UpdateMsAliveStatus"           TYPE="y"></PROPERTY>
        <!-- 主备倒换完成后，首次主备数据同步状态 0同步中 1 同步完成-->
        <PROPERTY NAME="AsDataSyncStatus"           TYPE="y"></PROPERTY>		
        <!-- 本节点软件仲裁的主从槽位 -->
        <PROPERTY NAME="MasterSlotId" TYPE="y"></PROPERTY>
        <PROPERTY NAME="IicEnable"        TYPE="y"></PROPERTY>
        <!-- 主从状态管理对象列表：关联系统内所有的主从管理对象信息 -->
        <PROPERTY NAME="MsmNodes" TYPE="roa">   </PROPERTY>

        <!-- 触发倒换的告警对象列表，对应eventmonitor类对象F -->
        <PROPERTY NAME="AsFailoverAlarm"    TYPE="as"></PROPERTY>

        <METHOD NAME="AsmFailover">
            <!--  RequestCause: 详细参见 枚举ASM_FAILOVER_CAUSE       -->
            <PARAMETER TYPE="u" NAME="RequestCause" DIR="in"/>
            <!--  ReturnCode:0 success, other: fail 错误码详见ASM_FAILOVER_FAIL_CAUSE -->
            <PARAMETER TYPE="u" NAME="ReturnCode" DIR="out"/>
            <PARAMETER TYPE="s" NAME="ReturnMsg" DIR="out"/>
            <!--  ReturnFailLocation:1 因为本板异常不能倒换, 2：因为对板异常不能倒换 -->
            <PARAMETER TYPE="u" NAME="ReturnFailLocation" DIR="out"/>
        </METHOD>

        <!-- 主板通过rpc调用备板的该方法来查询备板是否满足倒换条件 -->
        <METHOD NAME="AsmCheckLocalFailoverCondition">
            <!--  ReturnCode:0 ok, other: 错误码详见ASM_FAILOVER_FAIL_CAUSE -->
            <PARAMETER TYPE="u" NAME="ReturnCode" DIR="out"/>
            <PARAMETER TYPE="s" NAME="ReturnMsg" DIR="out"/>
        </METHOD>
        <!-- 主板通过rpc调用备板的该方法来查询备板是否满足倒换条件 -->
        <METHOD NAME="AsmSlaveToMater">
            <PARAMETER TYPE="u" NAME="upgradeState" DIR="in"/>
            <PARAMETER TYPE="i" NAME="retCode" DIR="out"/>
        </METHOD>
        <!-- 调用该方法来切换主备 -->
        <METHOD NAME="AsmChangeStatus">
            <PARAMETER TYPE="i" NAME="retCode" DIR="out"/>
        </METHOD>
    </CLASS>

    <!-- localKVM模块使用 -->
    <CLASS NAME="LocalKVM">
        <!-- read-only register -->
        <!-- FPGA加载完成信号-->
        <PROPERTY NAME="FpgaDoneStatus" TYPE="y"></PROPERTY>
        <!-- read-write register -->
        <!-- 复位fpga：写0  表示复位 -->
        <PROPERTY NAME="FpgaReset" TYPE="y"></PROPERTY>
        <!-- 0 表示拉低program管脚，1 表示拉高 -->
        <PROPERTY NAME="FpgaProgram" TYPE="y"></PROPERTY>
        <!-- 0 表示拉低sol管脚关闭串口，1 表示拉高sol管脚打开串口 -->
        <PROPERTY NAME="FpgaSol" TYPE="y"></PROPERTY>

        <!-- 设置UART(sol)的CPLD开关 -->
        <METHOD NAME="SetFpgaSol">
            <PARAMETER DIR="in"  TYPE="y" NAME="switch" />
        </METHOD>
    </CLASS>
    <!-- 主备模块使用倒换抑制条件 -->
    <!-- 使用限制：1、属性必须是guint8(TYPE="y") -->
    <!--          2、方法第一个出参必须是guint8(TYPE="y") -->
    <!-- [！！重要！！]
            改动该提示信息需要同步更新至redfish的相关json文件
         [！！重要！！] -->
    <CLASS NAME="FailoverRestriction">
        <!-- ID：从1开始索引 -->
        <PROPERTY NAME="ID" TYPE="y"></PROPERTY>
        <!-- 检查位置：1.在主板执行检查 2.在备板执行检查 3.都检查 -->
        <PROPERTY NAME="CheckLocation" TYPE="y"></PROPERTY>
        <!-- 检查类型：1.通过属性检查 2.通过方法检查，方法的第一个出参为ExpectValue -->
        <PROPERTY NAME="CheckType" TYPE="y"></PROPERTY>
        <!-- 对象名 -->
        <PROPERTY NAME="ObjectName" TYPE="ro"></PROPERTY>
        <!-- 属性值 -->
        <PROPERTY NAME="PropertyValue" TYPE="y"></PROPERTY>
        <!-- 方法名 -->
        <PROPERTY NAME="MethodName" TYPE="s"></PROPERTY>
        <!-- 预期值，满足预期值允许主备倒换，不满足预期值无法主备倒换 -->
        <PROPERTY NAME="ExpectValue" TYPE="y"></PROPERTY>
        <!-- 不满足预期值时打印信息 -->
        <PROPERTY NAME="ErrorMsg" TYPE="s"></PROPERTY>
    </CLASS>
	
    <!-- 数据同步2模块管理类 -->
    <CLASS NAME="DataSyncManagement">
        <!-- SlotId: 本机的slot id    -->
        <PROPERTY NAME="SlotId"       TYPE="y"></PROPERTY>
        <PROPERTY NAME="BindEthGroup" TYPE="ro"></PROPERTY>
        <!-- ServerPort: 置0为默认(51000)，与主备模块同时使用时置0或51000 -->
        <PROPERTY NAME="ServerPort"   TYPE="q"></PROPERTY>
        <!-- RunningMode: 0. 监听模式，只允许其他节点向本节点进行同步属性的操作，不向其他节点主动同步 -->
        <!-- RunningMode: 1. 主动模式，向其他节点主动同步注册的属性，同时也允许其他节点向本节点同步属性 -->
        <!-- RunningMode: 2. 动态切换模式，允许其他节点向本节点同步属性，根据当前节点的主备状态决定是否主动同步 -->
        <PROPERTY NAME="FileSyncRunningMode"             TYPE="u"></PROPERTY>
        <PROPERTY NAME="PropertySyncRunningMode"         TYPE="u"></PROPERTY>
        <!-- 周期同步间隔，单位为秒 -->
        <PROPERTY NAME="FilePeriodSyncTimeInterval"      TYPE="u"></PROPERTY>
        <PROPERTY NAME="PropertyPeriodSyncTimeInterval"  TYPE="u"></PROPERTY>

        <PROPERTY NAME="PropertySyncState"       TYPE="y"></PROPERTY>
        <PROPERTY NAME="FileSyncState"           TYPE="y"></PROPERTY>
        <!-- 绑定网口的状态， 0：ok，1：异常；板间通信异常时触发网口状态检测-->
		<PROPERTY NAME="BindEthPortState" TYPE="y"></PROPERTY>
        <!-- 其他节点通过远程调用该方法进行心跳检测，并据此维护SyncDestination对象的通信状态(CommunicationStatus) -->
        <METHOD NAME="CommunicationUpdateMethod">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
            <PARAMETER TYPE="*" NAME="*" DIR="out"/>
        </METHOD>
		<!-- 方法：启动文件内部传输客户端 -->
         <METHOD NAME="StartInnerTransfer">
            <PARAMETER TYPE="s" NAME="SrcPath" DIR="in"/>
            <PARAMETER TYPE="s" NAME="DestPath" DIR="in"/>
        </METHOD>
        <!-- 方法：获取客户端文件内部传输状态 -->
        <METHOD NAME="GetInnerTransferStatus">
            <PARAMETER TYPE="i" NAME="Status" DIR="out"/>
        </METHOD>

    </CLASS>

    <CLASS NAME="SyncDestination">
        <!-- SlotId: 节点ip计算公式：baseipaddr + SlotId  -->
        <PROPERTY NAME="SlotId"       TYPE="y"></PROPERTY>
        <!-- Presence: 该节点的在位标志，必选  -->
        <PROPERTY NAME="Presence"       TYPE="y"></PROPERTY>
        <!-- CommunicationStatus: 本节点与该配置节点的RPC通信状态标志，由data_sync2模块自己维护  -->
        <!-- 0:通信异常 1：通信正常 2：该节点数据版本过低 3：该节点数据版本过高 4：该节点版本低 5：该节点版本高 -->
        <PROPERTY NAME="CommunicationStatus"  TYPE="y"></PROPERTY>
        <!-- CommunicationStatus 属性值由1变为其他值时，延时同步 CommunicationStatus 属性值，作为触发告警的标识 -->
        <PROPERTY NAME="AssertFlag"  TYPE="y"></PROPERTY>
        <!-- 主备通信状态异常防抖时间 -->
        <PROPERTY NAME="LinkLossAssertionDelay"  TYPE="q"></PROPERTY>
    </CLASS>

    <CLASS NAME="FileSync">
        <!-- 需要向哪些目标同步 -->
        <PROPERTY NAME="SyncDestination"      TYPE="roa"></PROPERTY>
        <!-- 使用绝对路径, 为保证可靠性：SyncType为1时，列表第一个文件会被实时监听，其他的不会 -->
        <PROPERTY NAME="FileList"        TYPE="as"></PROPERTY>
        <!-- 同步类型, bit0:实时同步 bit1:周期同步 bit2:强制同步,不受版本不一致约束 -->
        <PROPERTY NAME="SyncMode"      TYPE="y"></PROPERTY>
        <!-- SyncType:0：普通类型，文件将直接覆盖从板文件 -->
        <!--          1：同步组类型，该对象内的文件是一个同步组， -->
        <!--          2：回调完成通知类型，文件同步完成后调用方法通知对方 -->
        <!--          3：可靠型回调完成通知类型，文件先同步至对板的SyncTempDir目录，同步完成后调用方法通知对方 -->
        <!--    同步组内的文件要么全部同步成功，要么全部同步失败    -->
        <PROPERTY NAME="SyncType"        TYPE="y"></PROPERTY>

        <!-- SyncType为时1/3生效，filelist中的文件将会同步到slave板的"TempDir/AbsFilePath"                       -->
        <!-- 例子：SyncTempDir:/usr/temp, FilePath:/home/mydir/myfile                       -->
        <!--    为方便处理，文件最终会同步到：/usr/temp/home/mydir/myfile                       -->
        <PROPERTY NAME="SyncTempDir"        TYPE="s"></PROPERTY>
        <!-- SyncType为时1生效，app从SyncTempDir拷贝一份文件到该目录进行校验，防止在校验过程中发生文件覆盖 -->
        <!-- 校验通过再mv至真正的目标文件                                 -->
        <PROPERTY NAME="SyncCheckTempDir"        TYPE="s"></PROPERTY>

        <!-- 如果SyncType为1或2，模块会调用从bmc的CallBackObject的                  -->
        <!--   CallBackMethod方法通知对方该同步组的文件已经同步                       -->
        <PROPERTY NAME="GroupSyncCallBackObjectName"        TYPE="s"></PROPERTY>
        <PROPERTY NAME="GroupSyncCallBackMethodName"        TYPE="s"></PROPERTY>
    </CLASS>

    <CLASS NAME="PropertySync">
        <!-- 需要向哪些目标同步 -->
        <PROPERTY NAME="SyncDestination"      TYPE="roa"></PROPERTY>
        <!-- 同步类型, bit0:实时同步 bit1:周期同步 bit2:强制同步,不受版本不一致约束 -->
        <PROPERTY NAME="SyncMode"      TYPE="y"></PROPERTY>
        <!-- 需要同步的属性所属的类名 -->
        <PROPERTY NAME="ClassName"      TYPE="s"></PROPERTY>
        <!-- 需要同步的属性所属的对象， 数组为空(只填写 <VALUE /> )表示所有对象都需要同步 -->
        <PROPERTY NAME="ObjectName"    TYPE="as"></PROPERTY>
        <!-- 需要同步的属性所属的属性名 -->
        <PROPERTY NAME="PropertyName"    TYPE="as"></PROPERTY>
        <!-- 需要同步的属性在对端使用的接收方法，参数个数必须配置成可变的
            推荐使用：PropSyncCommonDfSave 通用类方法名称，持久化模式为DF_SAVE
                      PropSyncCommonDfNone 通用类方法名称，持久化模式为DF_NONE
        -->
        <PROPERTY NAME="MethodName"      TYPE="s"></PROPERTY>
    </CLASS>

	<CLASS NAME="LswPortInform">
        <!-- 端口名 -->
        <PROPERTY NAME="PortName"  TYPE="s"></PROPERTY>
        <!-- 端口号 -->
        <PROPERTY NAME="PortNum"   TYPE="u"></PROPERTY>
		<!-- 端口类型:0-上行端口 1-下行端口 2-级联端口-->
        <PROPERTY NAME="PortType"   TYPE="y"></PROPERTY>
        <!-- 端口状态：0-状态正常  1-假活-->
        <PROPERTY NAME="PortState" TYPE="u"></PROPERTY>
		<!-- 端口优先级: 值越大优先级越高-->
		<!-- 端口存在互斥时，根据优先级来使能端口-->
        <PROPERTY NAME="PortPriority" TYPE="y"></PROPERTY>
		<!--端口被选中标志 -->
		<PROPERTY NAME="PortSelect" TYPE="y"></PROPERTY>
		<!--同步端口选中属性-->
		<METHOD NAME="SyncPortSelectProtery">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
        </METHOD>
		<!--获取端口数据统计-->
		<METHOD NAME="GetPortStatistics">
            <PARAMETER TYPE="s" NAME="portname" DIR="in"/>
            <PARAMETER TYPE="*" NAME="*" DIR="out"/>
        </METHOD>
    </CLASS>
	
	<CLASS NAME="MMLswMgnt">
	    <!-- 管理口出端口模式：0为交换出管理口；1为SMM出管理口 -->
        <PROPERTY NAME="OutPortMode"  TYPE="y"></PROPERTY>
		<!-- 当前主备配置状态：0为主用板配置；1为备用板配置 -->
		<PROPERTY NAME="ASConfigState" TYPE="y"></PROPERTY>
		<!-- 上行管理端口管理策略：FF-没约束，所有端口均可up，1-互斥不带优先级,2-互斥+优先级 -->
        <PROPERTY NAME="UpPortPolicy"  TYPE="y"></PROPERTY>
		<!-- 下行管理端口管理策略：FF-没约束，所有端口均可up，1-互斥不带优先级,2-互斥+优先级 -->
        <PROPERTY NAME="DownPortPolicy"  TYPE="y"></PROPERTY>
		<!-- 级联端口 -->
        <PROPERTY NAME="CascadePortPolicy"  TYPE="y"></PROPERTY>
		<!-- 级联端口使能状态， 1-enable，0-disable -->
		<PROPERTY NAME="CascadePortState"  TYPE="y"></PROPERTY>
        <!-- lsw心跳发送网口 -->
        <PROPERTY NAME="SendHeartEth" TYPE="ro"></PROPERTY>
        <!-- 接收lsw心跳的switch芯片逻辑端口 -->
        <PROPERTY NAME="RecvHeartPort" TYPE="y"></PROPERTY>
		<!-- lsw状态：1表示OK 0表示异常 -->
        <PROPERTY NAME="LswStatus"  TYPE="y"></PROPERTY>
		<!-- 外出端口状态：1表示OK 0表示异常 -->
        <PROPERTY NAME="OutPortStatus"  TYPE="y"></PROPERTY>
		<!-- 内部网络vlanid -->
        <PROPERTY NAME="InVlanID"  TYPE="q"></PROPERTY>
		<!-- 外部网络vlanid -->
        <PROPERTY NAME="OutVlanID"   TYPE="q"></PROPERTY>
		<!-- lsw端口总数 -->
        <PROPERTY NAME="PortCount"   TYPE="y"></PROPERTY>
		<!-- 背板类型 -->
        <PROPERTY NAME="DftBackPlaneType"   TYPE="y"></PROPERTY>
		<!-- 进入装备背板默认打开的端口，其他端口关闭 -->
		<PROPERTY NAME="DftDefaultOpenPort" TYPE="ay" ></PROPERTY>
        <!-- 装备lsw端口自检时各端口需要满足的速率， 0：不要求(也不关心UP状态)；其他：其他速率 -->
		<PROPERTY NAME="DftDefaultPortSpeed" TYPE="au"></PROPERTY>
		<!-- 设置出端口模式 -->
		<METHOD NAME="SetOutPortMode">
            <PARAMETER TYPE="y" NAME="outportmode" DIR="in"/>
        </METHOD>
		<!-- 设置级联端口 -->
		<METHOD NAME="SetCascadePortState">
            <PARAMETER TYPE="y" NAME="enable" DIR="in"/>
        </METHOD>
		<!-- 同步级联端口 -->
		<METHOD NAME="SyncMmlswMgntProperty">
            <PARAMETER TYPE="*" NAME="*" DIR="in"/>
        </METHOD>
        <!-- 获取端口信息 -->
        <METHOD NAME="GetLswPortInfo">
            <PARAMETER TYPE="*" NAME="*" DIR="out"/>
        </METHOD>
        <METHOD NAME="GetLswAgetestStatus">
		<PARAMETER TYPE="i" NAME="Total" DIR="out"/>
		<PARAMETER TYPE="i" NAME="Remain" DIR="out"/>
        </METHOD>
        <METHOD NAME="SetLswAgetest">
		<PARAMETER TYPE="i" NAME="Total" DIR="in"/>
        </METHOD>
	</CLASS>
    <!-- 装备背板IO信号检测使用 -->
    <CLASS NAME="BackplaneIOSignal">
        <!-- 对板硬件主备状态：0备，1主 -->
        <PROPERTY NAME="RemoteAsStatus"       TYPE="y"></PROPERTY>
        <!-- 对板在位状态：0在位，1不在位 -->
        <PROPERTY NAME="RemotePresentStatus"  TYPE="y"></PROPERTY>
        <!-- 对板健康状态：0不健康，1健康 -->
        <PROPERTY NAME="RemoteHealthStatus"   TYPE="y"></PROPERTY>
        <!-- 本槽位到其他槽位的主用状态和AC OK信号 -->
        <PROPERTY NAME="PsIntandACStatus"        TYPE="y"></PROPERTY>
		<!--直流输出控制-->
        <PROPERTY NAME="PowerSwitchContrl" TYPE="y" ></PROPERTY>		
        <!-- 直流输出OK -->
        <PROPERTY NAME="DCPowerOK"           TYPE="y"></PROPERTY>
    </CLASS>

    <!-- 老化测试相关类 -->
    <CLASS NAME="AgeTest">
        <!-- 是否存在老化标志：0不存在老化标志；1存在老化标志；dft模块在初始化的时 -->
        <!-- 候会根据老化配置文件中的内容来初始化该属性，该属性不需要持久化 -->
        <PROPERTY NAME="AgeTestFlag"           TYPE="y"></PROPERTY>
        <!-- 是否认为清除老化标志：0未人为清除，1人为清除 -->
        <PROPERTY NAME="AgeTestFlagManualClear"       TYPE="y"></PROPERTY>
        <!-- 是否开启老化标志：0未开启，1已开启 -->
        <PROPERTY NAME="AgeTestStart"       TYPE="y"></PROPERTY>
        <!-- 老化测试否是完成：0未完成，1已完成 -->
        <PROPERTY NAME="AgeTestFinished"  TYPE="y"></PROPERTY>
        <!-- 老化结果：0成功，1失败 -->
        <PROPERTY NAME="AgeTestResult"   TYPE="y"></PROPERTY>
        <!-- 老化失败原因：0内存老化失败，1硬盘老化失败 -->
        <PROPERTY NAME="AgeTestFailedReason"   TYPE="y"></PROPERTY>
        <!-- 老化失败位置1，如果失败的是硬盘，则对应硬盘错误位置的低32bit 
		     如果失败的是内存，则对应内存的第一个channe的第一个rank错误位置 -->
        <PROPERTY NAME="AgeTestFailedPosition1"   TYPE="u"></PROPERTY>
        <!-- 老化失败位置2，如果失败的是硬盘，则对应硬盘错误位置的低32bit 
		     如果失败的是内存，则对应内存的第一个channe的第二个rank错误位置 -->
        <PROPERTY NAME="AgeTestFailedPosition2"   TYPE="u"></PROPERTY>
        <!-- 老化失败位置3，内存的第一个channe的ECC Dq错误位置 -->
        <PROPERTY NAME="AgeTestFailedPosition3"   TYPE="y"></PROPERTY>
        <!-- 老化失败位置4，内存的第二个channe的第一个rank错误位置 -->
        <PROPERTY NAME="AgeTestFailedPosition4"   TYPE="u"></PROPERTY>
        <!-- 老化失败位置5，内存的第二个channe的第二个rank错误位置 -->
        <PROPERTY NAME="AgeTestFailedPosition5"   TYPE="u"></PROPERTY>
        <!-- 老化失败位置6，内存的第二个channe的ECC Dq错误位置 -->
        <PROPERTY NAME="AgeTestFailedPosition6"   TYPE="y"></PROPERTY>
        <!-- 内存老化进度 -->
        <PROPERTY NAME="MemoryAgeTestProcess"    TYPE="u"></PROPERTY>
		<!-- 硬盘老化进度 -->
        <PROPERTY NAME="HarddiskAgeTestProcess"    TYPE="u" ></PROPERTY>
        <!-- 关联到VDDQ电压的accessor -->
        <PROPERTY NAME="VDDQControl" TYPE="s"> </PROPERTY>
    </CLASS>
	<!-- 支持VMD的条件类 -->
	<CLASS NAME="VMDCondition">
		<!-- 是否支持VMD:0-不支持 1-支持 -->
		<PROPERTY NAME="VMDSupport"    TYPE="y" ></PROPERTY>
	</CLASS>

	<!-- license管理 -->
	<CLASS NAME="LicenseManage">
		<!-- license管理的能力，
		 bit0: 1 - 支持管理本地的lciense； 0 - 不支持管理本地的license
		 bit1: 1 - 支持管理远程的license，如Director/eSight； 0 - 不支持管理远程的license	
		 其它：保留	
		-->
		<PROPERTY NAME="LicenseCapability" TYPE="y">		</PROPERTY>		
		<!-- license授权管理源，0: 本地，1: Director或eSight，其它:保留 -->
		<PROPERTY NAME="LicenseSourceType" TYPE="y">		</PROPERTY>
		<!-- 远程license文件管理时，服务端的IP地址或者域名, 当license文件本地管理时，此属性无效 -->
		<PROPERTY NAME="LicenseSourceAddr" TYPE="s">		</PROPERTY>
		<!-- 本地license文件管理时，license文件安装状态，0 - 未安装，1 - 已安装，0x80 - 正在安装中，当license文件远程管理时，此属性无效 -->
		<PROPERTY NAME="InstallStatus" TYPE="y">		</PROPERTY>
		<!-- 本地license文件管理时，在license文件安装时，对安装状态备份 -->
		<PROPERTY NAME="InstallStatusBak" TYPE="y">		    </PROPERTY>		
		<!-- 本地license文件管理时，license文件安装进度，掉电保存，当license文件远程管理时，此属性无效
		 0   ： 未开始安装，
		 10  ： 文件完成备份，
		 20  ： 新文件导入，
		 30  ： 新文件完成检验，
		 40  ： 新文件完成激活，
		 90  ： 备份文件删除，
		 100 ： 安装完成，
		-->
		<PROPERTY NAME="InstallProgress" TYPE="y">		</PROPERTY>
		<!-- 本地license文件管理时，license文件最近一次安装结果，0 - 成功，1 - 失败，255 - 无效值，当license文件远程管理时，此属性无效 -->
		<PROPERTY NAME="InstallResult" TYPE="y">		</PROPERTY>
		<!-- 本地license文件管理时，license文件级别，0 - 未安装（默认值），1 - 高级，其它 - 保留。 当license文件远程管理时，此属性无效 -->
		<PROPERTY NAME="LicenseClass" TYPE="y">		</PROPERTY>		
		<!-- 产品软件名称，如iBMC V2 -->
		<PROPERTY NAME="ProductName" TYPE="s">		</PROPERTY>
		<!-- 产品软件V/R版本，如iBMC V2 2 -->
		<PROPERTY NAME="ProductVersion" TYPE="s">		</PROPERTY>					
		<!-- 设备ESN，根据主板的BoardSN生成，对外呈现 -->
		<PROPERTY NAME="ProductESN" TYPE="s">		</PROPERTY>
		<!-- license状态
		    0: Undefined
			1：Default
			2：GracePeriod
			3：Normal
			4：Emergency
			5：Commissioning
			255：Unknown
		 -->
		<PROPERTY NAME="LicenseStatus" TYPE="y">		</PROPERTY>
		<!-- license失效码 -->
		<PROPERTY NAME="RevokeTicket" TYPE="s">		</PROPERTY>		
		<METHOD NAME="SetLicenseSourceType">
			<PARAMETER TYPE="y" NAME="SourceType" DIR="in"/>
        </METHOD>
		<METHOD NAME="SetLicenseSourceAddr">
			<PARAMETER TYPE="s" NAME="SourceAddr" DIR="in"/>
        </METHOD> 
		<METHOD NAME="InstallLicense">
			<PARAMETER TYPE="s" NAME="LicenseFile" DIR="in"/>
			<PARAMETER TYPE="y" NAME="FileSource" DIR="in"/>
        </METHOD>
		<METHOD NAME="ExportLicense">
			<PARAMETER TYPE="s" NAME="FilePath" DIR="in"/>
        </METHOD>
		<METHOD NAME="DeleteLicense">
        </METHOD>             
		<METHOD NAME="RevokeLicense">
			<PARAMETER TYPE="s" NAME="RevokeCode" DIR="out"/>
        </METHOD>                             
	</CLASS>

	<!-- license基本信息 -->
	<CLASS NAME="LicenseGeneralInfo">
		<!-- license文件格式版本-->
		<PROPERTY NAME="LicenseFormatVersion" TYPE="s">		</PROPERTY>		
		<!-- license文件版权 -->
		<PROPERTY NAME="LicenseCopyRight" TYPE="s">		</PROPERTY>
		<!-- license SN -->
		<PROPERTY NAME="LicenseSN" TYPE="s">		</PROPERTY>
		<!-- license类型 -->
		<PROPERTY NAME="LicenseType" TYPE="s">		</PROPERTY>
		<!-- license宽限期天数 -->
		<PROPERTY NAME="LicenseGraceDay" TYPE="u">		</PROPERTY>
		<!-- license签发者 -->
		<PROPERTY NAME="LicenseCreator" TYPE="s">		</PROPERTY>
		<!-- license申请者 -->
		<PROPERTY NAME="LicenseIssuer" TYPE="s">		</PROPERTY>
		<!-- license创建时间 -->
		<PROPERTY NAME="LicenseCreateTime" TYPE="s">		</PROPERTY>
		<!-- license使用者名称 -->
		<PROPERTY NAME="LicenseCustomer" TYPE="s">		</PROPERTY>
		<!-- license使用者所在国家或地区 -->
		<PROPERTY NAME="LicenseCountry" TYPE="s">		</PROPERTY>
		<!-- license使用者所在城市 -->
		<PROPERTY NAME="LicenseOffice" TYPE="s">		</PROPERTY>		
		<!-- 授权的设备名称 -->
		<PROPERTY NAME="NodeName" TYPE="s">		</PROPERTY>
		<!-- 授权的设备ESN -->
		<PROPERTY NAME="NodeESN" TYPE="s">		</PROPERTY>																
	</CLASS>

	<!-- license销售信息 -->
	<CLASS NAME="LicenseSaleInfo">
		<!-- 销售的产品名称 -->
		<PROPERTY NAME="ProductName" TYPE="s">		</PROPERTY>
		<!-- 销售的产品V/R版本 -->
		<PROPERTY NAME="ProductVersion" TYPE="s">		</PROPERTY>
		<!-- 销售项 -->
		<PROPERTY NAME="SaleItem" TYPE="roa">		</PROPERTY>													
	</CLASS>

	<!-- license销售项信息 -->
	<CLASS NAME="LicenseSaleItem">
		<!-- 销售项编码 -->
		<PROPERTY NAME="SaleName" TYPE="s">		</PROPERTY>		
		<!-- 销售量 -->
		<PROPERTY NAME="SaleValue" TYPE="u">		</PROPERTY>	
		<!-- 授权截止日期 -->
		<PROPERTY NAME="ValidDate" TYPE="s">		</PROPERTY>		
		<!-- 销售项描述，英文-->
		<PROPERTY NAME="SaleDesc" TYPE="s">		</PROPERTY>
		<!-- 是否永久有效 -->
		<PROPERTY NAME="IsPermanent" TYPE="y">		</PROPERTY>			
		<!-- 是否不受license控制，0 - 不放开，即该特性按授权值控制，1 - 放开控制，即该特性不作授权控制 -->
		<PROPERTY NAME="IsNoControl" TYPE="y">		</PROPERTY>			
		<!-- 销售项对应的功能开关型授权项 -->
		<PROPERTY NAME="FeatureKey" TYPE="roa">		</PROPERTY>
	</CLASS>

	<!-- license软件控制信息 -->
	<CLASS NAME="LicenseKeyInfo">
		<!-- 产品软件名称 -->
		<PROPERTY NAME="ProductName" TYPE="s">		</PROPERTY>
		<!-- 产品软件版本 -->
		<PROPERTY NAME="ProductVersion" TYPE="s">		</PROPERTY>		
		<!-- 功能开关型授权项 -->
		<PROPERTY NAME="FeatureKey" TYPE="roa">		</PROPERTY>
	</CLASS>

	<!-- license功能开关型授权信息 -->
	<CLASS NAME="LicenseFeatureKey">
		<!-- 授权项名称，在FNO系统中的KEY，不对外呈现 -->
		<PROPERTY NAME="KeyName" TYPE="s">		</PROPERTY>
		<!-- 授权项所在的组名 -->
		<PROPERTY NAME="GroupName" TYPE="s">		</PROPERTY>			
		<!-- 授权特性名称，对外呈现的实际名称 -->
		<PROPERTY NAME="FeatureName" TYPE="s">		</PROPERTY>	
		<!-- 授权项的值, 对于功能项资源只能是0或1 -->
		<PROPERTY NAME="KeyValue" TYPE="y">		</PROPERTY>		
		<!-- 是否放开控制，0 - 不放开，即该特性按授权值控制，1 - 放开控制，即该特性不作授权控制, 引用LicenseSaleItem中的值 -->
		<PROPERTY NAME="IsNoControl" TYPE="y">		</PROPERTY>			
		<!-- 授权截止日期 -->
		<PROPERTY NAME="ValidDate" TYPE="s">		</PROPERTY>
		<!-- 本地license管理时，控制项的状态，默认值0 
		    0: Undefined
			1：Default
			2：GracePeriod
			3：Normal
			4：Emergency
	    -->
		<PROPERTY NAME="CurrentState" TYPE="y">		</PROPERTY>	
		<!-- 本地license授权值, 0 - 特性关闭，1 - 特性开启，其它值非法 -->
		<PROPERTY NAME="ControlValue" TYPE="y">		</PROPERTY>					
		<!-- 远程license授权值，比如通过FusionDirector/eSight下发license并安装之后激活 -->
		<PROPERTY NAME="RemoteControlValue" TYPE="y">		</PROPERTY>
	</CLASS>

	<!-- license告警信息 -->
	<CLASS NAME="LicenseAlarmInfo">	
		<!-- 宽限状态剩余的天数 -->
		<PROPERTY NAME="RemainGraceDays" TYPE="u">		</PROPERTY>
		<!-- 调测状态剩余的天数 -->
		<PROPERTY NAME="RemainCommissioningDays" TYPE="u">		</PROPERTY>
		<!-- 产品ESN是否有效, 0: 有效，1: 无效 ，255: N/A， 默认为255 -->
		<PROPERTY NAME="ProductESNInvalid" TYPE="y">		</PROPERTY>
		<!-- license文件是否正常, 0: 正常，1: 损坏 ，255: N/A， 默认为255  -->
		<PROPERTY NAME="FileError" TYPE="y">		</PROPERTY>
		<!-- license文件ESN是否与实际的产品ESN匹配, 0: 匹配，1: 不匹配 ，255: N/A， 默认为255  -->
		<PROPERTY NAME="ProductESNNotMatch" TYPE="y">		</PROPERTY>
		<!-- license文件产品版本是否与实际的产品版本一致, 0: 匹配，1: 不匹配 ，255: N/A， 默认为255  -->
		<PROPERTY NAME="ProductVerNotMatch" TYPE="y">		</PROPERTY>
	</CLASS>
	<!-- Modbus总线类 -->
	<CLASS NAME="Modbus">
		<!-- 供电输出的使能状态（持久化保存）：0，关闭使能，1，开启使能，
		代码中不实际控制信号使能，而是通过ContionTask方式控制相应GPIO输出信号电平 -->
		<PROPERTY NAME="PowerOutputEnable" TYPE="y"></PROPERTY>
		<!-- 接口限流开关状态，关联GPIO输入信号：高电平为正常，低电平为异常  -->
		<PROPERTY NAME="CurrLimitStaus" TYPE="y"></PROPERTY>
		<!-- 丝印名称 -->
		<PROPERTY NAME="SilkName" TYPE="s"></PROPERTY>
		<!-- Modbus总线ID -->
		<PROPERTY NAME="Id" TYPE="y"> </PROPERTY>
		<!-- Modbus协议类型Type: 目前仅支持 0, RTU(UART) -->
		<PROPERTY NAME="Type" TYPE="y"> </PROPERTY>
		<!-- Modbus串口工作模式: 0, RS-232; 1, RS-485  -->
		<PROPERTY NAME="Mode" TYPE="y"> </PROPERTY>
		<!-- UART控制器的编号：2~4 -->
		<PROPERTY NAME="UART" TYPE="y">	</PROPERTY>
		<!-- UART的Port号或TCP的Port号 -->
		<PROPERTY NAME="Port" TYPE="u">	</PROPERTY>
		<!-- UART对应波特率: 115200、57600、38400、19200、9600、2400; 
		     Eth对应网口速率: 100M、1000M(GE)、10000M(10GE) -->
		<PROPERTY NAME="Speed" TYPE="u">	</PROPERTY>
		<!-- UART的校验方式: 0, 无; 1, ODD奇校验; 2, EVEN偶校验 -->
		<PROPERTY NAME="Parity" TYPE="y">	</PROPERTY>
		<!-- Modbus协议读写数据命令，供其他模块调用-->
		<METHOD NAME="ModbusSendCmd">
			<PARAMETER TYPE="u" NAME="SlaveAddr" DIR="in"/>
			<PARAMETER TYPE="y" NAME="FunctionCode" DIR="in"/>
			<PARAMETER TYPE="ay" NAME="RequestData" DIR="in"/>
			<PARAMETER TYPE="u" NAME="Timeout" DIR="in"/>
			<PARAMETER TYPE="ay" NAME="ResponseData" DIR="out"/>
		</METHOD>
		<!-- Modbus协议读输入寄存器命令，供其他模块调用-->
		<METHOD NAME="ModbusReadInputReg">
			<PARAMETER TYPE="u" NAME="SlaveAddr" DIR="in"/>
			<PARAMETER TYPE="q" NAME="RegAddr" DIR="in"/>
			<PARAMETER TYPE="y" NAME="RegNum" DIR="in"/>
			<PARAMETER TYPE="aq" NAME="RegData" DIR="out"/>
		</METHOD>
		<!-- Modbus物理口供电输出使能控制，供接口层模块调用-->
		<METHOD NAME="ModbusPwrOutSwitch">
			<PARAMETER TYPE="y" NAME="PwrOutEnable" DIR="in"/>
		</METHOD>
	</CLASS>

	<!-- ModbusSlave类 -->
	<CLASS NAME="ModbusSlave">
		<!-- Modbus Slave ID -->
		<PROPERTY NAME="SlaveId" TYPE="y"> </PROPERTY>
		<!-- 合法地址为1~247, 0为广播地址 -->
		<PROPERTY NAME="Addr" TYPE="u"></PROPERTY>
		<!-- LBus, 关联的Modbus总线 -->
		<PROPERTY NAME="LBus" TYPE="ro"></PROPERTY>
		<!-- MCU的健康状态 -->
		<PROPERTY NAME="Health" TYPE="y"> </PROPERTY>
	</CLASS>

	<!-- Modbus从机地址分配管理类，华为自研的软硬件结合方案 -->
	<CLASS NAME="ModbusAddrAllocMgmt">
		<!-- 当前对象所对应的modbus通道号，关联Modbus类的UART属性  -->
		<PROPERTY NAME="Channel" TYPE="y"> </PROPERTY>
		<!-- 预期的默认从机地址：通过此通道分配地址的从机设备需默认使用该地址 -->
		<!-- 华为自研资产定位板的默认从机地址为0x0A -->
		<PROPERTY NAME="ExpDefAddr" TYPE="u">	</PROPERTY>
		<!-- 地址自动分配策略：首级从机的Modbus地址，后续每级从机地址递加1 -->
		<!-- 有效Modbus地址为0~247，需确保起始地址小于(247-MaxSlaveNum) -->
		<!-- 建议第1个支持分配的modbus通道起始地址从0x1A开始，第2个通道从0x2A开始 -->
		<PROPERTY NAME="SlaveAddrStart" TYPE="u">	</PROPERTY>
		<!-- 支持地址自动分配的最大从机数目，与加载从机对象的连接器数目对应，要求不超过16个 -->
		<PROPERTY NAME="MaxSlaveNumber" TYPE="y">	</PROPERTY>
		<!-- 地址分配状态: 高4位为地址分配状态，0为成功，其他位失败；低4位为地址分配遍历到的最大设备编号 -->
		<PROPERTY NAME="Status" TYPE="y">	</PROPERTY>
		<!-- 华为自研的软硬件的Modbus从机地址分配方案管理类对象 -->
		<CLASS NAME="HwMBAddrAllocMgmt">
			<!-- 第一级从机在位信号  -->
			<PROPERTY NAME="Present" TYPE="y"> </PROPERTY>
			<!-- 第一级Modbus从机上电开关  -->
			<PROPERTY NAME="Power1" TYPE="y"> </PROPERTY>
			<!-- 全部Modbus从机上电开关  -->
			<PROPERTY NAME="PowerAll" TYPE="y"> </PROPERTY>
		</CLASS>
	</CLASS>

	<!-- 柜级资产管理类 -->
	<CLASS NAME="RackAssetMgmt">
		<!-- 机柜资产管理类型: 0，通过modbus和物理资产定位条管理; 1，通过网络管理 -->
		<PROPERTY NAME="MgmtType" TYPE="y"></PROPERTY>
		<!-- 机柜资产管理所用modbus通道的Id -->
		<PROPERTY NAME="ModbusId" TYPE="y"></PROPERTY>
		<!-- U位编号方向: 0, 自下而上编号; 1, 自上而下编号  -->
		<PROPERTY NAME="Direction" TYPE="y"> </PROPERTY>
		<!-- U位编号方向是否固定: 0, 不固定方向; 1, 固定方向 -->
		<PROPERTY NAME="DirectionType" TYPE="y"></PROPERTY>
		<!-- U位总数：对于物理资产定位条的情况该属性由资产定位条U位加载刷新；对于网络管理的情况需要生产定制化或用户修改，再根据该属性控制U位加载 -->
		<PROPERTY NAME="UCount" TYPE="y"> </PROPERTY>
		<!-- 已被使用的U位数  -->
		<PROPERTY NAME="UCountUsed" TYPE="y"> </PROPERTY>
		<!-- 机柜承重重量：Kg  -->
		<PROPERTY NAME="LoadCapacityKg" TYPE="u"> </PROPERTY>
		<!-- 整柜额定功耗  -->
		<PROPERTY NAME="RatedPowerWatts" TYPE="u"> </PROPERTY>
		<!-- 机柜深度（长度）：mm（毫米）  -->
		<PROPERTY NAME="DepthMm" TYPE="u"> </PROPERTY>
		<!-- 机柜宽度：mm（毫米）  -->
		<PROPERTY NAME="WidthMm" TYPE="u"> </PROPERTY>
		<!-- 机柜高度：mm（毫米）  -->
		<PROPERTY NAME="HeightMm" TYPE="u"> </PROPERTY>
		<!-- 机柜地理位置：国家  -->
		<PROPERTY NAME="Country" TYPE="s"> </PROPERTY>
		<!-- 机柜地理位置：省/州  -->
		<PROPERTY NAME="Territory" TYPE="s"> </PROPERTY>
		<!-- 机柜地理位置：城市  -->
		<PROPERTY NAME="City" TYPE="s"> </PROPERTY>
		<!-- 机柜地理位置：街道  -->
		<PROPERTY NAME="Street" TYPE="s"> </PROPERTY>
		<!-- 机柜地理位置：门牌号  -->
		<PROPERTY NAME="HouseNumber" TYPE="s"> </PROPERTY>
		<!-- 机柜地理位置：单位  -->
		<PROPERTY NAME="Name" TYPE="s"> </PROPERTY>
		<!-- 机柜地理位置：邮编  -->
		<PROPERTY NAME="PostCode" TYPE="s"> </PROPERTY>
		<!-- 机柜部署位置：楼  -->
		<PROPERTY NAME="Building" TYPE="s"> </PROPERTY>
		<!-- 机柜部署位置：层  -->
		<PROPERTY NAME="Floor" TYPE="s"> </PROPERTY>
		<!-- 机柜部署位置：房间号  -->
		<PROPERTY NAME="Room" TYPE="s"> </PROPERTY>
		<!-- 机柜部署位置：排  -->
		<PROPERTY NAME="Row" TYPE="s"> </PROPERTY>
		<!-- 机柜部署位置：柜  -->
		<PROPERTY NAME="Rack" TYPE="s"> </PROPERTY>
		<!-- 资产管理服务的可用状态，如不需要等待modbus地址分配，可在xml配置为1表示默认可用 -->
		<PROPERTY NAME="ServiceStatus" TYPE="y">	</PROPERTY>
		<!-- U位识别管理系统总体健康状态 -->
		<PROPERTY NAME="Health" TYPE="y">	</PROPERTY>
		<!-- 工具盒子的夹具ID: 保存在工具盒子主板的chassis域的SN字段，装备已固定使用，请勿重命名或移动到其他类 -->
		<PROPERTY NAME="FixtureID" TYPE="s">	</PROPERTY>
		<!-- 向RFID标签写入生效等待时间-->
		<PROPERTY NAME="WriteTagTime" TYPE="q">		</PROPERTY>
		<!-- BMC升级MCU固件的最长等待时间 -->
		<PROPERTY NAME="UpgradeMCUWaitTime" TYPE="q">		</PROPERTY>
		<!-- 机柜位置信息 -->
		<PROPERTY NAME="LocationInfo" TYPE="s">		</PROPERTY>
		<!-- 网络资产管理使用的网口 -->
		<PROPERTY NAME="NetworkMgmtEth" TYPE="roa"></PROPERTY>
		<!-- 网络资产管理使用的IP基准 -->
		<PROPERTY NAME="NetworkMgmtIpBase" TYPE="y"></PROPERTY>
		<!-- U位占用方向: 0, 占用方向向下; 1, 占用方向向上 -->
		<PROPERTY NAME="UnitOccupyDirection" TYPE="y"></PROPERTY>
		<!-- 机柜型号 -->
		<PROPERTY NAME="RackModel" TYPE="s"></PROPERTY>
		<!-- 机柜用途 计算柜：C，网络柜：N -->
		<PROPERTY NAME="RackFunction" TYPE="s"></PROPERTY>
		<!-- 机柜典配SN -->
		<PROPERTY NAME="TypicalConfigurationSN" TYPE="s"></PROPERTY>
		<!-- 空机柜SN -->
		<PROPERTY NAME="EmptyRackSN" TYPE="s"></PROPERTY>
		<!-- 基本配置机柜SN -->
		<PROPERTY NAME="BasicRackSN" TYPE="s"></PROPERTY>
		<METHOD NAME="SetCountry">
			<PARAMETER TYPE="s" NAME="Country" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetTerritory">
			<PARAMETER TYPE="s" NAME="Territory" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetCity">
			<PARAMETER TYPE="s" NAME="City" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetStreet">
			<PARAMETER TYPE="s" NAME="Street" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetHouseNumber">
			<PARAMETER TYPE="s" NAME="HouseNumber" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetName">
			<PARAMETER TYPE="s" NAME="Name" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetPostCode">
			<PARAMETER TYPE="s" NAME="PostCode" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetBuilding">
			<PARAMETER TYPE="s" NAME="Building" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetFloor">
			<PARAMETER TYPE="s" NAME="Floor" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetRoom">
			<PARAMETER TYPE="s" NAME="Room" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetRow">
			<PARAMETER TYPE="s" NAME="Row" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetRack">
			<PARAMETER TYPE="s" NAME="Rack" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetDirection">
			<PARAMETER TYPE="y" NAME="Direction" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetLocationInfo">
			<PARAMETER TYPE="s" NAME="LocationInfo" DIR="in"/>
		</METHOD>
		<!-- 设置柜级资产的承重字段 -->
		<METHOD NAME="SetLoadCapacity">
			<PARAMETER TYPE="u" NAME="LoadCapacityKg" DIR="in"/>			
		</METHOD>
		<!-- 设置柜级资产的额定功率字段 -->
		<METHOD NAME="SetRatedPower">
			<PARAMETER TYPE="u" NAME="RatedPowerWatts" DIR="in"/>			
		</METHOD>
		<!-- 设置机柜外形尺寸：长、宽、高，单位mm -->
		<METHOD NAME="SetRackDimensions">
			<PARAMETER NAME="DepthMm" TYPE="u" DIR="in"/>
			<PARAMETER NAME="WidthMm" TYPE="u" DIR="in"/>
			<PARAMETER NAME="HeightMm" TYPE="u" DIR="in"/>
		</METHOD>
		<!-- 设置机柜总U位数 -->
		<METHOD NAME="SetUnitCountTotal">
			<PARAMETER NAME="UnitCountTotal" TYPE="y" DIR="in"/>
		</METHOD>
		<!-- 设置机柜已使用的U位数 -->
		<METHOD NAME="SetUnitCountOccupied">
			<PARAMETER NAME="UnitCountOccupied" TYPE="y" DIR="in"/>
		</METHOD>
		<!-- 设置机柜资产管理服务的状态 -->
		<METHOD NAME="SetAssetMgmtStatus">
			<PARAMETER NAME="ServiceStatus" TYPE="y" DIR="in"/>
		</METHOD>
	</CLASS>

	<!--资产定位板（U位识别板）类-->
	<CLASS NAME="AssetLocateBoard">
		<!-- 产品名 -->
		<PROPERTY NAME="ProductName" TYPE="s">	</PROPERTY>
		<!-- 单板名 -->
		<PROPERTY NAME="Name" TYPE="s">	</PROPERTY>
		<!-- 单板槽位号  -->
		<PROPERTY NAME="Slot" TYPE="y"> </PROPERTY>
		<!-- 单板的BoardId -->
		<PROPERTY NAME="BoardId" TYPE='q'>	</PROPERTY>
		<!-- 单板的PCB版本号 -->
		<PROPERTY NAME="PcbId" TYPE='y'>	</PROPERTY>
		<!-- 单板的PCB版本 -->
		<PROPERTY NAME="PcbVer" TYPE="s">	</PROPERTY>
		<!-- 单板的Bootloader版本 -->
		<PROPERTY NAME="BootloaderVer" TYPE="s">	</PROPERTY>
		<!-- 单板的MCU固件版本 -->
		<PROPERTY NAME="FirmwareVersion" TYPE="s">	</PROPERTY>
		<!-- 单板的厂商信息 -->
		<PROPERTY NAME="Manufacturer" TYPE="s">	</PROPERTY>
		<!-- U位数: 6 -->
		<PROPERTY NAME="UCount" TYPE="y">	</PROPERTY>
		<!-- MCU异常状态 -->
		<PROPERTY NAME="WarningStatus" TYPE="u">	</PROPERTY>
		<!-- 单板健康状态 -->
		<PROPERTY NAME="Health" TYPE="y">	</PROPERTY>
		<!-- 预期的固件版本, 3点式，需为所有使用同一固件的单板xml统一修改 -->
		<PROPERTY NAME="ExpectFirmVer" TYPE="s"></PROPERTY>
		<!-- 固件名称，需为所有使用同一固件的单板xml统一修改 -->
		<PROPERTY NAME="FirmwareName" TYPE="s"></PROPERTY>
		<!-- 更换前SN -->   
		<PROPERTY NAME="PreviousSN" TYPE="s" ></PROPERTY>
		<!-- 部件是否发生了更换，用于产生SEL日志 -->
		<PROPERTY NAME="ReplaceFlag" TYPE="y" >	</PROPERTY> 
	</CLASS>

	<!--U位信息类-->
	<CLASS NAME="UnitInfo">
		<!-- 归属组件 -->
		<PROPERTY NAME="RefComponent" TYPE="ro">	</PROPERTY>
		<!-- 资源ID，从靠近主控端开始的偏移值: 以6U为例, 数值可为1~6 -->
		<PROPERTY NAME="ResId" TYPE="y">	</PROPERTY>
		<!-- U位编号: 根据方向、所在单板组件编号、资源ID生成 -->
		<PROPERTY NAME="UNum" TYPE="y">	</PROPERTY>
		<!-- U位对应的标签状态: 0, 无标签；1, 正常读取到标签；2, 有标签但读异常；3, 有标签但写异常 -->
		<PROPERTY NAME="Status" TYPE="y">	</PROPERTY>
		<!-- U位是否检测到标签 -->
		<PROPERTY NAME="Detected" TYPE="y">	</PROPERTY>
		<!-- U位指示灯的状态值 -->
		<PROPERTY NAME="LedStatus" TYPE="q"> </PROPERTY>
		<!-- U位指示灯的颜色 -->
		<PROPERTY NAME="IndicatorColor" TYPE="s"> </PROPERTY>
		<!-- U位指示灯的状态：闪灭 -->
		<PROPERTY NAME="IndicatorLED" TYPE="s"> </PROPERTY>
		<!-- U位指示灯功能，每个bit代表唯一的U位灯功能（颜色、亮/灭/闪状态）是否被激活，
		     U位灯功能有各自的优先级，同等优先级的功能bit互斥，按优先级决定生效的功能，
		     具体定义参考代码中uled_func_idx_t类型的实现 -->
		<PROPERTY NAME="IndicatorFunction" TYPE="u"> </PROPERTY>
		<!-- U位相关告警产生状态：每个bit代表一个告警项，1为产生，0为消除
		     具体定义参考代码中unit_warn_idx_t类型的实现 -->
		<PROPERTY NAME="WarnStatus" TYPE="u">	</PROPERTY>
		<!-- U位标签的UID信息 -->
		<PROPERTY NAME="RFIDTagUID" TYPE="ay">	</PROPERTY>
		<!-- 对应设备的序列号 -->
		<PROPERTY NAME="SerialNumber" TYPE="s">	</PROPERTY>
		<!-- U位上一次识别到设备的序列号 -->
		<PROPERTY NAME="LastSerialNumber" TYPE="s">	</PROPERTY>
		<!-- 设备类别 -->
		<PROPERTY NAME="DeviceType" TYPE="s"> </PROPERTY>
		<!-- 设备型号 -->
		<PROPERTY NAME="Model" TYPE="s"> </PROPERTY>
		<!-- 设备高度，单位: U -->
		<PROPERTY NAME="UHeight" TYPE="y">	</PROPERTY>
		<!-- 设备允许占空的空间，即当前U位到下一标签(或资产条末端)的距离，单位: U -->
		<PROPERTY NAME="AvailableRackSpaceU" TYPE="y">	</PROPERTY>
		<!-- 制造商 -->
		<PROPERTY NAME="Manufacturer" TYPE="s">	</PROPERTY>
		<!-- 开始使用时间, 上架时间 -->
		<PROPERTY NAME="CheckInTime" TYPE="s">	</PROPERTY>
		<!-- 最近一次在位时间，下架时间 -->
		<PROPERTY NAME="LastPresentTime" TYPE="u">	</PROPERTY>
		<!-- 设备设计生命周期，单位: 年 -->
		<PROPERTY NAME="LifeCycleYear" TYPE="y">	</PROPERTY>
		<!-- 设备重量，单位: kg -->
		<PROPERTY NAME="WeightKg" TYPE="u">	</PROPERTY>
		<!-- 设备额定功耗，单位: W -->
		<PROPERTY NAME="RatedPowerWatts" TYPE="u">	</PROPERTY>
		<!-- 设备部件号 -->
		<PROPERTY NAME="PartNumber" TYPE="s">	</PROPERTY>
		<!-- 资产所有人 -->
		<PROPERTY NAME="AssetOwner" TYPE="s">	</PROPERTY>
		<!-- 上架时间 -->
		<PROPERTY NAME="DiscoveredTime" TYPE="u">	</PROPERTY>
		<!-- 扩展域：JSON字符串，最大支持5个子属性字段 -->
		<PROPERTY NAME="ExtendField" TYPE="s">	</PROPERTY>
		<!-- U位信息是否对用户只读: 0, 用户可读写; 1, 用户只读 -->
		<PROPERTY NAME="RWCapability" TYPE="y"></PROPERTY>
		<!-- 写当前U位的信息到MCU -->
		<METHOD NAME="SetUnitInfo">
			<PARAMETER TYPE="q" NAME="lenth" DIR="in"/>
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
		<!-- 设置当前U位设备上下架 -->
		<METHOD NAME="SetUnitInstalledStatus">
			<PARAMETER TYPE="y" NAME="installed_state" DIR="in"/>
		</METHOD>
		<!-- 设置当前U位对应指示灯的状态到MCU -->
		<METHOD NAME="SetLedStatus">
			<PARAMETER TYPE="y" NAME="state" DIR="in"/>
			<PARAMETER TYPE="y" NAME="interval" DIR="in"/>
			<PARAMETER TYPE="y" NAME="color" DIR="in"/>
		</METHOD>
	</CLASS>

	<!--设备信息类-->
	<CLASS NAME="DeviceInfo">
		<!-- 归属的U位对象 -->
		<PROPERTY NAME="RefUnitInfo" TYPE="ro">	</PROPERTY>
		<!-- 归属RFID标签的U位号 -->
		<PROPERTY NAME="RefUNum" TYPE="y">	</PROPERTY>
		<!-- 设备槽位号，对机架、交换机等设备无效 -->
		<!-- 用于区别E9000、X6800、G5500等框设备中节点设备位置 -->
		<PROPERTY NAME="Slot" TYPE="y">	</PROPERTY>
		<!-- 设备oem厂商名称 -->
		<PROPERTY NAME="Vendor" TYPE="s"> </PROPERTY>
		<!-- 对应设备的序列号, 非框设备则与U位标签中序列号一致 -->
		<PROPERTY NAME="SerialNumber" TYPE="s">	</PROPERTY>
		<!-- 上一次发现设备的序列号 -->
		<PROPERTY NAME="LastSerialNumber" TYPE="s">	</PROPERTY>
		<!-- SSDP发现的状态 -->
		<PROPERTY NAME="Discovered" TYPE="y">	</PROPERTY>
		<!-- 设备封顶状态  -->
		<PROPERTY NAME="PowCapState" TYPE="y">		</PROPERTY>
		<!-- 设备当前封顶起始时间  -->
		<PROPERTY NAME="PowCapStartTime" TYPE="u">		</PROPERTY>
		<!-- 设备当前封顶结束时间  -->
		<PROPERTY NAME="PowCapEndTime" TYPE="u">		</PROPERTY>
		<!-- 设备当前封顶间隔时长  -->
		<PROPERTY NAME="PowCapDuration" TYPE="u">		</PROPERTY>
		<!-- 设备在1h 内封顶次数  -->
		<PROPERTY NAME="PowCapTimes" TYPE="u">		</PROPERTY>
		<!-- 设备在1h 内首次封顶时间  -->
		<PROPERTY NAME="PowCapFisrtTime" TYPE="u">		</PROPERTY>
		<!-- 设备触发封顶状态  -->
		<PROPERTY NAME="PowCapTriggerStatus" TYPE="y">		</PROPERTY>
		<!-- 设备上次触发封顶状态  -->
		<PROPERTY NAME="PowCapLastTriggerStatus" TYPE="y">		</PROPERTY>
		<!-- 设备封顶结果  -->
		<PROPERTY NAME="PowCapResult" TYPE="y">		</PROPERTY>
		<!-- 设备封顶失败次数  -->
		<PROPERTY NAME="PowCapFailedTimes" TYPE="y">		</PROPERTY>
		<!-- 设备当前功耗  -->
		<PROPERTY NAME="PowerConsumedWatts" TYPE="u">		</PROPERTY>
		<!-- 设备功耗封顶下限值  -->
		<PROPERTY NAME="MinPowerLimitInWatts" TYPE="u">		</PROPERTY>
		<!-- 设备上次功耗封顶下限值  -->
		<PROPERTY NAME="LastMinPowerLimitInWatts" TYPE="u">		</PROPERTY>
		<!-- 设备功耗封顶上限值  -->
		<PROPERTY NAME="MaxPowerLimitInWatts" TYPE="u">		</PROPERTY>
		<!-- 设备上次功耗封顶上限值  -->
		<PROPERTY NAME="LastMaxPowerLimitInWatts" TYPE="u">		</PROPERTY>	
		<!-- 设备查询到的功耗封顶值  -->
		<PROPERTY NAME="LimitInWatts" TYPE="u">		</PROPERTY>	
		<!-- 功耗封顶下发的封顶值  -->
		<PROPERTY NAME="CappingPower" TYPE="u">		</PROPERTY>
		<!-- 设备上次下发封顶值 -->
		<PROPERTY NAME="LastCappingPower" TYPE="u">		</PROPERTY>
		<!-- 设备平均功耗 -->
		<PROPERTY NAME="AveragePowerWatts" TYPE="u">		</PROPERTY>
		<!-- 设备峰值功耗  -->
		<PROPERTY NAME="PeakPowerWatts" TYPE="u">		</PROPERTY>
		<!-- 算法计算设备上限值  -->
		<PROPERTY NAME="UpperBoundPower" TYPE="u">		</PROPERTY>
		<!-- 算法计算设备下限值  -->
		<PROPERTY NAME="LowerBoundPower" TYPE="u">		</PROPERTY>
		<!-- 指定算法中，设备优先级 -->
		<PROPERTY NAME="Priority" TYPE="y">		</PROPERTY>
		<!-- 指定算法中，设备被选中标志  -->
		<PROPERTY NAME="AssignedFlag" TYPE="y">		</PROPERTY>
		<!-- 支持功耗封顶设置标志  -->
		<PROPERTY NAME="PowCapSupport" TYPE="y">		</PROPERTY>	
		<!-- 设备封顶修正值  -->
		<PROPERTY NAME="RevPowCapValue" TYPE="u">		</PROPERTY>			
		<!-- 设备上次下发封顶值 -->
		<PROPERTY NAME="RFGetPowerUrl" TYPE="s">		</PROPERTY>	
		<!-- 设备上次下发封顶值 -->
		<PROPERTY NAME="RFPatchPowerEtag" TYPE="s">		</PROPERTY>	
		<!-- IPv4地址 -->
		<PROPERTY NAME="IpAddr" TYPE="s">	</PROPERTY>
		<!-- IPv6地址 -->
		<PROPERTY NAME="Ipv6Addr" TYPE="s">	</PROPERTY>
		<!-- 从设备查询同步到的数据采集服务的开启状态 -->
		<PROPERTY NAME="DataAcqSvcStatus" TYPE="y">	</PROPERTY>
		<!-- 设备的活动数据库名称 -->
		<PROPERTY NAME="ActiveDBFileName" TYPE="s">		</PROPERTY>
		<!-- 数据采集项：包含资源筛查条件的URL子串数组，单个元素举例如下：-->
		<!-- /redfish/v1/DataAcquisitionService/DataAcquisitionReport?$ComponentType=chassis&$MetricType=Temperature -->
		<PROPERTY NAME="AcquisitionItems" TYPE="as">	</PROPERTY>
		<!-- 设备数据采集时间窗口的EndTime时间戳 -->
		<PROPERTY NAME="CurrentTimestamp" TYPE="u">		</PROPERTY>
		<!-- Token状态，0无效；1有效，当从1变为0时需上报Token失效事件 -->
		<PROPERTY NAME="TokenStatus" TYPE="y">	</PROPERTY>
		<!-- 和设备通信失败时的最大重试次数，为0表示只发一次请求，不重试 -->
		<PROPERTY NAME="MaxRetryTimes" TYPE="y">	</PROPERTY>
		<!-- 设备心跳最近一次响应的时间，无需配置 -->
		<PROPERTY NAME="HeartBeatLastRecvTime" TYPE="u"></PROPERTY>
		<!-- 设备心跳丢失异常离线告警，无需配置 -->
		<PROPERTY NAME="HeartBeatOfflineType" TYPE="y"></PROPERTY>
		<!-- 保存设备序列号，该方法仅对框内设备有意义 -->
		<METHOD NAME="SaveSerialNum">
			<PARAMETER TYPE="s" NAME="ser_num" DIR="in"/>
		</METHOD>
		<!-- 保存上一次发现设备的序列号，该方法仅对框内设备有意义 -->
		<METHOD NAME="SaveLastSerialNum">
			<PARAMETER TYPE="s" NAME="ser_num" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetPeriodPower">
			<PARAMETER TYPE="u" NAME="AveragePowerWatts" DIR="in"/>
			<PARAMETER TYPE="u" NAME="PeakPowerWatts" DIR="in"/>			
		</METHOD>
		<!-- 保存设备的IP地址 -->
		<METHOD NAME="SaveIpAddr">
			<PARAMETER TYPE="s" NAME="ip" DIR="in"/>
		</METHOD>
		<!-- 保存设备的IPv6地址 -->
		<METHOD NAME="SaveIpv6Addr">
			<PARAMETER TYPE="s" NAME="ipv6" DIR="in"/>
		</METHOD>
		<!-- 修改设备的Discovered状态 -->
		<METHOD NAME="SetDiscoverStatus">
			<PARAMETER TYPE="y" NAME="discover_status" DIR="in"/>
		</METHOD>
		<!-- 更新设备的Token -->
		<METHOD NAME="SetDeviceToken">
			<PARAMETER TYPE="s" NAME="token" DIR="in"/>
		</METHOD>
		<!-- 处理对设备的REST请求 -->
		<METHOD NAME="HandleRestRequest">
			<!-- REST请求方法: GET、PATCH、POST等 -->
			<PARAMETER TYPE="s" NAME="rest_method" DIR="in"/>
			<!-- 请求资源的相对URI，/redfish/v1/xxx -->
			<PARAMETER TYPE="s" NAME="relative_uri" DIR="in"/>
			<!-- 请求头部（可为空），JSON字符串，用于传入Basic Auth或ETag信息 -->
			<PARAMETER TYPE="s" NAME="header_json_str" DIR="in"/>
			<!-- 请求体（可为空），通常为JSON字符串，若为其他结构，需在头部补充Content-Type信息 -->
			<PARAMETER TYPE="s" NAME="body_str" DIR="in"/>
			<!-- 响应码 -->
			<PARAMETER TYPE="u" NAME="rsp_code" DIR="out"/>
			<!-- 响应头部，JSON字符串，会返回资源ETag、Content-Type等信息 -->
			<PARAMETER TYPE="s" NAME="rsp_header_json_str" DIR="out"/>
			<!-- 响应体，通常为JSON字符串，参考头部Content-Type字段信息 -->
			<PARAMETER TYPE="s" NAME="rsp_body_str" DIR="out"/>
		</METHOD>
	</CLASS>

	<!-- 机柜管理类  -->
	<CLASS NAME="RackManagement" ID="131">
		<!-- 机柜管理代理服务的可用状态  -->
		<PROPERTY NAME="AgentServiceStatus" TYPE="y">	</PROPERTY>
		<!-- 机柜当前功耗  -->
		<PROPERTY NAME="CurrentPower" TYPE="u">		</PROPERTY>
		<!-- 机柜使能功耗封顶阈值  -->
		<PROPERTY NAME="EnPowCapCoefficient" TYPE="y">		</PROPERTY>
		<!-- 机柜解除功耗封顶阈值  -->
		<PROPERTY NAME="RelPowCapCoefficient" TYPE="y">		</PROPERTY>
		<!-- 机柜当前封顶状态  -->
		<PROPERTY NAME="PowerCappingState" TYPE="y">		</PROPERTY>
		<!-- 机柜当前封顶是否被允许状态  -->
		<PROPERTY NAME="PowerCappingAllowedStatus" TYPE="y">		</PROPERTY>
		<!-- 机柜告警状态  -->
		<PROPERTY NAME="AlarmStatus" TYPE="y"></PROPERTY>
		<!-- 机柜当前封顶值  -->		
		<PROPERTY NAME="CappingPower" TYPE="u">		</PROPERTY>
		<!-- 机柜新的封顶值, 为CappingPower + P削 -->
		<PROPERTY NAME="ActualCappingPower" TYPE="u"></PROPERTY>
		<!-- 机柜封顶功能开关  -->
		<PROPERTY NAME="PowerCappingEnabled" TYPE="y">		</PROPERTY>
		<!-- 机柜设置标志 -->
		<PROPERTY NAME="PowCapSetFlag" TYPE="y">	</PROPERTY>
		<!-- 机柜封顶策略  -->
		<PROPERTY NAME="CappingStrategy" TYPE="y">		</PROPERTY>
		<!-- 机柜首轮发现当前管理设备标志  -->
		<PROPERTY NAME="InitDevDiscovered" TYPE="y">		</PROPERTY>
		<!-- 机柜封顶指定封顶数量  -->
		<PROPERTY NAME="AssignedDevCounts" TYPE="y">	</PROPERTY>
		<!-- 当前功耗封顶总数  -->
		<PROPERTY NAME="DevSupportListCounts" TYPE="y">	 </PROPERTY>
		<!-- 工具盒子模式标识 1:进入工具盒子模式，盒子作为从机 0:智能盒子正常模式，盒子作为主机-->
		<PROPERTY NAME="DftToolBoxModeFlag" TYPE="y" ID="1"></PROPERTY>
		<!-- 机柜数据采集配置文件名称  -->
		<PROPERTY NAME="RackDaCfgFileName" TYPE="s"></PROPERTY>
		<!-- 削峰填谷使能开关 0：关闭，1：开启-->
		<PROPERTY NAME="PeakClippingEnabled" TYPE="y"></PROPERTY>
		<!-- 削峰填谷功能状态 0：未启用，1：使用中-->
		<PROPERTY NAME="PeakClippingStatus" TYPE="y"></PROPERTY>
		<!-- 设置进入装备模式 -->
		<METHOD NAME="SetDftToolBoxModeFlag" ID="1">
			<PARAMETER TYPE="y" NAME="ToolBoxModeFlag" DIR="in"/>
		</METHOD>
		<!-- 查询机柜数据采集配置项 -->
		<METHOD NAME="GetRackDaCfg">
			<PARAMETER TYPE="s" NAME="cfg_json_str" DIR="out"/>
		</METHOD>
		<!-- 更新/保存机柜数据采集配置项（json配置文件持久化） -->
		<METHOD NAME="UpdateRackDaCfg">
			<PARAMETER TYPE="s" NAME="cfg_json_str" DIR="in"/>
		</METHOD>
		<METHOD NAME="UpdatePowCapCfg">
		</METHOD>
		<METHOD NAME="SetRackInitDevDiscovered">
			<PARAMETER TYPE="y" NAME="InitDevDiscovered" DIR="in"/>
		</METHOD>
		<METHOD NAME="QueryRackDaData">
			<PARAMETER NAME="Component" TYPE="y" DIR="in"/>
			<PARAMETER NAME="MetricType" TYPE="y" DIR="in"/>
			<PARAMETER NAME="StartTime" TYPE="u" DIR="in"/>
			<PARAMETER NAME="EndTime" TYPE="u" DIR="in"/>
			<PARAMETER NAME="SerialNumber" TYPE="s" DIR="in"/>
			<PARAMETER NAME="OutInfo" TYPE="s" DIR="out"/>
		</METHOD>
		<METHOD NAME="SavePowerCappingConfig">
			<PARAMETER NAME="PowerCappingConfig" TYPE="s" DIR="in"/>
			<PARAMETER NAME="Result" TYPE="i" DIR="out"/>
			<PARAMETER NAME="OutputParam" TYPE="s" DIR="out"/>
		</METHOD>
		<METHOD NAME="SetPeakClippingEnabled">
			<PARAMETER NAME="Enabled" TYPE="y" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetPeakClippingBackupPower">
			<PARAMETER NAME="BackupPower" TYPE="u" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetPeakClippingBackupPeriod">
			<PARAMETER NAME="BackupPeriod" TYPE="u" DIR="in"/>
		</METHOD>
		<METHOD NAME="NotifyPowerMgntEvent">
			<PARAMETER NAME="ObjectName" TYPE="s" DIR="in"/>
			<PARAMETER NAME="EventType" TYPE="y" DIR="in"/>
		</METHOD>
	</CLASS>
	
	<CLASS NAME="PeripheralPsuSlot">  
		<PROPERTY NAME="SlotId" TYPE='y'>         </PROPERTY>
		<PROPERTY NAME="DetectFail" TYPE='y'> </PROPERTY>
		<PROPERTY NAME="Target" TYPE="ro">        </PROPERTY>
		<PROPERTY NAME="Presence" TYPE="y">   	  </PROPERTY>
	</CLASS>
			<!-- 与MCU同步传感器读值 详见带外规范0x1d接口 -->
	<CLASS NAME="PeripheralDeviceSensor">  
	    <!--  传感器名字 -->
		<PROPERTY NAME="SensorName" TYPE="s">        </PROPERTY>
	    <!--  传感器的温度值 -->
		<PROPERTY NAME="Value" TYPE="q">   	  </PROPERTY>
	</CLASS>
	
	<CLASS NAME="LocalHostAgentPort">  
	    <!-- BoBChannelType为1时，BMC localhost 的端口，用来代替bma上的用来接收bmc发送的https消息的端口-->
		<PROPERTY NAME="LocalhostHttpsAgentPort" TYPE="q"></PROPERTY>
		<!-- BoBChannelType为1时，BMC localhost 的端口，用来代替bma上的用来接收bmc发送的trap 0消息的端口-->
		<PROPERTY NAME="LocalhostTrapAgentPort0" TYPE="q"></PROPERTY>
		<!-- BoBChannelType为1时，BMC localhost 的端口，用来代替bma上的用来接收bmc发送的trap 1消息的端口-->
		<PROPERTY NAME="LocalhostTrapAgentPort1" TYPE="q"></PROPERTY>
		<!-- BoBChannelType为1时，BMC localhost 的端口，用来代替bma上的用来接收bmc发送的trap 2消息的端口-->
		<PROPERTY NAME="LocalhostTrapAgentPort2" TYPE="q"></PROPERTY>
		<!-- BoBChannelType为1时，BMC localhost 的端口，用来代替bma上的用来接收bmc发送的trap 3消息的端口-->
		<PROPERTY NAME="LocalhostTrapAgentPort3" TYPE="q"></PROPERTY>
	</CLASS>
	
    <!-- 不定型別表达式， 类型为GVariant支持的类型 -->
    <CLASS NAME="VariantExpression">  
	    <!--  字符串表达式结果 -->
		<PROPERTY NAME="Value" TYPE="*">        </PROPERTY>
        <!--  字符串表达式第一个备选参数,对应索引0 -->
		<PROPERTY NAME="A" TYPE="*">        </PROPERTY>
        <!--  字符串表达式第二个备选参数,对应索引1 -->
		<PROPERTY NAME="B" TYPE="*">        </PROPERTY>
        <!--  字符串表达式第三个备选参数,对应索引2 -->
		<PROPERTY NAME="C" TYPE="*">        </PROPERTY>
	    <!--  字符串表达式参数索引,从0开始 -->
		<PROPERTY NAME="Index" TYPE="y">   	  </PROPERTY>
    </CLASS>

<CLASS NAME="NodeEthStatus" ID="138">
		<PROPERTY NAME="PortLinkStatus" TYPE="i" ID="1">   	  </PROPERTY>
		<METHOD NAME="SetPortLinkStatus" ID="1">
			<PARAMETER TYPE="i" NAME="LinkStatus" DIR="in"/>
        </METHOD>
	</CLASS>
	
	<CLASS NAME="LANSwitchPortStatus">
       <!--  唯一标识 -->	
	    <PROPERTY NAME="Id" TYPE="y" >  </PROPERTY> 
	    <!--LANSwiticID-->
		<PROPERTY NAME="LANSwiticID" TYPE="y">        </PROPERTY>
	    <!-- Port口ID -->
		<PROPERTY NAME="PortID" TYPE="y">   	  </PROPERTY>
	    <!-- Port口连接状态 -->
		<PROPERTY NAME="LinkStatus" TYPE="i" >   	  </PROPERTY>
	</CLASS>
	
	<!--  比如，RefClass：PcieCard；RefProperty：FunctionClass; ValueMatchRefProperty:3 就表示GPU卡 -->
	<CLASS NAME="BoardTypeDefinition">  
	    <!--  信息收集的类型，比如CPU、Memory等 -->
		<PROPERTY NAME="RefClass" TYPE="s">        </PROPERTY>
        <!--  需要关联的属性名称，如果属性值为NULL则表示只要看RefClass
			  类型为as的时候表示要检测多个属性，此时MatchType的类型要为ay 且MatchType的数目要比RefProperty大1，
			  MatchType的元素值依次为RefProperty的各个属性的匹配关系，最后一个为所有这些属性的关系，目前只支持与，即各个属性同时成立 -->
		<PROPERTY NAME="RefProperty" TYPE="*">        </PROPERTY>
        <!--  与关联属性匹配的值，如果RefProperty为NULL，则表示此值没有用，类型预留所有的类型，目前代码只支持byte和string类型
			  如果RefClass和RefProperty定义的属性的类型不是byte型的话，则要更新代码实现 -->
		<PROPERTY NAME="ValueMatchRefProperty" TYPE="*">        </PROPERTY>
		<!--  匹配类型，0表示等于，1表示不等于,
		      2：表示属性值包含ValueMatchRefProperty，仅对于字符串类型；3：表示属性值不包含ValueMatchRefProperty，仅对于字符串类型
              5: 表示BMC没有对应的管理对象但仍然需要显示遍历信息，如cable
			  6: 表示RefProperty有多个值，且这几个值要同时成立，如HDD要看HDD对象的在位为1和MediaType为0两个同时满足
			     此种类型，RefProperty和ValueMatchRefProperty都要是数组类型，且数组元素个数一样, 且MatchType也是ay类型， 
				 MatchType的数目要比RefProperty多1, 6要放到MatchType的最后一个，前面依次放各个属性的比较类型（等于或者不等于）-->
		<PROPERTY NAME="MatchType" TYPE="*">        </PROPERTY>
		<!--  对外显示的类型名称 -->
		<PROPERTY NAME="DisplayName" TYPE="s">        </PROPERTY>
    </CLASS>
	
	<CLASS NAME="CollectPropertyDefinition">  
	    <!--  属性收集的类型：0：表示收集的对象是上一级关联此对象的BoardInfoCollectCfg所定义的对象
							1：表示收集的对象由属性RefClassObj所定义的相关对象
							2:表示收集的数据是由RefProperty定义，如Elabel.BoardSerialNumber,则表示获取与上一级关联此对象的
								BoardInfoCollectCfg所定义的对象具有相同Position的Elabel对象的BoardSerialNumber
							3：表示收集的数据是由RefProperty定义，格式为Object.PropertyName 如Fru0Elabel.BoardSerialNumber
								就表示获取对象Fru0Elabel的属性BoardSerialNumber的值
							4：表示不用收集数据，直接将RefProperty的数据返回
							5：表示数据来源于通过sp收集到的device_info的JSON文件内容，数据格式如Drives.FirmwareVersion表示
								获取Drives JSON节点的FirmwareVersion
							6：信息从同级对象或者SP中获取只要有一个获取成功就退出
							7：表示收集的数据是由RefProperty和DisplayProperty一起组成，中间使用连字符"-"，RefProperty格式为
								Object.PropertyName，DisplayProperty就是属性定义的字符串，如主板规格：Mainboard-2288H V5
							8：用于部件序号，由DisplayProperty定义的字符串和部件数量计数序号组成，从1开始编号，如MEM1，MEM2
							9：用于部件序号，由DisplayProperty定义的字符串和部件数量计数序号组成，从0开始编号，如CPU0，CPU1
							10：用于电源规格，由RefProperty和DisplayProperty一起组成，无连字符，RefProperty格式为
								Object.PropertyName，DisplayProperty是单位，一般用W，示例550W
							11：用于网卡规格，直接数据来源于由RefProperty定义，网口最大速率，如果多种，则用逗号连接，如"1,10"
							12：用于CPU规格，当前仅针对Intel，对CPU的Version单独处理，示例Intel(R) Xeon(R) Gold 6246 CPU，
								处理后变为Intel_6246
							13：用于硬盘规格，将单位MB转变为为TB，如CapacityMB=915200转变为NVMe-3.84TB,SSD-1.92TB, HDD-14TB
							14：用于内存规格，由DisplayProperty定义的多个属性拼接，示例：DDR4-32GB-2666
							15：用于风扇规格，示例：8038+
							16：用于RAID卡规格，示例：RAID(0/1/5/6/10/50/60) -->
		<PROPERTY NAME="Type" TYPE="y">        </PROPERTY>
		<!--  需要获取的信息对象，关联BoardTypeDefinition对象-->
		<PROPERTY NAME="RefClassObj" TYPE="ro">        </PROPERTY>
        <!--  需要关联的属性名称，有可能有过个，比如网卡信息就要获取VID和DID -->
		<PROPERTY NAME="RefProperty" TYPE="as">        </PROPERTY>
        <!--  显示的信息内容，不需要就配置NULL，如有，则属性数目要与RefProperty的数目一致 -->
		<PROPERTY NAME="DisplayProperty" TYPE="as">        </PROPERTY>
    </CLASS>
	
	<CLASS NAME="BoardInfoCollectCfg">  
	    <!--  信息收集的类型，关联类的对象BoardTypeDefinition -->
		<PROPERTY NAME="RefClassObj" TYPE="ro">        </PROPERTY>
		<!--  收集的信息显示名称组，元素组的数目要跟CollectObjArray一样
              如果存在有数组元素CollectInfoName一样则要将其合并对外显示，
			  例如Deviceld要显示VID和DID两项内容，这是显示的名字就要配置2个DeviceId
			  对应的CollectProperyObjArray分别用来关联VID和DID对应的CollestPropertyDefinition -->
		<PROPERTY NAME="CollectInfoName" TYPE="as">        </PROPERTY>
        <!--  收集的信息对象组，有目前没法实现的，用NULL表示 -->
		<PROPERTY NAME="CollectProperyObjArray" TYPE="roa">        </PROPERTY>
    </CLASS>

	<CLASS NAME="SysBattery" >
		<!-- 系统电池额定容量 -->
		<PROPERTY NAME="RatedCapacity" TYPE="u"></PROPERTY>
		<!-- 系统电池满电容量 -->
		<PROPERTY NAME="FullCapacity" TYPE="u"></PROPERTY>
		<!-- 系统电池剩余容量  -->
		<PROPERTY NAME="RemainCapacity" TYPE="u"></PROPERTY>
		<!-- 系统备电电量 FPOD支持削峰填谷功能，备电电量由上层管理软件设置  -->
		<PROPERTY NAME="BackupBattery" TYPE="u"></PROPERTY>
		<!-- 系统备电功率 FPOD支持削峰填谷功能，备电功率由上层管理软件设置  -->
		<PROPERTY NAME="BackupPower" TYPE="u"></PROPERTY>
		<!-- 系统备电时间 FPOD支持削峰填谷功能，备电时间由上层管理软件设置，单位s  -->
		<PROPERTY NAME="BackupPeriod" TYPE="u"></PROPERTY>
 		<!-- 系统备电电量 计算备电能力不足告警时实际使用的备电电量参数 -->
        <PROPERTY NAME="ActualBackupCap" TYPE="d"></PROPERTY>
		<!-- 系统备电时间 计算备电能力不足告警时实际使用的备电时间参数，单位s -->
        <PROPERTY NAME="ActualBackupTime" TYPE="u"></PROPERTY>  
		<!-- 系统备电场景 计算备电能力不足告警时的备电场景-->
        <PROPERTY NAME="BackupScenario" TYPE="s"></PROPERTY>
        <!-- 总备电能力告警 1：告警 0：恢复 -->
        <PROPERTY NAME="BackupCapAlarm" TYPE="y"></PROPERTY>
		<!-- 在位电池数量 -->
		<PROPERTY NAME="BatteryPresentCounts" TYPE="y"></PROPERTY>
		<!-- 正在升级的电池槽位号，按位定义，bit0为1表示1号电池在升级，bit1表示2号...
			 此值会周期性更新，默认为0 -->
		<PROPERTY NAME="UpgradingSlots" TYPE="u"></PROPERTY>
		<!-- 预期工作电池个数，产品无法获取真实电池在位信号时，用于和已通信成功的电池数量比较产生告警 -->
		<PROPERTY NAME="ExpectedWorkBatteryCnt" TYPE="y"></PROPERTY>
		<PROPERTY NAME="DischargingBBUCnt" TYPE="y"></PROPERTY>
		<!-- 剩余放电时间，单位秒 -->
		<PROPERTY NAME="RemainDischargingSec" TYPE="u"></PROPERTY>
		<METHOD NAME="SetBackupConfig">
			<PARAMETER TYPE="u" NAME="BackupPower" DIR="in"/>
			<PARAMETER TYPE="u" NAME="BackupPeriod" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetMaxChargeCurrent">
			<PARAMETER TYPE="d" NAME="MaxChargeCurrent" DIR="in"/>
		</METHOD>
		<!-- 设置正在升级的电池槽位 -->
		<METHOD NAME="SetSysBatteryUpgradingSlots">
		<PARAMETER TYPE="u" NAME="UpgradingSlots" DIR="in"/>
			</METHOD>			
	</CLASS>

	<CLASS NAME="BBUModule" ID="140">
		<PROPERTY NAME="Id" TYPE="y" ID="1">                   </PROPERTY>
		<PROPERTY NAME="BoardName" TYPE="s">            </PROPERTY>
		<PROPERTY NAME="BoardId" TYPE='q'>				</PROPERTY>
		<PROPERTY NAME="Presence" TYPE="y"></PROPERTY>
		<PROPERTY NAME="RefChip" TYPE="ro">             </PROPERTY>
		<!-- 电池协议 0: I2C; 1: canbus; 0XFF:无效-->
		<PROPERTY NAME="Protocol" TYPE="y"></PROPERTY>
		<!-- 关联部件告警的健康状态 -->
		<PROPERTY NAME="Health" TYPE="y"  ID="2">		        </PROPERTY>
		<!-- 在线测试状态 -->
		<PROPERTY NAME="TestStatus" TYPE="y">		    </PROPERTY>
		<!-- 通信丢失，i2c访问模块失败等 -->
		<PROPERTY NAME="CommunicationLost" TYPE="y"  ID="3">    </PROPERTY>
		<!-- 硬件CPLD，关闭备电 -->
		<PROPERTY NAME="StopStdby" TYPE="y">           </PROPERTY>
		<!-- 硬件CPLD，备电状态 -->
		<PROPERTY NAME="StdbyStatus" TYPE="y">         </PROPERTY>
		<!-- 在线升级状态 -->
		<PROPERTY NAME="UpgradeStatus" TYPE="y">       </PROPERTY>
		<!-- 硬件CPLD提供的告警状态 -->
		<PROPERTY NAME="CpldAlarm" TYPE="y"  ID="4">        </PROPERTY>
		<!-- 硬件CPLD提供的充电状态 -->
		<PROPERTY NAME="ChargeStatus" TYPE="y">      </PROPERTY>
        <!-- 硬件CPLD提供的操作放电功能 -->
        <PROPERTY NAME="OperateDischarge" TYPE="y" >  </PROPERTY> 
		<!-- 32位告警码 -->
		<PROPERTY NAME="AlarmCode" TYPE="u">            </PROPERTY>
		<!-- 一次备电容量告警门限 -->
		<PROPERTY NAME="CapThreshold" TYPE="q">         </PROPERTY>
		<!-- 一次备电容量告警 -->
		<PROPERTY NAME="CapAlarm" TYPE="y"  ID="5">         </PROPERTY>
		<!-- BBU软件版本号 -->
		<PROPERTY NAME="FirmwareVersion" TYPE="s">            </PROPERTY>
		<!-- BBU类型 -->
		<PROPERTY NAME="BBUType" TYPE="y">            </PROPERTY>
		<!-- PCB版本号 -->
		<PROPERTY NAME="PcbId" TYPE="y">            </PROPERTY>
		<!-- BBU剩余电量百分比 -->
		<PROPERTY NAME="PerRemCap" TYPE="y">            </PROPERTY>
		<!-- BBU剩余容量 -->
		<PROPERTY NAME="RemainCap" TYPE="u">           </PROPERTY>
		<!-- BBU满电容量 -->
		<PROPERTY NAME="FullCap" TYPE="u">               </PROPERTY> 
		<!-- BBU额定容量 固定值，不随电池老化、电压电流影响而变化 -->
		<PROPERTY NAME="RateCap" TYPE="u"></PROPERTY> 
		<!-- BBU电芯最高温度 -->
		<PROPERTY NAME="CellMaxTemperature" TYPE="n"></PROPERTY>
		<!-- BBU电芯最低温度 -->
		<PROPERTY NAME="CellMinTemperature" TYPE="n"></PROPERTY>
		<!-- BBU放电限流点 -->	
		<PROPERTY NAME="DischargeCurrentLimit" TYPE="d"></PROPERTY>
		<!-- BBU输出功率 -->
		<PROPERTY NAME="PowerOut" TYPE="d"></PROPERTY>
		<!-- BBU额定功率 -->
		<PROPERTY NAME="RatePower" TYPE="u"></PROPERTY>
		<!-- 电池健康状态 -->
		<PROPERTY NAME="StateOfHealth" TYPE="u"></PROPERTY>
		<!-- BBU工作状态 -->
		<PROPERTY NAME="WorkStatus" TYPE="y">            </PROPERTY>
		<!-- 模块放电次数 -->
		<PROPERTY NAME="DischargeTimes" TYPE="q">           </PROPERTY>
		<!-- 电池放电次数 -->
		<PROPERTY NAME="BattDischargeTimes" TYPE="q">   </PROPERTY>
		<!-- BBU使用时间 -->
		<PROPERTY NAME="WorkTime" TYPE="u">           </PROPERTY>
		<!-- 更换前SN -->   
		<PROPERTY NAME="PreviousSN" TYPE="s" ></PROPERTY>  
		<!-- 部件是否发生了更换，用于产生SEL日志 -->
		<PROPERTY NAME="ReplaceFlag" TYPE="y" >	</PROPERTY>  
		<!-- BBU模块SN 长度32 -->
		<PROPERTY NAME="SN" TYPE="s"></PROPERTY>
		<!-- 物理位置 -->
		<PROPERTY NAME="Location" TYPE="s"></PROPERTY>
		<!-- 部件名称 -->
		<PROPERTY NAME="DeviceName" TYPE="s"></PROPERTY>
		<!--  BBU模块丝印名称 -->
		<PROPERTY NAME="SilkText" TYPE="s"></PROPERTY>
		<!-- BBU制造日期 三个byte 年月日 年基于2000 -->
		<PROPERTY NAME="BattManuDate" TYPE="s">           </PROPERTY>
		<!-- BBU电池包型号 长度16 -->
		<PROPERTY NAME="BattModel" TYPE="s">           </PROPERTY>
		<!-- BBU电池包SN 长度32 -->
		<PROPERTY NAME="BattSN" TYPE="s">           </PROPERTY>
		<!-- BBU电池包厂商 长度16 -->
		<PROPERTY NAME="BattManu" TYPE="s">           </PROPERTY>
		<!-- BBU电池包部件编码  -->
		<PROPERTY NAME="BattPartNum" TYPE="s" ></PROPERTY>
		<!-- BBU温度1 -->
		<PROPERTY NAME="Temperature1" TYPE="n">            </PROPERTY>
		<!-- BBU温度2 -->
		<PROPERTY NAME="Temperature2" TYPE="n">            </PROPERTY>
		<!-- BBU温度3 -->
		<PROPERTY NAME="Temperature3" TYPE="n">            </PROPERTY>
		<!-- BBU温度4 -->
		<PROPERTY NAME="Temperature4" TYPE="n">            </PROPERTY>
		<!-- BBU温度5 -->
		<PROPERTY NAME="Temperature5" TYPE="n">            </PROPERTY>
		<!-- BBU温度6 -->
		<PROPERTY NAME="Temperature6" TYPE="n">            </PROPERTY>
		<!-- BBU温度7 -->
		<PROPERTY NAME="Temperature7" TYPE="n">            </PROPERTY>
		<!-- BBU电压1 -->
		<PROPERTY NAME="Voltage1" TYPE="d">             </PROPERTY>
		<!-- BBU电压2 -->
		<PROPERTY NAME="Voltage2" TYPE="d">             </PROPERTY>
		<!-- BBU电压3 -->
		<PROPERTY NAME="Voltage3" TYPE="d">             </PROPERTY>
		<!-- BBU电压4 -->
		<PROPERTY NAME="Voltage4" TYPE="d">             </PROPERTY>
		<!-- BBU电压5 -->
		<PROPERTY NAME="Voltage5" TYPE="d">             </PROPERTY>
		<!-- BBU电压6 -->
		<PROPERTY NAME="Voltage6" TYPE="d">             </PROPERTY>
		<!-- BBU电芯电压1 -->
		<PROPERTY NAME="CellVoltage1" TYPE="d">           </PROPERTY>
		<!-- BBU电芯电压2 -->
		<PROPERTY NAME="CellVoltage2" TYPE="d">           </PROPERTY>
		<!-- BBU电芯电压3 -->
		<PROPERTY NAME="CellVoltage3" TYPE="d">           </PROPERTY>
		<!-- BBU电芯电压4 -->
		<PROPERTY NAME="CellVoltage4" TYPE="d">           </PROPERTY>
		<!-- BBU电芯电压5 -->
		<PROPERTY NAME="CellVoltage5" TYPE="d">           </PROPERTY>
		<!-- BBU电芯电压6 -->
		<PROPERTY NAME="CellVoltage6" TYPE="d">           </PROPERTY>
		<!-- BBU电芯电压7 -->
		<PROPERTY NAME="CellVoltage7" TYPE="d">           </PROPERTY>
		<!-- BBU电芯电压8 -->
		<PROPERTY NAME="CellVoltage8" TYPE="d">           </PROPERTY>
		<!-- BBU电芯电压9 -->
		<PROPERTY NAME="CellVoltage9" TYPE="d">           </PROPERTY>
		<!-- BBU电芯电压10 -->
		<PROPERTY NAME="CellVoltage10" TYPE="d">           </PROPERTY>
		<!-- BBU电芯电压11 -->
		<PROPERTY NAME="CellVoltage11" TYPE="d">           </PROPERTY>
		<!-- BBU电芯电压12 -->
		<PROPERTY NAME="CellVoltage12" TYPE="d">           </PROPERTY>
		<!-- BBU电芯电压13 -->
		<PROPERTY NAME="CellVoltage13" TYPE="d">           </PROPERTY>
		<!-- BBU电芯电压14 -->
		<PROPERTY NAME="CellVoltage14" TYPE="d">           </PROPERTY>
		<!-- BBU电芯电压15 -->
		<PROPERTY NAME="CellVoltage15" TYPE="d">           </PROPERTY>
		<!-- BBU电芯电压16 -->
		<PROPERTY NAME="CellVoltage16" TYPE="d">           </PROPERTY>
		<!-- BBU电芯电压17 -->
		<PROPERTY NAME="CellVoltage17" TYPE="d">           </PROPERTY>
		<!-- BBU电芯电压18 -->
		<PROPERTY NAME="CellVoltage18" TYPE="d">           </PROPERTY>	
		<!-- BBU充电电流 -->
		<PROPERTY NAME="Current1" TYPE="n">           </PROPERTY>
		<!-- BBU电流 -->
		<PROPERTY NAME="Current2" TYPE="n">           </PROPERTY>
		<!-- BBU电流 -->
		<PROPERTY NAME="Current3" TYPE="n">           </PROPERTY>
		<!-- BBU电流 -->
		<PROPERTY NAME="Current4" TYPE="n">           </PROPERTY>
		<!-- BBU电流 -->
		<PROPERTY NAME="Current5" TYPE="n">           </PROPERTY>
		<PROPERTY NAME="M2Presence" TYPE="y">	      </PROPERTY>
		<!-- BBU电芯最高温度处于Range1的时间  RM210中range1：大于60℃  -->
		<PROPERTY NAME="CellTempInRange1Time" TYPE="u">	</PROPERTY>
		<!-- BBU电芯最高温度处于Range2的时间  RM210中range2：50℃~60℃  -->
		<PROPERTY NAME="CellTempInRange2Time" TYPE="u">	</PROPERTY>
		<!-- BBU电芯最高温度处于Range3的时间  RM210中range3：40℃~50℃  -->
		<PROPERTY NAME="CellTempInRange3Time" TYPE="u">	</PROPERTY>
		<!-- BBU电芯最高温度处于Range4的时间  RM210中range4：10℃~40℃  -->
		<PROPERTY NAME="CellTempInRange4Time" TYPE="u">	</PROPERTY>
		<!-- BBU电芯最高温度处于Range5的时间  RM210中range5：0℃~10℃  -->
		<PROPERTY NAME="CellTempInRange5Time" TYPE="u">	</PROPERTY>
		<!-- BBU电芯最高温度处于Range6的时间  RM210中range6：小于0℃  -->
		<PROPERTY NAME="CellTempInRange6Time" TYPE="u">	</PROPERTY>
		<!-- 过压告警次数 --> 
		<PROPERTY NAME="VccHighAlarmCounts" TYPE="u"></PROPERTY>
		<!-- 低压告警次数 --> 
		<PROPERTY NAME="VccLowAlarmCounts" TYPE="u"></PROPERTY>
		<!-- 高温告警次数 --> 
		<PROPERTY NAME="TempHighAlarmCounts" TYPE="u"></PROPERTY>
		<!--  低温告警次数 --> 
		<PROPERTY NAME="TempLowAlarmCounts" TYPE="u"></PROPERTY>
		<!-- BBU1电芯温度 -->
		<PROPERTY NAME="CellTemperature1" TYPE="q">           </PROPERTY>
		<!-- BBU2电芯温度 -->
		<PROPERTY NAME="CellTemperature2" TYPE="q">           </PROPERTY>
		<!-- BBU3电芯温度 -->
		<PROPERTY NAME="CellTemperature3" TYPE="q">           </PROPERTY>
		<!-- BBU4电芯温度 -->
		<PROPERTY NAME="CellTemperature4" TYPE="q">           </PROPERTY>
		<!-- BBU5电芯温度 -->
		<PROPERTY NAME="CellTemperature5" TYPE="q">           </PROPERTY>
		<!-- BBU6电芯温度 -->
		<PROPERTY NAME="CellTemperature6" TYPE="q">           </PROPERTY>
		<!-- BBU7电芯温度 -->
		<PROPERTY NAME="CellTemperature7" TYPE="q">           </PROPERTY>
		<!-- BBU8电芯温度 -->
		<PROPERTY NAME="CellTemperature8" TYPE="q">           </PROPERTY>
		<!-- BBU9电芯温度 -->
		<PROPERTY NAME="CellTemperature9" TYPE="q">           </PROPERTY>
		<!-- BBU10电芯温度 -->
		<PROPERTY NAME="CellTemperature10" TYPE="q">           </PROPERTY>
		<!-- BBU11电芯温度 -->
		<PROPERTY NAME="CellTemperature11" TYPE="q">           </PROPERTY>
		<!-- BBU12电芯温度 -->
		<PROPERTY NAME="CellTemperature12" TYPE="q">           </PROPERTY>
		<!-- BBU13电芯温度 -->
		<PROPERTY NAME="CellTemperature13" TYPE="q">           </PROPERTY>
		<!-- BBU14电芯温度 -->
		<PROPERTY NAME="CellTemperature14" TYPE="q">           </PROPERTY>
		<!-- BBU15电芯温度 -->
		<PROPERTY NAME="CellTemperature15" TYPE="q">           </PROPERTY>
		<!-- BBU16电芯温度 -->
		<PROPERTY NAME="CellTemperature16" TYPE="q">           </PROPERTY>
		<!-- BBU17电芯温度 -->
		<PROPERTY NAME="CellTemperature17" TYPE="q">           </PROPERTY>
		<!-- BBU18电芯温度 -->
		<PROPERTY NAME="CellTemperature18" TYPE="q">           </PROPERTY>
		<!-- 告警状态（前二字节）-->
		<PROPERTY NAME="AlarmStatusEx" TYPE="q"></PROPERTY>
		<!-- 告警状态（后四字节）-->
		<PROPERTY NAME="AlarmStatus" TYPE="u"></PROPERTY>
        <!-- 备电能力不足告警状态 -->
        <PROPERTY NAME="BackupCapAlarmStatus" TYPE="y"></PROPERTY>
		<!-- 电池最大充电充电电流 -->
		<PROPERTY NAME="MaxChargeCurrent" TYPE="u"></PROPERTY>
		<!-- 电池直接采样电压 -->
		<PROPERTY NAME="DirectSamplingVoltage" TYPE="d"></PROPERTY>
		<!-- 电池当前实际的充电电流 -->
		<PROPERTY NAME="RealChargeCurrent" TYPE="u"></PROPERTY>
		<!-- 电池侧电流采样 -->
		<PROPERTY NAME="BatteryCurrentSampling" TYPE="d"></PROPERTY>
		<!-- 电池的外部母排电压 -->
		<PROPERTY NAME="RealVoltage" TYPE="u"></PROPERTY>
		<!-- 充放电状态 -->
		<PROPERTY NAME="DischargingStatus" TYPE="y"></PROPERTY>
        <!-- 电池组电流 -->
		<PROPERTY NAME="BatteryStringCurrent" TYPE="d"></PROPERTY>
		<!-- 电池充放电能力系数 -->
		<PROPERTY NAME="BatAbilityCoefficients" TYPE="d"></PROPERTY>
		<!-- 瞬态能力 -->
        <PROPERTY NAME="InstantCap" TYPE="u"> </PROPERTY>
        <!-- 稳态能力 -->
        <PROPERTY NAME="StableCap" TYPE="u">  </PROPERTY>       
		<!-- 下电禁止状态扫描使能 -->
		<PROPERTY NAME="PowerOffScanDisable" TYPE="y"></PROPERTY>   
        <!-- BBU 0502编码 -->
        <PROPERTY NAME="PowerType" TYPE="s">                </PROPERTY>
        <!-- 延时关闭BBU使能 -->
        <PROPERTY NAME="DelayKillBbuEn" TYPE="y">                </PROPERTY>
        <!-- 收集实时日志功能打开 -->
        <PROPERTY NAME="LogRealtimeEnable" TYPE="y">    </PROPERTY>
        <!-- BBU上一次放电时间 6个byte 年月日时分秒 年基于2000 -->
        <PROPERTY NAME="LastDischargeTime" TYPE="s"> </PROPERTY>
        <!-- 充电方式默认自动，可设置为手动 0表示自动 1表示手动 -->
        <PROPERTY NAME="ChargeMode" TYPE="y">  </PROPERTY>
        <!-- 根据开工状态设置充电方式 1表示小电流 0表示大电流 默认0xff不使用此功能-->
        <PROPERTY NAME="ChargeType" TYPE="y">  </PROPERTY>
        <!-- 维护产品下发冗余节点状态 0：正常 1：故障-->
        <PROPERTY NAME="MirrorNodeStatus" TYPE="y">    </PROPERTY>
        <!-- 在线测试开关 1:开 0：关 -->
        <PROPERTY NAME="OnlineTestEnable" TYPE="y">    </PROPERTY>
        <!-- 在线测试通用开始条件加强 -->
        <PROPERTY NAME="OnlineTestStartCon" TYPE="y">    </PROPERTY>
        <!-- 在线测试通用停止条件加强 -->
        <PROPERTY NAME="OnlineTestStopCon" TYPE="y">    </PROPERTY>
        <!-- 在线测试特殊开始条件加强回调 -->
        <PROPERTY NAME="OnlineTestStartConFunc" TYPE="as">    </PROPERTY>
        <!-- 在线测试特殊停止条件加强回调 -->
        <PROPERTY NAME="OnlineTestStopConFunc" TYPE="as">    </PROPERTY>
        <!-- 通过i2c读取的BBU PCB版本，默认不填，代码更新 -->
        <PROPERTY NAME="PcbVersion" TYPE="y">    </PROPERTY>
        <!-- 寿命预告警门限 -->
        <PROPERTY NAME="AlarmThreshold" TYPE="q">    </PROPERTY>
        <PROPERTY NAME="WorkMode" TYPE="y">    </PROPERTY>
		<METHOD NAME="SetUpgradeStatus">
			<PARAMETER TYPE="y" NAME="UpgradeStatus" DIR="in"/>
		</METHOD>
		<METHOD NAME="StopStdbyStatus">
		</METHOD>
        <!-- 方法：BBU模块更换时用于产生SEL日志 -->
		<METHOD NAME="GenerateReplaceRecord">
		</METHOD>
        <!-- 方法：BBU模块更换时产生SEL日志时， 用于设置更换前SN信息 -->
		<METHOD NAME="SetPreReplaceInfo">
		</METHOD>
		<METHOD NAME="OperateBbu">
		    <PARAMETER TYPE="y" NAME="Operate" DIR="in"/>
        </METHOD>
		<METHOD NAME="GetBbuElabel">
		    <PARAMETER TYPE="ay" NAME="FruData" DIR="out"/>
        </METHOD>
		<METHOD NAME="SetBbuElabel">
		    <PARAMETER TYPE="ay" NAME="FruData" DIR="in"/>
        </METHOD>
        <METHOD NAME="SetBbuLogNum">
            <PARAMETER TYPE="q" NAME="LogNum" DIR="in"/>
        </METHOD>
        <!-- 用于属性同步 -->
		<METHOD NAME="PropertySyncMethod">
		    <PARAMETER TYPE="*" NAME="*" DIR="in"/>
		    <PARAMETER TYPE="*" NAME="*" DIR="out"/>
		</METHOD>
    </CLASS>
    <CLASS NAME="LedCtrl">
        <PROPERTY NAME="LedTest" TYPE="y">	   	    </PROPERTY>
        <PROPERTY NAME="CtrlValue" TYPE="y">		</PROPERTY>
        <PROPERTY NAME="CtrlAccessor" TYPE="y">		</PROPERTY>
        <PROPERTY NAME="LedOnValue" TYPE="y">		</PROPERTY>	
    </CLASS>
    
    <!-- ARM高级特性管理类 -->
    <CLASS NAME="ARMServiceConfig" ID="141">
        <!-- SEC加速器使能 1使能 0关闭 -->
        <PROPERTY NAME="SECEnable" TYPE="y" ID="1">	   	</PROPERTY>
        <!-- HPRE加速器使能 1使能 0关闭 -->
        <PROPERTY NAME="HPREEnable" TYPE="y" ID="2">	</PROPERTY>
        <!-- RDE加速器使能 1使能 0关闭 -->
        <PROPERTY NAME="RDEEnable" TYPE="y" ID="3">		</PROPERTY>
        <!-- ZIP加速器使能 1使能 0关闭 -->
        <PROPERTY NAME="ZIPEnable" TYPE="y" ID="4">		</PROPERTY>	
        <!--方法：用于获取ARM使能状态，Type=1 SEC加速器使能，Type=2 HPRE加速器使能
        Type=3 RDE加速器使能，Type=4 ZIP加速器使能
        Value=0关闭，Value=1使能-->
        <METHOD NAME="GetKunpengFeatureKey">
            <PARAMETER TYPE="y" NAME="Type" DIR="in"/>
            <PARAMETER TYPE="y" NAME="Value" DIR="out"/>
        </METHOD>
    </CLASS>
	
    <CLASS NAME="MemChannelMap">
        <!-- 内存的物理ChannelId，与主板丝印一致，对应Memory类的ChannelId字段 -->
        <PROPERTY NAME="PhysicalChannelId" TYPE="ay">	   	</PROPERTY>
        <!-- 内存的逻辑ChannelId，表示连接CPU的DDR控制器的索引 -->
        <PROPERTY NAME="LogicalChannelId" TYPE="ay">	   	</PROPERTY>
    </CLASS>
    
    <!-- BMC的CPU核的管理配置，目前只有1711平台才支持 -->
    <CLASS NAME="BMCCoreManagement">
		<!-- Hi1711核心温度，单位摄氏度 -->
        <PROPERTY NAME="CoreTemp" TYPE="q">        </PROPERTY>
        <!-- 动态开关核功能使能 1使能 0关闭 DCA: Dynamic core allocation -->
        <PROPERTY NAME="DCAEnable" TYPE="y">        </PROPERTY>
        <!-- 关核的温度，单位摄氏度，芯片到达该温度后会关闭3个从核 -->
        <PROPERTY NAME="CoreDisableTemp" TYPE="i">        </PROPERTY>
        <!-- 开核的温度，单位摄氏度，有3个值，分别代表开第一个，第二个，第三个从核时的芯片温度 -->
        <PROPERTY NAME="CoreEnableTemp" TYPE="ai">        </PROPERTY>
        <!-- 下电关核的超时时间，单位秒，为0表示下电不关核 -->
        <PROPERTY NAME="CoreDisablePowerOffTime" TYPE="u">        </PROPERTY>
    </CLASS>
	<!--人工智能处理芯片-->
    <CLASS NAME="NPU">  	
		<PROPERTY NAME="Id" TYPE="y">	</PROPERTY>		
		<!-- NPU所处的载板对象 -->
		<PROPERTY NAME="Board" TYPE="ro">		</PROPERTY>	
		<PROPERTY NAME="Name" TYPE="s">		</PROPERTY>
		<!-- 关联部件告警的健康状态 -->
        <PROPERTY NAME="Health" TYPE="y">		 </PROPERTY>
        <!-- 关联部件的故障码，如果health为0时为"" -->
        <PROPERTY NAME="FaultCode" TYPE="s"></PROPERTY>
		<PROPERTY NAME="NPUEntity" TYPE="ro">	</PROPERTY>
		<PROPERTY NAME="Presence" TYPE="y">		</PROPERTY>
		<!-- 当前NPU是否上电，支持CPU热插拔的单板存在业务侧上电而部分NPU不上电的情况 -->
		<PROPERTY NAME="PowerOn" TYPE='y'>	</PROPERTY>
		<!-- NPU固件版本 -->
        <PROPERTY NAME="FirmwareVersion" TYPE="s">	</PROPERTY>
		<!-- 电压，单位mV -->
		<PROPERTY NAME="Volt" TYPE="u">     </PROPERTY>
		<!-- 功耗，单位W -->
		<PROPERTY NAME="Power" TYPE="q">		</PROPERTY>
		<!-- AiCore计算核心温度-->
		<PROPERTY NAME="AiCoreTemp" TYPE='q'>	</PROPERTY>
		<!-- VRD chip温度-->
		<PROPERTY NAME="VRDChipTemp" TYPE='q'>	</PROPERTY>
		<!-- HBM内存温度-->
		<PROPERTY NAME="HBMTemp" TYPE='q'>		</PROPERTY>
		<!-- 芯片外围设备NimBus温度-->
		<PROPERTY NAME="NimBusTemp" TYPE='q'>	</PROPERTY>
		<!-- 厂商-->
		<PROPERTY NAME="Manufacturer" TYPE="s">		        </PROPERTY>
		<PROPERTY NAME="VenderId" TYPE="q">			</PROPERTY>
		<PROPERTY NAME="DeviceId" TYPE="q">			</PROPERTY>
		<PROPERTY NAME="BDF" TYPE='s'>				</PROPERTY>
		<!-- 序列号 -->
		<PROPERTY NAME="SN" TYPE='s'>				</PROPERTY>
		<!-- 单BIT ECC计数 -->         
		<PROPERTY NAME="SingleECC" TYPE="u">        </PROPERTY>
		<!-- 双BIT ECC计数 -->         
		<PROPERTY NAME="DoubleECC" TYPE="u">        </PROPERTY>
		<!-- NPU ECC错误告警状态 2-严重告警(NPU ECC历史计数超门限值64) 1-事件 (NPU ECC历史计数超门限值32) 0-NPU ECC历史计数超门限值的情况未发生 -->         
		<PROPERTY NAME="ECCAlarmStatus" TYPE="u">        </PROPERTY>
		<!-- 芯片版本，如Ascend910 --> 
		<PROPERTY NAME="Version" TYPE='s'>			</PROPERTY>
		<!-- 型号 --> 
		<PROPERTY NAME="Model" TYPE='s'>			</PROPERTY>
		<!-- 多个NPU协同工作模式，1代表协同模式，0代表单独模式 --> 
		<PROPERTY NAME="Mode" TYPE='y'>		</PROPERTY>
		<PROPERTY NAME="ThermTrip" TYPE='q'>		</PROPERTY>
		<!-- 芯片架构，如ARM -->
		<PROPERTY NAME="Architecture" TYPE="s" >	</PROPERTY>
		<!-- 指令集，如ARM-64 -->
		<PROPERTY NAME="InstructionSet" TYPE="s" >	</PROPERTY>
		<!-- 芯片算力规格，如512 Tera-OPS / 256 Tera-FLOPS -->
		<PROPERTY NAME="ComputeCapability" TYPE="s" ></PROPERTY>
		<!-- ctrl CPU 占用率 -->
		<PROPERTY NAME="CtrlCPUUsagePercent" TYPE="q" ></PROPERTY>
		<!-- AI Core 主频 -->
		<PROPERTY NAME="AiCoreMaxSpeedMHz" TYPE="q" ></PROPERTY>
		<!-- AI Core 占用率 -->
		<PROPERTY NAME="AiCoreUsagePercent" TYPE="q" ></PROPERTY>
		<!-- 片上内存-总内存大小 -->
		<PROPERTY NAME="TotalMemoryKiB" TYPE="u" ></PROPERTY>
		<!-- 片上内存-内存已用大小 -->
		<PROPERTY NAME="MemoryUsageKiB" TYPE="u" ></PROPERTY>
		<!-- 片上内存-内存剩余大小 -->
		<PROPERTY NAME="MemoryFreeKiB" TYPE="u" ></PROPERTY>
		<!-- 板卡NPU芯片-内存容量是否支持获取  bit0:板卡NPU芯片-内存容量 0：不支持 1：支持 -->
		<PROPERTY NAME="CapabilitySupportMask" TYPE="u" ></PROPERTY>
		<!-- 板卡NPU芯片-内存容量 -->
		<PROPERTY NAME="MemoryCapacityKiB" TYPE="u" ></PROPERTY>
        <!-- 板卡NPU芯片-额定带宽 -->
		<PROPERTY NAME="MemoryBandWidth" TYPE="u" ></PROPERTY>
		<!-- 板卡NPU芯片-额定功耗 -->
		<PROPERTY NAME="PowerCapacityWatts" TYPE="u" ></PROPERTY>
		<!-- 板卡NPU芯片-实际功耗 -->
		<PROPERTY NAME="PowerConsumedWatts" TYPE="q" ></PROPERTY>
		<!-- 板卡NPU芯片-实际温度 -->
		<PROPERTY NAME="ReadingCelsius" TYPE="q" ></PROPERTY>
        <!-- 板卡NPU芯片-SN码 -->
		<PROPERTY NAME="SerialNumber" TYPE="s" ></PROPERTY>
		<!-- 910网口-MAC地址 -->
		<PROPERTY NAME="MACAddress" TYPE="s" ></PROPERTY>
		<!-- 910网口-IPv4地址 -->
		<PROPERTY NAME="IpAddr" TYPE="s" ></PROPERTY>
		<!-- 910网口-IPv4子网掩码 -->
		<PROPERTY NAME="SubnetMask" TYPE="s" ></PROPERTY>
		<!-- 910网口-IPv4网关 -->
		<PROPERTY NAME="Gateway" TYPE="s" ></PROPERTY>
		<!-- 910网口-总接收包数 -->
		<PROPERTY NAME="ReceivedPackets" TYPE="u" ></PROPERTY>
		<!-- 910网口-总发送包数 -->
		<PROPERTY NAME="TransmittedPackets" TYPE="u" ></PROPERTY>
		<!-- 910网口-总丢包数 -->
		<PROPERTY NAME="DroppedPackets" TYPE="u" ></PROPERTY>
		<!-- NPU日志收集的进度 -->
		<PROPERTY NAME="NpuLogProcessBar"  TYPE="y"></PROPERTY>
		<!-- NPU宕机异常汇聚信号 0：正常 1：异常 -->
		<PROPERTY NAME="IErr" TYPE="y"></PROPERTY>
		<!-- NPU宕机异常原因标识 bit0：NPU RstOut, bit1: NPU-IMU握手超时 -->
		<PROPERTY NAME="IErrFlag" TYPE="u"></PROPERTY>
		<!-- NPU-IMU状态 0：正常，1：异常(表挂死) -->
		<PROPERTY NAME="IMUState" TYPE="y"></PROPERTY>
		<PROPERTY NAME="HistoryEccCount" TYPE="u"> </PROPERTY>
		<PROPERTY NAME="HistoryEccTime" TYPE="au"> </PROPERTY>
		<!-- 历史单bit ECC信息 -->
		<PROPERTY NAME="HistorySingleBitEcc" TYPE="ro"> </PROPERTY>
		<!-- 历史多bit ECC信息 -->
		<PROPERTY NAME="HistoryMultiBitEcc" TYPE="ro"> </PROPERTY>
		<!-- 芯片BDF -->
		<PROPERTY NAME="RootBDF" TYPE='s'>	</PROPERTY>
		<!-- BMA ID索引信息 -->
		<PROPERTY NAME="BMAId" TYPE="s">	</PROPERTY>	
		<!-- 内存资源使用率（%） -->
		<PROPERTY NAME="MemUsagePercent" TYPE="q" >	</PROPERTY>
		<!-- HBM资源使用率（%） -->
		<PROPERTY NAME="HBMUsagePercent" TYPE="q" >	</PROPERTY>
		<!-- 内存带宽资源使用率（%） -->
		<PROPERTY NAME="MemBWUsagePercent" TYPE="q" >	</PROPERTY>
		<!-- HBM带宽资源使用率（%） -->
		<PROPERTY NAME="HBMBWUsagePercent" TYPE="q" >	</PROPERTY>
		<!-- AiCpu资源使用率（%） -->
		<PROPERTY NAME="AiCPUUsagePercent" TYPE="q" >	</PROPERTY>
		<!-- NPU PFA Event -->
		<PROPERTY NAME="PFAEvent" TYPE="y"></PROPERTY>
		<!-- 表示部件是否故障诊断定位的故障源，1表示是故障源，0表示不是 -->
		<PROPERTY NAME="FDMFault" TYPE='y'>		        </PROPERTY>
		<METHOD NAME="SetFDMFault">
			<PARAMETER TYPE="y" NAME="FDMFault" DIR="in"/>
		</METHOD>
		<!-- 设置NPU芯片的BDF属性 -->
		<METHOD NAME="SetBDF">
			<PARAMETER TYPE="s" NAME="TmpBDF" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetNPUStatisticsObjFromBMA">
				<PARAMETER TYPE="s" NAME="type_str" DIR="in"/>
				<PARAMETER TYPE="s" NAME="rsc_str" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetMode">
			<PARAMETER TYPE="y" NAME="Mode" DIR="in"/>
		</METHOD>
		<METHOD NAME="CollectNpuLog">
			<PARAMETER TYPE="s" NAME="filename" DIR="out"/>
		</METHOD>
		<!--  设置PFAEvent -->
		<METHOD NAME="SetPFAEvent">
			<PARAMETER TYPE="y" NAME="PFAEvent" DIR="in"/>
		</METHOD>
		<!-- 方法：设置板卡NPU芯片内存容量 -->
		<METHOD NAME="SetMemoryCapacity">
			<PARAMETER TYPE="u" NAME="MemoryCapacityKiB" DIR="in"/>
		</METHOD>
        <METHOD NAME="SetNpuInfoFromMcu">
			<PARAMETER TYPE="s" NAME="property" DIR="in"/>	
			<PARAMETER TYPE="ay" NAME="inputData" DIR="in"/>
		</METHOD>
	</CLASS> 
	<!-- NPU 历史ECC错误信息 -->
	<CLASS NAME="NPUHistoryECCInfo">
		<!-- 错误类型 1：单bit, 2：多bit -->
		<PROPERTY NAME="Type" TYPE="y"> </PROPERTY>
		<!-- 错误地址计数 -->
		<PROPERTY NAME="Count" TYPE="u"> </PROPERTY>
		<!-- 时间戳 -->
		<PROPERTY NAME="Time" TYPE="au"> </PROPERTY>
		<!-- 物理地址（低32位），当前仅多bit使用 -->
		<PROPERTY NAME="PhyAddrLow" TYPE="au"> </PROPERTY>
		<!-- 物理地址（高32位），当前仅多bit使用 -->
		<PROPERTY NAME="PhyAddrHigh" TYPE="au"> </PROPERTY>
		<!-- 寄存器地址，当前仅单bit使用-->
		<PROPERTY NAME="StackPcId" TYPE="au"> </PROPERTY>
		<!-- 行列地址 -->
		<PROPERTY NAME="RowColumn" TYPE="au"> </PROPERTY>
		<!-- Ecc所在Bank -->
		<PROPERTY NAME="Bank" TYPE="au"> </PROPERTY>
		<!-- 出错地址报错次数，当前仅单bit使用 -->
		<PROPERTY NAME="AddrErrorCount" TYPE="au"> </PROPERTY>
	</CLASS>

    <CLASS NAME="LswNodeManage">
        <!-- 平面名称  -->		
        <PROPERTY NAME="PlaneName" TYPE="s">        </PROPERTY>
        <PROPERTY NAME="PlaneId" TYPE="y">        </PROPERTY>
        <!-- Local节点有效标识:0x5a表示节点有效，0xff表示节点无效 -->
        <PROPERTY NAME="Valid" TYPE="y">    </PROPERTY>             
        <PROPERTY NAME="SlotId" TYPE="y">    </PROPERTY>      
        <!-- 设置valid状态 -->
        <METHOD NAME="SetValidStatus">
            <PARAMETER NAME="valid" TYPE="y" DIR="in"/>
        </METHOD>
        <METHOD NAME="ValidStatusUpdateMethod">
            <PARAMETER TYPE="y" NAME="SlotId" DIR="in"/>
            <PARAMETER TYPE="s" NAME="IpAddr" DIR="in"/>
            <PARAMETER TYPE="y" NAME="Valid" DIR="out"/>
        </METHOD>
        <CLASS NAME="LswNodeManageCenter">
            <!-- 是否在smm上上报端口告警： 0为不告警，1为上报告警 -->
            <PROPERTY NAME="AssertFlag" TYPE="y">    </PROPERTY>  
        </CLASS>
        <CLASS NAME="LswNodeManageLocal">
            <PROPERTY NAME="CenterIpAddr" TYPE="s">    </PROPERTY>
            <PROPERTY NAME="CenterSlotId" TYPE="y">    </PROPERTY>

            <CLASS NAME="LswNodeManageDP">    
                <!-- 生产状态，0为正常状态，1为生产整机状态 -->
                <PROPERTY NAME="ManufactureStatus"  TYPE="y"></PROPERTY>
                <!-- ITF端口模式，1为模式1(2*100GE)，2为模式2(8*25GE), 3为模式3(所有itf端口) -->
                <PROPERTY NAME="ItfPortMode"  TYPE="y"></PROPERTY>
                <!-- IPMC设置itf端口模式 -->
                <METHOD NAME="SetItfPortMode">
                    <PARAMETER NAME="Mode" TYPE="y"  DIR="in"/>
                </METHOD>
                <!-- IPMC查询itf端口模式 -->
                <METHOD NAME="GetItfPortMode">
                    <PARAMETER NAME="Mode" TYPE="y"  DIR="out"/>
                </METHOD>
            </CLASS>
            <CLASS NAME="LswNodeManageCP">    </CLASS>
        </CLASS>
    </CLASS>

    <CLASS NAME="LswPublicConfig">  
        <!-- 平面名称  -->        
        <PROPERTY NAME="PlaneName" TYPE="s">        </PROPERTY>
        <PROPERTY NAME="PlaneId" TYPE="y">        </PROPERTY>
        <!-- ServerPort: 赋值0时，系统内使用的端口号为50025) -->
        <PROPERTY NAME="ServerPort"   TYPE="q"></PROPERTY>
        <!-- 对象所在槽位号  -->
        <PROPERTY NAME="SlotId" TYPE="y">    </PROPERTY>
        <!-- vlan采用bitmap表示�?28*32bit的数�? -->
        <PROPERTY NAME="Vlan" TYPE="au">        </PROPERTY>
        <!-- trunk采用固定数组  -->
        <PROPERTY NAME="Trunk" TYPE="au">        </PROPERTY>    
        <!-- 总端口数 -->
        <PROPERTY NAME="PortNums" TYPE="y">        </PROPERTY>            
        <!-- 每个chip的状态，需要增加实时监控 -->
        <PROPERTY NAME="ChipStatus" TYPE="y">        </PROPERTY>          
        <!-- 每个chip管理通道状态，需要增加实时监控 -->
        <PROPERTY NAME="ChipChannelStatus" TYPE="q">        </PROPERTY>               
        <!-- 芯片管理通道状态指示 -->        
        <METHOD NAME="GetChipStatus">
            <PARAMETER NAME="ChipStatus" TYPE="y" DIR="out"/>
        </METHOD>        
        <!-- 查询vlan信息 -->
        <METHOD NAME="GetVlan">
            <PARAMETER NAME="*" TYPE="*" DIR="out"/>
        </METHOD>
        <!-- 查询指定vlan的port信息 -->        
        <METHOD NAME="GetVlanPort">
            <PARAMETER NAME="VlanId" TYPE="q" DIR="in"/>
            <PARAMETER NAME="*" TYPE="*" DIR="out"/>
        </METHOD>        
        <!-- 创建指定vlan -->
        <METHOD NAME="CreateVlan">
            <PARAMETER NAME="VlanId" TYPE="q" DIR="in"/>
        </METHOD>-
        <!-- 删除指定vlan -->
        <METHOD NAME="DeleteVlan">
            <PARAMETER NAME="VlanId" TYPE="q" DIR="in"/>
        </METHOD>    
        <!-- 创建trunk -->
        <METHOD NAME="CreateTrunk">
            <PARAMETER NAME="TrunkId" TYPE="y" DIR="in"/>
        </METHOD>
        <!-- 删除trunk -->
        <METHOD NAME="DeleteTrunk">
            <PARAMETER NAME="TrunkId" TYPE="y" DIR="in"/>
        </METHOD>        
        <!-- 查询指定trunk的port信息 -->        
        <METHOD NAME="GetTrunkPort">
            <PARAMETER NAME="TrunkId" TYPE="y" DIR="in"/>
            <PARAMETER NAME="*" TYPE="*" DIR="out"/>
        </METHOD>

        <CLASS NAME="LswPublicAttrCenter">         
            <!-- AsStatus:主备状态，0为主1为备 -->
            <PROPERTY NAME="AsStatus"  TYPE="y"></PROPERTY>
            <!-- 周期性同步开关:默认为1，表示打开；0表示关闭 -->
            <PROPERTY NAME="CycleSyncSwitch"   TYPE="y"></PROPERTY>

            <!-- 属性同步模块调用函数-->
            <METHOD NAME="PropertySyncMethod">
                <PARAMETER TYPE="*" NAME="*" DIR="in"/>
                <PARAMETER TYPE="*" NAME="*" DIR="out"/>
            </METHOD>
        </CLASS>
        <CLASS NAME="LswPublicAttrLocal">
            <CLASS NAME="LswPublicAttrLocalCP">
                <PROPERTY NAME="sdk_so_name" TYPE="s"> </PROPERTY>
                <!-- sdk适配类型，用于sdk_adpt针对不同类型单板区分处理，该值会直接透传给sdk_adpt层 -->
                <PROPERTY NAME="sdk_adpt_type" TYPE="u"> </PROPERTY>
                <PROPERTY NAME="NodeName" TYPE="s"> </PROPERTY>
                <PROPERTY NAME="sgmi_check_port" TYPE="au"> </PROPERTY>
                <PROPERTY NAME="max_pkt_len" TYPE="u"> </PROPERTY>
                <PROPERTY NAME="CmeshMode" TYPE="y"> </PROPERTY>
                <!-- 获取端口数据统计 -->
                <METHOD NAME="GetPortStatistics">
                    <PARAMETER NAME="PortName" TYPE="s"  DIR="in"/>
                    <PARAMETER NAME="*" TYPE="*" DIR="out"/>
                </METHOD>
                <!-- 获取端口的信息 -->
                <METHOD NAME="GetPortInfo">
                    <PARAMETER NAME="PortInfoBuf" TYPE="s" DIR="out"/>
                </METHOD>
                <!-- 获取L2表项 -->
                <METHOD NAME="GetL2Table">
                    <PARAMETER NAME="TableBuf" TYPE="s" DIR="out"/>
                </METHOD>
                <!-- 获取芯片类型 -->
                <METHOD NAME="GetChipInfo">
                    <PARAMETER NAME="ChipInfoBuf" TYPE="s" DIR="out"/>
                </METHOD>
                <!-- 设置CMESH参数 -->
                <METHOD NAME="SetCmeshPara">
                    <PARAMETER NAME="Type" TYPE="s" DIR="in"/>
                    <PARAMETER NAME="Value" TYPE="s" DIR="in"/>
                    <PARAMETER NAME="*" TYPE="*" DIR="out"/>
                </METHOD>
            </CLASS>
                  
            <CLASS NAME="LswPublicAttrLocalDP">    
            <!-- local data节点的方法、属性在此处添加 --> 
                <PROPERTY NAME="ConfVerifyStatus" TYPE="u">   </PROPERTY>
            <!-- 交换芯片的核温温度值 -->
                <PROPERTY NAME="TemperatureSensor" TYPE="q">   </PROPERTY>
                <PROPERTY NAME="MeshMPathMode" TYPE="u">   </PROPERTY>
                <PROPERTY NAME="MeshMPathStatus" TYPE="u">   </PROPERTY>
                <PROPERTY NAME="MeshMPathRelayNode" TYPE="u">   </PROPERTY>
                <PROPERTY NAME="MeshMPathCtrlNode" TYPE="u">   </PROPERTY>
                <PROPERTY NAME="MeshMPathUnderCtrlNode" TYPE="u">   </PROPERTY>
                <PROPERTY NAME="sdk_so_name" TYPE="s"> </PROPERTY>
                <METHOD NAME="IpmcDataPortStatistics">
                    <PARAMETER NAME="PortName" TYPE="s"  DIR="in"/>
                    <PARAMETER NAME="Srtatistics" TYPE="s"  DIR="out"/>
                </METHOD>
                <!-- IPMC获取端口的信息 -->
                <METHOD NAME="IpmcDataPortInformation">
                    <PARAMETER NAME="PortId" TYPE="u" DIR="in"/>
                    <PARAMETER NAME="PhyPortId" TYPE="u" DIR="out"/>
                    <PARAMETER NAME="PortName" TYPE="s" DIR="out"/>
                    <PARAMETER NAME="LinkStatus" TYPE="u" DIR="out"/>
                    <PARAMETER NAME="PortAble" TYPE="u" DIR="out"/>
                    <PARAMETER NAME="Speed" TYPE="u" DIR="out"/>
                    <PARAMETER NAME="Autonego" TYPE="u" DIR="out"/>
                </METHOD>
                <!-- IPMC获取L2表项 -->
                <METHOD NAME="IpmcDataL2Table">
                    <PARAMETER NAME="TableBuf" TYPE="s" DIR="out"/>
                </METHOD>
                <!-- IPMC设置启动/停止mesh多路径功能 -->
                <METHOD NAME="IpmcDataSetMeshMPath">
                    <PARAMETER NAME="Mode" TYPE="u"  DIR="in"/>
                </METHOD>
                <!-- IPMC查询多路径功能状态 -->
                <METHOD NAME="IpmcDataGetMeshMPath">
                    <PARAMETER NAME="Status" TYPE="u"  DIR="out"/>
                </METHOD>
                <!--  ReturnCode:0 success, other: fail -->
                <METHOD NAME="MeshMPathConditionCheck">
                    <PARAMETER NAME="ReturnCode" TYPE="i" DIR="out"/>
                </METHOD>
            </CLASS>
        </CLASS>
    </CLASS>

    <CLASS NAME="LswPortAttr">        
        <!--  子端口的名称，此端口转换为物理对应关系 -->
        <PROPERTY NAME="SubPortName" TYPE="s">        </PROPERTY>    
        <!--  逻辑端口号 -->
        <PROPERTY NAME="LogicPortNum" TYPE="u">        </PROPERTY>    
        <!--  端口的所属平面信息 -->
        <PROPERTY NAME="Plane" TYPE="s">        </PROPERTY>    
        <PROPERTY NAME="PlaneId" TYPE="y">        </PROPERTY>
        <!--  端口的使能状态 -->
        <PROPERTY NAME="EnableStatus" TYPE="u">        </PROPERTY>
        <!--  端口的vlan信息，128*32位图 -->
        <PROPERTY NAME="Vlan" TYPE="au">        </PROPERTY>
        <!--  端口的vlan tag信息，128*32位图 -->
        <PROPERTY NAME="Tag" TYPE="au">        </PROPERTY>
        <!--  端口的trunk信息 -->
        <PROPERTY NAME="TrunkId" TYPE="au">        </PROPERTY>
        <!--  端口的link信息 -->
        <PROPERTY NAME="LinkStatus" TYPE="q">        </PROPERTY>
        <!--  端口的速率信息 -->
        <!--  单位Mbps，对应网口速率: 1000(GE)、10000(10GE)、25000（25GE）、50000（50GE）、100000(100GE)  -->
        <PROPERTY NAME="Speed" TYPE="u">        </PROPERTY>    
        <!--  端口的oam状态信息 -->
        <PROPERTY NAME="OamStatus" TYPE="y">        </PROPERTY>    
        <!--  端口的oam使能信息 -->
        <PROPERTY NAME="OamEnable" TYPE="y">        </PROPERTY>    
        <!--  端口的使能状态-->
        <PROPERTY NAME="Shutdown" TYPE="y">        </PROPERTY>    
        <!--  端口的环回状态 -->
        <PROPERTY NAME="LoopStatus" TYPE="u">        </PROPERTY>    
        <!--  端口的转发规则 -->
        <PROPERTY NAME="TransRule" TYPE="u">        </PROPERTY>        
        <!--  端口的流量抑制 -->
        <PROPERTY NAME="Suppression" TYPE="au">        </PROPERTY>        
        
        <!--  获取端口数据统计  -->
        <METHOD NAME="GetPortStatistics">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="*" NAME="*" DIR="out"/>
        </METHOD>        
        <!--  设置端口MTU值  -->
        <METHOD NAME="SetPortMtu">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="u" NAME="Mtu" DIR="in"/>
        </METHOD>
        <!--  获取端口MTU值  -->
        <METHOD NAME="GetPortMtu">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="u" NAME="Mtu" DIR="out"/>
        </METHOD>    
        <METHOD NAME="GetPortInfo">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="u" NAME="Autonego" DIR="out"/>
			<PARAMETER TYPE="u" NAME="Duplex" DIR="out"/>
			<PARAMETER TYPE="s" NAME="WorkRate" DIR="out"/>
			<PARAMETER TYPE="u" NAME="MaxFrmLen" DIR="out"/>
			<PARAMETER TYPE="u" NAME="Pvid" DIR="out"/>
			<PARAMETER TYPE="u" NAME="LoopMode" DIR="out"/>
			<PARAMETER TYPE="u" NAME="LinkStat" DIR="out"/>
			<PARAMETER TYPE="u" NAME="EnaStat" DIR="out"/>
        </METHOD>  
        <METHOD NAME="GetPortPeerInfo">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="s" NAME="PeerBladeId" DIR="out"/>
            <PARAMETER TYPE="s" NAME="PeerPortId" DIR="out"/>
        </METHOD> 
        <METHOD NAME="SetPortEnable">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="u" NAME="EnableStatus" DIR="in"/>
        </METHOD>  
        <!--  将端口加入指定vlan  -->
        <METHOD NAME="AddPortVlan">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="au" NAME="Vlan" DIR="in"/>
            <PARAMETER TYPE="au" NAME="Tag" DIR="in"/>
        </METHOD>    
        <!--  将端口从vlan中删除  -->
        <METHOD NAME="DelPortVlan">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="au" NAME="Vlan" DIR="in"/>
        </METHOD>            
        <!--  查询端口vlan信息  -->
        <METHOD NAME="GetPortVlan">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="au" NAME="Vlan" DIR="out"/>
            <PARAMETER TYPE="au" NAME="Tag" DIR="out"/>
        </METHOD>                
        <!--  将端口加入指定trunk  -->
        <METHOD NAME="AddPortTrunk">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="y" NAME="Trunk" DIR="in"/>
        </METHOD>    
        <!--  将端口从trunk中删除  -->
        <METHOD NAME="DelPortTrunk">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="y" NAME="Trunk" DIR="in"/>
        </METHOD>    
        <!--  获取端口link状态  -->
        <METHOD NAME="GetLinkStatus">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="q" NAME="LinkStatus" DIR="out"/>
        </METHOD>
        <!--  获取端口speed信息  -->
        <!--  单位Mbps，对应网口速率: 1000(GE)、10000(10GE)、25000（25GE）、50000（50GE）、100000(100GE)  -->
        <METHOD NAME="GetSpeed">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="u" NAME="Speed" DIR="out"/>
        </METHOD>
        <!--  获取端口loop信息  -->
        <METHOD NAME="GetLoopMode">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="u" NAME="LoopMode" DIR="out"/>
        </METHOD>
        <!--  设置端口loop信息  -->
        <METHOD NAME="SetLoopMode">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="u" NAME="LoopMode" DIR="in"/>
        </METHOD>    
        <!--  获取端口转发规则  -->
        <METHOD NAME="GetTransRule">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="u" NAME="TransRule" DIR="out"/>
        </METHOD>
        <!--  设置端口转发规则  -->
        <METHOD NAME="SetTransRule">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="u" NAME="TransRule" DIR="in"/>
        </METHOD>        
        <!--  获取端口流控阈值，单位是pps  -->
        <METHOD NAME="GetSuppression">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="s" NAME="Type" DIR="in"/>
            <PARAMETER TYPE="u" NAME="Suppression" DIR="out"/>
        </METHOD>
        <!--  设置端口流控阈值，单位是pps  -->
        <METHOD NAME="SetSuppression">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="s" NAME="Type" DIR="in"/>
            <PARAMETER TYPE="u" NAME="Suppression" DIR="in"/>
        </METHOD>
        <!--  获取端口pvid信息  -->
        <METHOD NAME="GetPortPvid">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="q" NAME="Pvid" DIR="out"/>
        </METHOD>
        <!--  设置端口pvid信息  -->
        <METHOD NAME="SetPortPvid">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="q" NAME="Pvid" DIR="in"/>
        </METHOD>
        <METHOD NAME="SetOmChannel">
            <PARAMETER TYPE="u" NAME="OmMode" DIR="in"/>
            <PARAMETER TYPE="u" NAME="TimeOut" DIR="in"/>
        </METHOD>
        <METHOD NAME="SetOmChannelVlan">
            <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
            <PARAMETER TYPE="u" NAME="Vlan" DIR="in"/>
            <PARAMETER TYPE="u" NAME="IsAdd" DIR="in"/>
            <PARAMETER TYPE="u" NAME="IsUntag" DIR="in"/>
        </METHOD>
        <METHOD NAME="GetOmChannel">
            <PARAMETER TYPE="u" NAME="OmMode" DIR="out"/>
            <PARAMETER TYPE="u" NAME="RemainTime" DIR="out"/>
        </METHOD>
        <CLASS NAME="LswPortAttrCenter"> 
        <!-- center节点的方法、属性在此处添加 -->
            <!--  端口所在槽位信息 -->
            <PROPERTY NAME="SlotId" TYPE="y">        </PROPERTY>     
            <!--  端口的名称 -->
            <PROPERTY NAME="PortName" TYPE="s">        </PROPERTY>    
            <!--  Node节点有效标识 -->
            <PROPERTY NAME="Valid" TYPE="y">    </PROPERTY>
			<!--  端口的pvid -->
			<PROPERTY NAME="Pvid1" TYPE="q">        </PROPERTY>
            <!--  端口的位置 -->
            <!--  1表示面板出端口，0表示非面板出端口 -->
            <PROPERTY NAME="Position" TYPE="y">    </PROPERTY>
            <!--  更新XML中的端口link状态  -->
            <METHOD NAME="UpdateLinkStatus">
                <PARAMETER TYPE="s" NAME="PortName" DIR="in"/>
                <PARAMETER TYPE="q" NAME="LinkStatus" DIR="in"/>
            </METHOD>
        </CLASS>         

        <CLASS NAME="LswPortAttrLocal">
            <!--  端口的MTU值 -->
            <PROPERTY NAME="Mtu" TYPE="u">        </PROPERTY>    
            <!--  端口的pvid -->
            <PROPERTY NAME="Pvid" TYPE="q">        </PROPERTY>

            <CLASS NAME="LswPortAttrLocalCP">              
                <!--  芯片号 -->
                <PROPERTY NAME="Unit" TYPE="u">        </PROPERTY>
                <!--  芯片端口号 -->
                <PROPERTY NAME="Port" TYPE="u">        </PROPERTY>
                <!--  端口类型， 0 : LSW_BMC, 1 : LSW_CPORT, 2 : LSW_SMM_CPU, 3 : LSW_CAS, 4 : LSW_MGT, 5 : LSW_MESH, 6 : LSW_INTER_CHIP, 7 : LSW_RESOURCE -->
                <PROPERTY NAME="PortType" TYPE="u">        </PROPERTY>
                <!--  邻接芯片号 -->
                <PROPERTY NAME="AdjacencyUnit" TYPE="u">        </PROPERTY>
                <!-- 端口使用级别，同一单板，在不同插框上使用端口情况不一样，如SD6603在4U上只使用部分端口 -->
                <PROPERTY NAME="PortUseLevel" TYPE="u">        </PROPERTY>
                <!-- 端口自协商 -->
                <PROPERTY NAME="Autonego" TYPE="u">        </PROPERTY>
				 <!-- 端口双工模式 -->
            	<PROPERTY NAME="Duplex" TYPE="u">        </PROPERTY>
                <!-- 端口的STP状态，0:Disable 1:Blocking 2:Learning 3:Forwarding -->
				<PROPERTY NAME="StpState" TYPE="u">        </PROPERTY>
            	<!-- 端口接收误码 -->
            	<PROPERTY NAME="RxCRC" TYPE="au">        </PROPERTY>
            	<!-- 端口发送误码 -->
            	<PROPERTY NAME="TxCRC" TYPE="au">        </PROPERTY>
            </CLASS>
            
            <CLASS NAME="LswPortAttrLocalDP">        
            <!-- local data节点的方法、属性在此处添加 -->     
                <PROPERTY NAME="PeerBladeNum" TYPE="u">            </PROPERTY>
                <PROPERTY NAME="PeerBladePresent" TYPE="y">        </PROPERTY>
                <PROPERTY NAME="LinkHealth" TYPE="q">              </PROPERTY>
                <!--  本板BMC到对板BMC的ipmi链路状态: 0: 链路故障: 1: 链路正常 -->
                <PROPERTY NAME="IpmiValid" TYPE="y">               </PROPERTY>
            </CLASS>  
        </CLASS>
    </CLASS>

    <!-- 交换芯片健康监测类 -->
    <CLASS NAME="LswPortHealthAttr">
        <CLASS NAME="LswPortHealthAttrLocal">
                <!-- 亚健康诊断的方法、属性在此处添加 -->
                <PROPERTY NAME="CheckName" TYPE="s">            </PROPERTY>             <!-- 测试项名称 -->
                <PROPERTY NAME="CheckId" TYPE="u">            </PROPERTY>               <!-- 测试项ID -->
                <PROPERTY NAME="CheckMode" TYPE="u">        </PROPERTY>                 <!-- 测试模式 0:统计异常 1:芯片异常 2：寄存器跳变-->
                <PROPERTY NAME="WarnFlag" TYPE="u">              </PROPERTY>            <!-- 告警标记 0: 不上报告警 1:上报告警-->
                <PROPERTY NAME="CountType" TYPE="u">              </PROPERTY>           <!-- 统计类型  0: 按个数统计 1:按比例统计 2: 同时支持0和1 3:和预期值对比 -->
                <PROPERTY NAME="CountNumThre" TYPE="u">              </PROPERTY>        <!-- 勾选统计类型0或3的阈值 -->
                <PROPERTY NAME="CountRateThre" TYPE="u">              </PROPERTY>       <!-- 勾选统计类型1的阈值，按倒数配置，例如1/1000应配为1000 -->
                <PROPERTY NAME="WindowSize" TYPE="u">              </PROPERTY>          <!-- 滑窗宽度 0< WindowSize < 64 -->
                <PROPERTY NAME="CheckLevel" TYPE="u">              </PROPERTY>          <!-- 检测级别 32:端口级 3:平面级 1: 芯片级-->
                <PROPERTY NAME="CheckPeriod" TYPE="u">              </PROPERTY>         <!-- 检测周期 0 < CheckPeriod -->
        </CLASS>
    </CLASS>

    <!-- 交换芯片类，包含交换网片和PHY -->
    <CLASS NAME="LswChipInfo">
        <!--  芯片号 -->
        <PROPERTY NAME="ChipIndex" TYPE="u">        </PROPERTY>
        <!--  芯片复位类型：0: 通过CPLD复位，1：通过GPIO复位 -->
        <PROPERTY NAME="ResetType" TYPE="u">        </PROPERTY>
        <!--  芯片CPLD复位属性，当ResetType为0时有效 -->
        <PROPERTY NAME="ChipRst" TYPE="y">        </PROPERTY>
        <!--  GPIO管脚，当ResetType为1时有效 -->
        <PROPERTY NAME="GpioPin" TYPE="y">        </PROPERTY>
		<!--  芯片故障状态，0-ok, 1-故障 -->
		<PROPERTY NAME="ChipFault" TYPE="y">        </PROPERTY>
		<PROPERTY NAME="ChipPowerState" TYPE="y">   </PROPERTY>
        <CLASS NAME ="LswSwitchInfo">
        </CLASS>
        
        <CLASS NAME ="LswPhyInfo">
        </CLASS>
    </CLASS>

    <!-- 交换文件传输类，用于独立Mesh系统场景 -->
    <CLASS NAME="LswFileTransfer">
        <!-- SlotId: 本机的slot id    -->
        <PROPERTY NAME="SlotId" TYPE="y"></PROPERTY>
        <PROPERTY NAME="Enable" TYPE="b"></PROPERTY>
        <PROPERTY NAME="BindEthGroup" TYPE="ro"></PROPERTY>
        <!-- ServerPort: 置0为默认(53000) -->
        <PROPERTY NAME="ServerPort" TYPE="q"></PROPERTY>
        <PROPERTY NAME="RemoteServerIp" TYPE="s"></PROPERTY>
        <!-- 方法：启动文件内部传输客户端 -->
        <METHOD NAME="LswStartInnerTransfer">
            <PARAMETER TYPE="s" NAME="SrcPath" DIR="in"/>
            <PARAMETER TYPE="s" NAME="DestPath" DIR="in"/>
        </METHOD>
        <!-- 方法：获取客户端文件内部传输状态 0-100标识进度，大于100标识错误码 -->
        <METHOD NAME="LswGetInnerTransferStatus">
            <PARAMETER TYPE="y" NAME="Status" DIR="out"/>
        </METHOD>
        <!-- 方法：启动远端文件传输客户端 -->
        <METHOD NAME="LswStartRemoteTransfer">
            <PARAMETER TYPE="s" NAME="SrcPath" DIR="in"/>
            <PARAMETER TYPE="s" NAME="DestPath" DIR="in"/>
        </METHOD>
        <!-- 方法：获取远端客户端文件上传状态 0-100标识进度，大于100标识错误码 -->
        <METHOD NAME="LswGetRemoteTransferStatus">
            <PARAMETER TYPE="y" NAME="Status" DIR="out"/>
        </METHOD>
    </CLASS>

     <!-- 交换芯片DFT测试类，包含DFT测试所需信息 -->
    <CLASS NAME="LswDftTestChipInfo">
        <!--  芯片号 -->
        <PROPERTY NAME="ChipIndex" TYPE="u">        </PROPERTY>
        <!--  测试入端口：端口名称 -->
        <PROPERTY NAME="LoopTestInPort" TYPE="s">   </PROPERTY>
    </CLASS>

    <CLASS NAME="EthRename">
        <!-- 是否需要交叉网口名 -->
        <!--ITEM:0：不支持 -->
        <!--ITEM:1：支持 -->
        <PROPERTY NAME="EthRenameEnabled"  TYPE="y">    </PROPERTY>

        <!-- 网口交叉的物理网口 -->
        <PROPERTY NAME="EthName1"  TYPE="s">    </PROPERTY>
        <PROPERTY NAME="EthName2"  TYPE="s">    </PROPERTY>
    </CLASS>

    <CLASS NAME="EthFunctionDefine">
        <!-- 是否需要生成随机MAC -->
        <!--ITEM:0：不需要 -->
        <!--ITEM:1：需要 -->
        <PROPERTY NAME="GenRandomMAC"  TYPE="y">    </PROPERTY>

        <!-- 是否允许Eth脱离EthGroup -->
        <!--ITEM:0：不允许 -->
        <!--ITEM:1：允许 -->
        <PROPERTY NAME="SupportDetachEthGroup"  TYPE="y">    </PROPERTY>

        <!-- 是否支持多vlan -->
        <!--ITEM:0：不支持 -->
        <!--ITEM:1：支持 -->
        <PROPERTY NAME="SupportMultiVlan"  TYPE="y">    </PROPERTY>

        <!-- 是否支持vlanId修改 -->
        <!--ITEM:0：支持修改 -->
        <!--ITEM:1：不支持修改 -->
        <PROPERTY NAME="UnsupportVlanIdMotify"  TYPE="y">    </PROPERTY>

        <!-- 是否支持恢复默认ip -->
        <!--ITEM:0：不支持 -->
        <!--ITEM:1：支持 -->
        <PROPERTY NAME="SupportRestoreIP"  TYPE="y">    </PROPERTY>

        <!-- 触发恢复默认ip -->
        <!--ITEM:0：禁止 -->
        <!--ITEM:1：使能 -->
        <PROPERTY NAME="RestoreIPTrigger"  TYPE="y">    </PROPERTY>

        <!-- 网口功能对象-->
        <PROPERTY NAME="EthFunctions" TYPE="roa">   </PROPERTY>
    </CLASS>

     <!-- 自定义网口功能-->
    <CLASS NAME="EthFunction">
        <!-- 自定义网口功能使能开关 -->
        <!--ITEM:0：禁止 -->
        <!--ITEM:1：使能 -->
        <PROPERTY NAME="FunctionEnable"  TYPE="y">    </PROPERTY>

        <!-- 用户自定义功能类型  -->
        <!-- 0：表示管理网口，通过管理网口与外置OM对接；1：表示BMC与内置OM对接网口；2：表示BMC与BMC、EMM之间通信网络；其他：未定义，按需增加 -->
        <PROPERTY NAME="Functiontype"  TYPE="y">    </PROPERTY>

        <!-- 是否使能vlan -->
        <!--ITEM:0：不带vlan -->
        <!--ITEM:1：带vlan -->
        <PROPERTY NAME="VlanStatus"  TYPE="y">    </PROPERTY>
        <!-- Vlan使能时，是否使用非vlan eth口, 比如eth0, eth1, eth2, eth3 -->
        <!--ITEM:0：不使用 -->
        <!--ITEM:1：使用 -->
        <PROPERTY NAME="IsNonVlanEthUsed"  TYPE="y">    </PROPERTY>

        <!-- 是否支持浮动IP -->
        <!--ITEM:0：不支持 -->
        <!--ITEM:1：支持 -->
        <PROPERTY NAME="SupportFloatIP"  TYPE="y">    </PROPERTY>

        <!-- 是否支持双平面 -->
        <!--ITEM:0：不支持 -->
        <!--ITEM:1：支持 -->
        <PROPERTY NAME="SupportMultiPlane"  TYPE="y">    </PROPERTY>

        <PROPERTY NAME="CurrentPlaneId"  TYPE="y">    </PROPERTY>
        <!-- 平面1信息-->
        <PROPERTY NAME="Plane1VlanId"  TYPE="q">    </PROPERTY>
        <PROPERTY NAME="Plane1GroupId"  TYPE="y">    </PROPERTY>
        <PROPERTY NAME="Plane1Description"  TYPE="s">    </PROPERTY>
        <PROPERTY NAME="Plane1EthNum"  TYPE="y">    </PROPERTY>

        <!-- 平面2信息-->
        <PROPERTY NAME="Plane2VlanId"  TYPE="q">    </PROPERTY>
        <PROPERTY NAME="Plane2GroupId"  TYPE="y">    </PROPERTY>
        <PROPERTY NAME="Plane2Description"  TYPE="s">    </PROPERTY>
        <PROPERTY NAME="Plane2EthNum"  TYPE="y">    </PROPERTY>
    </CLASS>

	<!-- USB管理口管理 -->
    <CLASS NAME="USBMgmt">
        <!-- 此机型是否支持USB管理口，0：不支持，1：支持 -->
        <PROPERTY NAME="Support" TYPE="y"> </PROPERTY>
        <!-- USB管理口挂耳在位情况，0：不在位，1：在位 -->
        <PROPERTY NAME="Presence" TYPE="y">        </PROPERTY>
        <!-- USB管理口使能开关状态，0：关闭，1：开启 -->
        <PROPERTY NAME="Enable" TYPE="y"> </PROPERTY>
        <!-- 需要扫描的USB CC芯片 -->
        <PROPERTY NAME="CCChips"  TYPE="roa">	</PROPERTY>
        <!-- USB管理口挂耳上USB设备的在位状态，从CC芯片获取
            0：不在位，1：HOST设备在位，2：DEVICE设备在位 -->
        <PROPERTY NAME="DeviceStatus" TYPE="y"> </PROPERTY>
        <!-- USB管理口挂耳上绿色Led灯状态，关联cpld寄存器 -->
        <PROPERTY NAME="GLedStatus" TYPE="y"> </PROPERTY>
        <!-- USB管理口挂耳上红色Led灯状态，关联cpld寄存器 -->
        <PROPERTY NAME="RLedStatus" TYPE="y"> </PROPERTY>
		<!-- USB管理口网口的当前IP地址 -->
        <PROPERTY NAME="USBNetworkIpAddr" TYPE="s"> </PROPERTY>
        <!-- USB Rndis Host服务固定IP -->
        <PROPERTY NAME="RndisHostIpAddr" TYPE="s"> </PROPERTY>
        <!-- 所使用的1711 usb端口号，0：usb2-0,1：usb2-1,2：usb2-2，3：usb3-0 -->
        <PROPERTY NAME="PortNum" TYPE="y"> </PROPERTY>
        <!-- USB控制文件执行阶段，升级-配置导入导出-一键收集 -->
        <PROPERTY NAME="OperateStep" TYPE="s"> </PROPERTY>
        <!-- USB控制文件执行状态，0成功，1表示有故障 -->
        <PROPERTY NAME="OperateStatus" TYPE="y"> </PROPERTY>
        <PROPERTY NAME="UncompressPassword" TYPE="s"> </PROPERTY>
        <PROPERTY NAME="UncompressMasterKeyId"  TYPE='u'>	</PROPERTY>

        <METHOD NAME="SetEnable">
            <PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
        </METHOD>
        <METHOD NAME="SetUncompressPassword">
            <PARAMETER TYPE="s" NAME="UncompressPassword" DIR="in"/>
        </METHOD>
        <METHOD NAME="UpdateUSBCiphertext">
            <PARAMETER TYPE="u" NAME="NewKeyId" DIR="in"/>
        </METHOD>
    </CLASS>

	<CLASS NAME="Retimer">
		<!--retimer Id-->
		<PROPERTY NAME="RetimerId"     		TYPE="y">				</PROPERTY>
		<!--retimer加载顺序，没有加载顺序需求时默认配置0xFF-->
		<PROPERTY NAME="LoadSequence"     	TYPE="y">				</PROPERTY>
		<!--retimer名称-->
		<PROPERTY NAME="ChipName"			TYPE="s">			</PROPERTY> 
		<!--retimer类型：0为5902L、1为5902H、2为5901、3为ds280 -->
		<PROPERTY NAME="ChipType"			TYPE="y">			</PROPERTY>
		<!--retimer引用的chip对象-->
		<PROPERTY NAME="RefChip"			TYPE="ro">			</PROPERTY>
		<PROPERTY NAME="RefComponent"			TYPE="ro">			</PROPERTY>
		<!--retimer引用的光模块对象-->
		<PROPERTY NAME="RefOptical" 		TYPE="ro">             	</PROPERTY>
		<!--retimer是否就绪，0(未就绪),1(就绪)用于信息查询刷新 -->
		<PROPERTY NAME="IsReady" 		TYPE="y">             	</PROPERTY>
		<!--retimer版本号-->
		<PROPERTY NAME="SoftVer"			TYPE="s">			</PROPERTY>
		<!--芯片版本号-->
		<PROPERTY NAME="ChipVersion"			TYPE="s">			</PROPERTY>
		<!--retimer升级状态：如果升级过程中其他app不用例测-->
		<PROPERTY NAME="UpgStatus"			TYPE="y">			</PROPERTY>
		<!--retimer升级结果  初始值 0xff  0 升级成功  1升级失败-->
		<PROPERTY NAME="UpgResult"			TYPE="y">			</PROPERTY>
		<!--retimer故障状态-->
		<PROPERTY NAME="ChipStatus"			TYPE="y">			</PROPERTY>
		<!--芯片位置号(丝印) -->
		<PROPERTY NAME="ChipLocation" 		TYPE="s">               </PROPERTY>
		<!--芯片位置号，高四位代表前级芯片位置，低四位代表当前位置-->
		<PROPERTY NAME="UpgradeGroup" 		TYPE="y">               </PROPERTY>
		<!--retimer升级通知关联对象-->
		<PROPERTY NAME="ReqAccNotify"			TYPE="y">			</PROPERTY>
		<!--retimer复位关联对象-->
		<PROPERTY NAME="Reset"				TYPE="y">			</PROPERTY>
		<!--retimer是否做自适应的标记：0为不自适应，1为自适应-->
		<PROPERTY NAME="AdaptFlag"        	TYPE="y">              </PROPERTY>
		<!--retimer连接的端口的link状态-->
		<PROPERTY NAME="LinkStatus"        	TYPE="y">              </PROPERTY>
		<!--retimer访问开关切换关联对象-->
		<PROPERTY NAME="Switch"				TYPE="y">			</PROPERTY>
		<!--retimer的速率-->
		<PROPERTY NAME="ChannelSpeed"       TYPE="y">               </PROPERTY>
		<!-- 5902通讯状态 -->
		<PROPERTY NAME="CommunicationState" TYPE="y">               </PROPERTY>
		<!--retimer的温度-->
		<PROPERTY NAME="Temperature"			TYPE="q">			</PROPERTY>
		<!-- 5902芯片 DIEID -->
		<PROPERTY NAME="DIEID"				TYPE="s">			</PROPERTY>
		<!-- NPU板CDR芯片数据获取的IPMI通道号,不通过IPMI通道获取则配置为0xff。通知1620正在升级retimer -->
		<PROPERTY NAME="IpmiChannelId"       	TYPE="y">               </PROPERTY>
		<!--link down上次日志记录时间-->
		<PROPERTY NAME="LastErr1LogTime"		TYPE="u">			</PROPERTY>
		<!--降带宽上次日志记录时间-->
		<PROPERTY NAME="LastErr2LogTime"		TYPE="u">			</PROPERTY>
		<!--降速上次日志记录时间-->
		<PROPERTY NAME="LastErr3LogTime"		TYPE="u">			</PROPERTY>	
        <!--需要关闭的lane(可能有0条或多条) 用bit位表示，这里最多支持32条 -->
        <!--管理掩码，按bit位定义管理项
            bit0: 共享器件管理 1:是 0:否
            其他: 保留
        -->
        <PROPERTY NAME="ManageMask"             TYPE="u">           </PROPERTY>
        <PROPERTY NAME="DisableLane"		    TYPE="u">			</PROPERTY>
		<!--通知1620正在升级retimer-->
		<METHOD NAME="NotifyUpging">
			<PARAMETER TYPE="y"			NAME="IsUpging" 		DIR="in"/>
		</METHOD>
		<!--切换I2C通道-->
		<METHOD NAME="ChannelSwitch">
			<PARAMETER TYPE="y" 			NAME="Switch" 			DIR="in"/>
		</METHOD>
		<!--设置升级状态-->
		<METHOD NAME="SetUpgStatus">
			<PARAMETER TYPE="y" 			NAME="UpgStatus" 		DIR="in"/>
		</METHOD>
		<METHOD NAME="SetNpuCdrTemp">
			<PARAMETER TYPE="q" 			NAME="NpuCdrTemp" 		DIR="in"/>
		</METHOD>
		<METHOD NAME="SetNpuCdrVer">
			<PARAMETER TYPE="s" 			NAME="NpuCdrVer" 		DIR="in"/>
		</METHOD>
		<!--设置升级结果-->
		<METHOD NAME="SetUpgResult">
			<PARAMETER TYPE="y" 			NAME="UpgResult" 		DIR="in"/>
		</METHOD>
        <!-- Retimer属性同步 -->
        <METHOD NAME="SyncRetimerInfoMethod">
            <PARAMETER DIR="in"  TYPE="*" NAME="*" />
            <PARAMETER DIR="out" TYPE="*" NAME="*" />
        </METHOD>
    </CLASS>

	<!-- 产品族，用于兼容不同产品名称/UID表示同一产品场景 -->   
	<CLASS NAME="ProductFamily">
		<!-- 同一产品族的其他产品名称 -->
		<PROPERTY NAME="ProductName"  TYPE="as">		</PROPERTY>
		<!-- 同一产品族的其他产品唯一识别ID -->
		<PROPERTY NAME="ProductUniqueID"  TYPE="au">	</PROPERTY>
	</CLASS>

	<!-- 描述：保存CA服务器的CA证书信息，用于自动更新iBMC证书时的CA服务器连接认证-->	
	<CLASS NAME="CAServerCACert">
		<!-- 证书颁发者 -->
		<PROPERTY NAME="IssueBy" TYPE="s"></PROPERTY>
		<!-- 证书使用者 -->
		<PROPERTY NAME="IssueTo" TYPE="s"></PROPERTY>
		<!-- 证书颁发者 -->
		<PROPERTY NAME="IssueByCN" TYPE="s"></PROPERTY>
		<!-- 证书使用者 -->
		<PROPERTY NAME="IssueToCN" TYPE="s"></PROPERTY>
		<!-- 开始时间 -->
		<PROPERTY NAME="ValidFrom" TYPE="s"></PROPERTY>
		<!-- 截止时间 -->
		<PROPERTY NAME="ValidTo" TYPE="s"></PROPERTY>
		<!-- 序列号 -->
		<PROPERTY NAME="SerialNumber" TYPE="s"></PROPERTY>
		<!-- CRL文件路径 -->
		<PROPERTY NAME="CRLFilePath" TYPE="s"></PROPERTY>
		<!-- 签名算法 -->
		<PROPERTY NAME="SigAlgorithm" TYPE="s"></PROPERTY>
		<!-- 秘钥长度 -->
		<PROPERTY NAME="KeyLength" TYPE="u"></PROPERTY>
		<!-- 秘钥用法 -->
		<PROPERTY NAME="KeyUsage" TYPE="s"></PROPERTY>
		<!-- 证书CRL起始时间-->
		<PROPERTY NAME="CRLStartTime" TYPE="s"></PROPERTY>
		<!-- 证书CRL过期时间-->
		<PROPERTY NAME="CRLExpireTime" TYPE="s"></PROPERTY>
		<!-- 证书指纹-->
		<PROPERTY NAME="FingerPrint" TYPE="s"></PROPERTY>
		<!-- 方法：导入CA服务器的CA证书 -->
		<METHOD NAME="ImportCA">
			<PARAMETER TYPE="s" NAME="path" DIR="in"/>
		</METHOD>
		<!-- 方法：导入CA服务器的证书吊销列表 -->
		<METHOD NAME="ImportCRL">
			<PARAMETER TYPE="s" NAME="path" DIR="in"/>
		</METHOD>
		<!-- 方法：删除CRL文件-->
		<METHOD NAME="DeleteCRL">
        </METHOD>
	</CLASS>

	<!-- 描述：保存CA服务器的客户端证书信息，用于自动更新iBMC证书时的客户端连接认证-->
	<CLASS NAME="CAServerClientCert">
		<!-- 证书颁发者 -->
		<PROPERTY NAME="IssueBy" TYPE="s">	</PROPERTY>
		<!-- 证书使用者 -->
		<PROPERTY NAME="IssueTo" TYPE="s">	</PROPERTY>
		<!-- 证书颁发者 -->
		<PROPERTY NAME="IssueByCN" TYPE="s">	</PROPERTY>
		<!-- 证书使用者 -->
		<PROPERTY NAME="IssueToCN" TYPE="s">	</PROPERTY>
		<!-- 开始时间 -->
		<PROPERTY NAME="ValidFrom" TYPE="s">	</PROPERTY>
		<!-- 截止时间 -->
		<PROPERTY NAME="ValidTo" TYPE="s">	</PROPERTY>
		<!-- 序列号 -->
		<PROPERTY NAME="SerialNumber" TYPE="s">	</PROPERTY>
		<!-- 签名算法 -->
		<PROPERTY NAME="SigAlgorithm" TYPE="s">	</PROPERTY>
		<!-- 秘钥长度 -->
		<PROPERTY NAME="KeyLength" TYPE="u">	</PROPERTY>
		<!-- 秘钥用法 -->
		<PROPERTY NAME="KeyUsage" TYPE="s">	</PROPERTY>
		<!-- 证书指纹-->
		<PROPERTY NAME="FingerPrint"  TYPE="s">	</PROPERTY>
		<!-- 方法：导入CA服务器的客户端证书 -->
		<METHOD NAME="ImportClientCert">
			<PARAMETER TYPE="s" NAME="path" DIR="in"/>
			<!-- 客户端证书解析密码-->
			<PARAMETER TYPE="s" NAME="PassWord" DIR="in"/>
		</METHOD>
	</CLASS>

<!-- 描述：HTTPS服务器根证书(文件传输服务器/redfish事件接收服务器根证书)-->	
	<CLASS NAME="RemoteHttpsServerRootCert">
		<!-- 证书id 1-4用于4路Redfish事件订阅, 5用于远程文件传输-->
        <PROPERTY NAME="CertId" TYPE="y">	</PROPERTY>
        <!-- 证书用途 -->
        <PROPERTY NAME="Usage" TYPE="s">	</PROPERTY>
		<!-- 证书颁发者 -->
		<PROPERTY NAME="IssueBy" TYPE="s">	</PROPERTY>
		<!-- 证书使用者 -->
		<PROPERTY NAME="IssueTo" TYPE="s">	</PROPERTY>
		<!-- 证书颁发者 -->
		<PROPERTY NAME="IssueByCN" TYPE="s">	</PROPERTY>
		<!-- 证书使用者 -->
		<PROPERTY NAME="IssueToCN" TYPE="s">	</PROPERTY>
		<!-- 开始时间 -->
		<PROPERTY NAME="ValidFrom" TYPE="s">	</PROPERTY>
		<!-- 截止时间 -->
		<PROPERTY NAME="ValidTo" TYPE="s">	</PROPERTY>
		<!-- 序列号 -->
		<PROPERTY NAME="SerialNumber" TYPE="s">	</PROPERTY>
		<!-- CRL文件路径 -->
		<PROPERTY NAME="CRLFilePath" TYPE="s">	</PROPERTY>
		<!-- 签名算法 -->
		<PROPERTY NAME="SigAlgorithm" TYPE="s">	</PROPERTY>
		<!-- 秘钥长度 -->
		<PROPERTY NAME="KeyLength" TYPE="u">	</PROPERTY>
		<!-- 秘钥用法 -->
		<PROPERTY NAME="KeyUsage" TYPE="s">	</PROPERTY>
		<!-- 证书CRL起始时间-->
		<PROPERTY NAME="CRLStartTime"  TYPE="s">	</PROPERTY>
		<!-- 证书CRL过期时间-->
		<PROPERTY NAME="CRLExpireTime"  TYPE="s">	</PROPERTY>
        <!-- 证书指纹-->
		<PROPERTY NAME="FingerPrint"  TYPE="s">	</PROPERTY>
		<!-- 方法：导入根证书 -->
		<METHOD NAME="ImportRootCert">
            <!--准备导入证书的ID,取值0表示自动寻找空闲ID-->
            <PARAMETER TYPE="y" NAME="id" DIR="in"/>
            <PARAMETER TYPE="s" NAME="path" DIR="in"/>
            <!--根证书用途,0表示Redfish事件订阅,1表示远程文件传输-->
            <PARAMETER TYPE="y" NAME="usage" DIR="in"/>
		</METHOD>
        <!-- 方法：删除根证书 -->
		<METHOD NAME="DeleteRootCert">
			<PARAMETER TYPE="y" NAME="id" DIR="in"/>
		</METHOD>
        <!-- 方法：导入证书吊销列表 -->
		<METHOD NAME="ImportCRL">
             <!--准备导入证书的ID,取值0表示自动寻找空闲ID-->
			<PARAMETER TYPE="y" NAME="id" DIR="in"/>
			<PARAMETER TYPE="s" NAME="path" DIR="in"/>
            <!--根证书用途,0表示Redfish事件订阅,1表示远程文件传输-->
            <PARAMETER TYPE="y" NAME="usage" DIR="in"/>
		</METHOD>
		<!-- 方法：删除HTTPS服务器证书吊销列表 -->
		<METHOD NAME="DeleteCRL">
			<PARAMETER TYPE="y" NAME="id" DIR="in"/>
		</METHOD>
		 <!-- 方法：EM属性同步 -->
		<METHOD NAME="CertInfoPropertySyncMethod">
    		<PARAMETER DIR="in" TYPE="*" NAME="*" />
    		<PARAMETER DIR="out" TYPE="*" NAME="*" />
		</METHOD>
	</CLASS>

	<CLASS NAME="OcpCardControl">
		<!--THYS温度，用户视图-->
		<PROPERTY NAME="THYS"	TYPE="y">	</PROPERTY>
		<!--THYS温度，寄存器视图-->
		<PROPERTY NAME="THYSReg" TYPE="u">	</PROPERTY>
		<!--THYS温度值转换-->
		<PROPERTY NAME="THYSConvert"	TYPE="u">	</PROPERTY>
		<!--TOS温度，用户视图-->
		<PROPERTY NAME="TOS"	TYPE="y">	</PROPERTY>
		<!--TOS温度，寄存器视图-->
		<PROPERTY NAME="TOSReg" TYPE="u">	</PROPERTY>
		<!--THYS温度值转换-->
		<PROPERTY NAME="TOSConvert"	TYPE="u">	</PROPERTY>
		<!--OCP3.0默认配置可配置bit1和bit2的值，bit1,thermostat mode,0:comparator mode,1:interrupt mode,bit2,output polarity,0:active-low,1:active-high-->
		<PROPERTY NAME="DefOCPConfig"	TYPE="q">	</PROPERTY>
		<PROPERTY NAME="OCPConfigReg"	TYPE="q">	</PROPERTY>
	</CLASS>
	<CLASS NAME="TransformIpmiCmd">
		<!-- 转发类型，0:从控向主控转发，2:从控基于PropertyIdSync向主控转发 -->
		<PROPERTY NAME="TransformType"        TYPE="y">  </PROPERTY>
		<!-- ipmi命令网络号 -->
		<PROPERTY NAME="Netfn"  	   		  TYPE="y">  </PROPERTY>
		<!-- ipmi命令字 -->
		<PROPERTY NAME="Cmd" 				  TYPE="y">  </PROPERTY>
		<!-- ipmi子命令字索引 -->
		<PROPERTY NAME="SubcmdIndex"  	   	  TYPE="ay"> </PROPERTY>
		<!-- ipmi子命令字网络号 -->
		<PROPERTY NAME="Subcmd"  	   		  TYPE="ay"> </PROPERTY>
		<!-- 基于主从消息转发(非网口)实现IPMI收发-->
		<METHOD NAME="MethodIpmiByRemoteBus">
			<!-- 收发的消息格式是base64 -->
    		<PARAMETER DIR="in" TYPE="s" NAME="request" />
    		<PARAMETER DIR="out" TYPE="s" NAME="response" />
		</METHOD>
	</CLASS>
	<CLASS NAME="SystemBusException">
		<!--bit0表示是否有总线异常发生，bit1表示APB超时，bit2表示APB请求复位是否异常，bit3表示IMU任务是否异常，bit4:7预留-->
		<PROPERTY NAME="ExceptionFlag" TYPE='y'>				</PROPERTY>
		<!--总线异常时写地址-->
		<PROPERTY NAME="ExceptionAddrW" TYPE='u'>			</PROPERTY>
		<!--总线异常时读地址-->
		<PROPERTY NAME="ExceptionAddrR" TYPE='u'>			</PROPERTY>
	</CLASS>
	<!--管理芯片配置，用于芯片相关环境变量配置-->
	<CLASS NAME="MgmtChipEnvConfig">
		<!--环境变量名称-->
		<PROPERTY NAME="EnvName"	TYPE="as">	</PROPERTY>
		<!--环境变量值-->
		<PROPERTY NAME="EnvValue" TYPE="as">	</PROPERTY>
	</CLASS>

	<!-- 用于检查是否需要排除RAID不管理的硬盘，用于混插场景 -->   
	<CLASS NAME="DriveIdentifyShield">
		<!-- 启动生效的条件，为 1 时启动，可以通过表达式来达成组合条件判断，例如某寄存器值数值为xx时 -->
		<PROPERTY NAME="IsValid"  TYPE="y">	</PROPERTY>
		<!-- 不归Raid卡管理的硬盘id -->
		<PROPERTY NAME="ExcludeHdd"  TYPE="ay">	</PROPERTY>
	</CLASS>

    <!--ai mgmt-->
    <CLASS NAME="AiMgmt">
        <METHOD NAME="InferenceAsync">
            <PARAMETER TYPE="ad" NAME="Data" DIR="in"/>
            <PARAMETER TYPE="au" NAME="Shape" DIR="in"/>
            <PARAMETER TYPE="u" NAME="Dim" DIR="in"/>
            <PARAMETER TYPE="s" NAME="ObjName" DIR="in"/>
            <PARAMETER TYPE="s" NAME="ModelName" DIR="in"/>
            <PARAMETER TYPE="ay" NAME="Ctx" DIR="in"/>
        </METHOD>
    </CLASS>

    <!-- DFP 信息 -->
    <CLASS NAME="DiskFaultPrediction">
        <!-- 硬盘故障预测服务开启状态 -->
        <PROPERTY NAME="DfpEnable" TYPE="y"></PROPERTY>
        <!-- 上次硬盘故障预测系统时间戳-->
        <PROPERTY NAME="TimeStamp" TYPE="u"></PROPERTY>
        <!-- 设置DFP功能开关状态 -->
        <METHOD NAME="SetDfpEnable">
            <!-- 设置上报使能开关：0,关闭;1,打开 -->
            <PARAMETER TYPE="y" NAME="State" DIR="in"/>
        </METHOD>
        <METHOD NAME="InferenceAsyncCallback">
            <PARAMETER TYPE="i" NAME="Ret" DIR="in"/>
            <PARAMETER TYPE="ay" NAME="Ctx" DIR="in"/>
            <PARAMETER TYPE="ai" NAME="Label" DIR="in"/>
            <PARAMETER TYPE="ad" NAME="Prob" DIR="in"/>
            <PARAMETER TYPE="ad" NAME="Value" DIR="in"/>
            <PARAMETER TYPE="u" NAME="Sample" DIR="in"/>
            <PARAMETER TYPE="u" NAME="Classes" DIR="in"/>
            <PARAMETER TYPE="u" NAME="Target" DIR="in"/>
        </METHOD>
        <METHOD NAME="CollectPcieData">
            <PARAMETER TYPE="i" NAME="Presense" DIR="in"/>
            <PARAMETER TYPE="ay" NAME="SlotName" DIR="in"/>
            <PARAMETER TYPE="ay" NAME="Data" DIR="in"/>
        </METHOD>
        <METHOD NAME="InferenceAsyncPcieCallback">
            <PARAMETER TYPE="i" NAME="Ret" DIR="in"/>
            <PARAMETER TYPE="ay" NAME="Ctx" DIR="in"/>
            <PARAMETER TYPE="ai" NAME="Label" DIR="in"/>
            <PARAMETER TYPE="ad" NAME="Prob" DIR="in"/>
            <PARAMETER TYPE="ad" NAME="Value" DIR="in"/>
            <PARAMETER TYPE="u" NAME="Sample" DIR="in"/>
            <PARAMETER TYPE="u" NAME="Classes" DIR="in"/>
            <PARAMETER TYPE="u" NAME="Target" DIR="in"/>
        </METHOD>
    </CLASS>
    <!--Atlas服务器上AI芯片算力配置信息-->
    <CLASS NAME="NpuAbility">
        <!--NPU芯片算力类型-->
        <PROPERTY NAME="TypeArray"      TYPE="as">      </PROPERTY>
        <!--网管下发的NPU芯片算力值-->
        <PROPERTY NAME="ValueArray"     TYPE="ad">      </PROPERTY>
        <METHOD NAME="SetNpuAbility">
            <PARAMETER TYPE="s" NAME="Type" DIR="in"/>
            <PARAMETER TYPE="d" NAME="Value" DIR="in"/>
        </METHOD>
    </CLASS>
    <!-- 天池组件信息 -->
    <CLASS NAME="ComponentProperty">
    	<!-- Model -->
    	<PROPERTY NAME="Model" TYPE="s"> </PROPERTY>
    	<!-- manufacturer -->
    	<PROPERTY NAME="Vendor" TYPE="s"> </PROPERTY>
    	<!-- ComponentId -->
    	<PROPERTY NAME="ComponentId" TYPE="s"> </PROPERTY>
    	<!-- Csr Version -->
    	<PROPERTY NAME="CsrVer" TYPE="s"> </PROPERTY>
    	<!-- Smc Version -->
    	<PROPERTY NAME="SmcVer" TYPE="s"> </PROPERTY>
    	<!-- Uid (Vendor + ComponentID)-->
    	<PROPERTY NAME="Uid" TYPE="s"> </PROPERTY>
    </CLASS>
	<!-- 散热组件类 -->
	<CLASS NAME="CoolingUnit">
		<!-- 散热组件名称 -->
		<PROPERTY NAME="Name" TYPE="s">			</PROPERTY>
		<!-- 散热组件槽位号 -->
		<PROPERTY NAME="Slot" TYPE="y">			</PROPERTY>
		<!-- 散热组件功耗 -->
		<PROPERTY NAME="Power" TYPE="u"> </PROPERTY>
    </CLASS>

    <!-- 天池组件Csr升级类 -->
    <CLASS NAME="FrudUpgrade">
        <!-- 组件UID -->
        <PROPERTY NAME="Uid" TYPE="s"></PROPERTY>
        <!-- CSR的数据版本号 -->
        <PROPERTY NAME="CsrVersion" TYPE="q"></PROPERTY>
        <!-- 组件的Protocol版本 -->
        <PROPERTY NAME="SPECVersion" TYPE="y"></PROPERTY>
        <!-- CSR关联的EEPROM -->
        <PROPERTY NAME="RefChip" TYPE="ro"></PROPERTY>
        <!-- EEPROM写保护状态 -->
        <PROPERTY NAME="WriteProtectStatus"  TYPE="y">	</PROPERTY>
    </CLASS>

    <!-- 天池机型UB线缆检测 -->
    <!-- UB端口类 -->
    <CLASS NAME="UBPort">
        <!-- UB端口名 -->
        <PROPERTY NAME="Name" TYPE="s"></PROPERTY>
        <!-- 该端口在基础组件上相应区域的序号（基础组件划分为6个区域，每个区域32个端口） -->
        <PROPERTY NAME="Id" TYPE="y"></PROPERTY>
        <!-- 端口对应的高速连接器丝印信息 -->
        <PROPERTY NAME="Silkscreen" TYPE="s"></PROPERTY>
        <!-- 该端口对端所接组件的信息 -->
        <PROPERTY NAME="TargetPort" TYPE="s"></PROPERTY>
        <!-- 关联该端口对应的SMC寄存器 -->
        <PROPERTY NAME="UBPortAccessor" TYPE="y"></PROPERTY>
        <!-- 端口状态，表示线缆是否配置正确。0：默认值（正常状态），1：线缆连接错误，2：连接的对端组件不支持 -->
        <PROPERTY NAME="Status" TYPE="y"></PROPERTY>
    </CLASS>
    <!-- 组件线缆配置类 -->
    <CLASS NAME="UnitCableConfig">
        <!-- 组件的厂商名 -->
        <PROPERTY NAME="Vendor" TYPE="s"></PROPERTY>
        <!-- 组件Id -->
        <PROPERTY NAME="Id" TYPE="s"></PROPERTY>
        <!-- 组件索引，用于区分厂商名和Id相同的多个组件 -->
        <PROPERTY NAME="Index" TYPE="y"></PROPERTY>
        <!-- 源端口名（连接到基础组件那一端的端口名） -->
        <PROPERTY NAME="SrcPortName" TYPE="as"></PROPERTY>
        <!-- 目标端口Id（当前组件这一端的端口Id） -->
        <PROPERTY NAME="TargetPortId" TYPE="ay"></PROPERTY>
        <!-- 槽位信息 -->
        <PROPERTY NAME="SlotName" TYPE="s"></PROPERTY>
        <!-- 表示线缆是否配置正确。0：默认值（正常状态），1：线缆部分缺失，2：该组件不存在 -->
        <PROPERTY NAME="Status" TYPE="y"></PROPERTY>
    </CLASS>

	<!-- KVM的USB端口分配 -->
	 <CLASS NAME="KvmUsb">
		<PROPERTY NAME="CdromId" TYPE="y" />
		<PROPERTY NAME="FloppyId" TYPE="y" />
		<PROPERTY NAME="KeyboardMouseId" TYPE="y" />
		<PROPERTY NAME="SpUmsId" TYPE="y" />
		<PROPERTY NAME="iBmaUmsId" TYPE="y" />
	</CLASS>

	<CLASS NAME="PropertyIdSync">
		<!-- 需要向哪些目标同步，填两路canbus对象 -->
		<PROPERTY NAME="SyncDestination"      TYPE="roa"></PROPERTY>
		<!-- 同步模式, bit0:实时同步 bit1:周期同步 -->
		<PROPERTY NAME="SyncMode"      TYPE="y"></PROPERTY>
		<!-- 同步类型, 1：状态同步，2：命令转发 -->
		<PROPERTY NAME="SyncType"      TYPE="y"></PROPERTY>
		<!-- 同步或命令所属的类名 -->
		<PROPERTY NAME="ClassName"      TYPE="s"></PROPERTY>
		<!-- 同步或命令所属对象名 -->
		<PROPERTY NAME="ObjectName"    TYPE="as"></PROPERTY>
		<!-- 同步或命令所属对象的同步ID，每个单板内全局唯一 -->
		<!-- 同步ID左移6位后 加上PropertyName的数据索引得到每个属性的同步ID -->
		<PROPERTY NAME="ObjectSyncId"    TYPE="ay"></PROPERTY>
		<!-- 同步的属性名或 执行命令的命令字，最多64个 -->
		<PROPERTY NAME="PropertyName"    TYPE="as"></PROPERTY>
		<!-- 同步或命令的属性类型，如果是同步属性，可以不用填写，系统会自动从PropertyName属性获取 -->
		<!-- 如果是命令，表示参数类型，从前往后逐个表示参数类型 -->
		<!-- 命令参数类型示例：ysyi 表示第一个参数是y，第二个参数是s，第三个参数是y，第4个参数为i -->
		<!-- 主控接收到命令时会逐个比对参数类型，类型不一致时拒绝执行命令 -->
		<PROPERTY NAME="PropertyType"    TYPE="as"></PROPERTY>
		<!-- 需要同步的属性在对端使用的接收方法，该方法要求第一个参数是属性名，第二个参数是属性值 -->
		<PROPERTY NAME="MethodName"      TYPE="s"></PROPERTY>
		<!-- 主从命令发送接口，只有从控可以往主控发送命令 -->
        <METHOD NAME="SendCommand">
            <!-- 对象名 -->
            <PARAMETER TYPE="s" NAME="ObjectName" DIR="in"/>
            <!-- 属性名 -->
            <PARAMETER TYPE="s" NAME="CommandName" DIR="in"/>
            <!-- ‘*’可以接受1或多个参数，第一个参数必须为CAN超时响应时间(u类型) -->
            <!-- 主控会调用第二个参数指定的方法并返回状态或的output_list -->
            <PARAMETER TYPE="*" NAME="Prameter" DIR="in"/>
            <!-- 响应，任意多个响应 -->
            <PARAMETER TYPE="*" NAME="Response" DIR="out"/>
        </METHOD>
        <METHOD NAME="SfmBroadcastMsg">
            <PARAMETER TYPE="y" NAME="SrcSlot"      DIR="in"/>
            <PARAMETER TYPE="y" NAME="DstSlot"      DIR="in"/>
            <PARAMETER TYPE="y" NAME="DeviceType"   DIR="in"/>
            <PARAMETER TYPE="y" NAME="DeviceNum"    DIR="in"/>
            <PARAMETER TYPE="y" NAME="DataType"     DIR="in"/>
            <PARAMETER TYPE="y" NAME="Data"         DIR="in"/>
        </METHOD>
	</CLASS>

	<!-- 总线管理类 -->
	<CLASS NAME="BusManage">
		<!-- 总线对象 -->
		<PROPERTY NAME="Bus" TYPE="ro" />
		<!-- 总线使能，值为0表示使能 -->
		<PROPERTY NAME="Enable" TYPE="y" />
		<!-- 总线状态，0：正常，bit0：CAN总线心跳丢失, bit1：环回测试失败； -->
		<PROPERTY NAME="State" TYPE="y" />
		<METHOD NAME="SetState">
			<!-- 总线使能 -->
            <PARAMETER TYPE="y" NAME="State" DIR="in"/>
		</METHOD>
		<METHOD NAME="SetEnable">
			<!-- 总线状态 -->
            <PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
		</METHOD>
    </CLASS>

    <!--
        槽位号校正功能只适用于本控槽位号异常，并且框内控制满插的情况.
		以下场景无法进行修复：（1）框内的控制器未插满；
                            （2） 存在两控或两控以上的控制器槽位号相同的情况； 
                            （3）同时出现多个控制器槽位号异常的场景                    
	-->
	<CLASS NAME="SlotIdRepair">
		<!-- 是否为本控 -->
		<PROPERTY NAME="LocalCtrl"           TYPE="y">     </PROPERTY> 
		<!-- 获取本控的slotID 通过0x32寄存器获取 -->
        <PROPERTY NAME="SlotId"              TYPE="y">     </PROPERTY> 
		<!-- 将修复后的SlotId回写到对应的寄存器中 -->
        <PROPERTY NAME="RepairedSlotId"      TYPE="q">     </PROPERTY> 
		<!--  有效的槽位号；判断本控的槽位号是否有效 -->
        <PROPERTY NAME="ValidSlotId"         TYPE="ay">    </PROPERTY>  
		<!-- 控制器的在位信号，通过0x33寄存器获取 -->
        <PROPERTY NAME="ChassisPresentCtrl"  TYPE="y">     </PROPERTY>
    </CLASS>

	<!-- 主板附属CPLD版本类 -->
	<CLASS NAME="CtrlAuxiliaryCpldVer">
		<!-- Modbus Slave ID -->
		<PROPERTY NAME="Id" TYPE="y"> </PROPERTY>
		<!-- CPLD版本寄存器 -->
		<PROPERTY NAME="CpldVerReg"  TYPE="y">		</PROPERTY>	
	</CLASS>

	<!-- 存储仲裁类 -->
	<CLASS NAME="StorageArbitration">
        <!-- 强制停止OS使能 0：不使能，1：使能 -->
        <PROPERTY NAME="ForceRestartEnabled" TYPE="y" />
        <!-- 正在下电标志，用于判断是否屏蔽强制重启OS 非0：正在下电-->
        <PROPERTY NAME="PoweringOffStatus" TYPE="y"/>
		<!-- 强制停止OS结果寄存器，流程开始前需要清零 -->
		<PROPERTY NAME="ForceRestartOsResult" TYPE="y" />
		<!-- 强制停止OS中断保护寄存器，强制停止OS前需要禁用写保护，流程完成后需要打开写保护 -->
		<PROPERTY NAME="ForceRestartOsProtect" TYPE="y" />
		<!-- 强制停止OS中断寄存器，依次写0x02、0x01后CPLD通知BIOS强制关机/备电，备电完成后更新结果寄存器 -->
		<PROPERTY NAME="ForceRestartOs" TYPE="y" />
        <PROPERTY NAME="ForceCpuPowerDown" TYPE="y" />
		<!-- 发送强制停止OS命令 -->
		<METHOD NAME="SetForceRestartOs">
			<PARAMETER TYPE="y" NAME="slotid" DIR="in"/>
		</METHOD>
		<!-- 查询强制停止OS结果 -->
		<METHOD NAME="GetForceRestartOsResult">
			<PARAMETER TYPE="y" NAME="slotid" DIR="in"/>
			<PARAMETER TYPE="i" NAME="result" DIR="out"/>
		</METHOD>
	</CLASS>
    <!--描述：证书管理协议配置(用于从CA服务器自动更新iBMC证书)-->
    <CLASS NAME="CMPConfig">
    	<!-- CA服务器地址(IPv4地址，或IPv6地址，或域名) -->
    	<PROPERTY NAME="CAServerAddr" TYPE="s"></PROPERTY>
    	<!-- CA服务器端口 -->
    	<PROPERTY NAME="CAServerPort" TYPE="u"></PROPERTY>
        <!-- CMP配置路径 -->
    	<PROPERTY NAME="CAServerCMPPath" TYPE="s"></PROPERTY>
    	<!-- CA服务器工作状态：0:异常 1:正常 -->
    	<PROPERTY NAME="ConnectStatus" TYPE="y"></PROPERTY>
    	<!-- CA服务器认证方式：单向:1、双向:2 -->
    	<PROPERTY NAME="TLSAuthType" TYPE="y"></PROPERTY>
    	<!-- 证书自动更新使能状态：0:禁用 1:启用 -->
    	<PROPERTY NAME="AutoUpdateEnabled" TYPE="y"></PROPERTY>
    	<!-- 证书主题：国家 -->
    	<PROPERTY NAME="Country" TYPE="s"></PROPERTY>
    	<!-- 证书主题：州/省份 -->
    	<PROPERTY NAME="State" TYPE="s"></PROPERTY>
    	<!-- 证书主题：城市 -->
    	<PROPERTY NAME="Location" TYPE="s"></PROPERTY>
    	<!-- 证书主题：公司 -->
    	<PROPERTY NAME="OrgName" TYPE="s"></PROPERTY>
    	<!-- 证书主题：部门 -->
    	<PROPERTY NAME="OrgUnit" TYPE="s"></PROPERTY>
    	<!-- 证书主题：常用名 -->
    	<PROPERTY NAME="CommonName" TYPE="s"></PROPERTY>
    	<!-- 证书主题：内部名 -->
    	<PROPERTY NAME="InternalName" TYPE="s"></PROPERTY>
    	<!-- 证书主题：邮箱 -->
    	<PROPERTY NAME="Email" TYPE="s"></PROPERTY>
        <METHOD NAME="SetCMPCfgCAServerAddr">
            <!-- 设置CA服务器地址 -->
            <PARAMETER DIR="in" NAME="CAServerAddr" TYPE="s"/>
        </METHOD>
        <METHOD NAME="SetCMPCfgCAServerPort">
            <!-- 设置CA服务器地址 -->
            <PARAMETER DIR="in" NAME="CAServerPort" TYPE="u"/>
        </METHOD>
        <METHOD NAME="SetCMPCfgCAServerCMPPath">
            <!-- 设置CA服务器CMP路径 -->
            <PARAMETER DIR="in" NAME="CAServerCMPPath" TYPE="s"/>
        </METHOD>
        <METHOD NAME="SetCMPCfgTLSAuthType">
            <!-- 设置CA服务器认证方式 -->
            <PARAMETER DIR="in" NAME="TLSAuthType" TYPE="y"/>
        </METHOD>
        <METHOD NAME="SetCMPCfgAutoUpdateEnabled">
            <!-- 设置证书自动更新使能状态 -->
            <PARAMETER DIR="in" NAME="AutoUpdateEnabled" TYPE="y"/>
        </METHOD>
        <METHOD NAME="SetCMPCfgSubjectInfo">
            <!-- 设置证书主题相关信息：国家 -->
            <PARAMETER DIR="in" NAME="Country" TYPE="s"/>
            <!-- 设置证书主题相关信息：州/省份 -->
            <PARAMETER DIR="in" NAME="State" TYPE="s"/>
            <!-- 设置证书主题相关信息：城市 -->
            <PARAMETER DIR="in" NAME="Location" TYPE="s"/>
            <!-- 设置证书主题相关信息：公司 -->
            <PARAMETER DIR="in" NAME="OrgName" TYPE="s"/>
            <!-- 设置证书主题相关信息：部门 -->
            <PARAMETER DIR="in" NAME="OrgUnit" TYPE="s"/>
            <!-- 设置证书主题相关信息：重用名 -->
            <PARAMETER DIR="in" NAME="CommonName" TYPE="s"/>
            <!-- 设置证书主题相关信息：内部名 -->
            <PARAMETER DIR="in" NAME="InternalName" TYPE="s"/>
            <!-- 设置证书主题相关信息：邮箱 -->
            <PARAMETER DIR="in" NAME="Email" TYPE="s"/>
        </METHOD>
        <!-- 触发证书更新 -->
        <METHOD NAME="UpdateCertFromCA">
        </METHOD>
    </CLASS>
    <CLASS NAME="SoCBoard">
        <PROPERTY NAME="Id" TYPE="y"></PROPERTY>
        <!--计算板类型 0-1951卡-->
        <PROPERTY NAME="Type" TYPE="y"></PROPERTY>
        <PROPERTY NAME="PcbVer" TYPE="s"></PROPERTY>
        <PROPERTY NAME="BoardId" TYPE="q"></PROPERTY>
        <PROPERTY NAME="Manufacturer" TYPE="s"></PROPERTY>
        <PROPERTY NAME="Name" TYPE="s"></PROPERTY>
        <PROPERTY NAME="BoardName" TYPE="s"></PROPERTY>
        <PROPERTY NAME="PartNum" TYPE="s"></PROPERTY>
        <PROPERTY NAME="BomId" TYPE="y"></PROPERTY>
        <PROPERTY NAME="Health" TYPE="y"></PROPERTY>
		<PROPERTY NAME="FaultCode" TYPE="s"></PROPERTY>
		<PROPERTY NAME="FaultState" TYPE="u"></PROPERTY>
		<PROPERTY NAME="HostFaultCode" TYPE="s"></PROPERTY>
        <!-- 故障状态，每个bit一个告警 -->
        <!--bit0 SoC主板一般告警
            bit1 SoC主板严重告警
            bit2 SoC主板紧急告警 -->
		<PROPERTY NAME="HostFaultState" TYPE="u"></PROPERTY>
		<PROPERTY NAME="PowerState" TYPE="y"></PROPERTY>
        <PROPERTY NAME="OobChannel" TYPE="ro"></PROPERTY>
        <PROPERTY NAME="Power" TYPE="q"></PROPERTY>
        <PROPERTY NAME="ChipTemp" TYPE="q"></PROPERTY>
        <PROPERTY NAME="McuSupported" TYPE="y"></PROPERTY>
        <PROPERTY NAME="McuVersion" TYPE="s"></PROPERTY>
        <PROPERTY NAME="SerialNumber" TYPE="s"></PROPERTY>
        <PROPERTY NAME="Description" TYPE="s"></PROPERTY>
        <!-- 1951与bmc共享的双口RAM写地址 -->
		<PROPERTY NAME="SharedRamAddr"  TYPE="y">	</PROPERTY>
		<!-- 写入共享ram的数据 -->
		<PROPERTY NAME="SharedRamData"  TYPE="y">		</PROPERTY>
        <METHOD NAME="MCUReadData">
            <PARAMETER TYPE="q" NAME="Opcode" DIR="in"/>
            <PARAMETER TYPE="y" NAME="TargetLun" DIR="in"/>
            <PARAMETER TYPE="y" NAME="CmgArg" DIR="in"/>	
            <PARAMETER TYPE="ay" NAME="RequestData" DIR="in"/>
            <PARAMETER TYPE="ay" NAME="ResponseData" DIR="out"/>
        </METHOD>
        <METHOD NAME="MCUWriteData">
            <PARAMETER TYPE="q" NAME="Opcode" DIR="in"/>
            <PARAMETER TYPE="y" NAME="TargetLun" DIR="in"/>
            <PARAMETER TYPE="y" NAME="CmgArg" DIR="in"/>    
            <PARAMETER TYPE="ay" NAME="RequestData" DIR="in"/>        
        </METHOD>
        <METHOD NAME="SetHostFaultInfo">
            <PARAMETER TYPE="u" NAME="FaultState" DIR="in"/>
            <PARAMETER TYPE="s" NAME="FaultCode" DIR="in"/>
        </METHOD>
		<METHOD NAME="UploadBootCert">
            <PARAMETER TYPE="s" NAME="CertString" DIR="in"/>
            <PARAMETER TYPE="y" NAME="CertType" DIR="in"/>
        </METHOD>
		<METHOD NAME="GetBootCertStatus">
			<PARAMETER TYPE="y" NAME="CertStatus" DIR="out"/>
		</METHOD>
        <METHOD NAME="SetSecureBoot">
            <PARAMETER TYPE="y" NAME="SecureBoot" DIR="in"/>
        </METHOD>
        <METHOD NAME="GetSecureBoot">
            <PARAMETER TYPE="y" NAME="SecureBoot" DIR="out"/>
        </METHOD>
    </CLASS>
    <!-- 带外管理通道 -->
    <!-- 对带外管理协议描述的i2c, smbus, std_smbus的抽象 -->
    <CLASS NAME="OobChannel">
        <!-- 用于带外管理通信的关联芯片，一般是I2C器件 -->
        <PROPERTY NAME="RefChip" TYPE="ro"></PROPERTY>
        <!-- 与PcieCard.Protocol保持兼容 1-i2c, 2-私有smbus, 3-std_smbus, 4-SDI_CPLD, 5-SDI_MULTI_HOST_CPLD,255-不支持 -->
        <PROPERTY NAME="Protocol" TYPE="y"></PROPERTY>
        <!-- 单帧返回长度，i2c从站的能力 -->
        <PROPERTY NAME="MaxFrameLen" TYPE="u"></PROPERTY>
        <!-- 关联的Connector，非空表示需要通过该Channnel读取BoardId，加载xml -->
        <!-- 通过OobChannel加载的板卡，槽位号应 <= 31 -->
        <PROPERTY NAME="RefConnector" TYPE="ro"></PROPERTY>
    </CLASS>
    <!-- Host管理单元(ME, IMU, SafetyIsland...)抽象 -->
    <!-- 作为MeInfo的等价替代，但是允许配置多个, 支持multihost管理, 允许扩展其他通讯协议 -->
    <CLASS NAME="HostMU">
        <!-- 编号,不重复 -->
        <PROPERTY NAME="Id" TYPE="y"></PROPERTY>
        <!-- 带外管理通道 -->
        <PROPERTY NAME="OobChannel" TYPE="ro"></PROPERTY>
        <!-- 通讯状态 0-正常, 1-FAIL, 2-Driver Load Fail-->
        <PROPERTY NAME="Status" TYPE='y'></PROPERTY>
		<!-- 驱动加载标识，0.驱动加载失败 1.驱动加载完成-->
		<PROPERTY NAME="BootStage" TYPE="y"></PROPERTY>
        <METHOD NAME="GetSystemTime">
            <PARAMETER TYPE="u" NAME="ResponseData" DIR="out"/> 
        </METHOD>
        <METHOD NAME="GetCertInfo">
            <PARAMETER TYPE="ay" NAME="ResponseData" DIR="out"/>
        </METHOD>
    </CLASS>
	
	<CLASS NAME="DataRepair">
        <!-- 需要修复的原始寄存器，关联Accessor -->
        <PROPERTY NAME="OriginReg0"  TYPE="y"></PROPERTY>
        <PROPERTY NAME="OriginReg1"  TYPE="y"></PROPERTY>
        <PROPERTY NAME="OriginReg2"  TYPE="y"></PROPERTY>
        <PROPERTY NAME="OriginReg3"  TYPE="y"></PROPERTY>

        <!-- 修复值写入的寄存器，关联Accessor -->
        <PROPERTY NAME="RepairReg0"  TYPE="y"></PROPERTY>
        <PROPERTY NAME="RepairReg1"  TYPE="y"></PROPERTY>
        <PROPERTY NAME="RepairReg2"  TYPE="y"></PROPERTY>
        <PROPERTY NAME="RepairReg3"  TYPE="y"></PROPERTY>

        <!-- 需要校验的bit mask: MSB-Reg3[7], LSB-Reg0[0] -->
        <PROPERTY NAME="RepairMask"  TYPE="u"></PROPERTY>

        <!-- 校验算法：0-奇校验；1-偶校验； -->
        <PROPERTY NAME="VerifyMethod"  TYPE="y"></PROPERTY>

        <!-- 修复状态：0-未初始化; 1-原始ID校验正确，无需修复; 2-原始ID校验失败，修复中；
             3-原始ID校验失败且修复成功；4-原始ID校验失败且修复失败
        -->
        <PROPERTY NAME="RepairStatus"  TYPE="y"></PROPERTY>
        <METHOD NAME="ReceiveRepairData">
            <PARAMETER TYPE="u" NAME="data" DIR="in"/>
        </METHOD>
    </CLASS>

    <CLASS NAME="SharedFruManager">
        <!-- 禁止弃主状态。共享器件检测过程中，主节点禁止弃主，但升级等特殊场景时不禁止。0-未禁止，其他-禁止 -->
        <PROPERTY NAME="ActiveQuitForbid"     TYPE="y">       </PROPERTY>
        <!-- 共享器件检测模块的状态。0-未初始化，1-检测中，2-检测完成，3-检测被中断 -->
        <PROPERTY NAME="ManageState"                TYPE="y">       </PROPERTY>
        <!-- 当前节点的槽位号，一般关联对应的BOARD.SlotId -->
        <PROPERTY NAME="BoardSlotId"        TYPE="y">       </PROPERTY>
        <!-- 所有节点的槽位号的起始值（一般为0或1）, 用于各个产品槽位号的兼容 -->
        <PROPERTY NAME="BoardSlotIdStart"   TYPE="y">       </PROPERTY>
    </CLASS>

    <CLASS NAME="SharedFruMonitor">
        <!-- 以下两个属性用于定位检测的具体器件，关联具体的"Component"对象的属性 -->
        <!-- 部件设备Number -->
        <PROPERTY NAME="DeviceNum" TYPE="y">                </PROPERTY>
        <!-- 部件类型 -->
        <PROPERTY NAME="DeviceType" TYPE="y">               </PROPERTY>

        <!-- 主节点检测到器件访问失败标志，共享器件检测开始的触发条件，非0时触发主控通知从控检测0，一般关联器件访问失败的表达式 -->
        <PROPERTY NAME="DetectTrigger"      TYPE="y">     </PROPERTY>

        <!-- 是否处于停例测状态，0-未停例测，1-停例测中 -->
        <PROPERTY NAME="RoutineDisabled"    TYPE="y">       </PROPERTY>
        <!-- 设置停例测后的延时时间，单位秒 -->
        <PROPERTY NAME="RoutineStopDelay"   TYPE="y">       </PROPERTY>

        <!-- 主节点通知相应进程停例测类型，0-通过XML限制, 1-类方法, 2-XML和类方法 -->
        <PROPERTY NAME="NoticeType"         TYPE="y">       </PROPERTY>

        <!-- 主节点通知相应进程停例测使用的类名和类方法 -->
        <PROPERTY NAME="NoticeClass"        TYPE="s">       </PROPERTY>
        <PROPERTY NAME="NoticeMethod"       TYPE="s">       </PROPERTY>

        <!-- 共享器件的检测寄存器，关联Accessor -->
        <PROPERTY NAME="DetectChip"         TYPE="ro">      </PROPERTY>
        <PROPERTY NAME="AccessOffset"       TYPE="y">       </PROPERTY>
        <PROPERTY NAME="AccessLength"       TYPE="y">       </PROPERTY>

        <!-- 本节点的检测结果：1-检测失败；0-检测通过 -->
        <PROPERTY NAME="NativeErrorState"   TYPE="y">       </PROPERTY>
        <!-- 所有节点的综合结果：1-检测失败；0-检测通过 -->
        <PROPERTY NAME="FinalErrorState"    TYPE="y">       </PROPERTY>

        <!-- 所有节点的检测结果, 每个bit表示一个节点的结果：1-检测失败；0-检测通过 -->
        <PROPERTY NAME="AllErrorState"      TYPE="u">       </PROPERTY>

        <!-- 器件的检测状态： 0-未检测； 1-检测完成； 2-当前节点准备检测;
             3-当前节点检测中； 4-通知其他节点检测中;
             5- 管理从控检测时由于失去主控而中断; 6-本控检测完成 -->
        <PROPERTY NAME="DetectPhase"        TYPE="y">       </PROPERTY>

        <!-- 主节点通知从节点启动器件检测并返回结果（板间eth通信） -->
        <METHOD NAME="SmmRemoteDetect">
            <PARAMETER TYPE="y" NAME="BoardSlot"    DIR="in"/>
            <PARAMETER TYPE="y" NAME="DeviceType"   DIR="in"/>
            <PARAMETER TYPE="y" NAME="DeviceNum"    DIR="in"/>
            <PARAMETER TYPE="y" NAME="MsgType"      DIR="in"/>
            <PARAMETER TYPE="y" NAME="DetectState"  DIR="out"/>
        </METHOD>
        <!-- 主节点通知从节点器件检测结果（板间eth通信） -->
        <METHOD NAME="SmmSetFinalResult">
            <PARAMETER TYPE="y" NAME="DeviceType" DIR="in"/>
            <PARAMETER TYPE="y" NAME="DeviceNum" DIR="in"/>
            <PARAMETER TYPE="y" NAME="FinalResult" DIR="in"/>
        </METHOD>

        <!-- canbus场景, data_sync2接收CAN消息后调用此方法将消息内容传给本模块 -->
        <METHOD NAME="CanbusMsgRecvCallback">
            <PARAMETER TYPE="y" NAME="SrcSlot"      DIR="in"/>
            <PARAMETER TYPE="y" NAME="DstSlot"      DIR="in"/>
            <PARAMETER TYPE="y" NAME="DeviceType"   DIR="in"/>
            <PARAMETER TYPE="y" NAME="DeviceNum"    DIR="in"/>
            <PARAMETER TYPE="y" NAME="DataType"     DIR="in"/>
            <PARAMETER TYPE="y" NAME="Data"         DIR="in"/>
        </METHOD>
    </CLASS>
    <CLASS NAME="UpgradeFileNameMapping">
        <!-- 升级的固件id -->
        <PROPERTY NAME="ComponentId"        TYPE="y">       </PROPERTY>
        <!-- 当前芯片型号 -->
        <PROPERTY NAME="ChipDeviceId"       TYPE="u">       </PROPERTY>
        <!-- 当前固件所在的板ID -->
        <PROPERTY NAME="BoardId"            TYPE="q">       </PROPERTY> 
        <!-- 该类型芯片的序列号，如菊花链中逻辑芯片的序列号，下标从1开始 -->
        <PROPERTY NAME="ChipNumber"         TYPE="y">       </PROPERTY>
        <!-- 升级使用的文件名 -->
        <PROPERTY NAME="PrimaryFWName"      TYPE="s">       </PROPERTY>
        <!-- 辅助文件的文件名，如逻辑生效文件名 -->
        <PROPERTY NAME="SecondaryFWName"    TYPE="s">       </PROPERTY>
    </CLASS>
    <CLASS NAME="PrefixTreeNode">
        <!-- 字典树类型 0：硬盘调速 -->
        <PROPERTY NAME="TreeType"           TYPE="y">       </PROPERTY>
        <!-- 前缀树节点用于匹配的key -->
        <PROPERTY NAME="Index"              TYPE="as">      </PROPERTY>
        <!-- 前缀树节点的数据 -->
        <PROPERTY NAME="Data"               TYPE="as">      </PROPERTY>
    </CLASS>

    <CLASS NAME="PangeaBoardAdapterTable">
        <PROPERTY NAME="AdapterType" TYPE="y" />
		<PROPERTY NAME="AdapterFruId" TYPE="y" />
        <PROPERTY NAME="AdapterObjArray" TYPE="roa" />
        <PROPERTY NAME="AdapterTypeArray" TYPE="ay" />
    </CLASS>

    <CLASS NAME="GroupEepStorage">
        <PROPERTY NAME="EepGroupId" TYPE="u" />
        <PROPERTY NAME="EepObjArray" TYPE="roa" />
        <PROPERTY NAME="EepObjCount" TYPE="y"/>
        <!-- 背板信息起始偏移地址 -->
        <PROPERTY NAME="EepOffset" TYPE="u" />
        <!-- 背板信息长度 -->
        <PROPERTY NAME="DataLength" TYPE="u"/>
        <!-- 背板信息数据值 -->
        <PROPERTY NAME="EepValue" TYPE="ay"/>
        <!-- 关联写入目标CPLD Accessor -->
        <PROPERTY NAME="AccessorObj" TYPE="roa" />
		<!-- 背板关键信息标志，bit0：上电时读取写入逻辑 bit1：复位bmc读取写入逻辑 bit2：立即更新逻辑 -->
		<PROPERTY NAME="KeyInfoFlag" TYPE="y"/>
		<!-- 对应value的index值，index只能引用类型为y的带value属性的对象数组-->
        <PROPERTY NAME="EepValueIndex" TYPE="roa" />
        <!-- 是否已从背板中更新数据 -->
        <PROPERTY NAME="EepDataSync" TYPE="y"/>
        <!-- 背板数据是否存在版本号 -->
        <PROPERTY NAME="EepHasVersion" TYPE="y"/>
        <!-- 数据版本号（根据版本号大小来区分新旧数据） -->
        <PROPERTY NAME="DataVersion" TYPE="q"/>
        <!-- 背板清除标记：逆向清除时是否清除 0 不清除 1 清除 -->
        <PROPERTY NAME="ClearFlag" TYPE="y"/>
        <!-- 背板数据同步方法 -->
        <METHOD NAME="SysBackPlanePropertySync">
		    <PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
        <!-- 关键数据初始化方法 配合KeyInfoFlag使用 -->
        <METHOD NAME="KeyProcuctInfoInit">
            <PARAMETER TYPE="y" NAME="KeyInfoFlag" DIR="in"/>
		</METHOD>
        <!-- 写入eeprom数据 -->
		<METHOD NAME="SetEepromStorageValue">
            <PARAMETER TYPE="*" NAME="SetData" DIR="in"/>
        </METHOD>
         <!-- 获取eeprom数据 -->
		<METHOD NAME="GetEepromStorageValue">
            <PARAMETER TYPE="*" NAME="OutData" DIR="out"/>
        </METHOD>
    </CLASS>

    <!-- 描述：背板EEPROM中存储的产品定制化信息所属模块：Frame_mgnt模块(frame_mgnt), 字段定义方式见 tagEEPROM_DATA_TYPE_E -->
	<CLASS NAME="EepromStorage">
        <!-- 存储介质 -->
        <PROPERTY NAME="EepStorageLoc"     TYPE="y"/>
        <!-- EERPOM写保护硬件对象 -->
        <PROPERTY NAME="EepromWp"       TYPE="y"/>
    </CLASS>
<CLASS NAME ="DiskStorage">
    <PROPERTY NAME="FruId" TYPE="y"></PROPERTY>
    <PROPERTY NAME="Present" TYPE="y"></PROPERTY>
    <PROPERTY NAME="PstChange" TYPE="y"></PROPERTY>
    <PROPERTY NAME="PwrState" TYPE="y"></PROPERTY>
    <PROPERTY NAME="AttButton" TYPE="y"></PROPERTY>
    <PROPERTY NAME="AlarmLedAddr" TYPE="u"></PROPERTY>
    <PROPERTY NAME="LocateLedAddr" TYPE="u"></PROPERTY>
    <PROPERTY NAME="HotplugLedAddr" TYPE="u"></PROPERTY>
    <PROPERTY NAME="DiskType" TYPE="y"></PROPERTY>
    <METHOD NAME="GetDiskBasicInfo">   </METHOD>
    <METHOD NAME="CtrlDiskPower">
        <PARAMETER TYPE="y" NAME="diskid" DIR="in"/>
        <PARAMETER TYPE="y" NAME="powerctrl" DIR="in"/>
    </METHOD>
</CLASS>

	<!--整框上下电管理，管理板使用-->
	<CLASS NAME="ShelfPayload">
		<!--整框上下电状态0:下电, 1:上电-->
		<PROPERTY NAME="ShelfPowerState" TYPE="y"/>
        <!--状态机的状态变化-->
		<PROPERTY NAME="ShelfPayloadProcess" TYPE="y"/>
		<!--整框是否在下电流程 0:未处于下电中，1:下电中 -->
		<PROPERTY NAME="ShelfIsPowerOffing" TYPE="y"/>
        <!--上电条件 0:不允许节点上电，1:允许节点上电-->
        <PROPERTY NAME="PowerOnConditions" TYPE="y"/>
		<!--框短按钮事件 -->
		<PROPERTY NAME="ShelfShortButtonEvt" TYPE="y"/>
		<!--框短按钮清除 -->
		<PROPERTY NAME="ShelfShortButtonClear" TYPE="y"/>
		<!--框短长钮事件 -->
		<PROPERTY NAME="ShelfLongButtonEvt" TYPE="y"/>
		<!--框短长钮清除 -->
		<PROPERTY NAME="ShelfLongButtonClear" TYPE="y"/>
		<!--AC掉电事件 -->
		<PROPERTY NAME="ShelfAcDownEvt" TYPE="y"/>
        <!--区分真实ACDOWN与模拟ACDOWN标志 -->
        <PROPERTY NAME="ShelfAcDownFlag" TYPE="y"/>
        <!--按钮控制模式 0:bmc管理 1:上报按钮事件-->
        <PROPERTY NAME="ShelfPowerButtonMode" TYPE="y"/>
		<METHOD NAME="ShelfPowerControl">
            <PARAMETER TYPE="y" NAME="control"    DIR="in"/>
        </METHOD>
        <METHOD NAME="SetButtonMode">
            <PARAMETER TYPE="y" NAME="mode"    DIR="in"/>
        </METHOD>
        <!-- 整框上下电状态同步 -->
		<METHOD NAME="ShelfPayloadStateSync">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
        <!-- 整框上下电持久化属性同步 -->
        <METHOD NAME="ShelfPayloadSaveSync">
			<PARAMETER TYPE="*" NAME="*" DIR="in"/>
		</METHOD>
	</CLASS>
    <!-- 同步管理板状态 -->
    <CLASS NAME="IpmbEthStorage">
        <!-- 槽位号信息 -->
       <PROPERTY NAME="SlotId" TYPE='y'>			</PROPERTY>
        <!-- IPMBEth 对应的slave address -->
       <PROPERTY NAME="SlaveAddr" TYPE='y'>			</PROPERTY>
       <!-- BMC的在位信息 -->
       <PROPERTY NAME="Presence"  TYPE="y">		</PROPERTY>
       <!-- cpld告警状态 -->
       <PROPERTY NAME="CpldStatus"  TYPE="y">		</PROPERTY>
       <!-- uce告警状态 -->
       <PROPERTY NAME="UceStatus"  TYPE="y">		</PROPERTY>
   </CLASS>
   <CLASS NAME="PhyClockConf">
        <!--Rmii对接的1711 配置复用的网口num -->
        <PROPERTY NAME="EthNum"                 TYPE="y">       </PROPERTY>
        <!--Rmii时钟选择， 0: 外部时钟, 1: 内部时钟，其他：无效值 -->
        <PROPERTY NAME="RmiiClkConf"          TYPE="y">       </PROPERTY>
        <!--Rmii时钟发送配置, 0：上升沿发送 1：下降沿发送，其他：无效值 -->
        <PROPERTY NAME="RmiiClkEdgeSel"         TYPE="y">       </PROPERTY>
        <!--Rmii驱动能力配置 -->
        <PROPERTY NAME="RmiiDriPower"           TYPE="y">       </PROPERTY>
    </CLASS>

    <!-- CPLD热升级数据回填 -->
    <CLASS NAME="CpldUpgradeCollect">
        <!-- 需要备份寄存器List -->
        <PROPERTY NAME="KeyReg" 		TYPE="au">	   	  	  </PROPERTY>
        <!--可能涉及的写保护寄存器List -->
        <PROPERTY NAME="KeyWPReg" 		TYPE="au">	   	  	  </PROPERTY>
        <!-- 需要备份寄存器数量（用作验证） -->
        <PROPERTY NAME="KeyRegCount" 	TYPE="q">	   	  	  </PROPERTY>
        <!-- 需要备份写保护寄存器数量（用作验证） -->
        <PROPERTY NAME="KeyWPRegCount" 	TYPE="q">	   	  	  </PROPERTY>
    </CLASS>


    <!-- 盘古升级类 -->
    <CLASS NAME="PangeaUpgrade">
        <!-- 盘古传递给iBMC升级模块 获取当前待升级对象 -->
        <METHOD NAME="GetUpgradeObjects">
            <PARAMETER TYPE="*" NAME="*" DIR="out"/>
        </METHOD>
    </CLASS>

    <!-- TPCM配置信息类 -->
    <CLASS NAME="TPCMConfig" ID="148">
        <!-- 外部可信中心地址 -->
        <PROPERTY NAME="TrustedCenterServerAddr" TYPE="s" />
        <!-- 度量开关, 0:关闭 1:打开 -->
        <PROPERTY NAME="MeasureEnable" TYPE="y" ID="1" EXPORT="17"/>
        <!-- 控制动作, 0:关闭 1:打开 -->
        <PROPERTY NAME="ControlAction" TYPE="u" ID="2" EXPORT="17"/>
        <!-- 设置TPCM tsb组件ip -->
        <METHOD NAME="SetTPCMTsbIp">
            <!-- 配置的ip地址信息 -->
            <PARAMETER TYPE="s" NAME="ipinfo" DIR="in"/>
        </METHOD>
        <!-- 设置TPCM tsb组件开关 -->
        <METHOD NAME="SetTPCMTsbEnable" ID="1">
            <!-- 配置的开关状态, 0:关闭 1:打开 -->
            <PARAMETER TYPE="y" NAME="Enable" DIR="in"/>
        </METHOD>
        <!-- 设置TPCM tsb组件开关 -->
        <METHOD NAME="SetTPCMTsbAction" ID="2">
            <!-- 配置的动作, 0:关闭 1:打开 -->
            <PARAMETER TYPE="u" NAME="Action" DIR="in"/>
        </METHOD>
    </CLASS>

    <!-- TPCM基本信息类 -->
    <CLASS NAME="TPCMBaseInfo">
        <!-- TCM厂商 -->
        <PROPERTY NAME="TCMManufacturer" TYPE="q" />
        <!-- TCM版本 -->
        <PROPERTY NAME="TCMVersion" TYPE="u" />
        <!-- TPCM Log版本 -->
        <PROPERTY NAME="TPCMLogVersion" TYPE="u" />
		<!-- TSB使能状态 0-Disable 1-Enable -->
		<PROPERTY NAME="TsbEnableStatus" TYPE="y" />
        <!-- 获取TPCM支持状态 -->
        <METHOD NAME="GetTpcmSupportState">
            <!-- 0代表不支持，1代表支持 -->
            <PARAMETER TYPE="y" NAME="TpcmSupportState" DIR="out"/>
        </METHOD>
    </CLASS>

    <!-- TPCM度量信息类 -->
    <CLASS NAME="TPCMMeasured">
        <!-- 启动度量对象 -->
        <PROPERTY NAME="MeasuredObject" TYPE="s" />
        <!-- 度量对象版本号 -->
        <PROPERTY NAME="ObjectVersion" TYPE="s" />
        <!-- PCR名 -->
        <PROPERTY NAME="PCRName" TYPE="s" />
        <!-- 实际度量值（杂凑） -->
        <PROPERTY NAME="ActualDigest" TYPE="s" />
        <!-- 基准值（杂凑） -->
        <PROPERTY NAME="StandardDigest" TYPE="s" />
        <!-- 度量结果 -->
        <PROPERTY NAME="CompResult" TYPE="y" />
        <!-- 控制命令 -->
        <PROPERTY NAME="CtrlCommand" TYPE="y" />
        <!-- 设置TPCM 度量阶段基准值 -->
        <METHOD NAME="SetStandardDigest">
            <!-- 固件类型 -->
            <PARAMETER TYPE="y" NAME="type" DIR="in"/>
            <!-- 固件度量值 -->
            <PARAMETER TYPE="s" NAME="digest" DIR="in"/>
        </METHOD>
        <!-- 设置TPCM bios基准值(用于bios升级时刷新) -->
        <METHOD NAME="SetBIOSDigest"> </METHOD>
    </CLASS>

    <CLASS NAME="BiosUpgradeSwitch">
        <!-- FTCPU区分xP机型，有效值1-n，非FT架构直接配0 -->
        <PROPERTY NAME="ProcessorCount" TYPE="y"> </PROPERTY>
        <PROPERTY NAME="BiosFlashSwitch" TYPE="y"> </PROPERTY>
        <PROPERTY NAME="SwitchLock" TYPE="y"> </PROPERTY>
        <METHOD NAME="SetBiosFlashSwitch">
            <PARAMETER TYPE="y" NAME="FlashIndex" DIR="in"/>
        </METHOD>
        <METHOD NAME="SetSwitchLock">
            <PARAMETER TYPE="y" NAME="State" DIR="in"/>
        </METHOD>
    </CLASS>
    <!-- 液冷设备类 -->
    <CLASS NAME="LiquidCoolingUnits">
        <!-- 液冷控制设备类型 0:泵-->         
        <PROPERTY NAME="type"  TYPE='y'>               </PROPERTY>
        <!-- 液冷设备转速 -->     
        <PROPERTY NAME="Speed" TYPE='q'>               </PROPERTY>
        <!-- 占空比 -->         
        <PROPERTY NAME="PWM"  TYPE='y'>               </PROPERTY>
        <!-- 设置硬件占空比 -->         
        <PROPERTY NAME="PWMHW"  TYPE='u'>               </PROPERTY>        
        <!-- 槽位 -->           
        <PROPERTY NAME="Slot"  TYPE="y">                 </PROPERTY> 
        <!-- 在位信息-->   
        <PROPERTY NAME="Presence" TYPE="y">                 </PROPERTY> 
        <!-- 健康信息-->   
        <PROPERTY NAME="Health" TYPE="y">                 </PROPERTY> 
    </CLASS>

    <CLASS NAME="LiquidCoolingUnitsController">
        <!-- 液冷设备转速级别 -->     
        <PROPERTY NAME="Level" TYPE='y'>               </PROPERTY>
        <!-- 液冷设备调速模式：0自动，1手动 -->         
        <PROPERTY NAME="Mode"  TYPE='y'>               </PROPERTY>
        <!-- 液冷设备默认转速 -->         
        <PROPERTY NAME="DefaultLevel"  TYPE='y'>               </PROPERTY>
        <!-- 液冷设备默认PWM最大值 -->         
        <PROPERTY NAME="MaxSupportPWM"  TYPE='y'>               </PROPERTY>
        <!-- 方法：设置液冷设备转速--> 
        <METHOD NAME="SetLCULevel">
            <PARAMETER TYPE="y" NAME="Level" DIR="in"/>
        </METHOD>        
    </CLASS>

    <!-- PANGEA接口卡-->
    <CLASS NAME="PangeaCard">
        <!-- 接口卡FruID -->
        <PROPERTY NAME="FruId"              TYPE="y">              </PROPERTY>        
        <!-- 接口卡槽位ID-->
        <PROPERTY NAME="SlotId"             TYPE="y">              </PROPERTY>
        <!--接口卡在位情况-->
        <PROPERTY NAME="Present"            TYPE="y">              </PROPERTY>
        <!--快速拔插标记-->
        <PROPERTY NAME="PstChange"          TYPE='y'>              </PROPERTY>
        <!--卡上电标识InsertOK-->
        <PROPERTY NAME="InsertOK"           TYPE="y">              </PROPERTY>
        <!--InsertOK写保护寄存器-->
        <PROPERTY NAME="InsertOKWp"         TYPE="y">              </PROPERTY>
        <!--PCB版本号-->
        <PROPERTY NAME="PCBVer"             TYPE="y">              </PROPERTY>
        <!--PCB-->
        <PROPERTY NAME="PCB"                TYPE="s">              </PROPERTY>
        <!--接口卡类型-->
        <PROPERTY NAME="Type"               TYPE="q">              </PROPERTY>
        <!--接口卡Qos信息(速率、模式)-->
        <PROPERTY NAME="QosInfo"            TYPE='ay'>		       </PROPERTY>
        <!--核心温度值-->
        <PROPERTY NAME="CoreTemperature"    TYPE="q">              </PROPERTY>
        <!--光模块温度值-->
        <PROPERTY NAME="OpticalTemperature" TYPE="q">              </PROPERTY>
        <!--电子保单开始日期-->
        <PROPERTY NAME="EInsStart"          TYPE='s'>              </PROPERTY>
        <!--电子保单服务期限-->
        <PROPERTY NAME="EInsDuration"       TYPE='s'>              </PROPERTY>
        <!--9555PowerGood标记-->
        <PROPERTY NAME="PowerGood"          TYPE="y">              </PROPERTY>
        <!--电源接通标记-->
        <PROPERTY NAME="PowerOn"            TYPE="y">              </PROPERTY>
        <!--自描述-->
        <PROPERTY NAME="HwDesc"             TYPE='ay'>		      </PROPERTY>
        <!--关联9555-->
        <PROPERTY NAME="Res9555"            TYPE="ro">             </PROPERTY>
        <!--关联eeprom-->
        <PROPERTY NAME="ResEeprom"          TYPE="y">             </PROPERTY>
        <!--eeprom写保护-->
        <PROPERTY NAME="EepromWp"           TYPE="y">              </PROPERTY>
        <PROPERTY NAME="TypeErr"          TYPE="y">              </PROPERTY>
        <PROPERTY NAME="Connector"          TYPE="ro">             </PROPERTY>
    </CLASS>

    <CLASS NAME="CpldSpaceTest">
        <!-- 需要升级的cpld的序号 -->
        <PROPERTY NAME="CpldIndex"              TYPE="y">               </PROPERTY>
        <!-- 当前支持cpld全资源检测的芯片厂家：0：anlu, 1:pango-->
        <PROPERTY NAME="Manufacturer"           TYPE="y">               </PROPERTY>
        <!-- 升级使用的文件名 -->
        <PROPERTY NAME="PrimaryFileFWName"      TYPE="as">              </PROPERTY>
        <!-- 检测结果的管脚 -->
        <PROPERTY NAME="ResultGPIO"             TYPE="u">               </PROPERTY>
        <!-- 辅助升级使用的文件名 -->
        <PROPERTY NAME="SecondaryFWNmae"        TYPE="as">              </PROPERTY>
        <!-- 检测的结果 0:正常，1 异常, 2不支持， 3检测中 -->
        <PROPERTY NAME="TestResult"             TYPE="y">               </PROPERTY>
        <!-- 触发检测的管脚 -->
        <PROPERTY NAME="TriggerGPIO"            TYPE="u">               </PROPERTY>
        <!-- 检测等待时间：毫秒 -->
        <PROPERTY NAME="WaitTime"               TYPE="u">               </PROPERTY>
    </CLASS>
    
	<CLASS NAME="DetectHardWare">
        <!-- 关联硬件Accessor -->
        <PROPERTY NAME="RefAccessor" TYPE="y"></PROPERTY>
        <!-- 最多侦测重试次数 -->		
        <PROPERTY NAME="Count" TYPE="y"></PROPERTY>
        <!-- 侦测类型，对应比特位值为1：需要检测， 0：不需要检测 -->
        <!-- bit[0]: 硬件在位检测 -->
        <!-- bit[1]: 天池eeprom数据完整性与有效性检测 -->
		<PROPERTY NAME="DetectType" TYPE="y"></PROPERTY>
		<!-- 侦测结果， 0：不存在该硬件；1：存在该硬件 -->
		<PROPERTY NAME="DetectResult" TYPE="y"></PROPERTY>
		<!-- 侦测状态，0：默认状态；1：侦测完成；要先设置侦测结果再更新侦测完成状态 -->
		<PROPERTY NAME="Status" TYPE="y"></PROPERTY>
		<!-- 从关联硬件读取到的数据 -->
		<PROPERTY NAME="Data" TYPE="*"></PROPERTY>
	</CLASS>

	<CLASS NAME="MctpDevOperate">
        <!-- 黑匣子收集进度条 -->
        <PROPERTY NAME="BlackBoxProcessbar" TYPE="y"> </PROPERTY>
        <!-- 黑匣子收集方法 -->
        <METHOD NAME="GetBlackBox">
            <!-- 文件名 -->
            <PARAMETER TYPE="s" NAME="Filename" DIR="out"/>
        </METHOD>
    </CLASS>
    <!-- DVFS功能相关VRD信息 -->
    <CLASS NAME="DVFSFunction">
       <PROPERTY NAME="CpuId" TYPE='y'>			</PROPERTY>
       <!-- 从imu获取VDDAVS温度 -->
       <PROPERTY NAME="AvsTemp" TYPE='q'>			</PROPERTY>
       <!-- 从imu获取VDDAVS电压 -->
       <PROPERTY NAME="AvsVolt"  TYPE="q">		</PROPERTY>
       <!-- 从imu获取VDDAVS功耗 -->
       <PROPERTY NAME="AvsPower"  TYPE="q">		</PROPERTY>
       <!-- 从imu获取VDDAVS电流 -->
       <PROPERTY NAME="AvsCurrent"  TYPE="q">		</PROPERTY>
       <!-- DVFS使能标志 -->
       <PROPERTY NAME="DVFSEnable"  TYPE="y">		</PROPERTY>
   </CLASS>
</CLASSTREE>
