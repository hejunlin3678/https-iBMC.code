#!/bin/bash
# test ut
# Copyright © Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.

# global const define
G_RELATIVE_DIR="../../"
G_CURRENT_DIR=$(dirname "$(realpath $0)")
G_CODE_BASE=$(realpath ${G_CURRENT_DIR}/${G_RELATIVE_DIR}) # 代码仓路径
G_TEST_TREE_DIR="${G_CODE_BASE}/test_tree"
G_OPEN_SDK_DIR="${G_CODE_BASE}/application/sdk"
G_TEST_OUTPUT_DIR="${G_TEST_TREE_DIR}/output/coverage/"
# kvm
KVM_PATH="${G_CODE_BASE}/tools/others/dev_tools/llt/java_test"
KVM_REPORT="$KVM_PATH/report/html/all-tests.html"
# static_insert_stub tool 
STATIC_INSERT_DIR="${G_CODE_BASE}/tools/others/dev_tools/llt/static_insert_stub"
# env
export LD_LIBRARY_PATH="${G_TEST_TREE_DIR}/unit_test/opt/bmc/lib" # 此处不需要拼接LD_LIBRARY_PATH,防止环境变量存在默认值导致链接到系统路径下的库文件
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${G_TEST_TREE_DIR}/unit_test/opt/pme/lib"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${G_TEST_TREE_DIR}/unit_test/usr/lib"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${G_CODE_BASE}/tools/others/dev_tools/llt/dtcenter/lib"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${G_OPEN_SDK_DIR}/PME/V100R001C10/x86/lib"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:$G_CODE_BASE/tools/others/dev_tools/llt/pme/lib"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/lib/"
# file
TEST_RESULT="${G_TEST_TREE_DIR}/output/test_result.log"
TEST_FLAG=""
# 脚本名称
G_SCRIPT_NAME="$0"
# 无需DT场景生成桩index.xml文件
G_STUB_INDEX_XML=$(cat << EOF
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <title>LCOV - coverage.info</title>
  <link rel="stylesheet" type="text/css" href="gcov.css">
</head>
<body>
  <table width="100%" border=0 cellspacing=0 cellpadding=0>
    <tr><td class="title">LCOV - code coverage report</td></tr>
    <tr><td class="ruler"><img src="glass.png" width=3 height=3 alt=""></td></tr>
    <tr>
      <td width="100%">
        <table cellpadding=1 border=0 width="100%">
          <tr>
            <td width="10%" class="headerItem">Current view:</td>
            <td width="35%" class="headerValue">top level</td>
            <td width="5%"></td>
            <td width="15%"></td>
            <td width="10%" class="headerCovTableHead">Hit</td>
            <td width="10%" class="headerCovTableHead">Total</td>
            <td width="15%" class="headerCovTableHead">Coverage</td>
          </tr>
          <tr>
            <td class="headerItem">Test:</td>
            <td class="headerValue">coverage.info</td>
            <td></td>
            <td class="headerItem">Lines:</td>
            <td class="headerCovTableEntry">0</td>
            <td class="headerCovTableEntry">0</td>
            <td class="headerCovTableEntryLo">100.0 %</td>
          </tr>
          <tr>
            <td class="headerItem">Date:</td>
            <td class="headerValue">2021-09-22 02:20:51</td>
            <td></td>
            <td class="headerItem">Functions:</td>
            <td class="headerCovTableEntry">0</td>
            <td class="headerCovTableEntry">0</td>
            <td class="headerCovTableEntryLo">100.0 %</td>
          </tr>
          <tr>
            <td></td>
            <td></td>
            <td></td>
            <td class="headerItem">Branches:</td>
            <td class="headerCovTableEntry">0</td>
            <td class="headerCovTableEntry">0</td>
            <td class="headerCovTableEntryLo">100.0 %</td>
          </tr>
          <tr><td><img src="glass.png" width=3 height=3 alt=""></td></tr>
        </table>
      </td>
    </tr>
    <tr><td class="ruler"><img src="glass.png" width=3 height=3 alt=""></td></tr>
  </table>
  <table width="100%" border=0 cellspacing=0 cellpadding=0>
    <tr><td class="ruler"><img src="glass.png" width=3 height=3 alt=""></td></tr>
    <tr><td class="versionInfo">Generated by: <a href="http://ltp.sourceforge.net/coverage/lcov.php">LCOV version 1.13</a></td></tr>
  </table>
  <br>
</body>
</html>
EOF
)

# function
clear(){
    rm -rf "${G_TEST_TREE_DIR}/output"
}

init_env(){
    clear > /dev/null 2>&1
    ulimit -c unlimited
    mkdir -p ${G_TEST_OUTPUT_DIR}
    touch ${TEST_RESULT} # 第一次生成文件时概率性出错，因此这里先创建文件避免出错
    
    # clear test running env
    bash ${G_CURRENT_DIR}/unit_test/clear_dt_env.sh
}

check_test_result(){
    # 用例未跑完的情况
    grep -q "\-\-\-  RESULT  \-\-\-" ${TEST_RESULT}
    if [ $? -ne 0 ]
    then
        echo ""
        echo "=============================!TEST UNCOMPLETED!============================="
        echo "Something wrong may happen, please check your testcases"
        exit 1
    fi
    
    # 存在失败用例
    grep -q "\[  FAILED  \]" ${TEST_RESULT}
    if [ $? -eq 0 ]
    then
        echo ""
        echo "=============================!TEST COMPLETED: FAILED!============================="
        exit 1
    else
        echo ""
        echo "=============================!TEST COMPLETED: SUCCESS!============================="
    fi
    echo > ${TEST_RESULT}
}

enable_fuzz_test(){
    export ASAN_OPTIONS="${ASAN_OPTIONS}:halt_on_error=0"
    export ASAN_OPTIONS="${ASAN_OPTIONS}:use_sigaltstack=0"
    export ASAN_OPTIONS="${ASAN_OPTIONS}:fast_unwind_on_fatal=1"
    export ASAN_OPTIONS="${ASAN_OPTIONS}:fast_unwind_on_check=1"
    export ASAN_OPTIONS="${ASAN_OPTIONS}:fast_unwind_on_malloc=1"
    export ASAN_OPTIONS="${ASAN_OPTIONS}:malloc_context_size=15"
    export ASAN_OPTIONS="${ASAN_OPTIONS}:detect_leaks=0"
    export ASAN_OPTIONS="${ASAN_OPTIONS}:detect_stack_use_after_return=1"
    export ASAN_OPTIONS="${ASAN_OPTIONS}:log_path=/usr1/asanlog/"
    export UBSAN_OPTIONS="log_path=/usr1/asanlog/"
}

gtest_flags() {
    TEST_FLAG="--gtest_color=yes"
    TEST_FLAG="${TEST_FLAG} --gtest_output=xml:${G_TEST_OUTPUT_DIR}"
    TEST_FLAG="${TEST_FLAG} --gtest_repeat=1" # 单次用例执行次数，便于发现隐藏问题
    TEST_FLAG="${TEST_FLAG} --gtest_shuffle=0" # 随机化用例执行次序
    TEST_FLAG="${TEST_FLAG} --gtest_print_time=1"
    TEST_FLAG="${TEST_FLAG} --gtest_filter=$FILTER"
    TEST_FLAG="${TEST_FLAG} --gtest_break_on_failure" # 失败立刻停止
}

# 生成桩test_detail.xml
gen_stub_test_detail()
{
    echo "generate stub test_detail.xml"
    local test_detail="${G_TEST_TREE_DIR}/standard_all_coverage/test_detail.xml"
    echo "<?xml version=\"1.0\" encoding=\"GB2312\"?>" > "${test_detail}"
    echo "<testsuite tests=\"1\" runtests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"0\" name=\"AllTests\">" >> "${test_detail}"
    echo "</testsuite>" >> "${test_detail}"
}

# 生成桩index.html
gen_stub_index()
{
    echo "generate stub index.html"
    local index_file="${G_TEST_TREE_DIR}/standard_all_coverage/index.html"
    echo ${G_STUB_INDEX_XML} > ${index_file}
}

# 生成空报告，无需进行DT测试时输出空报告，确保门禁检测不会出现异常
gen_stub_report()
{
    if [[ ! -d ${G_TEST_TREE_DIR}/standard_all_coverage ]]; then
        mkdir -p ${G_TEST_TREE_DIR}/standard_all_coverage
    fi

    gen_stub_test_detail
    gen_stub_index
}

test_apps(){
    if [ ! -d ${G_TEST_TREE_DIR}/unit_test/opt/pme/apps/ ]; then
        gen_stub_report
        echo "${G_TEST_TREE_DIR}/unit_test/opt/pme/apps/ not exist, no apps need to be tested, ${G_SCRIPT_NAME} exit normally"
        exit 0
    fi
    cd ${G_TEST_TREE_DIR}/unit_test/opt/pme/apps/ || exit 1
    files=$(ls . | grep '_o$')
    gtest_flags
    for file in $files
    do
        echo "run test_file ${file}..............."
        echo ${LD_LIBRARY_PATH}
        ./$file ${TEST_FLAG}| tee -a ${TEST_RESULT}
        check_test_result
    done
    cd - || exit 1
    gen_coverage_stub
}

gen_coverage_stub() {
    local file=${G_TEST_TREE_DIR}/unit_test/opt/pme/apps/store.JSON
    if [[ -f $file ]]; then
        cd ${G_TEST_TREE_DIR} || exit 1
        python ${STATIC_INSERT_DIR}/toJSON.py $file
        echo "function and test case map file generated: ${G_TEST_TREE_DIR}/testFuncMap.json"
    fi
}

usage() {
    echo "Usage:[ -a | --app APP ]"
    echo "      [ -b | --board BOARD ]"
    echo "      [ -d | --enable-debug ]"
    echo "      [ -f | --filter TEST_NAME_PATTERN ]"
    echo "      [ --enable-fuzz ]"
    exit 2
}

# Run main function
APP="all"
BOARD="2288hv5"
ENABLE_FUZZ=0
ENABLE_DEBUG=0
FILTER="*"   # 过滤测试名,支持通配符*-等，如TEST_F(A,B)的测试名为AB， 可用A*匹配过滤

PARSED_ARGUMENTS=$(getopt --options a:b:f:d --longoptions app:,board:,filter:,enable-fuzz,enable-debug -- "$@")
VALID_ARGUMENTS=$?
if [ "$VALID_ARGUMENTS" != 0 ]; then
    usage
fi

echo "PARSED_ARGUMENTS is $PARSED_ARGUMENTS"
eval set -- "$PARSED_ARGUMENTS"
while true; do
    case "$1" in
    -a | --app)
        APP=$2
        shift 2
        ;;
    -b | --board)
        BOARD=$2
        shift 2
        ;;
    -d | --enable-debug)
        ENABLE_DEBUG=1
        shift
        ;;
    --enable-fuzz)
        ENABLE_FUZZ=1
        shift
        ;;
    -f | --FILTER)
        FILTER=$2
        shift 2
        ;;
    --)
        shift
        break
        ;;
    *)
        echo "Unexpected option: $1 - this should not happen."
        usage
        ;;
    esac
done
if [[ $1 != "" ]]; then
    APP="$1"
fi
echo "APP            : $APP"
echo "BOARD          : $BOARD"
echo "ENABLE_FUZZ    : $ENABLE_FUZZ"
echo "FILTER         : $FILTER"
echo "Parameters remaining are: $*"
if [[ $ENABLE_DEBUG == 1 ]]; then
    set -x
fi

init_env
# 判断是否为java模块的LLT
if [[ "${APP}" == "kvm_client" ]];then
    bash ${G_CURRENT_DIR}/test_UT_kvm.sh "${KVM_PATH}" "${KVM_REPORT}"
    exit 0
fi

if [[ "${ENABLE_FUZZ}" == 1 ]];then
    enable_fuzz_test
fi

test_apps
